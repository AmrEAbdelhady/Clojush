Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[29 37 37 37] 29] [[-95 -95 43 -95] -95] [[-35 -35 -35 -85] -85] [[-59 -59 69 -59] -59] [[-22 -22 -22 52] -22] [[54 -6 -6 -6] -6] [[78 -16 -16 -16] -16] [[-55 38 -55 -55] -55] [[26 -83 -83 -83] -83] [[82 82 44 82] 44] [(-83 -83 -83 -83) -83] [(-14 -14 -14 -14) -14] [(-90 -90 -90 -90) -90] [(1 1 1 1) 1] [(-45 -45 -45 -45) -45] [(90 8 72 66) 8] [(18 37 77 64) 18] [(44 83 26 28) 26] [(37 50 91 76) 37] [(62 0 55 81) 0] [(18 26 84 52) 18] [(2 45 32 74) 2] [(80 80 81 15) 15] [(21 49 20 83) 20] [(2 5 90 75) 2] [(64 51 37 77) 37] [(21 18 79 12) 12] [(11 30 40 45) 11] [(0 7 45 12) 0] [(77 85 53 48) 48] [(17 10 89 40) 10] [(27 19 58 19) 19] [(56 66 61 29) 29] [(17 11 10 66) 10] [(58 98 0 7) 0] [(82 5 -38 -18) -38] [(17 -8 82 -5) -8] [(-29 84 -100 49) -100] [(45 -98 -40 88) -98] [(-34 49 29 -17) -34] [(61 11 82 27) 11] [(56 22 89 -7) -7] [(-59 -33 -60 -90) -90] [(-15 64 62 63) -15] [(-17 -55 91 -43) -55] [(-72 -99 -44 66) -99] [(-94 -57 -66 -98) -98] [(32 -62 -85 23) -85] [(42 -54 -20 0) -54] [(-32 34 59 93) -32] [(-29 -18 -27 97) -29] [(-95 68 85 -16) -95] [(99 -50 96 -49) -50] [(-72 53 -1 7) -72] [(100 -10 -52 -96) -96] [(83 -93 91 47) -93] [(-87 2 35 45) -87] [(16 82 -62 4) -62] [(47 -3 30 41) -3] [(87 -3 -41 79) -41] [(-76 -27 -73 84) -76] [(-34 18 -34 -28) -34] [(16 15 -81 -26) -81] [(63 41 46 -23) -23] [(-91 -75 -22 -42) -91] [(89 -69 93 -22) -69] [(-75 13 -63 -2) -75] [(-68 -100 -56 -41) -100] [(-68 -71 21 74) -71] [(49 84 -41 43) -41] [(24 -38 56 51) -38] [(60 -41 76 85) -41] [(77 -27 -93 4) -93] [(97 88 -84 93) -84] [(-36 51 65 -29) -36] [(-60 84 -91 -97) -97] [(4 61 77 79) 4] [(85 -63 -17 15) -63] [(-98 5 54 -58) -98] [(-100 71 -61 -45) -100] [(77 74 86 0) 0] [(96 9 -93 14) -93] [(-99 -4 -35 -24) -99] [(-41 -5 -12 -21) -41] [(-60 -90 -80 -32) -90] [(-92 -13 -29 -31) -92] [(-38 22 43 -75) -75] [(-31 87 2 5) -31] [(31 -12 8 -22) -22] [(55 -24 89 -9) -24] [(-24 44 32 -49) -49] [(89 8 68 36) 8] [(-62 70 -80 100) -80] [(52 -98 -97 73) -98] [(-25 31 -42 -97) -97])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[29 37 37 37] 29]
Train Case:   6 | Input/Output: [[-95 -95 43 -95] -95]
Train Case:   7 | Input/Output: [[-35 -35 -35 -85] -85]
Train Case:   8 | Input/Output: [[-59 -59 69 -59] -59]
Train Case:   9 | Input/Output: [[-22 -22 -22 52] -22]
Train Case:  10 | Input/Output: [[54 -6 -6 -6] -6]
Train Case:  11 | Input/Output: [[78 -16 -16 -16] -16]
Train Case:  12 | Input/Output: [[-55 38 -55 -55] -55]
Train Case:  13 | Input/Output: [[26 -83 -83 -83] -83]
Train Case:  14 | Input/Output: [[82 82 44 82] 44]
Train Case:  15 | Input/Output: [(-83 -83 -83 -83) -83]
Train Case:  16 | Input/Output: [(-14 -14 -14 -14) -14]
Train Case:  17 | Input/Output: [(-90 -90 -90 -90) -90]
Train Case:  18 | Input/Output: [(1 1 1 1) 1]
Train Case:  19 | Input/Output: [(-45 -45 -45 -45) -45]
Train Case:  20 | Input/Output: [(90 8 72 66) 8]
Train Case:  21 | Input/Output: [(18 37 77 64) 18]
Train Case:  22 | Input/Output: [(44 83 26 28) 26]
Train Case:  23 | Input/Output: [(37 50 91 76) 37]
Train Case:  24 | Input/Output: [(62 0 55 81) 0]
Train Case:  25 | Input/Output: [(18 26 84 52) 18]
Train Case:  26 | Input/Output: [(2 45 32 74) 2]
Train Case:  27 | Input/Output: [(80 80 81 15) 15]
Train Case:  28 | Input/Output: [(21 49 20 83) 20]
Train Case:  29 | Input/Output: [(2 5 90 75) 2]
Train Case:  30 | Input/Output: [(64 51 37 77) 37]
Train Case:  31 | Input/Output: [(21 18 79 12) 12]
Train Case:  32 | Input/Output: [(11 30 40 45) 11]
Train Case:  33 | Input/Output: [(0 7 45 12) 0]
Train Case:  34 | Input/Output: [(77 85 53 48) 48]
Train Case:  35 | Input/Output: [(17 10 89 40) 10]
Train Case:  36 | Input/Output: [(27 19 58 19) 19]
Train Case:  37 | Input/Output: [(56 66 61 29) 29]
Train Case:  38 | Input/Output: [(17 11 10 66) 10]
Train Case:  39 | Input/Output: [(58 98 0 7) 0]
Train Case:  40 | Input/Output: [(82 5 -38 -18) -38]
Train Case:  41 | Input/Output: [(17 -8 82 -5) -8]
Train Case:  42 | Input/Output: [(-29 84 -100 49) -100]
Train Case:  43 | Input/Output: [(45 -98 -40 88) -98]
Train Case:  44 | Input/Output: [(-34 49 29 -17) -34]
Train Case:  45 | Input/Output: [(61 11 82 27) 11]
Train Case:  46 | Input/Output: [(56 22 89 -7) -7]
Train Case:  47 | Input/Output: [(-59 -33 -60 -90) -90]
Train Case:  48 | Input/Output: [(-15 64 62 63) -15]
Train Case:  49 | Input/Output: [(-17 -55 91 -43) -55]
Train Case:  50 | Input/Output: [(-72 -99 -44 66) -99]
Train Case:  51 | Input/Output: [(-94 -57 -66 -98) -98]
Train Case:  52 | Input/Output: [(32 -62 -85 23) -85]
Train Case:  53 | Input/Output: [(42 -54 -20 0) -54]
Train Case:  54 | Input/Output: [(-32 34 59 93) -32]
Train Case:  55 | Input/Output: [(-29 -18 -27 97) -29]
Train Case:  56 | Input/Output: [(-95 68 85 -16) -95]
Train Case:  57 | Input/Output: [(99 -50 96 -49) -50]
Train Case:  58 | Input/Output: [(-72 53 -1 7) -72]
Train Case:  59 | Input/Output: [(100 -10 -52 -96) -96]
Train Case:  60 | Input/Output: [(83 -93 91 47) -93]
Train Case:  61 | Input/Output: [(-87 2 35 45) -87]
Train Case:  62 | Input/Output: [(16 82 -62 4) -62]
Train Case:  63 | Input/Output: [(47 -3 30 41) -3]
Train Case:  64 | Input/Output: [(87 -3 -41 79) -41]
Train Case:  65 | Input/Output: [(-76 -27 -73 84) -76]
Train Case:  66 | Input/Output: [(-34 18 -34 -28) -34]
Train Case:  67 | Input/Output: [(16 15 -81 -26) -81]
Train Case:  68 | Input/Output: [(63 41 46 -23) -23]
Train Case:  69 | Input/Output: [(-91 -75 -22 -42) -91]
Train Case:  70 | Input/Output: [(89 -69 93 -22) -69]
Train Case:  71 | Input/Output: [(-75 13 -63 -2) -75]
Train Case:  72 | Input/Output: [(-68 -100 -56 -41) -100]
Train Case:  73 | Input/Output: [(-68 -71 21 74) -71]
Train Case:  74 | Input/Output: [(49 84 -41 43) -41]
Train Case:  75 | Input/Output: [(24 -38 56 51) -38]
Train Case:  76 | Input/Output: [(60 -41 76 85) -41]
Train Case:  77 | Input/Output: [(77 -27 -93 4) -93]
Train Case:  78 | Input/Output: [(97 88 -84 93) -84]
Train Case:  79 | Input/Output: [(-36 51 65 -29) -36]
Train Case:  80 | Input/Output: [(-60 84 -91 -97) -97]
Train Case:  81 | Input/Output: [(4 61 77 79) 4]
Train Case:  82 | Input/Output: [(85 -63 -17 15) -63]
Train Case:  83 | Input/Output: [(-98 5 54 -58) -98]
Train Case:  84 | Input/Output: [(-100 71 -61 -45) -100]
Train Case:  85 | Input/Output: [(77 74 86 0) 0]
Train Case:  86 | Input/Output: [(96 9 -93 14) -93]
Train Case:  87 | Input/Output: [(-99 -4 -35 -24) -99]
Train Case:  88 | Input/Output: [(-41 -5 -12 -21) -41]
Train Case:  89 | Input/Output: [(-60 -90 -80 -32) -90]
Train Case:  90 | Input/Output: [(-92 -13 -29 -31) -92]
Train Case:  91 | Input/Output: [(-38 22 43 -75) -75]
Train Case:  92 | Input/Output: [(-31 87 2 5) -31]
Train Case:  93 | Input/Output: [(31 -12 8 -22) -22]
Train Case:  94 | Input/Output: [(55 -24 89 -9) -24]
Train Case:  95 | Input/Output: [(-24 44 32 -49) -49]
Train Case:  96 | Input/Output: [(89 8 68 36) 8]
Train Case:  97 | Input/Output: [(-62 70 -80 100) -80]
Train Case:  98 | Input/Output: [(52 -98 -97 73) -98]
Train Case:  99 | Input/Output: [(-25 31 -42 -97) -97]
Test Case:   0 | Input/Output: [[86 -47 86 86] -47]
Test Case:   1 | Input/Output: [[18 18 18 18] 18]
Test Case:   2 | Input/Output: [[2 2 52 2] 2]
Test Case:   3 | Input/Output: [[-26 48 48 48] -26]
Test Case:   4 | Input/Output: [[82 82 82 -69] -69]
Test Case:   5 | Input/Output: [[71 33 33 33] 33]
Test Case:   6 | Input/Output: [[47 -39 -39 -39] -39]
Test Case:   7 | Input/Output: [[90 -3 90 90] -3]
Test Case:   8 | Input/Output: [[90 90 90 85] 85]
Test Case:   9 | Input/Output: [[-22 37 37 37] -22]
Test Case:  10 | Input/Output: [[59 59 59 -77] -77]
Test Case:  11 | Input/Output: [[41 41 41 74] 41]
Test Case:  12 | Input/Output: [[68 -32 -32 -32] -32]
Test Case:  13 | Input/Output: [[-48 -48 -94 -48] -94]
Test Case:  14 | Input/Output: [[31 -93 31 31] -93]
Test Case:  15 | Input/Output: [[13 21 13 13] 13]
Test Case:  16 | Input/Output: [[28 28 28 -74] -74]
Test Case:  17 | Input/Output: [[62 6 62 62] 6]
Test Case:  18 | Input/Output: [[87 87 35 87] 35]
Test Case:  19 | Input/Output: [[-73 -73 -73 -70] -73]
Test Case:  20 | Input/Output: [[-75 -75 94 -75] -75]
Test Case:  21 | Input/Output: [[-60 -60 -61 -60] -61]
Test Case:  22 | Input/Output: [[-74 -51 -74 -74] -74]
Test Case:  23 | Input/Output: [[-48 -48 -48 78] -48]
Test Case:  24 | Input/Output: [[24 -55 -55 -55] -55]
Test Case:  25 | Input/Output: [[100 -95 -95 -95] -95]
Test Case:  26 | Input/Output: [[-58 -58 -58 -25] -58]
Test Case:  27 | Input/Output: [[-100 -100 57 -100] -100]
Test Case:  28 | Input/Output: [[-67 -45 -45 -45] -67]
Test Case:  29 | Input/Output: [[-8 -8 -70 -8] -70]
Test Case:  30 | Input/Output: [[91 91 -12 91] -12]
Test Case:  31 | Input/Output: [[12 12 12 -13] -13]
Test Case:  32 | Input/Output: [[-63 -63 -63 -24] -63]
Test Case:  33 | Input/Output: [[-90 -90 -90 5] -90]
Test Case:  34 | Input/Output: [[76 -49 -49 -49] -49]
Test Case:  35 | Input/Output: [[32 32 -95 32] -95]
Test Case:  36 | Input/Output: [[60 60 -41 60] -41]
Test Case:  37 | Input/Output: [[-83 -83 80 -83] -83]
Test Case:  38 | Input/Output: [[-94 -94 24 -94] -94]
Test Case:  39 | Input/Output: [[1 1 58 1] 1]
Test Case:  40 | Input/Output: [[-87 -87 -87 -11] -87]
Test Case:  41 | Input/Output: [[4 4 -24 4] -24]
Test Case:  42 | Input/Output: [[80 -84 -84 -84] -84]
Test Case:  43 | Input/Output: [[-84 -84 -84 87] -84]
Test Case:  44 | Input/Output: [[42 43 43 43] 42]
Test Case:  45 | Input/Output: [[-95 94 -95 -95] -95]
Test Case:  46 | Input/Output: [[45 45 30 45] 30]
Test Case:  47 | Input/Output: [[-76 -76 27 -76] -76]
Test Case:  48 | Input/Output: [[91 91 91 -25] -25]
Test Case:  49 | Input/Output: [[-13 -13 -13 49] -13]
Test Case:  50 | Input/Output: [[76 76 -38 76] -38]
Test Case:  51 | Input/Output: [[50 50 -58 50] -58]
Test Case:  52 | Input/Output: [[41 41 -79 41] -79]
Test Case:  53 | Input/Output: [[-66 -66 38 -66] -66]
Test Case:  54 | Input/Output: [[81 81 81 -86] -86]
Test Case:  55 | Input/Output: [[-31 -62 -31 -31] -62]
Test Case:  56 | Input/Output: [[-57 64 -57 -57] -57]
Test Case:  57 | Input/Output: [[16 16 -61 16] -61]
Test Case:  58 | Input/Output: [[42 -35 -35 -35] -35]
Test Case:  59 | Input/Output: [[-67 -12 -67 -67] -67]
Test Case:  60 | Input/Output: [[35 35 35 -64] -64]
Test Case:  61 | Input/Output: [[74 74 74 -16] -16]
Test Case:  62 | Input/Output: [[55 55 42 55] 42]
Test Case:  63 | Input/Output: [[-90 42 -90 -90] -90]
Test Case:  64 | Input/Output: [[-98 31 31 31] -98]
Test Case:  65 | Input/Output: [[-37 -37 42 -37] -37]
Test Case:  66 | Input/Output: [[50 50 -70 50] -70]
Test Case:  67 | Input/Output: [[-87 -71 -71 -71] -87]
Test Case:  68 | Input/Output: [[3 3 67 3] 3]
Test Case:  69 | Input/Output: [[23 -98 -98 -98] -98]
Test Case:  70 | Input/Output: [[-70 44 -70 -70] -70]
Test Case:  71 | Input/Output: [[-8 55 -8 -8] -8]
Test Case:  72 | Input/Output: [[-37 -97 -37 -37] -97]
Test Case:  73 | Input/Output: [[21 -71 21 21] -71]
Test Case:  74 | Input/Output: [[-46 -74 -46 -46] -74]
Test Case:  75 | Input/Output: [[-78 -78 -57 -78] -78]
Test Case:  76 | Input/Output: [[-66 28 -66 -66] -66]
Test Case:  77 | Input/Output: [[91 91 91 -44] -44]
Test Case:  78 | Input/Output: [[-29 -29 -29 -93] -93]
Test Case:  79 | Input/Output: [[46 46 46 -79] -79]
Test Case:  80 | Input/Output: [[-73 -41 -73 -73] -73]
Test Case:  81 | Input/Output: [[-77 -77 -77 -59] -77]
Test Case:  82 | Input/Output: [[-52 22 -52 -52] -52]
Test Case:  83 | Input/Output: [[-88 -88 -12 -88] -88]
Test Case:  84 | Input/Output: [[37 0 37 37] 0]
Test Case:  85 | Input/Output: [[-97 -97 80 -97] -97]
Test Case:  86 | Input/Output: [[80 80 80 38] 38]
Test Case:  87 | Input/Output: [[-15 -99 -15 -15] -99]
Test Case:  88 | Input/Output: [[55 24 55 55] 24]
Test Case:  89 | Input/Output: [[14 14 67 14] 14]
Test Case:  90 | Input/Output: [[-70 -70 -91 -70] -91]
Test Case:  91 | Input/Output: [[-31 -31 -45 -31] -45]
Test Case:  92 | Input/Output: [[55 35 55 55] 35]
Test Case:  93 | Input/Output: [[47 19 19 19] 19]
Test Case:  94 | Input/Output: [[-83 -83 60 -83] -83]
Test Case:  95 | Input/Output: [[88 88 -65 88] -65]
Test Case:  96 | Input/Output: [[60 60 60 4] 4]
Test Case:  97 | Input/Output: [[-36 -56 -56 -56] -56]
Test Case:  98 | Input/Output: [[-13 -43 -43 -43] -43]
Test Case:  99 | Input/Output: [[-37 -15 -37 -37] -37]
Test Case: 100 | Input/Output: [(54 54 54 54) 54]
Test Case: 101 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 102 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 103 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 104 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 105 | Input/Output: [(72 72 72 72) 72]
Test Case: 106 | Input/Output: [(61 61 61 61) 61]
Test Case: 107 | Input/Output: [(15 15 15 15) 15]
Test Case: 108 | Input/Output: [(66 66 66 66) 66]
Test Case: 109 | Input/Output: [(90 90 90 90) 90]
Test Case: 110 | Input/Output: [(72 72 72 72) 72]
Test Case: 111 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 112 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 113 | Input/Output: [(31 31 31 31) 31]
Test Case: 114 | Input/Output: [(34 34 34 34) 34]
Test Case: 115 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 116 | Input/Output: [(8 8 8 8) 8]
Test Case: 117 | Input/Output: [(76 76 76 76) 76]
Test Case: 118 | Input/Output: [(46 46 46 46) 46]
Test Case: 119 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 120 | Input/Output: [(27 27 27 27) 27]
Test Case: 121 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 122 | Input/Output: [(59 59 59 59) 59]
Test Case: 123 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 124 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 125 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 126 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 127 | Input/Output: [(18 18 18 18) 18]
Test Case: 128 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 129 | Input/Output: [(42 42 42 42) 42]
Test Case: 130 | Input/Output: [(89 89 89 89) 89]
Test Case: 131 | Input/Output: [(49 49 49 49) 49]
Test Case: 132 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 133 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 134 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 135 | Input/Output: [(82 82 82 82) 82]
Test Case: 136 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 137 | Input/Output: [(70 70 70 70) 70]
Test Case: 138 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 139 | Input/Output: [(78 78 78 78) 78]
Test Case: 140 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 141 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 142 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 143 | Input/Output: [(28 28 28 28) 28]
Test Case: 144 | Input/Output: [(88 88 88 88) 88]
Test Case: 145 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 146 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 147 | Input/Output: [(65 65 65 65) 65]
Test Case: 148 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 149 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 150 | Input/Output: [(77 77 77 77) 77]
Test Case: 151 | Input/Output: [(10 10 10 10) 10]
Test Case: 152 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 153 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 154 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 155 | Input/Output: [(35 35 35 35) 35]
Test Case: 156 | Input/Output: [(61 61 61 61) 61]
Test Case: 157 | Input/Output: [(43 43 43 43) 43]
Test Case: 158 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 159 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 160 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 161 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 162 | Input/Output: [(69 69 69 69) 69]
Test Case: 163 | Input/Output: [(47 47 47 47) 47]
Test Case: 164 | Input/Output: [(1 1 1 1) 1]
Test Case: 165 | Input/Output: [(32 32 32 32) 32]
Test Case: 166 | Input/Output: [(79 79 79 79) 79]
Test Case: 167 | Input/Output: [(95 95 95 95) 95]
Test Case: 168 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 169 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 170 | Input/Output: [(49 49 49 49) 49]
Test Case: 171 | Input/Output: [(49 49 49 49) 49]
Test Case: 172 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 173 | Input/Output: [(68 68 68 68) 68]
Test Case: 174 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 175 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 176 | Input/Output: [(10 10 10 10) 10]
Test Case: 177 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 178 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 179 | Input/Output: [(90 90 90 90) 90]
Test Case: 180 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 181 | Input/Output: [(41 41 41 41) 41]
Test Case: 182 | Input/Output: [(34 34 34 34) 34]
Test Case: 183 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 184 | Input/Output: [(30 30 30 30) 30]
Test Case: 185 | Input/Output: [(21 21 21 21) 21]
Test Case: 186 | Input/Output: [(100 100 100 100) 100]
Test Case: 187 | Input/Output: [(69 69 69 69) 69]
Test Case: 188 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 189 | Input/Output: [(96 96 96 96) 96]
Test Case: 190 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 191 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 192 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 193 | Input/Output: [(28 28 28 28) 28]
Test Case: 194 | Input/Output: [(52 52 52 52) 52]
Test Case: 195 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 196 | Input/Output: [(6 6 6 6) 6]
Test Case: 197 | Input/Output: [(65 65 65 65) 65]
Test Case: 198 | Input/Output: [(90 90 90 90) 90]
Test Case: 199 | Input/Output: [(68 68 68 68) 68]
Test Case: 200 | Input/Output: [(27 62 62 95) 27]
Test Case: 201 | Input/Output: [(69 74 73 27) 27]
Test Case: 202 | Input/Output: [(38 85 4 81) 4]
Test Case: 203 | Input/Output: [(48 36 48 11) 11]
Test Case: 204 | Input/Output: [(39 69 80 35) 35]
Test Case: 205 | Input/Output: [(39 58 78 15) 15]
Test Case: 206 | Input/Output: [(21 22 76 20) 20]
Test Case: 207 | Input/Output: [(56 30 0 99) 0]
Test Case: 208 | Input/Output: [(46 67 59 66) 46]
Test Case: 209 | Input/Output: [(58 83 51 61) 51]
Test Case: 210 | Input/Output: [(14 57 21 55) 14]
Test Case: 211 | Input/Output: [(97 99 34 9) 9]
Test Case: 212 | Input/Output: [(90 38 24 52) 24]
Test Case: 213 | Input/Output: [(57 1 12 27) 1]
Test Case: 214 | Input/Output: [(71 25 89 10) 10]
Test Case: 215 | Input/Output: [(89 68 22 80) 22]
Test Case: 216 | Input/Output: [(88 38 3 54) 3]
Test Case: 217 | Input/Output: [(15 26 65 51) 15]
Test Case: 218 | Input/Output: [(37 59 76 93) 37]
Test Case: 219 | Input/Output: [(30 73 100 18) 18]
Test Case: 220 | Input/Output: [(77 11 13 54) 11]
Test Case: 221 | Input/Output: [(26 41 90 85) 26]
Test Case: 222 | Input/Output: [(59 32 68 33) 32]
Test Case: 223 | Input/Output: [(12 46 57 19) 12]
Test Case: 224 | Input/Output: [(27 21 58 16) 16]
Test Case: 225 | Input/Output: [(62 61 44 67) 44]
Test Case: 226 | Input/Output: [(81 46 27 91) 27]
Test Case: 227 | Input/Output: [(0 55 66 84) 0]
Test Case: 228 | Input/Output: [(34 95 30 89) 30]
Test Case: 229 | Input/Output: [(83 79 57 89) 57]
Test Case: 230 | Input/Output: [(68 15 15 27) 15]
Test Case: 231 | Input/Output: [(38 19 21 26) 19]
Test Case: 232 | Input/Output: [(44 89 53 51) 44]
Test Case: 233 | Input/Output: [(76 97 5 56) 5]
Test Case: 234 | Input/Output: [(15 59 68 10) 10]
Test Case: 235 | Input/Output: [(70 96 77 23) 23]
Test Case: 236 | Input/Output: [(57 55 49 10) 10]
Test Case: 237 | Input/Output: [(37 55 54 85) 37]
Test Case: 238 | Input/Output: [(4 59 88 49) 4]
Test Case: 239 | Input/Output: [(28 60 49 7) 7]
Test Case: 240 | Input/Output: [(8 99 69 35) 8]
Test Case: 241 | Input/Output: [(10 50 27 34) 10]
Test Case: 242 | Input/Output: [(25 88 39 93) 25]
Test Case: 243 | Input/Output: [(15 46 31 21) 15]
Test Case: 244 | Input/Output: [(43 37 62 51) 37]
Test Case: 245 | Input/Output: [(76 89 88 12) 12]
Test Case: 246 | Input/Output: [(38 24 12 88) 12]
Test Case: 247 | Input/Output: [(14 33 99 26) 14]
Test Case: 248 | Input/Output: [(59 45 18 68) 18]
Test Case: 249 | Input/Output: [(6 56 88 9) 6]
Test Case: 250 | Input/Output: [(38 36 62 42) 36]
Test Case: 251 | Input/Output: [(33 88 88 35) 33]
Test Case: 252 | Input/Output: [(90 23 100 1) 1]
Test Case: 253 | Input/Output: [(53 64 3 100) 3]
Test Case: 254 | Input/Output: [(85 36 96 87) 36]
Test Case: 255 | Input/Output: [(82 11 33 18) 11]
Test Case: 256 | Input/Output: [(15 60 23 80) 15]
Test Case: 257 | Input/Output: [(13 19 65 74) 13]
Test Case: 258 | Input/Output: [(97 66 47 43) 43]
Test Case: 259 | Input/Output: [(19 51 1 90) 1]
Test Case: 260 | Input/Output: [(46 67 97 5) 5]
Test Case: 261 | Input/Output: [(52 18 25 34) 18]
Test Case: 262 | Input/Output: [(99 93 28 54) 28]
Test Case: 263 | Input/Output: [(90 60 61 82) 60]
Test Case: 264 | Input/Output: [(1 63 30 9) 1]
Test Case: 265 | Input/Output: [(100 3 19 7) 3]
Test Case: 266 | Input/Output: [(44 60 46 76) 44]
Test Case: 267 | Input/Output: [(27 90 93 98) 27]
Test Case: 268 | Input/Output: [(4 67 68 99) 4]
Test Case: 269 | Input/Output: [(10 5 21 19) 5]
Test Case: 270 | Input/Output: [(10 79 4 42) 4]
Test Case: 271 | Input/Output: [(27 26 39 31) 26]
Test Case: 272 | Input/Output: [(73 29 42 98) 29]
Test Case: 273 | Input/Output: [(39 88 2 99) 2]
Test Case: 274 | Input/Output: [(52 30 92 49) 30]
Test Case: 275 | Input/Output: [(83 62 96 41) 41]
Test Case: 276 | Input/Output: [(75 40 90 10) 10]
Test Case: 277 | Input/Output: [(6 66 41 73) 6]
Test Case: 278 | Input/Output: [(77 76 7 56) 7]
Test Case: 279 | Input/Output: [(12 1 66 38) 1]
Test Case: 280 | Input/Output: [(98 80 61 83) 61]
Test Case: 281 | Input/Output: [(24 12 66 72) 12]
Test Case: 282 | Input/Output: [(84 62 74 4) 4]
Test Case: 283 | Input/Output: [(46 68 89 55) 46]
Test Case: 284 | Input/Output: [(34 58 25 89) 25]
Test Case: 285 | Input/Output: [(61 91 84 90) 61]
Test Case: 286 | Input/Output: [(84 91 67 10) 10]
Test Case: 287 | Input/Output: [(7 48 52 20) 7]
Test Case: 288 | Input/Output: [(22 16 22 87) 16]
Test Case: 289 | Input/Output: [(8 11 30 36) 8]
Test Case: 290 | Input/Output: [(26 54 1 1) 1]
Test Case: 291 | Input/Output: [(17 78 52 12) 12]
Test Case: 292 | Input/Output: [(69 87 29 30) 29]
Test Case: 293 | Input/Output: [(27 73 29 83) 27]
Test Case: 294 | Input/Output: [(64 29 96 56) 29]
Test Case: 295 | Input/Output: [(47 63 50 9) 9]
Test Case: 296 | Input/Output: [(77 46 62 67) 46]
Test Case: 297 | Input/Output: [(68 9 10 27) 9]
Test Case: 298 | Input/Output: [(71 17 7 20) 7]
Test Case: 299 | Input/Output: [(64 13 79 95) 13]
Test Case: 300 | Input/Output: [(49 95 16 96) 16]
Test Case: 301 | Input/Output: [(71 99 21 13) 13]
Test Case: 302 | Input/Output: [(11 37 63 38) 11]
Test Case: 303 | Input/Output: [(12 96 34 53) 12]
Test Case: 304 | Input/Output: [(37 30 84 82) 30]
Test Case: 305 | Input/Output: [(83 95 49 33) 33]
Test Case: 306 | Input/Output: [(0 2 20 14) 0]
Test Case: 307 | Input/Output: [(31 95 25 17) 17]
Test Case: 308 | Input/Output: [(63 47 90 10) 10]
Test Case: 309 | Input/Output: [(65 5 48 79) 5]
Test Case: 310 | Input/Output: [(30 80 84 68) 30]
Test Case: 311 | Input/Output: [(43 3 33 84) 3]
Test Case: 312 | Input/Output: [(56 25 92 72) 25]
Test Case: 313 | Input/Output: [(44 9 3 52) 3]
Test Case: 314 | Input/Output: [(13 78 10 43) 10]
Test Case: 315 | Input/Output: [(32 0 35 60) 0]
Test Case: 316 | Input/Output: [(78 18 3 50) 3]
Test Case: 317 | Input/Output: [(82 89 52 57) 52]
Test Case: 318 | Input/Output: [(59 73 9 60) 9]
Test Case: 319 | Input/Output: [(86 88 32 72) 32]
Test Case: 320 | Input/Output: [(81 23 14 10) 10]
Test Case: 321 | Input/Output: [(84 96 43 47) 43]
Test Case: 322 | Input/Output: [(7 7 50 4) 4]
Test Case: 323 | Input/Output: [(34 16 67 99) 16]
Test Case: 324 | Input/Output: [(90 15 16 27) 15]
Test Case: 325 | Input/Output: [(55 23 81 1) 1]
Test Case: 326 | Input/Output: [(18 6 1 38) 1]
Test Case: 327 | Input/Output: [(98 83 45 45) 45]
Test Case: 328 | Input/Output: [(60 83 27 72) 27]
Test Case: 329 | Input/Output: [(76 91 80 41) 41]
Test Case: 330 | Input/Output: [(21 34 45 30) 21]
Test Case: 331 | Input/Output: [(81 38 64 67) 38]
Test Case: 332 | Input/Output: [(7 98 96 80) 7]
Test Case: 333 | Input/Output: [(68 75 69 74) 68]
Test Case: 334 | Input/Output: [(53 92 16 30) 16]
Test Case: 335 | Input/Output: [(60 66 36 60) 36]
Test Case: 336 | Input/Output: [(46 70 36 64) 36]
Test Case: 337 | Input/Output: [(52 91 60 76) 52]
Test Case: 338 | Input/Output: [(84 100 49 21) 21]
Test Case: 339 | Input/Output: [(45 93 82 39) 39]
Test Case: 340 | Input/Output: [(16 54 24 35) 16]
Test Case: 341 | Input/Output: [(66 71 66 53) 53]
Test Case: 342 | Input/Output: [(63 12 53 93) 12]
Test Case: 343 | Input/Output: [(90 10 54 7) 7]
Test Case: 344 | Input/Output: [(9 59 19 25) 9]
Test Case: 345 | Input/Output: [(48 46 10 79) 10]
Test Case: 346 | Input/Output: [(53 36 46 49) 36]
Test Case: 347 | Input/Output: [(33 97 19 72) 19]
Test Case: 348 | Input/Output: [(41 71 30 2) 2]
Test Case: 349 | Input/Output: [(59 32 44 96) 32]
Test Case: 350 | Input/Output: [(82 56 64 49) 49]
Test Case: 351 | Input/Output: [(69 12 3 23) 3]
Test Case: 352 | Input/Output: [(36 98 62 26) 26]
Test Case: 353 | Input/Output: [(96 18 81 70) 18]
Test Case: 354 | Input/Output: [(91 34 78 48) 34]
Test Case: 355 | Input/Output: [(30 29 68 12) 12]
Test Case: 356 | Input/Output: [(1 66 5 68) 1]
Test Case: 357 | Input/Output: [(79 54 97 17) 17]
Test Case: 358 | Input/Output: [(69 18 87 96) 18]
Test Case: 359 | Input/Output: [(13 75 52 93) 13]
Test Case: 360 | Input/Output: [(80 72 10 51) 10]
Test Case: 361 | Input/Output: [(39 23 43 65) 23]
Test Case: 362 | Input/Output: [(66 0 55 35) 0]
Test Case: 363 | Input/Output: [(38 45 14 37) 14]
Test Case: 364 | Input/Output: [(60 72 72 32) 32]
Test Case: 365 | Input/Output: [(66 97 93 13) 13]
Test Case: 366 | Input/Output: [(88 62 91 45) 45]
Test Case: 367 | Input/Output: [(26 12 51 71) 12]
Test Case: 368 | Input/Output: [(93 64 33 65) 33]
Test Case: 369 | Input/Output: [(86 69 12 66) 12]
Test Case: 370 | Input/Output: [(26 0 66 81) 0]
Test Case: 371 | Input/Output: [(8 38 13 97) 8]
Test Case: 372 | Input/Output: [(28 93 16 65) 16]
Test Case: 373 | Input/Output: [(61 38 14 87) 14]
Test Case: 374 | Input/Output: [(77 36 53 12) 12]
Test Case: 375 | Input/Output: [(90 42 88 52) 42]
Test Case: 376 | Input/Output: [(9 81 12 27) 9]
Test Case: 377 | Input/Output: [(57 55 59 95) 55]
Test Case: 378 | Input/Output: [(52 75 87 43) 43]
Test Case: 379 | Input/Output: [(32 26 13 8) 8]
Test Case: 380 | Input/Output: [(26 70 68 35) 26]
Test Case: 381 | Input/Output: [(59 33 43 62) 33]
Test Case: 382 | Input/Output: [(85 60 45 18) 18]
Test Case: 383 | Input/Output: [(28 32 34 63) 28]
Test Case: 384 | Input/Output: [(5 63 24 100) 5]
Test Case: 385 | Input/Output: [(91 17 14 94) 14]
Test Case: 386 | Input/Output: [(45 55 50 9) 9]
Test Case: 387 | Input/Output: [(35 67 97 19) 19]
Test Case: 388 | Input/Output: [(94 31 68 68) 31]
Test Case: 389 | Input/Output: [(18 93 0 23) 0]
Test Case: 390 | Input/Output: [(37 46 8 32) 8]
Test Case: 391 | Input/Output: [(35 79 65 55) 35]
Test Case: 392 | Input/Output: [(35 38 45 93) 35]
Test Case: 393 | Input/Output: [(96 28 38 10) 10]
Test Case: 394 | Input/Output: [(46 70 6 91) 6]
Test Case: 395 | Input/Output: [(73 21 78 6) 6]
Test Case: 396 | Input/Output: [(92 90 74 11) 11]
Test Case: 397 | Input/Output: [(41 48 21 46) 21]
Test Case: 398 | Input/Output: [(17 100 34 76) 17]
Test Case: 399 | Input/Output: [(8 99 32 51) 8]
Test Case: 400 | Input/Output: [(48 67 38 -48) -48]
Test Case: 401 | Input/Output: [(-64 42 63 -8) -64]
Test Case: 402 | Input/Output: [(-17 28 70 -69) -69]
Test Case: 403 | Input/Output: [(-65 74 29 92) -65]
Test Case: 404 | Input/Output: [(-13 92 -23 76) -23]
Test Case: 405 | Input/Output: [(26 55 32 93) 26]
Test Case: 406 | Input/Output: [(61 -49 -89 69) -89]
Test Case: 407 | Input/Output: [(76 99 14 -84) -84]
Test Case: 408 | Input/Output: [(-48 61 73 76) -48]
Test Case: 409 | Input/Output: [(73 72 -30 -71) -71]
Test Case: 410 | Input/Output: [(68 -29 -18 32) -29]
Test Case: 411 | Input/Output: [(-32 -4 82 -62) -62]
Test Case: 412 | Input/Output: [(-36 -32 27 -65) -65]
Test Case: 413 | Input/Output: [(-63 75 3 70) -63]
Test Case: 414 | Input/Output: [(30 96 21 -50) -50]
Test Case: 415 | Input/Output: [(-94 31 -60 26) -94]
Test Case: 416 | Input/Output: [(-73 41 -74 -93) -93]
Test Case: 417 | Input/Output: [(-27 -67 -61 93) -67]
Test Case: 418 | Input/Output: [(42 72 49 -81) -81]
Test Case: 419 | Input/Output: [(52 -74 -12 36) -74]
Test Case: 420 | Input/Output: [(83 37 -17 -39) -39]
Test Case: 421 | Input/Output: [(-27 84 -50 -78) -78]
Test Case: 422 | Input/Output: [(-10 -11 58 56) -11]
Test Case: 423 | Input/Output: [(27 -84 -98 81) -98]
Test Case: 424 | Input/Output: [(72 7 22 52) 7]
Test Case: 425 | Input/Output: [(63 63 11 20) 11]
Test Case: 426 | Input/Output: [(-95 25 53 22) -95]
Test Case: 427 | Input/Output: [(-38 -46 -16 93) -46]
Test Case: 428 | Input/Output: [(-41 -77 43 -91) -91]
Test Case: 429 | Input/Output: [(52 -8 73 -2) -8]
Test Case: 430 | Input/Output: [(73 -5 -63 -22) -63]
Test Case: 431 | Input/Output: [(56 69 27 -93) -93]
Test Case: 432 | Input/Output: [(75 78 51 -53) -53]
Test Case: 433 | Input/Output: [(43 -18 84 9) -18]
Test Case: 434 | Input/Output: [(15 87 -45 100) -45]
Test Case: 435 | Input/Output: [(-68 -50 -35 61) -68]
Test Case: 436 | Input/Output: [(99 -21 97 -36) -36]
Test Case: 437 | Input/Output: [(-94 79 -72 36) -94]
Test Case: 438 | Input/Output: [(67 63 -62 -66) -66]
Test Case: 439 | Input/Output: [(-46 29 -61 -12) -61]
Test Case: 440 | Input/Output: [(77 -62 -81 92) -81]
Test Case: 441 | Input/Output: [(0 -77 46 -66) -77]
Test Case: 442 | Input/Output: [(64 -51 -90 -35) -90]
Test Case: 443 | Input/Output: [(88 -83 82 -38) -83]
Test Case: 444 | Input/Output: [(-44 64 -51 9) -51]
Test Case: 445 | Input/Output: [(4 -68 12 -21) -68]
Test Case: 446 | Input/Output: [(-96 32 -78 87) -96]
Test Case: 447 | Input/Output: [(24 -52 -59 48) -59]
Test Case: 448 | Input/Output: [(43 -85 21 78) -85]
Test Case: 449 | Input/Output: [(-24 -95 -86 42) -95]
Test Case: 450 | Input/Output: [(95 16 84 -44) -44]
Test Case: 451 | Input/Output: [(-81 -8 83 93) -81]
Test Case: 452 | Input/Output: [(-43 23 33 -54) -54]
Test Case: 453 | Input/Output: [(40 -48 -43 -28) -48]
Test Case: 454 | Input/Output: [(91 -1 -34 -35) -35]
Test Case: 455 | Input/Output: [(-7 -91 52 -34) -91]
Test Case: 456 | Input/Output: [(-76 -77 96 71) -77]
Test Case: 457 | Input/Output: [(24 -63 24 19) -63]
Test Case: 458 | Input/Output: [(26 -93 62 -31) -93]
Test Case: 459 | Input/Output: [(-32 -10 91 -1) -32]
Test Case: 460 | Input/Output: [(-73 -56 40 35) -73]
Test Case: 461 | Input/Output: [(-4 -65 29 -5) -65]
Test Case: 462 | Input/Output: [(33 -5 90 53) -5]
Test Case: 463 | Input/Output: [(-49 55 -52 37) -52]
Test Case: 464 | Input/Output: [(-92 -7 51 -26) -92]
Test Case: 465 | Input/Output: [(-68 -1 -69 70) -69]
Test Case: 466 | Input/Output: [(-30 -67 -60 -72) -72]
Test Case: 467 | Input/Output: [(-6 96 69 -20) -20]
Test Case: 468 | Input/Output: [(75 -73 -29 -50) -73]
Test Case: 469 | Input/Output: [(3 10 49 29) 3]
Test Case: 470 | Input/Output: [(96 -31 69 32) -31]
Test Case: 471 | Input/Output: [(-57 50 -52 90) -57]
Test Case: 472 | Input/Output: [(-74 38 -70 3) -74]
Test Case: 473 | Input/Output: [(-30 69 69 57) -30]
Test Case: 474 | Input/Output: [(86 -33 -88 -36) -88]
Test Case: 475 | Input/Output: [(58 36 -23 -98) -98]
Test Case: 476 | Input/Output: [(-85 13 -93 34) -93]
Test Case: 477 | Input/Output: [(-35 45 74 -80) -80]
Test Case: 478 | Input/Output: [(38 -34 -63 27) -63]
Test Case: 479 | Input/Output: [(-97 65 -63 44) -97]
Test Case: 480 | Input/Output: [(-15 -16 -4 58) -16]
Test Case: 481 | Input/Output: [(-75 -40 -82 -78) -82]
Test Case: 482 | Input/Output: [(-16 11 -31 18) -31]
Test Case: 483 | Input/Output: [(32 -93 -50 -63) -93]
Test Case: 484 | Input/Output: [(77 -84 27 17) -84]
Test Case: 485 | Input/Output: [(9 -9 -42 -82) -82]
Test Case: 486 | Input/Output: [(-46 -88 25 -67) -88]
Test Case: 487 | Input/Output: [(32 -31 85 44) -31]
Test Case: 488 | Input/Output: [(75 -60 -41 -47) -60]
Test Case: 489 | Input/Output: [(75 35 -8 -79) -79]
Test Case: 490 | Input/Output: [(-25 46 -25 68) -25]
Test Case: 491 | Input/Output: [(96 -38 -44 23) -44]
Test Case: 492 | Input/Output: [(30 -74 -41 -100) -100]
Test Case: 493 | Input/Output: [(20 -37 -70 84) -70]
Test Case: 494 | Input/Output: [(-22 4 70 -66) -66]
Test Case: 495 | Input/Output: [(46 -86 -52 -64) -86]
Test Case: 496 | Input/Output: [(-27 88 -26 -49) -49]
Test Case: 497 | Input/Output: [(21 54 17 62) 17]
Test Case: 498 | Input/Output: [(-38 -82 34 -37) -82]
Test Case: 499 | Input/Output: [(40 30 -42 100) -42]
Test Case: 500 | Input/Output: [(-31 68 36 -7) -31]
Test Case: 501 | Input/Output: [(96 -30 59 -23) -30]
Test Case: 502 | Input/Output: [(79 17 23 -83) -83]
Test Case: 503 | Input/Output: [(-96 15 -73 -79) -96]
Test Case: 504 | Input/Output: [(90 24 -88 51) -88]
Test Case: 505 | Input/Output: [(-6 -38 79 15) -38]
Test Case: 506 | Input/Output: [(33 -40 52 56) -40]
Test Case: 507 | Input/Output: [(-41 93 24 -48) -48]
Test Case: 508 | Input/Output: [(32 -72 9 -72) -72]
Test Case: 509 | Input/Output: [(-56 6 -96 87) -96]
Test Case: 510 | Input/Output: [(-63 89 -99 17) -99]
Test Case: 511 | Input/Output: [(90 -4 -10 -58) -58]
Test Case: 512 | Input/Output: [(-41 70 70 58) -41]
Test Case: 513 | Input/Output: [(-8 -25 -86 -49) -86]
Test Case: 514 | Input/Output: [(68 48 73 53) 48]
Test Case: 515 | Input/Output: [(93 -2 49 35) -2]
Test Case: 516 | Input/Output: [(67 6 56 -84) -84]
Test Case: 517 | Input/Output: [(94 23 -75 42) -75]
Test Case: 518 | Input/Output: [(-87 -64 -22 -50) -87]
Test Case: 519 | Input/Output: [(-34 6 -91 -68) -91]
Test Case: 520 | Input/Output: [(95 -39 -11 -74) -74]
Test Case: 521 | Input/Output: [(-34 2 93 89) -34]
Test Case: 522 | Input/Output: [(78 -70 -66 4) -70]
Test Case: 523 | Input/Output: [(27 -1 -11 30) -11]
Test Case: 524 | Input/Output: [(-90 -28 -36 33) -90]
Test Case: 525 | Input/Output: [(-42 12 58 42) -42]
Test Case: 526 | Input/Output: [(24 16 -87 -78) -87]
Test Case: 527 | Input/Output: [(14 -90 63 6) -90]
Test Case: 528 | Input/Output: [(-73 93 -57 97) -73]
Test Case: 529 | Input/Output: [(46 70 -40 92) -40]
Test Case: 530 | Input/Output: [(42 42 -33 65) -33]
Test Case: 531 | Input/Output: [(-28 -7 94 71) -28]
Test Case: 532 | Input/Output: [(27 -51 20 -2) -51]
Test Case: 533 | Input/Output: [(-43 -51 53 -44) -51]
Test Case: 534 | Input/Output: [(27 -94 86 55) -94]
Test Case: 535 | Input/Output: [(-81 98 -46 -49) -81]
Test Case: 536 | Input/Output: [(-42 93 55 -93) -93]
Test Case: 537 | Input/Output: [(63 1 -1 0) -1]
Test Case: 538 | Input/Output: [(59 -20 -68 16) -68]
Test Case: 539 | Input/Output: [(45 74 16 -72) -72]
Test Case: 540 | Input/Output: [(10 -64 -51 -55) -64]
Test Case: 541 | Input/Output: [(1 -37 -10 -44) -44]
Test Case: 542 | Input/Output: [(55 -61 -3 61) -61]
Test Case: 543 | Input/Output: [(92 -55 -78 -21) -78]
Test Case: 544 | Input/Output: [(74 91 11 -41) -41]
Test Case: 545 | Input/Output: [(0 -4 -38 -84) -84]
Test Case: 546 | Input/Output: [(78 -37 -97 39) -97]
Test Case: 547 | Input/Output: [(1 -95 -43 74) -95]
Test Case: 548 | Input/Output: [(24 6 -24 82) -24]
Test Case: 549 | Input/Output: [(-82 -55 -22 46) -82]
Test Case: 550 | Input/Output: [(78 86 54 -55) -55]
Test Case: 551 | Input/Output: [(23 -95 -52 -57) -95]
Test Case: 552 | Input/Output: [(-48 -69 51 77) -69]
Test Case: 553 | Input/Output: [(-42 -12 -90 55) -90]
Test Case: 554 | Input/Output: [(64 -98 -70 48) -98]
Test Case: 555 | Input/Output: [(-47 -93 -96 -1) -96]
Test Case: 556 | Input/Output: [(-49 -52 -2 55) -52]
Test Case: 557 | Input/Output: [(32 31 -39 78) -39]
Test Case: 558 | Input/Output: [(-63 -95 -64 -75) -95]
Test Case: 559 | Input/Output: [(-52 63 -62 96) -62]
Test Case: 560 | Input/Output: [(57 -91 75 -15) -91]
Test Case: 561 | Input/Output: [(-1 68 45 19) -1]
Test Case: 562 | Input/Output: [(46 -75 -7 91) -75]
Test Case: 563 | Input/Output: [(2 -53 8 51) -53]
Test Case: 564 | Input/Output: [(14 -34 -78 -8) -78]
Test Case: 565 | Input/Output: [(22 -37 -52 57) -52]
Test Case: 566 | Input/Output: [(-1 54 -69 -84) -84]
Test Case: 567 | Input/Output: [(75 -100 -14 -76) -100]
Test Case: 568 | Input/Output: [(-27 -98 82 -54) -98]
Test Case: 569 | Input/Output: [(-16 -99 -3 98) -99]
Test Case: 570 | Input/Output: [(61 -36 -51 -65) -65]
Test Case: 571 | Input/Output: [(34 19 -23 33) -23]
Test Case: 572 | Input/Output: [(19 -82 35 -19) -82]
Test Case: 573 | Input/Output: [(32 98 34 -15) -15]
Test Case: 574 | Input/Output: [(96 48 40 -19) -19]
Test Case: 575 | Input/Output: [(18 -46 -41 96) -46]
Test Case: 576 | Input/Output: [(84 68 33 75) 33]
Test Case: 577 | Input/Output: [(35 -75 -100 -90) -100]
Test Case: 578 | Input/Output: [(7 -76 65 90) -76]
Test Case: 579 | Input/Output: [(-84 -43 27 38) -84]
Test Case: 580 | Input/Output: [(81 68 4 -63) -63]
Test Case: 581 | Input/Output: [(75 54 -34 98) -34]
Test Case: 582 | Input/Output: [(-82 6 -92 -84) -92]
Test Case: 583 | Input/Output: [(3 -91 -64 -65) -91]
Test Case: 584 | Input/Output: [(13 -37 -87 19) -87]
Test Case: 585 | Input/Output: [(-61 45 -34 -75) -75]
Test Case: 586 | Input/Output: [(-61 -43 -32 100) -61]
Test Case: 587 | Input/Output: [(68 48 63 -42) -42]
Test Case: 588 | Input/Output: [(75 -89 -91 -88) -91]
Test Case: 589 | Input/Output: [(89 -61 0 -59) -61]
Test Case: 590 | Input/Output: [(52 -79 -50 -77) -79]
Test Case: 591 | Input/Output: [(43 8 20 -17) -17]
Test Case: 592 | Input/Output: [(62 74 64 30) 30]
Test Case: 593 | Input/Output: [(-70 0 -65 73) -70]
Test Case: 594 | Input/Output: [(95 -2 1 -71) -71]
Test Case: 595 | Input/Output: [(74 29 -79 3) -79]
Test Case: 596 | Input/Output: [(-68 86 -88 -92) -92]
Test Case: 597 | Input/Output: [(71 82 -86 -5) -86]
Test Case: 598 | Input/Output: [(-30 57 -17 -83) -83]
Test Case: 599 | Input/Output: [(-4 -69 -10 -98) -98]
Test Case: 600 | Input/Output: [(-81 -95 14 13) -95]
Test Case: 601 | Input/Output: [(28 -96 84 -27) -96]
Test Case: 602 | Input/Output: [(83 -48 34 77) -48]
Test Case: 603 | Input/Output: [(-90 -93 -3 -92) -93]
Test Case: 604 | Input/Output: [(21 43 15 -100) -100]
Test Case: 605 | Input/Output: [(-12 77 80 3) -12]
Test Case: 606 | Input/Output: [(-5 0 54 70) -5]
Test Case: 607 | Input/Output: [(19 -24 -80 4) -80]
Test Case: 608 | Input/Output: [(34 66 4 -59) -59]
Test Case: 609 | Input/Output: [(-98 94 -62 -34) -98]
Test Case: 610 | Input/Output: [(13 -50 -21 41) -50]
Test Case: 611 | Input/Output: [(-18 -30 33 19) -30]
Test Case: 612 | Input/Output: [(-98 88 -22 -5) -98]
Test Case: 613 | Input/Output: [(-26 62 -10 38) -26]
Test Case: 614 | Input/Output: [(-76 -71 50 69) -76]
Test Case: 615 | Input/Output: [(-38 -4 39 76) -38]
Test Case: 616 | Input/Output: [(29 33 -84 26) -84]
Test Case: 617 | Input/Output: [(60 -62 70 -79) -79]
Test Case: 618 | Input/Output: [(34 13 43 -56) -56]
Test Case: 619 | Input/Output: [(9 45 91 -26) -26]
Test Case: 620 | Input/Output: [(21 22 -9 -34) -34]
Test Case: 621 | Input/Output: [(-64 -100 36 -62) -100]
Test Case: 622 | Input/Output: [(80 -57 34 14) -57]
Test Case: 623 | Input/Output: [(-67 -94 55 14) -94]
Test Case: 624 | Input/Output: [(57 88 78 59) 57]
Test Case: 625 | Input/Output: [(-59 -48 -8 -100) -100]
Test Case: 626 | Input/Output: [(-65 -39 -29 -56) -65]
Test Case: 627 | Input/Output: [(65 57 -75 94) -75]
Test Case: 628 | Input/Output: [(41 -4 60 68) -4]
Test Case: 629 | Input/Output: [(5 -95 33 -92) -95]
Test Case: 630 | Input/Output: [(9 70 -36 86) -36]
Test Case: 631 | Input/Output: [(74 -10 26 42) -10]
Test Case: 632 | Input/Output: [(-17 18 26 49) -17]
Test Case: 633 | Input/Output: [(-9 -47 -19 71) -47]
Test Case: 634 | Input/Output: [(49 -65 90 -31) -65]
Test Case: 635 | Input/Output: [(-65 -97 -86 91) -97]
Test Case: 636 | Input/Output: [(95 -41 51 36) -41]
Test Case: 637 | Input/Output: [(39 44 -99 30) -99]
Test Case: 638 | Input/Output: [(30 -80 72 -49) -80]
Test Case: 639 | Input/Output: [(-53 81 84 -18) -53]
Test Case: 640 | Input/Output: [(-75 -27 37 -59) -75]
Test Case: 641 | Input/Output: [(35 -43 -99 -88) -99]
Test Case: 642 | Input/Output: [(-43 80 -4 -34) -43]
Test Case: 643 | Input/Output: [(-61 5 -24 -65) -65]
Test Case: 644 | Input/Output: [(67 51 -2 9) -2]
Test Case: 645 | Input/Output: [(4 -72 70 -43) -72]
Test Case: 646 | Input/Output: [(-45 -89 72 96) -89]
Test Case: 647 | Input/Output: [(-93 89 -85 23) -93]
Test Case: 648 | Input/Output: [(-97 96 -88 56) -97]
Test Case: 649 | Input/Output: [(-100 65 -53 -4) -100]
Test Case: 650 | Input/Output: [(-76 -75 68 -41) -76]
Test Case: 651 | Input/Output: [(-18 -13 -46 37) -46]
Test Case: 652 | Input/Output: [(-16 -76 -54 -62) -76]
Test Case: 653 | Input/Output: [(81 76 11 -15) -15]
Test Case: 654 | Input/Output: [(82 -56 -26 68) -56]
Test Case: 655 | Input/Output: [(20 -31 41 22) -31]
Test Case: 656 | Input/Output: [(-20 -30 88 -71) -71]
Test Case: 657 | Input/Output: [(58 -86 14 58) -86]
Test Case: 658 | Input/Output: [(-74 -100 -97 -32) -100]
Test Case: 659 | Input/Output: [(31 38 17 -73) -73]
Test Case: 660 | Input/Output: [(-46 72 79 59) -46]
Test Case: 661 | Input/Output: [(-42 -77 -9 -47) -77]
Test Case: 662 | Input/Output: [(90 45 82 -47) -47]
Test Case: 663 | Input/Output: [(69 -64 -50 -79) -79]
Test Case: 664 | Input/Output: [(-16 64 3 46) -16]
Test Case: 665 | Input/Output: [(17 -14 21 79) -14]
Test Case: 666 | Input/Output: [(-70 -80 -98 -32) -98]
Test Case: 667 | Input/Output: [(-38 94 -19 -91) -91]
Test Case: 668 | Input/Output: [(-93 74 33 73) -93]
Test Case: 669 | Input/Output: [(81 67 -59 -4) -59]
Test Case: 670 | Input/Output: [(-64 24 -10 55) -64]
Test Case: 671 | Input/Output: [(92 31 41 61) 31]
Test Case: 672 | Input/Output: [(-7 -48 96 -59) -59]
Test Case: 673 | Input/Output: [(-72 36 -14 -54) -72]
Test Case: 674 | Input/Output: [(10 -73 -71 -1) -73]
Test Case: 675 | Input/Output: [(-67 -12 -93 -26) -93]
Test Case: 676 | Input/Output: [(-1 54 -90 100) -90]
Test Case: 677 | Input/Output: [(-9 -100 -46 -19) -100]
Test Case: 678 | Input/Output: [(-11 -88 -70 88) -88]
Test Case: 679 | Input/Output: [(-39 -51 -17 44) -51]
Test Case: 680 | Input/Output: [(74 -44 -33 -75) -75]
Test Case: 681 | Input/Output: [(-36 -32 23 -18) -36]
Test Case: 682 | Input/Output: [(-3 51 8 23) -3]
Test Case: 683 | Input/Output: [(-54 58 65 1) -54]
Test Case: 684 | Input/Output: [(-83 -62 -84 -17) -84]
Test Case: 685 | Input/Output: [(23 35 66 -78) -78]
Test Case: 686 | Input/Output: [(-35 10 85 -53) -53]
Test Case: 687 | Input/Output: [(-25 -96 0 2) -96]
Test Case: 688 | Input/Output: [(-88 63 91 -37) -88]
Test Case: 689 | Input/Output: [(-46 -35 -81 61) -81]
Test Case: 690 | Input/Output: [(-19 -17 -60 65) -60]
Test Case: 691 | Input/Output: [(-92 54 -96 -42) -96]
Test Case: 692 | Input/Output: [(79 77 70 -26) -26]
Test Case: 693 | Input/Output: [(-27 66 35 25) -27]
Test Case: 694 | Input/Output: [(-28 -39 42 -92) -92]
Test Case: 695 | Input/Output: [(67 58 69 -46) -46]
Test Case: 696 | Input/Output: [(-70 61 1 -40) -70]
Test Case: 697 | Input/Output: [(85 -22 -97 -35) -97]
Test Case: 698 | Input/Output: [(-12 72 20 -67) -67]
Test Case: 699 | Input/Output: [(-74 10 -36 -68) -74]
Test Case: 700 | Input/Output: [(49 92 -61 34) -61]
Test Case: 701 | Input/Output: [(-49 -61 -78 68) -78]
Test Case: 702 | Input/Output: [(39 -83 -42 -40) -83]
Test Case: 703 | Input/Output: [(25 -28 -69 8) -69]
Test Case: 704 | Input/Output: [(-42 52 99 -45) -45]
Test Case: 705 | Input/Output: [(44 84 -25 3) -25]
Test Case: 706 | Input/Output: [(17 -71 59 18) -71]
Test Case: 707 | Input/Output: [(38 -17 -61 18) -61]
Test Case: 708 | Input/Output: [(-31 -65 71 27) -65]
Test Case: 709 | Input/Output: [(18 5 -85 -52) -85]
Test Case: 710 | Input/Output: [(-82 -73 52 3) -82]
Test Case: 711 | Input/Output: [(10 -24 9 75) -24]
Test Case: 712 | Input/Output: [(8 -12 86 -80) -80]
Test Case: 713 | Input/Output: [(70 -56 93 21) -56]
Test Case: 714 | Input/Output: [(91 -6 40 15) -6]
Test Case: 715 | Input/Output: [(-7 -80 95 -68) -80]
Test Case: 716 | Input/Output: [(85 -87 38 -10) -87]
Test Case: 717 | Input/Output: [(-12 -70 -36 4) -70]
Test Case: 718 | Input/Output: [(-7 -6 45 -8) -8]
Test Case: 719 | Input/Output: [(-40 33 -8 35) -40]
Test Case: 720 | Input/Output: [(-61 -36 -35 -26) -61]
Test Case: 721 | Input/Output: [(83 94 -47 72) -47]
Test Case: 722 | Input/Output: [(-96 -67 92 -91) -96]
Test Case: 723 | Input/Output: [(-100 -46 78 0) -100]
Test Case: 724 | Input/Output: [(62 56 -60 25) -60]
Test Case: 725 | Input/Output: [(-81 -52 -81 -61) -81]
Test Case: 726 | Input/Output: [(28 1 -52 22) -52]
Test Case: 727 | Input/Output: [(59 -99 -76 32) -99]
Test Case: 728 | Input/Output: [(35 35 55 65) 35]
Test Case: 729 | Input/Output: [(-88 94 48 -21) -88]
Test Case: 730 | Input/Output: [(-89 -32 -50 79) -89]
Test Case: 731 | Input/Output: [(83 -18 61 97) -18]
Test Case: 732 | Input/Output: [(-39 84 -33 -54) -54]
Test Case: 733 | Input/Output: [(-98 22 48 -89) -98]
Test Case: 734 | Input/Output: [(1 -11 5 21) -11]
Test Case: 735 | Input/Output: [(80 90 -2 10) -2]
Test Case: 736 | Input/Output: [(67 82 -96 48) -96]
Test Case: 737 | Input/Output: [(42 -5 -34 26) -34]
Test Case: 738 | Input/Output: [(-35 2 -29 97) -35]
Test Case: 739 | Input/Output: [(82 -98 -81 -92) -98]
Test Case: 740 | Input/Output: [(-46 -47 60 85) -47]
Test Case: 741 | Input/Output: [(64 64 15 -100) -100]
Test Case: 742 | Input/Output: [(-43 48 48 22) -43]
Test Case: 743 | Input/Output: [(-88 44 -57 28) -88]
Test Case: 744 | Input/Output: [(-37 -57 41 83) -57]
Test Case: 745 | Input/Output: [(89 48 -80 67) -80]
Test Case: 746 | Input/Output: [(47 -100 28 75) -100]
Test Case: 747 | Input/Output: [(-94 -51 -94 31) -94]
Test Case: 748 | Input/Output: [(72 79 -93 8) -93]
Test Case: 749 | Input/Output: [(-32 36 90 89) -32]
Test Case: 750 | Input/Output: [(-13 32 -11 83) -13]
Test Case: 751 | Input/Output: [(97 -83 -29 -11) -83]
Test Case: 752 | Input/Output: [(-42 47 -16 -37) -42]
Test Case: 753 | Input/Output: [(25 9 -3 -18) -18]
Test Case: 754 | Input/Output: [(85 70 10 19) 10]
Test Case: 755 | Input/Output: [(-14 7 22 93) -14]
Test Case: 756 | Input/Output: [(-41 68 73 -53) -53]
Test Case: 757 | Input/Output: [(39 -66 -75 -58) -75]
Test Case: 758 | Input/Output: [(-74 19 -49 17) -74]
Test Case: 759 | Input/Output: [(-58 -21 -58 -43) -58]
Test Case: 760 | Input/Output: [(-23 -88 17 -83) -88]
Test Case: 761 | Input/Output: [(53 27 -44 -23) -44]
Test Case: 762 | Input/Output: [(-57 -81 -45 -93) -93]
Test Case: 763 | Input/Output: [(33 14 56 -99) -99]
Test Case: 764 | Input/Output: [(-66 -63 94 -2) -66]
Test Case: 765 | Input/Output: [(30 -73 2 -94) -94]
Test Case: 766 | Input/Output: [(2 -8 48 -75) -75]
Test Case: 767 | Input/Output: [(93 53 -6 82) -6]
Test Case: 768 | Input/Output: [(4 -36 37 -55) -55]
Test Case: 769 | Input/Output: [(83 100 86 89) 83]
Test Case: 770 | Input/Output: [(-84 37 61 -13) -84]
Test Case: 771 | Input/Output: [(40 58 70 -65) -65]
Test Case: 772 | Input/Output: [(-76 7 59 70) -76]
Test Case: 773 | Input/Output: [(-21 -60 -21 83) -60]
Test Case: 774 | Input/Output: [(14 -33 66 -6) -33]
Test Case: 775 | Input/Output: [(-14 89 44 -77) -77]
Test Case: 776 | Input/Output: [(-51 -92 -5 97) -92]
Test Case: 777 | Input/Output: [(31 36 1 90) 1]
Test Case: 778 | Input/Output: [(-62 -43 22 38) -62]
Test Case: 779 | Input/Output: [(53 -80 10 38) -80]
Test Case: 780 | Input/Output: [(88 87 -78 74) -78]
Test Case: 781 | Input/Output: [(72 67 -44 87) -44]
Test Case: 782 | Input/Output: [(59 13 69 7) 7]
Test Case: 783 | Input/Output: [(63 -82 -89 -78) -89]
Test Case: 784 | Input/Output: [(89 -91 4 58) -91]
Test Case: 785 | Input/Output: [(72 -46 -60 79) -60]
Test Case: 786 | Input/Output: [(26 -72 -50 -95) -95]
Test Case: 787 | Input/Output: [(-83 -91 -56 -48) -91]
Test Case: 788 | Input/Output: [(6 99 95 -52) -52]
Test Case: 789 | Input/Output: [(26 44 -2 -27) -27]
Test Case: 790 | Input/Output: [(-56 60 1 -94) -94]
Test Case: 791 | Input/Output: [(-4 -77 -91 -24) -91]
Test Case: 792 | Input/Output: [(-10 29 -64 -44) -64]
Test Case: 793 | Input/Output: [(-54 84 11 16) -54]
Test Case: 794 | Input/Output: [(87 -11 -41 26) -41]
Test Case: 795 | Input/Output: [(-34 -38 79 -60) -60]
Test Case: 796 | Input/Output: [(-40 -2 -54 40) -54]
Test Case: 797 | Input/Output: [(10 -14 -60 -35) -60]
Test Case: 798 | Input/Output: [(1 -92 99 100) -92]
Test Case: 799 | Input/Output: [(56 -95 -48 37) -95]
Test Case: 800 | Input/Output: [(-74 64 93 44) -74]
Test Case: 801 | Input/Output: [(12 8 62 40) 8]
Test Case: 802 | Input/Output: [(22 -69 34 18) -69]
Test Case: 803 | Input/Output: [(51 16 76 57) 16]
Test Case: 804 | Input/Output: [(70 33 67 -95) -95]
Test Case: 805 | Input/Output: [(24 -7 55 32) -7]
Test Case: 806 | Input/Output: [(54 86 41 -49) -49]
Test Case: 807 | Input/Output: [(24 -85 -76 22) -85]
Test Case: 808 | Input/Output: [(-13 -17 -96 -89) -96]
Test Case: 809 | Input/Output: [(51 -54 5 -85) -85]
Test Case: 810 | Input/Output: [(-25 89 -6 -75) -75]
Test Case: 811 | Input/Output: [(87 -76 48 -46) -76]
Test Case: 812 | Input/Output: [(-100 31 -58 27) -100]
Test Case: 813 | Input/Output: [(-56 19 -10 73) -56]
Test Case: 814 | Input/Output: [(86 55 -86 15) -86]
Test Case: 815 | Input/Output: [(61 -42 85 35) -42]
Test Case: 816 | Input/Output: [(31 -48 -40 -47) -48]
Test Case: 817 | Input/Output: [(-55 20 -33 -93) -93]
Test Case: 818 | Input/Output: [(5 -28 -15 3) -28]
Test Case: 819 | Input/Output: [(-73 67 -60 7) -73]
Test Case: 820 | Input/Output: [(-69 26 77 -3) -69]
Test Case: 821 | Input/Output: [(18 56 16 57) 16]
Test Case: 822 | Input/Output: [(86 90 -62 -83) -83]
Test Case: 823 | Input/Output: [(-43 4 -41 -69) -69]
Test Case: 824 | Input/Output: [(74 -31 83 -43) -43]
Test Case: 825 | Input/Output: [(-81 -64 -84 41) -84]
Test Case: 826 | Input/Output: [(83 28 -7 -88) -88]
Test Case: 827 | Input/Output: [(-65 -49 -46 49) -65]
Test Case: 828 | Input/Output: [(-10 43 -23 23) -23]
Test Case: 829 | Input/Output: [(-80 -54 15 -6) -80]
Test Case: 830 | Input/Output: [(-69 -86 -72 85) -86]
Test Case: 831 | Input/Output: [(11 46 -62 -71) -71]
Test Case: 832 | Input/Output: [(-46 16 89 -37) -46]
Test Case: 833 | Input/Output: [(-47 -90 7 -94) -94]
Test Case: 834 | Input/Output: [(-44 -99 -84 63) -99]
Test Case: 835 | Input/Output: [(51 6 24 -90) -90]
Test Case: 836 | Input/Output: [(5 -27 36 62) -27]
Test Case: 837 | Input/Output: [(40 -35 -25 44) -35]
Test Case: 838 | Input/Output: [(16 69 69 27) 16]
Test Case: 839 | Input/Output: [(26 18 -6 70) -6]
Test Case: 840 | Input/Output: [(-24 -21 -13 -42) -42]
Test Case: 841 | Input/Output: [(-20 -90 18 -45) -90]
Test Case: 842 | Input/Output: [(10 -39 -22 59) -39]
Test Case: 843 | Input/Output: [(100 -82 -8 79) -82]
Test Case: 844 | Input/Output: [(87 -14 34 -69) -69]
Test Case: 845 | Input/Output: [(-26 27 44 84) -26]
Test Case: 846 | Input/Output: [(-46 -14 59 -81) -81]
Test Case: 847 | Input/Output: [(31 11 -42 -35) -42]
Test Case: 848 | Input/Output: [(-10 55 -94 83) -94]
Test Case: 849 | Input/Output: [(-23 -11 100 -79) -79]
Test Case: 850 | Input/Output: [(79 -51 14 -62) -62]
Test Case: 851 | Input/Output: [(-90 98 -68 83) -90]
Test Case: 852 | Input/Output: [(-58 57 -49 7) -58]
Test Case: 853 | Input/Output: [(-39 -32 70 10) -39]
Test Case: 854 | Input/Output: [(-86 59 -2 -15) -86]
Test Case: 855 | Input/Output: [(-80 -62 -72 -21) -80]
Test Case: 856 | Input/Output: [(-82 17 -50 28) -82]
Test Case: 857 | Input/Output: [(3 95 86 54) 3]
Test Case: 858 | Input/Output: [(-30 72 -36 51) -36]
Test Case: 859 | Input/Output: [(35 24 14 40) 14]
Test Case: 860 | Input/Output: [(40 16 -83 -8) -83]
Test Case: 861 | Input/Output: [(-76 32 74 -35) -76]
Test Case: 862 | Input/Output: [(-46 58 -3 -69) -69]
Test Case: 863 | Input/Output: [(-15 5 82 -41) -41]
Test Case: 864 | Input/Output: [(40 -69 -53 -30) -69]
Test Case: 865 | Input/Output: [(-52 17 74 -95) -95]
Test Case: 866 | Input/Output: [(-76 71 68 81) -76]
Test Case: 867 | Input/Output: [(23 65 -67 75) -67]
Test Case: 868 | Input/Output: [(-95 -36 -47 -8) -95]
Test Case: 869 | Input/Output: [(90 -95 -79 -43) -95]
Test Case: 870 | Input/Output: [(-96 -43 -19 70) -96]
Test Case: 871 | Input/Output: [(-99 47 -77 35) -99]
Test Case: 872 | Input/Output: [(-49 -36 -40 -20) -49]
Test Case: 873 | Input/Output: [(17 -3 -99 47) -99]
Test Case: 874 | Input/Output: [(-30 49 -96 67) -96]
Test Case: 875 | Input/Output: [(-71 -34 -92 69) -92]
Test Case: 876 | Input/Output: [(-97 100 -90 -15) -97]
Test Case: 877 | Input/Output: [(14 31 -68 57) -68]
Test Case: 878 | Input/Output: [(-57 48 -45 35) -57]
Test Case: 879 | Input/Output: [(-80 -9 82 23) -80]
Test Case: 880 | Input/Output: [(-81 77 -86 -74) -86]
Test Case: 881 | Input/Output: [(-11 -89 1 -81) -89]
Test Case: 882 | Input/Output: [(69 -69 82 -4) -69]
Test Case: 883 | Input/Output: [(61 66 25 77) 25]
Test Case: 884 | Input/Output: [(16 -92 -77 -81) -92]
Test Case: 885 | Input/Output: [(75 22 -76 36) -76]
Test Case: 886 | Input/Output: [(56 91 -37 -16) -37]
Test Case: 887 | Input/Output: [(-17 -26 48 60) -26]
Test Case: 888 | Input/Output: [(44 -1 49 -1) -1]
Test Case: 889 | Input/Output: [(48 -19 96 97) -19]
Test Case: 890 | Input/Output: [(-40 50 -50 -54) -54]
Test Case: 891 | Input/Output: [(96 99 49 -88) -88]
Test Case: 892 | Input/Output: [(41 11 -31 94) -31]
Test Case: 893 | Input/Output: [(62 67 72 61) 61]
Test Case: 894 | Input/Output: [(-38 -50 57 96) -50]
Test Case: 895 | Input/Output: [(35 69 86 48) 35]
Test Case: 896 | Input/Output: [(-53 -72 38 -14) -72]
Test Case: 897 | Input/Output: [(1 -25 -28 39) -28]
Test Case: 898 | Input/Output: [(33 70 8 96) 8]
Test Case: 899 | Input/Output: [(4 76 -62 18) -62]
Test Case: 900 | Input/Output: [(-16 0 62 86) -16]
Test Case: 901 | Input/Output: [(-71 -3 60 44) -71]
Test Case: 902 | Input/Output: [(7 -65 -53 87) -65]
Test Case: 903 | Input/Output: [(53 7 82 100) 7]
Test Case: 904 | Input/Output: [(11 -49 -13 27) -49]
Test Case: 905 | Input/Output: [(-92 -84 49 88) -92]
Test Case: 906 | Input/Output: [(-12 -77 60 88) -77]
Test Case: 907 | Input/Output: [(17 10 -98 86) -98]
Test Case: 908 | Input/Output: [(68 -30 71 -71) -71]
Test Case: 909 | Input/Output: [(32 -20 43 35) -20]
Test Case: 910 | Input/Output: [(-16 -81 33 36) -81]
Test Case: 911 | Input/Output: [(-4 -60 -53 -57) -60]
Test Case: 912 | Input/Output: [(-82 13 -72 98) -82]
Test Case: 913 | Input/Output: [(-72 54 12 -73) -73]
Test Case: 914 | Input/Output: [(-12 -59 -93 -55) -93]
Test Case: 915 | Input/Output: [(-41 -62 -90 -79) -90]
Test Case: 916 | Input/Output: [(-45 16 -69 -70) -70]
Test Case: 917 | Input/Output: [(-10 -53 -33 -4) -53]
Test Case: 918 | Input/Output: [(53 7 89 -15) -15]
Test Case: 919 | Input/Output: [(-43 31 81 72) -43]
Test Case: 920 | Input/Output: [(96 -83 65 -18) -83]
Test Case: 921 | Input/Output: [(-75 60 -14 -27) -75]
Test Case: 922 | Input/Output: [(-86 -84 -100 71) -100]
Test Case: 923 | Input/Output: [(88 70 -42 100) -42]
Test Case: 924 | Input/Output: [(60 -98 -40 4) -98]
Test Case: 925 | Input/Output: [(13 20 6 79) 6]
Test Case: 926 | Input/Output: [(-73 -38 -7 -6) -73]
Test Case: 927 | Input/Output: [(98 37 -5 79) -5]
Test Case: 928 | Input/Output: [(-31 -56 72 20) -56]
Test Case: 929 | Input/Output: [(-40 62 -41 -81) -81]
Test Case: 930 | Input/Output: [(53 -74 -11 -86) -86]
Test Case: 931 | Input/Output: [(41 -32 -35 90) -35]
Test Case: 932 | Input/Output: [(-87 -94 -20 -24) -94]
Test Case: 933 | Input/Output: [(-75 -22 15 62) -75]
Test Case: 934 | Input/Output: [(-63 96 -21 80) -63]
Test Case: 935 | Input/Output: [(75 59 90 73) 59]
Test Case: 936 | Input/Output: [(48 -100 -50 93) -100]
Test Case: 937 | Input/Output: [(-2 49 -17 -85) -85]
Test Case: 938 | Input/Output: [(57 -9 -76 10) -76]
Test Case: 939 | Input/Output: [(-19 82 6 -69) -69]
Test Case: 940 | Input/Output: [(21 46 36 78) 21]
Test Case: 941 | Input/Output: [(-58 -26 -36 12) -58]
Test Case: 942 | Input/Output: [(-18 -39 17 35) -39]
Test Case: 943 | Input/Output: [(-45 -39 -53 -73) -73]
Test Case: 944 | Input/Output: [(41 6 70 -41) -41]
Test Case: 945 | Input/Output: [(98 71 -21 36) -21]
Test Case: 946 | Input/Output: [(43 -19 -86 45) -86]
Test Case: 947 | Input/Output: [(-57 79 -67 95) -67]
Test Case: 948 | Input/Output: [(97 44 -42 -20) -42]
Test Case: 949 | Input/Output: [(4 -58 -40 80) -58]
Test Case: 950 | Input/Output: [(60 -3 33 -23) -23]
Test Case: 951 | Input/Output: [(-82 49 -58 -53) -82]
Test Case: 952 | Input/Output: [(-6 91 74 -70) -70]
Test Case: 953 | Input/Output: [(-98 -96 55 -48) -98]
Test Case: 954 | Input/Output: [(2 -25 -88 50) -88]
Test Case: 955 | Input/Output: [(64 68 -47 81) -47]
Test Case: 956 | Input/Output: [(-9 -32 -13 -86) -86]
Test Case: 957 | Input/Output: [(5 -75 44 52) -75]
Test Case: 958 | Input/Output: [(32 68 -19 95) -19]
Test Case: 959 | Input/Output: [(-66 -100 -4 28) -100]
Test Case: 960 | Input/Output: [(-82 -40 -85 -51) -85]
Test Case: 961 | Input/Output: [(-22 25 17 82) -22]
Test Case: 962 | Input/Output: [(-91 29 87 -95) -95]
Test Case: 963 | Input/Output: [(-4 48 -99 -77) -99]
Test Case: 964 | Input/Output: [(74 78 49 -9) -9]
Test Case: 965 | Input/Output: [(-29 0 -6 -8) -29]
Test Case: 966 | Input/Output: [(-13 59 -52 58) -52]
Test Case: 967 | Input/Output: [(89 85 -34 -79) -79]
Test Case: 968 | Input/Output: [(96 85 77 6) 6]
Test Case: 969 | Input/Output: [(-58 -10 -1 -89) -89]
Test Case: 970 | Input/Output: [(-13 9 -98 -57) -98]
Test Case: 971 | Input/Output: [(61 -80 68 -21) -80]
Test Case: 972 | Input/Output: [(47 60 12 18) 12]
Test Case: 973 | Input/Output: [(49 34 28 1) 1]
Test Case: 974 | Input/Output: [(-88 20 -55 32) -88]
Test Case: 975 | Input/Output: [(26 37 -80 -51) -80]
Test Case: 976 | Input/Output: [(88 -92 -71 -93) -93]
Test Case: 977 | Input/Output: [(-22 -51 -44 -46) -51]
Test Case: 978 | Input/Output: [(97 94 -92 -94) -94]
Test Case: 979 | Input/Output: [(-71 -44 2 98) -71]
Test Case: 980 | Input/Output: [(-48 -80 -2 20) -80]
Test Case: 981 | Input/Output: [(44 20 -29 -63) -63]
Test Case: 982 | Input/Output: [(-55 40 30 41) -55]
Test Case: 983 | Input/Output: [(90 38 -76 -95) -95]
Test Case: 984 | Input/Output: [(49 28 63 3) 3]
Test Case: 985 | Input/Output: [(-80 29 -96 -95) -96]
Test Case: 986 | Input/Output: [(54 -58 -88 73) -88]
Test Case: 987 | Input/Output: [(16 6 19 11) 6]
Test Case: 988 | Input/Output: [(-52 30 64 98) -52]
Test Case: 989 | Input/Output: [(-24 -73 -93 85) -93]
Test Case: 990 | Input/Output: [(-44 67 -83 -90) -90]
Test Case: 991 | Input/Output: [(-22 -25 36 -62) -62]
Test Case: 992 | Input/Output: [(-27 -76 11 -100) -100]
Test Case: 993 | Input/Output: [(3 44 -19 76) -19]
Test Case: 994 | Input/Output: [(43 11 28 89) 11]
Test Case: 995 | Input/Output: [(-83 31 84 -16) -83]
Test Case: 996 | Input/Output: [(59 12 -70 64) -70]
Test Case: 997 | Input/Output: [(7 -9 -46 -43) -46]
Test Case: 998 | Input/Output: [(-32 87 53 70) -32]
Test Case: 999 | Input/Output: [(17 13 -39 78) -39]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -100 -97 -69 121 -43 -49 49 127 19 -57 -41 -13 -53 80 -78 -125
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[29 37 37 37] 29] [[-95 -95 43 -95] -95] [[-35 -35 -35 -85] -85] [[-59 -59 69 -59] -59] [[-22 -22 -22 52] -22] [[54 -6 -6 -6] -6] [[78 -16 -16 -16] -16] [[-55 38 -55 -55] -55] [[26 -83 -83 -83] -83] [[82 82 44 82] 44] [(-83 -83 -83 -83) -83] [(-14 -14 -14 -14) -14] [(-90 -90 -90 -90) -90] [(1 1 1 1) 1] [(-45 -45 -45 -45) -45] [(90 8 72 66) 8] [(18 37 77 64) 18] [(44 83 26 28) 26] [(37 50 91 76) 37] [(62 0 55 81) 0] [(18 26 84 52) 18] [(2 45 32 74) 2] [(80 80 81 15) 15] [(21 49 20 83) 20] [(2 5 90 75) 2] [(64 51 37 77) 37] [(21 18 79 12) 12] [(11 30 40 45) 11] [(0 7 45 12) 0] [(77 85 53 48) 48] [(17 10 89 40) 10] [(27 19 58 19) 19] [(56 66 61 29) 29] [(17 11 10 66) 10] [(58 98 0 7) 0] [(82 5 -38 -18) -38] [(17 -8 82 -5) -8] [(-29 84 -100 49) -100] [(45 -98 -40 88) -98] [(-34 49 29 -17) -34] [(61 11 82 27) 11] [(56 22 89 -7) -7] [(-59 -33 -60 -90) -90] [(-15 64 62 63) -15] [(-17 -55 91 -43) -55] [(-72 -99 -44 66) -99] [(-94 -57 -66 -98) -98] [(32 -62 -85 23) -85] [(42 -54 -20 0) -54] [(-32 34 59 93) -32] [(-29 -18 -27 97) -29] [(-95 68 85 -16) -95] [(99 -50 96 -49) -50] [(-72 53 -1 7) -72] [(100 -10 -52 -96) -96] [(83 -93 91 47) -93] [(-87 2 35 45) -87] [(16 82 -62 4) -62] [(47 -3 30 41) -3] [(87 -3 -41 79) -41] [(-76 -27 -73 84) -76] [(-34 18 -34 -28) -34] [(16 15 -81 -26) -81] [(63 41 46 -23) -23] [(-91 -75 -22 -42) -91] [(89 -69 93 -22) -69] [(-75 13 -63 -2) -75] [(-68 -100 -56 -41) -100] [(-68 -71 21 74) -71] [(49 84 -41 43) -41] [(24 -38 56 51) -38] [(60 -41 76 85) -41] [(77 -27 -93 4) -93] [(97 88 -84 93) -84] [(-36 51 65 -29) -36] [(-60 84 -91 -97) -97] [(4 61 77 79) 4] [(85 -63 -17 15) -63] [(-98 5 54 -58) -98] [(-100 71 -61 -45) -100] [(77 74 86 0) 0] [(96 9 -93 14) -93] [(-99 -4 -35 -24) -99] [(-41 -5 -12 -21) -41] [(-60 -90 -80 -32) -90] [(-92 -13 -29 -31) -92] [(-38 22 43 -75) -75] [(-31 87 2 5) -31] [(31 -12 8 -22) -22] [(55 -24 89 -9) -24] [(-24 44 32 -49) -49] [(89 8 68 36) 8] [(-62 70 -80 100) -80] [(52 -98 -97 73) -98] [(-25 31 -42 -97) -97])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 37                 
Correct output: -95                 | Program output: 43                 
Correct output: -85                 | Program output: -35                
Correct output: -59                 | Program output: 69                 
Correct output: -22                 | Program output: -22                
Correct output: -6                  | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -55                 | Program output: -55                
Correct output: -83                 | Program output: -83                
Correct output: 44                  | Program output: 44                 
Correct output: -83                 | Program output: -83                
Correct output: -14                 | Program output: -14                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 1                  
Correct output: -45                 | Program output: -45                
Correct output: 8                   | Program output: 72                 
Correct output: 18                  | Program output: 77                 
Correct output: 26                  | Program output: 26                 
Correct output: 37                  | Program output: 91                 
Correct output: 0                   | Program output: 55                 
Correct output: 18                  | Program output: 84                 
Correct output: 2                   | Program output: 32                 
Correct output: 15                  | Program output: 81                 
Correct output: 20                  | Program output: 20                 
Correct output: 2                   | Program output: 90                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 79                 
Correct output: 11                  | Program output: 40                 
Correct output: 0                   | Program output: 45                 
Correct output: 48                  | Program output: 53                 
Correct output: 10                  | Program output: 89                 
Correct output: 19                  | Program output: 58                 
Correct output: 29                  | Program output: 61                 
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 0                  
Correct output: -38                 | Program output: -38                
Correct output: -8                  | Program output: 82                 
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -40                
Correct output: -34                 | Program output: 29                 
Correct output: 11                  | Program output: 82                 
Correct output: -7                  | Program output: 89                 
Correct output: -90                 | Program output: -60                
Correct output: -15                 | Program output: 62                 
Correct output: -55                 | Program output: 91                 
Correct output: -99                 | Program output: -44                
Correct output: -98                 | Program output: -66                
Correct output: -85                 | Program output: -85                
Correct output: -54                 | Program output: -20                
Correct output: -32                 | Program output: 59                 
Correct output: -29                 | Program output: -27                
Correct output: -95                 | Program output: 85                 
Correct output: -50                 | Program output: 96                 
Correct output: -72                 | Program output: -1                 
Correct output: -96                 | Program output: -52                
Correct output: -93                 | Program output: 91                 
Correct output: -87                 | Program output: 35                 
Correct output: -62                 | Program output: -62                
Correct output: -3                  | Program output: 30                 
Correct output: -41                 | Program output: -41                
Correct output: -76                 | Program output: -73                
Correct output: -34                 | Program output: -34                
Correct output: -81                 | Program output: -81                
Correct output: -23                 | Program output: 46                 
Correct output: -91                 | Program output: -22                
Correct output: -69                 | Program output: 93                 
Correct output: -75                 | Program output: -63                
Correct output: -100                | Program output: -56                
Correct output: -71                 | Program output: 21                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: 56                 
Correct output: -41                 | Program output: 76                 
Correct output: -93                 | Program output: -93                
Correct output: -84                 | Program output: -84                
Correct output: -36                 | Program output: 65                 
Correct output: -97                 | Program output: -91                
Correct output: 4                   | Program output: 77                 
Correct output: -63                 | Program output: -17                
Correct output: -98                 | Program output: 54                 
Correct output: -100                | Program output: -61                
Correct output: 0                   | Program output: 86                 
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -35                
Correct output: -41                 | Program output: -12                
Correct output: -90                 | Program output: -80                
Correct output: -92                 | Program output: -29                
Correct output: -75                 | Program output: 43                 
Correct output: -31                 | Program output: 2                  
Correct output: -22                 | Program output: 8                  
Correct output: -24                 | Program output: 89                 
Correct output: -49                 | Program output: 32                 
Correct output: 8                   | Program output: 68                 
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -97                
Correct output: -97                 | Program output: -42                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 1, :instruction tag_boolean_189} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_integer_285} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_lte} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 3, :instruction exec_dup_times} {:close 0, :instruction integer_yank})
Lexicase best program: (boolean_dup_times boolean_yankdup boolean_or integer_empty boolean_invert_second_then_and in3 tag_boolean_189 exec_do*range (boolean_invert_first_then_and integer_gt print_integer) boolean_xor integer_dup exec_do*while (boolean_and boolean_invert_second_then_and) integer_stackdepth integer_mult boolean_yank integer_stackdepth in1 boolean_dup_items exec_yank exec_do*count () integer_div exec_swap (tag_integer_285 integer_eq boolean_eq integer_gt print_integer exec_y () exec_do*range (integer_lte exec_k_when_autoconstructing (exec_when (exec_when (integer_swap boolean_yankdup integer_lt exec_rot (exec_if (boolean_empty in3 boolean_and integer_dec integer_lte in3 exec_yankdup exec_dup_items in4 exec_dup () integer_inc) (integer_pop boolean_flush exec_shove (exec_stackdepth boolean_yank exec_dup_times ())) integer_yank) () ()))) ())) ())
Lexicase best errors: [1 0 1 1 1 1 1 0 1 0]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 80
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 1, :instruction tag_boolean_189} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_integer_285} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_lte} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 3, :instruction exec_dup_times} {:close 0, :instruction integer_yank})
Zero cases best program: (boolean_dup_times boolean_yankdup boolean_or integer_empty boolean_invert_second_then_and in3 tag_boolean_189 exec_do*range (boolean_invert_first_then_and integer_gt print_integer) boolean_xor integer_dup exec_do*while (boolean_and boolean_invert_second_then_and) integer_stackdepth integer_mult boolean_yank integer_stackdepth in1 boolean_dup_items exec_yank exec_do*count () integer_div exec_swap (tag_integer_285 integer_eq boolean_eq integer_gt print_integer exec_y () exec_do*range (integer_lte exec_k_when_autoconstructing (exec_when (exec_when (integer_swap boolean_yankdup integer_lt exec_rot (exec_if (boolean_empty in3 boolean_and integer_dec integer_lte in3 exec_yankdup exec_dup_items in4 exec_dup () integer_inc) (integer_pop boolean_flush exec_shove (exec_stackdepth boolean_yank exec_dup_times ())) integer_yank) () ()))) ())) ())
Zero cases best errors: [1 0 1 1 1 1 1 0 1 0]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 80
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 4 5 1 2 1 2 3 5 4)
Population mean number of elite cases: 0.03
Count of perfect (error zero) individuals by case: (2 4 5 1 2 1 2 3 5 4)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction in3} {:close 0, :instruction integer_max} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_386} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction print_exec} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult})
Best program: (in3 integer_max print_integer boolean_rot boolean_dup_items integer_inc exec_shove (integer_dec exec_dup_items integer_lte boolean_rot boolean_dup_items in3 boolean_yank) integer_yank integer_sub boolean_eq boolean_empty exec_dup_items boolean_and exec_do*times (boolean_and) exec_s (exec_swap (integer_add integer_mult integer_lte boolean_pop integer_swap exec_stackdepth boolean_shove exec_yank integer_dup_times) (exec_y_when_autoconstructing (integer_lte exec_stackdepth) integer_pop) integer_yankdup in2 integer_mod) (exec_y_when_autoconstructing () integer_stackdepth exec_dup () integer_div boolean_empty exec_empty boolean_eq boolean_yank exec_swap (exec_s_when_autoconstructing (exec_yankdup in2) (boolean_invert_second_then_and exec_do*count (boolean_or exec_do*while () boolean_or in3 integer_gt exec_yank exec_y_when_autoconstructing (boolean_invert_second_then_and exec_y_when_autoconstructing ()) integer_gt) in2 exec_stackdepth in2 integer_add tag_exec_386 (integer_pop exec_do*times (exec_flush exec_if (exec_do*count (integer_eq boolean_shove integer_rot print_exec (integer_sub boolean_invert_second_then_and) exec_stackdepth boolean_flush exec_y (exec_dup_items boolean_xor) integer_gte in2 exec_shove (exec_while (boolean_eq exec_stackdepth integer_div integer_mult boolean_dup) integer_yankdup exec_s (print_integer integer_mult) () ()))) ()))) ()) ()) ())
Errors: [1 0 1 1 1 1 1 0 1 0]
Total: 7
Mean: 0.7
Genome size: 98
Size: 130
Percent parens: 0.246
--- Population Statistics ---
Average total errors in population: 9.971
Median total errors in population: 10
Error averages by case: (0.998 0.996 0.995 0.999 0.998 0.999 0.998 0.997 0.995 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.306
Average program size in population (points): 69.455
Average percent parens in population: 0.280
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.287
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 497928
--- Timings ---
Current time: 1559582655737 milliseconds
Total Time:           2.8 seconds
Initialization:       0.1 seconds,  3.7%
Reproduction:         0.8 seconds, 29.8%
Fitness Testing:      1.9 seconds, 66.4%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 413
Test mean error for best: 0.41300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 37                 
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -22                 | Program output: -22                
Correct output: -6                  | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -55                 | Program output: -55                
Correct output: -83                 | Program output: -83                
Correct output: 44                  | Program output: 44                 
Correct output: -83                 | Program output: -83                
Correct output: -14                 | Program output: -14                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 1                  
Correct output: -45                 | Program output: -45                
Correct output: 8                   | Program output: 66                 
Correct output: 18                  | Program output: 64                 
Correct output: 26                  | Program output: 26                 
Correct output: 37                  | Program output: 76                 
Correct output: 0                   | Program output: 55                 
Correct output: 18                  | Program output: 52                 
Correct output: 2                   | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 20                 
Correct output: 2                   | Program output: 75                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 40                 
Correct output: 0                   | Program output: 12                 
Correct output: 48                  | Program output: 48                 
Correct output: 10                  | Program output: 40                 
Correct output: 19                  | Program output: 19                 
Correct output: 29                  | Program output: 29                 
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 0                  
Correct output: -38                 | Program output: -38                
Correct output: -8                  | Program output: -5                 
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -40                
Correct output: -34                 | Program output: -17                
Correct output: 11                  | Program output: 27                 
Correct output: -7                  | Program output: -7                 
Correct output: -90                 | Program output: -90                
Correct output: -15                 | Program output: 62                 
Correct output: -55                 | Program output: -43                
Correct output: -99                 | Program output: -44                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: -85                
Correct output: -54                 | Program output: -20                
Correct output: -32                 | Program output: 59                 
Correct output: -29                 | Program output: -27                
Correct output: -95                 | Program output: -16                
Correct output: -50                 | Program output: -49                
Correct output: -72                 | Program output: -1                 
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: 47                 
Correct output: -87                 | Program output: 35                 
Correct output: -62                 | Program output: -62                
Correct output: -3                  | Program output: 30                 
Correct output: -41                 | Program output: -41                
Correct output: -76                 | Program output: -73                
Correct output: -34                 | Program output: -34                
Correct output: -81                 | Program output: -81                
Correct output: -23                 | Program output: -23                
Correct output: -91                 | Program output: -42                
Correct output: -69                 | Program output: -22                
Correct output: -75                 | Program output: -63                
Correct output: -100                | Program output: -56                
Correct output: -71                 | Program output: 21                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: 51                 
Correct output: -41                 | Program output: 76                 
Correct output: -93                 | Program output: -93                
Correct output: -84                 | Program output: -84                
Correct output: -36                 | Program output: -29                
Correct output: -97                 | Program output: -97                
Correct output: 4                   | Program output: 77                 
Correct output: -63                 | Program output: -17                
Correct output: -98                 | Program output: -58                
Correct output: -100                | Program output: -61                
Correct output: 0                   | Program output: 0                  
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -35                
Correct output: -41                 | Program output: -21                
Correct output: -90                 | Program output: -80                
Correct output: -92                 | Program output: -31                
Correct output: -75                 | Program output: -75                
Correct output: -31                 | Program output: 2                  
Correct output: -22                 | Program output: -22                
Correct output: -24                 | Program output: -9                 
Correct output: -49                 | Program output: -49                
Correct output: 8                   | Program output: 36                 
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -97                
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 1, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (boolean_yank integer_dup in3 exec_k (integer_max exec_s_when_autoconstructing (boolean_shove boolean_eq print_boolean) (exec_s_when_autoconstructing (exec_swap () (integer_gte exec_swap (integer_min integer_swap boolean_or) (integer_lt boolean_flush integer_gte in4) integer_swap print_integer boolean_dup_times) boolean_stackdepth integer_eq exec_do*times (boolean_shove exec_noop boolean_pop exec_dup_times (exec_while (exec_s_when_autoconstructing () (boolean_pop) (boolean_flush exec_s_when_autoconstructing (exec_k (integer_pop boolean_stackdepth 3 exec_do*count (exec_shove () boolean_dup exec_k_when_autoconstructing () ())) ()) () ()))))) () ()) ()) ())
Lexicase best errors: [1 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 71
Percent parens: 0.394
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 1, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (boolean_yank integer_dup in3 exec_k (integer_max exec_s_when_autoconstructing (boolean_shove boolean_eq print_boolean) (exec_s_when_autoconstructing (exec_swap () (integer_gte exec_swap (integer_min integer_swap boolean_or) (integer_lt boolean_flush integer_gte in4) integer_swap print_integer boolean_dup_times) boolean_stackdepth integer_eq exec_do*times (boolean_shove exec_noop boolean_pop exec_dup_times (exec_while (exec_s_when_autoconstructing () (boolean_pop) (boolean_flush exec_s_when_autoconstructing (exec_k (integer_pop boolean_stackdepth 3 exec_do*count (exec_shove () boolean_dup exec_k_when_autoconstructing () ())) ()) () ()))))) () ()) ()) ())
Zero cases best errors: [1 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 71
Percent parens: 0.394
--- Lexicase Population Statistics ---
Count of elite individuals by case: (256 855 624 104 263 104 263 262 256 104)
Population mean number of elite cases: 3.09
Count of perfect (error zero) individuals by case: (256 855 624 104 263 104 263 262 256 104)
Population mean number of perfect (error zero) cases: 3.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 1, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing})
Best program: (boolean_yank integer_dup in3 exec_k (integer_max exec_s_when_autoconstructing (boolean_shove boolean_eq print_boolean) (exec_s_when_autoconstructing (exec_swap () (integer_gte exec_swap (integer_min integer_swap boolean_or) (integer_lt boolean_flush integer_gte in4) integer_swap print_integer boolean_dup_times) boolean_stackdepth integer_eq exec_do*times (boolean_shove exec_noop boolean_pop exec_dup_times (exec_while (exec_s_when_autoconstructing () (boolean_pop) (boolean_flush exec_s_when_autoconstructing (exec_k (integer_pop boolean_stackdepth 3 exec_do*count (exec_shove () boolean_dup exec_k_when_autoconstructing () ())) ()) () ()))))) () ()) ()) ())
Errors: [1 0 0 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 43
Size: 71
Percent parens: 0.394
--- Population Statistics ---
Average total errors in population: 6.909
Median total errors in population: 6
Error averages by case: (0.744 0.145 0.376 0.896 0.737 0.896 0.737 0.738 0.744 0.896)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.922
Average program size in population (points): 89.938
Average percent parens in population: 0.300
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.484
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 114
Genome diversity (% unique genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 114
Syntactic diversity (% unique Push programs):	 0.601
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1341557
--- Timings ---
Current time: 1559582658793 milliseconds
Total Time:           6.4 seconds
Initialization:       0.1 seconds,  1.6%
Reproduction:         2.5 seconds, 39.1%
Fitness Testing:      2.9 seconds, 45.6%
Report:               0.9 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 413
Test mean error for best: 0.41300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 37                 
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -22                 | Program output: -22                
Correct output: -6                  | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -55                 | Program output: -55                
Correct output: -83                 | Program output: -83                
Correct output: 44                  | Program output: 44                 
Correct output: -83                 | Program output: -83                
Correct output: -14                 | Program output: -14                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 1                  
Correct output: -45                 | Program output: -45                
Correct output: 8                   | Program output: 66                 
Correct output: 18                  | Program output: 64                 
Correct output: 26                  | Program output: 26                 
Correct output: 37                  | Program output: 76                 
Correct output: 0                   | Program output: 55                 
Correct output: 18                  | Program output: 52                 
Correct output: 2                   | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 20                 
Correct output: 2                   | Program output: 75                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 40                 
Correct output: 0                   | Program output: 12                 
Correct output: 48                  | Program output: 48                 
Correct output: 10                  | Program output: 40                 
Correct output: 19                  | Program output: 19                 
Correct output: 29                  | Program output: 29                 
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 0                  
Correct output: -38                 | Program output: -38                
Correct output: -8                  | Program output: -5                 
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -40                
Correct output: -34                 | Program output: -17                
Correct output: 11                  | Program output: 27                 
Correct output: -7                  | Program output: -7                 
Correct output: -90                 | Program output: -90                
Correct output: -15                 | Program output: 62                 
Correct output: -55                 | Program output: -43                
Correct output: -99                 | Program output: -44                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: -85                
Correct output: -54                 | Program output: -20                
Correct output: -32                 | Program output: 59                 
Correct output: -29                 | Program output: -27                
Correct output: -95                 | Program output: -16                
Correct output: -50                 | Program output: -49                
Correct output: -72                 | Program output: -1                 
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: 47                 
Correct output: -87                 | Program output: 35                 
Correct output: -62                 | Program output: -62                
Correct output: -3                  | Program output: 30                 
Correct output: -41                 | Program output: -41                
Correct output: -76                 | Program output: -73                
Correct output: -34                 | Program output: -34                
Correct output: -81                 | Program output: -81                
Correct output: -23                 | Program output: -23                
Correct output: -91                 | Program output: -42                
Correct output: -69                 | Program output: -22                
Correct output: -75                 | Program output: -63                
Correct output: -100                | Program output: -56                
Correct output: -71                 | Program output: 21                 
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: 51                 
Correct output: -41                 | Program output: 76                 
Correct output: -93                 | Program output: -93                
Correct output: -84                 | Program output: -84                
Correct output: -36                 | Program output: -29                
Correct output: -97                 | Program output: -97                
Correct output: 4                   | Program output: 77                 
Correct output: -63                 | Program output: -17                
Correct output: -98                 | Program output: -58                
Correct output: -100                | Program output: -61                
Correct output: 0                   | Program output: 0                  
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -35                
Correct output: -41                 | Program output: -21                
Correct output: -90                 | Program output: -80                
Correct output: -92                 | Program output: -31                
Correct output: -75                 | Program output: -75                
Correct output: -31                 | Program output: 2                  
Correct output: -22                 | Program output: -22                
Correct output: -24                 | Program output: -9                 
Correct output: -49                 | Program output: -49                
Correct output: 8                   | Program output: 36                 
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -97                
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 1, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (boolean_yank integer_dup in3 exec_k (integer_max exec_s_when_autoconstructing (boolean_shove boolean_eq print_boolean) (exec_s_when_autoconstructing (exec_swap () (integer_gte exec_swap (integer_min integer_swap boolean_or) (integer_lt boolean_flush integer_gte in4) integer_swap print_integer boolean_dup_times) boolean_stackdepth integer_eq exec_do*times (boolean_shove exec_noop boolean_pop exec_dup_times (exec_while (exec_s_when_autoconstructing () (boolean_pop) (boolean_flush exec_s_when_autoconstructing (exec_k (integer_pop boolean_stackdepth 3 exec_do*count (exec_shove () boolean_dup exec_k_when_autoconstructing () ())) ()) () ()))))) () ()) ()) ())
Lexicase best errors: [0 1 1 1 1 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 71
Percent parens: 0.394
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 1, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (boolean_yank integer_dup in3 exec_k (integer_max exec_s_when_autoconstructing (boolean_shove boolean_eq print_boolean) (exec_s_when_autoconstructing (exec_swap () (integer_gte exec_swap (integer_min integer_swap boolean_or) (integer_lt boolean_flush integer_gte in4) integer_swap print_integer boolean_dup_times) boolean_stackdepth integer_eq exec_do*times (boolean_shove exec_noop boolean_pop exec_dup_times (exec_while (exec_s_when_autoconstructing () (boolean_pop) (boolean_flush exec_s_when_autoconstructing (exec_k (integer_pop boolean_stackdepth 3 exec_do*count (exec_shove () boolean_dup exec_k_when_autoconstructing () ())) ()) () ()))))) () ()) ()) ())
Zero cases best errors: [0 1 1 1 1 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 71
Percent parens: 0.394
--- Lexicase Population Statistics ---
Count of elite individuals by case: (909 219 1000 1000 1000 642 652 219 642 647)
Population mean number of elite cases: 6.93
Count of perfect (error zero) individuals by case: (909 219 0 0 0 642 652 219 642 647)
Population mean number of perfect (error zero) cases: 3.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 1, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing})
Best program: (boolean_yank integer_dup in3 exec_k (integer_max exec_s_when_autoconstructing (boolean_shove boolean_eq print_boolean) (exec_s_when_autoconstructing (exec_swap () (integer_gte exec_swap (integer_min integer_swap boolean_or) (integer_lt boolean_flush integer_gte in4) integer_swap print_integer boolean_dup_times) boolean_stackdepth integer_eq exec_do*times (boolean_shove exec_noop boolean_pop exec_dup_times (exec_while (exec_s_when_autoconstructing () (boolean_pop) (boolean_flush exec_s_when_autoconstructing (exec_k (integer_pop boolean_stackdepth 3 exec_do*count (exec_shove () boolean_dup exec_k_when_autoconstructing () ())) ()) () ()))))) () ()) ()) ())
Errors: [0 1 1 1 1 0 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 43
Size: 71
Percent parens: 0.394
--- Population Statistics ---
Average total errors in population: 6.07
Median total errors in population: 5
Error averages by case: (0.091 0.781 1.0 1.0 1.0 0.358 0.348 0.781 0.358 0.353)
Error minima by case: (0 0 1 1 1 0 0 0 0 0)
Average genome size in population (length): 49.334
Average program size in population (points): 78.305
Average percent parens in population: 0.375
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.369
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 393
Genome diversity (% unique genomes):	 0.559
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 394
Syntactic diversity (% unique Push programs):	 0.557
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1701196
--- Timings ---
Current time: 1559582661839 milliseconds
Total Time:           9.4 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.8 seconds, 51.0%
Fitness Testing:      3.3 seconds, 35.2%
Report:               1.2 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 412
Test mean error for best: 0.41200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 29                  | Program output: 37                 
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -22                 | Program output: -22                
Correct output: -6                  | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -55                 | Program output: -55                
Correct output: -83                 | Program output: -83                
Correct output: 44                  | Program output: 82                 
Correct output: -83                 | Program output: -83                
Correct output: -14                 | Program output: -14                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 1                  
Correct output: -45                 | Program output: -45                
Correct output: 8                   | Program output: 8                  
Correct output: 18                  | Program output: 37                 
Correct output: 26                  | Program output: 28                 
Correct output: 37                  | Program output: 50                 
Correct output: 0                   | Program output: 0                  
Correct output: 18                  | Program output: 26                 
Correct output: 2                   | Program output: 45                 
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 49                 
Correct output: 2                   | Program output: 5                  
Correct output: 37                  | Program output: 51                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 30                 
Correct output: 0                   | Program output: 7                  
Correct output: 48                  | Program output: 48                 
Correct output: 10                  | Program output: 10                 
Correct output: 19                  | Program output: 19                 
Correct output: 29                  | Program output: 29                 
Correct output: 10                  | Program output: 11                 
Correct output: 0                   | Program output: 7                  
Correct output: -38                 | Program output: -18                
Correct output: -8                  | Program output: -8                 
Correct output: -100                | Program output: 49                 
Correct output: -98                 | Program output: -98                
Correct output: -34                 | Program output: -17                
Correct output: 11                  | Program output: 11                 
Correct output: -7                  | Program output: -7                 
Correct output: -90                 | Program output: -90                
Correct output: -15                 | Program output: 63                 
Correct output: -55                 | Program output: -55                
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: -62                
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: 34                 
Correct output: -29                 | Program output: -18                
Correct output: -95                 | Program output: -16                
Correct output: -50                 | Program output: -50                
Correct output: -72                 | Program output: 7                  
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: 2                  
Correct output: -62                 | Program output: 4                  
Correct output: -3                  | Program output: -3                 
Correct output: -41                 | Program output: -3                 
Correct output: -76                 | Program output: -27                
Correct output: -34                 | Program output: -28                
Correct output: -81                 | Program output: -26                
Correct output: -23                 | Program output: -23                
Correct output: -91                 | Program output: -75                
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -71                
Correct output: -41                 | Program output: 43                 
Correct output: -38                 | Program output: -38                
Correct output: -41                 | Program output: -41                
Correct output: -93                 | Program output: -27                
Correct output: -84                 | Program output: 88                 
Correct output: -36                 | Program output: -29                
Correct output: -97                 | Program output: -97                
Correct output: 4                   | Program output: 61                 
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -58                
Correct output: -100                | Program output: -45                
Correct output: 0                   | Program output: 0                  
Correct output: -93                 | Program output: 9                  
Correct output: -99                 | Program output: -24                
Correct output: -41                 | Program output: -21                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -31                
Correct output: -75                 | Program output: -75                
Correct output: -31                 | Program output: 5                  
Correct output: -22                 | Program output: -22                
Correct output: -24                 | Program output: -24                
Correct output: -49                 | Program output: -49                
Correct output: 8                   | Program output: 8                  
Correct output: -80                 | Program output: 70                 
Correct output: -98                 | Program output: -98                
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 1, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_46} {:close 0, :instruction exec_s} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction -64} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_if} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup})
Lexicase best program: (integer_fromboolean print_boolean integer_fromboolean integer_dup in2 exec_s_when_autoconstructing (exec_swap () (integer_gte exec_swap (integer_min integer_swap boolean_or) (integer_lt boolean_flush integer_gte in4) integer_swap print_integer boolean_dup_times) boolean_stackdepth integer_eq exec_do*times (boolean_shove exec_noop boolean_pop exec_dup_times (exec_while (exec_s_when_autoconstructing () (boolean_pop) (boolean_flush exec_s_when_autoconstructing (exec_k (integer_pop boolean_stackdepth 3 exec_do*count (exec_shove () boolean_stackdepth 3 exec_do*count (exec_shove () boolean_invert_second_then_and)) tagged_46 exec_s (integer_swap) (integer_max boolean_dup boolean_dup -64) (integer_sub exec_if (integer_stackdepth) (boolean_swap integer_lt exec_shove (integer_sub exec_dup ())))) ()) () ()))))) () ())
Lexicase best errors: [1 1 0 1 0 0 0 0 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 87
Percent parens: 0.345
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 1, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_46} {:close 0, :instruction exec_s} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction -64} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_if} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup})
Zero cases best program: (integer_fromboolean print_boolean integer_fromboolean integer_dup in2 exec_s_when_autoconstructing (exec_swap () (integer_gte exec_swap (integer_min integer_swap boolean_or) (integer_lt boolean_flush integer_gte in4) integer_swap print_integer boolean_dup_times) boolean_stackdepth integer_eq exec_do*times (boolean_shove exec_noop boolean_pop exec_dup_times (exec_while (exec_s_when_autoconstructing () (boolean_pop) (boolean_flush exec_s_when_autoconstructing (exec_k (integer_pop boolean_stackdepth 3 exec_do*count (exec_shove () boolean_stackdepth 3 exec_do*count (exec_shove () boolean_invert_second_then_and)) tagged_46 exec_s (integer_swap) (integer_max boolean_dup boolean_dup -64) (integer_sub exec_if (integer_stackdepth) (boolean_swap integer_lt exec_shove (integer_sub exec_dup ())))) ()) () ()))))) () ())
Zero cases best errors: [1 1 0 1 0 0 0 0 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 87
Percent parens: 0.345
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 867 1000 302 571 566 308 1000 578)
Population mean number of elite cases: 7.19
Count of perfect (error zero) individuals by case: (0 0 867 0 302 571 566 308 0 578)
Population mean number of perfect (error zero) cases: 3.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 1, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_46} {:close 0, :instruction exec_s} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction -64} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_if} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup})
Best program: (integer_fromboolean print_boolean integer_fromboolean integer_dup in2 exec_s_when_autoconstructing (exec_swap () (integer_gte exec_swap (integer_min integer_swap boolean_or) (integer_lt boolean_flush integer_gte in4) integer_swap print_integer boolean_dup_times) boolean_stackdepth integer_eq exec_do*times (boolean_shove exec_noop boolean_pop exec_dup_times (exec_while (exec_s_when_autoconstructing () (boolean_pop) (boolean_flush exec_s_when_autoconstructing (exec_k (integer_pop boolean_stackdepth 3 exec_do*count (exec_shove () boolean_stackdepth 3 exec_do*count (exec_shove () boolean_invert_second_then_and)) tagged_46 exec_s (integer_swap) (integer_max boolean_dup boolean_dup -64) (integer_sub exec_if (integer_stackdepth) (boolean_swap integer_lt exec_shove (integer_sub exec_dup ())))) ()) () ()))))) () ())
Errors: [1 1 0 1 0 0 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 57
Size: 87
Percent parens: 0.345
--- Population Statistics ---
Average total errors in population: 6.808
Median total errors in population: 6
Error averages by case: (1.0 1.0 0.133 1.0 0.698 0.429 0.434 0.692 1.0 0.422)
Error minima by case: (1 1 0 1 0 0 0 0 1 0)
Average genome size in population (length): 50.307
Average program size in population (points): 79.014
Average percent parens in population: 0.368
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.7775
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 225
Genome diversity (% unique genomes):	 0.69
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 225
Syntactic diversity (% unique Push programs):	 0.69
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2097692
--- Timings ---
Current time: 1559582664563 milliseconds
Total Time:          12.2 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.8 seconds, 55.7%
Fitness Testing:      3.8 seconds, 31.0%
Report:               1.5 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 667
Test mean error for best: 0.66700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 29                 
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -35                
Correct output: -59                 | Program output: -59                
Correct output: -22                 | Program output: -22                
Correct output: -6                  | Program output: 54                 
Correct output: -16                 | Program output: 78                 
Correct output: -55                 | Program output: -55                
Correct output: -83                 | Program output: 26                 
Correct output: 44                  | Program output: 82                 
Correct output: -83                 | Program output: -83                
Correct output: -14                 | Program output: -14                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 1                  
Correct output: -45                 | Program output: -45                
Correct output: 8                   | Program output: 90                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 44                 
Correct output: 37                  | Program output: 37                 
Correct output: 0                   | Program output: 62                 
Correct output: 18                  | Program output: 18                 
Correct output: 2                   | Program output: 2                  
Correct output: 15                  | Program output: 80                 
Correct output: 20                  | Program output: 21                 
Correct output: 2                   | Program output: 2                  
Correct output: 37                  | Program output: 64                 
Correct output: 12                  | Program output: 21                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 0                  
Correct output: 48                  | Program output: 77                 
Correct output: 10                  | Program output: 17                 
Correct output: 19                  | Program output: 27                 
Correct output: 29                  | Program output: 56                 
Correct output: 10                  | Program output: 17                 
Correct output: 0                   | Program output: 58                 
Correct output: -38                 | Program output: 82                 
Correct output: -8                  | Program output: 17                 
Correct output: -100                | Program output: -29                
Correct output: -98                 | Program output: 45                 
Correct output: -34                 | Program output: -34                
Correct output: 11                  | Program output: 61                 
Correct output: -7                  | Program output: 56                 
Correct output: -90                 | Program output: -59                
Correct output: -15                 | Program output: -15                
Correct output: -55                 | Program output: -17                
Correct output: -99                 | Program output: -72                
Correct output: -98                 | Program output: -94                
Correct output: -85                 | Program output: 32                 
Correct output: -54                 | Program output: 42                 
Correct output: -32                 | Program output: -32                
Correct output: -29                 | Program output: -29                
Correct output: -95                 | Program output: -95                
Correct output: -50                 | Program output: 99                 
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: 100                
Correct output: -93                 | Program output: 83                 
Correct output: -87                 | Program output: -87                
Correct output: -62                 | Program output: 16                 
Correct output: -3                  | Program output: 47                 
Correct output: -41                 | Program output: 87                 
Correct output: -76                 | Program output: -76                
Correct output: -34                 | Program output: -34                
Correct output: -81                 | Program output: 16                 
Correct output: -23                 | Program output: 63                 
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: 89                 
Correct output: -75                 | Program output: -75                
Correct output: -100                | Program output: -68                
Correct output: -71                 | Program output: -68                
Correct output: -41                 | Program output: 49                 
Correct output: -38                 | Program output: 24                 
Correct output: -41                 | Program output: 60                 
Correct output: -93                 | Program output: 77                 
Correct output: -84                 | Program output: 97                 
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -60                
Correct output: 4                   | Program output: 4                  
Correct output: -63                 | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: 0                   | Program output: 77                 
Correct output: -93                 | Program output: 96                 
Correct output: -99                 | Program output: -99                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -60                
Correct output: -92                 | Program output: -92                
Correct output: -75                 | Program output: -38                
Correct output: -31                 | Program output: -31                
Correct output: -22                 | Program output: 31                 
Correct output: -24                 | Program output: 55                 
Correct output: -49                 | Program output: -24                
Correct output: 8                   | Program output: 89                 
Correct output: -80                 | Program output: -62                
Correct output: -98                 | Program output: 52                 
Correct output: -97                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 1, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (boolean_yank integer_dup in3 exec_k (integer_max exec_s_when_autoconstructing (boolean_shove boolean_eq print_boolean) (exec_s_when_autoconstructing (exec_swap () (integer_gte exec_swap (in1 integer_swap boolean_or) (integer_lt boolean_flush integer_gte in4) integer_swap print_integer boolean_dup_times) boolean_stackdepth integer_eq exec_do*times (boolean_shove exec_noop boolean_pop exec_dup_times (exec_while (exec_s_when_autoconstructing () (boolean_pop) (boolean_flush exec_empty exec_k (integer_pop boolean_stackdepth 3 exec_do*count (exec_shove () boolean_flush exec_s_when_autoconstructing (exec_k (integer_pop boolean_stackdepth 3 exec_do*count (exec_shove () boolean_dup exec_k_when_autoconstructing () ())) ()) () ())) ()))))) () ()) ()) ())
Lexicase best errors: [1 0 0 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 83
Percent parens: 0.386
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 1, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (boolean_yank integer_dup in3 exec_k (integer_max exec_s_when_autoconstructing (boolean_shove boolean_eq print_boolean) (exec_s_when_autoconstructing (exec_swap () (integer_gte exec_swap (in1 integer_swap boolean_or) (integer_lt boolean_flush integer_gte in4) integer_swap print_integer boolean_dup_times) boolean_stackdepth integer_eq exec_do*times (boolean_shove exec_noop boolean_pop exec_dup_times (exec_while (exec_s_when_autoconstructing () (boolean_pop) (boolean_flush exec_empty exec_k (integer_pop boolean_stackdepth 3 exec_do*count (exec_shove () boolean_flush exec_s_when_autoconstructing (exec_k (integer_pop boolean_stackdepth 3 exec_do*count (exec_shove () boolean_dup exec_k_when_autoconstructing () ())) ()) () ())) ()))))) () ()) ()) ())
Zero cases best errors: [1 0 0 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 83
Percent parens: 0.386
--- Lexicase Population Statistics ---
Count of elite individuals by case: (622 1 1 945 622 622 1 1 1 622)
Population mean number of elite cases: 3.44
Count of perfect (error zero) individuals by case: (622 1 1 945 622 622 1 1 1 622)
Population mean number of perfect (error zero) cases: 3.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 1, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing})
Best program: (boolean_yank integer_dup in3 exec_k (integer_max exec_s_when_autoconstructing (boolean_shove boolean_eq print_boolean) (exec_s_when_autoconstructing (exec_swap () (integer_gte exec_swap (in1 integer_swap boolean_or) (integer_lt boolean_flush integer_gte in4) integer_swap print_integer boolean_dup_times) boolean_stackdepth integer_eq exec_do*times (boolean_shove exec_noop boolean_pop exec_dup_times (exec_while (exec_s_when_autoconstructing () (boolean_pop) (boolean_flush exec_empty exec_k (integer_pop boolean_stackdepth 3 exec_do*count (exec_shove () boolean_flush exec_s_when_autoconstructing (exec_k (integer_pop boolean_stackdepth 3 exec_do*count (exec_shove () boolean_dup exec_k_when_autoconstructing () ())) ()) () ())) ()))))) () ()) ()) ())
Errors: [1 0 0 0 1 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 51
Size: 83
Percent parens: 0.386
--- Population Statistics ---
Average total errors in population: 6.562
Median total errors in population: 5
Error averages by case: (0.378 0.999 0.999 0.055 0.378 0.378 0.999 0.999 0.999 0.378)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.781
Average program size in population (points): 82.114
Average percent parens in population: 0.359
Minimum age in population: 4.5
Maximum age in population: 7.75
Average age in population: 6.4395
Median age in population: 6.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 290
Genome diversity (% unique genomes):	 0.627
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 290
Syntactic diversity (% unique Push programs):	 0.625
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2399613
--- Timings ---
Current time: 1559582667315 milliseconds
Total Time:          14.7 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.7 seconds, 59.1%
Fitness Testing:      4.1 seconds, 28.0%
Report:               1.8 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 412
Test mean error for best: 0.41200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 29                  | Program output: 37                 
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -22                 | Program output: -22                
Correct output: -6                  | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -55                 | Program output: -55                
Correct output: -83                 | Program output: -83                
Correct output: 44                  | Program output: 82                 
Correct output: -83                 | Program output: -83                
Correct output: -14                 | Program output: -14                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 1                  
Correct output: -45                 | Program output: -45                
Correct output: 8                   | Program output: 8                  
Correct output: 18                  | Program output: 37                 
Correct output: 26                  | Program output: 28                 
Correct output: 37                  | Program output: 50                 
Correct output: 0                   | Program output: 0                  
Correct output: 18                  | Program output: 26                 
Correct output: 2                   | Program output: 45                 
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 49                 
Correct output: 2                   | Program output: 5                  
Correct output: 37                  | Program output: 51                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 30                 
Correct output: 0                   | Program output: 7                  
Correct output: 48                  | Program output: 48                 
Correct output: 10                  | Program output: 10                 
Correct output: 19                  | Program output: 19                 
Correct output: 29                  | Program output: 29                 
Correct output: 10                  | Program output: 11                 
Correct output: 0                   | Program output: 7                  
Correct output: -38                 | Program output: -18                
Correct output: -8                  | Program output: -8                 
Correct output: -100                | Program output: 49                 
Correct output: -98                 | Program output: -98                
Correct output: -34                 | Program output: -17                
Correct output: 11                  | Program output: 11                 
Correct output: -7                  | Program output: -7                 
Correct output: -90                 | Program output: -90                
Correct output: -15                 | Program output: 63                 
Correct output: -55                 | Program output: -55                
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: -62                
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: 34                 
Correct output: -29                 | Program output: -18                
Correct output: -95                 | Program output: -16                
Correct output: -50                 | Program output: -50                
Correct output: -72                 | Program output: 7                  
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: 2                  
Correct output: -62                 | Program output: 4                  
Correct output: -3                  | Program output: -3                 
Correct output: -41                 | Program output: -3                 
Correct output: -76                 | Program output: -27                
Correct output: -34                 | Program output: -28                
Correct output: -81                 | Program output: -26                
Correct output: -23                 | Program output: -23                
Correct output: -91                 | Program output: -75                
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -71                
Correct output: -41                 | Program output: 43                 
Correct output: -38                 | Program output: -38                
Correct output: -41                 | Program output: -41                
Correct output: -93                 | Program output: -27                
Correct output: -84                 | Program output: 88                 
Correct output: -36                 | Program output: -29                
Correct output: -97                 | Program output: -97                
Correct output: 4                   | Program output: 61                 
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -58                
Correct output: -100                | Program output: -45                
Correct output: 0                   | Program output: 0                  
Correct output: -93                 | Program output: 9                  
Correct output: -99                 | Program output: -24                
Correct output: -41                 | Program output: -21                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -31                
Correct output: -75                 | Program output: -75                
Correct output: -31                 | Program output: 5                  
Correct output: -22                 | Program output: -22                
Correct output: -24                 | Program output: -24                
Correct output: -49                 | Program output: -49                
Correct output: 8                   | Program output: 8                  
Correct output: -80                 | Program output: 70                 
Correct output: -98                 | Program output: -98                
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 1, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_46} {:close 0, :instruction exec_s} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction -64} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_if} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction -64} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_if} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_shove})
Lexicase best program: (integer_fromboolean print_boolean integer_fromboolean integer_dup in2 exec_s_when_autoconstructing (exec_swap () (integer_gte exec_swap (integer_min integer_swap boolean_or) (integer_lt boolean_flush integer_gte in4) integer_swap print_integer boolean_dup_times)) (boolean_stackdepth integer_eq exec_do*times (boolean_shove exec_noop boolean_pop exec_dup_times (exec_while (exec_s_when_autoconstructing () (boolean_pop) (boolean_flush exec_s_when_autoconstructing (exec_k (integer_pop boolean_stackdepth 3 exec_do*count (exec_shove () boolean_stackdepth 3 exec_do*count (exec_shove () boolean_invert_second_then_and)) tagged_46 exec_s (integer_swap) (integer_max boolean_dup boolean_dup -64) (integer_sub exec_if (integer_stackdepth) (boolean_dup boolean_dup -64) integer_sub exec_if (integer_stackdepth boolean_swap integer_lt exec_shove ()) ())) ()) () ()))))) ())
Lexicase best errors: [0 1 1 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 92
Percent parens: 0.337
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 1, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_46} {:close 0, :instruction exec_s} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction -64} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_if} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction -64} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_if} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_shove})
Zero cases best program: (integer_fromboolean print_boolean integer_fromboolean integer_dup in2 exec_s_when_autoconstructing (exec_swap () (integer_gte exec_swap (integer_min integer_swap boolean_or) (integer_lt boolean_flush integer_gte in4) integer_swap print_integer boolean_dup_times)) (boolean_stackdepth integer_eq exec_do*times (boolean_shove exec_noop boolean_pop exec_dup_times (exec_while (exec_s_when_autoconstructing () (boolean_pop) (boolean_flush exec_s_when_autoconstructing (exec_k (integer_pop boolean_stackdepth 3 exec_do*count (exec_shove () boolean_stackdepth 3 exec_do*count (exec_shove () boolean_invert_second_then_and)) tagged_46 exec_s (integer_swap) (integer_max boolean_dup boolean_dup -64) (integer_sub exec_if (integer_stackdepth) (boolean_dup boolean_dup -64) integer_sub exec_if (integer_stackdepth boolean_swap integer_lt exec_shove ()) ())) ()) () ()))))) ())
Zero cases best errors: [0 1 1 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 92
Percent parens: 0.337
--- Lexicase Population Statistics ---
Count of elite individuals by case: (362 492 492 493 48 361 372 372 362 492)
Population mean number of elite cases: 3.85
Count of perfect (error zero) individuals by case: (362 492 492 493 48 361 372 372 362 492)
Population mean number of perfect (error zero) cases: 3.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 1, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction tagged_46} {:close 0, :instruction exec_s} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 1, :instruction -64} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_if} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup})
Best program: (integer_fromboolean print_boolean integer_fromboolean integer_dup in2 exec_s_when_autoconstructing (exec_swap () (integer_gte exec_swap (integer_min integer_swap boolean_or) (integer_lt boolean_flush integer_gte in4) integer_swap print_integer boolean_dup_times) boolean_stackdepth integer_eq exec_do*times (boolean_shove exec_noop boolean_pop exec_dup_times (exec_while (exec_s_when_autoconstructing () (boolean_pop) (boolean_flush exec_s_when_autoconstructing (exec_k (exec_do*count (boolean_stackdepth 3 exec_do*count (exec_shove () boolean_stackdepth 3 exec_do*count (exec_shove () exec_stackdepth)) tagged_46 exec_s (integer_swap) (integer_max integer_dec boolean_dup -64) (integer_sub exec_if (integer_stackdepth) (boolean_swap integer_lt exec_shove (integer_sub exec_dup ()))))) ()) () ()))))) () ())
Errors: [0 1 1 1 1 0 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 57
Size: 88
Percent parens: 0.352
--- Population Statistics ---
Average total errors in population: 6.154
Median total errors in population: 6
Error averages by case: (0.638 0.508 0.508 0.507 0.952 0.639 0.628 0.628 0.638 0.508)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.181
Average program size in population (points): 84.139
Average percent parens in population: 0.368
Minimum age in population: 6.875
Maximum age in population: 9.25
Average age in population: 8.18075
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 263
Genome diversity (% unique genomes):	 0.629
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 264
Syntactic diversity (% unique Push programs):	 0.627
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2974402
--- Timings ---
Current time: 1559582669989 milliseconds
Total Time:          17.6 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.6 seconds, 59.9%
Fitness Testing:      4.7 seconds, 26.5%
Report:               2.3 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 412
Test mean error for best: 0.41200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 29                  | Program output: 37                 
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -22                 | Program output: -22                
Correct output: -6                  | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -55                 | Program output: -55                
Correct output: -83                 | Program output: -83                
Correct output: 44                  | Program output: 82                 
Correct output: -83                 | Program output: -83                
Correct output: -14                 | Program output: -14                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 1                  
Correct output: -45                 | Program output: -45                
Correct output: 8                   | Program output: 8                  
Correct output: 18                  | Program output: 37                 
Correct output: 26                  | Program output: 28                 
Correct output: 37                  | Program output: 50                 
Correct output: 0                   | Program output: 0                  
Correct output: 18                  | Program output: 26                 
Correct output: 2                   | Program output: 45                 
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 49                 
Correct output: 2                   | Program output: 5                  
Correct output: 37                  | Program output: 51                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 30                 
Correct output: 0                   | Program output: 7                  
Correct output: 48                  | Program output: 48                 
Correct output: 10                  | Program output: 10                 
Correct output: 19                  | Program output: 19                 
Correct output: 29                  | Program output: 29                 
Correct output: 10                  | Program output: 11                 
Correct output: 0                   | Program output: 7                  
Correct output: -38                 | Program output: -18                
Correct output: -8                  | Program output: -8                 
Correct output: -100                | Program output: 49                 
Correct output: -98                 | Program output: -98                
Correct output: -34                 | Program output: -17                
Correct output: 11                  | Program output: 11                 
Correct output: -7                  | Program output: -7                 
Correct output: -90                 | Program output: -90                
Correct output: -15                 | Program output: 63                 
Correct output: -55                 | Program output: -55                
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: -62                
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: 34                 
Correct output: -29                 | Program output: -18                
Correct output: -95                 | Program output: -16                
Correct output: -50                 | Program output: -50                
Correct output: -72                 | Program output: 7                  
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: 2                  
Correct output: -62                 | Program output: 4                  
Correct output: -3                  | Program output: -3                 
Correct output: -41                 | Program output: -3                 
Correct output: -76                 | Program output: -27                
Correct output: -34                 | Program output: -28                
Correct output: -81                 | Program output: -26                
Correct output: -23                 | Program output: -23                
Correct output: -91                 | Program output: -75                
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -71                
Correct output: -41                 | Program output: 43                 
Correct output: -38                 | Program output: -38                
Correct output: -41                 | Program output: -41                
Correct output: -93                 | Program output: -27                
Correct output: -84                 | Program output: 88                 
Correct output: -36                 | Program output: -29                
Correct output: -97                 | Program output: -97                
Correct output: 4                   | Program output: 61                 
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -58                
Correct output: -100                | Program output: -45                
Correct output: 0                   | Program output: 0                  
Correct output: -93                 | Program output: 9                  
Correct output: -99                 | Program output: -24                
Correct output: -41                 | Program output: -21                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -31                
Correct output: -75                 | Program output: -75                
Correct output: -31                 | Program output: 5                  
Correct output: -22                 | Program output: -22                
Correct output: -24                 | Program output: -24                
Correct output: -49                 | Program output: -49                
Correct output: 8                   | Program output: 8                  
Correct output: -80                 | Program output: 70                 
Correct output: -98                 | Program output: -98                
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 1, :instruction in4} {:close 1, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (integer_fromboolean print_boolean integer_fromboolean integer_dup in2 exec_s_when_autoconstructing (exec_noop) (integer_gte exec_swap (integer_min integer_swap boolean_or) (integer_lt boolean_flush integer_gte in4) in4) (integer_swap print_integer boolean_dup_times) boolean_stackdepth integer_eq exec_do*times (boolean_shove exec_noop boolean_pop exec_dup_times (exec_while (exec_s_when_autoconstructing () (boolean_pop) (boolean_flush exec_empty exec_k (integer_pop boolean_stackdepth 3 exec_do*count (exec_shove () boolean_flush exec_s_when_autoconstructing (exec_k (integer_pop boolean_stackdepth 3 exec_do*count (exec_shove () boolean_dup exec_k_when_autoconstructing () ())) ()) () ())) ())))))
Lexicase best errors: [0 1 0 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 73
Percent parens: 0.342
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 1, :instruction in4} {:close 1, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (integer_fromboolean print_boolean integer_fromboolean integer_dup in2 exec_s_when_autoconstructing (exec_noop) (integer_gte exec_swap (integer_min integer_swap boolean_or) (integer_lt boolean_flush integer_gte in4) in4) (integer_swap print_integer boolean_dup_times) boolean_stackdepth integer_eq exec_do*times (boolean_shove exec_noop boolean_pop exec_dup_times (exec_while (exec_s_when_autoconstructing () (boolean_pop) (boolean_flush exec_empty exec_k (integer_pop boolean_stackdepth 3 exec_do*count (exec_shove () boolean_flush exec_s_when_autoconstructing (exec_k (integer_pop boolean_stackdepth 3 exec_do*count (exec_shove () boolean_dup exec_k_when_autoconstructing () ())) ()) () ())) ())))))
Zero cases best errors: [0 1 0 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 73
Percent parens: 0.342
--- Lexicase Population Statistics ---
Count of elite individuals by case: (354 199 938 201 542 342 354 342 696 354)
Population mean number of elite cases: 4.32
Count of perfect (error zero) individuals by case: (354 199 938 201 542 342 354 342 696 354)
Population mean number of perfect (error zero) cases: 4.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 1, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_46} {:close 0, :instruction exec_s} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction -64} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_if} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup})
Best program: (integer_fromboolean print_boolean integer_fromboolean integer_dup in2 exec_s_when_autoconstructing (exec_swap () (integer_gte exec_swap (integer_min integer_swap boolean_or) (integer_lt boolean_flush integer_gte in4) integer_mod print_integer boolean_dup_times) boolean_stackdepth integer_eq exec_do*times (boolean_shove exec_noop exec_yank exec_dup_times (exec_while (exec_s_when_autoconstructing () (boolean_pop) (boolean_flush exec_s_when_autoconstructing (exec_k (integer_pop boolean_stackdepth 3 exec_do*count (exec_shove () boolean_stackdepth 3 exec_do*count (exec_shove () boolean_invert_second_then_and)) tagged_46 exec_s (integer_swap) (boolean_frominteger boolean_dup boolean_dup -64) (integer_sub exec_if (integer_stackdepth) (boolean_swap integer_lt exec_shove (integer_sub exec_dup ())))) ()) () ()))))) () ())
Errors: [0 1 0 1 0 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 57
Size: 87
Percent parens: 0.345
--- Population Statistics ---
Average total errors in population: 5.678
Median total errors in population: 6
Error averages by case: (0.646 0.801 0.062 0.799 0.458 0.658 0.646 0.658 0.304 0.646)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.331
Average program size in population (points): 83.856
Average percent parens in population: 0.364
Minimum age in population: 8.0
Maximum age in population: 11.0625
Average age in population: 9.68684375
Median age in population: 9.765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 88
Genome diversity (% unique genomes):	 0.755
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 89
Syntactic diversity (% unique Push programs):	 0.751
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3403159
--- Timings ---
Current time: 1559582672612 milliseconds
Total Time:          20.2 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.5 seconds, 61.5%
Fitness Testing:      5.1 seconds, 25.1%
Report:               2.6 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 222
Test mean error for best: 0.22200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 29                 
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -22                 | Program output: -22                
Correct output: -6                  | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -55                 | Program output: -55                
Correct output: -83                 | Program output: -83                
Correct output: 44                  | Program output: 44                 
Correct output: -83                 | Program output: -83                
Correct output: -14                 | Program output: -14                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 1                  
Correct output: -45                 | Program output: -45                
Correct output: 8                   | Program output: 66                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 37                  | Program output: 37                 
Correct output: 0                   | Program output: 55                 
Correct output: 18                  | Program output: 18                 
Correct output: 2                   | Program output: 2                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 20                 
Correct output: 2                   | Program output: 2                  
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 0                  
Correct output: 48                  | Program output: 48                 
Correct output: 10                  | Program output: 17                 
Correct output: 19                  | Program output: 19                 
Correct output: 29                  | Program output: 29                 
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 0                  
Correct output: -38                 | Program output: -38                
Correct output: -8                  | Program output: -5                 
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -40                
Correct output: -34                 | Program output: -34                
Correct output: 11                  | Program output: 27                 
Correct output: -7                  | Program output: -7                 
Correct output: -90                 | Program output: -90                
Correct output: -15                 | Program output: -15                
Correct output: -55                 | Program output: -43                
Correct output: -99                 | Program output: -72                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: -85                
Correct output: -54                 | Program output: -20                
Correct output: -32                 | Program output: -32                
Correct output: -29                 | Program output: -29                
Correct output: -95                 | Program output: -95                
Correct output: -50                 | Program output: -49                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: 47                 
Correct output: -87                 | Program output: -87                
Correct output: -62                 | Program output: -62                
Correct output: -3                  | Program output: 30                 
Correct output: -41                 | Program output: -41                
Correct output: -76                 | Program output: -76                
Correct output: -34                 | Program output: -34                
Correct output: -81                 | Program output: -81                
Correct output: -23                 | Program output: -23                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -22                
Correct output: -75                 | Program output: -75                
Correct output: -100                | Program output: -68                
Correct output: -71                 | Program output: -68                
Correct output: -41                 | Program output: -41                
Correct output: -38                 | Program output: 24                 
Correct output: -41                 | Program output: 60                 
Correct output: -93                 | Program output: -93                
Correct output: -84                 | Program output: -84                
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -97                
Correct output: 4                   | Program output: 4                  
Correct output: -63                 | Program output: -17                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: 0                   | Program output: 0                  
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -99                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -80                
Correct output: -92                 | Program output: -92                
Correct output: -75                 | Program output: -75                
Correct output: -31                 | Program output: -31                
Correct output: -22                 | Program output: -22                
Correct output: -24                 | Program output: -9                 
Correct output: -49                 | Program output: -49                
Correct output: 8                   | Program output: 36                 
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -97                
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 1, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (boolean_yank integer_dup in3 integer_fromboolean integer_dup in2 exec_s_when_autoconstructing (exec_swap () (integer_gte exec_swap (integer_min integer_swap boolean_or) (integer_gte exec_swap (integer_min integer_swap boolean_or) (in1 integer_swap boolean_or) integer_lt boolean_flush integer_gte in4) integer_swap print_integer boolean_dup_times) boolean_stackdepth integer_eq exec_do*times (boolean_shove exec_noop boolean_pop exec_dup_times (boolean_stackdepth 3 exec_do*count (exec_shove () boolean_flush exec_s_when_autoconstructing (exec_k (integer_pop boolean_stackdepth 3 integer_lt exec_shove () boolean_dup exec_k_when_autoconstructing () ()) ()) () ())))) () ())
Lexicase best errors: [0 0 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 71
Percent parens: 0.310
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 1, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (boolean_yank integer_dup in3 integer_fromboolean integer_dup in2 exec_s_when_autoconstructing (exec_swap () (integer_gte exec_swap (integer_min integer_swap boolean_or) (integer_gte exec_swap (integer_min integer_swap boolean_or) (in1 integer_swap boolean_or) integer_lt boolean_flush integer_gte in4) integer_swap print_integer boolean_dup_times) boolean_stackdepth integer_eq exec_do*times (boolean_shove exec_noop boolean_pop exec_dup_times (boolean_stackdepth 3 exec_do*count (exec_shove () boolean_flush exec_s_when_autoconstructing (exec_k (integer_pop boolean_stackdepth 3 integer_lt exec_shove () boolean_dup exec_k_when_autoconstructing () ()) ()) () ())))) () ())
Zero cases best errors: [0 0 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 71
Percent parens: 0.310
--- Lexicase Population Statistics ---
Count of elite individuals by case: (346 329 695 396 785 920 395 214 445 329)
Population mean number of elite cases: 4.85
Count of perfect (error zero) individuals by case: (346 329 695 396 785 920 395 214 445 329)
Population mean number of perfect (error zero) cases: 4.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 1, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing})
Best program: (boolean_yank integer_dup in3 integer_fromboolean integer_dup in2 exec_s_when_autoconstructing (exec_swap () (integer_gte exec_swap (integer_min integer_swap boolean_or) (integer_gte exec_swap (integer_min integer_swap boolean_or) (in1 integer_swap boolean_or) integer_lt boolean_flush integer_gte in4) integer_swap print_integer boolean_dup_times) boolean_stackdepth integer_eq exec_do*times (boolean_shove exec_noop boolean_pop exec_dup_times (boolean_stackdepth 3 exec_do*count (exec_shove () boolean_flush exec_s_when_autoconstructing (exec_k (integer_pop boolean_stackdepth 3 integer_lt exec_shove () boolean_dup exec_k_when_autoconstructing () ()) ()) () ())))) () ())
Errors: [0 0 0 0 0 0 0 1 1 0]
Total: 2
Mean: 0.2
Genome size: 49
Size: 71
Percent parens: 0.310
--- Population Statistics ---
Average total errors in population: 5.146
Median total errors in population: 4
Error averages by case: (0.654 0.671 0.305 0.604 0.215 0.08 0.605 0.786 0.555 0.671)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.396
Average program size in population (points): 77.363
Average percent parens in population: 0.333
Minimum age in population: 9.0
Maximum age in population: 12.90625
Average age in population: 11.673640625
Median age in population: 11.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 148
Genome diversity (% unique genomes):	 0.652
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 152
Syntactic diversity (% unique Push programs):	 0.649
Total error diversity:				 0.009
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3847821
--- Timings ---
Current time: 1559582675524 milliseconds
Total Time:          23.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.6 seconds, 63.2%
Fitness Testing:      5.5 seconds, 23.9%
Report:               2.9 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 218
Test mean error for best: 0.21800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 29                 
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -22                 | Program output: -22                
Correct output: -6                  | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -55                 | Program output: -55                
Correct output: -83                 | Program output: -83                
Correct output: 44                  | Program output: 82                 
Correct output: -83                 | Program output: -83                
Correct output: -14                 | Program output: -14                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 1                  
Correct output: -45                 | Program output: -45                
Correct output: 8                   | Program output: 8                  
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 28                 
Correct output: 37                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 18                  | Program output: 18                 
Correct output: 2                   | Program output: 2                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 21                 
Correct output: 2                   | Program output: 2                  
Correct output: 37                  | Program output: 51                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 0                  
Correct output: 48                  | Program output: 48                 
Correct output: 10                  | Program output: 10                 
Correct output: 19                  | Program output: 19                 
Correct output: 29                  | Program output: 29                 
Correct output: 10                  | Program output: 11                 
Correct output: 0                   | Program output: 7                  
Correct output: -38                 | Program output: -18                
Correct output: -8                  | Program output: -8                 
Correct output: -100                | Program output: -29                
Correct output: -98                 | Program output: -98                
Correct output: -34                 | Program output: -34                
Correct output: 11                  | Program output: 11                 
Correct output: -7                  | Program output: -7                 
Correct output: -90                 | Program output: -90                
Correct output: -15                 | Program output: -15                
Correct output: -55                 | Program output: -55                
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: -62                
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -29                 | Program output: -29                
Correct output: -95                 | Program output: -95                
Correct output: -50                 | Program output: -50                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -87                
Correct output: -62                 | Program output: 4                  
Correct output: -3                  | Program output: -3                 
Correct output: -41                 | Program output: -3                 
Correct output: -76                 | Program output: -76                
Correct output: -34                 | Program output: -34                
Correct output: -81                 | Program output: -26                
Correct output: -23                 | Program output: -23                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -75                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -71                
Correct output: -41                 | Program output: 43                 
Correct output: -38                 | Program output: -38                
Correct output: -41                 | Program output: -41                
Correct output: -93                 | Program output: -27                
Correct output: -84                 | Program output: 88                 
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -97                
Correct output: 4                   | Program output: 4                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: 0                   | Program output: 0                  
Correct output: -93                 | Program output: 9                  
Correct output: -99                 | Program output: -99                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -92                
Correct output: -75                 | Program output: -75                
Correct output: -31                 | Program output: -31                
Correct output: -22                 | Program output: -22                
Correct output: -24                 | Program output: -24                
Correct output: -49                 | Program output: -49                
Correct output: 8                   | Program output: 8                  
Correct output: -80                 | Program output: -62                
Correct output: -98                 | Program output: -98                
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 1, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (integer_fromboolean print_boolean integer_fromboolean integer_dup in2 exec_s_when_autoconstructing (exec_swap () (integer_gte exec_swap (integer_min integer_swap boolean_or) (integer_lt boolean_flush exec_swap (integer_min integer_swap boolean_or) (in1 integer_swap boolean_or) integer_lt boolean_flush integer_gte in4) integer_swap print_integer boolean_dup_times) boolean_stackdepth integer_eq exec_do*times (boolean_shove exec_noop boolean_pop exec_dup_times (boolean_stackdepth 3 exec_do*count (exec_shove () boolean_flush exec_s_when_autoconstructing (exec_k (integer_pop boolean_stackdepth 3 integer_lt exec_shove () boolean_dup exec_k_when_autoconstructing () ()) ()) () ())))) () ())
Lexicase best errors: [1 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 71
Percent parens: 0.310
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 1, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (integer_fromboolean print_boolean integer_fromboolean integer_dup in2 exec_s_when_autoconstructing (exec_swap () (integer_gte exec_swap (integer_min integer_swap boolean_or) (integer_lt boolean_flush exec_swap (integer_min integer_swap boolean_or) (in1 integer_swap boolean_or) integer_lt boolean_flush integer_gte in4) integer_swap print_integer boolean_dup_times) boolean_stackdepth integer_eq exec_do*times (boolean_shove exec_noop boolean_pop exec_dup_times (boolean_stackdepth 3 exec_do*count (exec_shove () boolean_flush exec_s_when_autoconstructing (exec_k (integer_pop boolean_stackdepth 3 integer_lt exec_shove () boolean_dup exec_k_when_autoconstructing () ()) ()) () ())))) () ())
Zero cases best errors: [1 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 71
Percent parens: 0.310
--- Lexicase Population Statistics ---
Count of elite individuals by case: (490 370 370 370 370 758 608 869 371 608)
Population mean number of elite cases: 5.18
Count of perfect (error zero) individuals by case: (490 370 370 370 370 758 608 869 371 608)
Population mean number of perfect (error zero) cases: 5.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 1, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing})
Best program: (boolean_yank in2 exec_s_when_autoconstructing (exec_swap () (integer_gte exec_swap (integer_min integer_swap boolean_or) (integer_gte exec_swap (integer_min integer_swap boolean_or) (in1 integer_swap boolean_or) integer_lt boolean_flush integer_gte in4) integer_swap print_integer boolean_dup_times) boolean_stackdepth integer_eq exec_do*times (boolean_shove exec_noop boolean_pop exec_dup_times (boolean_stackdepth 3 exec_do*count (exec_shove () boolean_flush exec_s_when_autoconstructing (exec_k (integer_pop boolean_stackdepth 3 integer_lt exec_shove () boolean_dup exec_k_when_autoconstructing () ()) ()) () ())))) () ())
Errors: [1 0 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 45
Size: 67
Percent parens: 0.328
--- Population Statistics ---
Average total errors in population: 4.816
Median total errors in population: 5
Error averages by case: (0.51 0.63 0.63 0.63 0.63 0.242 0.392 0.131 0.629 0.392)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.545
Average program size in population (points): 74.791
Average percent parens in population: 0.323
Minimum age in population: 10.0
Maximum age in population: 14.5703125
Average age in population: 13.5676875
Median age in population: 13.40625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 274
Genome diversity (% unique genomes):	 0.62
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 276
Syntactic diversity (% unique Push programs):	 0.618
Total error diversity:				 0.01
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4296501
--- Timings ---
Current time: 1559582678216 milliseconds
Total Time:          25.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.6 seconds, 64.1%
Fitness Testing:      6.0 seconds, 23.1%
Report:               3.2 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 218
Test mean error for best: 0.21800
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 1
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 1
Test Case   30 | Error: 1
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 1
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 1
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 1
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 1
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 1
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 1
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 1
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 1
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 1
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 1
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 1
Test Case  947 | Error: 1
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 29                 
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -22                 | Program output: -22                
Correct output: -6                  | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -55                 | Program output: -55                
Correct output: -83                 | Program output: -83                
Correct output: 44                  | Program output: 82                 
Correct output: -83                 | Program output: -83                
Correct output: -14                 | Program output: -14                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 1                  
Correct output: -45                 | Program output: -45                
Correct output: 8                   | Program output: 8                  
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 28                 
Correct output: 37                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 18                  | Program output: 18                 
Correct output: 2                   | Program output: 2                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 21                 
Correct output: 2                   | Program output: 2                  
Correct output: 37                  | Program output: 51                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 0                  
Correct output: 48                  | Program output: 48                 
Correct output: 10                  | Program output: 10                 
Correct output: 19                  | Program output: 19                 
Correct output: 29                  | Program output: 29                 
Correct output: 10                  | Program output: 11                 
Correct output: 0                   | Program output: 7                  
Correct output: -38                 | Program output: -18                
Correct output: -8                  | Program output: -8                 
Correct output: -100                | Program output: -29                
Correct output: -98                 | Program output: -98                
Correct output: -34                 | Program output: -34                
Correct output: 11                  | Program output: 11                 
Correct output: -7                  | Program output: -7                 
Correct output: -90                 | Program output: -90                
Correct output: -15                 | Program output: -15                
Correct output: -55                 | Program output: -55                
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: -62                
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -29                 | Program output: -29                
Correct output: -95                 | Program output: -95                
Correct output: -50                 | Program output: -50                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -87                
Correct output: -62                 | Program output: 4                  
Correct output: -3                  | Program output: -3                 
Correct output: -41                 | Program output: -3                 
Correct output: -76                 | Program output: -76                
Correct output: -34                 | Program output: -34                
Correct output: -81                 | Program output: -26                
Correct output: -23                 | Program output: -23                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -75                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -71                
Correct output: -41                 | Program output: 43                 
Correct output: -38                 | Program output: -38                
Correct output: -41                 | Program output: -41                
Correct output: -93                 | Program output: -27                
Correct output: -84                 | Program output: 88                 
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -97                
Correct output: 4                   | Program output: 4                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: 0                   | Program output: 0                  
Correct output: -93                 | Program output: 9                  
Correct output: -99                 | Program output: -99                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -92                
Correct output: -75                 | Program output: -75                
Correct output: -31                 | Program output: -31                
Correct output: -22                 | Program output: -22                
Correct output: -24                 | Program output: -24                
Correct output: -49                 | Program output: -49                
Correct output: 8                   | Program output: 8                  
Correct output: -80                 | Program output: -62                
Correct output: -98                 | Program output: -98                
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 1, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (boolean_yank integer_dup integer_dup_items integer_fromboolean integer_dup in2 exec_s_when_autoconstructing (exec_swap () (integer_gte exec_swap (integer_min integer_swap boolean_or) (integer_gte exec_swap (integer_min integer_swap boolean_or) (in1 integer_swap boolean_or) integer_lt boolean_flush integer_gte in4) integer_swap print_integer boolean_dup_times) boolean_stackdepth integer_eq exec_do*times (boolean_shove exec_noop boolean_pop exec_dup_times (boolean_stackdepth 3 exec_do*count (exec_shove () boolean_flush exec_s_when_autoconstructing (exec_k (integer_pop boolean_stackdepth 3 integer_lt exec_shove () boolean_dup exec_k_when_autoconstructing () ()) ()) () ())))) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 71
Percent parens: 0.310
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 1, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (boolean_yank integer_dup integer_dup_items integer_fromboolean integer_dup in2 exec_s_when_autoconstructing (exec_swap () (integer_gte exec_swap (integer_min integer_swap boolean_or) (integer_gte exec_swap (integer_min integer_swap boolean_or) (in1 integer_swap boolean_or) integer_lt boolean_flush integer_gte in4) integer_swap print_integer boolean_dup_times) boolean_stackdepth integer_eq exec_do*times (boolean_shove exec_noop boolean_pop exec_dup_times (boolean_stackdepth 3 exec_do*count (exec_shove () boolean_flush exec_s_when_autoconstructing (exec_k (integer_pop boolean_stackdepth 3 integer_lt exec_shove () boolean_dup exec_k_when_autoconstructing () ()) ()) () ())))) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 71
Percent parens: 0.310
--- Lexicase Population Statistics ---
Count of elite individuals by case: (945 679 878 685 746 924 681 679 848 747)
Population mean number of elite cases: 7.81
Count of perfect (error zero) individuals by case: (945 679 878 685 746 924 681 679 848 747)
Population mean number of perfect (error zero) cases: 7.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 1, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 3} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing})
Best program: (boolean_yank in2 exec_s_when_autoconstructing (exec_swap () (integer_gte exec_swap (integer_min integer_swap boolean_or) (integer_gte exec_swap (integer_min integer_swap boolean_or) (in1 integer_swap boolean_or) integer_lt boolean_flush integer_gte in4) integer_swap print_integer boolean_dup_times) boolean_stackdepth integer_eq exec_do*times (boolean_shove exec_noop boolean_pop exec_dup_times (boolean_stackdepth 3 exec_do*count (exec_shove () boolean_flush exec_s_when_autoconstructing (exec_k (integer_pop boolean_stackdepth 3 integer_lt exec_shove () boolean_dup exec_k_when_autoconstructing () ()) ()) () ())))) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 45
Size: 67
Percent parens: 0.328
--- Population Statistics ---
Average total errors in population: 2.188
Median total errors in population: 0
Error averages by case: (0.055 0.321 0.122 0.315 0.254 0.076 0.319 0.321 0.152 0.253)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.713
Average program size in population (points): 75.116
Average percent parens in population: 0.311
Minimum age in population: 13.75
Maximum age in population: 16.40625
Average age in population: 15.4988828125
Median age in population: 15.40625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 84
Genome diversity (% unique genomes):	 0.57
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 84
Syntactic diversity (% unique Push programs):	 0.566
Total error diversity:				 0.011
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4921155
--- Timings ---
Current time: 1559582681015 milliseconds
Total Time:          28.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.5 seconds, 64.5%
Fitness Testing:      6.6 seconds, 23.0%
Report:               3.5 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 9
Successful program: (boolean_yank in2 exec_s_when_autoconstructing (exec_swap () (integer_gte exec_swap (integer_min integer_swap boolean_or) (integer_gte exec_swap (integer_min integer_swap boolean_or) (in1 integer_swap boolean_or) integer_lt boolean_flush integer_gte in4) integer_swap print_integer boolean_dup_times) boolean_stackdepth integer_eq exec_do*times (boolean_shove exec_noop boolean_pop exec_dup_times (boolean_stackdepth 3 exec_do*count (exec_shove () boolean_flush exec_s_when_autoconstructing (exec_k (integer_pop boolean_stackdepth 3 integer_lt exec_shove () boolean_dup exec_k_when_autoconstructing () ()) ()) () ())))) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 67


Auto-simplifying with starting size: 67
step: 0
program: (boolean_yank in2 exec_s_when_autoconstructing (exec_swap () (integer_gte exec_swap (integer_min integer_swap boolean_or) (integer_gte exec_swap (integer_min integer_swap boolean_or) (in1 integer_swap boolean_or) integer_lt boolean_flush integer_gte in4) integer_swap print_integer boolean_dup_times) boolean_stackdepth integer_eq exec_do*times (boolean_shove exec_noop boolean_pop exec_dup_times (boolean_stackdepth 3 exec_do*count (exec_shove () boolean_flush exec_s_when_autoconstructing (exec_k (integer_pop boolean_stackdepth 3 integer_lt exec_shove () boolean_dup exec_k_when_autoconstructing () ()) ()) () ())))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 500
program: (boolean_yank in2 exec_s_when_autoconstructing (exec_swap () (integer_gte exec_swap (integer_min integer_swap boolean_or) (integer_gte exec_swap (integer_min integer_swap boolean_or) (in1 integer_swap boolean_or) integer_lt boolean_flush integer_gte in4) integer_swap print_integer boolean_dup_times) boolean_stackdepth integer_eq exec_do*times (boolean_shove exec_noop boolean_pop exec_dup_times (boolean_stackdepth 3 exec_do*count (exec_shove () boolean_flush exec_s_when_autoconstructing (exec_k (integer_pop boolean_stackdepth 3 integer_lt exec_shove () boolean_dup exec_k_when_autoconstructing () ()) ()) () ())))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 1000
program: (boolean_yank in2 exec_s_when_autoconstructing (exec_swap () (integer_gte exec_swap (integer_min integer_swap boolean_or) (integer_gte exec_swap (integer_min integer_swap boolean_or) (in1 integer_swap boolean_or) integer_lt boolean_flush integer_gte in4) integer_swap print_integer boolean_dup_times) boolean_stackdepth integer_eq exec_do*times (boolean_shove exec_noop boolean_pop exec_dup_times (boolean_stackdepth 3 exec_do*count (exec_shove () boolean_flush exec_s_when_autoconstructing (exec_k (integer_pop boolean_stackdepth 3 integer_lt exec_shove () boolean_dup exec_k_when_autoconstructing () ()) ()) () ())))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 1500
program: (boolean_yank in2 exec_s_when_autoconstructing (exec_swap () (integer_gte exec_swap (integer_min integer_swap boolean_or) (integer_gte exec_swap (integer_min integer_swap boolean_or) (in1 integer_swap boolean_or) integer_lt boolean_flush integer_gte in4) integer_swap print_integer boolean_dup_times) boolean_stackdepth integer_eq exec_do*times (boolean_shove exec_noop boolean_pop exec_dup_times (boolean_stackdepth 3 exec_do*count (exec_shove () boolean_flush exec_s_when_autoconstructing (exec_k (integer_pop boolean_stackdepth 3 integer_lt exec_shove () boolean_dup exec_k_when_autoconstructing () ()) ()) () ())))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 2000
program: (boolean_yank in2 exec_s_when_autoconstructing (exec_swap () (integer_gte exec_swap (integer_min integer_swap boolean_or) (integer_gte exec_swap (integer_min integer_swap boolean_or) (in1 integer_swap boolean_or) integer_lt boolean_flush integer_gte in4) integer_swap print_integer boolean_dup_times) boolean_stackdepth integer_eq exec_do*times (boolean_shove exec_noop boolean_pop exec_dup_times (boolean_stackdepth 3 exec_do*count (exec_shove () boolean_flush exec_s_when_autoconstructing (exec_k (integer_pop boolean_stackdepth 3 integer_lt exec_shove () boolean_dup exec_k_when_autoconstructing () ()) ()) () ())))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 2500
program: (boolean_yank in2 exec_s_when_autoconstructing (exec_swap () (integer_gte exec_swap (integer_min integer_swap boolean_or) (integer_gte exec_swap (integer_min integer_swap boolean_or) (in1 integer_swap boolean_or) integer_lt boolean_flush integer_gte in4) integer_swap print_integer boolean_dup_times) boolean_stackdepth integer_eq exec_do*times (boolean_shove exec_noop boolean_pop exec_dup_times (boolean_stackdepth 3 exec_do*count (exec_shove () boolean_flush exec_s_when_autoconstructing (exec_k (integer_pop boolean_stackdepth 3 integer_lt exec_shove () boolean_dup exec_k_when_autoconstructing () ()) ()) () ())))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 3000
program: (boolean_yank in2 exec_s_when_autoconstructing (exec_swap () (integer_gte exec_swap (integer_min integer_swap boolean_or) (integer_gte exec_swap (integer_min integer_swap boolean_or) (in1 integer_swap boolean_or) integer_lt boolean_flush integer_gte in4) integer_swap print_integer boolean_dup_times) boolean_stackdepth integer_eq exec_do*times (boolean_shove exec_noop boolean_pop exec_dup_times (boolean_stackdepth 3 exec_do*count (exec_shove () boolean_flush exec_s_when_autoconstructing (exec_k (integer_pop boolean_stackdepth 3 integer_lt exec_shove () boolean_dup exec_k_when_autoconstructing () ()) ()) () ())))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 3500
program: (boolean_yank in2 exec_s_when_autoconstructing (exec_swap () (integer_gte exec_swap (integer_min integer_swap boolean_or) (integer_gte exec_swap (integer_min integer_swap boolean_or) (in1 integer_swap boolean_or) integer_lt boolean_flush integer_gte in4) integer_swap print_integer boolean_dup_times) boolean_stackdepth integer_eq exec_do*times (boolean_shove exec_noop boolean_pop exec_dup_times (boolean_stackdepth 3 exec_do*count (exec_shove () boolean_flush exec_s_when_autoconstructing (exec_k (integer_pop boolean_stackdepth 3 integer_lt exec_shove () boolean_dup exec_k_when_autoconstructing () ()) ()) () ())))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 4000
program: (boolean_yank in2 exec_s_when_autoconstructing (exec_swap () (integer_gte exec_swap (integer_min integer_swap boolean_or) (integer_gte exec_swap (integer_min integer_swap boolean_or) (in1 integer_swap boolean_or) integer_lt boolean_flush integer_gte in4) integer_swap print_integer boolean_dup_times) boolean_stackdepth integer_eq exec_do*times (boolean_shove exec_noop boolean_pop exec_dup_times (boolean_stackdepth 3 exec_do*count (exec_shove () boolean_flush exec_s_when_autoconstructing (exec_k (integer_pop boolean_stackdepth 3 integer_lt exec_shove () boolean_dup exec_k_when_autoconstructing () ()) ()) () ())))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 4500
program: (boolean_yank in2 exec_s_when_autoconstructing (exec_swap () (integer_gte exec_swap (integer_min integer_swap boolean_or) (integer_gte exec_swap (integer_min integer_swap boolean_or) (in1 integer_swap boolean_or) integer_lt boolean_flush integer_gte in4) integer_swap print_integer boolean_dup_times) boolean_stackdepth integer_eq exec_do*times (boolean_shove exec_noop boolean_pop exec_dup_times (boolean_stackdepth 3 exec_do*count (exec_shove () boolean_flush exec_s_when_autoconstructing (exec_k (integer_pop boolean_stackdepth 3 integer_lt exec_shove () boolean_dup exec_k_when_autoconstructing () ()) ()) () ())))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 5000
program: (boolean_yank in2 exec_s_when_autoconstructing (exec_swap () (integer_gte exec_swap (integer_min integer_swap boolean_or) (integer_gte exec_swap (integer_min integer_swap boolean_or) (in1 integer_swap boolean_or) integer_lt boolean_flush integer_gte in4) integer_swap print_integer boolean_dup_times) boolean_stackdepth integer_eq exec_do*times (boolean_shove exec_noop boolean_pop exec_dup_times (boolean_stackdepth 3 exec_do*count (exec_shove () boolean_flush exec_s_when_autoconstructing (exec_k (integer_pop boolean_stackdepth 3 integer_lt exec_shove () boolean_dup exec_k_when_autoconstructing () ()) ()) () ())))) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 218
Test mean error for best: 0.21800
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 1
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 1
Test Case   30 | Error: 1
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 1
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 1
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 1
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 1
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 1
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 1
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 1
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 1
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 1
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 1
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 1
Test Case  947 | Error: 1
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 29                  | Program output: 29                 
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -22                 | Program output: -22                
Correct output: -6                  | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -55                 | Program output: -55                
Correct output: -83                 | Program output: -83                
Correct output: 44                  | Program output: 82                 
Correct output: -83                 | Program output: -83                
Correct output: -14                 | Program output: -14                
Correct output: -90                 | Program output: -90                
Correct output: 1                   | Program output: 1                  
Correct output: -45                 | Program output: -45                
Correct output: 8                   | Program output: 8                  
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 28                 
Correct output: 37                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 18                  | Program output: 18                 
Correct output: 2                   | Program output: 2                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 21                 
Correct output: 2                   | Program output: 2                  
Correct output: 37                  | Program output: 51                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 0                  
Correct output: 48                  | Program output: 48                 
Correct output: 10                  | Program output: 10                 
Correct output: 19                  | Program output: 19                 
Correct output: 29                  | Program output: 29                 
Correct output: 10                  | Program output: 11                 
Correct output: 0                   | Program output: 7                  
Correct output: -38                 | Program output: -18                
Correct output: -8                  | Program output: -8                 
Correct output: -100                | Program output: -29                
Correct output: -98                 | Program output: -98                
Correct output: -34                 | Program output: -34                
Correct output: 11                  | Program output: 11                 
Correct output: -7                  | Program output: -7                 
Correct output: -90                 | Program output: -90                
Correct output: -15                 | Program output: -15                
Correct output: -55                 | Program output: -55                
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: -62                
Correct output: -54                 | Program output: -54                
Correct output: -32                 | Program output: -32                
Correct output: -29                 | Program output: -29                
Correct output: -95                 | Program output: -95                
Correct output: -50                 | Program output: -50                
Correct output: -72                 | Program output: -72                
Correct output: -96                 | Program output: -96                
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -87                
Correct output: -62                 | Program output: 4                  
Correct output: -3                  | Program output: -3                 
Correct output: -41                 | Program output: -3                 
Correct output: -76                 | Program output: -76                
Correct output: -34                 | Program output: -34                
Correct output: -81                 | Program output: -26                
Correct output: -23                 | Program output: -23                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -69                
Correct output: -75                 | Program output: -75                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -71                
Correct output: -41                 | Program output: 43                 
Correct output: -38                 | Program output: -38                
Correct output: -41                 | Program output: -41                
Correct output: -93                 | Program output: -27                
Correct output: -84                 | Program output: 88                 
Correct output: -36                 | Program output: -36                
Correct output: -97                 | Program output: -97                
Correct output: 4                   | Program output: 4                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: 0                   | Program output: 0                  
Correct output: -93                 | Program output: 9                  
Correct output: -99                 | Program output: -99                
Correct output: -41                 | Program output: -41                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -92                
Correct output: -75                 | Program output: -75                
Correct output: -31                 | Program output: -31                
Correct output: -22                 | Program output: -22                
Correct output: -24                 | Program output: -24                
Correct output: -49                 | Program output: -49                
Correct output: 8                   | Program output: 8                  
Correct output: -80                 | Program output: -62                
Correct output: -98                 | Program output: -98                
Correct output: -97                 | Program output: -97                
;;******************************
