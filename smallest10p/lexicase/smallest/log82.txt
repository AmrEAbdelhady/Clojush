Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[12 -68 -68 -68] -68] [[-12 -12 -11 -12] -12] [[-5 -5 -5 -100] -100] [[-26 -26 -26 -84] -84] [[-53 -53 -66 -53] -66] [[56 -43 56 56] -43] [[-92 -92 -55 -92] -92] [[7 77 7 7] 7] [[-11 -11 -11 -80] -80] [[-51 -74 -51 -51] -74] [(-47 -47 -47 -47) -47] [(-13 -13 -13 -13) -13] [(20 20 20 20) 20] [(-26 -26 -26 -26) -26] [(76 76 76 76) 76] [(59 26 5 36) 5] [(16 52 36 48) 16] [(30 68 14 12) 12] [(59 17 100 21) 17] [(37 82 13 100) 13] [(72 91 71 96) 71] [(81 8 69 45) 8] [(2 13 1 36) 1] [(71 68 90 80) 68] [(33 58 98 1) 1] [(59 74 38 71) 38] [(89 20 69 18) 18] [(32 25 21 30) 21] [(71 49 50 41) 41] [(12 21 100 58) 12] [(65 39 68 3) 3] [(33 47 19 29) 19] [(33 57 53 19) 19] [(49 46 18 7) 7] [(60 59 34 52) 34] [(-58 -78 -80 80) -80] [(63 -14 46 58) -14] [(-20 -84 47 94) -84] [(-75 -58 -63 88) -75] [(1 -68 -46 -70) -70] [(33 -69 -59 -75) -75] [(48 32 -60 -11) -60] [(-70 87 -98 0) -98] [(-72 -66 48 -94) -94] [(50 59 -16 59) -16] [(-55 83 -10 83) -55] [(13 68 54 -55) -55] [(55 -76 22 11) -76] [(16 44 -4 43) -4] [(-5 -90 -53 21) -90] [(-12 -39 -33 -34) -39] [(-79 65 -52 77) -79] [(-42 -13 -29 -72) -72] [(-85 -58 90 98) -85] [(-80 -80 97 -91) -91] [(-20 -58 -33 50) -58] [(54 34 43 83) 34] [(38 90 -6 37) -6] [(84 -70 -70 -74) -74] [(-28 12 -47 -30) -47] [(68 -85 62 -84) -85] [(-68 91 53 91) -68] [(-91 67 6 -4) -91] [(-25 97 -78 85) -78] [(9 -95 72 -37) -95] [(-84 4 -91 45) -91] [(60 10 59 -25) -25] [(-23 -92 94 6) -92] [(60 -63 68 5) -63] [(-10 -89 70 4) -89] [(100 70 -44 -29) -44] [(51 68 -66 -48) -66] [(-51 98 -67 24) -67] [(-21 61 -69 -84) -84] [(-68 84 24 -40) -68] [(40 41 30 -26) -26] [(53 -92 45 -19) -92] [(32 -20 -40 11) -40] [(-91 -75 92 -22) -91] [(22 -56 -84 -56) -84] [(-37 -54 44 85) -54] [(91 73 -14 -36) -36] [(-17 0 -20 38) -20] [(90 87 -54 92) -54] [(-6 80 -54 75) -54] [(-71 -98 25 -65) -98] [(-93 50 -53 -95) -95] [(-39 -65 70 -27) -65] [(-68 4 4 -55) -68] [(-36 95 19 35) -36] [(26 19 82 -14) -14] [(79 -65 -98 60) -98] [(-22 87 -64 40) -64] [(-76 -15 77 27) -76] [(58 68 29 23) 23])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[12 -68 -68 -68] -68]
Train Case:   6 | Input/Output: [[-12 -12 -11 -12] -12]
Train Case:   7 | Input/Output: [[-5 -5 -5 -100] -100]
Train Case:   8 | Input/Output: [[-26 -26 -26 -84] -84]
Train Case:   9 | Input/Output: [[-53 -53 -66 -53] -66]
Train Case:  10 | Input/Output: [[56 -43 56 56] -43]
Train Case:  11 | Input/Output: [[-92 -92 -55 -92] -92]
Train Case:  12 | Input/Output: [[7 77 7 7] 7]
Train Case:  13 | Input/Output: [[-11 -11 -11 -80] -80]
Train Case:  14 | Input/Output: [[-51 -74 -51 -51] -74]
Train Case:  15 | Input/Output: [(-47 -47 -47 -47) -47]
Train Case:  16 | Input/Output: [(-13 -13 -13 -13) -13]
Train Case:  17 | Input/Output: [(20 20 20 20) 20]
Train Case:  18 | Input/Output: [(-26 -26 -26 -26) -26]
Train Case:  19 | Input/Output: [(76 76 76 76) 76]
Train Case:  20 | Input/Output: [(59 26 5 36) 5]
Train Case:  21 | Input/Output: [(16 52 36 48) 16]
Train Case:  22 | Input/Output: [(30 68 14 12) 12]
Train Case:  23 | Input/Output: [(59 17 100 21) 17]
Train Case:  24 | Input/Output: [(37 82 13 100) 13]
Train Case:  25 | Input/Output: [(72 91 71 96) 71]
Train Case:  26 | Input/Output: [(81 8 69 45) 8]
Train Case:  27 | Input/Output: [(2 13 1 36) 1]
Train Case:  28 | Input/Output: [(71 68 90 80) 68]
Train Case:  29 | Input/Output: [(33 58 98 1) 1]
Train Case:  30 | Input/Output: [(59 74 38 71) 38]
Train Case:  31 | Input/Output: [(89 20 69 18) 18]
Train Case:  32 | Input/Output: [(32 25 21 30) 21]
Train Case:  33 | Input/Output: [(71 49 50 41) 41]
Train Case:  34 | Input/Output: [(12 21 100 58) 12]
Train Case:  35 | Input/Output: [(65 39 68 3) 3]
Train Case:  36 | Input/Output: [(33 47 19 29) 19]
Train Case:  37 | Input/Output: [(33 57 53 19) 19]
Train Case:  38 | Input/Output: [(49 46 18 7) 7]
Train Case:  39 | Input/Output: [(60 59 34 52) 34]
Train Case:  40 | Input/Output: [(-58 -78 -80 80) -80]
Train Case:  41 | Input/Output: [(63 -14 46 58) -14]
Train Case:  42 | Input/Output: [(-20 -84 47 94) -84]
Train Case:  43 | Input/Output: [(-75 -58 -63 88) -75]
Train Case:  44 | Input/Output: [(1 -68 -46 -70) -70]
Train Case:  45 | Input/Output: [(33 -69 -59 -75) -75]
Train Case:  46 | Input/Output: [(48 32 -60 -11) -60]
Train Case:  47 | Input/Output: [(-70 87 -98 0) -98]
Train Case:  48 | Input/Output: [(-72 -66 48 -94) -94]
Train Case:  49 | Input/Output: [(50 59 -16 59) -16]
Train Case:  50 | Input/Output: [(-55 83 -10 83) -55]
Train Case:  51 | Input/Output: [(13 68 54 -55) -55]
Train Case:  52 | Input/Output: [(55 -76 22 11) -76]
Train Case:  53 | Input/Output: [(16 44 -4 43) -4]
Train Case:  54 | Input/Output: [(-5 -90 -53 21) -90]
Train Case:  55 | Input/Output: [(-12 -39 -33 -34) -39]
Train Case:  56 | Input/Output: [(-79 65 -52 77) -79]
Train Case:  57 | Input/Output: [(-42 -13 -29 -72) -72]
Train Case:  58 | Input/Output: [(-85 -58 90 98) -85]
Train Case:  59 | Input/Output: [(-80 -80 97 -91) -91]
Train Case:  60 | Input/Output: [(-20 -58 -33 50) -58]
Train Case:  61 | Input/Output: [(54 34 43 83) 34]
Train Case:  62 | Input/Output: [(38 90 -6 37) -6]
Train Case:  63 | Input/Output: [(84 -70 -70 -74) -74]
Train Case:  64 | Input/Output: [(-28 12 -47 -30) -47]
Train Case:  65 | Input/Output: [(68 -85 62 -84) -85]
Train Case:  66 | Input/Output: [(-68 91 53 91) -68]
Train Case:  67 | Input/Output: [(-91 67 6 -4) -91]
Train Case:  68 | Input/Output: [(-25 97 -78 85) -78]
Train Case:  69 | Input/Output: [(9 -95 72 -37) -95]
Train Case:  70 | Input/Output: [(-84 4 -91 45) -91]
Train Case:  71 | Input/Output: [(60 10 59 -25) -25]
Train Case:  72 | Input/Output: [(-23 -92 94 6) -92]
Train Case:  73 | Input/Output: [(60 -63 68 5) -63]
Train Case:  74 | Input/Output: [(-10 -89 70 4) -89]
Train Case:  75 | Input/Output: [(100 70 -44 -29) -44]
Train Case:  76 | Input/Output: [(51 68 -66 -48) -66]
Train Case:  77 | Input/Output: [(-51 98 -67 24) -67]
Train Case:  78 | Input/Output: [(-21 61 -69 -84) -84]
Train Case:  79 | Input/Output: [(-68 84 24 -40) -68]
Train Case:  80 | Input/Output: [(40 41 30 -26) -26]
Train Case:  81 | Input/Output: [(53 -92 45 -19) -92]
Train Case:  82 | Input/Output: [(32 -20 -40 11) -40]
Train Case:  83 | Input/Output: [(-91 -75 92 -22) -91]
Train Case:  84 | Input/Output: [(22 -56 -84 -56) -84]
Train Case:  85 | Input/Output: [(-37 -54 44 85) -54]
Train Case:  86 | Input/Output: [(91 73 -14 -36) -36]
Train Case:  87 | Input/Output: [(-17 0 -20 38) -20]
Train Case:  88 | Input/Output: [(90 87 -54 92) -54]
Train Case:  89 | Input/Output: [(-6 80 -54 75) -54]
Train Case:  90 | Input/Output: [(-71 -98 25 -65) -98]
Train Case:  91 | Input/Output: [(-93 50 -53 -95) -95]
Train Case:  92 | Input/Output: [(-39 -65 70 -27) -65]
Train Case:  93 | Input/Output: [(-68 4 4 -55) -68]
Train Case:  94 | Input/Output: [(-36 95 19 35) -36]
Train Case:  95 | Input/Output: [(26 19 82 -14) -14]
Train Case:  96 | Input/Output: [(79 -65 -98 60) -98]
Train Case:  97 | Input/Output: [(-22 87 -64 40) -64]
Train Case:  98 | Input/Output: [(-76 -15 77 27) -76]
Train Case:  99 | Input/Output: [(58 68 29 23) 23]
Test Case:   0 | Input/Output: [[5 5 90 5] 5]
Test Case:   1 | Input/Output: [[54 19 54 54] 19]
Test Case:   2 | Input/Output: [[-61 -61 -54 -61] -61]
Test Case:   3 | Input/Output: [[-12 -96 -12 -12] -96]
Test Case:   4 | Input/Output: [[30 30 -68 30] -68]
Test Case:   5 | Input/Output: [[-97 -97 24 -97] -97]
Test Case:   6 | Input/Output: [[-18 -35 -35 -35] -35]
Test Case:   7 | Input/Output: [[49 0 0 0] 0]
Test Case:   8 | Input/Output: [[77 -75 77 77] -75]
Test Case:   9 | Input/Output: [[95 95 95 38] 38]
Test Case:  10 | Input/Output: [[-34 -90 -34 -34] -90]
Test Case:  11 | Input/Output: [[59 -65 59 59] -65]
Test Case:  12 | Input/Output: [[67 67 67 79] 67]
Test Case:  13 | Input/Output: [[-30 75 75 75] -30]
Test Case:  14 | Input/Output: [[43 43 43 53] 43]
Test Case:  15 | Input/Output: [[20 -52 20 20] -52]
Test Case:  16 | Input/Output: [[40 -90 40 40] -90]
Test Case:  17 | Input/Output: [[-32 -32 78 -32] -32]
Test Case:  18 | Input/Output: [[52 -58 -58 -58] -58]
Test Case:  19 | Input/Output: [[-87 -42 -87 -87] -87]
Test Case:  20 | Input/Output: [[13 -2 -2 -2] -2]
Test Case:  21 | Input/Output: [[33 33 33 69] 33]
Test Case:  22 | Input/Output: [[-25 -91 -25 -25] -91]
Test Case:  23 | Input/Output: [[0 -70 -70 -70] -70]
Test Case:  24 | Input/Output: [[-87 -87 -35 -87] -87]
Test Case:  25 | Input/Output: [[81 81 78 81] 78]
Test Case:  26 | Input/Output: [[-86 -86 -86 44] -86]
Test Case:  27 | Input/Output: [[-88 -50 -88 -88] -88]
Test Case:  28 | Input/Output: [[96 -49 -49 -49] -49]
Test Case:  29 | Input/Output: [[-93 -93 -93 65] -93]
Test Case:  30 | Input/Output: [[-31 -31 25 -31] -31]
Test Case:  31 | Input/Output: [[-63 -73 -73 -73] -73]
Test Case:  32 | Input/Output: [[31 -10 -10 -10] -10]
Test Case:  33 | Input/Output: [[10 10 -20 10] -20]
Test Case:  34 | Input/Output: [[-52 -52 -52 71] -52]
Test Case:  35 | Input/Output: [[-64 -64 -64 1] -64]
Test Case:  36 | Input/Output: [[41 41 41 58] 41]
Test Case:  37 | Input/Output: [[-53 17 17 17] -53]
Test Case:  38 | Input/Output: [[5 70 70 70] 5]
Test Case:  39 | Input/Output: [[-29 -29 -29 -73] -73]
Test Case:  40 | Input/Output: [[49 49 42 49] 42]
Test Case:  41 | Input/Output: [[-35 67 67 67] -35]
Test Case:  42 | Input/Output: [[-20 -20 58 -20] -20]
Test Case:  43 | Input/Output: [[-99 -99 -99 -2] -99]
Test Case:  44 | Input/Output: [[17 -2 17 17] -2]
Test Case:  45 | Input/Output: [[84 84 84 37] 37]
Test Case:  46 | Input/Output: [[24 24 24 9] 9]
Test Case:  47 | Input/Output: [[-59 -59 -59 38] -59]
Test Case:  48 | Input/Output: [[-51 -44 -44 -44] -51]
Test Case:  49 | Input/Output: [[-78 73 73 73] -78]
Test Case:  50 | Input/Output: [[-89 -89 45 -89] -89]
Test Case:  51 | Input/Output: [[-61 -29 -29 -29] -61]
Test Case:  52 | Input/Output: [[55 55 55 -77] -77]
Test Case:  53 | Input/Output: [[-38 -5 -5 -5] -38]
Test Case:  54 | Input/Output: [[-96 -96 -96 56] -96]
Test Case:  55 | Input/Output: [[-75 60 60 60] -75]
Test Case:  56 | Input/Output: [[92 -29 -29 -29] -29]
Test Case:  57 | Input/Output: [[10 -3 -3 -3] -3]
Test Case:  58 | Input/Output: [[-25 -25 14 -25] -25]
Test Case:  59 | Input/Output: [[-1 -1 -5 -1] -5]
Test Case:  60 | Input/Output: [[12 34 34 34] 12]
Test Case:  61 | Input/Output: [[87 87 -76 87] -76]
Test Case:  62 | Input/Output: [[8 8 8 -55] -55]
Test Case:  63 | Input/Output: [[96 37 37 37] 37]
Test Case:  64 | Input/Output: [[0 0 0 -60] -60]
Test Case:  65 | Input/Output: [[-9 10 10 10] -9]
Test Case:  66 | Input/Output: [[-46 -46 -46 78] -46]
Test Case:  67 | Input/Output: [[25 25 25 -46] -46]
Test Case:  68 | Input/Output: [[-35 80 80 80] -35]
Test Case:  69 | Input/Output: [[-15 -85 -15 -15] -85]
Test Case:  70 | Input/Output: [[12 -100 -100 -100] -100]
Test Case:  71 | Input/Output: [[4 4 4 -93] -93]
Test Case:  72 | Input/Output: [[85 85 94 85] 85]
Test Case:  73 | Input/Output: [[14 14 -63 14] -63]
Test Case:  74 | Input/Output: [[20 20 20 -47] -47]
Test Case:  75 | Input/Output: [[-26 -26 -26 -98] -98]
Test Case:  76 | Input/Output: [[18 18 -5 18] -5]
Test Case:  77 | Input/Output: [[5 65 65 65] 5]
Test Case:  78 | Input/Output: [[-14 -14 73 -14] -14]
Test Case:  79 | Input/Output: [[12 -70 12 12] -70]
Test Case:  80 | Input/Output: [[10 44 44 44] 10]
Test Case:  81 | Input/Output: [[91 -47 91 91] -47]
Test Case:  82 | Input/Output: [[-4 -4 -4 -56] -56]
Test Case:  83 | Input/Output: [[-19 49 49 49] -19]
Test Case:  84 | Input/Output: [[29 29 59 29] 29]
Test Case:  85 | Input/Output: [[-3 -50 -3 -3] -50]
Test Case:  86 | Input/Output: [[-57 -57 -57 57] -57]
Test Case:  87 | Input/Output: [[-75 -19 -75 -75] -75]
Test Case:  88 | Input/Output: [[86 86 77 86] 77]
Test Case:  89 | Input/Output: [[-37 -37 -37 -96] -96]
Test Case:  90 | Input/Output: [[9 78 78 78] 9]
Test Case:  91 | Input/Output: [[-91 -91 -91 -42] -91]
Test Case:  92 | Input/Output: [[9 18 18 18] 9]
Test Case:  93 | Input/Output: [[-86 61 -86 -86] -86]
Test Case:  94 | Input/Output: [[7 7 -21 7] -21]
Test Case:  95 | Input/Output: [[-73 -73 -73 -77] -77]
Test Case:  96 | Input/Output: [[-93 -22 -93 -93] -93]
Test Case:  97 | Input/Output: [[-13 -13 -13 -20] -20]
Test Case:  98 | Input/Output: [[12 12 12 -5] -5]
Test Case:  99 | Input/Output: [[41 -45 -45 -45] -45]
Test Case: 100 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 101 | Input/Output: [(43 43 43 43) 43]
Test Case: 102 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 103 | Input/Output: [(66 66 66 66) 66]
Test Case: 104 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 105 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 106 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 107 | Input/Output: [(98 98 98 98) 98]
Test Case: 108 | Input/Output: [(11 11 11 11) 11]
Test Case: 109 | Input/Output: [(52 52 52 52) 52]
Test Case: 110 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 111 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 112 | Input/Output: [(3 3 3 3) 3]
Test Case: 113 | Input/Output: [(70 70 70 70) 70]
Test Case: 114 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 115 | Input/Output: [(68 68 68 68) 68]
Test Case: 116 | Input/Output: [(24 24 24 24) 24]
Test Case: 117 | Input/Output: [(46 46 46 46) 46]
Test Case: 118 | Input/Output: [(58 58 58 58) 58]
Test Case: 119 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 120 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 121 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 122 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 123 | Input/Output: [(75 75 75 75) 75]
Test Case: 124 | Input/Output: [(48 48 48 48) 48]
Test Case: 125 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 126 | Input/Output: [(9 9 9 9) 9]
Test Case: 127 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 128 | Input/Output: [(35 35 35 35) 35]
Test Case: 129 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 130 | Input/Output: [(68 68 68 68) 68]
Test Case: 131 | Input/Output: [(52 52 52 52) 52]
Test Case: 132 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 133 | Input/Output: [(77 77 77 77) 77]
Test Case: 134 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 135 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 136 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 137 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 138 | Input/Output: [(95 95 95 95) 95]
Test Case: 139 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 140 | Input/Output: [(61 61 61 61) 61]
Test Case: 141 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 142 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 143 | Input/Output: [(85 85 85 85) 85]
Test Case: 144 | Input/Output: [(40 40 40 40) 40]
Test Case: 145 | Input/Output: [(31 31 31 31) 31]
Test Case: 146 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 147 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 148 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 149 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 150 | Input/Output: [(58 58 58 58) 58]
Test Case: 151 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 152 | Input/Output: [(81 81 81 81) 81]
Test Case: 153 | Input/Output: [(20 20 20 20) 20]
Test Case: 154 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 155 | Input/Output: [(1 1 1 1) 1]
Test Case: 156 | Input/Output: [(6 6 6 6) 6]
Test Case: 157 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 158 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 159 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 160 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 161 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 162 | Input/Output: [(93 93 93 93) 93]
Test Case: 163 | Input/Output: [(57 57 57 57) 57]
Test Case: 164 | Input/Output: [(64 64 64 64) 64]
Test Case: 165 | Input/Output: [(30 30 30 30) 30]
Test Case: 166 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 167 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 168 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 169 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 170 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 171 | Input/Output: [(8 8 8 8) 8]
Test Case: 172 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 173 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 174 | Input/Output: [(64 64 64 64) 64]
Test Case: 175 | Input/Output: [(7 7 7 7) 7]
Test Case: 176 | Input/Output: [(73 73 73 73) 73]
Test Case: 177 | Input/Output: [(94 94 94 94) 94]
Test Case: 178 | Input/Output: [(92 92 92 92) 92]
Test Case: 179 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 180 | Input/Output: [(15 15 15 15) 15]
Test Case: 181 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 182 | Input/Output: [(98 98 98 98) 98]
Test Case: 183 | Input/Output: [(21 21 21 21) 21]
Test Case: 184 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 185 | Input/Output: [(15 15 15 15) 15]
Test Case: 186 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 187 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 188 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 189 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 190 | Input/Output: [(47 47 47 47) 47]
Test Case: 191 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 192 | Input/Output: [(72 72 72 72) 72]
Test Case: 193 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 194 | Input/Output: [(73 73 73 73) 73]
Test Case: 195 | Input/Output: [(14 14 14 14) 14]
Test Case: 196 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 197 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 198 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 199 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 200 | Input/Output: [(34 12 65 76) 12]
Test Case: 201 | Input/Output: [(96 23 5 0) 0]
Test Case: 202 | Input/Output: [(23 61 7 98) 7]
Test Case: 203 | Input/Output: [(84 80 95 76) 76]
Test Case: 204 | Input/Output: [(34 19 78 91) 19]
Test Case: 205 | Input/Output: [(70 81 85 67) 67]
Test Case: 206 | Input/Output: [(61 68 89 11) 11]
Test Case: 207 | Input/Output: [(12 78 63 46) 12]
Test Case: 208 | Input/Output: [(36 91 54 78) 36]
Test Case: 209 | Input/Output: [(87 75 29 61) 29]
Test Case: 210 | Input/Output: [(28 0 46 60) 0]
Test Case: 211 | Input/Output: [(21 5 53 52) 5]
Test Case: 212 | Input/Output: [(36 76 68 70) 36]
Test Case: 213 | Input/Output: [(88 25 90 52) 25]
Test Case: 214 | Input/Output: [(69 38 71 69) 38]
Test Case: 215 | Input/Output: [(100 97 63 66) 63]
Test Case: 216 | Input/Output: [(56 4 99 74) 4]
Test Case: 217 | Input/Output: [(31 16 91 89) 16]
Test Case: 218 | Input/Output: [(92 45 82 13) 13]
Test Case: 219 | Input/Output: [(28 100 93 61) 28]
Test Case: 220 | Input/Output: [(24 91 33 89) 24]
Test Case: 221 | Input/Output: [(84 33 7 85) 7]
Test Case: 222 | Input/Output: [(2 67 20 0) 0]
Test Case: 223 | Input/Output: [(24 13 61 67) 13]
Test Case: 224 | Input/Output: [(85 10 52 55) 10]
Test Case: 225 | Input/Output: [(34 13 75 78) 13]
Test Case: 226 | Input/Output: [(75 65 95 60) 60]
Test Case: 227 | Input/Output: [(72 65 19 67) 19]
Test Case: 228 | Input/Output: [(98 44 21 35) 21]
Test Case: 229 | Input/Output: [(78 78 54 13) 13]
Test Case: 230 | Input/Output: [(62 31 47 42) 31]
Test Case: 231 | Input/Output: [(33 25 9 77) 9]
Test Case: 232 | Input/Output: [(58 13 98 18) 13]
Test Case: 233 | Input/Output: [(66 46 31 49) 31]
Test Case: 234 | Input/Output: [(61 6 71 10) 6]
Test Case: 235 | Input/Output: [(92 62 83 42) 42]
Test Case: 236 | Input/Output: [(98 44 13 50) 13]
Test Case: 237 | Input/Output: [(76 6 45 68) 6]
Test Case: 238 | Input/Output: [(87 38 2 57) 2]
Test Case: 239 | Input/Output: [(38 67 28 57) 28]
Test Case: 240 | Input/Output: [(91 79 92 26) 26]
Test Case: 241 | Input/Output: [(88 1 55 89) 1]
Test Case: 242 | Input/Output: [(62 37 35 19) 19]
Test Case: 243 | Input/Output: [(77 95 38 94) 38]
Test Case: 244 | Input/Output: [(48 21 87 14) 14]
Test Case: 245 | Input/Output: [(1 68 100 18) 1]
Test Case: 246 | Input/Output: [(72 6 28 71) 6]
Test Case: 247 | Input/Output: [(97 70 20 6) 6]
Test Case: 248 | Input/Output: [(79 74 59 14) 14]
Test Case: 249 | Input/Output: [(18 11 29 89) 11]
Test Case: 250 | Input/Output: [(29 45 4 19) 4]
Test Case: 251 | Input/Output: [(34 63 27 23) 23]
Test Case: 252 | Input/Output: [(96 77 25 42) 25]
Test Case: 253 | Input/Output: [(51 38 21 96) 21]
Test Case: 254 | Input/Output: [(70 84 51 70) 51]
Test Case: 255 | Input/Output: [(55 54 48 23) 23]
Test Case: 256 | Input/Output: [(71 44 83 62) 44]
Test Case: 257 | Input/Output: [(34 46 4 46) 4]
Test Case: 258 | Input/Output: [(32 31 27 76) 27]
Test Case: 259 | Input/Output: [(76 100 91 15) 15]
Test Case: 260 | Input/Output: [(3 93 67 33) 3]
Test Case: 261 | Input/Output: [(69 73 64 43) 43]
Test Case: 262 | Input/Output: [(75 54 36 11) 11]
Test Case: 263 | Input/Output: [(77 96 56 69) 56]
Test Case: 264 | Input/Output: [(83 23 30 47) 23]
Test Case: 265 | Input/Output: [(76 91 39 9) 9]
Test Case: 266 | Input/Output: [(88 28 90 73) 28]
Test Case: 267 | Input/Output: [(48 29 99 24) 24]
Test Case: 268 | Input/Output: [(50 50 86 81) 50]
Test Case: 269 | Input/Output: [(29 1 29 58) 1]
Test Case: 270 | Input/Output: [(43 23 83 24) 23]
Test Case: 271 | Input/Output: [(71 51 70 15) 15]
Test Case: 272 | Input/Output: [(33 52 72 97) 33]
Test Case: 273 | Input/Output: [(90 27 0 26) 0]
Test Case: 274 | Input/Output: [(84 90 17 13) 13]
Test Case: 275 | Input/Output: [(57 62 24 84) 24]
Test Case: 276 | Input/Output: [(50 7 28 11) 7]
Test Case: 277 | Input/Output: [(20 55 72 0) 0]
Test Case: 278 | Input/Output: [(31 5 43 3) 3]
Test Case: 279 | Input/Output: [(77 98 86 85) 77]
Test Case: 280 | Input/Output: [(77 96 35 53) 35]
Test Case: 281 | Input/Output: [(43 57 81 51) 43]
Test Case: 282 | Input/Output: [(53 99 47 5) 5]
Test Case: 283 | Input/Output: [(8 65 72 23) 8]
Test Case: 284 | Input/Output: [(34 29 74 45) 29]
Test Case: 285 | Input/Output: [(43 34 95 17) 17]
Test Case: 286 | Input/Output: [(27 97 40 82) 27]
Test Case: 287 | Input/Output: [(75 46 42 19) 19]
Test Case: 288 | Input/Output: [(97 0 32 67) 0]
Test Case: 289 | Input/Output: [(94 35 21 35) 21]
Test Case: 290 | Input/Output: [(25 91 86 71) 25]
Test Case: 291 | Input/Output: [(29 70 93 25) 25]
Test Case: 292 | Input/Output: [(67 11 49 49) 11]
Test Case: 293 | Input/Output: [(39 35 88 46) 35]
Test Case: 294 | Input/Output: [(85 25 41 89) 25]
Test Case: 295 | Input/Output: [(31 49 70 17) 17]
Test Case: 296 | Input/Output: [(8 58 80 57) 8]
Test Case: 297 | Input/Output: [(25 94 3 85) 3]
Test Case: 298 | Input/Output: [(78 37 8 56) 8]
Test Case: 299 | Input/Output: [(53 69 93 15) 15]
Test Case: 300 | Input/Output: [(24 35 27 2) 2]
Test Case: 301 | Input/Output: [(99 88 19 22) 19]
Test Case: 302 | Input/Output: [(14 61 81 56) 14]
Test Case: 303 | Input/Output: [(64 88 51 57) 51]
Test Case: 304 | Input/Output: [(72 4 29 42) 4]
Test Case: 305 | Input/Output: [(39 65 95 3) 3]
Test Case: 306 | Input/Output: [(83 13 26 92) 13]
Test Case: 307 | Input/Output: [(38 75 29 83) 29]
Test Case: 308 | Input/Output: [(25 31 23 22) 22]
Test Case: 309 | Input/Output: [(79 15 76 66) 15]
Test Case: 310 | Input/Output: [(98 35 22 74) 22]
Test Case: 311 | Input/Output: [(18 28 29 51) 18]
Test Case: 312 | Input/Output: [(86 44 45 40) 40]
Test Case: 313 | Input/Output: [(99 97 70 65) 65]
Test Case: 314 | Input/Output: [(65 98 87 18) 18]
Test Case: 315 | Input/Output: [(16 31 9 55) 9]
Test Case: 316 | Input/Output: [(65 6 51 61) 6]
Test Case: 317 | Input/Output: [(5 53 30 4) 4]
Test Case: 318 | Input/Output: [(25 87 41 10) 10]
Test Case: 319 | Input/Output: [(6 1 9 4) 1]
Test Case: 320 | Input/Output: [(81 50 0 90) 0]
Test Case: 321 | Input/Output: [(35 41 63 3) 3]
Test Case: 322 | Input/Output: [(18 55 76 34) 18]
Test Case: 323 | Input/Output: [(62 79 81 81) 62]
Test Case: 324 | Input/Output: [(89 28 34 9) 9]
Test Case: 325 | Input/Output: [(98 91 52 83) 52]
Test Case: 326 | Input/Output: [(2 85 40 26) 2]
Test Case: 327 | Input/Output: [(6 15 34 51) 6]
Test Case: 328 | Input/Output: [(7 8 55 54) 7]
Test Case: 329 | Input/Output: [(14 47 3 2) 2]
Test Case: 330 | Input/Output: [(21 65 11 12) 11]
Test Case: 331 | Input/Output: [(30 5 64 5) 5]
Test Case: 332 | Input/Output: [(38 82 83 90) 38]
Test Case: 333 | Input/Output: [(8 58 65 86) 8]
Test Case: 334 | Input/Output: [(73 83 65 92) 65]
Test Case: 335 | Input/Output: [(69 8 46 51) 8]
Test Case: 336 | Input/Output: [(24 1 100 99) 1]
Test Case: 337 | Input/Output: [(92 17 79 84) 17]
Test Case: 338 | Input/Output: [(69 42 77 66) 42]
Test Case: 339 | Input/Output: [(33 14 10 31) 10]
Test Case: 340 | Input/Output: [(59 88 19 27) 19]
Test Case: 341 | Input/Output: [(21 53 8 88) 8]
Test Case: 342 | Input/Output: [(12 67 57 23) 12]
Test Case: 343 | Input/Output: [(27 44 63 22) 22]
Test Case: 344 | Input/Output: [(57 59 61 64) 57]
Test Case: 345 | Input/Output: [(2 59 14 53) 2]
Test Case: 346 | Input/Output: [(48 48 90 81) 48]
Test Case: 347 | Input/Output: [(12 41 84 18) 12]
Test Case: 348 | Input/Output: [(63 36 36 51) 36]
Test Case: 349 | Input/Output: [(43 11 98 66) 11]
Test Case: 350 | Input/Output: [(9 10 41 91) 9]
Test Case: 351 | Input/Output: [(67 89 86 68) 67]
Test Case: 352 | Input/Output: [(72 56 38 81) 38]
Test Case: 353 | Input/Output: [(55 72 57 87) 55]
Test Case: 354 | Input/Output: [(69 80 30 12) 12]
Test Case: 355 | Input/Output: [(47 18 44 28) 18]
Test Case: 356 | Input/Output: [(66 58 70 23) 23]
Test Case: 357 | Input/Output: [(83 41 3 51) 3]
Test Case: 358 | Input/Output: [(78 42 21 11) 11]
Test Case: 359 | Input/Output: [(27 32 62 8) 8]
Test Case: 360 | Input/Output: [(91 64 63 63) 63]
Test Case: 361 | Input/Output: [(1 97 33 56) 1]
Test Case: 362 | Input/Output: [(71 10 3 29) 3]
Test Case: 363 | Input/Output: [(32 59 97 66) 32]
Test Case: 364 | Input/Output: [(97 42 24 73) 24]
Test Case: 365 | Input/Output: [(55 93 1 33) 1]
Test Case: 366 | Input/Output: [(14 49 38 66) 14]
Test Case: 367 | Input/Output: [(30 100 64 55) 30]
Test Case: 368 | Input/Output: [(71 52 39 88) 39]
Test Case: 369 | Input/Output: [(84 95 81 91) 81]
Test Case: 370 | Input/Output: [(87 27 96 64) 27]
Test Case: 371 | Input/Output: [(20 65 6 99) 6]
Test Case: 372 | Input/Output: [(21 56 96 43) 21]
Test Case: 373 | Input/Output: [(34 23 78 75) 23]
Test Case: 374 | Input/Output: [(93 66 34 42) 34]
Test Case: 375 | Input/Output: [(58 91 34 58) 34]
Test Case: 376 | Input/Output: [(100 53 37 57) 37]
Test Case: 377 | Input/Output: [(60 86 81 26) 26]
Test Case: 378 | Input/Output: [(9 8 85 45) 8]
Test Case: 379 | Input/Output: [(80 98 5 47) 5]
Test Case: 380 | Input/Output: [(4 4 19 24) 4]
Test Case: 381 | Input/Output: [(54 87 98 7) 7]
Test Case: 382 | Input/Output: [(53 19 24 15) 15]
Test Case: 383 | Input/Output: [(62 90 82 82) 62]
Test Case: 384 | Input/Output: [(85 90 76 14) 14]
Test Case: 385 | Input/Output: [(81 89 13 81) 13]
Test Case: 386 | Input/Output: [(90 46 16 43) 16]
Test Case: 387 | Input/Output: [(1 20 16 32) 1]
Test Case: 388 | Input/Output: [(22 55 65 33) 22]
Test Case: 389 | Input/Output: [(8 16 76 30) 8]
Test Case: 390 | Input/Output: [(17 98 74 50) 17]
Test Case: 391 | Input/Output: [(16 64 47 73) 16]
Test Case: 392 | Input/Output: [(38 10 40 44) 10]
Test Case: 393 | Input/Output: [(25 100 2 57) 2]
Test Case: 394 | Input/Output: [(60 19 37 13) 13]
Test Case: 395 | Input/Output: [(97 44 63 73) 44]
Test Case: 396 | Input/Output: [(46 94 90 79) 46]
Test Case: 397 | Input/Output: [(92 8 23 11) 8]
Test Case: 398 | Input/Output: [(84 15 57 46) 15]
Test Case: 399 | Input/Output: [(46 31 90 0) 0]
Test Case: 400 | Input/Output: [(46 75 52 57) 46]
Test Case: 401 | Input/Output: [(-44 -75 -6 -50) -75]
Test Case: 402 | Input/Output: [(-51 41 98 69) -51]
Test Case: 403 | Input/Output: [(-96 -6 37 23) -96]
Test Case: 404 | Input/Output: [(17 -15 -30 -55) -55]
Test Case: 405 | Input/Output: [(-62 33 72 8) -62]
Test Case: 406 | Input/Output: [(81 26 -9 -12) -12]
Test Case: 407 | Input/Output: [(48 20 -16 -97) -97]
Test Case: 408 | Input/Output: [(-93 -11 12 -8) -93]
Test Case: 409 | Input/Output: [(-42 39 -89 -42) -89]
Test Case: 410 | Input/Output: [(-34 72 -44 9) -44]
Test Case: 411 | Input/Output: [(-7 -43 2 52) -43]
Test Case: 412 | Input/Output: [(-11 25 76 69) -11]
Test Case: 413 | Input/Output: [(12 -96 79 -90) -96]
Test Case: 414 | Input/Output: [(76 -24 61 -6) -24]
Test Case: 415 | Input/Output: [(81 86 87 -47) -47]
Test Case: 416 | Input/Output: [(63 -55 -77 82) -77]
Test Case: 417 | Input/Output: [(31 -16 -40 -80) -80]
Test Case: 418 | Input/Output: [(6 -71 -62 78) -71]
Test Case: 419 | Input/Output: [(-3 -50 -63 26) -63]
Test Case: 420 | Input/Output: [(42 -48 -68 -13) -68]
Test Case: 421 | Input/Output: [(61 17 95 15) 15]
Test Case: 422 | Input/Output: [(-33 -45 -71 -89) -89]
Test Case: 423 | Input/Output: [(-27 61 -10 5) -27]
Test Case: 424 | Input/Output: [(-16 53 -89 33) -89]
Test Case: 425 | Input/Output: [(59 -15 25 -34) -34]
Test Case: 426 | Input/Output: [(-70 -67 75 19) -70]
Test Case: 427 | Input/Output: [(-43 56 86 68) -43]
Test Case: 428 | Input/Output: [(1 12 -87 3) -87]
Test Case: 429 | Input/Output: [(38 -5 11 20) -5]
Test Case: 430 | Input/Output: [(92 -21 -93 36) -93]
Test Case: 431 | Input/Output: [(87 -59 24 90) -59]
Test Case: 432 | Input/Output: [(86 -98 -74 50) -98]
Test Case: 433 | Input/Output: [(98 -17 -100 -63) -100]
Test Case: 434 | Input/Output: [(40 90 -41 27) -41]
Test Case: 435 | Input/Output: [(-28 64 21 -3) -28]
Test Case: 436 | Input/Output: [(84 -79 -95 58) -95]
Test Case: 437 | Input/Output: [(88 57 35 68) 35]
Test Case: 438 | Input/Output: [(-23 40 36 -3) -23]
Test Case: 439 | Input/Output: [(-15 55 -40 77) -40]
Test Case: 440 | Input/Output: [(-45 -44 12 -10) -45]
Test Case: 441 | Input/Output: [(-11 -17 -85 -94) -94]
Test Case: 442 | Input/Output: [(-80 -30 -59 31) -80]
Test Case: 443 | Input/Output: [(99 42 -43 83) -43]
Test Case: 444 | Input/Output: [(98 40 -91 -27) -91]
Test Case: 445 | Input/Output: [(5 -22 20 -88) -88]
Test Case: 446 | Input/Output: [(-63 -83 12 -63) -83]
Test Case: 447 | Input/Output: [(5 21 70 -96) -96]
Test Case: 448 | Input/Output: [(35 55 78 -71) -71]
Test Case: 449 | Input/Output: [(-41 7 70 -13) -41]
Test Case: 450 | Input/Output: [(-36 -47 21 97) -47]
Test Case: 451 | Input/Output: [(-15 -56 64 53) -56]
Test Case: 452 | Input/Output: [(95 -95 -30 -76) -95]
Test Case: 453 | Input/Output: [(-85 -25 -20 60) -85]
Test Case: 454 | Input/Output: [(59 53 51 35) 35]
Test Case: 455 | Input/Output: [(67 46 94 -97) -97]
Test Case: 456 | Input/Output: [(-93 -97 -100 -13) -100]
Test Case: 457 | Input/Output: [(31 -35 72 69) -35]
Test Case: 458 | Input/Output: [(-30 87 61 27) -30]
Test Case: 459 | Input/Output: [(-68 44 -77 45) -77]
Test Case: 460 | Input/Output: [(73 -63 11 53) -63]
Test Case: 461 | Input/Output: [(-85 -78 -87 79) -87]
Test Case: 462 | Input/Output: [(3 -41 13 61) -41]
Test Case: 463 | Input/Output: [(44 60 -52 80) -52]
Test Case: 464 | Input/Output: [(48 -8 58 18) -8]
Test Case: 465 | Input/Output: [(73 -8 -67 83) -67]
Test Case: 466 | Input/Output: [(-44 -42 80 12) -44]
Test Case: 467 | Input/Output: [(-8 71 -23 75) -23]
Test Case: 468 | Input/Output: [(-63 -57 -71 -75) -75]
Test Case: 469 | Input/Output: [(38 -53 3 71) -53]
Test Case: 470 | Input/Output: [(-25 -88 -82 -89) -89]
Test Case: 471 | Input/Output: [(43 22 -52 71) -52]
Test Case: 472 | Input/Output: [(-87 49 -19 33) -87]
Test Case: 473 | Input/Output: [(-68 -71 -7 65) -71]
Test Case: 474 | Input/Output: [(-17 -37 24 12) -37]
Test Case: 475 | Input/Output: [(-75 53 35 79) -75]
Test Case: 476 | Input/Output: [(76 -62 27 12) -62]
Test Case: 477 | Input/Output: [(-58 -24 -85 -5) -85]
Test Case: 478 | Input/Output: [(-9 -9 -55 96) -55]
Test Case: 479 | Input/Output: [(93 26 30 30) 26]
Test Case: 480 | Input/Output: [(3 -9 -60 -78) -78]
Test Case: 481 | Input/Output: [(2 18 -76 22) -76]
Test Case: 482 | Input/Output: [(62 63 -15 -62) -62]
Test Case: 483 | Input/Output: [(13 -89 84 74) -89]
Test Case: 484 | Input/Output: [(33 0 -68 -71) -71]
Test Case: 485 | Input/Output: [(32 -74 14 68) -74]
Test Case: 486 | Input/Output: [(-14 27 82 -52) -52]
Test Case: 487 | Input/Output: [(37 13 61 -65) -65]
Test Case: 488 | Input/Output: [(-58 -47 -81 -95) -95]
Test Case: 489 | Input/Output: [(-13 5 -58 92) -58]
Test Case: 490 | Input/Output: [(-6 30 -98 -77) -98]
Test Case: 491 | Input/Output: [(-55 46 20 -78) -78]
Test Case: 492 | Input/Output: [(16 -2 97 3) -2]
Test Case: 493 | Input/Output: [(-97 48 88 23) -97]
Test Case: 494 | Input/Output: [(-79 -49 96 36) -79]
Test Case: 495 | Input/Output: [(-10 -38 -82 -39) -82]
Test Case: 496 | Input/Output: [(-62 -63 -78 -12) -78]
Test Case: 497 | Input/Output: [(14 50 92 48) 14]
Test Case: 498 | Input/Output: [(51 -37 -2 7) -37]
Test Case: 499 | Input/Output: [(-59 73 -56 -80) -80]
Test Case: 500 | Input/Output: [(37 31 -47 -74) -74]
Test Case: 501 | Input/Output: [(-98 -32 -56 85) -98]
Test Case: 502 | Input/Output: [(-35 1 -61 84) -61]
Test Case: 503 | Input/Output: [(-46 99 95 10) -46]
Test Case: 504 | Input/Output: [(18 44 59 2) 2]
Test Case: 505 | Input/Output: [(-42 -60 -22 78) -60]
Test Case: 506 | Input/Output: [(-79 -30 47 -20) -79]
Test Case: 507 | Input/Output: [(82 23 -54 -83) -83]
Test Case: 508 | Input/Output: [(92 -99 28 32) -99]
Test Case: 509 | Input/Output: [(30 -22 27 -90) -90]
Test Case: 510 | Input/Output: [(89 80 -57 -88) -88]
Test Case: 511 | Input/Output: [(77 -97 66 -23) -97]
Test Case: 512 | Input/Output: [(-22 -72 -82 -55) -82]
Test Case: 513 | Input/Output: [(-14 76 87 -51) -51]
Test Case: 514 | Input/Output: [(-9 -2 -90 16) -90]
Test Case: 515 | Input/Output: [(-74 -60 -18 43) -74]
Test Case: 516 | Input/Output: [(84 67 93 -26) -26]
Test Case: 517 | Input/Output: [(88 33 -25 -66) -66]
Test Case: 518 | Input/Output: [(18 83 62 -83) -83]
Test Case: 519 | Input/Output: [(65 -41 100 48) -41]
Test Case: 520 | Input/Output: [(51 73 -26 -57) -57]
Test Case: 521 | Input/Output: [(95 54 45 -29) -29]
Test Case: 522 | Input/Output: [(61 -26 -55 68) -55]
Test Case: 523 | Input/Output: [(75 56 46 -94) -94]
Test Case: 524 | Input/Output: [(11 -75 -35 53) -75]
Test Case: 525 | Input/Output: [(-10 84 -88 3) -88]
Test Case: 526 | Input/Output: [(75 76 91 25) 25]
Test Case: 527 | Input/Output: [(-15 -64 94 17) -64]
Test Case: 528 | Input/Output: [(38 53 98 71) 38]
Test Case: 529 | Input/Output: [(-36 -54 -89 2) -89]
Test Case: 530 | Input/Output: [(-13 -98 17 -56) -98]
Test Case: 531 | Input/Output: [(-50 49 71 -80) -80]
Test Case: 532 | Input/Output: [(-33 -98 -18 -17) -98]
Test Case: 533 | Input/Output: [(2 -58 -44 -30) -58]
Test Case: 534 | Input/Output: [(-37 77 -98 -51) -98]
Test Case: 535 | Input/Output: [(-49 52 -100 95) -100]
Test Case: 536 | Input/Output: [(-15 -67 -93 92) -93]
Test Case: 537 | Input/Output: [(-38 -90 11 82) -90]
Test Case: 538 | Input/Output: [(-13 5 6 -76) -76]
Test Case: 539 | Input/Output: [(14 -66 87 -56) -66]
Test Case: 540 | Input/Output: [(55 98 86 -50) -50]
Test Case: 541 | Input/Output: [(44 -99 -64 -25) -99]
Test Case: 542 | Input/Output: [(-35 89 -19 -81) -81]
Test Case: 543 | Input/Output: [(-15 29 72 72) -15]
Test Case: 544 | Input/Output: [(-84 53 -18 -5) -84]
Test Case: 545 | Input/Output: [(27 100 -73 64) -73]
Test Case: 546 | Input/Output: [(58 42 67 -53) -53]
Test Case: 547 | Input/Output: [(-1 65 41 -33) -33]
Test Case: 548 | Input/Output: [(93 19 66 29) 19]
Test Case: 549 | Input/Output: [(65 -52 -83 62) -83]
Test Case: 550 | Input/Output: [(-43 -83 39 95) -83]
Test Case: 551 | Input/Output: [(-28 91 99 65) -28]
Test Case: 552 | Input/Output: [(-51 -74 38 90) -74]
Test Case: 553 | Input/Output: [(-86 96 55 60) -86]
Test Case: 554 | Input/Output: [(-2 37 -3 -72) -72]
Test Case: 555 | Input/Output: [(-84 11 68 19) -84]
Test Case: 556 | Input/Output: [(4 -37 60 9) -37]
Test Case: 557 | Input/Output: [(-15 81 -49 -24) -49]
Test Case: 558 | Input/Output: [(-72 26 -88 -60) -88]
Test Case: 559 | Input/Output: [(-71 -26 -90 20) -90]
Test Case: 560 | Input/Output: [(-20 -85 -80 -28) -85]
Test Case: 561 | Input/Output: [(-81 14 4 28) -81]
Test Case: 562 | Input/Output: [(77 -30 76 82) -30]
Test Case: 563 | Input/Output: [(-97 -73 72 25) -97]
Test Case: 564 | Input/Output: [(-37 70 11 71) -37]
Test Case: 565 | Input/Output: [(34 -42 96 9) -42]
Test Case: 566 | Input/Output: [(39 67 -75 39) -75]
Test Case: 567 | Input/Output: [(-71 -95 12 -35) -95]
Test Case: 568 | Input/Output: [(15 33 96 22) 15]
Test Case: 569 | Input/Output: [(-72 -66 -27 7) -72]
Test Case: 570 | Input/Output: [(16 97 40 -79) -79]
Test Case: 571 | Input/Output: [(-93 22 -92 33) -93]
Test Case: 572 | Input/Output: [(76 -10 52 55) -10]
Test Case: 573 | Input/Output: [(73 81 -34 -82) -82]
Test Case: 574 | Input/Output: [(-46 -23 -45 -72) -72]
Test Case: 575 | Input/Output: [(52 -78 -91 20) -91]
Test Case: 576 | Input/Output: [(-95 -59 55 18) -95]
Test Case: 577 | Input/Output: [(-39 -91 93 -1) -91]
Test Case: 578 | Input/Output: [(38 -67 -93 -8) -93]
Test Case: 579 | Input/Output: [(89 -99 64 80) -99]
Test Case: 580 | Input/Output: [(54 18 -48 41) -48]
Test Case: 581 | Input/Output: [(-33 33 67 73) -33]
Test Case: 582 | Input/Output: [(-27 38 -32 6) -32]
Test Case: 583 | Input/Output: [(36 -74 -79 24) -79]
Test Case: 584 | Input/Output: [(-79 -32 -54 50) -79]
Test Case: 585 | Input/Output: [(-24 24 1 97) -24]
Test Case: 586 | Input/Output: [(-36 -77 -48 -7) -77]
Test Case: 587 | Input/Output: [(95 58 -99 -17) -99]
Test Case: 588 | Input/Output: [(21 6 81 93) 6]
Test Case: 589 | Input/Output: [(37 -9 23 39) -9]
Test Case: 590 | Input/Output: [(93 -83 93 -6) -83]
Test Case: 591 | Input/Output: [(-28 71 84 2) -28]
Test Case: 592 | Input/Output: [(71 -60 -83 -35) -83]
Test Case: 593 | Input/Output: [(80 -39 -82 10) -82]
Test Case: 594 | Input/Output: [(19 15 -1 -60) -60]
Test Case: 595 | Input/Output: [(-16 -13 -11 88) -16]
Test Case: 596 | Input/Output: [(24 74 -6 -24) -24]
Test Case: 597 | Input/Output: [(-95 66 56 96) -95]
Test Case: 598 | Input/Output: [(85 50 35 96) 35]
Test Case: 599 | Input/Output: [(-96 -2 91 33) -96]
Test Case: 600 | Input/Output: [(62 58 11 59) 11]
Test Case: 601 | Input/Output: [(-2 11 -17 82) -17]
Test Case: 602 | Input/Output: [(23 -8 46 -86) -86]
Test Case: 603 | Input/Output: [(-44 80 -42 55) -44]
Test Case: 604 | Input/Output: [(66 -51 -19 76) -51]
Test Case: 605 | Input/Output: [(-68 -60 -23 24) -68]
Test Case: 606 | Input/Output: [(54 -92 78 -100) -100]
Test Case: 607 | Input/Output: [(-37 84 -66 -89) -89]
Test Case: 608 | Input/Output: [(-19 -5 37 -33) -33]
Test Case: 609 | Input/Output: [(34 -63 23 -43) -63]
Test Case: 610 | Input/Output: [(-11 -91 7 -92) -92]
Test Case: 611 | Input/Output: [(-14 -40 -24 -90) -90]
Test Case: 612 | Input/Output: [(89 47 65 9) 9]
Test Case: 613 | Input/Output: [(78 4 -4 0) -4]
Test Case: 614 | Input/Output: [(-88 40 45 -65) -88]
Test Case: 615 | Input/Output: [(-76 -1 29 5) -76]
Test Case: 616 | Input/Output: [(-69 2 21 83) -69]
Test Case: 617 | Input/Output: [(-87 -60 -1 -68) -87]
Test Case: 618 | Input/Output: [(86 60 -7 -75) -75]
Test Case: 619 | Input/Output: [(-42 -26 37 -13) -42]
Test Case: 620 | Input/Output: [(-7 -56 -34 -45) -56]
Test Case: 621 | Input/Output: [(21 28 36 68) 21]
Test Case: 622 | Input/Output: [(-50 -97 13 93) -97]
Test Case: 623 | Input/Output: [(-37 -56 -69 46) -69]
Test Case: 624 | Input/Output: [(95 84 -76 -100) -100]
Test Case: 625 | Input/Output: [(7 70 39 2) 2]
Test Case: 626 | Input/Output: [(-36 1 -24 -5) -36]
Test Case: 627 | Input/Output: [(-48 0 -85 -16) -85]
Test Case: 628 | Input/Output: [(23 69 -74 -49) -74]
Test Case: 629 | Input/Output: [(72 -83 -18 71) -83]
Test Case: 630 | Input/Output: [(52 -2 25 50) -2]
Test Case: 631 | Input/Output: [(48 -42 43 83) -42]
Test Case: 632 | Input/Output: [(-41 97 7 -36) -41]
Test Case: 633 | Input/Output: [(52 -33 -31 -74) -74]
Test Case: 634 | Input/Output: [(-55 73 -6 -29) -55]
Test Case: 635 | Input/Output: [(11 33 -56 42) -56]
Test Case: 636 | Input/Output: [(-37 61 22 -52) -52]
Test Case: 637 | Input/Output: [(-47 87 -21 53) -47]
Test Case: 638 | Input/Output: [(22 86 -36 -37) -37]
Test Case: 639 | Input/Output: [(42 -16 -16 42) -16]
Test Case: 640 | Input/Output: [(-70 94 44 80) -70]
Test Case: 641 | Input/Output: [(92 82 67 -35) -35]
Test Case: 642 | Input/Output: [(25 -88 -72 36) -88]
Test Case: 643 | Input/Output: [(21 -46 43 -74) -74]
Test Case: 644 | Input/Output: [(57 20 37 -52) -52]
Test Case: 645 | Input/Output: [(-72 -61 -71 -86) -86]
Test Case: 646 | Input/Output: [(-19 73 -63 -34) -63]
Test Case: 647 | Input/Output: [(89 64 -44 -31) -44]
Test Case: 648 | Input/Output: [(79 -2 -40 -15) -40]
Test Case: 649 | Input/Output: [(-57 41 -70 59) -70]
Test Case: 650 | Input/Output: [(-39 -68 -89 -41) -89]
Test Case: 651 | Input/Output: [(44 26 38 79) 26]
Test Case: 652 | Input/Output: [(19 -58 68 -95) -95]
Test Case: 653 | Input/Output: [(-49 64 76 40) -49]
Test Case: 654 | Input/Output: [(92 57 54 -94) -94]
Test Case: 655 | Input/Output: [(-39 -55 3 48) -55]
Test Case: 656 | Input/Output: [(-43 30 -25 93) -43]
Test Case: 657 | Input/Output: [(9 -46 -36 8) -46]
Test Case: 658 | Input/Output: [(-6 -48 -15 97) -48]
Test Case: 659 | Input/Output: [(39 -37 23 48) -37]
Test Case: 660 | Input/Output: [(61 25 -23 -40) -40]
Test Case: 661 | Input/Output: [(49 -59 71 -40) -59]
Test Case: 662 | Input/Output: [(60 -57 -76 0) -76]
Test Case: 663 | Input/Output: [(-58 66 -30 -36) -58]
Test Case: 664 | Input/Output: [(4 73 -4 23) -4]
Test Case: 665 | Input/Output: [(72 -63 58 27) -63]
Test Case: 666 | Input/Output: [(-88 -5 -77 -42) -88]
Test Case: 667 | Input/Output: [(82 22 68 50) 22]
Test Case: 668 | Input/Output: [(63 -75 -79 -20) -79]
Test Case: 669 | Input/Output: [(-82 33 -63 -14) -82]
Test Case: 670 | Input/Output: [(4 17 -75 -78) -78]
Test Case: 671 | Input/Output: [(43 -43 -99 -32) -99]
Test Case: 672 | Input/Output: [(11 5 29 -58) -58]
Test Case: 673 | Input/Output: [(-89 6 -39 35) -89]
Test Case: 674 | Input/Output: [(59 -9 -80 -72) -80]
Test Case: 675 | Input/Output: [(-24 -72 -92 14) -92]
Test Case: 676 | Input/Output: [(21 -9 -24 -19) -24]
Test Case: 677 | Input/Output: [(11 -51 -13 6) -51]
Test Case: 678 | Input/Output: [(9 -15 -41 -22) -41]
Test Case: 679 | Input/Output: [(35 85 15 -1) -1]
Test Case: 680 | Input/Output: [(67 -78 -74 -59) -78]
Test Case: 681 | Input/Output: [(93 -56 -5 -74) -74]
Test Case: 682 | Input/Output: [(82 10 24 -40) -40]
Test Case: 683 | Input/Output: [(-33 -15 -13 95) -33]
Test Case: 684 | Input/Output: [(-50 -48 -69 -24) -69]
Test Case: 685 | Input/Output: [(-64 35 -52 -44) -64]
Test Case: 686 | Input/Output: [(-11 46 76 42) -11]
Test Case: 687 | Input/Output: [(32 46 48 73) 32]
Test Case: 688 | Input/Output: [(8 33 -84 -68) -84]
Test Case: 689 | Input/Output: [(81 -47 -17 20) -47]
Test Case: 690 | Input/Output: [(-70 -16 -35 -14) -70]
Test Case: 691 | Input/Output: [(-82 58 -36 66) -82]
Test Case: 692 | Input/Output: [(52 -41 67 85) -41]
Test Case: 693 | Input/Output: [(99 -81 -15 81) -81]
Test Case: 694 | Input/Output: [(31 60 -61 34) -61]
Test Case: 695 | Input/Output: [(-71 9 -18 -89) -89]
Test Case: 696 | Input/Output: [(-1 85 -16 72) -16]
Test Case: 697 | Input/Output: [(-82 -1 -40 -98) -98]
Test Case: 698 | Input/Output: [(50 94 -69 -92) -92]
Test Case: 699 | Input/Output: [(-93 -81 71 50) -93]
Test Case: 700 | Input/Output: [(69 -12 87 76) -12]
Test Case: 701 | Input/Output: [(79 -96 -91 -82) -96]
Test Case: 702 | Input/Output: [(-86 13 -50 -15) -86]
Test Case: 703 | Input/Output: [(97 -14 -84 -90) -90]
Test Case: 704 | Input/Output: [(-64 4 -38 -52) -64]
Test Case: 705 | Input/Output: [(-43 86 -4 -69) -69]
Test Case: 706 | Input/Output: [(-69 81 11 -59) -69]
Test Case: 707 | Input/Output: [(-36 -86 77 3) -86]
Test Case: 708 | Input/Output: [(-81 73 -55 22) -81]
Test Case: 709 | Input/Output: [(-59 -36 -3 32) -59]
Test Case: 710 | Input/Output: [(83 -32 -88 -4) -88]
Test Case: 711 | Input/Output: [(62 25 -72 -77) -77]
Test Case: 712 | Input/Output: [(39 2 90 -27) -27]
Test Case: 713 | Input/Output: [(16 -20 -23 -67) -67]
Test Case: 714 | Input/Output: [(32 60 -1 -77) -77]
Test Case: 715 | Input/Output: [(-59 100 88 -66) -66]
Test Case: 716 | Input/Output: [(-93 -35 95 45) -93]
Test Case: 717 | Input/Output: [(73 -96 81 78) -96]
Test Case: 718 | Input/Output: [(-52 -25 -92 -32) -92]
Test Case: 719 | Input/Output: [(39 -56 27 -25) -56]
Test Case: 720 | Input/Output: [(-52 40 -83 32) -83]
Test Case: 721 | Input/Output: [(30 5 78 77) 5]
Test Case: 722 | Input/Output: [(3 -23 13 75) -23]
Test Case: 723 | Input/Output: [(-45 -64 36 16) -64]
Test Case: 724 | Input/Output: [(38 -84 27 26) -84]
Test Case: 725 | Input/Output: [(86 22 64 85) 22]
Test Case: 726 | Input/Output: [(95 1 -32 -74) -74]
Test Case: 727 | Input/Output: [(-65 98 -55 -76) -76]
Test Case: 728 | Input/Output: [(23 -44 83 -45) -45]
Test Case: 729 | Input/Output: [(-47 47 -1 56) -47]
Test Case: 730 | Input/Output: [(-18 -72 -76 1) -76]
Test Case: 731 | Input/Output: [(5 38 -70 -79) -79]
Test Case: 732 | Input/Output: [(40 34 48 -58) -58]
Test Case: 733 | Input/Output: [(-92 -30 70 17) -92]
Test Case: 734 | Input/Output: [(-32 34 78 -89) -89]
Test Case: 735 | Input/Output: [(95 80 66 -74) -74]
Test Case: 736 | Input/Output: [(-75 57 3 -18) -75]
Test Case: 737 | Input/Output: [(84 -48 70 98) -48]
Test Case: 738 | Input/Output: [(-85 80 -28 -63) -85]
Test Case: 739 | Input/Output: [(-69 -41 -59 -35) -69]
Test Case: 740 | Input/Output: [(-59 -43 -38 -41) -59]
Test Case: 741 | Input/Output: [(-50 73 88 -27) -50]
Test Case: 742 | Input/Output: [(41 -76 100 -25) -76]
Test Case: 743 | Input/Output: [(77 14 -75 95) -75]
Test Case: 744 | Input/Output: [(25 -11 -87 -68) -87]
Test Case: 745 | Input/Output: [(16 47 -24 83) -24]
Test Case: 746 | Input/Output: [(-66 -56 78 -29) -66]
Test Case: 747 | Input/Output: [(-32 -21 -1 42) -32]
Test Case: 748 | Input/Output: [(25 40 -55 100) -55]
Test Case: 749 | Input/Output: [(-70 -57 -31 -100) -100]
Test Case: 750 | Input/Output: [(-69 -26 47 18) -69]
Test Case: 751 | Input/Output: [(44 -56 92 -31) -56]
Test Case: 752 | Input/Output: [(4 -4 -88 -81) -88]
Test Case: 753 | Input/Output: [(-45 62 65 26) -45]
Test Case: 754 | Input/Output: [(-38 49 -36 -69) -69]
Test Case: 755 | Input/Output: [(-73 12 -40 -85) -85]
Test Case: 756 | Input/Output: [(63 32 100 -26) -26]
Test Case: 757 | Input/Output: [(-36 74 -87 0) -87]
Test Case: 758 | Input/Output: [(-8 -78 79 -59) -78]
Test Case: 759 | Input/Output: [(66 -10 88 18) -10]
Test Case: 760 | Input/Output: [(-39 14 45 -61) -61]
Test Case: 761 | Input/Output: [(-16 77 74 92) -16]
Test Case: 762 | Input/Output: [(-64 61 -30 76) -64]
Test Case: 763 | Input/Output: [(7 94 21 88) 7]
Test Case: 764 | Input/Output: [(74 62 66 -93) -93]
Test Case: 765 | Input/Output: [(40 60 18 17) 17]
Test Case: 766 | Input/Output: [(-81 24 -1 -20) -81]
Test Case: 767 | Input/Output: [(87 50 -61 93) -61]
Test Case: 768 | Input/Output: [(85 -17 84 3) -17]
Test Case: 769 | Input/Output: [(-86 -19 -2 41) -86]
Test Case: 770 | Input/Output: [(78 84 59 82) 59]
Test Case: 771 | Input/Output: [(29 -7 -75 63) -75]
Test Case: 772 | Input/Output: [(81 98 -8 -43) -43]
Test Case: 773 | Input/Output: [(61 -37 -45 -59) -59]
Test Case: 774 | Input/Output: [(88 59 15 -71) -71]
Test Case: 775 | Input/Output: [(66 63 19 -50) -50]
Test Case: 776 | Input/Output: [(34 -46 68 -37) -46]
Test Case: 777 | Input/Output: [(63 -69 86 37) -69]
Test Case: 778 | Input/Output: [(8 -20 2 35) -20]
Test Case: 779 | Input/Output: [(-65 36 -12 89) -65]
Test Case: 780 | Input/Output: [(42 15 -86 -27) -86]
Test Case: 781 | Input/Output: [(-1 57 -53 -63) -63]
Test Case: 782 | Input/Output: [(33 -13 -62 -83) -83]
Test Case: 783 | Input/Output: [(-65 -83 -64 -32) -83]
Test Case: 784 | Input/Output: [(25 -1 -52 87) -52]
Test Case: 785 | Input/Output: [(94 -83 -39 -10) -83]
Test Case: 786 | Input/Output: [(-68 37 -77 18) -77]
Test Case: 787 | Input/Output: [(44 -68 -36 -100) -100]
Test Case: 788 | Input/Output: [(-96 -16 -18 -37) -96]
Test Case: 789 | Input/Output: [(-28 41 55 -99) -99]
Test Case: 790 | Input/Output: [(-72 -79 -81 -25) -81]
Test Case: 791 | Input/Output: [(18 -73 10 47) -73]
Test Case: 792 | Input/Output: [(-91 -42 -64 45) -91]
Test Case: 793 | Input/Output: [(-25 -22 -1 -99) -99]
Test Case: 794 | Input/Output: [(-64 -76 74 37) -76]
Test Case: 795 | Input/Output: [(81 -77 -59 -35) -77]
Test Case: 796 | Input/Output: [(-57 80 -16 12) -57]
Test Case: 797 | Input/Output: [(-84 52 -28 -68) -84]
Test Case: 798 | Input/Output: [(41 90 95 -55) -55]
Test Case: 799 | Input/Output: [(-93 -69 -56 -61) -93]
Test Case: 800 | Input/Output: [(-85 18 53 -83) -85]
Test Case: 801 | Input/Output: [(-87 98 53 49) -87]
Test Case: 802 | Input/Output: [(68 -74 -79 -65) -79]
Test Case: 803 | Input/Output: [(56 43 -13 56) -13]
Test Case: 804 | Input/Output: [(100 51 12 37) 12]
Test Case: 805 | Input/Output: [(-5 -83 -39 25) -83]
Test Case: 806 | Input/Output: [(73 -15 3 -19) -19]
Test Case: 807 | Input/Output: [(78 -80 25 -17) -80]
Test Case: 808 | Input/Output: [(81 -48 47 27) -48]
Test Case: 809 | Input/Output: [(-75 28 -99 -47) -99]
Test Case: 810 | Input/Output: [(79 -94 -29 -87) -94]
Test Case: 811 | Input/Output: [(-91 77 -36 -7) -91]
Test Case: 812 | Input/Output: [(-71 49 -9 93) -71]
Test Case: 813 | Input/Output: [(10 -100 -41 -51) -100]
Test Case: 814 | Input/Output: [(-14 -74 -84 91) -84]
Test Case: 815 | Input/Output: [(-1 91 7 1) -1]
Test Case: 816 | Input/Output: [(17 -60 -8 -78) -78]
Test Case: 817 | Input/Output: [(-48 52 59 55) -48]
Test Case: 818 | Input/Output: [(47 -13 51 28) -13]
Test Case: 819 | Input/Output: [(-70 -36 4 13) -70]
Test Case: 820 | Input/Output: [(-63 98 15 -56) -63]
Test Case: 821 | Input/Output: [(10 76 59 53) 10]
Test Case: 822 | Input/Output: [(10 2 -62 59) -62]
Test Case: 823 | Input/Output: [(-41 -11 60 11) -41]
Test Case: 824 | Input/Output: [(-49 -20 0 75) -49]
Test Case: 825 | Input/Output: [(5 36 -76 -77) -77]
Test Case: 826 | Input/Output: [(-11 -44 -25 27) -44]
Test Case: 827 | Input/Output: [(87 -37 22 37) -37]
Test Case: 828 | Input/Output: [(25 -86 78 61) -86]
Test Case: 829 | Input/Output: [(44 -47 45 30) -47]
Test Case: 830 | Input/Output: [(-94 13 66 -72) -94]
Test Case: 831 | Input/Output: [(-75 -61 85 -13) -75]
Test Case: 832 | Input/Output: [(-13 -1 -81 96) -81]
Test Case: 833 | Input/Output: [(83 48 -47 25) -47]
Test Case: 834 | Input/Output: [(-2 -90 -35 -7) -90]
Test Case: 835 | Input/Output: [(87 -55 -5 -84) -84]
Test Case: 836 | Input/Output: [(-61 41 -39 0) -61]
Test Case: 837 | Input/Output: [(50 54 -3 30) -3]
Test Case: 838 | Input/Output: [(-71 56 -60 -45) -71]
Test Case: 839 | Input/Output: [(55 -14 35 96) -14]
Test Case: 840 | Input/Output: [(-54 67 -18 40) -54]
Test Case: 841 | Input/Output: [(-68 -74 -19 45) -74]
Test Case: 842 | Input/Output: [(67 -12 4 55) -12]
Test Case: 843 | Input/Output: [(-15 1 7 -78) -78]
Test Case: 844 | Input/Output: [(-6 9 -50 -87) -87]
Test Case: 845 | Input/Output: [(-51 -67 7 -58) -67]
Test Case: 846 | Input/Output: [(77 58 86 34) 34]
Test Case: 847 | Input/Output: [(44 -84 89 -37) -84]
Test Case: 848 | Input/Output: [(-37 -61 54 -50) -61]
Test Case: 849 | Input/Output: [(-75 -22 -38 99) -75]
Test Case: 850 | Input/Output: [(52 69 -59 2) -59]
Test Case: 851 | Input/Output: [(17 88 -42 -83) -83]
Test Case: 852 | Input/Output: [(-2 -65 23 -85) -85]
Test Case: 853 | Input/Output: [(9 -6 -42 80) -42]
Test Case: 854 | Input/Output: [(62 59 -86 -17) -86]
Test Case: 855 | Input/Output: [(63 94 -4 71) -4]
Test Case: 856 | Input/Output: [(9 40 -93 15) -93]
Test Case: 857 | Input/Output: [(-58 56 -70 22) -70]
Test Case: 858 | Input/Output: [(38 -15 27 91) -15]
Test Case: 859 | Input/Output: [(-45 -21 24 -30) -45]
Test Case: 860 | Input/Output: [(19 65 72 30) 19]
Test Case: 861 | Input/Output: [(89 88 -10 -5) -10]
Test Case: 862 | Input/Output: [(-68 80 95 -72) -72]
Test Case: 863 | Input/Output: [(-4 26 56 57) -4]
Test Case: 864 | Input/Output: [(-48 27 84 13) -48]
Test Case: 865 | Input/Output: [(-11 -39 71 57) -39]
Test Case: 866 | Input/Output: [(-82 -39 81 7) -82]
Test Case: 867 | Input/Output: [(-36 64 80 -34) -36]
Test Case: 868 | Input/Output: [(19 -9 74 -6) -9]
Test Case: 869 | Input/Output: [(28 -73 84 -97) -97]
Test Case: 870 | Input/Output: [(6 79 -83 -37) -83]
Test Case: 871 | Input/Output: [(-4 -8 -9 56) -9]
Test Case: 872 | Input/Output: [(61 -63 -74 -46) -74]
Test Case: 873 | Input/Output: [(63 -32 22 -37) -37]
Test Case: 874 | Input/Output: [(-78 14 -31 -58) -78]
Test Case: 875 | Input/Output: [(-11 29 -17 7) -17]
Test Case: 876 | Input/Output: [(4 22 -73 53) -73]
Test Case: 877 | Input/Output: [(-88 21 19 -18) -88]
Test Case: 878 | Input/Output: [(76 -20 -32 -53) -53]
Test Case: 879 | Input/Output: [(58 -16 92 -8) -16]
Test Case: 880 | Input/Output: [(87 53 54 17) 17]
Test Case: 881 | Input/Output: [(48 35 68 75) 35]
Test Case: 882 | Input/Output: [(81 -28 -48 -59) -59]
Test Case: 883 | Input/Output: [(-60 46 33 34) -60]
Test Case: 884 | Input/Output: [(-66 -45 -23 -77) -77]
Test Case: 885 | Input/Output: [(-56 -19 -80 61) -80]
Test Case: 886 | Input/Output: [(83 -94 -86 22) -94]
Test Case: 887 | Input/Output: [(-44 10 -39 6) -44]
Test Case: 888 | Input/Output: [(-98 77 -12 8) -98]
Test Case: 889 | Input/Output: [(-91 -70 67 -11) -91]
Test Case: 890 | Input/Output: [(72 60 -79 -97) -97]
Test Case: 891 | Input/Output: [(78 21 23 -46) -46]
Test Case: 892 | Input/Output: [(-56 61 -63 23) -63]
Test Case: 893 | Input/Output: [(78 -2 -78 -41) -78]
Test Case: 894 | Input/Output: [(19 34 31 3) 3]
Test Case: 895 | Input/Output: [(-50 -97 78 60) -97]
Test Case: 896 | Input/Output: [(16 -77 27 -77) -77]
Test Case: 897 | Input/Output: [(74 -94 54 -82) -94]
Test Case: 898 | Input/Output: [(-36 20 -43 -36) -43]
Test Case: 899 | Input/Output: [(20 -3 21 5) -3]
Test Case: 900 | Input/Output: [(-19 -6 1 -76) -76]
Test Case: 901 | Input/Output: [(80 -48 63 43) -48]
Test Case: 902 | Input/Output: [(-5 -95 -67 48) -95]
Test Case: 903 | Input/Output: [(25 -72 21 -58) -72]
Test Case: 904 | Input/Output: [(-46 -76 63 11) -76]
Test Case: 905 | Input/Output: [(-48 -90 50 79) -90]
Test Case: 906 | Input/Output: [(-4 -70 -68 -58) -70]
Test Case: 907 | Input/Output: [(57 -40 84 55) -40]
Test Case: 908 | Input/Output: [(-98 32 60 44) -98]
Test Case: 909 | Input/Output: [(-56 2 -53 -77) -77]
Test Case: 910 | Input/Output: [(-47 -66 -10 11) -66]
Test Case: 911 | Input/Output: [(66 19 -48 -46) -48]
Test Case: 912 | Input/Output: [(-25 -86 70 -69) -86]
Test Case: 913 | Input/Output: [(40 -73 79 -41) -73]
Test Case: 914 | Input/Output: [(73 -85 -16 -24) -85]
Test Case: 915 | Input/Output: [(-26 -9 71 17) -26]
Test Case: 916 | Input/Output: [(-19 -85 -24 -88) -88]
Test Case: 917 | Input/Output: [(-95 -5 29 -43) -95]
Test Case: 918 | Input/Output: [(32 85 -15 -80) -80]
Test Case: 919 | Input/Output: [(-1 22 50 68) -1]
Test Case: 920 | Input/Output: [(-41 -33 49 -54) -54]
Test Case: 921 | Input/Output: [(-21 51 84 32) -21]
Test Case: 922 | Input/Output: [(-57 5 -50 22) -57]
Test Case: 923 | Input/Output: [(-10 -43 -28 0) -43]
Test Case: 924 | Input/Output: [(70 14 -30 -12) -30]
Test Case: 925 | Input/Output: [(-40 7 36 -45) -45]
Test Case: 926 | Input/Output: [(-85 -83 34 89) -85]
Test Case: 927 | Input/Output: [(-78 -76 89 34) -78]
Test Case: 928 | Input/Output: [(14 -84 -12 -87) -87]
Test Case: 929 | Input/Output: [(91 18 31 -22) -22]
Test Case: 930 | Input/Output: [(40 66 -99 39) -99]
Test Case: 931 | Input/Output: [(-75 -51 55 -89) -89]
Test Case: 932 | Input/Output: [(-89 26 40 -8) -89]
Test Case: 933 | Input/Output: [(70 28 -82 47) -82]
Test Case: 934 | Input/Output: [(87 23 3 57) 3]
Test Case: 935 | Input/Output: [(-20 73 90 -70) -70]
Test Case: 936 | Input/Output: [(-8 17 63 -74) -74]
Test Case: 937 | Input/Output: [(-46 -30 2 -99) -99]
Test Case: 938 | Input/Output: [(-96 -82 97 -13) -96]
Test Case: 939 | Input/Output: [(47 26 75 18) 18]
Test Case: 940 | Input/Output: [(4 5 13 22) 4]
Test Case: 941 | Input/Output: [(37 70 -53 -67) -67]
Test Case: 942 | Input/Output: [(20 69 59 49) 20]
Test Case: 943 | Input/Output: [(6 -67 -1 35) -67]
Test Case: 944 | Input/Output: [(-44 -66 8 -28) -66]
Test Case: 945 | Input/Output: [(53 -63 -86 87) -86]
Test Case: 946 | Input/Output: [(25 -2 -85 -63) -85]
Test Case: 947 | Input/Output: [(83 8 20 -13) -13]
Test Case: 948 | Input/Output: [(-3 100 35 -2) -3]
Test Case: 949 | Input/Output: [(-65 -89 -70 -96) -96]
Test Case: 950 | Input/Output: [(77 60 29 -85) -85]
Test Case: 951 | Input/Output: [(19 -65 91 45) -65]
Test Case: 952 | Input/Output: [(-51 95 -38 -80) -80]
Test Case: 953 | Input/Output: [(-30 -21 -83 91) -83]
Test Case: 954 | Input/Output: [(-12 -3 78 66) -12]
Test Case: 955 | Input/Output: [(-8 27 88 -47) -47]
Test Case: 956 | Input/Output: [(-50 96 -60 66) -60]
Test Case: 957 | Input/Output: [(-94 -90 11 1) -94]
Test Case: 958 | Input/Output: [(-39 -29 82 49) -39]
Test Case: 959 | Input/Output: [(29 -65 57 43) -65]
Test Case: 960 | Input/Output: [(44 -86 58 -3) -86]
Test Case: 961 | Input/Output: [(59 14 40 46) 14]
Test Case: 962 | Input/Output: [(35 -57 -4 -84) -84]
Test Case: 963 | Input/Output: [(4 19 16 86) 4]
Test Case: 964 | Input/Output: [(58 -15 95 -78) -78]
Test Case: 965 | Input/Output: [(12 -52 -30 -73) -73]
Test Case: 966 | Input/Output: [(-12 86 28 35) -12]
Test Case: 967 | Input/Output: [(-67 98 -77 23) -77]
Test Case: 968 | Input/Output: [(-80 -42 -6 34) -80]
Test Case: 969 | Input/Output: [(11 8 -50 -26) -50]
Test Case: 970 | Input/Output: [(-8 -97 -35 58) -97]
Test Case: 971 | Input/Output: [(67 8 23 61) 8]
Test Case: 972 | Input/Output: [(-96 31 -50 53) -96]
Test Case: 973 | Input/Output: [(5 70 75 -47) -47]
Test Case: 974 | Input/Output: [(99 -33 -23 -1) -33]
Test Case: 975 | Input/Output: [(75 26 -70 8) -70]
Test Case: 976 | Input/Output: [(-93 1 -20 -28) -93]
Test Case: 977 | Input/Output: [(-1 -97 -19 -13) -97]
Test Case: 978 | Input/Output: [(-74 -28 18 -76) -76]
Test Case: 979 | Input/Output: [(-85 -73 13 52) -85]
Test Case: 980 | Input/Output: [(87 4 -62 25) -62]
Test Case: 981 | Input/Output: [(-84 -44 5 7) -84]
Test Case: 982 | Input/Output: [(52 79 26 -56) -56]
Test Case: 983 | Input/Output: [(-74 -92 67 -42) -92]
Test Case: 984 | Input/Output: [(-60 -83 70 -69) -83]
Test Case: 985 | Input/Output: [(7 -85 20 78) -85]
Test Case: 986 | Input/Output: [(-20 -41 2 -47) -47]
Test Case: 987 | Input/Output: [(67 55 -93 -46) -93]
Test Case: 988 | Input/Output: [(49 51 -23 -8) -23]
Test Case: 989 | Input/Output: [(-15 -65 -56 -85) -85]
Test Case: 990 | Input/Output: [(-92 -24 72 -50) -92]
Test Case: 991 | Input/Output: [(27 20 21 97) 20]
Test Case: 992 | Input/Output: [(-40 -32 27 47) -40]
Test Case: 993 | Input/Output: [(-66 79 -55 -75) -75]
Test Case: 994 | Input/Output: [(66 60 56 -65) -65]
Test Case: 995 | Input/Output: [(-92 -24 46 51) -92]
Test Case: 996 | Input/Output: [(19 46 5 -44) -44]
Test Case: 997 | Input/Output: [(-88 -16 36 38) -88]
Test Case: 998 | Input/Output: [(-14 -41 10 -57) -57]
Test Case: 999 | Input/Output: [(-18 76 100 -85) -85]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -87 -54 107 -57 55 116 -88 -24 23 -127 -41 51 -117 22 -15 -28
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[12 -68 -68 -68] -68] [[-12 -12 -11 -12] -12] [[-5 -5 -5 -100] -100] [[-26 -26 -26 -84] -84] [[-53 -53 -66 -53] -66] [[56 -43 56 56] -43] [[-92 -92 -55 -92] -92] [[7 77 7 7] 7] [[-11 -11 -11 -80] -80] [[-51 -74 -51 -51] -74] [(-47 -47 -47 -47) -47] [(-13 -13 -13 -13) -13] [(20 20 20 20) 20] [(-26 -26 -26 -26) -26] [(76 76 76 76) 76] [(59 26 5 36) 5] [(16 52 36 48) 16] [(30 68 14 12) 12] [(59 17 100 21) 17] [(37 82 13 100) 13] [(72 91 71 96) 71] [(81 8 69 45) 8] [(2 13 1 36) 1] [(71 68 90 80) 68] [(33 58 98 1) 1] [(59 74 38 71) 38] [(89 20 69 18) 18] [(32 25 21 30) 21] [(71 49 50 41) 41] [(12 21 100 58) 12] [(65 39 68 3) 3] [(33 47 19 29) 19] [(33 57 53 19) 19] [(49 46 18 7) 7] [(60 59 34 52) 34] [(-58 -78 -80 80) -80] [(63 -14 46 58) -14] [(-20 -84 47 94) -84] [(-75 -58 -63 88) -75] [(1 -68 -46 -70) -70] [(33 -69 -59 -75) -75] [(48 32 -60 -11) -60] [(-70 87 -98 0) -98] [(-72 -66 48 -94) -94] [(50 59 -16 59) -16] [(-55 83 -10 83) -55] [(13 68 54 -55) -55] [(55 -76 22 11) -76] [(16 44 -4 43) -4] [(-5 -90 -53 21) -90] [(-12 -39 -33 -34) -39] [(-79 65 -52 77) -79] [(-42 -13 -29 -72) -72] [(-85 -58 90 98) -85] [(-80 -80 97 -91) -91] [(-20 -58 -33 50) -58] [(54 34 43 83) 34] [(38 90 -6 37) -6] [(84 -70 -70 -74) -74] [(-28 12 -47 -30) -47] [(68 -85 62 -84) -85] [(-68 91 53 91) -68] [(-91 67 6 -4) -91] [(-25 97 -78 85) -78] [(9 -95 72 -37) -95] [(-84 4 -91 45) -91] [(60 10 59 -25) -25] [(-23 -92 94 6) -92] [(60 -63 68 5) -63] [(-10 -89 70 4) -89] [(100 70 -44 -29) -44] [(51 68 -66 -48) -66] [(-51 98 -67 24) -67] [(-21 61 -69 -84) -84] [(-68 84 24 -40) -68] [(40 41 30 -26) -26] [(53 -92 45 -19) -92] [(32 -20 -40 11) -40] [(-91 -75 92 -22) -91] [(22 -56 -84 -56) -84] [(-37 -54 44 85) -54] [(91 73 -14 -36) -36] [(-17 0 -20 38) -20] [(90 87 -54 92) -54] [(-6 80 -54 75) -54] [(-71 -98 25 -65) -98] [(-93 50 -53 -95) -95] [(-39 -65 70 -27) -65] [(-68 4 4 -55) -68] [(-36 95 19 35) -36] [(26 19 82 -14) -14] [(79 -65 -98 60) -98] [(-22 87 -64 40) -64] [(-76 -15 77 27) -76] [(58 68 29 23) 23])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 669
Test mean error for best: 0.66900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -11                
Correct output: -100                | Program output: -5                 
Correct output: -84                 | Program output: -26                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: 56                 
Correct output: -92                 | Program output: -55                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -11                
Correct output: -74                 | Program output: -51                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 36                 
Correct output: 12                  | Program output: 14                 
Correct output: 17                  | Program output: 100                
Correct output: 13                  | Program output: 13                 
Correct output: 71                  | Program output: 71                 
Correct output: 8                   | Program output: 69                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 90                 
Correct output: 1                   | Program output: 98                 
Correct output: 38                  | Program output: 38                 
Correct output: 18                  | Program output: 69                 
Correct output: 21                  | Program output: 21                 
Correct output: 41                  | Program output: 50                 
Correct output: 12                  | Program output: 100                
Correct output: 3                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 53                 
Correct output: 7                   | Program output: 18                 
Correct output: 34                  | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -14                 | Program output: 46                 
Correct output: -84                 | Program output: 47                 
Correct output: -75                 | Program output: -63                
Correct output: -70                 | Program output: -46                
Correct output: -75                 | Program output: -59                
Correct output: -60                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: 48                 
Correct output: -16                 | Program output: -16                
Correct output: -55                 | Program output: -10                
Correct output: -55                 | Program output: 54                 
Correct output: -76                 | Program output: 22                 
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -53                
Correct output: -39                 | Program output: -33                
Correct output: -79                 | Program output: -52                
Correct output: -72                 | Program output: -29                
Correct output: -85                 | Program output: 90                 
Correct output: -91                 | Program output: 97                 
Correct output: -58                 | Program output: -33                
Correct output: 34                  | Program output: 43                 
Correct output: -6                  | Program output: -6                 
Correct output: -74                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: -85                 | Program output: 62                 
Correct output: -68                 | Program output: 53                 
Correct output: -91                 | Program output: 6                  
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: 72                 
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: 59                 
Correct output: -92                 | Program output: 94                 
Correct output: -63                 | Program output: 68                 
Correct output: -89                 | Program output: 70                 
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -69                
Correct output: -68                 | Program output: 24                 
Correct output: -26                 | Program output: 30                 
Correct output: -92                 | Program output: 45                 
Correct output: -40                 | Program output: -40                
Correct output: -91                 | Program output: 92                 
Correct output: -84                 | Program output: -84                
Correct output: -54                 | Program output: 44                 
Correct output: -36                 | Program output: -14                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: 25                 
Correct output: -95                 | Program output: -53                
Correct output: -65                 | Program output: 70                 
Correct output: -68                 | Program output: 4                  
Correct output: -36                 | Program output: 19                 
Correct output: -14                 | Program output: 82                 
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: 77                 
Correct output: 23                  | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_sub} {:close 0, :instruction tagged_170} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_dup_times} {:close 2, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yankdup} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction 7} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_add} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_exec} {:close 0, :instruction integer_dup_times})
Lexicase best program: (print_integer in3 boolean_swap integer_sub tagged_170 exec_do*range (boolean_and integer_shove) integer_stackdepth integer_div integer_yankdup integer_gte integer_yank exec_rot (integer_yankdup) (exec_dup_times (integer_gt)) (integer_eq print_integer) integer_dup_items exec_yankdup integer_yankdup boolean_dup integer_add boolean_empty boolean_or exec_stackdepth integer_shove boolean_or 7 boolean_or boolean_shove integer_fromboolean exec_pop (boolean_invert_first_then_and exec_rot (integer_lt boolean_pop boolean_frominteger integer_yank exec_dup (exec_stackdepth integer_empty boolean_dup exec_empty) exec_dup (exec_rot () (integer_eq integer_sub) (exec_s () (integer_min integer_yank exec_dup_items) (integer_pop) integer_swap exec_do*count () boolean_invert_second_then_and integer_add) boolean_empty)) (boolean_xor boolean_eq print_exec () integer_dup_times) ()))
Lexicase best errors: [1 0 0 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 83
Percent parens: 0.241
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_sub} {:close 0, :instruction tagged_170} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_dup_times} {:close 2, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yankdup} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction 7} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_add} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_exec} {:close 0, :instruction integer_dup_times})
Zero cases best program: (print_integer in3 boolean_swap integer_sub tagged_170 exec_do*range (boolean_and integer_shove) integer_stackdepth integer_div integer_yankdup integer_gte integer_yank exec_rot (integer_yankdup) (exec_dup_times (integer_gt)) (integer_eq print_integer) integer_dup_items exec_yankdup integer_yankdup boolean_dup integer_add boolean_empty boolean_or exec_stackdepth integer_shove boolean_or 7 boolean_or boolean_shove integer_fromboolean exec_pop (boolean_invert_first_then_and exec_rot (integer_lt boolean_pop boolean_frominteger integer_yank exec_dup (exec_stackdepth integer_empty boolean_dup exec_empty) exec_dup (exec_rot () (integer_eq integer_sub) (exec_s () (integer_min integer_yank exec_dup_items) (integer_pop) integer_swap exec_do*count () boolean_invert_second_then_and integer_add) boolean_empty)) (boolean_xor boolean_eq print_exec () integer_dup_times) ()))
Zero cases best errors: [1 0 0 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 83
Percent parens: 0.241
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 3 2 1000 3 1 2 1000 2 2)
Population mean number of elite cases: 2.02
Count of perfect (error zero) individuals by case: (1 3 2 0 3 1 2 0 2 2)
Population mean number of perfect (error zero) cases: 0.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_max} {:close 1, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult})
Best program: (boolean_dup_items boolean_flush exec_shove () integer_dup boolean_frominteger integer_pop exec_eq print_integer integer_add integer_dup_times exec_shove (in3 integer_gt print_integer exec_stackdepth exec_while () integer_add exec_empty boolean_frominteger integer_inc exec_eq boolean_or) integer_lte integer_inc print_integer exec_do*while (exec_eq integer_rot in2 exec_eq boolean_yank exec_flush boolean_dup_times boolean_yankdup boolean_not) exec_shove (boolean_eq) boolean_rot boolean_shove integer_max exec_if () (exec_when (integer_mult)))
Errors: [1 0 0 1 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 43
Size: 52
Percent parens: 0.173
--- Population Statistics ---
Average total errors in population: 9.984
Median total errors in population: 10
Error averages by case: (0.999 0.997 0.998 1.0 0.997 0.999 0.998 1.0 0.998 0.998)
Error minima by case: (0 0 0 1 0 0 0 1 0 0)
Average genome size in population (length): 49.574
Average program size in population (points): 68.617
Average percent parens in population: 0.282
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.27
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 487385
--- Timings ---
Current time: 1559584348529 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  4.1%
Reproduction:         1.0 seconds, 35.9%
Fitness Testing:      1.6 seconds, 60.0%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 669
Test mean error for best: 0.66900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -11                
Correct output: -100                | Program output: -5                 
Correct output: -84                 | Program output: -26                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: 56                 
Correct output: -92                 | Program output: -55                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -11                
Correct output: -74                 | Program output: -51                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 36                 
Correct output: 12                  | Program output: 14                 
Correct output: 17                  | Program output: 100                
Correct output: 13                  | Program output: 13                 
Correct output: 71                  | Program output: 71                 
Correct output: 8                   | Program output: 69                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 90                 
Correct output: 1                   | Program output: 98                 
Correct output: 38                  | Program output: 38                 
Correct output: 18                  | Program output: 69                 
Correct output: 21                  | Program output: 21                 
Correct output: 41                  | Program output: 50                 
Correct output: 12                  | Program output: 100                
Correct output: 3                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 53                 
Correct output: 7                   | Program output: 18                 
Correct output: 34                  | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -14                 | Program output: 46                 
Correct output: -84                 | Program output: 47                 
Correct output: -75                 | Program output: -63                
Correct output: -70                 | Program output: -46                
Correct output: -75                 | Program output: -59                
Correct output: -60                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: 48                 
Correct output: -16                 | Program output: -16                
Correct output: -55                 | Program output: -10                
Correct output: -55                 | Program output: 54                 
Correct output: -76                 | Program output: 22                 
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -53                
Correct output: -39                 | Program output: -33                
Correct output: -79                 | Program output: -52                
Correct output: -72                 | Program output: -29                
Correct output: -85                 | Program output: 90                 
Correct output: -91                 | Program output: 97                 
Correct output: -58                 | Program output: -33                
Correct output: 34                  | Program output: 43                 
Correct output: -6                  | Program output: -6                 
Correct output: -74                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: -85                 | Program output: 62                 
Correct output: -68                 | Program output: 53                 
Correct output: -91                 | Program output: 6                  
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: 72                 
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: 59                 
Correct output: -92                 | Program output: 94                 
Correct output: -63                 | Program output: 68                 
Correct output: -89                 | Program output: 70                 
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -69                
Correct output: -68                 | Program output: 24                 
Correct output: -26                 | Program output: 30                 
Correct output: -92                 | Program output: 45                 
Correct output: -40                 | Program output: -40                
Correct output: -91                 | Program output: 92                 
Correct output: -84                 | Program output: -84                
Correct output: -54                 | Program output: 44                 
Correct output: -36                 | Program output: -14                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: 25                 
Correct output: -95                 | Program output: -53                
Correct output: -65                 | Program output: 70                 
Correct output: -68                 | Program output: 4                  
Correct output: -36                 | Program output: 19                 
Correct output: -14                 | Program output: 82                 
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: 77                 
Correct output: 23                  | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Lexicase best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank exec_s_when_autoconstructing (in3 boolean_yank) (integer_shove boolean_not) (integer_pop integer_shove exec_yankdup) boolean_swap exec_yankdup integer_yank boolean_dup boolean_invert_first_then_and boolean_flush integer_dup_items exec_empty integer_dup integer_eq integer_pop integer_max integer_mult in2 exec_do*while () in3 integer_swap boolean_dup exec_do*count (boolean_yank) print_integer boolean_dup exec_pop (exec_do*count ()))
Lexicase best errors: [1 1 0 1 0 1 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 45
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Zero cases best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank exec_s_when_autoconstructing (in3 boolean_yank) (integer_shove boolean_not) (integer_pop integer_shove exec_yankdup) boolean_swap exec_yankdup integer_yank boolean_dup boolean_invert_first_then_and boolean_flush integer_dup_items exec_empty integer_dup integer_eq integer_pop integer_max integer_mult in2 exec_do*while () in3 integer_swap boolean_dup exec_do*count (boolean_yank) print_integer boolean_dup exec_pop (exec_do*count ()))
Zero cases best errors: [1 1 0 1 0 1 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 45
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (537 1000 220 1000 220 546 220 108 547 108)
Population mean number of elite cases: 4.51
Count of perfect (error zero) individuals by case: (537 0 220 0 220 546 220 108 547 108)
Population mean number of perfect (error zero) cases: 2.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_sub} {:close 0, :instruction tagged_170} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_dup_times} {:close 2, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yankdup} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction 7} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_add} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_exec} {:close 0, :instruction integer_dup_times})
Best program: (print_integer in3 boolean_swap integer_sub tagged_170 exec_do*range (boolean_and integer_shove) integer_stackdepth integer_div integer_yankdup integer_gte integer_yank exec_rot (integer_yankdup) (exec_dup_times (integer_gt)) (integer_eq print_integer) integer_dup_items exec_yankdup integer_yankdup boolean_dup integer_add boolean_empty boolean_or exec_stackdepth integer_shove boolean_or 7 boolean_or boolean_shove integer_fromboolean exec_pop (boolean_invert_first_then_and exec_rot (integer_lt boolean_pop boolean_frominteger integer_yank exec_dup (exec_stackdepth integer_empty boolean_dup exec_empty) exec_dup (exec_rot () (integer_eq integer_sub) (exec_s () (integer_min integer_yank exec_dup_items) (integer_pop) integer_swap exec_do*count () boolean_invert_second_then_and integer_add) boolean_empty)) (boolean_xor boolean_eq print_exec () integer_dup_times) ()))
Errors: [0 1 1 1 1 0 1 1 0 1]
Total: 7
Mean: 0.7
Genome size: 63
Size: 83
Percent parens: 0.241
--- Population Statistics ---
Average total errors in population: 7.494
Median total errors in population: 7
Error averages by case: (0.463 1.0 0.78 1.0 0.78 0.454 0.78 0.892 0.453 0.892)
Error minima by case: (0 1 0 1 0 0 0 0 0 0)
Average genome size in population (length): 50.128
Average program size in population (points): 64.398
Average percent parens in population: 0.214
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.506
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 156
Genome diversity (% unique genomes):	 0.545
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 160
Syntactic diversity (% unique Push programs):	 0.527
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1333121
--- Timings ---
Current time: 1559584351179 milliseconds
Total Time:           6.2 seconds
Initialization:       0.1 seconds,  1.8%
Reproduction:         2.5 seconds, 40.3%
Fitness Testing:      2.4 seconds, 38.8%
Report:               1.2 seconds, 19.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 671
Test mean error for best: 0.67100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -11                
Correct output: -100                | Program output: -5                 
Correct output: -84                 | Program output: -26                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: 56                 
Correct output: -92                 | Program output: -55                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -11                
Correct output: -74                 | Program output: -51                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 36                 
Correct output: 12                  | Program output: 14                 
Correct output: 17                  | Program output: 100                
Correct output: 13                  | Program output: 13                 
Correct output: 71                  | Program output: 71                 
Correct output: 8                   | Program output: 69                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 90                 
Correct output: 1                   | Program output: 98                 
Correct output: 38                  | Program output: 38                 
Correct output: 18                  | Program output: 69                 
Correct output: 21                  | Program output: 21                 
Correct output: 41                  | Program output: 50                 
Correct output: 12                  | Program output: 100                
Correct output: 3                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 53                 
Correct output: 7                   | Program output: 18                 
Correct output: 34                  | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -14                 | Program output: 46                 
Correct output: -84                 | Program output: 47                 
Correct output: -75                 | Program output: -63                
Correct output: -70                 | Program output: -46                
Correct output: -75                 | Program output: -59                
Correct output: -60                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: 48                 
Correct output: -16                 | Program output: -16                
Correct output: -55                 | Program output: -10                
Correct output: -55                 | Program output: 54                 
Correct output: -76                 | Program output: 22                 
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -53                
Correct output: -39                 | Program output: -33                
Correct output: -79                 | Program output: -52                
Correct output: -72                 | Program output: -29                
Correct output: -85                 | Program output: 90                 
Correct output: -91                 | Program output: 97                 
Correct output: -58                 | Program output: -33                
Correct output: 34                  | Program output: 43                 
Correct output: -6                  | Program output: -6                 
Correct output: -74                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: -85                 | Program output: 62                 
Correct output: -68                 | Program output: 53                 
Correct output: -91                 | Program output: 6                  
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: 72                 
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: 59                 
Correct output: -92                 | Program output: 94                 
Correct output: -63                 | Program output: 68                 
Correct output: -89                 | Program output: 70                 
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -69                
Correct output: -68                 | Program output: 24                 
Correct output: -26                 | Program output: 30                 
Correct output: -92                 | Program output: 45                 
Correct output: -40                 | Program output: -40                
Correct output: -91                 | Program output: 92                 
Correct output: -84                 | Program output: -84                
Correct output: -54                 | Program output: 44                 
Correct output: -36                 | Program output: -14                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: 25                 
Correct output: -95                 | Program output: -53                
Correct output: -65                 | Program output: 70                 
Correct output: -68                 | Program output: 44                 
Correct output: -36                 | Program output: 19                 
Correct output: -14                 | Program output: 82                 
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: 77                 
Correct output: 23                  | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_sub} {:close 0, :instruction tagged_170} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_dup_times} {:close 2, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yankdup} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction 7} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_add} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_exec} {:close 0, :instruction integer_dup_times})
Lexicase best program: (print_integer in3 boolean_swap integer_sub tagged_170 exec_do*range (boolean_and integer_shove) integer_stackdepth integer_div integer_yankdup integer_gte integer_yank exec_rot (integer_yankdup) (exec_dup_times (integer_gt)) (integer_eq print_integer) integer_dup_items exec_yankdup integer_yankdup boolean_dup integer_add boolean_empty boolean_or exec_stackdepth integer_shove boolean_or 7 boolean_or boolean_shove integer_fromboolean exec_pop (boolean_invert_first_then_and exec_rot (integer_lt boolean_pop boolean_frominteger integer_yank exec_dup (exec_stackdepth integer_empty boolean_dup exec_s () (integer_min integer_yank exec_dup_items) (integer_pop) integer_swap exec_do*count () boolean_invert_second_then_and integer_add) boolean_empty) () (boolean_xor boolean_eq print_exec () integer_dup_times)))
Lexicase best errors: [1 0 0 1 1 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 74
Percent parens: 0.216
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_sub} {:close 0, :instruction tagged_170} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_dup_times} {:close 2, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yankdup} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction 7} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_add} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_exec} {:close 0, :instruction integer_dup_times})
Zero cases best program: (print_integer in3 boolean_swap integer_sub tagged_170 exec_do*range (boolean_and integer_shove) integer_stackdepth integer_div integer_yankdup integer_gte integer_yank exec_rot (integer_yankdup) (exec_dup_times (integer_gt)) (integer_eq print_integer) integer_dup_items exec_yankdup integer_yankdup boolean_dup integer_add boolean_empty boolean_or exec_stackdepth integer_shove boolean_or 7 boolean_or boolean_shove integer_fromboolean exec_pop (boolean_invert_first_then_and exec_rot (integer_lt boolean_pop boolean_frominteger integer_yank exec_dup (exec_stackdepth integer_empty boolean_dup exec_s () (integer_min integer_yank exec_dup_items) (integer_pop) integer_swap exec_do*count () boolean_invert_second_then_and integer_add) boolean_empty) () (boolean_xor boolean_eq print_exec () integer_dup_times)))
Zero cases best errors: [1 0 0 1 1 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 74
Percent parens: 0.216
--- Lexicase Population Statistics ---
Count of elite individuals by case: (249 304 304 1000 2 870 302 322 322 304)
Population mean number of elite cases: 3.98
Count of perfect (error zero) individuals by case: (249 304 304 0 2 870 302 322 322 304)
Population mean number of perfect (error zero) cases: 2.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_sub} {:close 0, :instruction tagged_170} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_eq} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_max} {:close 1, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult})
Best program: (print_integer in3 boolean_swap integer_sub tagged_170 exec_do*range (boolean_and integer_shove) integer_dup_times exec_shove (in3 integer_gt print_integer exec_stackdepth exec_while () integer_add exec_empty boolean_frominteger integer_inc exec_eq boolean_or) integer_lte integer_inc print_integer exec_do*while (exec_eq integer_rot in2 exec_eq boolean_yank exec_flush exec_s_when_autoconstructing (boolean_yankdup boolean_not) (exec_shove (boolean_eq) boolean_rot) (boolean_shove integer_max) exec_if () (exec_when (integer_mult))))
Errors: [1 0 0 1 1 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 42
Size: 54
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 7.021
Median total errors in population: 7
Error averages by case: (0.751 0.696 0.696 1.0 0.998 0.13 0.698 0.678 0.678 0.696)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 48.596
Average program size in population (points): 62.987
Average percent parens in population: 0.220
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.0245
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 148
Genome diversity (% unique genomes):	 0.689
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 155
Syntactic diversity (% unique Push programs):	 0.668
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 2085234
--- Timings ---
Current time: 1559584354122 milliseconds
Total Time:           9.1 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.5 seconds, 49.1%
Fitness Testing:      3.0 seconds, 33.0%
Report:               1.5 seconds, 16.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -53                
Correct output: -43                 | Program output: 56                 
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: -51                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 36                 
Correct output: 16                  | Program output: 48                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 21                 
Correct output: 13                  | Program output: 100                
Correct output: 71                  | Program output: 96                 
Correct output: 8                   | Program output: 45                 
Correct output: 1                   | Program output: 36                 
Correct output: 68                  | Program output: 80                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 71                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 30                 
Correct output: 41                  | Program output: 41                 
Correct output: 12                  | Program output: 58                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 29                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 34                  | Program output: 52                 
Correct output: -80                 | Program output: 80                 
Correct output: -14                 | Program output: 58                 
Correct output: -84                 | Program output: 94                 
Correct output: -75                 | Program output: 88                 
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -11                
Correct output: -98                 | Program output: 0                  
Correct output: -94                 | Program output: -94                
Correct output: -16                 | Program output: 59                 
Correct output: -55                 | Program output: 83                 
Correct output: -55                 | Program output: -55                
Correct output: -76                 | Program output: 11                 
Correct output: -4                  | Program output: 43                 
Correct output: -90                 | Program output: 21                 
Correct output: -39                 | Program output: -34                
Correct output: -79                 | Program output: 77                 
Correct output: -72                 | Program output: -72                
Correct output: -85                 | Program output: 98                 
Correct output: -91                 | Program output: -91                
Correct output: -58                 | Program output: 50                 
Correct output: 34                  | Program output: 83                 
Correct output: -6                  | Program output: 37                 
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -30                
Correct output: -85                 | Program output: -84                
Correct output: -68                 | Program output: 91                 
Correct output: -91                 | Program output: -4                 
Correct output: -78                 | Program output: 85                 
Correct output: -95                 | Program output: -37                
Correct output: -91                 | Program output: 45                 
Correct output: -25                 | Program output: -25                
Correct output: -92                 | Program output: 6                  
Correct output: -63                 | Program output: 5                  
Correct output: -89                 | Program output: 4                  
Correct output: -44                 | Program output: -29                
Correct output: -66                 | Program output: -48                
Correct output: -67                 | Program output: 24                 
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -40                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -19                
Correct output: -40                 | Program output: 11                 
Correct output: -91                 | Program output: -22                
Correct output: -84                 | Program output: -56                
Correct output: -54                 | Program output: 85                 
Correct output: -36                 | Program output: -36                
Correct output: -20                 | Program output: 38                 
Correct output: -54                 | Program output: 92                 
Correct output: -54                 | Program output: 75                 
Correct output: -98                 | Program output: -65                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -27                
Correct output: -68                 | Program output: -55                
Correct output: -36                 | Program output: 35                 
Correct output: -14                 | Program output: -14                
Correct output: -98                 | Program output: 60                 
Correct output: -64                 | Program output: 40                 
Correct output: -76                 | Program output: 27                 
Correct output: 23                  | Program output: 23                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_add})
Lexicase best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank exec_s_when_autoconstructing (in3 boolean_yank integer_shove boolean_not) (integer_pop integer_shove exec_yankdup) (boolean_swap exec_do*times (exec_dup_times () integer_dup_items boolean_shove boolean_dup_items) integer_lt exec_dup_times (integer_eq in4 print_integer) integer_mult integer_dup_times integer_dup_items boolean_xor integer_lte) integer_div integer_lte exec_do*while () integer_div exec_y (exec_empty exec_do*range () integer_min boolean_xor exec_do*range ()) exec_do*count (print_exec (integer_eq in3 exec_yankdup) integer_mod exec_s (boolean_dup_times boolean_pop exec_when (boolean_stackdepth boolean_rot integer_eq boolean_eq integer_flush exec_if (print_boolean integer_add) ())) () ()))
Lexicase best errors: [1 0 0 1 0 0 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 76
Percent parens: 0.263
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_add})
Zero cases best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank exec_s_when_autoconstructing (in3 boolean_yank integer_shove boolean_not) (integer_pop integer_shove exec_yankdup) (boolean_swap exec_do*times (exec_dup_times () integer_dup_items boolean_shove boolean_dup_items) integer_lt exec_dup_times (integer_eq in4 print_integer) integer_mult integer_dup_times integer_dup_items boolean_xor integer_lte) integer_div integer_lte exec_do*while () integer_div exec_y (exec_empty exec_do*range () integer_min boolean_xor exec_do*range ()) exec_do*count (print_exec (integer_eq in3 exec_yankdup) integer_mod exec_s (boolean_dup_times boolean_pop exec_when (boolean_stackdepth boolean_rot integer_eq boolean_eq integer_flush exec_if (print_boolean integer_add) ())) () ()))
Zero cases best errors: [1 0 0 1 0 0 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 76
Percent parens: 0.263
--- Lexicase Population Statistics ---
Count of elite individuals by case: (209 430 742 7 430 109 109 535 208 116)
Population mean number of elite cases: 2.89
Count of perfect (error zero) individuals by case: (209 430 742 7 430 109 109 535 208 116)
Population mean number of perfect (error zero) cases: 2.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction -91} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction boolean_pop} {:close 1, :instruction tagged_601} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_yank})
Best program: (in4 print_integer exec_shove (-91 boolean_not) exec_do*while (in1) integer_eq boolean_empty boolean_frominteger boolean_pop tagged_601 integer_sub boolean_dup_times integer_gte integer_dup_times integer_stackdepth boolean_eq integer_empty boolean_empty exec_do*times (exec_if (boolean_shove exec_yankdup integer_gt) (exec_when (integer_max integer_min integer_div integer_inc exec_pop (integer_pop exec_s_when_autoconstructing () (exec_pop (exec_rot (integer_eq boolean_rot boolean_not integer_dec integer_shove in2 exec_yank) () ())) ())))))
Errors: [1 0 0 1 0 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 42
Size: 57
Percent parens: 0.263
--- Population Statistics ---
Average total errors in population: 7.105
Median total errors in population: 8
Error averages by case: (0.791 0.57 0.258 0.993 0.57 0.891 0.891 0.465 0.792 0.884)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.972
Average program size in population (points): 58.839
Average percent parens in population: 0.211
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.55375
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 58
Genome diversity (% unique genomes):	 0.722
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.698
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2817775
--- Timings ---
Current time: 1559584356703 milliseconds
Total Time:          11.8 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.3 seconds, 53.1%
Fitness Testing:      3.6 seconds, 30.2%
Report:               1.9 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 669
Test mean error for best: 0.66900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -11                
Correct output: -100                | Program output: -5                 
Correct output: -84                 | Program output: -26                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: 56                 
Correct output: -92                 | Program output: -55                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -11                
Correct output: -74                 | Program output: -51                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 36                 
Correct output: 12                  | Program output: 14                 
Correct output: 17                  | Program output: 100                
Correct output: 13                  | Program output: 13                 
Correct output: 71                  | Program output: 71                 
Correct output: 8                   | Program output: 69                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 90                 
Correct output: 1                   | Program output: 98                 
Correct output: 38                  | Program output: 38                 
Correct output: 18                  | Program output: 69                 
Correct output: 21                  | Program output: 21                 
Correct output: 41                  | Program output: 50                 
Correct output: 12                  | Program output: 100                
Correct output: 3                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 53                 
Correct output: 7                   | Program output: 18                 
Correct output: 34                  | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -14                 | Program output: 46                 
Correct output: -84                 | Program output: 47                 
Correct output: -75                 | Program output: -63                
Correct output: -70                 | Program output: -46                
Correct output: -75                 | Program output: -59                
Correct output: -60                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: 48                 
Correct output: -16                 | Program output: -16                
Correct output: -55                 | Program output: -10                
Correct output: -55                 | Program output: 54                 
Correct output: -76                 | Program output: 22                 
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -53                
Correct output: -39                 | Program output: -33                
Correct output: -79                 | Program output: -52                
Correct output: -72                 | Program output: -29                
Correct output: -85                 | Program output: 90                 
Correct output: -91                 | Program output: 97                 
Correct output: -58                 | Program output: -33                
Correct output: 34                  | Program output: 43                 
Correct output: -6                  | Program output: -6                 
Correct output: -74                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: -85                 | Program output: 62                 
Correct output: -68                 | Program output: 53                 
Correct output: -91                 | Program output: 6                  
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: 72                 
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: 59                 
Correct output: -92                 | Program output: 94                 
Correct output: -63                 | Program output: 68                 
Correct output: -89                 | Program output: 70                 
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -69                
Correct output: -68                 | Program output: 24                 
Correct output: -26                 | Program output: 30                 
Correct output: -92                 | Program output: 45                 
Correct output: -40                 | Program output: -40                
Correct output: -91                 | Program output: 92                 
Correct output: -84                 | Program output: -84                
Correct output: -54                 | Program output: 44                 
Correct output: -36                 | Program output: -14                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: 25                 
Correct output: -95                 | Program output: -53                
Correct output: -65                 | Program output: 70                 
Correct output: -68                 | Program output: 4                  
Correct output: -36                 | Program output: 19                 
Correct output: -14                 | Program output: 82                 
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: 77                 
Correct output: 23                  | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Lexicase best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank exec_s_when_autoconstructing () (in3 boolean_yank integer_shove boolean_not) (integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank boolean_dup boolean_invert_first_then_and) boolean_flush integer_dup_items exec_empty integer_dup integer_eq integer_pop integer_max integer_mult in2 exec_do*while () in3 integer_swap boolean_dup exec_y_when_autoconstructing (integer_yankdup) print_integer boolean_dup exec_pop (exec_do*count ()))
Lexicase best errors: [1 0 1 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 45
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Zero cases best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank exec_s_when_autoconstructing () (in3 boolean_yank integer_shove boolean_not) (integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank boolean_dup boolean_invert_first_then_and) boolean_flush integer_dup_items exec_empty integer_dup integer_eq integer_pop integer_max integer_mult in2 exec_do*while () in3 integer_swap boolean_dup exec_y_when_autoconstructing (integer_yankdup) print_integer boolean_dup exec_pop (exec_do*count ()))
Zero cases best errors: [1 0 1 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 45
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (373 9 371 11 8 9 782 127 126 374)
Population mean number of elite cases: 2.19
Count of perfect (error zero) individuals by case: (373 9 371 11 8 9 782 127 126 374)
Population mean number of perfect (error zero) cases: 2.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_740} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction -86} {:close 0, :instruction integer_max} {:close 1, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush})
Best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank exec_s_when_autoconstructing (in3 boolean_yank) (integer_shove boolean_shove) (print_integer exec_k (integer_min integer_dup exec_stackdepth exec_flush tagged_740 boolean_invert_first_then_and) (integer_flush) exec_dup_times (boolean_eq -86 integer_max exec_k () (exec_k (exec_flush) ()))))
Errors: [1 0 1 0 0 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 25
Size: 37
Percent parens: 0.324
--- Population Statistics ---
Average total errors in population: 7.81
Median total errors in population: 8
Error averages by case: (0.627 0.991 0.629 0.989 0.992 0.991 0.218 0.873 0.874 0.626)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.331
Average program size in population (points): 56.901
Average percent parens in population: 0.230
Minimum age in population: 4.0
Maximum age in population: 7.875
Average age in population: 5.907375
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 47
Genome diversity (% unique genomes):	 0.591
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.567
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3313171
--- Timings ---
Current time: 1559584359276 milliseconds
Total Time:          14.4 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         8.2 seconds, 57.2%
Fitness Testing:      3.9 seconds, 27.3%
Report:               2.1 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -68                 | Program output: 12                 
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -5                 
Correct output: -84                 | Program output: -26                
Correct output: -66                 | Program output: -53                
Correct output: -43                 | Program output: 56                 
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -11                
Correct output: -74                 | Program output: -51                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 59                 
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 30                 
Correct output: 17                  | Program output: 59                 
Correct output: 13                  | Program output: 37                 
Correct output: 71                  | Program output: 72                 
Correct output: 8                   | Program output: 81                 
Correct output: 1                   | Program output: 2                  
Correct output: 68                  | Program output: 71                 
Correct output: 1                   | Program output: 33                 
Correct output: 38                  | Program output: 59                 
Correct output: 18                  | Program output: 89                 
Correct output: 21                  | Program output: 32                 
Correct output: 41                  | Program output: 71                 
Correct output: 12                  | Program output: 12                 
Correct output: 3                   | Program output: 65                 
Correct output: 19                  | Program output: 33                 
Correct output: 19                  | Program output: 33                 
Correct output: 7                   | Program output: 49                 
Correct output: 34                  | Program output: 60                 
Correct output: -80                 | Program output: -58                
Correct output: -14                 | Program output: 63                 
Correct output: -84                 | Program output: -20                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: 1                  
Correct output: -75                 | Program output: 33                 
Correct output: -60                 | Program output: 48                 
Correct output: -98                 | Program output: -70                
Correct output: -94                 | Program output: -72                
Correct output: -16                 | Program output: 50                 
Correct output: -55                 | Program output: -55                
Correct output: -55                 | Program output: 13                 
Correct output: -76                 | Program output: 55                 
Correct output: -4                  | Program output: 16                 
Correct output: -90                 | Program output: -5                 
Correct output: -39                 | Program output: -12                
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: -42                
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -80                
Correct output: -58                 | Program output: -20                
Correct output: 34                  | Program output: 54                 
Correct output: -6                  | Program output: 38                 
Correct output: -74                 | Program output: 84                 
Correct output: -47                 | Program output: -28                
Correct output: -85                 | Program output: 68                 
Correct output: -68                 | Program output: -68                
Correct output: -91                 | Program output: -91                
Correct output: -78                 | Program output: -25                
Correct output: -95                 | Program output: 9                  
Correct output: -91                 | Program output: -84                
Correct output: -25                 | Program output: 60                 
Correct output: -92                 | Program output: -23                
Correct output: -63                 | Program output: 60                 
Correct output: -89                 | Program output: -10                
Correct output: -44                 | Program output: 100                
Correct output: -66                 | Program output: 51                 
Correct output: -67                 | Program output: -51                
Correct output: -84                 | Program output: -21                
Correct output: -68                 | Program output: -68                
Correct output: -26                 | Program output: 40                 
Correct output: -92                 | Program output: 53                 
Correct output: -40                 | Program output: 32                 
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: 22                 
Correct output: -54                 | Program output: -37                
Correct output: -36                 | Program output: 91                 
Correct output: -20                 | Program output: -17                
Correct output: -54                 | Program output: 90                 
Correct output: -54                 | Program output: -6                 
Correct output: -98                 | Program output: -71                
Correct output: -95                 | Program output: -93                
Correct output: -65                 | Program output: -39                
Correct output: -68                 | Program output: -68                
Correct output: -36                 | Program output: -36                
Correct output: -14                 | Program output: 26                 
Correct output: -98                 | Program output: 79                 
Correct output: -64                 | Program output: -22                
Correct output: -76                 | Program output: -76                
Correct output: 23                  | Program output: 58                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_706} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction -86} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush})
Lexicase best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank exec_s_when_autoconstructing (in1 boolean_yank) (integer_eq) (integer_fromboolean) integer_add in4 integer_yank print_integer exec_k (integer_min integer_dup exec_stackdepth exec_flush tagged_706 boolean_invert_first_then_and) (integer_flush) exec_dup_times (boolean_eq -86 integer_max exec_k (exec_k (exec_flush) ()) ()))
Lexicase best errors: [0 1 0 0 0 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 40
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_706} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction -86} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush})
Zero cases best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank exec_s_when_autoconstructing (in1 boolean_yank) (integer_eq) (integer_fromboolean) integer_add in4 integer_yank print_integer exec_k (integer_min integer_dup exec_stackdepth exec_flush tagged_706 boolean_invert_first_then_and) (integer_flush) exec_dup_times (boolean_eq -86 integer_max exec_k (exec_k (exec_flush) ()) ()))
Zero cases best errors: [0 1 0 0 0 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 40
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 296 693 881 186 6 391 299 881 186)
Population mean number of elite cases: 3.82
Count of perfect (error zero) individuals by case: (1 296 693 881 186 6 391 299 881 186)
Population mean number of perfect (error zero) cases: 3.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_706} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction -86} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush})
Best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank exec_s_when_autoconstructing (in1 boolean_yank) (integer_eq) (integer_fromboolean) integer_add in4 integer_yank print_integer exec_k (integer_min integer_dup exec_stackdepth exec_flush tagged_706 boolean_invert_first_then_and) (integer_flush) exec_dup_times (boolean_eq -86 integer_max exec_k (exec_k (exec_flush) ()) ()))
Errors: [0 1 0 0 0 1 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 28
Size: 40
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 6.18
Median total errors in population: 6
Error averages by case: (0.999 0.704 0.307 0.119 0.814 0.994 0.609 0.701 0.119 0.814)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.773
Average program size in population (points): 51.915
Average percent parens in population: 0.227
Minimum age in population: 5.5
Maximum age in population: 9.4375
Average age in population: 7.5840625
Median age in population: 7.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 45
Genome diversity (% unique genomes):	 0.573
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.549
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3780148
--- Timings ---
Current time: 1559584361744 milliseconds
Total Time:          16.9 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:        10.1 seconds, 60.0%
Fitness Testing:      4.3 seconds, 25.4%
Report:               2.4 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -5                 
Correct output: -84                 | Program output: -26                
Correct output: -66                 | Program output: -53                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 77                 
Correct output: -80                 | Program output: -11                
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 26                 
Correct output: 16                  | Program output: 52                 
Correct output: 12                  | Program output: 68                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 82                 
Correct output: 71                  | Program output: 91                 
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 13                 
Correct output: 68                  | Program output: 68                 
Correct output: 1                   | Program output: 58                 
Correct output: 38                  | Program output: 74                 
Correct output: 18                  | Program output: 20                 
Correct output: 21                  | Program output: 25                 
Correct output: 41                  | Program output: 49                 
Correct output: 12                  | Program output: 21                 
Correct output: 3                   | Program output: 39                 
Correct output: 19                  | Program output: 47                 
Correct output: 19                  | Program output: 57                 
Correct output: 7                   | Program output: 46                 
Correct output: 34                  | Program output: 59                 
Correct output: -80                 | Program output: -78                
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -58                
Correct output: -70                 | Program output: -68                
Correct output: -75                 | Program output: -69                
Correct output: -60                 | Program output: 32                 
Correct output: -98                 | Program output: 87                 
Correct output: -94                 | Program output: -66                
Correct output: -16                 | Program output: 59                 
Correct output: -55                 | Program output: 83                 
Correct output: -55                 | Program output: 68                 
Correct output: -76                 | Program output: -76                
Correct output: -4                  | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -39                 | Program output: -39                
Correct output: -79                 | Program output: 65                 
Correct output: -72                 | Program output: -13                
Correct output: -85                 | Program output: -58                
Correct output: -91                 | Program output: -80                
Correct output: -58                 | Program output: -58                
Correct output: 34                  | Program output: 34                 
Correct output: -6                  | Program output: 90                 
Correct output: -74                 | Program output: -70                
Correct output: -47                 | Program output: 12                 
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: 91                 
Correct output: -91                 | Program output: 67                 
Correct output: -78                 | Program output: 97                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: 4                  
Correct output: -25                 | Program output: 10                 
Correct output: -92                 | Program output: -92                
Correct output: -63                 | Program output: -63                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: 70                 
Correct output: -66                 | Program output: 68                 
Correct output: -67                 | Program output: 98                 
Correct output: -84                 | Program output: 61                 
Correct output: -68                 | Program output: 84                 
Correct output: -26                 | Program output: 41                 
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -20                
Correct output: -91                 | Program output: -75                
Correct output: -84                 | Program output: -56                
Correct output: -54                 | Program output: -54                
Correct output: -36                 | Program output: 73                 
Correct output: -20                 | Program output: 0                  
Correct output: -54                 | Program output: 87                 
Correct output: -54                 | Program output: 80                 
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 4                  
Correct output: -36                 | Program output: 95                 
Correct output: -14                 | Program output: 19                 
Correct output: -98                 | Program output: -65                
Correct output: -64                 | Program output: 87                 
Correct output: -76                 | Program output: -15                
Correct output: 23                  | Program output: 68                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction -91} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction boolean_pop} {:close 1, :instruction tagged_601} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Lexicase best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger print_integer exec_shove (-91 boolean_not) exec_do*while (in1) integer_eq boolean_empty boolean_frominteger boolean_pop tagged_601 integer_sub integer_lt integer_gte integer_dup_times integer_stackdepth boolean_eq exec_empty integer_dup integer_eq integer_pop integer_max integer_mult in2 exec_do*while () in3 integer_swap boolean_dup exec_y_when_autoconstructing (integer_empty) print_integer boolean_dup exec_pop (exec_do*count ()))
Lexicase best errors: [0 1 0 1 1 1 1 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 45
Percent parens: 0.178
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction -91} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction boolean_pop} {:close 1, :instruction tagged_601} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Zero cases best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger print_integer exec_shove (-91 boolean_not) exec_do*while (in1) integer_eq boolean_empty boolean_frominteger boolean_pop tagged_601 integer_sub integer_lt integer_gte integer_dup_times integer_stackdepth boolean_eq exec_empty integer_dup integer_eq integer_pop integer_max integer_mult in2 exec_do*while () in3 integer_swap boolean_dup exec_y_when_autoconstructing (integer_empty) print_integer boolean_dup exec_pop (exec_do*count ()))
Zero cases best errors: [0 1 0 1 1 1 1 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 45
Percent parens: 0.178
--- Lexicase Population Statistics ---
Count of elite individuals by case: (116 112 116 389 288 288 288 116 388 117)
Population mean number of elite cases: 2.22
Count of perfect (error zero) individuals by case: (116 112 116 389 288 288 288 116 388 117)
Population mean number of perfect (error zero) cases: 2.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction -94} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Best program: (integer_fromboolean integer_add boolean_dup boolean_invert_first_then_and exec_do*times (-94 exec_do*times (boolean_not) boolean_and integer_shove exec_yankdup) boolean_swap exec_yankdup integer_yank boolean_dup boolean_invert_first_then_and boolean_flush integer_dup_items exec_empty integer_dup integer_eq integer_pop integer_max integer_mult in2 exec_do*while (in3 boolean_yank print_integer boolean_dup) exec_pop (exec_do*count ()))
Errors: [0 1 0 1 1 1 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 32
Size: 38
Percent parens: 0.158
--- Population Statistics ---
Average total errors in population: 7.782
Median total errors in population: 8
Error averages by case: (0.884 0.888 0.884 0.611 0.712 0.712 0.712 0.884 0.612 0.883)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.489
Average program size in population (points): 48.24
Average percent parens in population: 0.264
Minimum age in population: 6.625
Maximum age in population: 10.6875
Average age in population: 8.84446875
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 278
Genome diversity (% unique genomes):	 0.535
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 286
Syntactic diversity (% unique Push programs):	 0.513
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4085340
--- Timings ---
Current time: 1559584364339 milliseconds
Total Time:          19.4 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        12.2 seconds, 62.9%
Fitness Testing:      4.5 seconds, 23.4%
Report:               2.6 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 671
Test mean error for best: 0.67100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -11                
Correct output: -100                | Program output: -5                 
Correct output: -84                 | Program output: -26                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: 56                 
Correct output: -92                 | Program output: -55                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -11                
Correct output: -74                 | Program output: -51                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 36                 
Correct output: 12                  | Program output: 14                 
Correct output: 17                  | Program output: 100                
Correct output: 13                  | Program output: 13                 
Correct output: 71                  | Program output: 71                 
Correct output: 8                   | Program output: 69                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 90                 
Correct output: 1                   | Program output: 98                 
Correct output: 38                  | Program output: 38                 
Correct output: 18                  | Program output: 69                 
Correct output: 21                  | Program output: 21                 
Correct output: 41                  | Program output: 50                 
Correct output: 12                  | Program output: 100                
Correct output: 3                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 53                 
Correct output: 7                   | Program output: 18                 
Correct output: 34                  | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -14                 | Program output: 46                 
Correct output: -84                 | Program output: 47                 
Correct output: -75                 | Program output: -63                
Correct output: -70                 | Program output: -46                
Correct output: -75                 | Program output: -59                
Correct output: -60                 | Program output: -60                
Correct output: -98                 | Program output: 87                 
Correct output: -94                 | Program output: 48                 
Correct output: -16                 | Program output: -16                
Correct output: -55                 | Program output: -10                
Correct output: -55                 | Program output: 54                 
Correct output: -76                 | Program output: 22                 
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -53                
Correct output: -39                 | Program output: -33                
Correct output: -79                 | Program output: -52                
Correct output: -72                 | Program output: -29                
Correct output: -85                 | Program output: 90                 
Correct output: -91                 | Program output: 97                 
Correct output: -58                 | Program output: -33                
Correct output: 34                  | Program output: 43                 
Correct output: -6                  | Program output: -6                 
Correct output: -74                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: -85                 | Program output: 62                 
Correct output: -68                 | Program output: 53                 
Correct output: -91                 | Program output: 6                  
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: 72                 
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: 59                 
Correct output: -92                 | Program output: 94                 
Correct output: -63                 | Program output: 68                 
Correct output: -89                 | Program output: 70                 
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -69                
Correct output: -68                 | Program output: 24                 
Correct output: -26                 | Program output: 30                 
Correct output: -92                 | Program output: 45                 
Correct output: -40                 | Program output: -40                
Correct output: -91                 | Program output: 92                 
Correct output: -84                 | Program output: -84                
Correct output: -54                 | Program output: 44                 
Correct output: -36                 | Program output: -14                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: 25                 
Correct output: -95                 | Program output: -53                
Correct output: -65                 | Program output: 70                 
Correct output: -68                 | Program output: 4                  
Correct output: -36                 | Program output: 19                 
Correct output: -14                 | Program output: 82                 
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: 77                 
Correct output: 23                  | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Lexicase best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank exec_s_when_autoconstructing () (in3 boolean_yank integer_shove boolean_not) (integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank boolean_dup boolean_invert_first_then_and) boolean_flush integer_dup_items exec_empty integer_dup integer_eq integer_pop integer_max integer_mult integer_max exec_do*while () in3 integer_swap boolean_dup exec_y_when_autoconstructing (boolean_yank) print_integer boolean_dup exec_pop (exec_do*count ()))
Lexicase best errors: [0 1 0 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 45
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Zero cases best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank exec_s_when_autoconstructing () (in3 boolean_yank integer_shove boolean_not) (integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank boolean_dup boolean_invert_first_then_and) boolean_flush integer_dup_items exec_empty integer_dup integer_eq integer_pop integer_max integer_mult integer_max exec_do*while () in3 integer_swap boolean_dup exec_y_when_autoconstructing (boolean_yank) print_integer boolean_dup exec_pop (exec_do*count ()))
Zero cases best errors: [0 1 0 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 45
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (108 332 109 176 278 788 110 110 279 894)
Population mean number of elite cases: 3.18
Count of perfect (error zero) individuals by case: (108 332 109 176 278 788 110 110 279 894)
Population mean number of perfect (error zero) cases: 3.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction tagged_432} {:close 1, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Best program: (exec_pop () tagged_432 print_integer integer_eq integer_fromboolean integer_add in4 exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank exec_s_when_autoconstructing () (in3 boolean_yank integer_shove boolean_not) (integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank boolean_dup in2 exec_do*while () in3 integer_swap) boolean_dup exec_y_when_autoconstructing (boolean_yank) print_integer boolean_dup exec_pop (exec_do*count ()))
Errors: [0 1 0 1 1 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 34
Size: 44
Percent parens: 0.227
--- Population Statistics ---
Average total errors in population: 6.816
Median total errors in population: 7
Error averages by case: (0.892 0.668 0.891 0.824 0.722 0.212 0.89 0.89 0.721 0.106)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.909
Average program size in population (points): 47.593
Average percent parens in population: 0.242
Minimum age in population: 7.625
Maximum age in population: 12.328125
Average age in population: 10.50103125
Median age in population: 10.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 92
Genome diversity (% unique genomes):	 0.642
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.619
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4434431
--- Timings ---
Current time: 1559584367280 milliseconds
Total Time:          22.3 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        14.6 seconds, 65.3%
Fitness Testing:      4.8 seconds, 21.6%
Report:               2.8 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 669
Test mean error for best: 0.66900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -11                
Correct output: -100                | Program output: -5                 
Correct output: -84                 | Program output: -26                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: 56                 
Correct output: -92                 | Program output: -55                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -11                
Correct output: -74                 | Program output: -51                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 36                 
Correct output: 12                  | Program output: 14                 
Correct output: 17                  | Program output: 100                
Correct output: 13                  | Program output: 13                 
Correct output: 71                  | Program output: 71                 
Correct output: 8                   | Program output: 69                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 90                 
Correct output: 1                   | Program output: 98                 
Correct output: 38                  | Program output: 38                 
Correct output: 18                  | Program output: 69                 
Correct output: 21                  | Program output: 21                 
Correct output: 41                  | Program output: 50                 
Correct output: 12                  | Program output: 100                
Correct output: 3                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 53                 
Correct output: 7                   | Program output: 18                 
Correct output: 34                  | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -14                 | Program output: 46                 
Correct output: -84                 | Program output: 47                 
Correct output: -75                 | Program output: -63                
Correct output: -70                 | Program output: -46                
Correct output: -75                 | Program output: -59                
Correct output: -60                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: 48                 
Correct output: -16                 | Program output: -16                
Correct output: -55                 | Program output: -10                
Correct output: -55                 | Program output: 54                 
Correct output: -76                 | Program output: 22                 
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -53                
Correct output: -39                 | Program output: -33                
Correct output: -79                 | Program output: -52                
Correct output: -72                 | Program output: -29                
Correct output: -85                 | Program output: 90                 
Correct output: -91                 | Program output: 97                 
Correct output: -58                 | Program output: -33                
Correct output: 34                  | Program output: 43                 
Correct output: -6                  | Program output: -6                 
Correct output: -74                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: -85                 | Program output: 62                 
Correct output: -68                 | Program output: 53                 
Correct output: -91                 | Program output: 6                  
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: 72                 
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: 59                 
Correct output: -92                 | Program output: 94                 
Correct output: -63                 | Program output: 68                 
Correct output: -89                 | Program output: 70                 
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -69                
Correct output: -68                 | Program output: 24                 
Correct output: -26                 | Program output: 30                 
Correct output: -92                 | Program output: 45                 
Correct output: -40                 | Program output: -40                
Correct output: -91                 | Program output: 92                 
Correct output: -84                 | Program output: -84                
Correct output: -54                 | Program output: 44                 
Correct output: -36                 | Program output: -14                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: 25                 
Correct output: -95                 | Program output: -53                
Correct output: -65                 | Program output: 70                 
Correct output: -68                 | Program output: 4                  
Correct output: -36                 | Program output: 19                 
Correct output: -14                 | Program output: 82                 
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: 77                 
Correct output: 23                  | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction -94} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Lexicase best program: (integer_fromboolean integer_add boolean_dup boolean_invert_first_then_and exec_do*times (-94 exec_do*times (boolean_not) boolean_and integer_shove exec_yankdup) boolean_swap exec_yankdup integer_yank boolean_dup boolean_invert_first_then_and boolean_flush integer_dup_items exec_empty integer_dup integer_eq integer_pop integer_max integer_dup integer_eq integer_pop integer_max integer_mult in2 exec_do*while () in3 integer_swap boolean_dup exec_y_when_autoconstructing (boolean_yank) print_integer boolean_dup exec_pop (exec_do*count ()))
Lexicase best errors: [1 1 0 1 0 1 1 1 0 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 46
Percent parens: 0.152
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction -94} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Zero cases best program: (integer_fromboolean integer_add boolean_dup boolean_invert_first_then_and exec_do*times (-94 exec_do*times (boolean_not) boolean_and integer_shove exec_yankdup) boolean_swap exec_yankdup integer_yank boolean_dup boolean_invert_first_then_and boolean_flush integer_dup_items exec_empty integer_dup integer_eq integer_pop integer_max integer_dup integer_eq integer_pop integer_max integer_mult in2 exec_do*while () in3 integer_swap boolean_dup exec_y_when_autoconstructing (boolean_yank) print_integer boolean_dup exec_pop (exec_do*count ()))
Zero cases best errors: [1 1 0 1 0 1 1 1 0 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (262 387 118 387 118 387 130 262 118 130)
Population mean number of elite cases: 2.30
Count of perfect (error zero) individuals by case: (262 387 118 387 118 387 130 262 118 130)
Population mean number of perfect (error zero) cases: 2.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank exec_s_when_autoconstructing () (in3 boolean_yank integer_shove boolean_not) (exec_dup () integer_pop integer_shove exec_yankdup) boolean_swap exec_yankdup integer_yank boolean_dup boolean_invert_first_then_and boolean_flush integer_dup_items exec_empty integer_dup integer_eq integer_pop integer_max integer_mult in2 exec_do*while () in3 boolean_yank print_integer boolean_dup exec_pop (exec_do*count ()))
Errors: [1 0 1 0 1 0 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 34
Size: 43
Percent parens: 0.209
--- Population Statistics ---
Average total errors in population: 7.701
Median total errors in population: 7
Error averages by case: (0.738 0.613 0.882 0.613 0.882 0.613 0.87 0.738 0.882 0.87)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.728
Average program size in population (points): 47.007
Average percent parens in population: 0.237
Minimum age in population: 8.625
Maximum age in population: 13.921875
Average age in population: 11.9733046875
Median age in population: 12.0078125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 45
Genome diversity (% unique genomes):	 0.683
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.649
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4787473
--- Timings ---
Current time: 1559584370067 milliseconds
Total Time:          25.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.8 seconds, 66.9%
Fitness Testing:      5.1 seconds, 20.3%
Report:               3.1 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 669
Test mean error for best: 0.66900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -11                
Correct output: -100                | Program output: -5                 
Correct output: -84                 | Program output: -26                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: 56                 
Correct output: -92                 | Program output: -55                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -11                
Correct output: -74                 | Program output: -51                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 36                 
Correct output: 12                  | Program output: 14                 
Correct output: 17                  | Program output: 100                
Correct output: 13                  | Program output: 13                 
Correct output: 71                  | Program output: 71                 
Correct output: 8                   | Program output: 69                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 90                 
Correct output: 1                   | Program output: 98                 
Correct output: 38                  | Program output: 38                 
Correct output: 18                  | Program output: 69                 
Correct output: 21                  | Program output: 21                 
Correct output: 41                  | Program output: 50                 
Correct output: 12                  | Program output: 100                
Correct output: 3                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 53                 
Correct output: 7                   | Program output: 18                 
Correct output: 34                  | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -14                 | Program output: 46                 
Correct output: -84                 | Program output: 47                 
Correct output: -75                 | Program output: -63                
Correct output: -70                 | Program output: -46                
Correct output: -75                 | Program output: -59                
Correct output: -60                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: 48                 
Correct output: -16                 | Program output: -16                
Correct output: -55                 | Program output: -10                
Correct output: -55                 | Program output: 54                 
Correct output: -76                 | Program output: 22                 
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -53                
Correct output: -39                 | Program output: -33                
Correct output: -79                 | Program output: -52                
Correct output: -72                 | Program output: -29                
Correct output: -85                 | Program output: 90                 
Correct output: -91                 | Program output: 97                 
Correct output: -58                 | Program output: -33                
Correct output: 34                  | Program output: 43                 
Correct output: -6                  | Program output: -6                 
Correct output: -74                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: -85                 | Program output: 62                 
Correct output: -68                 | Program output: 53                 
Correct output: -91                 | Program output: 6                  
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: 72                 
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: 59                 
Correct output: -92                 | Program output: 94                 
Correct output: -63                 | Program output: 68                 
Correct output: -89                 | Program output: 70                 
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -69                
Correct output: -68                 | Program output: 24                 
Correct output: -26                 | Program output: 30                 
Correct output: -92                 | Program output: 45                 
Correct output: -40                 | Program output: -40                
Correct output: -91                 | Program output: 92                 
Correct output: -84                 | Program output: -84                
Correct output: -54                 | Program output: 44                 
Correct output: -36                 | Program output: -14                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: 25                 
Correct output: -95                 | Program output: -53                
Correct output: -65                 | Program output: 70                 
Correct output: -68                 | Program output: 4                  
Correct output: -36                 | Program output: 19                 
Correct output: -14                 | Program output: 82                 
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: 77                 
Correct output: 23                  | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction -91} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction boolean_pop} {:close 1, :instruction tagged_601} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Lexicase best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger print_integer exec_shove (-91 boolean_not) exec_do*while (in1) integer_eq boolean_empty boolean_frominteger boolean_pop tagged_601 integer_sub integer_lt integer_gte integer_dup_times integer_stackdepth boolean_eq exec_empty integer_dup integer_eq integer_pop integer_max integer_mult in2 exec_do*while () in3 integer_swap boolean_dup exec_y_when_autoconstructing (boolean_yank) print_integer boolean_dup exec_pop (exec_do*count ()))
Lexicase best errors: [1 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 45
Percent parens: 0.178
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction -91} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction boolean_pop} {:close 1, :instruction tagged_601} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Zero cases best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger print_integer exec_shove (-91 boolean_not) exec_do*while (in1) integer_eq boolean_empty boolean_frominteger boolean_pop tagged_601 integer_sub integer_lt integer_gte integer_dup_times integer_stackdepth boolean_eq exec_empty integer_dup integer_eq integer_pop integer_max integer_mult in2 exec_do*while () in3 integer_swap boolean_dup exec_y_when_autoconstructing (boolean_yank) print_integer boolean_dup exec_pop (exec_do*count ()))
Zero cases best errors: [1 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 45
Percent parens: 0.178
--- Lexicase Population Statistics ---
Count of elite individuals by case: (265 891 261 894 261 262 261 180 448 261)
Population mean number of elite cases: 3.98
Count of perfect (error zero) individuals by case: (265 891 261 894 261 262 261 180 448 261)
Population mean number of perfect (error zero) cases: 3.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction -91} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction boolean_pop} {:close 1, :instruction tagged_601} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger print_integer exec_shove (-91 boolean_not) exec_do*while (in1) integer_eq in2 boolean_frominteger boolean_pop tagged_601 integer_sub integer_lt integer_gte integer_dup_times integer_stackdepth boolean_eq exec_empty integer_dup integer_eq integer_pop integer_max integer_mult in2 exec_do*while () in3 integer_swap boolean_dup exec_y_when_autoconstructing (boolean_yank) print_integer boolean_dup exec_pop (exec_do*count ()))
Errors: [1 0 0 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 37
Size: 45
Percent parens: 0.178
--- Population Statistics ---
Average total errors in population: 6.016
Median total errors in population: 7
Error averages by case: (0.735 0.109 0.739 0.106 0.739 0.738 0.739 0.82 0.552 0.739)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.345
Average program size in population (points): 45.138
Average percent parens in population: 0.237
Minimum age in population: 10.5
Maximum age in population: 15.58203125
Average age in population: 13.4724375
Median age in population: 13.546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 52
Genome diversity (% unique genomes):	 0.714
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.677
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 5128928
--- Timings ---
Current time: 1559584372975 milliseconds
Total Time:          28.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        19.2 seconds, 68.4%
Fitness Testing:      5.4 seconds, 19.1%
Report:               3.4 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 669
Test mean error for best: 0.66900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -11                
Correct output: -100                | Program output: -5                 
Correct output: -84                 | Program output: -26                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: 56                 
Correct output: -92                 | Program output: -55                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -11                
Correct output: -74                 | Program output: -51                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 36                 
Correct output: 12                  | Program output: 14                 
Correct output: 17                  | Program output: 100                
Correct output: 13                  | Program output: 13                 
Correct output: 71                  | Program output: 71                 
Correct output: 8                   | Program output: 69                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 90                 
Correct output: 1                   | Program output: 98                 
Correct output: 38                  | Program output: 38                 
Correct output: 18                  | Program output: 69                 
Correct output: 21                  | Program output: 21                 
Correct output: 41                  | Program output: 50                 
Correct output: 12                  | Program output: 100                
Correct output: 3                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 53                 
Correct output: 7                   | Program output: 18                 
Correct output: 34                  | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -14                 | Program output: 46                 
Correct output: -84                 | Program output: 47                 
Correct output: -75                 | Program output: -63                
Correct output: -70                 | Program output: -46                
Correct output: -75                 | Program output: -59                
Correct output: -60                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: 48                 
Correct output: -16                 | Program output: -16                
Correct output: -55                 | Program output: -10                
Correct output: -55                 | Program output: 54                 
Correct output: -76                 | Program output: 22                 
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -53                
Correct output: -39                 | Program output: -33                
Correct output: -79                 | Program output: -52                
Correct output: -72                 | Program output: -29                
Correct output: -85                 | Program output: 90                 
Correct output: -91                 | Program output: 97                 
Correct output: -58                 | Program output: -33                
Correct output: 34                  | Program output: 43                 
Correct output: -6                  | Program output: -6                 
Correct output: -74                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: -85                 | Program output: 62                 
Correct output: -68                 | Program output: 53                 
Correct output: -91                 | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: 72                 
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: 59                 
Correct output: -92                 | Program output: 94                 
Correct output: -63                 | Program output: 68                 
Correct output: -89                 | Program output: 70                 
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -69                
Correct output: -68                 | Program output: 24                 
Correct output: -26                 | Program output: 30                 
Correct output: -92                 | Program output: 45                 
Correct output: -40                 | Program output: -40                
Correct output: -91                 | Program output: -75                
Correct output: -84                 | Program output: -84                
Correct output: -54                 | Program output: 44                 
Correct output: -36                 | Program output: -14                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: 25                 
Correct output: -95                 | Program output: -53                
Correct output: -65                 | Program output: 70                 
Correct output: -68                 | Program output: 4                  
Correct output: -36                 | Program output: 19                 
Correct output: -14                 | Program output: 82                 
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: 77                 
Correct output: 23                  | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction boolean_pop} {:close 1, :instruction tagged_601} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush})
Lexicase best program: (integer_fromboolean integer_add exec_yank exec_s_when_autoconstructing (in3 boolean_yank) (integer_eq) (integer_fromboolean) integer_add in4 integer_yank print_integer exec_k (integer_min integer_dup boolean_frominteger boolean_pop) () tagged_601 integer_sub boolean_dup_times integer_gte integer_dup_times boolean_yankdup boolean_eq integer_empty boolean_empty integer_pop exec_if (boolean_shove exec_yankdup integer_gt) (exec_when (exec_dup_times (integer_min integer_div exec_flush))))
Lexicase best errors: [0 0 0 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 46
Percent parens: 0.217
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction boolean_pop} {:close 1, :instruction tagged_601} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush})
Zero cases best program: (integer_fromboolean integer_add exec_yank exec_s_when_autoconstructing (in3 boolean_yank) (integer_eq) (integer_fromboolean) integer_add in4 integer_yank print_integer exec_k (integer_min integer_dup boolean_frominteger boolean_pop) () tagged_601 integer_sub boolean_dup_times integer_gte integer_dup_times boolean_yankdup boolean_eq integer_empty boolean_empty integer_pop exec_if (boolean_shove exec_yankdup integer_gt) (exec_when (exec_dup_times (integer_min integer_div exec_flush))))
Zero cases best errors: [0 0 0 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 46
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (667 669 667 120 124 120 668 661 126 667)
Population mean number of elite cases: 4.49
Count of perfect (error zero) individuals by case: (667 669 667 120 124 120 668 661 126 667)
Population mean number of perfect (error zero) cases: 4.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction -91} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 3, :instruction boolean_pop} {:close 1, :instruction tagged_601} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger print_integer exec_shove (-91 boolean_not) exec_do*while (in1) integer_eq boolean_empty boolean_frominteger boolean_pop tagged_601 integer_sub integer_lt integer_gte integer_dup_times integer_stackdepth boolean_eq exec_empty integer_dup integer_eq boolean_rot integer_max integer_mult in2 exec_do*while () in3 integer_swap boolean_dup exec_y_when_autoconstructing (boolean_yank) print_integer boolean_dup exec_pop (exec_do*count ()))
Errors: [0 0 0 1 1 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 37
Size: 45
Percent parens: 0.178
--- Population Statistics ---
Average total errors in population: 5.511
Median total errors in population: 4
Error averages by case: (0.333 0.331 0.333 0.88 0.876 0.88 0.332 0.339 0.874 0.333)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.344
Average program size in population (points): 44.158
Average percent parens in population: 0.222
Minimum age in population: 11.5
Maximum age in population: 16.935546875
Average age in population: 14.93587109375
Median age in population: 15.0537109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 21
Genome diversity (% unique genomes):	 0.666
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.629
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 5469644
--- Timings ---
Current time: 1559584375924 milliseconds
Total Time:          31.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        21.6 seconds, 69.6%
Fitness Testing:      5.6 seconds, 18.2%
Report:               3.7 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 669
Test mean error for best: 0.66900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -11                
Correct output: -100                | Program output: -5                 
Correct output: -84                 | Program output: -26                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: 56                 
Correct output: -92                 | Program output: -55                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -11                
Correct output: -74                 | Program output: -51                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 36                 
Correct output: 12                  | Program output: 14                 
Correct output: 17                  | Program output: 100                
Correct output: 13                  | Program output: 13                 
Correct output: 71                  | Program output: 71                 
Correct output: 8                   | Program output: 69                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 90                 
Correct output: 1                   | Program output: 98                 
Correct output: 38                  | Program output: 38                 
Correct output: 18                  | Program output: 69                 
Correct output: 21                  | Program output: 21                 
Correct output: 41                  | Program output: 50                 
Correct output: 12                  | Program output: 100                
Correct output: 3                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 53                 
Correct output: 7                   | Program output: 18                 
Correct output: 34                  | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -14                 | Program output: 46                 
Correct output: -84                 | Program output: 47                 
Correct output: -75                 | Program output: -63                
Correct output: -70                 | Program output: -46                
Correct output: -75                 | Program output: -59                
Correct output: -60                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: 48                 
Correct output: -16                 | Program output: -16                
Correct output: -55                 | Program output: -10                
Correct output: -55                 | Program output: 54                 
Correct output: -76                 | Program output: 22                 
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -53                
Correct output: -39                 | Program output: -33                
Correct output: -79                 | Program output: -52                
Correct output: -72                 | Program output: -29                
Correct output: -85                 | Program output: 90                 
Correct output: -91                 | Program output: 97                 
Correct output: -58                 | Program output: -33                
Correct output: 34                  | Program output: 43                 
Correct output: -6                  | Program output: -6                 
Correct output: -74                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: -85                 | Program output: 62                 
Correct output: -68                 | Program output: 53                 
Correct output: -91                 | Program output: 6                  
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: 72                 
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: 59                 
Correct output: -92                 | Program output: 94                 
Correct output: -63                 | Program output: 68                 
Correct output: -89                 | Program output: 70                 
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -69                
Correct output: -68                 | Program output: 24                 
Correct output: -26                 | Program output: 30                 
Correct output: -92                 | Program output: 45                 
Correct output: -40                 | Program output: -40                
Correct output: -91                 | Program output: 92                 
Correct output: -84                 | Program output: -84                
Correct output: -54                 | Program output: 44                 
Correct output: -36                 | Program output: -14                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: 25                 
Correct output: -95                 | Program output: -53                
Correct output: -65                 | Program output: 70                 
Correct output: -68                 | Program output: 4                  
Correct output: -36                 | Program output: 19                 
Correct output: -14                 | Program output: 82                 
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: 77                 
Correct output: 23                  | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_yank} {:close 0, :instruction tagged_432} {:close 1, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_740} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_flush} {:close 0, :instruction -86} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush})
Lexicase best program: (exec_yank tagged_432 print_integer integer_eq integer_fromboolean integer_add in4 exec_if () (print_integer exec_k (integer_min integer_dup exec_stackdepth exec_flush tagged_740 boolean_invert_first_then_and) (integer_flush) -86 integer_max exec_k (exec_k (exec_flush) ()) ()))
Lexicase best errors: [1 1 1 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 31
Percent parens: 0.290
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_yank} {:close 0, :instruction tagged_432} {:close 1, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_740} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_flush} {:close 0, :instruction -86} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush})
Zero cases best program: (exec_yank tagged_432 print_integer integer_eq integer_fromboolean integer_add in4 exec_if () (print_integer exec_k (integer_min integer_dup exec_stackdepth exec_flush tagged_740 boolean_invert_first_then_and) (integer_flush) -86 integer_max exec_k (exec_k (exec_flush) ()) ()))
Zero cases best errors: [1 1 1 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 31
Percent parens: 0.290
--- Lexicase Population Statistics ---
Count of elite individuals by case: (555 149 453 746 189 251 896 897 189 3)
Population mean number of elite cases: 4.33
Count of perfect (error zero) individuals by case: (555 149 453 746 189 251 896 897 189 3)
Population mean number of perfect (error zero) cases: 4.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 1, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction boolean_pop} {:close 1, :instruction tagged_601} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush})
Best program: (integer_fromboolean integer_add exec_yank exec_s_when_autoconstructing (in3 boolean_yank) (integer_eq) (integer_fromboolean) integer_add in4 integer_yank print_integer exec_k (integer_min integer_dup boolean_frominteger boolean_pop) () tagged_601 integer_sub boolean_dup_times integer_gte integer_dup_times integer_stackdepth boolean_eq integer_empty boolean_empty integer_pop exec_if (boolean_shove exec_yankdup integer_gt) (exec_when (exec_dup_times (integer_min integer_div exec_flush))))
Errors: [0 1 0 0 1 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 36
Size: 46
Percent parens: 0.217
--- Population Statistics ---
Average total errors in population: 5.672
Median total errors in population: 5
Error averages by case: (0.445 0.851 0.547 0.254 0.811 0.749 0.104 0.103 0.811 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.846
Average program size in population (points): 44.459
Average percent parens in population: 0.217
Minimum age in population: 12.5
Maximum age in population: 18.3623046875
Average age in population: 16.329255859375
Median age in population: 16.408203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 63
Genome diversity (% unique genomes):	 0.716
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 67
Syntactic diversity (% unique Push programs):	 0.682
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5824750
--- Timings ---
Current time: 1559584378265 milliseconds
Total Time:          33.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.4 seconds, 70.1%
Fitness Testing:      5.9 seconds, 17.7%
Report:               4.0 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 669
Test mean error for best: 0.66900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -11                
Correct output: -100                | Program output: -5                 
Correct output: -84                 | Program output: -26                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: 56                 
Correct output: -92                 | Program output: -55                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -11                
Correct output: -74                 | Program output: -51                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 36                 
Correct output: 12                  | Program output: 14                 
Correct output: 17                  | Program output: 100                
Correct output: 13                  | Program output: 13                 
Correct output: 71                  | Program output: 71                 
Correct output: 8                   | Program output: 69                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 90                 
Correct output: 1                   | Program output: 98                 
Correct output: 38                  | Program output: 38                 
Correct output: 18                  | Program output: 69                 
Correct output: 21                  | Program output: 21                 
Correct output: 41                  | Program output: 50                 
Correct output: 12                  | Program output: 100                
Correct output: 3                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 53                 
Correct output: 7                   | Program output: 18                 
Correct output: 34                  | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -14                 | Program output: 46                 
Correct output: -84                 | Program output: 47                 
Correct output: -75                 | Program output: -63                
Correct output: -70                 | Program output: -46                
Correct output: -75                 | Program output: -59                
Correct output: -60                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: 48                 
Correct output: -16                 | Program output: -16                
Correct output: -55                 | Program output: -10                
Correct output: -55                 | Program output: 54                 
Correct output: -76                 | Program output: 22                 
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -53                
Correct output: -39                 | Program output: -33                
Correct output: -79                 | Program output: -52                
Correct output: -72                 | Program output: -29                
Correct output: -85                 | Program output: 90                 
Correct output: -91                 | Program output: 97                 
Correct output: -58                 | Program output: -33                
Correct output: 34                  | Program output: 43                 
Correct output: -6                  | Program output: -6                 
Correct output: -74                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: -85                 | Program output: 62                 
Correct output: -68                 | Program output: 53                 
Correct output: -91                 | Program output: 6                  
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: 72                 
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: 59                 
Correct output: -92                 | Program output: 94                 
Correct output: -63                 | Program output: 68                 
Correct output: -89                 | Program output: 70                 
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -69                
Correct output: -68                 | Program output: 24                 
Correct output: -26                 | Program output: 30                 
Correct output: -92                 | Program output: 45                 
Correct output: -40                 | Program output: -40                
Correct output: -91                 | Program output: 92                 
Correct output: -84                 | Program output: -84                
Correct output: -54                 | Program output: 44                 
Correct output: -36                 | Program output: -14                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: 25                 
Correct output: -95                 | Program output: -53                
Correct output: -65                 | Program output: 70                 
Correct output: -68                 | Program output: 4                  
Correct output: -36                 | Program output: 19                 
Correct output: -14                 | Program output: 82                 
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: 77                 
Correct output: 23                  | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction -94} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Lexicase best program: (boolean_dup boolean_invert_first_then_and exec_do*times (-94 exec_do*times (exec_dup_times () integer_dup_items boolean_shove boolean_dup_items) integer_lt exec_dup_times (integer_eq in4 boolean_invert_first_then_and)) boolean_flush integer_dup_items exec_empty integer_dup integer_eq integer_pop integer_max integer_mult in2 exec_do*while () in3 integer_swap boolean_dup exec_y_when_autoconstructing (integer_yankdup) print_integer boolean_dup exec_pop (exec_do*count ()))
Lexicase best errors: [1 0 1 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 42
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction -94} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Zero cases best program: (boolean_dup boolean_invert_first_then_and exec_do*times (-94 exec_do*times (exec_dup_times () integer_dup_items boolean_shove boolean_dup_items) integer_lt exec_dup_times (integer_eq in4 boolean_invert_first_then_and)) boolean_flush integer_dup_items exec_empty integer_dup integer_eq integer_pop integer_max integer_mult in2 exec_do*while () in3 integer_swap boolean_dup exec_y_when_autoconstructing (integer_yankdup) print_integer boolean_dup exec_pop (exec_do*count ()))
Zero cases best errors: [1 0 1 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 42
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (256 331 256 312 332 211 233 256 256 312)
Population mean number of elite cases: 2.76
Count of perfect (error zero) individuals by case: (256 331 256 312 332 211 233 256 256 312)
Population mean number of perfect (error zero) cases: 2.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 2, :instruction boolean_yank} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_706} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction -86} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush})
Best program: (exec_do*while (boolean_invert_second_then_and boolean_frominteger exec_yank exec_s_when_autoconstructing (in3 boolean_yank) () (integer_eq) integer_fromboolean) integer_add in4 integer_yank print_integer exec_k (integer_min integer_dup exec_stackdepth exec_flush tagged_706 boolean_invert_first_then_and) (integer_flush) exec_dup_times (boolean_eq -86 integer_max exec_k (exec_k (exec_flush) ()) ()))
Errors: [1 0 1 0 0 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 28
Size: 40
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 7.245
Median total errors in population: 7
Error averages by case: (0.744 0.669 0.744 0.688 0.668 0.789 0.767 0.744 0.744 0.688)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.849
Average program size in population (points): 46.148
Average percent parens in population: 0.203
Minimum age in population: 15.375
Maximum age in population: 19.71533203125
Average age in population: 17.73508154296875
Median age in population: 17.833984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.69
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.673
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 6204267
--- Timings ---
Current time: 1559584380670 milliseconds
Total Time:          35.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.3 seconds, 70.6%
Fitness Testing:      6.2 seconds, 17.3%
Report:               4.2 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -5                 
Correct output: -84                 | Program output: -26                
Correct output: -66                 | Program output: -53                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 77                 
Correct output: -80                 | Program output: -11                
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 26                 
Correct output: 16                  | Program output: 52                 
Correct output: 12                  | Program output: 68                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 82                 
Correct output: 71                  | Program output: 91                 
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 13                 
Correct output: 68                  | Program output: 68                 
Correct output: 1                   | Program output: 58                 
Correct output: 38                  | Program output: 74                 
Correct output: 18                  | Program output: 20                 
Correct output: 21                  | Program output: 25                 
Correct output: 41                  | Program output: 49                 
Correct output: 12                  | Program output: 21                 
Correct output: 3                   | Program output: 39                 
Correct output: 19                  | Program output: 47                 
Correct output: 19                  | Program output: 57                 
Correct output: 7                   | Program output: 46                 
Correct output: 34                  | Program output: 59                 
Correct output: -80                 | Program output: -78                
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -58                
Correct output: -70                 | Program output: -68                
Correct output: -75                 | Program output: -69                
Correct output: -60                 | Program output: 32                 
Correct output: -98                 | Program output: 87                 
Correct output: -94                 | Program output: -66                
Correct output: -16                 | Program output: 59                 
Correct output: -55                 | Program output: 83                 
Correct output: -55                 | Program output: 68                 
Correct output: -76                 | Program output: -76                
Correct output: -4                  | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -39                 | Program output: -39                
Correct output: -79                 | Program output: 65                 
Correct output: -72                 | Program output: -13                
Correct output: -85                 | Program output: -58                
Correct output: -91                 | Program output: -80                
Correct output: -58                 | Program output: -58                
Correct output: 34                  | Program output: 34                 
Correct output: -6                  | Program output: 90                 
Correct output: -74                 | Program output: -70                
Correct output: -47                 | Program output: 12                 
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: 91                 
Correct output: -91                 | Program output: 67                 
Correct output: -78                 | Program output: 97                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: 4                  
Correct output: -25                 | Program output: 10                 
Correct output: -92                 | Program output: -92                
Correct output: -63                 | Program output: -63                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: 70                 
Correct output: -66                 | Program output: 68                 
Correct output: -67                 | Program output: 98                 
Correct output: -84                 | Program output: 61                 
Correct output: -68                 | Program output: 84                 
Correct output: -26                 | Program output: 41                 
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -20                
Correct output: -91                 | Program output: -75                
Correct output: -84                 | Program output: -56                
Correct output: -54                 | Program output: -54                
Correct output: -36                 | Program output: 73                 
Correct output: -20                 | Program output: 0                  
Correct output: -54                 | Program output: 87                 
Correct output: -54                 | Program output: 80                 
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 4                  
Correct output: -36                 | Program output: 95                 
Correct output: -14                 | Program output: 19                 
Correct output: -98                 | Program output: -65                
Correct output: -64                 | Program output: 87                 
Correct output: -76                 | Program output: -15                
Correct output: 23                  | Program output: 68                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop})
Lexicase best program: (exec_do*while (boolean_invert_second_then_and) exec_do*while (boolean_invert_second_then_and boolean_frominteger exec_yank exec_s_when_autoconstructing (in3 boolean_yank) (integer_shove boolean_not integer_pop boolean_eq exec_yankdup) (integer_shove boolean_not integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank boolean_dup boolean_invert_first_then_and)) boolean_flush integer_dup_items exec_empty integer_dup integer_eq integer_pop integer_max integer_mult in2 integer_gte in3 integer_swap boolean_dup exec_y_when_autoconstructing (boolean_flush) print_integer boolean_dup exec_pop ())
Lexicase best errors: [0 1 1 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 50
Percent parens: 0.160
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop})
Zero cases best program: (exec_do*while (boolean_invert_second_then_and) exec_do*while (boolean_invert_second_then_and boolean_frominteger exec_yank exec_s_when_autoconstructing (in3 boolean_yank) (integer_shove boolean_not integer_pop boolean_eq exec_yankdup) (integer_shove boolean_not integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank boolean_dup boolean_invert_first_then_and)) boolean_flush integer_dup_items exec_empty integer_dup integer_eq integer_pop integer_max integer_mult in2 integer_gte in3 integer_swap boolean_dup exec_y_when_autoconstructing (boolean_flush) print_integer boolean_dup exec_pop ())
Zero cases best errors: [0 1 1 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 50
Percent parens: 0.160
--- Lexicase Population Statistics ---
Count of elite individuals by case: (10 3 510 3 362 881 512 10 886 10)
Population mean number of elite cases: 3.19
Count of perfect (error zero) individuals by case: (10 3 510 3 362 881 512 10 886 10)
Population mean number of perfect (error zero) cases: 3.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 2, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count})
Best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank exec_s_when_autoconstructing (in3 boolean_yank) (integer_shove integer_pop) (integer_pop integer_shove exec_yankdup) boolean_swap exec_yankdup integer_yank boolean_dup boolean_invert_first_then_and boolean_flush integer_dup_items exec_empty integer_dup integer_eq integer_pop integer_max integer_mult in2 exec_do*while () print_integer boolean_yank print_integer boolean_dup exec_k (exec_do*count ()) ())
Errors: [0 1 1 1 1 0 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 33
Size: 42
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 6.813
Median total errors in population: 6
Error averages by case: (0.99 0.997 0.49 0.997 0.638 0.119 0.488 0.99 0.114 0.99)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.758
Average program size in population (points): 43.735
Average percent parens in population: 0.230
Minimum age in population: 16.69921875
Maximum age in population: 21.3671875
Average age in population: 19.3274033203125
Median age in population: 19.3917236328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.68
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.66
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 6548900
--- Timings ---
Current time: 1559584383366 milliseconds
Total Time:          38.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        27.5 seconds, 71.4%
Fitness Testing:      6.5 seconds, 16.8%
Report:               4.4 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -53                
Correct output: -43                 | Program output: 56                 
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: -51                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 36                 
Correct output: 16                  | Program output: 48                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 21                 
Correct output: 13                  | Program output: 100                
Correct output: 71                  | Program output: 96                 
Correct output: 8                   | Program output: 45                 
Correct output: 1                   | Program output: 36                 
Correct output: 68                  | Program output: 80                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 71                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 30                 
Correct output: 41                  | Program output: 41                 
Correct output: 12                  | Program output: 58                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 29                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 34                  | Program output: 52                 
Correct output: -80                 | Program output: 80                 
Correct output: -14                 | Program output: 58                 
Correct output: -84                 | Program output: 94                 
Correct output: -75                 | Program output: 88                 
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -11                
Correct output: -98                 | Program output: 0                  
Correct output: -94                 | Program output: -94                
Correct output: -16                 | Program output: 59                 
Correct output: -55                 | Program output: 83                 
Correct output: -55                 | Program output: -55                
Correct output: -76                 | Program output: 11                 
Correct output: -4                  | Program output: 43                 
Correct output: -90                 | Program output: 21                 
Correct output: -39                 | Program output: -34                
Correct output: -79                 | Program output: 77                 
Correct output: -72                 | Program output: -72                
Correct output: -85                 | Program output: 98                 
Correct output: -91                 | Program output: -91                
Correct output: -58                 | Program output: 50                 
Correct output: 34                  | Program output: 83                 
Correct output: -6                  | Program output: 37                 
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -30                
Correct output: -85                 | Program output: -84                
Correct output: -68                 | Program output: 91                 
Correct output: -91                 | Program output: -4                 
Correct output: -78                 | Program output: 85                 
Correct output: -95                 | Program output: -37                
Correct output: -91                 | Program output: 45                 
Correct output: -25                 | Program output: -25                
Correct output: -92                 | Program output: 6                  
Correct output: -63                 | Program output: 5                  
Correct output: -89                 | Program output: 4                  
Correct output: -44                 | Program output: -29                
Correct output: -66                 | Program output: -48                
Correct output: -67                 | Program output: 24                 
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -40                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -19                
Correct output: -40                 | Program output: 11                 
Correct output: -91                 | Program output: -22                
Correct output: -84                 | Program output: -56                
Correct output: -54                 | Program output: 85                 
Correct output: -36                 | Program output: -36                
Correct output: -20                 | Program output: 38                 
Correct output: -54                 | Program output: 92                 
Correct output: -54                 | Program output: 75                 
Correct output: -98                 | Program output: -65                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -27                
Correct output: -68                 | Program output: -55                
Correct output: -36                 | Program output: 35                 
Correct output: -14                 | Program output: -14                
Correct output: -98                 | Program output: 60                 
Correct output: -64                 | Program output: 40                 
Correct output: -76                 | Program output: 27                 
Correct output: 23                  | Program output: 23                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction -91} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction boolean_pop} {:close 1, :instruction tagged_601} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Lexicase best program: (exec_do*while (boolean_invert_second_then_and) in4 print_integer exec_shove (-91 boolean_not) exec_do*while (exec_do*while () exec_when (exec_dup_items boolean_frominteger boolean_pop)) tagged_601 integer_sub exec_if (integer_gte integer_dup_times integer_stackdepth boolean_eq integer_empty boolean_empty exec_do*times (exec_if (integer_lt integer_swap) (integer_dup_times exec_k_when_autoconstructing (boolean_yank) (print_integer boolean_dup exec_pop (exec_do*count ()))))) ())
Lexicase best errors: [1 1 0 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 48
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction -91} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction boolean_pop} {:close 1, :instruction tagged_601} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Zero cases best program: (exec_do*while (boolean_invert_second_then_and) in4 print_integer exec_shove (-91 boolean_not) exec_do*while (exec_do*while () exec_when (exec_dup_items boolean_frominteger boolean_pop)) tagged_601 integer_sub exec_if (integer_gte integer_dup_times integer_stackdepth boolean_eq integer_empty boolean_empty exec_do*times (exec_if (integer_lt integer_swap) (integer_dup_times exec_k_when_autoconstructing (boolean_yank) (print_integer boolean_dup exec_pop (exec_do*count ()))))) ())
Zero cases best errors: [1 1 0 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 48
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (336 260 905 259 909 335 568 128 182 128)
Population mean number of elite cases: 4.01
Count of perfect (error zero) individuals by case: (336 260 905 259 909 335 568 128 182 128)
Population mean number of perfect (error zero) cases: 4.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction -91} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction boolean_pop} {:close 1, :instruction tagged_601} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_yank})
Best program: (in4 print_integer exec_shove (-91 boolean_not) exec_do*while (in1) integer_eq boolean_empty boolean_frominteger boolean_pop tagged_601 integer_sub boolean_dup_times integer_gte integer_div integer_stackdepth exec_rot (exec_k_when_autoconstructing (integer_dup integer_eq integer_pop) (integer_max) integer_mult in2 exec_do*while () in3 integer_swap) (in1 integer_inc exec_pop (integer_dup_items exec_s_when_autoconstructing () (exec_pop (exec_rot (boolean_frominteger boolean_rot boolean_not boolean_yankdup integer_shove boolean_not integer_dec integer_shove in2 exec_yank) () ())) ())) ())
Errors: [1 1 0 1 0 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 45
Size: 62
Percent parens: 0.274
--- Population Statistics ---
Average total errors in population: 5.99
Median total errors in population: 6
Error averages by case: (0.664 0.74 0.095 0.741 0.091 0.665 0.432 0.872 0.818 0.872)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.49
Average program size in population (points): 46.233
Average percent parens in population: 0.212
Minimum age in population: 17.85546875
Maximum age in population: 22.6265869140625
Average age in population: 20.65518432617188
Median age in population: 20.7432861328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 61
Genome diversity (% unique genomes):	 0.633
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 62
Syntactic diversity (% unique Push programs):	 0.608
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 6916907
--- Timings ---
Current time: 1559584385916 milliseconds
Total Time:          41.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        29.5 seconds, 71.9%
Fitness Testing:      6.8 seconds, 16.5%
Report:               4.7 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 669
Test mean error for best: 0.66900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -11                
Correct output: -100                | Program output: -5                 
Correct output: -84                 | Program output: -26                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: 56                 
Correct output: -92                 | Program output: -55                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -11                
Correct output: -74                 | Program output: -51                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 36                 
Correct output: 12                  | Program output: 14                 
Correct output: 17                  | Program output: 100                
Correct output: 13                  | Program output: 13                 
Correct output: 71                  | Program output: 71                 
Correct output: 8                   | Program output: 69                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 90                 
Correct output: 1                   | Program output: 98                 
Correct output: 38                  | Program output: 38                 
Correct output: 18                  | Program output: 69                 
Correct output: 21                  | Program output: 21                 
Correct output: 41                  | Program output: 50                 
Correct output: 12                  | Program output: 100                
Correct output: 3                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 53                 
Correct output: 7                   | Program output: 18                 
Correct output: 34                  | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -14                 | Program output: 46                 
Correct output: -84                 | Program output: 47                 
Correct output: -75                 | Program output: -63                
Correct output: -70                 | Program output: -46                
Correct output: -75                 | Program output: -59                
Correct output: -60                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: 48                 
Correct output: -16                 | Program output: -16                
Correct output: -55                 | Program output: -10                
Correct output: -55                 | Program output: 54                 
Correct output: -76                 | Program output: 22                 
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -53                
Correct output: -39                 | Program output: -33                
Correct output: -79                 | Program output: -52                
Correct output: -72                 | Program output: -29                
Correct output: -85                 | Program output: 90                 
Correct output: -91                 | Program output: 97                 
Correct output: -58                 | Program output: -33                
Correct output: 34                  | Program output: 43                 
Correct output: -6                  | Program output: -6                 
Correct output: -74                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: -85                 | Program output: 62                 
Correct output: -68                 | Program output: 53                 
Correct output: -91                 | Program output: 6                  
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: 72                 
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: 59                 
Correct output: -92                 | Program output: 94                 
Correct output: -63                 | Program output: 68                 
Correct output: -89                 | Program output: 70                 
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -69                
Correct output: -68                 | Program output: 24                 
Correct output: -26                 | Program output: 30                 
Correct output: -92                 | Program output: 45                 
Correct output: -40                 | Program output: -40                
Correct output: -91                 | Program output: 92                 
Correct output: -84                 | Program output: -84                
Correct output: -54                 | Program output: 44                 
Correct output: -36                 | Program output: -14                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: 25                 
Correct output: -95                 | Program output: -53                
Correct output: -65                 | Program output: 70                 
Correct output: -68                 | Program output: 4                  
Correct output: -36                 | Program output: 19                 
Correct output: -14                 | Program output: 82                 
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: 77                 
Correct output: 23                  | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 3, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 2, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Lexicase best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank exec_s_when_autoconstructing () (in3 boolean_yank integer_shove boolean_not) (integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank boolean_dup boolean_invert_first_then_and) boolean_flush integer_dup_items exec_empty integer_dup integer_eq integer_pop integer_dup integer_eq integer_pop integer_max integer_mult in2 integer_gte in3 integer_swap boolean_dup exec_y_when_autoconstructing (boolean_yank) print_integer boolean_dup exec_pop (exec_do*count ()))
Lexicase best errors: [1 1 1 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 47
Percent parens: 0.170
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 3, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 2, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Zero cases best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank exec_s_when_autoconstructing () (in3 boolean_yank integer_shove boolean_not) (integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank boolean_dup boolean_invert_first_then_and) boolean_flush integer_dup_items exec_empty integer_dup integer_eq integer_pop integer_dup integer_eq integer_pop integer_max integer_mult in2 integer_gte in3 integer_swap boolean_dup exec_y_when_autoconstructing (boolean_yank) print_integer boolean_dup exec_pop (exec_do*count ()))
Zero cases best errors: [1 1 1 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 47
Percent parens: 0.170
--- Lexicase Population Statistics ---
Count of elite individuals by case: (264 279 267 362 133 364 216 216 216 364)
Population mean number of elite cases: 2.68
Count of perfect (error zero) individuals by case: (264 279 267 362 133 364 216 216 216 364)
Population mean number of perfect (error zero) cases: 2.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_706} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction -86} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush})
Best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank exec_s_when_autoconstructing () (in3 boolean_yank integer_shove boolean_not) (integer_yank) print_integer exec_k (integer_min integer_dup exec_stackdepth exec_y_when_autoconstructing (tagged_706 boolean_invert_first_then_and) integer_flush) (exec_dup_times (boolean_dup -86 integer_max exec_k (exec_k (exec_flush) ()) ())))
Errors: [1 1 1 0 1 0 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 26
Size: 39
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 7.319
Median total errors in population: 8
Error averages by case: (0.736 0.721 0.733 0.638 0.867 0.636 0.784 0.784 0.784 0.636)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.966
Average program size in population (points): 44.175
Average percent parens in population: 0.207
Minimum age in population: 19.5693359375
Maximum age in population: 24.09600830078125
Average age in population: 22.31310363769531
Median age in population: 22.32669067382812
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 101
Genome diversity (% unique genomes):	 0.688
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 111
Syntactic diversity (% unique Push programs):	 0.658
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 7265480
--- Timings ---
Current time: 1559584388599 milliseconds
Total Time:          43.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        31.7 seconds, 72.4%
Fitness Testing:      7.0 seconds, 16.0%
Report:               4.9 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -53                
Correct output: -43                 | Program output: 56                 
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: -51                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 36                 
Correct output: 16                  | Program output: 48                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 21                 
Correct output: 13                  | Program output: 100                
Correct output: 71                  | Program output: 96                 
Correct output: 8                   | Program output: 45                 
Correct output: 1                   | Program output: 36                 
Correct output: 68                  | Program output: 80                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 71                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 30                 
Correct output: 41                  | Program output: 41                 
Correct output: 12                  | Program output: 58                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 29                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 34                  | Program output: 52                 
Correct output: -80                 | Program output: 80                 
Correct output: -14                 | Program output: 58                 
Correct output: -84                 | Program output: 94                 
Correct output: -75                 | Program output: 88                 
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -11                
Correct output: -98                 | Program output: 0                  
Correct output: -94                 | Program output: -94                
Correct output: -16                 | Program output: 59                 
Correct output: -55                 | Program output: 83                 
Correct output: -55                 | Program output: -55                
Correct output: -76                 | Program output: 11                 
Correct output: -4                  | Program output: 43                 
Correct output: -90                 | Program output: 21                 
Correct output: -39                 | Program output: -34                
Correct output: -79                 | Program output: 77                 
Correct output: -72                 | Program output: -72                
Correct output: -85                 | Program output: 98                 
Correct output: -91                 | Program output: -91                
Correct output: -58                 | Program output: 50                 
Correct output: 34                  | Program output: 83                 
Correct output: -6                  | Program output: 37                 
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -30                
Correct output: -85                 | Program output: -84                
Correct output: -68                 | Program output: 91                 
Correct output: -91                 | Program output: -4                 
Correct output: -78                 | Program output: 85                 
Correct output: -95                 | Program output: -37                
Correct output: -91                 | Program output: 45                 
Correct output: -25                 | Program output: -25                
Correct output: -92                 | Program output: 6                  
Correct output: -63                 | Program output: 5                  
Correct output: -89                 | Program output: 4                  
Correct output: -44                 | Program output: -29                
Correct output: -66                 | Program output: -48                
Correct output: -67                 | Program output: 24                 
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -40                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -19                
Correct output: -40                 | Program output: 11                 
Correct output: -91                 | Program output: -22                
Correct output: -84                 | Program output: -56                
Correct output: -54                 | Program output: 85                 
Correct output: -36                 | Program output: -36                
Correct output: -20                 | Program output: 38                 
Correct output: -54                 | Program output: 92                 
Correct output: -54                 | Program output: 75                 
Correct output: -98                 | Program output: -65                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -27                
Correct output: -68                 | Program output: -55                
Correct output: -36                 | Program output: 35                 
Correct output: -14                 | Program output: -14                
Correct output: -98                 | Program output: 60                 
Correct output: -64                 | Program output: 40                 
Correct output: -76                 | Program output: 27                 
Correct output: 23                  | Program output: 23                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction -91} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction boolean_pop} {:close 1, :instruction tagged_601} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_706} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction -86} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush})
Lexicase best program: (in4 print_integer exec_shove (-91 boolean_not) exec_do*while (in1) integer_eq boolean_empty boolean_frominteger boolean_pop tagged_601 print_integer exec_yankdup boolean_swap exec_yankdup integer_dup exec_stackdepth exec_flush tagged_706 boolean_invert_first_then_and integer_flush exec_dup_times (exec_y_when_autoconstructing (-86 integer_max boolean_not exec_k (exec_flush) ())))
Lexicase best errors: [0 0 0 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 36
Percent parens: 0.194
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction -91} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction boolean_pop} {:close 1, :instruction tagged_601} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_706} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction -86} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush})
Zero cases best program: (in4 print_integer exec_shove (-91 boolean_not) exec_do*while (in1) integer_eq boolean_empty boolean_frominteger boolean_pop tagged_601 print_integer exec_yankdup boolean_swap exec_yankdup integer_dup exec_stackdepth exec_flush tagged_706 boolean_invert_first_then_and integer_flush exec_dup_times (exec_y_when_autoconstructing (-86 integer_max boolean_not exec_k (exec_flush) ())))
Zero cases best errors: [0 0 0 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 36
Percent parens: 0.194
--- Lexicase Population Statistics ---
Count of elite individuals by case: (172 171 903 171 172 553 171 656 738 14)
Population mean number of elite cases: 3.72
Count of perfect (error zero) individuals by case: (172 171 903 171 172 553 171 656 738 14)
Population mean number of perfect (error zero) cases: 3.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction -91} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 1, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 2, :instruction exec_do*while} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count})
Best program: (in4 print_integer exec_shove (-91 boolean_not) exec_flush in1 exec_yankdup integer_yank boolean_dup boolean_invert_first_then_and boolean_flush integer_dup_items exec_empty integer_dup integer_eq integer_pop integer_max integer_mult in2 exec_do*while () in3 boolean_yank boolean_or boolean_dup exec_k (exec_do*count ()) ())
Errors: [0 0 0 0 0 1 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 27
Size: 33
Percent parens: 0.182
--- Population Statistics ---
Average total errors in population: 6.279
Median total errors in population: 6
Error averages by case: (0.828 0.829 0.097 0.829 0.828 0.447 0.829 0.344 0.262 0.986)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.358
Average program size in population (points): 42.731
Average percent parens in population: 0.196
Minimum age in population: 20.5693359375
Maximum age in population: 25.59329223632812
Average age in population: 23.65921298217773
Median age in population: 23.73135375976562
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 67
Genome diversity (% unique genomes):	 0.698
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 76
Syntactic diversity (% unique Push programs):	 0.659
Total error diversity:				 0.006
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 7629621
--- Timings ---
Current time: 1559584391441 milliseconds
Total Time:          46.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.1 seconds, 73.1%
Fitness Testing:      7.3 seconds, 15.6%
Report:               5.1 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -53                
Correct output: -43                 | Program output: 56                 
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: -51                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 36                 
Correct output: 16                  | Program output: 48                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 21                 
Correct output: 13                  | Program output: 100                
Correct output: 71                  | Program output: 96                 
Correct output: 8                   | Program output: 45                 
Correct output: 1                   | Program output: 36                 
Correct output: 68                  | Program output: 80                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 71                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 30                 
Correct output: 41                  | Program output: 41                 
Correct output: 12                  | Program output: 58                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 29                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 34                  | Program output: 52                 
Correct output: -80                 | Program output: 80                 
Correct output: -14                 | Program output: 58                 
Correct output: -84                 | Program output: 94                 
Correct output: -75                 | Program output: 88                 
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -11                
Correct output: -98                 | Program output: 0                  
Correct output: -94                 | Program output: -94                
Correct output: -16                 | Program output: 59                 
Correct output: -55                 | Program output: 83                 
Correct output: -55                 | Program output: -55                
Correct output: -76                 | Program output: 11                 
Correct output: -4                  | Program output: 43                 
Correct output: -90                 | Program output: 21                 
Correct output: -39                 | Program output: -34                
Correct output: -79                 | Program output: 77                 
Correct output: -72                 | Program output: -72                
Correct output: -85                 | Program output: 98                 
Correct output: -91                 | Program output: -91                
Correct output: -58                 | Program output: 50                 
Correct output: 34                  | Program output: 83                 
Correct output: -6                  | Program output: 37                 
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -30                
Correct output: -85                 | Program output: -84                
Correct output: -68                 | Program output: 91                 
Correct output: -91                 | Program output: -4                 
Correct output: -78                 | Program output: 85                 
Correct output: -95                 | Program output: -37                
Correct output: -91                 | Program output: 45                 
Correct output: -25                 | Program output: -25                
Correct output: -92                 | Program output: 6                  
Correct output: -63                 | Program output: 5                  
Correct output: -89                 | Program output: 4                  
Correct output: -44                 | Program output: -29                
Correct output: -66                 | Program output: -48                
Correct output: -67                 | Program output: 24                 
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -40                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -19                
Correct output: -40                 | Program output: 11                 
Correct output: -91                 | Program output: -22                
Correct output: -84                 | Program output: -56                
Correct output: -54                 | Program output: 85                 
Correct output: -36                 | Program output: -36                
Correct output: -20                 | Program output: 38                 
Correct output: -54                 | Program output: 92                 
Correct output: -54                 | Program output: 75                 
Correct output: -98                 | Program output: -65                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -27                
Correct output: -68                 | Program output: -55                
Correct output: -36                 | Program output: 35                 
Correct output: -14                 | Program output: -14                
Correct output: -98                 | Program output: 60                 
Correct output: -64                 | Program output: 40                 
Correct output: -76                 | Program output: 27                 
Correct output: 23                  | Program output: 23                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction tagged_432} {:close 2, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_740} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction -87} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush})
Lexicase best program: (exec_pop () tagged_432 boolean_and integer_eq integer_fromboolean integer_add in4 exec_if () (print_integer exec_k (integer_min integer_dup exec_stackdepth exec_flush tagged_740 boolean_invert_first_then_and) (integer_flush) exec_dup_times (boolean_eq -87 integer_max exec_k (exec_k (exec_flush) ()) ())))
Lexicase best errors: [0 0 1 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 35
Percent parens: 0.314
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction tagged_432} {:close 2, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_740} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction -87} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush})
Zero cases best program: (exec_pop () tagged_432 boolean_and integer_eq integer_fromboolean integer_add in4 exec_if () (print_integer exec_k (integer_min integer_dup exec_stackdepth exec_flush tagged_740 boolean_invert_first_then_and) (integer_flush) exec_dup_times (boolean_eq -87 integer_max exec_k (exec_k (exec_flush) ()) ())))
Zero cases best errors: [0 0 1 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 35
Percent parens: 0.314
--- Lexicase Population Statistics ---
Count of elite individuals by case: (565 909 10 565 565 915 149 148 153 565)
Population mean number of elite cases: 4.54
Count of perfect (error zero) individuals by case: (565 909 10 565 565 915 149 148 153 565)
Population mean number of perfect (error zero) cases: 4.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_dup})
Best program: (boolean_dup_items boolean_flush exec_shove () integer_dup boolean_frominteger integer_pop in4 integer_yank print_integer exec_k (integer_min integer_dup exec_stackdepth exec_flush boolean_dup_times integer_gte integer_dup_times integer_stackdepth boolean_eq integer_empty boolean_empty exec_do*times (exec_if (boolean_yank exec_yankdup integer_gt) (exec_when (integer_max integer_min integer_div integer_inc integer_eq integer_pop) integer_max) integer_mult in2 integer_gte) in3 integer_swap) (boolean_dup))
Errors: [0 0 1 0 0 0 1 1 1 0]
Total: 4
Mean: 0.4
Genome size: 40
Size: 48
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 5.456
Median total errors in population: 4
Error averages by case: (0.435 0.091 0.99 0.435 0.435 0.085 0.851 0.852 0.847 0.435)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.54
Average program size in population (points): 44.429
Average percent parens in population: 0.225
Minimum age in population: 21.5693359375
Maximum age in population: 27.23223876953125
Average age in population: 25.34052305603027
Median age in population: 25.35367584228516
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 106
Genome diversity (% unique genomes):	 0.619
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 108
Syntactic diversity (% unique Push programs):	 0.594
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 7982974
--- Timings ---
Current time: 1559584393672 milliseconds
Total Time:          48.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.9 seconds, 73.5%
Fitness Testing:      7.6 seconds, 15.5%
Report:               5.3 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 560
Test mean error for best: 0.56000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -11                
Correct output: -100                | Program output: -5                 
Correct output: -84                 | Program output: -26                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: 56                 
Correct output: -92                 | Program output: -55                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -11                
Correct output: -74                 | Program output: -51                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 59                 
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 30                 
Correct output: 17                  | Program output: 59                 
Correct output: 13                  | Program output: 37                 
Correct output: 71                  | Program output: 72                 
Correct output: 8                   | Program output: 81                 
Correct output: 1                   | Program output: 2                  
Correct output: 68                  | Program output: 71                 
Correct output: 1                   | Program output: 33                 
Correct output: 38                  | Program output: 59                 
Correct output: 18                  | Program output: 89                 
Correct output: 21                  | Program output: 21                 
Correct output: 41                  | Program output: 71                 
Correct output: 12                  | Program output: 12                 
Correct output: 3                   | Program output: 65                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 33                 
Correct output: 7                   | Program output: 18                 
Correct output: 34                  | Program output: 60                 
Correct output: -80                 | Program output: -80                
Correct output: -14                 | Program output: 63                 
Correct output: -84                 | Program output: -20                
Correct output: -75                 | Program output: -63                
Correct output: -70                 | Program output: -46                
Correct output: -75                 | Program output: -59                
Correct output: -60                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -72                
Correct output: -16                 | Program output: -16                
Correct output: -55                 | Program output: -10                
Correct output: -55                 | Program output: 13                 
Correct output: -76                 | Program output: 22                 
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -53                
Correct output: -39                 | Program output: -33                
Correct output: -79                 | Program output: -52                
Correct output: -72                 | Program output: -29                
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -80                
Correct output: -58                 | Program output: -33                
Correct output: 34                  | Program output: 54                 
Correct output: -6                  | Program output: -6                 
Correct output: -74                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: -85                 | Program output: 68                 
Correct output: -68                 | Program output: -68                
Correct output: -91                 | Program output: -91                
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: 9                  
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: 60                 
Correct output: -92                 | Program output: -23                
Correct output: -63                 | Program output: 60                 
Correct output: -89                 | Program output: -10                
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -69                
Correct output: -68                 | Program output: 24                 
Correct output: -26                 | Program output: 41                 
Correct output: -92                 | Program output: 53                 
Correct output: -40                 | Program output: -40                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: -84                
Correct output: -54                 | Program output: -37                
Correct output: -36                 | Program output: -14                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -71                
Correct output: -95                 | Program output: -53                
Correct output: -65                 | Program output: -39                
Correct output: -68                 | Program output: -68                
Correct output: -36                 | Program output: 19                 
Correct output: -14                 | Program output: 26                 
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: -76                
Correct output: 23                  | Program output: 58                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Lexicase best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank exec_s_when_autoconstructing () (in3 exec_shove (integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap boolean_not integer_yank tag_boolean_339 exec_yankdup boolean_swap integer_eq integer_yank boolean_dup boolean_invert_first_then_and) () boolean_flush integer_dup_items exec_empty integer_dup boolean_dup integer_pop integer_max integer_mult in2 exec_do*while () in3 boolean_dup_times in1 in3 boolean_yank print_integer boolean_dup exec_pop (exec_do*count ()))
Lexicase best errors: [0 1 0 0 0 0 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 50
Percent parens: 0.180
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Zero cases best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank exec_s_when_autoconstructing () (in3 exec_shove (integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap boolean_not integer_yank tag_boolean_339 exec_yankdup boolean_swap integer_eq integer_yank boolean_dup boolean_invert_first_then_and) () boolean_flush integer_dup_items exec_empty integer_dup boolean_dup integer_pop integer_max integer_mult in2 exec_do*while () in3 boolean_dup_times in1 in3 boolean_yank print_integer boolean_dup exec_pop (exec_do*count ()))
Zero cases best errors: [0 1 0 0 0 0 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 50
Percent parens: 0.180
--- Lexicase Population Statistics ---
Count of elite individuals by case: (322 463 278 308 308 320 108 463 320 29)
Population mean number of elite cases: 2.92
Count of perfect (error zero) individuals by case: (322 463 278 308 308 320 108 463 320 29)
Population mean number of perfect (error zero) cases: 2.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank exec_s_when_autoconstructing () (in3 exec_shove (integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap integer_eq integer_yank boolean_dup boolean_invert_first_then_and) () boolean_flush integer_dup_items exec_empty integer_dup boolean_dup integer_pop integer_max integer_mult in2 exec_do*while () in3 boolean_dup_times in1 in3 boolean_yank print_integer boolean_dup exec_pop (exec_do*count ()))
Errors: [0 1 0 0 0 0 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 41
Size: 50
Percent parens: 0.180
--- Population Statistics ---
Average total errors in population: 7.081
Median total errors in population: 8
Error averages by case: (0.678 0.537 0.722 0.692 0.692 0.68 0.892 0.537 0.68 0.971)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.032
Average program size in population (points): 45.717
Average percent parens in population: 0.214
Minimum age in population: 23.99774169921875
Maximum age in population: 28.52780914306641
Average age in population: 26.98454238891602
Median age in population: 27.10775756835938
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 105
Genome diversity (% unique genomes):	 0.597
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 109
Syntactic diversity (% unique Push programs):	 0.569
Total error diversity:				 0.007
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 8358407
--- Timings ---
Current time: 1559584396340 milliseconds
Total Time:          51.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.9 seconds, 73.8%
Fitness Testing:      7.9 seconds, 15.3%
Report:               5.5 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -68                 | Program output: 12                 
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -5                 
Correct output: -84                 | Program output: -26                
Correct output: -66                 | Program output: -53                
Correct output: -43                 | Program output: 56                 
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -11                
Correct output: -74                 | Program output: -51                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 59                 
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 30                 
Correct output: 17                  | Program output: 59                 
Correct output: 13                  | Program output: 37                 
Correct output: 71                  | Program output: 72                 
Correct output: 8                   | Program output: 81                 
Correct output: 1                   | Program output: 2                  
Correct output: 68                  | Program output: 71                 
Correct output: 1                   | Program output: 33                 
Correct output: 38                  | Program output: 59                 
Correct output: 18                  | Program output: 89                 
Correct output: 21                  | Program output: 32                 
Correct output: 41                  | Program output: 71                 
Correct output: 12                  | Program output: 12                 
Correct output: 3                   | Program output: 65                 
Correct output: 19                  | Program output: 33                 
Correct output: 19                  | Program output: 33                 
Correct output: 7                   | Program output: 49                 
Correct output: 34                  | Program output: 60                 
Correct output: -80                 | Program output: -58                
Correct output: -14                 | Program output: 63                 
Correct output: -84                 | Program output: -20                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: 1                  
Correct output: -75                 | Program output: 33                 
Correct output: -60                 | Program output: 48                 
Correct output: -98                 | Program output: -70                
Correct output: -94                 | Program output: -72                
Correct output: -16                 | Program output: 50                 
Correct output: -55                 | Program output: -55                
Correct output: -55                 | Program output: 13                 
Correct output: -76                 | Program output: -76                
Correct output: -4                  | Program output: 16                 
Correct output: -90                 | Program output: -5                 
Correct output: -39                 | Program output: -12                
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: -42                
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -80                
Correct output: -58                 | Program output: -20                
Correct output: 34                  | Program output: 54                 
Correct output: -6                  | Program output: 38                 
Correct output: -74                 | Program output: 84                 
Correct output: -47                 | Program output: -28                
Correct output: -85                 | Program output: 68                 
Correct output: -68                 | Program output: -68                
Correct output: -91                 | Program output: -91                
Correct output: -78                 | Program output: -25                
Correct output: -95                 | Program output: 9                  
Correct output: -91                 | Program output: -84                
Correct output: -25                 | Program output: 60                 
Correct output: -92                 | Program output: -23                
Correct output: -63                 | Program output: 60                 
Correct output: -89                 | Program output: -10                
Correct output: -44                 | Program output: 100                
Correct output: -66                 | Program output: 51                 
Correct output: -67                 | Program output: -51                
Correct output: -84                 | Program output: -21                
Correct output: -68                 | Program output: 24                 
Correct output: -26                 | Program output: 40                 
Correct output: -92                 | Program output: 53                 
Correct output: -40                 | Program output: 32                 
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: 22                 
Correct output: -54                 | Program output: -37                
Correct output: -36                 | Program output: 91                 
Correct output: -20                 | Program output: -17                
Correct output: -54                 | Program output: 90                 
Correct output: -54                 | Program output: -6                 
Correct output: -98                 | Program output: -71                
Correct output: -95                 | Program output: -93                
Correct output: -65                 | Program output: -39                
Correct output: -68                 | Program output: -68                
Correct output: -36                 | Program output: -36                
Correct output: -14                 | Program output: 26                 
Correct output: -98                 | Program output: 79                 
Correct output: -64                 | Program output: -22                
Correct output: -76                 | Program output: -76                
Correct output: 23                  | Program output: 58                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Lexicase best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank exec_s_when_autoconstructing () (in3 exec_shove (integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and)) (boolean_flush integer_dup_items exec_empty integer_dup boolean_dup exec_empty integer_dup boolean_dup integer_pop) integer_max integer_mult in2 exec_do*while () in3 boolean_dup_times in1 in3 boolean_yank print_integer boolean_dup exec_pop (exec_do*count ()))
Lexicase best errors: [0 1 0 0 0 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 54
Percent parens: 0.185
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Zero cases best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank exec_s_when_autoconstructing () (in3 exec_shove (integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and)) (boolean_flush integer_dup_items exec_empty integer_dup boolean_dup exec_empty integer_dup boolean_dup integer_pop) integer_max integer_mult in2 exec_do*while () in3 boolean_dup_times in1 in3 boolean_yank print_integer boolean_dup exec_pop (exec_do*count ()))
Zero cases best errors: [0 1 0 0 0 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 54
Percent parens: 0.185
--- Lexicase Population Statistics ---
Count of elite individuals by case: (193 197 912 385 34 2 2 2 587 30)
Population mean number of elite cases: 2.34
Count of perfect (error zero) individuals by case: (193 197 912 385 34 2 2 2 587 30)
Population mean number of perfect (error zero) cases: 2.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction tag_boolean_511} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank exec_s_when_autoconstructing () (in3 exec_shove (integer_shove boolean_not) exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap integer_eq integer_yank boolean_dup boolean_invert_first_then_and) () boolean_flush integer_dup_items integer_pop integer_max in2 exec_do*while () in3 boolean_dup_times in1 tag_boolean_511 boolean_yank print_integer boolean_dup exec_pop (exec_do*count ()))
Errors: [0 1 0 0 0 1 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 35
Size: 44
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 7.656
Median total errors in population: 8
Error averages by case: (0.807 0.803 0.088 0.615 0.966 0.998 0.998 0.998 0.413 0.97)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.0
Average program size in population (points): 48.597
Average percent parens in population: 0.199
Minimum age in population: 25.5142822265625
Maximum age in population: 30.14781951904297
Average age in population: 28.51996436691284
Median age in population: 28.59506225585938
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 45
Genome diversity (% unique genomes):	 0.623
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.591
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 8767715
--- Timings ---
Current time: 1559584398752 milliseconds
Total Time:          53.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.7 seconds, 73.7%
Fitness Testing:      8.2 seconds, 15.2%
Report:               5.8 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -5                 
Correct output: -84                 | Program output: -26                
Correct output: -66                 | Program output: -53                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 77                 
Correct output: -80                 | Program output: -11                
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 26                 
Correct output: 16                  | Program output: 52                 
Correct output: 12                  | Program output: 68                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 82                 
Correct output: 71                  | Program output: 91                 
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 13                 
Correct output: 68                  | Program output: 68                 
Correct output: 1                   | Program output: 58                 
Correct output: 38                  | Program output: 74                 
Correct output: 18                  | Program output: 20                 
Correct output: 21                  | Program output: 25                 
Correct output: 41                  | Program output: 49                 
Correct output: 12                  | Program output: 21                 
Correct output: 3                   | Program output: 39                 
Correct output: 19                  | Program output: 47                 
Correct output: 19                  | Program output: 57                 
Correct output: 7                   | Program output: 46                 
Correct output: 34                  | Program output: 59                 
Correct output: -80                 | Program output: -78                
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -58                
Correct output: -70                 | Program output: -68                
Correct output: -75                 | Program output: -69                
Correct output: -60                 | Program output: 32                 
Correct output: -98                 | Program output: 87                 
Correct output: -94                 | Program output: -66                
Correct output: -16                 | Program output: 59                 
Correct output: -55                 | Program output: 83                 
Correct output: -55                 | Program output: 68                 
Correct output: -76                 | Program output: -76                
Correct output: -4                  | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -39                 | Program output: -39                
Correct output: -79                 | Program output: 65                 
Correct output: -72                 | Program output: -13                
Correct output: -85                 | Program output: -58                
Correct output: -91                 | Program output: -80                
Correct output: -58                 | Program output: -58                
Correct output: 34                  | Program output: 34                 
Correct output: -6                  | Program output: 90                 
Correct output: -74                 | Program output: -70                
Correct output: -47                 | Program output: 12                 
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: 91                 
Correct output: -91                 | Program output: 67                 
Correct output: -78                 | Program output: 97                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: 4                  
Correct output: -25                 | Program output: 10                 
Correct output: -92                 | Program output: -92                
Correct output: -63                 | Program output: -63                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: 70                 
Correct output: -66                 | Program output: 68                 
Correct output: -67                 | Program output: 98                 
Correct output: -84                 | Program output: 61                 
Correct output: -68                 | Program output: 84                 
Correct output: -26                 | Program output: 41                 
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -20                
Correct output: -91                 | Program output: -75                
Correct output: -84                 | Program output: -56                
Correct output: -54                 | Program output: -54                
Correct output: -36                 | Program output: 73                 
Correct output: -20                 | Program output: 0                  
Correct output: -54                 | Program output: 87                 
Correct output: -54                 | Program output: 80                 
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 4                  
Correct output: -36                 | Program output: 95                 
Correct output: -14                 | Program output: 19                 
Correct output: -98                 | Program output: -65                
Correct output: -64                 | Program output: 87                 
Correct output: -76                 | Program output: -15                
Correct output: 23                  | Program output: 68                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Lexicase best program: (exec_k (boolean_invert_second_then_and) (boolean_frominteger exec_yank exec_s_when_autoconstructing () (in3 exec_shove (integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap integer_eq integer_yank boolean_dup boolean_invert_first_then_and) () boolean_flush integer_dup_items exec_empty integer_dup boolean_dup integer_pop) integer_max integer_mult in2 print_integer boolean_dup exec_pop (exec_do*count ()))
Lexicase best errors: [0 1 0 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 44
Percent parens: 0.205
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Zero cases best program: (exec_k (boolean_invert_second_then_and) (boolean_frominteger exec_yank exec_s_when_autoconstructing () (in3 exec_shove (integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap integer_eq integer_yank boolean_dup boolean_invert_first_then_and) () boolean_flush integer_dup_items exec_empty integer_dup boolean_dup integer_pop) integer_max integer_mult in2 print_integer boolean_dup exec_pop (exec_do*count ()))
Zero cases best errors: [0 1 0 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 44
Percent parens: 0.205
--- Lexicase Population Statistics ---
Count of elite individuals by case: (896 512 404 32 10 405 342 10 404 404)
Population mean number of elite cases: 3.42
Count of perfect (error zero) individuals by case: (896 512 404 32 10 405 342 10 404 404)
Population mean number of perfect (error zero) cases: 3.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Best program: (exec_k (boolean_invert_second_then_and) (boolean_frominteger exec_yank exec_s_when_autoconstructing () (in3 exec_shove (integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap integer_eq integer_yank boolean_dup boolean_invert_first_then_and) () boolean_flush integer_dup_items) exec_empty integer_dup boolean_dup integer_pop integer_max integer_mult in2 print_integer boolean_dup exec_pop (exec_do*count ()))
Errors: [0 1 0 1 1 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 35
Size: 44
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 6.581
Median total errors in population: 7
Error averages by case: (0.104 0.488 0.596 0.968 0.99 0.595 0.658 0.99 0.596 0.596)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.688
Average program size in population (points): 48.047
Average percent parens in population: 0.195
Minimum age in population: 28.85140991210938
Maximum age in population: 31.10775756835938
Average age in population: 30.01852241516113
Median age in population: 30.10775756835938
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 252
Genome diversity (% unique genomes):	 0.469
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 254
Syntactic diversity (% unique Push programs):	 0.447
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 9056990
--- Timings ---
Current time: 1559584400991 milliseconds
Total Time:          56.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.5 seconds, 73.9%
Fitness Testing:      8.4 seconds, 15.0%
Report:               6.1 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 564
Test mean error for best: 0.56400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -11                
Correct output: -100                | Program output: -5                 
Correct output: -84                 | Program output: -26                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: 56                 
Correct output: -92                 | Program output: -55                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -11                
Correct output: -74                 | Program output: -51                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 59                 
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 30                 
Correct output: 17                  | Program output: 59                 
Correct output: 13                  | Program output: 37                 
Correct output: 71                  | Program output: 72                 
Correct output: 8                   | Program output: 81                 
Correct output: 1                   | Program output: 2                  
Correct output: 68                  | Program output: 71                 
Correct output: 1                   | Program output: 33                 
Correct output: 38                  | Program output: 59                 
Correct output: 18                  | Program output: 89                 
Correct output: 21                  | Program output: 32                 
Correct output: 41                  | Program output: 71                 
Correct output: 12                  | Program output: 12                 
Correct output: 3                   | Program output: 65                 
Correct output: 19                  | Program output: 33                 
Correct output: 19                  | Program output: 33                 
Correct output: 7                   | Program output: 49                 
Correct output: 34                  | Program output: 60                 
Correct output: -80                 | Program output: -80                
Correct output: -14                 | Program output: 63                 
Correct output: -84                 | Program output: -20                
Correct output: -75                 | Program output: -63                
Correct output: -70                 | Program output: -46                
Correct output: -75                 | Program output: -59                
Correct output: -60                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -72                
Correct output: -16                 | Program output: -16                
Correct output: -55                 | Program output: -10                
Correct output: -55                 | Program output: 13                 
Correct output: -76                 | Program output: 55                 
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -53                
Correct output: -39                 | Program output: -33                
Correct output: -79                 | Program output: -52                
Correct output: -72                 | Program output: -29                
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -80                
Correct output: -58                 | Program output: -33                
Correct output: 34                  | Program output: 54                 
Correct output: -6                  | Program output: -6                 
Correct output: -74                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: -85                 | Program output: 68                 
Correct output: -68                 | Program output: -68                
Correct output: -91                 | Program output: -91                
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: 9                  
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: 60                 
Correct output: -92                 | Program output: -23                
Correct output: -63                 | Program output: 60                 
Correct output: -89                 | Program output: -10                
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -69                
Correct output: -68                 | Program output: -68                
Correct output: -26                 | Program output: 40                 
Correct output: -92                 | Program output: 53                 
Correct output: -40                 | Program output: -40                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: -84                
Correct output: -54                 | Program output: -37                
Correct output: -36                 | Program output: -14                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -71                
Correct output: -95                 | Program output: -53                
Correct output: -65                 | Program output: -39                
Correct output: -68                 | Program output: -68                
Correct output: -36                 | Program output: -36                
Correct output: -14                 | Program output: 26                 
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: -76                
Correct output: 23                  | Program output: 58                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Lexicase best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank exec_s_when_autoconstructing () (in3 boolean_frominteger exec_yank exec_s_when_autoconstructing () (in3 exec_shove (integer_shove boolean_not) boolean_dup integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and)) (boolean_flush integer_dup_items exec_empty integer_dup boolean_dup integer_pop) integer_max) (integer_mult in2 boolean_dup integer_pop) integer_max integer_mult in2 exec_do*while () in3 boolean_dup_times in1 in3 boolean_yank exec_do*while () in3 boolean_dup_times in1 in3 boolean_yank print_integer boolean_dup exec_pop (exec_do*count ()))
Lexicase best errors: [0 0 0 1 1 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 70
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Zero cases best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank exec_s_when_autoconstructing () (in3 boolean_frominteger exec_yank exec_s_when_autoconstructing () (in3 exec_shove (integer_shove boolean_not) boolean_dup integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and)) (boolean_flush integer_dup_items exec_empty integer_dup boolean_dup integer_pop) integer_max) (integer_mult in2 boolean_dup integer_pop) integer_max integer_mult in2 exec_do*while () in3 boolean_dup_times in1 in3 boolean_yank exec_do*while () in3 boolean_dup_times in1 in3 boolean_yank print_integer boolean_dup exec_pop (exec_do*count ()))
Zero cases best errors: [0 0 0 1 1 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 70
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (181 209 119 185 176 205 119 421 421 421)
Population mean number of elite cases: 2.46
Count of perfect (error zero) individuals by case: (181 209 119 185 176 205 119 421 421 421)
Population mean number of perfect (error zero) cases: 2.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank exec_s_when_autoconstructing () (integer_shove boolean_not) (integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap integer_eq integer_yank boolean_dup boolean_dup exec_empty integer_dup boolean_dup integer_pop) integer_max integer_mult in2 exec_do*while () in3 boolean_dup_times in1 in3 boolean_yank print_integer integer_lte exec_pop (exec_do*count ()))
Errors: [0 0 0 1 1 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 37
Size: 45
Percent parens: 0.178
--- Population Statistics ---
Average total errors in population: 7.543
Median total errors in population: 7
Error averages by case: (0.819 0.791 0.881 0.815 0.824 0.795 0.881 0.579 0.579 0.579)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.974
Average program size in population (points): 48.649
Average percent parens in population: 0.199
Minimum age in population: 29.85140991210938
Maximum age in population: 32.95212554931641
Average age in population: 31.52950802993774
Median age in population: 31.58768081665039
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 168
Genome diversity (% unique genomes):	 0.598
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 170
Syntactic diversity (% unique Push programs):	 0.585
Total error diversity:				 0.006
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 9311847
--- Timings ---
Current time: 1559584403476 milliseconds
Total Time:          58.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.4 seconds, 74.2%
Fitness Testing:      8.7 seconds, 14.8%
Report:               6.3 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -5                 
Correct output: -84                 | Program output: -26                
Correct output: -66                 | Program output: -53                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 77                 
Correct output: -80                 | Program output: -11                
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 26                 
Correct output: 16                  | Program output: 52                 
Correct output: 12                  | Program output: 68                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 82                 
Correct output: 71                  | Program output: 91                 
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 13                 
Correct output: 68                  | Program output: 68                 
Correct output: 1                   | Program output: 58                 
Correct output: 38                  | Program output: 74                 
Correct output: 18                  | Program output: 20                 
Correct output: 21                  | Program output: 25                 
Correct output: 41                  | Program output: 49                 
Correct output: 12                  | Program output: 21                 
Correct output: 3                   | Program output: 39                 
Correct output: 19                  | Program output: 47                 
Correct output: 19                  | Program output: 57                 
Correct output: 7                   | Program output: 46                 
Correct output: 34                  | Program output: 59                 
Correct output: -80                 | Program output: -78                
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -58                
Correct output: -70                 | Program output: -68                
Correct output: -75                 | Program output: -69                
Correct output: -60                 | Program output: 32                 
Correct output: -98                 | Program output: 87                 
Correct output: -94                 | Program output: -66                
Correct output: -16                 | Program output: 59                 
Correct output: -55                 | Program output: 83                 
Correct output: -55                 | Program output: 68                 
Correct output: -76                 | Program output: -76                
Correct output: -4                  | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -39                 | Program output: -39                
Correct output: -79                 | Program output: 65                 
Correct output: -72                 | Program output: -13                
Correct output: -85                 | Program output: -58                
Correct output: -91                 | Program output: -80                
Correct output: -58                 | Program output: -58                
Correct output: 34                  | Program output: 34                 
Correct output: -6                  | Program output: 90                 
Correct output: -74                 | Program output: -70                
Correct output: -47                 | Program output: 12                 
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: 91                 
Correct output: -91                 | Program output: 67                 
Correct output: -78                 | Program output: 97                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: 4                  
Correct output: -25                 | Program output: 10                 
Correct output: -92                 | Program output: -92                
Correct output: -63                 | Program output: -63                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: 70                 
Correct output: -66                 | Program output: 68                 
Correct output: -67                 | Program output: 98                 
Correct output: -84                 | Program output: 61                 
Correct output: -68                 | Program output: 84                 
Correct output: -26                 | Program output: 41                 
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -20                
Correct output: -91                 | Program output: -75                
Correct output: -84                 | Program output: -56                
Correct output: -54                 | Program output: -54                
Correct output: -36                 | Program output: 73                 
Correct output: -20                 | Program output: 0                  
Correct output: -54                 | Program output: 87                 
Correct output: -54                 | Program output: 80                 
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 4                  
Correct output: -36                 | Program output: 95                 
Correct output: -14                 | Program output: 19                 
Correct output: -98                 | Program output: -65                
Correct output: -64                 | Program output: 87                 
Correct output: -76                 | Program output: -15                
Correct output: 23                  | Program output: 68                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Lexicase best program: (exec_k (boolean_invert_second_then_and) (boolean_frominteger exec_yank exec_s_when_autoconstructing () (in3 exec_shove (integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap integer_eq integer_yank boolean_dup boolean_invert_first_then_and) () boolean_flush integer_dup_items) exec_empty integer_dup boolean_dup integer_pop integer_max integer_mult in2 print_integer boolean_dup exec_pop (exec_do*count ()))
Lexicase best errors: [1 1 0 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 44
Percent parens: 0.205
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Zero cases best program: (exec_k (boolean_invert_second_then_and) (boolean_frominteger exec_yank exec_s_when_autoconstructing () (in3 exec_shove (integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap integer_eq integer_yank boolean_dup boolean_invert_first_then_and) () boolean_flush integer_dup_items) exec_empty integer_dup boolean_dup integer_pop integer_max integer_mult in2 print_integer boolean_dup exec_pop (exec_do*count ()))
Zero cases best errors: [1 1 0 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 44
Percent parens: 0.205
--- Lexicase Population Statistics ---
Count of elite individuals by case: (124 43 424 283 280 123 355 39 283 123)
Population mean number of elite cases: 2.08
Count of perfect (error zero) individuals by case: (124 43 424 283 280 123 355 39 283 123)
Population mean number of perfect (error zero) cases: 2.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction tagged_150} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Best program: (exec_k (boolean_invert_second_then_and) (boolean_frominteger exec_yank exec_s_when_autoconstructing () (in3 exec_shove (integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap integer_eq integer_yank boolean_dup boolean_invert_first_then_and) () boolean_flush integer_dup_items exec_empty integer_dup boolean_dup integer_pop) tagged_150 integer_mult in2 print_integer boolean_dup exec_pop (exec_do*count ()))
Errors: [1 1 0 0 0 1 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 35
Size: 44
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 7.923
Median total errors in population: 8
Error averages by case: (0.876 0.957 0.576 0.717 0.72 0.877 0.645 0.961 0.717 0.877)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.102
Average program size in population (points): 51.017
Average percent parens in population: 0.194
Minimum age in population: 31.22323608398438
Maximum age in population: 34.78732299804688
Average age in population: 33.3180175819397
Median age in population: 33.44436645507812
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 101
Genome diversity (% unique genomes):	 0.607
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 103
Syntactic diversity (% unique Push programs):	 0.591
Total error diversity:				 0.005
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 9652686
--- Timings ---
Current time: 1559584405733 milliseconds
Total Time:          60.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.2 seconds, 74.3%
Fitness Testing:      9.0 seconds, 14.7%
Report:               6.6 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 562
Test mean error for best: 0.56200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -11                
Correct output: -100                | Program output: -5                 
Correct output: -84                 | Program output: -26                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: -55                
Correct output: 7                   | Program output: 77                 
Correct output: -80                 | Program output: -11                
Correct output: -74                 | Program output: -51                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 26                 
Correct output: 16                  | Program output: 52                 
Correct output: 12                  | Program output: 14                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 71                  | Program output: 91                 
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 13                 
Correct output: 68                  | Program output: 68                 
Correct output: 1                   | Program output: 58                 
Correct output: 38                  | Program output: 74                 
Correct output: 18                  | Program output: 20                 
Correct output: 21                  | Program output:                    
Correct output: 41                  | Program output: 49                 
Correct output: 12                  | Program output: 21                 
Correct output: 3                   | Program output: 39                 
Correct output: 19                  | Program output: 47                 
Correct output: 19                  | Program output: 57                 
Correct output: 7                   | Program output:                    
Correct output: 34                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -63                
Correct output: -70                 | Program output: -46                
Correct output: -75                 | Program output: -59                
Correct output: -60                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -66                
Correct output: -16                 | Program output: -16                
Correct output: -55                 | Program output: -10                
Correct output: -55                 | Program output: 68                 
Correct output: -76                 | Program output: -76                
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -53                
Correct output: -39                 | Program output: -33                
Correct output: -79                 | Program output: -52                
Correct output: -72                 | Program output: -29                
Correct output: -85                 | Program output: -58                
Correct output: -91                 | Program output: -80                
Correct output: -58                 | Program output: -33                
Correct output: 34                  | Program output: 34                 
Correct output: -6                  | Program output: -6                 
Correct output: -74                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: 91                 
Correct output: -91                 | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: 10                 
Correct output: -92                 | Program output: -92                
Correct output: -63                 | Program output: -63                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -69                
Correct output: -68                 | Program output: 84                 
Correct output: -26                 | Program output: 41                 
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -91                 | Program output: -75                
Correct output: -84                 | Program output: -84                
Correct output: -54                 | Program output: -54                
Correct output: -36                 | Program output: -14                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -53                
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 4                  
Correct output: -36                 | Program output: 95                 
Correct output: -14                 | Program output: 19                 
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: -15                
Correct output: 23                  | Program output: 68                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Lexicase best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank exec_s_when_autoconstructing () (in3 exec_shove (integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and)) (boolean_flush integer_dup_items integer_lte integer_dup boolean_dup exec_empty integer_dup boolean_dup integer_pop) integer_max integer_mult in2 exec_do*while () in3 boolean_dup_times exec_k_when_autoconstructing (in3) (boolean_yank) print_integer boolean_dup exec_pop (exec_do*count ()))
Lexicase best errors: [0 1 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 56
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Zero cases best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank exec_s_when_autoconstructing () (in3 exec_shove (integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and)) (boolean_flush integer_dup_items integer_lte integer_dup boolean_dup exec_empty integer_dup boolean_dup integer_pop) integer_max integer_mult in2 exec_do*while () in3 boolean_dup_times exec_k_when_autoconstructing (in3) (boolean_yank) print_integer boolean_dup exec_pop (exec_do*count ()))
Zero cases best errors: [0 1 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 56
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (394 234 394 372 394 364 39 394 877 372)
Population mean number of elite cases: 3.83
Count of perfect (error zero) individuals by case: (394 234 394 372 394 364 39 394 877 372)
Population mean number of perfect (error zero) cases: 3.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank exec_s_when_autoconstructing () (in3 exec_shove (integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and)) (boolean_flush integer_dup_items integer_lte integer_dup boolean_dup exec_empty integer_dup boolean_dup integer_pop) integer_max integer_mult in2 exec_do*while () in3 boolean_dup_times exec_k_when_autoconstructing (in3) (boolean_yank) print_integer boolean_dup exec_pop (exec_do*count ()))
Errors: [0 1 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 44
Size: 56
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 6.166
Median total errors in population: 6
Error averages by case: (0.606 0.766 0.606 0.628 0.606 0.636 0.961 0.606 0.123 0.628)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.46
Average program size in population (points): 53.364
Average percent parens in population: 0.204
Minimum age in population: 32.22323608398438
Maximum age in population: 36.25000190734863
Average age in population: 34.90574293613434
Median age in population: 34.78045845031738
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 149
Genome diversity (% unique genomes):	 0.61
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 149
Syntactic diversity (% unique Push programs):	 0.601
Total error diversity:				 0.009
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 10004325
--- Timings ---
Current time: 1559584408168 milliseconds
Total Time:          63.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        47.0 seconds, 74.5%
Fitness Testing:      9.2 seconds, 14.6%
Report:               6.8 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -5                 
Correct output: -84                 | Program output: -26                
Correct output: -66                 | Program output: -53                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 77                 
Correct output: -80                 | Program output: -11                
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 26                 
Correct output: 16                  | Program output: 52                 
Correct output: 12                  | Program output: 14                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 71                  | Program output: 91                 
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 13                 
Correct output: 68                  | Program output: 68                 
Correct output: 1                   | Program output: 58                 
Correct output: 38                  | Program output: 74                 
Correct output: 18                  | Program output: 20                 
Correct output: 21                  | Program output: 25                 
Correct output: 41                  | Program output: 49                 
Correct output: 12                  | Program output: 21                 
Correct output: 3                   | Program output: 39                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 57                 
Correct output: 7                   | Program output: 46                 
Correct output: 34                  | Program output: 59                 
Correct output: -80                 | Program output: -78                
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -58                
Correct output: -70                 | Program output: -68                
Correct output: -75                 | Program output: -69                
Correct output: -60                 | Program output: 32                 
Correct output: -98                 | Program output: 87                 
Correct output: -94                 | Program output: -66                
Correct output: -16                 | Program output: 59                 
Correct output: -55                 | Program output: 83                 
Correct output: -55                 | Program output: 68                 
Correct output: -76                 | Program output: 22                 
Correct output: -4                  | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -39                 | Program output: -39                
Correct output: -79                 | Program output: 65                 
Correct output: -72                 | Program output: -13                
Correct output: -85                 | Program output: -58                
Correct output: -91                 | Program output: -80                
Correct output: -58                 | Program output: -58                
Correct output: 34                  | Program output: 34                 
Correct output: -6                  | Program output: 90                 
Correct output: -74                 | Program output: -70                
Correct output: -47                 | Program output: 12                 
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: 91                 
Correct output: -91                 | Program output: 67                 
Correct output: -78                 | Program output: 97                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: 4                  
Correct output: -25                 | Program output: 10                 
Correct output: -92                 | Program output: -92                
Correct output: -63                 | Program output: -63                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: 70                 
Correct output: -66                 | Program output: 68                 
Correct output: -67                 | Program output: 98                 
Correct output: -84                 | Program output: 61                 
Correct output: -68                 | Program output: 84                 
Correct output: -26                 | Program output: 41                 
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -20                
Correct output: -91                 | Program output: -75                
Correct output: -84                 | Program output: -56                
Correct output: -54                 | Program output: -54                
Correct output: -36                 | Program output: 73                 
Correct output: -20                 | Program output: 0                  
Correct output: -54                 | Program output: 87                 
Correct output: -54                 | Program output: 80                 
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 4                  
Correct output: -36                 | Program output: 19                 
Correct output: -14                 | Program output: 19                 
Correct output: -98                 | Program output: -65                
Correct output: -64                 | Program output: 87                 
Correct output: -76                 | Program output: -15                
Correct output: 23                  | Program output: 68                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Lexicase best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank exec_s_when_autoconstructing () (in3 exec_shove (integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank) (tag_boolean_339 exec_yankdup boolean_swap exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and)) boolean_flush integer_dup_items integer_lte integer_dup boolean_dup exec_empty integer_dup boolean_dup integer_pop integer_max integer_mult in2 exec_do*while () in3 boolean_shove exec_k_when_autoconstructing (in3) (boolean_yank) print_integer boolean_dup exec_pop (exec_do*count ()))
Lexicase best errors: [0 1 1 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 56
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Zero cases best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank exec_s_when_autoconstructing () (in3 exec_shove (integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank) (tag_boolean_339 exec_yankdup boolean_swap exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and)) boolean_flush integer_dup_items integer_lte integer_dup boolean_dup exec_empty integer_dup boolean_dup integer_pop integer_max integer_mult in2 exec_do*while () in3 boolean_shove exec_k_when_autoconstructing (in3) (boolean_yank) print_integer boolean_dup exec_pop (exec_do*count ()))
Zero cases best errors: [0 1 1 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 56
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (905 1000 1000 746 149 1000 159 207 894 219)
Population mean number of elite cases: 6.28
Count of perfect (error zero) individuals by case: (905 0 0 746 149 0 159 207 894 219)
Population mean number of perfect (error zero) cases: 3.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank exec_s_when_autoconstructing () (in3 exec_shove (integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and)) (boolean_flush integer_dup_items integer_lte integer_dup boolean_dup exec_empty integer_dup boolean_dup integer_pop) integer_max integer_mult in2 exec_do*while () in3 integer_swap exec_k_when_autoconstructing (in3) (boolean_yank) print_integer boolean_dup exec_pop (exec_do*count ()))
Errors: [0 1 1 0 0 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 44
Size: 56
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 6.721
Median total errors in population: 7
Error averages by case: (0.095 1.0 1.0 0.254 0.851 1.0 0.841 0.793 0.106 0.781)
Error minima by case: (0 1 1 0 0 1 0 0 0 0)
Average genome size in population (length): 44.857
Average program size in population (points): 56.565
Average percent parens in population: 0.207
Minimum age in population: 35.21795845031738
Maximum age in population: 37.95176029205322
Average age in population: 36.64524742555618
Median age in population: 36.72139072418213
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 198
Genome diversity (% unique genomes):	 0.555
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 204
Syntactic diversity (% unique Push programs):	 0.544
Total error diversity:				 0.007
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.091
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 10474551
--- Timings ---
Current time: 1559584410649 milliseconds
Total Time:          65.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        48.8 seconds, 74.3%
Fitness Testing:      9.6 seconds, 14.6%
Report:               7.1 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -11                
Correct output: -100                | Program output: -5                 
Correct output: -84                 | Program output: -26                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: 56                 
Correct output: -92                 | Program output: -55                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -11                
Correct output: -74                 | Program output: -51                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 36                 
Correct output: 12                  | Program output: 14                 
Correct output: 17                  | Program output: 100                
Correct output: 13                  | Program output: 13                 
Correct output: 71                  | Program output: 71                 
Correct output: 8                   | Program output: 69                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 90                 
Correct output: 1                   | Program output: 98                 
Correct output: 38                  | Program output: 38                 
Correct output: 18                  | Program output: 69                 
Correct output: 21                  | Program output: 21                 
Correct output: 41                  | Program output: 50                 
Correct output: 12                  | Program output: 100                
Correct output: 3                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 53                 
Correct output: 7                   | Program output: 18                 
Correct output: 34                  | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -14                 | Program output: 46                 
Correct output: -84                 | Program output: 47                 
Correct output: -75                 | Program output: -63                
Correct output: -70                 | Program output: -46                
Correct output: -75                 | Program output: -59                
Correct output: -60                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: 48                 
Correct output: -16                 | Program output: -16                
Correct output: -55                 | Program output: -10                
Correct output: -55                 | Program output: 54                 
Correct output: -76                 | Program output: -76                
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -53                
Correct output: -39                 | Program output: -33                
Correct output: -79                 | Program output: -52                
Correct output: -72                 | Program output: -29                
Correct output: -85                 | Program output: 90                 
Correct output: -91                 | Program output: 97                 
Correct output: -58                 | Program output: -33                
Correct output: 34                  | Program output: 43                 
Correct output: -6                  | Program output: -6                 
Correct output: -74                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: -85                 | Program output: 62                 
Correct output: -68                 | Program output: 53                 
Correct output: -91                 | Program output: 6                  
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: 72                 
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: 59                 
Correct output: -92                 | Program output: 94                 
Correct output: -63                 | Program output: 68                 
Correct output: -89                 | Program output: 70                 
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -69                
Correct output: -68                 | Program output: 84                 
Correct output: -26                 | Program output: 30                 
Correct output: -92                 | Program output: 45                 
Correct output: -40                 | Program output: -40                
Correct output: -91                 | Program output: 92                 
Correct output: -84                 | Program output: -84                
Correct output: -54                 | Program output: 44                 
Correct output: -36                 | Program output: -14                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -53                
Correct output: -65                 | Program output: 70                 
Correct output: -68                 | Program output: 4                  
Correct output: -36                 | Program output: 19                 
Correct output: -14                 | Program output: 82                 
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: 77                 
Correct output: 23                  | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Lexicase best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank exec_s_when_autoconstructing () (in3 exec_shove (integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank) (tag_boolean_339 exec_yankdup boolean_swap exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and)) boolean_flush integer_dup_items integer_lte integer_dup boolean_dup exec_pop (integer_dup boolean_dup integer_pop) integer_max integer_mult in2 exec_do*while () in3 boolean_shove in3 boolean_yank print_integer boolean_dup exec_pop (exec_do*count ()))
Lexicase best errors: [1 1 0 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 54
Percent parens: 0.204
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Zero cases best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank exec_s_when_autoconstructing () (in3 exec_shove (integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank) (tag_boolean_339 exec_yankdup boolean_swap exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and)) boolean_flush integer_dup_items integer_lte integer_dup boolean_dup exec_pop (integer_dup boolean_dup integer_pop) integer_max integer_mult in2 exec_do*while () in3 boolean_shove in3 boolean_yank print_integer boolean_dup exec_pop (exec_do*count ()))
Zero cases best errors: [1 1 0 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 54
Percent parens: 0.204
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 484 231 246 1000 246 79 1000 247 903)
Population mean number of elite cases: 5.44
Count of perfect (error zero) individuals by case: (0 484 231 246 0 246 79 0 247 903)
Population mean number of perfect (error zero) cases: 2.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Best program: (boolean_rot boolean_invert_second_then_and boolean_frominteger exec_yank exec_s_when_autoconstructing (in3 exec_shove (integer_shove boolean_not) in3 exec_shove (integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and)) (boolean_flush integer_dup_items integer_lte integer_dup boolean_dup exec_empty integer_dup boolean_dup integer_pop) (integer_max) integer_mult in2 exec_do*while () in3 boolean_dup_times in1 in3 boolean_not print_integer boolean_dup exec_pop (exec_do*count ()))
Errors: [1 1 0 0 1 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 48
Size: 58
Percent parens: 0.172
--- Population Statistics ---
Average total errors in population: 7.564
Median total errors in population: 8
Error averages by case: (1.0 0.516 0.769 0.754 1.0 0.754 0.921 1.0 0.753 0.097)
Error minima by case: (1 0 0 0 1 0 0 1 0 0)
Average genome size in population (length): 45.5
Average program size in population (points): 57.043
Average percent parens in population: 0.203
Minimum age in population: 36.28204536437988
Maximum age in population: 39.15488529205322
Average age in population: 38.21248035907745
Median age in population: 38.04018545150757
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 98
Genome diversity (% unique genomes):	 0.543
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 102
Syntactic diversity (% unique Push programs):	 0.529
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 10946799
--- Timings ---
Current time: 1559584413224 milliseconds
Total Time:          68.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        50.6 seconds, 74.2%
Fitness Testing:     10.0 seconds, 14.6%
Report:               7.5 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 564
Test mean error for best: 0.56400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -11                
Correct output: -100                | Program output: -5                 
Correct output: -84                 | Program output: -26                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: -55                
Correct output: 7                   | Program output: 77                 
Correct output: -80                 | Program output: -11                
Correct output: -74                 | Program output: -51                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 26                 
Correct output: 16                  | Program output: 52                 
Correct output: 12                  | Program output: 14                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 71                  | Program output: 91                 
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 13                 
Correct output: 68                  | Program output: 68                 
Correct output: 1                   | Program output: 58                 
Correct output: 38                  | Program output: 74                 
Correct output: 18                  | Program output: 20                 
Correct output: 21                  | Program output:                    
Correct output: 41                  | Program output: 49                 
Correct output: 12                  | Program output: 21                 
Correct output: 3                   | Program output: 39                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 57                 
Correct output: 7                   | Program output: 18                 
Correct output: 34                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -63                
Correct output: -70                 | Program output: -46                
Correct output: -75                 | Program output: -59                
Correct output: -60                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -66                
Correct output: -16                 | Program output: -16                
Correct output: -55                 | Program output: -10                
Correct output: -55                 | Program output: 68                 
Correct output: -76                 | Program output:                    
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -53                
Correct output: -39                 | Program output: -33                
Correct output: -79                 | Program output: -52                
Correct output: -72                 | Program output: -29                
Correct output: -85                 | Program output: -58                
Correct output: -91                 | Program output: -80                
Correct output: -58                 | Program output: -33                
Correct output: 34                  | Program output: 34                 
Correct output: -6                  | Program output: -6                 
Correct output: -74                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: 91                 
Correct output: -91                 | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: 10                 
Correct output: -92                 | Program output: -92                
Correct output: -63                 | Program output: -63                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -69                
Correct output: -68                 | Program output:                    
Correct output: -26                 | Program output: 41                 
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -91                 | Program output: -75                
Correct output: -84                 | Program output: -84                
Correct output: -54                 | Program output: -54                
Correct output: -36                 | Program output: -14                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -53                
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 4                  
Correct output: -36                 | Program output: 19                 
Correct output: -14                 | Program output: 19                 
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: -15                
Correct output: 23                  | Program output: 68                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Lexicase best program: (exec_do*while (boolean_invert_second_then_and) boolean_xor exec_s_when_autoconstructing (in3 exec_shove (integer_shove boolean_not) in3 exec_shove (integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and)) (boolean_flush boolean_rot integer_lte integer_dup boolean_dup exec_empty integer_dup boolean_dup integer_pop) (integer_max) integer_mult in2 exec_do*while () in3 boolean_dup_times boolean_invert_second_then_and in3 boolean_yank print_integer boolean_dup exec_pop (exec_do*count ()))
Lexicase best errors: [1 1 0 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 58
Percent parens: 0.190
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Zero cases best program: (exec_do*while (boolean_invert_second_then_and) boolean_xor exec_s_when_autoconstructing (in3 exec_shove (integer_shove boolean_not) in3 exec_shove (integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and)) (boolean_flush boolean_rot integer_lte integer_dup boolean_dup exec_empty integer_dup boolean_dup integer_pop) (integer_max) integer_mult in2 exec_do*while () in3 boolean_dup_times boolean_invert_second_then_and in3 boolean_yank print_integer boolean_dup exec_pop (exec_do*count ()))
Zero cases best errors: [1 1 0 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 58
Percent parens: 0.190
--- Lexicase Population Statistics ---
Count of elite individuals by case: (8 1 770 356 144 1 1 728 907 355)
Population mean number of elite cases: 3.27
Count of perfect (error zero) individuals by case: (8 1 770 356 144 1 1 728 907 355)
Population mean number of perfect (error zero) cases: 3.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Best program: (exec_do*while (boolean_invert_second_then_and) boolean_xor exec_s_when_autoconstructing (in3 exec_shove (integer_shove boolean_not) in3 exec_shove (integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and)) (boolean_flush boolean_rot integer_lte integer_dup boolean_dup exec_empty integer_dup boolean_dup integer_pop) (integer_max) integer_mult in2 exec_do*while () in3 boolean_dup_times boolean_invert_second_then_and in3 boolean_yank print_integer boolean_dup exec_pop (exec_do*count ()))
Errors: [1 1 0 0 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 47
Size: 58
Percent parens: 0.190
--- Population Statistics ---
Average total errors in population: 6.729
Median total errors in population: 7
Error averages by case: (0.992 0.999 0.23 0.644 0.856 0.999 0.999 0.272 0.093 0.645)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.898
Average program size in population (points): 59.589
Average percent parens in population: 0.198
Minimum age in population: 37.66232299804688
Maximum age in population: 40.87684726715088
Average age in population: 39.71405686473846
Median age in population: 39.7857186794281
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 129
Genome diversity (% unique genomes):	 0.529
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 131
Syntactic diversity (% unique Push programs):	 0.518
Total error diversity:				 0.006
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 11442433
--- Timings ---
Current time: 1559584415827 milliseconds
Total Time:          70.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        52.4 seconds, 74.0%
Fitness Testing:     10.4 seconds, 14.6%
Report:               7.9 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -53                
Correct output: -43                 | Program output: 56                 
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: -51                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 36                 
Correct output: 16                  | Program output: 52                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 21                 
Correct output: 13                  | Program output: 100                
Correct output: 71                  | Program output: 96                 
Correct output: 8                   | Program output: 45                 
Correct output: 1                   | Program output: 36                 
Correct output: 68                  | Program output: 80                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 38                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 30                 
Correct output: 41                  | Program output: 41                 
Correct output: 12                  | Program output: 58                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 29                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 34                  | Program output: 52                 
Correct output: -80                 | Program output: 80                 
Correct output: -14                 | Program output: 58                 
Correct output: -84                 | Program output: 94                 
Correct output: -75                 | Program output: 88                 
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -11                
Correct output: -98                 | Program output: 0                  
Correct output: -94                 | Program output: -94                
Correct output: -16                 | Program output: 59                 
Correct output: -55                 | Program output: 83                 
Correct output: -55                 | Program output: -55                
Correct output: -76                 | Program output: 11                 
Correct output: -4                  | Program output: 43                 
Correct output: -90                 | Program output: 21                 
Correct output: -39                 | Program output: -34                
Correct output: -79                 | Program output: 77                 
Correct output: -72                 | Program output: -72                
Correct output: -85                 | Program output: 98                 
Correct output: -91                 | Program output: -91                
Correct output: -58                 | Program output: 50                 
Correct output: 34                  | Program output: 83                 
Correct output: -6                  | Program output: 37                 
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -30                
Correct output: -85                 | Program output: -84                
Correct output: -68                 | Program output: 91                 
Correct output: -91                 | Program output: -4                 
Correct output: -78                 | Program output: 85                 
Correct output: -95                 | Program output: -37                
Correct output: -91                 | Program output: 45                 
Correct output: -25                 | Program output: -25                
Correct output: -92                 | Program output: 6                  
Correct output: -63                 | Program output: 5                  
Correct output: -89                 | Program output: 4                  
Correct output: -44                 | Program output: -29                
Correct output: -66                 | Program output: -48                
Correct output: -67                 | Program output: 24                 
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -40                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -19                
Correct output: -40                 | Program output: 11                 
Correct output: -91                 | Program output: -22                
Correct output: -84                 | Program output: -56                
Correct output: -54                 | Program output: 85                 
Correct output: -36                 | Program output: -36                
Correct output: -20                 | Program output: 38                 
Correct output: -54                 | Program output: 92                 
Correct output: -54                 | Program output: 75                 
Correct output: -98                 | Program output: -65                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -27                
Correct output: -68                 | Program output: -55                
Correct output: -36                 | Program output: 35                 
Correct output: -14                 | Program output: -14                
Correct output: -98                 | Program output: 60                 
Correct output: -64                 | Program output: 40                 
Correct output: -76                 | Program output: 27                 
Correct output: 23                  | Program output: 23                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Lexicase best program: (exec_do*while (boolean_invert_second_then_and) boolean_xor exec_s_when_autoconstructing (in3 exec_shove (integer_shove boolean_not) in3 exec_shove (integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap exec_do*while (tag_boolean_339 exec_yankdup boolean_swap exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and)) boolean_flush integer_dup_items integer_lte integer_dup boolean_dup exec_empty integer_dup boolean_dup integer_pop) (integer_max) (integer_mult tag_boolean_339 exec_yankdup boolean_pop exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and)) boolean_flush integer_dup_items integer_lte integer_dup boolean_dup exec_empty integer_dup boolean_dup integer_pop integer_max integer_mult in2 in4 in3 integer_swap exec_k_when_autoconstructing (in3) (boolean_yank) print_integer boolean_dup exec_pop (exec_do*count ()))
Lexicase best errors: [0 0 0 1 0 1 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 83
Percent parens: 0.169
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Zero cases best program: (exec_do*while (boolean_invert_second_then_and) boolean_xor exec_s_when_autoconstructing (in3 exec_shove (integer_shove boolean_not) in3 exec_shove (integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap exec_do*while (tag_boolean_339 exec_yankdup boolean_swap exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and)) boolean_flush integer_dup_items integer_lte integer_dup boolean_dup exec_empty integer_dup boolean_dup integer_pop) (integer_max) (integer_mult tag_boolean_339 exec_yankdup boolean_pop exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and)) boolean_flush integer_dup_items integer_lte integer_dup boolean_dup exec_empty integer_dup boolean_dup integer_pop integer_max integer_mult in2 in4 in3 integer_swap exec_k_when_autoconstructing (in3) (boolean_yank) print_integer boolean_dup exec_pop (exec_do*count ()))
Zero cases best errors: [0 0 0 1 0 1 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 83
Percent parens: 0.169
--- Lexicase Population Statistics ---
Count of elite individuals by case: (267 266 266 404 503 404 443 260 65 403)
Population mean number of elite cases: 3.28
Count of perfect (error zero) individuals by case: (267 266 266 404 503 404 443 260 65 403)
Population mean number of perfect (error zero) cases: 3.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Best program: (exec_do*while (boolean_invert_second_then_and) boolean_xor exec_s_when_autoconstructing (in3 exec_shove (integer_shove boolean_not) in3 exec_shove (integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and)) (boolean_flush boolean_rot integer_lte integer_dup boolean_dup exec_empty integer_dup exec_empty integer_dup boolean_dup integer_pop) (integer_max) integer_mult tag_boolean_339 exec_yankdup boolean_swap exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and) boolean_flush integer_dup_items integer_lte integer_dup boolean_dup exec_empty integer_dup boolean_dup integer_pop integer_max integer_mult in2 in4 in3 integer_swap exec_k_when_autoconstructing (in3) (boolean_yank) print_integer boolean_dup exec_pop (exec_do*count ()))
Errors: [0 0 0 1 0 1 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 67
Size: 80
Percent parens: 0.163
--- Population Statistics ---
Average total errors in population: 6.719
Median total errors in population: 6
Error averages by case: (0.733 0.734 0.734 0.596 0.497 0.596 0.557 0.74 0.935 0.597)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.331
Average program size in population (points): 64.809
Average percent parens in population: 0.178
Minimum age in population: 39.37088465690613
Maximum age in population: 42.8085008263588
Average age in population: 41.48507690167427
Median age in population: 41.37211751937866
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 128
Genome diversity (% unique genomes):	 0.586
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 137
Syntactic diversity (% unique Push programs):	 0.565
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 12002149
--- Timings ---
Current time: 1559584418492 milliseconds
Total Time:          73.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.2 seconds, 73.8%
Fitness Testing:     10.8 seconds, 14.7%
Report:               8.3 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -11                
Correct output: -100                | Program output: -5                 
Correct output: -84                 | Program output: -26                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: 56                 
Correct output: -92                 | Program output: -55                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -11                
Correct output: -74                 | Program output: -51                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 36                 
Correct output: 12                  | Program output: 14                 
Correct output: 17                  | Program output: 100                
Correct output: 13                  | Program output: 13                 
Correct output: 71                  | Program output: 71                 
Correct output: 8                   | Program output: 69                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 90                 
Correct output: 1                   | Program output: 98                 
Correct output: 38                  | Program output: 38                 
Correct output: 18                  | Program output: 69                 
Correct output: 21                  | Program output: 21                 
Correct output: 41                  | Program output: 50                 
Correct output: 12                  | Program output: 100                
Correct output: 3                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 53                 
Correct output: 7                   | Program output: 18                 
Correct output: 34                  | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -14                 | Program output: 46                 
Correct output: -84                 | Program output: 47                 
Correct output: -75                 | Program output: -63                
Correct output: -70                 | Program output: -46                
Correct output: -75                 | Program output: -59                
Correct output: -60                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: 48                 
Correct output: -16                 | Program output: -16                
Correct output: -55                 | Program output: -10                
Correct output: -55                 | Program output: 54                 
Correct output: -76                 | Program output: 22                 
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -53                
Correct output: -39                 | Program output: -33                
Correct output: -79                 | Program output: -52                
Correct output: -72                 | Program output: -29                
Correct output: -85                 | Program output: 90                 
Correct output: -91                 | Program output: 97                 
Correct output: -58                 | Program output: -33                
Correct output: 34                  | Program output: 43                 
Correct output: -6                  | Program output: -6                 
Correct output: -74                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: -85                 | Program output: 62                 
Correct output: -68                 | Program output: 53                 
Correct output: -91                 | Program output: 6                  
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: 72                 
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: 59                 
Correct output: -92                 | Program output: 94                 
Correct output: -63                 | Program output: 68                 
Correct output: -89                 | Program output: 70                 
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -69                
Correct output: -68                 | Program output: 24                 
Correct output: -26                 | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -91                 | Program output: 92                 
Correct output: -84                 | Program output: -84                
Correct output: -54                 | Program output: -54                
Correct output: -36                 | Program output: -14                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: 25                 
Correct output: -95                 | Program output: -53                
Correct output: -65                 | Program output: 70                 
Correct output: -68                 | Program output: 4                  
Correct output: -36                 | Program output: 19                 
Correct output: -14                 | Program output: 82                 
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: 77                 
Correct output: 23                  | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Lexicase best program: (exec_do*while (boolean_invert_second_then_and) boolean_xor exec_s_when_autoconstructing (in3 exec_shove (integer_shove boolean_not) in3 exec_shove (integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap exec_do*while (tag_boolean_339 exec_yankdup boolean_swap exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and)) integer_shove integer_dup_items integer_lte integer_dup boolean_dup exec_empty integer_dup boolean_dup integer_pop) (integer_max) (integer_mult tag_boolean_339 exec_yankdup boolean_pop exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and)) boolean_flush integer_dup_items integer_lte integer_dup boolean_dup exec_empty integer_dup boolean_dup integer_pop integer_max integer_mult in2 exec_do*while () in3 in3 integer_swap exec_k_when_autoconstructing (in3) (boolean_yank) print_integer boolean_dup exec_pop (exec_do*count ()))
Lexicase best errors: [0 0 1 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 85
Percent parens: 0.176
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Zero cases best program: (exec_do*while (boolean_invert_second_then_and) boolean_xor exec_s_when_autoconstructing (in3 exec_shove (integer_shove boolean_not) in3 exec_shove (integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap exec_do*while (tag_boolean_339 exec_yankdup boolean_swap exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and)) integer_shove integer_dup_items integer_lte integer_dup boolean_dup exec_empty integer_dup boolean_dup integer_pop) (integer_max) (integer_mult tag_boolean_339 exec_yankdup boolean_pop exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and)) boolean_flush integer_dup_items integer_lte integer_dup boolean_dup exec_empty integer_dup boolean_dup integer_pop integer_max integer_mult in2 exec_do*while () in3 in3 integer_swap exec_k_when_autoconstructing (in3) (boolean_yank) print_integer boolean_dup exec_pop (exec_do*count ()))
Zero cases best errors: [0 0 1 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 85
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (395 397 1 171 42 473 930 939 1000 460)
Population mean number of elite cases: 4.81
Count of perfect (error zero) individuals by case: (395 397 1 171 42 473 930 939 0 460)
Population mean number of perfect (error zero) cases: 3.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Best program: (exec_do*while (boolean_invert_second_then_and) boolean_xor exec_s_when_autoconstructing (in3 exec_shove (integer_shove boolean_not) in3 exec_shove (integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap exec_do*while (tag_boolean_339 exec_yankdup boolean_swap exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and)) integer_shove integer_dup_items integer_lte integer_dup boolean_dup exec_empty integer_dup boolean_dup integer_pop) (integer_max) (integer_mult tag_boolean_339 exec_yankdup boolean_pop exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and)) boolean_flush integer_dup_items integer_lte integer_dup boolean_dup exec_empty integer_dup boolean_dup integer_pop integer_max integer_mult in2 exec_do*while () in3 in3 integer_swap exec_k_when_autoconstructing (in3) (boolean_yank) print_integer boolean_dup exec_pop (exec_do*count ()))
Errors: [0 0 1 0 0 1 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 70
Size: 85
Percent parens: 0.176
--- Population Statistics ---
Average total errors in population: 6.192
Median total errors in population: 6
Error averages by case: (0.605 0.603 0.999 0.829 0.958 0.527 0.07 0.061 1.0 0.54)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 67.102
Average program size in population (points): 78.405
Average percent parens in population: 0.143
Minimum age in population: 41.86409485340118
Maximum age in population: 44.07891809940338
Average age in population: 43.28240616005659
Median age in population: 43.13322243094444
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 151
Genome diversity (% unique genomes):	 0.638
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 171
Syntactic diversity (% unique Push programs):	 0.61
Total error diversity:				 0.007
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.096
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 12702460
--- Timings ---
Current time: 1559584421512 milliseconds
Total Time:          76.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.1 seconds, 73.5%
Fitness Testing:     11.3 seconds, 14.8%
Report:               8.8 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -53                
Correct output: -43                 | Program output: 56                 
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: -51                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 36                 
Correct output: 16                  | Program output: 48                 
Correct output: 12                  | Program output: 14                 
Correct output: 17                  | Program output: 21                 
Correct output: 13                  | Program output: 100                
Correct output: 71                  | Program output: 96                 
Correct output: 8                   | Program output: 45                 
Correct output: 1                   | Program output: 36                 
Correct output: 68                  | Program output: 80                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 71                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 21                 
Correct output: 41                  | Program output: 41                 
Correct output: 12                  | Program output: 58                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 18                 
Correct output: 34                  | Program output: 52                 
Correct output: -80                 | Program output: 80                 
Correct output: -14                 | Program output: 58                 
Correct output: -84                 | Program output: 94                 
Correct output: -75                 | Program output: 88                 
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -11                
Correct output: -98                 | Program output: 0                  
Correct output: -94                 | Program output: -94                
Correct output: -16                 | Program output: 59                 
Correct output: -55                 | Program output: 83                 
Correct output: -55                 | Program output: -55                
Correct output: -76                 | Program output: 22                 
Correct output: -4                  | Program output: 43                 
Correct output: -90                 | Program output: 21                 
Correct output: -39                 | Program output: -34                
Correct output: -79                 | Program output: 77                 
Correct output: -72                 | Program output: -72                
Correct output: -85                 | Program output: 98                 
Correct output: -91                 | Program output: -91                
Correct output: -58                 | Program output: 50                 
Correct output: 34                  | Program output: 83                 
Correct output: -6                  | Program output: 37                 
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -30                
Correct output: -85                 | Program output: -84                
Correct output: -68                 | Program output: 91                 
Correct output: -91                 | Program output: -4                 
Correct output: -78                 | Program output: 85                 
Correct output: -95                 | Program output: -37                
Correct output: -91                 | Program output: 45                 
Correct output: -25                 | Program output: -25                
Correct output: -92                 | Program output: 6                  
Correct output: -63                 | Program output: 5                  
Correct output: -89                 | Program output: 4                  
Correct output: -44                 | Program output: -29                
Correct output: -66                 | Program output: -48                
Correct output: -67                 | Program output: 24                 
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -19                
Correct output: -40                 | Program output: 11                 
Correct output: -91                 | Program output: -22                
Correct output: -84                 | Program output: -56                
Correct output: -54                 | Program output: 85                 
Correct output: -36                 | Program output: -36                
Correct output: -20                 | Program output: 38                 
Correct output: -54                 | Program output: 92                 
Correct output: -54                 | Program output: 75                 
Correct output: -98                 | Program output: -71                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -27                
Correct output: -68                 | Program output: -55                
Correct output: -36                 | Program output: 19                 
Correct output: -14                 | Program output: -14                
Correct output: -98                 | Program output: 60                 
Correct output: -64                 | Program output: 40                 
Correct output: -76                 | Program output: 27                 
Correct output: 23                  | Program output: 23                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Lexicase best program: (exec_do*while (boolean_invert_second_then_and) boolean_xor exec_s_when_autoconstructing (in3 exec_shove (integer_shove boolean_not) in3 exec_shove (integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap exec_do*while (tag_boolean_339 exec_yankdup boolean_swap exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and) boolean_flush integer_dup_items integer_lte integer_dup integer_yank boolean_dup boolean_invert_first_then_and)) (boolean_flush boolean_rot integer_lte integer_dup boolean_dup exec_empty integer_dup boolean_dup integer_pop) (integer_max) integer_mult in2 exec_do*while () in3 boolean_dup_times boolean_invert_second_then_and in3 integer_mult in2 in4 in3 integer_swap exec_k_when_autoconstructing (in3) (boolean_yank) print_integer boolean_dup exec_pop (exec_do*count ()))
Lexicase best errors: [0 0 0 0 1 1 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 79
Percent parens: 0.177
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Zero cases best program: (exec_do*while (boolean_invert_second_then_and) boolean_xor exec_s_when_autoconstructing (in3 exec_shove (integer_shove boolean_not) in3 exec_shove (integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap exec_do*while (tag_boolean_339 exec_yankdup boolean_swap exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and) boolean_flush integer_dup_items integer_lte integer_dup integer_yank boolean_dup boolean_invert_first_then_and)) (boolean_flush boolean_rot integer_lte integer_dup boolean_dup exec_empty integer_dup boolean_dup integer_pop) (integer_max) integer_mult in2 exec_do*while () in3 boolean_dup_times boolean_invert_second_then_and in3 integer_mult in2 in4 in3 integer_swap exec_k_when_autoconstructing (in3) (boolean_yank) print_integer boolean_dup exec_pop (exec_do*count ()))
Zero cases best errors: [0 0 0 0 1 1 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 79
Percent parens: 0.177
--- Lexicase Population Statistics ---
Count of elite individuals by case: (283 188 382 924 6 3 614 924 289 15)
Population mean number of elite cases: 3.63
Count of perfect (error zero) individuals by case: (283 188 382 924 6 3 614 924 289 15)
Population mean number of perfect (error zero) cases: 3.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank integer_shove exec_shove (integer_shove boolean_not) in3 exec_shove (integer_shove exec_s_when_autoconstructing (in3 exec_shove (integer_shove boolean_not) in3 exec_shove (integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap tag_boolean_339 exec_yankdup boolean_swap integer_eq integer_yank integer_yank boolean_dup boolean_invert_first_then_and) () (boolean_flush integer_dup_items integer_lte integer_dup integer_yank in1 boolean_invert_first_then_and)) integer_pop integer_max integer_mult tag_boolean_339 exec_yankdup boolean_pop exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and) boolean_flush integer_dup_items integer_lte integer_dup boolean_dup exec_empty integer_dup boolean_dup integer_pop integer_max integer_mult in2 in4 in3 integer_swap exec_k_when_autoconstructing (in3) (boolean_yank) print_integer boolean_dup exec_pop (exec_do*count ()))
Errors: [0 1 0 0 0 1 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 76
Size: 90
Percent parens: 0.156
--- Population Statistics ---
Average total errors in population: 6.372
Median total errors in population: 6
Error averages by case: (0.717 0.812 0.618 0.076 0.994 0.997 0.386 0.076 0.711 0.985)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 69.018
Average program size in population (points): 82.065
Average percent parens in population: 0.158
Minimum age in population: 43.4023500084877
Maximum age in population: 45.91771051287651
Average age in population: 44.9433986005336
Median age in population: 44.859903216362
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 118
Genome diversity (% unique genomes):	 0.677
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 120
Syntactic diversity (% unique Push programs):	 0.657
Total error diversity:				 0.007
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.095
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 13443518
--- Timings ---
Current time: 1559584424423 milliseconds
Total Time:          79.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.9 seconds, 73.1%
Fitness Testing:     11.9 seconds, 15.0%
Report:               9.3 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 425
Test mean error for best: 0.42500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -11                
Correct output: -100                | Program output: -5                 
Correct output: -84                 | Program output: -26                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: -55                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -11                
Correct output: -74                 | Program output: -51                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 26                 
Correct output: 16                  | Program output: 52                 
Correct output: 12                  | Program output: 30                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 37                 
Correct output: 71                  | Program output: 72                 
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 2                  
Correct output: 68                  | Program output: 68                 
Correct output: 1                   | Program output: 33                 
Correct output: 38                  | Program output: 59                 
Correct output: 18                  | Program output: 20                 
Correct output: 21                  | Program output: 25                 
Correct output: 41                  | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 3                   | Program output: 39                 
Correct output: 19                  | Program output: 33                 
Correct output: 19                  | Program output: 33                 
Correct output: 7                   | Program output: 46                 
Correct output: 34                  | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -63                
Correct output: -70                 | Program output: -46                
Correct output: -75                 | Program output: -59                
Correct output: -60                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -72                
Correct output: -16                 | Program output: -16                
Correct output: -55                 | Program output: -10                
Correct output: -55                 | Program output: 13                 
Correct output: -76                 | Program output: -76                
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -53                
Correct output: -39                 | Program output: -33                
Correct output: -79                 | Program output: -52                
Correct output: -72                 | Program output: -29                
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -80                
Correct output: -58                 | Program output: -33                
Correct output: 34                  | Program output: 34                 
Correct output: -6                  | Program output: -6                 
Correct output: -74                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -68                
Correct output: -91                 | Program output: -91                
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: 10                 
Correct output: -92                 | Program output: -92                
Correct output: -63                 | Program output: -63                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -69                
Correct output: -68                 | Program output: -68                
Correct output: -26                 | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: -84                
Correct output: -54                 | Program output: -54                
Correct output: -36                 | Program output: -14                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -53                
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: -68                
Correct output: -36                 | Program output: -36                
Correct output: -14                 | Program output: 19                 
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: -76                
Correct output: 23                  | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction tag_boolean_339} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Lexicase best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank integer_shove exec_shove (integer_shove boolean_not) in3 exec_shove (integer_shove integer_shove boolean_not) in3 exec_shove (integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap boolean_invert_second_then_and boolean_frominteger exec_yank integer_shove integer_gte in3 exec_shove (integer_shove boolean_not) boolean_swap exec_yankdup integer_yank tag_boolean_339 integer_yank tag_boolean_339 exec_yankdup boolean_swap integer_eq integer_yank integer_yank boolean_dup boolean_invert_first_then_and boolean_flush integer_dup_items integer_lte integer_dup integer_yank in1 boolean_invert_first_then_and boolean_flush boolean_rot integer_lte integer_dup boolean_dup exec_empty integer_dup boolean_dup exec_do*range () integer_max integer_mult in2 exec_do*while () in3 boolean_dup_times integer_min in3 boolean_yank print_integer boolean_dup exec_pop (exec_do*count ()))
Lexicase best errors: [0 0 0 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 82
Percent parens: 0.122
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction tag_boolean_339} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Zero cases best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank integer_shove exec_shove (integer_shove boolean_not) in3 exec_shove (integer_shove integer_shove boolean_not) in3 exec_shove (integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap boolean_invert_second_then_and boolean_frominteger exec_yank integer_shove integer_gte in3 exec_shove (integer_shove boolean_not) boolean_swap exec_yankdup integer_yank tag_boolean_339 integer_yank tag_boolean_339 exec_yankdup boolean_swap integer_eq integer_yank integer_yank boolean_dup boolean_invert_first_then_and boolean_flush integer_dup_items integer_lte integer_dup integer_yank in1 boolean_invert_first_then_and boolean_flush boolean_rot integer_lte integer_dup boolean_dup exec_empty integer_dup boolean_dup exec_do*range () integer_max integer_mult in2 exec_do*while () in3 boolean_dup_times integer_min in3 boolean_yank print_integer boolean_dup exec_pop (exec_do*count ()))
Zero cases best errors: [0 0 0 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 82
Percent parens: 0.122
--- Lexicase Population Statistics ---
Count of elite individuals by case: (254 208 368 499 166 181 243 332 327 97)
Population mean number of elite cases: 2.67
Count of perfect (error zero) individuals by case: (254 208 368 499 166 181 243 332 327 97)
Population mean number of perfect (error zero) cases: 2.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction tag_boolean_339} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank integer_shove exec_shove (integer_shove boolean_not) in3 exec_y_when_autoconstructing (in4 boolean_not) integer_pop integer_shove exec_yankdup boolean_swap boolean_invert_second_then_and boolean_frominteger exec_yank integer_shove integer_gte in3 exec_shove (integer_shove boolean_not) boolean_swap exec_yankdup integer_yank tag_boolean_339 integer_yank tag_boolean_339 exec_yankdup boolean_swap integer_eq integer_yank integer_yank boolean_dup boolean_invert_first_then_and boolean_flush integer_dup_items integer_lte integer_dup integer_yank in1 boolean_invert_first_then_and boolean_flush boolean_rot integer_lte integer_dup boolean_dup exec_empty integer_dup boolean_dup exec_do*range () integer_max integer_mult in2 exec_do*while () in3 boolean_dup_times integer_min in3 boolean_yank print_integer boolean_dup exec_pop (exec_do*count ()))
Errors: [0 0 0 1 1 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 67
Size: 76
Percent parens: 0.118
--- Population Statistics ---
Average total errors in population: 7.325
Median total errors in population: 8
Error averages by case: (0.746 0.792 0.632 0.501 0.834 0.819 0.757 0.668 0.673 0.903)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 68.579
Average program size in population (points): 80.879
Average percent parens in population: 0.151
Minimum age in population: 44.84768891334534
Maximum age in population: 47.86601036787033
Average age in population: 46.01838760704547
Median age in population: 45.859903216362
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 88
Genome diversity (% unique genomes):	 0.696
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 91
Syntactic diversity (% unique Push programs):	 0.678
Total error diversity:				 0.007
Error (vector) diversity:			 0.047
Behavioral diversity:				 0.176
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 14162583
--- Timings ---
Current time: 1559584427374 milliseconds
Total Time:          82.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.8 seconds, 72.8%
Fitness Testing:     12.4 seconds, 15.1%
Report:               9.9 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -53                
Correct output: -43                 | Program output: 56                 
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: -51                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 48                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 21                 
Correct output: 13                  | Program output: 100                
Correct output: 71                  | Program output: 96                 
Correct output: 8                   | Program output: 45                 
Correct output: 1                   | Program output: 36                 
Correct output: 68                  | Program output: 80                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 71                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 30                 
Correct output: 41                  | Program output: 41                 
Correct output: 12                  | Program output: 58                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 29                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 34                  | Program output: 52                 
Correct output: -80                 | Program output: 80                 
Correct output: -14                 | Program output: 58                 
Correct output: -84                 | Program output: 94                 
Correct output: -75                 | Program output: 88                 
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -11                
Correct output: -98                 | Program output: 0                  
Correct output: -94                 | Program output: -94                
Correct output: -16                 | Program output: 59                 
Correct output: -55                 | Program output: 83                 
Correct output: -55                 | Program output: -55                
Correct output: -76                 | Program output: 11                 
Correct output: -4                  | Program output: 43                 
Correct output: -90                 | Program output: 21                 
Correct output: -39                 | Program output: -34                
Correct output: -79                 | Program output: 77                 
Correct output: -72                 | Program output: -72                
Correct output: -85                 | Program output: 98                 
Correct output: -91                 | Program output: -91                
Correct output: -58                 | Program output: 50                 
Correct output: 34                  | Program output: 83                 
Correct output: -6                  | Program output: 37                 
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -30                
Correct output: -85                 | Program output: -84                
Correct output: -68                 | Program output: 91                 
Correct output: -91                 | Program output: 6                  
Correct output: -78                 | Program output: 85                 
Correct output: -95                 | Program output: -37                
Correct output: -91                 | Program output: 45                 
Correct output: -25                 | Program output: -25                
Correct output: -92                 | Program output: 6                  
Correct output: -63                 | Program output: 5                  
Correct output: -89                 | Program output: 4                  
Correct output: -44                 | Program output: -29                
Correct output: -66                 | Program output: -48                
Correct output: -67                 | Program output: 24                 
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -40                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -19                
Correct output: -40                 | Program output: 11                 
Correct output: -91                 | Program output: -22                
Correct output: -84                 | Program output: -56                
Correct output: -54                 | Program output: 85                 
Correct output: -36                 | Program output: -36                
Correct output: -20                 | Program output: 38                 
Correct output: -54                 | Program output: 92                 
Correct output: -54                 | Program output: 75                 
Correct output: -98                 | Program output: -65                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -36                 | Program output: 35                 
Correct output: -14                 | Program output: -14                
Correct output: -98                 | Program output: 60                 
Correct output: -64                 | Program output: 40                 
Correct output: -76                 | Program output: 27                 
Correct output: 23                  | Program output: 23                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Lexicase best program: (exec_do*while (boolean_invert_second_then_and) integer_yankdup exec_yank integer_shove exec_shove (integer_shove boolean_not) in3 exec_shove (integer_shove exec_s_when_autoconstructing (in3 exec_shove (in3 exec_shove (integer_shove exec_s_when_autoconstructing (in3 exec_shove (integer_shove boolean_not) in3 exec_shove (integer_shove boolean_not) integer_pop integer_shove exec_yankdup exec_yankdup boolean_swap tag_boolean_339 exec_yankdup boolean_swap integer_eq integer_yank integer_gt boolean_dup boolean_invert_first_then_and) () (boolean_flush integer_dup_items integer_lte in2 integer_yank in1 boolean_invert_first_then_and)) integer_pop) integer_max) (integer_mult tag_boolean_339 exec_yankdup boolean_pop exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and)) (boolean_flush integer_dup_items integer_lte integer_dup boolean_dup exec_empty integer_dup boolean_dup in2 in4) in3 integer_swap exec_k_when_autoconstructing (in3) (boolean_yank) print_integer boolean_dup exec_pop (exec_do*count ())))
Lexicase best errors: [1 0 0 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 94
Percent parens: 0.202
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Zero cases best program: (exec_do*while (boolean_invert_second_then_and) integer_yankdup exec_yank integer_shove exec_shove (integer_shove boolean_not) in3 exec_shove (integer_shove exec_s_when_autoconstructing (in3 exec_shove (in3 exec_shove (integer_shove exec_s_when_autoconstructing (in3 exec_shove (integer_shove boolean_not) in3 exec_shove (integer_shove boolean_not) integer_pop integer_shove exec_yankdup exec_yankdup boolean_swap tag_boolean_339 exec_yankdup boolean_swap integer_eq integer_yank integer_gt boolean_dup boolean_invert_first_then_and) () (boolean_flush integer_dup_items integer_lte in2 integer_yank in1 boolean_invert_first_then_and)) integer_pop) integer_max) (integer_mult tag_boolean_339 exec_yankdup boolean_pop exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and)) (boolean_flush integer_dup_items integer_lte integer_dup boolean_dup exec_empty integer_dup boolean_dup in2 in4) in3 integer_swap exec_k_when_autoconstructing (in3) (boolean_yank) print_integer boolean_dup exec_pop (exec_do*count ())))
Zero cases best errors: [1 0 0 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 94
Percent parens: 0.202
--- Lexicase Population Statistics ---
Count of elite individuals by case: (536 540 538 536 350 922 477 148 347 316)
Population mean number of elite cases: 4.71
Count of perfect (error zero) individuals by case: (536 540 538 536 350 922 477 148 347 316)
Population mean number of perfect (error zero) cases: 4.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Best program: (exec_do*while (boolean_invert_second_then_and) integer_yankdup exec_yank integer_shove exec_shove (integer_shove boolean_not) in3 exec_shove (integer_shove exec_s_when_autoconstructing (in3 exec_shove (in3 exec_shove (integer_shove exec_s_when_autoconstructing (in3 exec_shove (integer_shove boolean_not) in3 exec_shove (integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap tag_boolean_339 boolean_flush boolean_swap integer_eq integer_yank integer_yank boolean_dup boolean_invert_first_then_and) () (boolean_flush integer_dup_items integer_lte in2 integer_yank in1 boolean_invert_first_then_and)) integer_pop) integer_max) (integer_mult tag_boolean_339 exec_yankdup boolean_pop exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and)) (boolean_flush integer_dup_items integer_lte integer_dup boolean_dup exec_empty integer_dup boolean_dup in2 in4) in3 integer_swap exec_k_when_autoconstructing (in3) (boolean_yank) print_integer boolean_dup exec_pop (exec_do*count ())))
Errors: [1 0 0 1 0 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 79
Size: 98
Percent parens: 0.194
--- Population Statistics ---
Average total errors in population: 5.29
Median total errors in population: 5
Error averages by case: (0.464 0.46 0.462 0.464 0.65 0.078 0.523 0.852 0.653 0.684)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.541
Average program size in population (points): 80.495
Average percent parens in population: 0.160
Minimum age in population: 45.84768891334534
Maximum age in population: 49.61295679211617
Average age in population: 47.58105228462815
Median age in population: 47.66465693712234
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 33
Genome diversity (% unique genomes):	 0.73
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.71
Total error diversity:				 0.008
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.117
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 14872931
--- Timings ---
Current time: 1559584430258 milliseconds
Total Time:          85.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.6 seconds, 72.4%
Fitness Testing:     13.0 seconds, 15.2%
Report:              10.4 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 424
Test mean error for best: 0.42400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: 56                 
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: -51                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 36                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 21                 
Correct output: 13                  | Program output: 13                 
Correct output: 71                  | Program output: 71                 
Correct output: 8                   | Program output: 45                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 80                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 38                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 21                 
Correct output: 41                  | Program output: 41                 
Correct output: 12                  | Program output: 58                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 34                  | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -14                 | Program output: 46                 
Correct output: -84                 | Program output: 47                 
Correct output: -75                 | Program output: -63                
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: -16                 | Program output: -16                
Correct output: -55                 | Program output: -10                
Correct output: -55                 | Program output: -55                
Correct output: -76                 | Program output: 11                 
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -53                
Correct output: -39                 | Program output: -34                
Correct output: -79                 | Program output: -52                
Correct output: -72                 | Program output: -72                
Correct output: -85                 | Program output: 90                 
Correct output: -91                 | Program output: -91                
Correct output: -58                 | Program output: -33                
Correct output: 34                  | Program output: 43                 
Correct output: -6                  | Program output: -6                 
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -85                 | Program output: -84                
Correct output: -68                 | Program output: 53                 
Correct output: -91                 | Program output: -4                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -37                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: -25                
Correct output: -92                 | Program output: 6                  
Correct output: -63                 | Program output: 5                  
Correct output: -89                 | Program output: 4                  
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -40                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: 53                 
Correct output: -40                 | Program output: -40                
Correct output: -91                 | Program output: -22                
Correct output: -84                 | Program output: -84                
Correct output: -54                 | Program output: 44                 
Correct output: -36                 | Program output: -36                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -65                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -27                
Correct output: -68                 | Program output: -55                
Correct output: -36                 | Program output: 19                 
Correct output: -14                 | Program output: -14                
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: 27                 
Correct output: 23                  | Program output: 23                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction tag_boolean_339} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Lexicase best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank integer_shove exec_shove (integer_shove boolean_not) in3 exec_shove (integer_shove boolean_not integer_pop integer_shove exec_yankdup boolean_swap boolean_invert_second_then_and) boolean_frominteger exec_yank integer_shove integer_gte in3 exec_shove (integer_shove boolean_not boolean_swap exec_yankdup integer_yank tag_boolean_339) integer_yank tag_boolean_339 exec_yankdup boolean_swap integer_eq exec_swap (integer_yank boolean_dup boolean_invert_first_then_and) () boolean_flush integer_dup_items integer_lte integer_dup integer_yank in1 boolean_invert_first_then_and boolean_flush boolean_dup exec_empty integer_dup boolean_dup exec_do*range () integer_max integer_mult in4 exec_do*while () in3 boolean_invert_first_then_and integer_min in3 boolean_yank print_integer boolean_dup exec_pop (exec_do*count ()))
Lexicase best errors: [0 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 75
Percent parens: 0.147
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction tag_boolean_339} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Zero cases best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank integer_shove exec_shove (integer_shove boolean_not) in3 exec_shove (integer_shove boolean_not integer_pop integer_shove exec_yankdup boolean_swap boolean_invert_second_then_and) boolean_frominteger exec_yank integer_shove integer_gte in3 exec_shove (integer_shove boolean_not boolean_swap exec_yankdup integer_yank tag_boolean_339) integer_yank tag_boolean_339 exec_yankdup boolean_swap integer_eq exec_swap (integer_yank boolean_dup boolean_invert_first_then_and) () boolean_flush integer_dup_items integer_lte integer_dup integer_yank in1 boolean_invert_first_then_and boolean_flush boolean_dup exec_empty integer_dup boolean_dup exec_do*range () integer_max integer_mult in4 exec_do*while () in3 boolean_invert_first_then_and integer_min in3 boolean_yank print_integer boolean_dup exec_pop (exec_do*count ()))
Zero cases best errors: [0 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 75
Percent parens: 0.147
--- Lexicase Population Statistics ---
Count of elite individuals by case: (728 471 719 727 59 12 942 475 475 899)
Population mean number of elite cases: 5.51
Count of perfect (error zero) individuals by case: (728 471 719 727 59 12 942 475 475 899)
Population mean number of perfect (error zero) cases: 5.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank integer_shove exec_shove (integer_shove boolean_not) in3 exec_shove (integer_shove integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap boolean_rot tag_boolean_339 exec_yankdup boolean_shove exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and) boolean_flush integer_dup_items integer_lte integer_dup integer_yank boolean_dup boolean_dup boolean_invert_first_then_and boolean_flush integer_dup_items integer_lte integer_dup integer_yank in1 boolean_invert_first_then_and boolean_flush boolean_dup exec_empty integer_dup boolean_dup integer_pop integer_max integer_mult in2 in4 in3 integer_swap exec_k_when_autoconstructing (in3 boolean_dup_times integer_min in3) (boolean_yank) print_integer boolean_dup exec_pop (exec_do*count ()))
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 67
Size: 76
Percent parens: 0.118
--- Population Statistics ---
Average total errors in population: 4.493
Median total errors in population: 5
Error averages by case: (0.272 0.529 0.281 0.273 0.941 0.988 0.058 0.525 0.525 0.101)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 68.028
Average program size in population (points): 80.527
Average percent parens in population: 0.153
Minimum age in population: 46.84768891334534
Maximum age in population: 50.80880146473646
Average age in population: 48.87239969480783
Median age in population: 48.92845770716667
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 121
Genome diversity (% unique genomes):	 0.691
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 135
Syntactic diversity (% unique Push programs):	 0.666
Total error diversity:				 0.01
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.082
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 15574717
--- Timings ---
Current time: 1559584433037 milliseconds
Total Time:          87.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.4 seconds, 72.1%
Fitness Testing:     13.5 seconds, 15.3%
Report:              10.9 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 478
Test mean error for best: 0.47800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: 56                 
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: -51                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output:                    
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 21                 
Correct output: 13                  | Program output: 13                 
Correct output: 71                  | Program output: 71                 
Correct output: 8                   | Program output: 45                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 80                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output:                    
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 21                 
Correct output: 41                  | Program output: 41                 
Correct output: 12                  | Program output: 58                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 34                  | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -14                 | Program output: 46                 
Correct output: -84                 | Program output: 47                 
Correct output: -75                 | Program output: -63                
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: -16                 | Program output: -16                
Correct output: -55                 | Program output: -10                
Correct output: -55                 | Program output: -55                
Correct output: -76                 | Program output: 22                 
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -53                
Correct output: -39                 | Program output: -34                
Correct output: -79                 | Program output: -52                
Correct output: -72                 | Program output: -72                
Correct output: -85                 | Program output: 90                 
Correct output: -91                 | Program output: -91                
Correct output: -58                 | Program output: -33                
Correct output: 34                  | Program output: 43                 
Correct output: -6                  | Program output: -6                 
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -85                 | Program output: -84                
Correct output: -68                 | Program output: 53                 
Correct output: -91                 | Program output: -4                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -37                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: -25                
Correct output: -92                 | Program output: 6                  
Correct output: -63                 | Program output: 5                  
Correct output: -89                 | Program output: 4                  
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: 24                 
Correct output: -26                 | Program output: 30                 
Correct output: -92                 | Program output: -19                
Correct output: -40                 | Program output: -40                
Correct output: -91                 | Program output: -22                
Correct output: -84                 | Program output: -84                
Correct output: -54                 | Program output: 44                 
Correct output: -36                 | Program output: -36                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: 25                 
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -27                
Correct output: -68                 | Program output: -55                
Correct output: -36                 | Program output: 19                 
Correct output: -14                 | Program output: -14                
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: 27                 
Correct output: 23                  | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction tag_boolean_339} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Lexicase best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank integer_shove exec_shove (integer_shove boolean_not) in3 exec_shove (integer_shove boolean_not integer_pop integer_shove exec_yankdup boolean_swap boolean_invert_second_then_and) boolean_frominteger exec_yank integer_shove integer_gte in3 exec_shove (integer_shove boolean_not boolean_swap exec_yankdup integer_yank tag_boolean_339) integer_yank tag_boolean_339 exec_yankdup boolean_swap integer_eq exec_swap (integer_yank boolean_dup boolean_invert_first_then_and) () boolean_flush integer_dup_items integer_lte integer_dup integer_yank in1 boolean_invert_first_then_and integer_add boolean_dup exec_empty integer_dup boolean_dup exec_do*range () integer_max integer_mult in4 exec_do*while () in3 boolean_invert_first_then_and integer_min in3 boolean_yank print_integer boolean_dup exec_pop (exec_do*count ()))
Lexicase best errors: [0 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 75
Percent parens: 0.147
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction tag_boolean_339} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Zero cases best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank integer_shove exec_shove (integer_shove boolean_not) in3 exec_shove (integer_shove boolean_not integer_pop integer_shove exec_yankdup boolean_swap boolean_invert_second_then_and) boolean_frominteger exec_yank integer_shove integer_gte in3 exec_shove (integer_shove boolean_not boolean_swap exec_yankdup integer_yank tag_boolean_339) integer_yank tag_boolean_339 exec_yankdup boolean_swap integer_eq exec_swap (integer_yank boolean_dup boolean_invert_first_then_and) () boolean_flush integer_dup_items integer_lte integer_dup integer_yank in1 boolean_invert_first_then_and integer_add boolean_dup exec_empty integer_dup boolean_dup exec_do*range () integer_max integer_mult in4 exec_do*while () in3 boolean_invert_first_then_and integer_min in3 boolean_yank print_integer boolean_dup exec_pop (exec_do*count ()))
Zero cases best errors: [0 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 75
Percent parens: 0.147
--- Lexicase Population Statistics ---
Count of elite individuals by case: (738 881 738 864 805 14 901 699 881 739)
Population mean number of elite cases: 7.26
Count of perfect (error zero) individuals by case: (738 881 738 864 805 14 901 699 881 739)
Population mean number of perfect (error zero) cases: 7.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 1, :instruction tag_boolean_339} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank integer_shove exec_shove (exec_when (boolean_not) in3 exec_shove (integer_shove boolean_not integer_pop integer_shove exec_yankdup boolean_swap boolean_invert_second_then_and) boolean_frominteger exec_yank integer_shove integer_gte) in3 exec_shove (integer_shove boolean_not boolean_swap exec_yankdup integer_yank tag_boolean_339) integer_yank tag_boolean_339 exec_yankdup boolean_swap integer_eq exec_swap (integer_yank boolean_dup boolean_invert_first_then_and) () boolean_flush integer_dup_items integer_lte integer_dup integer_yank in1 boolean_invert_first_then_and boolean_flush boolean_dup exec_empty boolean_and boolean_dup exec_do*range () integer_max integer_mult in4 exec_do*while () in3 boolean_invert_first_then_and integer_min in3 boolean_yank print_integer boolean_dup exec_pop (exec_do*count ()))
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 64
Size: 76
Percent parens: 0.158
--- Population Statistics ---
Average total errors in population: 2.74
Median total errors in population: 1
Error averages by case: (0.262 0.119 0.262 0.136 0.195 0.986 0.099 0.301 0.119 0.261)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.898
Average program size in population (points): 75.835
Average percent parens in population: 0.131
Minimum age in population: 49.00311934947968
Maximum age in population: 51.00311934947968
Average age in population: 50.0499403681457
Median age in population: 50.00311934947968
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 152
Genome diversity (% unique genomes):	 0.628
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 161
Syntactic diversity (% unique Push programs):	 0.599
Total error diversity:				 0.01
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 16257869
--- Timings ---
Current time: 1559584435798 milliseconds
Total Time:          90.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.1 seconds, 71.8%
Fitness Testing:     14.0 seconds, 15.4%
Report:              11.4 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 223
Test mean error for best: 0.22300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 36                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 71                  | Program output: 71                 
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 68                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 38                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 21                 
Correct output: 41                  | Program output: 41                 
Correct output: 12                  | Program output: 21                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 34                  | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -63                
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -72                
Correct output: -16                 | Program output: -16                
Correct output: -55                 | Program output: -10                
Correct output: -55                 | Program output: -55                
Correct output: -76                 | Program output: -76                
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -90                
Correct output: -39                 | Program output: -39                
Correct output: -79                 | Program output: -52                
Correct output: -72                 | Program output: -72                
Correct output: -85                 | Program output: -58                
Correct output: -91                 | Program output: -91                
Correct output: -58                 | Program output: -58                
Correct output: 34                  | Program output: 43                 
Correct output: -6                  | Program output: -6                 
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: 53                 
Correct output: -91                 | Program output: -4                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: -25                
Correct output: -92                 | Program output: -92                
Correct output: -63                 | Program output: -63                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -40                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: 53                 
Correct output: -40                 | Program output: -40                
Correct output: -91                 | Program output: -75                
Correct output: -84                 | Program output: -84                
Correct output: -54                 | Program output: -37                
Correct output: -36                 | Program output: -36                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: -55                
Correct output: -36                 | Program output: 19                 
Correct output: -14                 | Program output: -14                
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: -15                
Correct output: 23                  | Program output: 23                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Lexicase best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank integer_shove exec_shove (integer_shove boolean_not) in3 exec_shove (integer_shove integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap boolean_rot tag_boolean_339 exec_yankdup boolean_shove exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and) boolean_flush integer_dup_items integer_lte integer_dup integer_yank boolean_dup boolean_dup boolean_invert_first_then_and boolean_flush integer_dup_items integer_lte integer_dup integer_yank in1 boolean_invert_first_then_and boolean_flush boolean_dup exec_empty integer_dup boolean_dup integer_pop integer_max integer_mult in2 in4 in3 integer_swap exec_k_when_autoconstructing (in3 boolean_dup_times integer_min in3) (boolean_yank) exec_k_when_autoconstructing (in3 boolean_dup_times integer_min in3) (boolean_yank) exec_k_when_autoconstructing (in3 boolean_dup_times integer_min in3) (boolean_yank) print_integer boolean_dup exec_pop (exec_do*count ()))
Lexicase best errors: [0 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 92
Percent parens: 0.141
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Zero cases best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank integer_shove exec_shove (integer_shove boolean_not) in3 exec_shove (integer_shove integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap boolean_rot tag_boolean_339 exec_yankdup boolean_shove exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and) boolean_flush integer_dup_items integer_lte integer_dup integer_yank boolean_dup boolean_dup boolean_invert_first_then_and boolean_flush integer_dup_items integer_lte integer_dup integer_yank in1 boolean_invert_first_then_and boolean_flush boolean_dup exec_empty integer_dup boolean_dup integer_pop integer_max integer_mult in2 in4 in3 integer_swap exec_k_when_autoconstructing (in3 boolean_dup_times integer_min in3) (boolean_yank) exec_k_when_autoconstructing (in3 boolean_dup_times integer_min in3) (boolean_yank) exec_k_when_autoconstructing (in3 boolean_dup_times integer_min in3) (boolean_yank) print_integer boolean_dup exec_pop (exec_do*count ()))
Zero cases best errors: [0 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 92
Percent parens: 0.141
--- Lexicase Population Statistics ---
Count of elite individuals by case: (780 739 736 797 394 33 646 794 395 378)
Population mean number of elite cases: 5.69
Count of perfect (error zero) individuals by case: (780 739 736 797 394 33 646 794 395 378)
Population mean number of perfect (error zero) cases: 5.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank integer_shove exec_shove (integer_shove boolean_not) in3 exec_shove (integer_shove integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap boolean_rot tag_boolean_339 exec_yankdup boolean_shove exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and) boolean_flush integer_dup_items integer_lte integer_dup integer_yank boolean_dup boolean_dup boolean_invert_first_then_and exec_empty integer_dup_items integer_lte boolean_invert_first_then_and integer_yank in1 boolean_invert_first_then_and boolean_flush boolean_dup exec_empty integer_dup boolean_dup exec_eq integer_max integer_mult in2 in4 in3 integer_swap exec_k_when_autoconstructing (in3 boolean_dup_times integer_min in3) (boolean_yank) exec_k_when_autoconstructing (in3 boolean_dup_times integer_min in3) (boolean_yank) print_integer boolean_dup exec_pop (exec_do*count ()))
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 73
Size: 84
Percent parens: 0.131
--- Population Statistics ---
Average total errors in population: 4.308
Median total errors in population: 4
Error averages by case: (0.22 0.261 0.264 0.203 0.606 0.967 0.354 0.206 0.605 0.622)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 68.349
Average program size in population (points): 78.666
Average percent parens in population: 0.131
Minimum age in population: 50.19138274341822
Maximum age in population: 53.00311934947968
Average age in population: 51.68085684869066
Median age in population: 51.69138274341822
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 83
Genome diversity (% unique genomes):	 0.732
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 91
Syntactic diversity (% unique Push programs):	 0.689
Total error diversity:				 0.01
Error (vector) diversity:			 0.055
Behavioral diversity:				 0.114
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 16962060
--- Timings ---
Current time: 1559584438653 milliseconds
Total Time:          93.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.9 seconds, 71.6%
Fitness Testing:     14.5 seconds, 15.6%
Report:              11.9 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 33
Test mean error for best: 0.03300
Test Case    0 | Error: 0
Test Case    1 | Error: 1
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 1
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 1
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 1
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 1
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 71                  | Program output: 71                 
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 68                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 38                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 21                 
Correct output: 41                  | Program output: 41                 
Correct output: 12                  | Program output: 12                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 33                 
Correct output: 7                   | Program output: 7                  
Correct output: 34                  | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: -16                 | Program output: -16                
Correct output: -55                 | Program output: -55                
Correct output: -55                 | Program output: 13                 
Correct output: -76                 | Program output: -76                
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -90                
Correct output: -39                 | Program output: -39                
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: -72                
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -91                
Correct output: -58                 | Program output: -58                
Correct output: 34                  | Program output: 34                 
Correct output: -6                  | Program output: -6                 
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -68                
Correct output: -91                 | Program output: -91                
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: 60                 
Correct output: -92                 | Program output: -92                
Correct output: -63                 | Program output: -63                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: -84                
Correct output: -54                 | Program output: -54                
Correct output: -36                 | Program output: -36                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: -68                
Correct output: -36                 | Program output: -36                
Correct output: -14                 | Program output: -14                
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: -76                
Correct output: 23                  | Program output: 23                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Lexicase best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank integer_shove exec_shove (integer_shove boolean_not) in3 exec_shove (integer_shove integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap boolean_rot tag_boolean_339 exec_yankdup boolean_shove exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and) boolean_flush integer_dup_items integer_lte integer_dup integer_yank boolean_dup boolean_dup boolean_invert_first_then_and boolean_flush integer_dup_items integer_lte integer_dup integer_yank in1 boolean_invert_first_then_and boolean_flush boolean_dup exec_empty integer_dup boolean_dup boolean_yankdup exec_empty integer_dup boolean_dup integer_pop integer_max integer_mult in2 in4 in3 integer_swap exec_k_when_autoconstructing (in3 boolean_dup_times integer_min in3) (boolean_yank) exec_k_when_autoconstructing (in3 boolean_dup_times integer_min in3 boolean_dup_times integer_min in3) (boolean_yank) print_integer boolean_dup exec_pop (exec_do*count ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 91
Percent parens: 0.121
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Zero cases best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank integer_shove exec_shove (integer_shove boolean_not) in3 exec_shove (integer_shove integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap boolean_rot tag_boolean_339 exec_yankdup boolean_shove exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and) boolean_flush integer_dup_items integer_lte integer_dup integer_yank boolean_dup boolean_dup boolean_invert_first_then_and boolean_flush integer_dup_items integer_lte integer_dup integer_yank in1 boolean_invert_first_then_and boolean_flush boolean_dup exec_empty integer_dup boolean_dup boolean_yankdup exec_empty integer_dup boolean_dup integer_pop integer_max integer_mult in2 in4 in3 integer_swap exec_k_when_autoconstructing (in3 boolean_dup_times integer_min in3) (boolean_yank) exec_k_when_autoconstructing (in3 boolean_dup_times integer_min in3 boolean_dup_times integer_min in3) (boolean_yank) print_integer boolean_dup exec_pop (exec_do*count ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 91
Percent parens: 0.121
--- Lexicase Population Statistics ---
Count of elite individuals by case: (418 844 614 481 442 835 826 442 454 454)
Population mean number of elite cases: 5.81
Count of perfect (error zero) individuals by case: (418 844 614 481 442 835 826 442 454 454)
Population mean number of perfect (error zero) cases: 5.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_boolean_339} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count})
Best program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank integer_shove exec_shove (integer_shove boolean_not) in3 exec_shove (integer_shove integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap boolean_rot tag_boolean_339 exec_yankdup boolean_shove exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and) boolean_flush integer_dup_items integer_lte integer_dup integer_yank boolean_dup boolean_dup boolean_invert_first_then_and boolean_flush integer_dup_items integer_lte integer_dup integer_yank in1 boolean_invert_first_then_and boolean_flush boolean_dup exec_empty integer_dup boolean_dup integer_pop integer_lte integer_dup integer_yank in1 boolean_invert_first_then_and boolean_flush boolean_dup exec_empty integer_dup boolean_dup integer_pop integer_max integer_mult in2 in4 in3 integer_swap exec_k_when_autoconstructing (in3 boolean_dup_times integer_min in3) (boolean_yank) integer_min in3 boolean_yank exec_k_when_autoconstructing (in3 boolean_dup_times integer_min print_integer boolean_dup exec_pop (exec_do*count ())) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 85
Size: 96
Percent parens: 0.115
--- Population Statistics ---
Average total errors in population: 4.19
Median total errors in population: 3
Error averages by case: (0.582 0.156 0.386 0.519 0.558 0.165 0.174 0.558 0.546 0.546)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 74.608
Average program size in population (points): 85.476
Average percent parens in population: 0.127
Minimum age in population: 52.37964613735676
Maximum age in population: 54.69138274341822
Average age in population: 53.41564813262969
Median age in population: 53.45758028887212
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 58
Genome diversity (% unique genomes):	 0.676
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.645
Total error diversity:				 0.01
Error (vector) diversity:			 0.053
Behavioral diversity:				 0.119
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 17722170
--- Timings ---
Current time: 1559584441662 milliseconds
Total Time:          96.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.7 seconds, 71.3%
Fitness Testing:     15.1 seconds, 15.7%
Report:              12.4 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 35
Successful program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank integer_shove exec_shove (integer_shove boolean_not) in3 exec_shove (integer_shove integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap boolean_rot tag_boolean_339 exec_yankdup boolean_shove exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and) boolean_flush integer_dup_items integer_lte integer_dup integer_yank boolean_dup boolean_dup boolean_invert_first_then_and boolean_flush integer_dup_items integer_lte integer_dup integer_yank in1 boolean_invert_first_then_and boolean_flush boolean_dup exec_empty integer_dup boolean_dup integer_pop integer_lte integer_dup integer_yank in1 boolean_invert_first_then_and boolean_flush boolean_dup exec_empty integer_dup boolean_dup integer_pop integer_max integer_mult in2 in4 in3 integer_swap exec_k_when_autoconstructing (in3 boolean_dup_times integer_min in3) (boolean_yank) integer_min in3 boolean_yank exec_k_when_autoconstructing (in3 boolean_dup_times integer_min print_integer boolean_dup exec_pop (exec_do*count ())) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 96


Auto-simplifying with starting size: 96
step: 0
program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank integer_shove exec_shove (integer_shove boolean_not) in3 exec_shove (integer_shove integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap boolean_rot tag_boolean_339 exec_yankdup boolean_shove exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and) boolean_flush integer_dup_items integer_lte integer_dup integer_yank boolean_dup boolean_dup boolean_invert_first_then_and boolean_flush integer_dup_items integer_lte integer_dup integer_yank in1 boolean_invert_first_then_and boolean_flush boolean_dup exec_empty integer_dup boolean_dup integer_pop integer_lte integer_dup integer_yank in1 boolean_invert_first_then_and boolean_flush boolean_dup exec_empty integer_dup boolean_dup integer_pop integer_max integer_mult in2 in4 in3 integer_swap exec_k_when_autoconstructing (in3 boolean_dup_times integer_min in3) (boolean_yank) integer_min in3 boolean_yank exec_k_when_autoconstructing (in3 boolean_dup_times integer_min print_integer boolean_dup exec_pop (exec_do*count ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 96

step: 500
program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank integer_shove exec_shove (integer_shove boolean_not) in3 exec_shove (integer_shove integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap boolean_rot tag_boolean_339 exec_yankdup boolean_shove exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and) boolean_flush integer_dup_items integer_lte integer_dup integer_yank boolean_dup boolean_dup boolean_invert_first_then_and boolean_flush integer_dup_items integer_lte integer_dup integer_yank in1 boolean_invert_first_then_and boolean_flush boolean_dup exec_empty integer_dup boolean_dup integer_pop integer_lte integer_dup integer_yank in1 boolean_invert_first_then_and boolean_flush boolean_dup exec_empty integer_dup boolean_dup integer_pop integer_max integer_mult in2 in4 in3 integer_swap exec_k_when_autoconstructing (in3 boolean_dup_times integer_min in3) (boolean_yank) integer_min in3 boolean_yank exec_k_when_autoconstructing (in3 boolean_dup_times integer_min print_integer boolean_dup exec_pop (exec_do*count ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 96

step: 1000
program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank integer_shove exec_shove (integer_shove boolean_not) in3 exec_shove (integer_shove integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap boolean_rot tag_boolean_339 exec_yankdup boolean_shove exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and) boolean_flush integer_dup_items integer_lte integer_dup integer_yank boolean_dup boolean_dup boolean_invert_first_then_and boolean_flush integer_dup_items integer_lte integer_dup integer_yank in1 boolean_invert_first_then_and boolean_flush boolean_dup exec_empty integer_dup boolean_dup integer_pop integer_lte integer_dup integer_yank in1 boolean_invert_first_then_and boolean_flush boolean_dup exec_empty integer_dup boolean_dup integer_pop integer_max integer_mult in2 in4 in3 integer_swap exec_k_when_autoconstructing (in3 boolean_dup_times integer_min in3) (boolean_yank) integer_min in3 boolean_yank exec_k_when_autoconstructing (in3 boolean_dup_times integer_min print_integer boolean_dup exec_pop (exec_do*count ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 96

step: 1500
program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank integer_shove exec_shove (integer_shove boolean_not) in3 exec_shove (integer_shove integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap boolean_rot tag_boolean_339 exec_yankdup boolean_shove exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and) boolean_flush integer_dup_items integer_lte integer_dup integer_yank boolean_dup boolean_dup boolean_invert_first_then_and boolean_flush integer_dup_items integer_lte integer_dup integer_yank in1 boolean_invert_first_then_and boolean_flush boolean_dup exec_empty integer_dup boolean_dup integer_pop integer_lte integer_dup integer_yank in1 boolean_invert_first_then_and boolean_flush boolean_dup exec_empty integer_dup boolean_dup integer_pop integer_max integer_mult in2 in4 in3 integer_swap exec_k_when_autoconstructing (in3 boolean_dup_times integer_min in3) (boolean_yank) integer_min in3 boolean_yank exec_k_when_autoconstructing (in3 boolean_dup_times integer_min print_integer boolean_dup exec_pop (exec_do*count ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 96

step: 2000
program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank integer_shove exec_shove (integer_shove boolean_not) in3 exec_shove (integer_shove integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap boolean_rot tag_boolean_339 exec_yankdup boolean_shove exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and) boolean_flush integer_dup_items integer_lte integer_dup integer_yank boolean_dup boolean_dup boolean_invert_first_then_and boolean_flush integer_dup_items integer_lte integer_dup integer_yank in1 boolean_invert_first_then_and boolean_flush boolean_dup exec_empty integer_dup boolean_dup integer_pop integer_lte integer_dup integer_yank in1 boolean_invert_first_then_and boolean_flush boolean_dup exec_empty integer_dup boolean_dup integer_pop integer_max integer_mult in2 in4 in3 integer_swap exec_k_when_autoconstructing (in3 boolean_dup_times integer_min in3) (boolean_yank) integer_min in3 boolean_yank exec_k_when_autoconstructing (in3 boolean_dup_times integer_min print_integer boolean_dup exec_pop (exec_do*count ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 96

step: 2500
program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank integer_shove exec_shove (integer_shove boolean_not) in3 exec_shove (integer_shove integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap boolean_rot tag_boolean_339 exec_yankdup boolean_shove exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and) boolean_flush integer_dup_items integer_lte integer_dup integer_yank boolean_dup boolean_dup boolean_invert_first_then_and boolean_flush integer_dup_items integer_lte integer_dup integer_yank in1 boolean_invert_first_then_and boolean_flush boolean_dup exec_empty integer_dup boolean_dup integer_pop integer_lte integer_dup integer_yank in1 boolean_invert_first_then_and boolean_flush boolean_dup exec_empty integer_dup boolean_dup integer_pop integer_max integer_mult in2 in4 in3 integer_swap exec_k_when_autoconstructing (in3 boolean_dup_times integer_min in3) (boolean_yank) integer_min in3 boolean_yank exec_k_when_autoconstructing (in3 boolean_dup_times integer_min print_integer boolean_dup exec_pop (exec_do*count ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 96

step: 3000
program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank integer_shove exec_shove (integer_shove boolean_not) in3 exec_shove (integer_shove integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap boolean_rot tag_boolean_339 exec_yankdup boolean_shove exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and) boolean_flush integer_dup_items integer_lte integer_dup integer_yank boolean_dup boolean_dup boolean_invert_first_then_and boolean_flush integer_dup_items integer_lte integer_dup integer_yank in1 boolean_invert_first_then_and boolean_flush boolean_dup exec_empty integer_dup boolean_dup integer_pop integer_lte integer_dup integer_yank in1 boolean_invert_first_then_and boolean_flush boolean_dup exec_empty integer_dup boolean_dup integer_pop integer_max integer_mult in2 in4 in3 integer_swap exec_k_when_autoconstructing (in3 boolean_dup_times integer_min in3) (boolean_yank) integer_min in3 boolean_yank exec_k_when_autoconstructing (in3 boolean_dup_times integer_min print_integer boolean_dup exec_pop (exec_do*count ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 96

step: 3500
program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank integer_shove exec_shove (integer_shove boolean_not) in3 exec_shove (integer_shove integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap boolean_rot tag_boolean_339 exec_yankdup boolean_shove exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and) boolean_flush integer_dup_items integer_lte integer_dup integer_yank boolean_dup boolean_dup boolean_invert_first_then_and boolean_flush integer_dup_items integer_lte integer_dup integer_yank in1 boolean_invert_first_then_and boolean_flush boolean_dup exec_empty integer_dup boolean_dup integer_pop integer_lte integer_dup integer_yank in1 boolean_invert_first_then_and boolean_flush boolean_dup exec_empty integer_dup boolean_dup integer_pop integer_max integer_mult in2 in4 in3 integer_swap exec_k_when_autoconstructing (in3 boolean_dup_times integer_min in3) (boolean_yank) integer_min in3 boolean_yank exec_k_when_autoconstructing (in3 boolean_dup_times integer_min print_integer boolean_dup exec_pop (exec_do*count ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 96

step: 4000
program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank integer_shove exec_shove (integer_shove boolean_not) in3 exec_shove (integer_shove integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap boolean_rot tag_boolean_339 exec_yankdup boolean_shove exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and) boolean_flush integer_dup_items integer_lte integer_dup integer_yank boolean_dup boolean_dup boolean_invert_first_then_and boolean_flush integer_dup_items integer_lte integer_dup integer_yank in1 boolean_invert_first_then_and boolean_flush boolean_dup exec_empty integer_dup boolean_dup integer_pop integer_lte integer_dup integer_yank in1 boolean_invert_first_then_and boolean_flush boolean_dup exec_empty integer_dup boolean_dup integer_pop integer_max integer_mult in2 in4 in3 integer_swap exec_k_when_autoconstructing (in3 boolean_dup_times integer_min in3) (boolean_yank) integer_min in3 boolean_yank exec_k_when_autoconstructing (in3 boolean_dup_times integer_min print_integer boolean_dup exec_pop (exec_do*count ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 96

step: 4500
program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank integer_shove exec_shove (integer_shove boolean_not) in3 exec_shove (integer_shove integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap boolean_rot tag_boolean_339 exec_yankdup boolean_shove exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and) boolean_flush integer_dup_items integer_lte integer_dup integer_yank boolean_dup boolean_dup boolean_invert_first_then_and boolean_flush integer_dup_items integer_lte integer_dup integer_yank in1 boolean_invert_first_then_and boolean_flush boolean_dup exec_empty integer_dup boolean_dup integer_pop integer_lte integer_dup integer_yank in1 boolean_invert_first_then_and boolean_flush boolean_dup exec_empty integer_dup boolean_dup integer_pop integer_max integer_mult in2 in4 in3 integer_swap exec_k_when_autoconstructing (in3 boolean_dup_times integer_min in3) (boolean_yank) integer_min in3 boolean_yank exec_k_when_autoconstructing (in3 boolean_dup_times integer_min print_integer boolean_dup exec_pop (exec_do*count ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 96

step: 5000
program: (exec_do*while (boolean_invert_second_then_and) boolean_frominteger exec_yank integer_shove exec_shove (integer_shove boolean_not) in3 exec_shove (integer_shove integer_shove boolean_not) integer_pop integer_shove exec_yankdup boolean_swap exec_yankdup integer_yank tag_boolean_339 exec_yankdup boolean_swap boolean_rot tag_boolean_339 exec_yankdup boolean_shove exec_do*while (integer_yank boolean_dup boolean_invert_first_then_and) boolean_flush integer_dup_items integer_lte integer_dup integer_yank boolean_dup boolean_dup boolean_invert_first_then_and boolean_flush integer_dup_items integer_lte integer_dup integer_yank in1 boolean_invert_first_then_and boolean_flush boolean_dup exec_empty integer_dup boolean_dup integer_pop integer_lte integer_dup integer_yank in1 boolean_invert_first_then_and boolean_flush boolean_dup exec_empty integer_dup boolean_dup integer_pop integer_max integer_mult in2 in4 in3 integer_swap exec_k_when_autoconstructing (in3 boolean_dup_times integer_min in3) (boolean_yank) integer_min in3 boolean_yank exec_k_when_autoconstructing (in3 boolean_dup_times integer_min print_integer boolean_dup exec_pop (exec_do*count ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 96

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 33
Test mean error for best: 0.03300
Test Case    0 | Error: 0
Test Case    1 | Error: 1
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 1
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 1
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 1
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 1
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 71                  | Program output: 71                 
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 68                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 38                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 21                 
Correct output: 41                  | Program output: 41                 
Correct output: 12                  | Program output: 12                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 33                 
Correct output: 7                   | Program output: 7                  
Correct output: 34                  | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: -16                 | Program output: -16                
Correct output: -55                 | Program output: -55                
Correct output: -55                 | Program output: 13                 
Correct output: -76                 | Program output: -76                
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -90                
Correct output: -39                 | Program output: -39                
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: -72                
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -91                
Correct output: -58                 | Program output: -58                
Correct output: 34                  | Program output: 34                 
Correct output: -6                  | Program output: -6                 
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -68                
Correct output: -91                 | Program output: -91                
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: 60                 
Correct output: -92                 | Program output: -92                
Correct output: -63                 | Program output: -63                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: -84                
Correct output: -54                 | Program output: -54                
Correct output: -36                 | Program output: -36                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: -68                
Correct output: -36                 | Program output: -36                
Correct output: -14                 | Program output: -14                
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: -76                
Correct output: 23                  | Program output: 23                 
;;******************************
