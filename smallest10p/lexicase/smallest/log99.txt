Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-16 -16 -16 -82] -82] [[97 63 63 63] 63] [[-12 -12 -43 -12] -43] [[65 -71 65 65] -71] [[8 -7 8 8] -7] [[14 -71 14 14] -71] [[-69 -69 -69 -69] -69] [[81 -80 81 81] -80] [[-22 66 -22 -22] -22] [[22 23 23 23] 22] [(-94 -94 -94 -94) -94] [(-8 -8 -8 -8) -8] [(89 89 89 89) 89] [(0 0 0 0) 0] [(99 99 99 99) 99] [(96 13 78 86) 13] [(65 63 74 51) 51] [(48 97 56 58) 48] [(2 62 46 4) 2] [(79 71 2 86) 2] [(12 94 46 54) 12] [(12 15 92 93) 12] [(40 82 65 56) 40] [(21 19 10 45) 10] [(45 3 19 48) 3] [(72 90 68 13) 13] [(7 43 20 66) 7] [(43 34 94 4) 4] [(56 32 41 68) 32] [(76 43 90 40) 40] [(89 13 20 21) 13] [(60 63 68 5) 5] [(51 79 19 9) 9] [(60 1 53 64) 1] [(50 96 73 45) 45] [(-46 -87 -41 -7) -87] [(20 -90 10 -10) -90] [(25 72 -26 -62) -62] [(85 1 62 -29) -29] [(-18 8 47 43) -18] [(2 -55 92 39) -55] [(-10 -19 -86 -9) -86] [(-77 97 10 -4) -77] [(-95 19 -93 -2) -95] [(-37 -91 66 98) -91] [(-61 36 93 57) -61] [(-19 -57 -13 -81) -81] [(-84 35 -79 -58) -84] [(-51 -70 81 65) -70] [(3 13 57 20) 3] [(-9 -88 -27 -54) -88] [(-86 89 85 -73) -86] [(23 72 92 -51) -51] [(77 71 66 -62) -62] [(27 29 -77 -27) -77] [(-50 -71 73 -62) -71] [(-66 -39 88 58) -66] [(77 -22 16 9) -22] [(46 3 -51 15) -51] [(24 19 4 42) 4] [(-7 51 -7 -49) -49] [(-53 99 -23 92) -53] [(76 9 99 -71) -71] [(-68 -86 18 -26) -86] [(-48 -61 76 5) -61] [(12 -44 48 -92) -92] [(-5 -46 -57 9) -57] [(15 13 -100 -88) -100] [(-60 -55 -3 -85) -85] [(31 -41 50 52) -41] [(-42 -19 -16 -35) -42] [(12 36 -42 50) -42] [(-30 -99 -66 -92) -99] [(-31 27 -76 56) -76] [(-53 -71 15 -61) -71] [(-51 -23 88 86) -51] [(36 59 55 67) 36] [(-26 -23 -78 -34) -78] [(9 -6 -87 -9) -87] [(93 1 -87 -49) -87] [(5 -44 54 2) -44] [(-14 -4 -10 -81) -81] [(65 17 38 75) 17] [(-29 -62 75 96) -62] [(-65 85 94 -16) -65] [(99 -25 17 21) -25] [(-56 58 27 -70) -70] [(-70 7 -41 7) -70] [(60 -2 84 -97) -97] [(30 -5 -92 -47) -92] [(28 -11 40 -77) -77] [(-72 15 -65 -52) -72] [(34 42 31 -43) -43] [(-12 -12 -63 3) -63] [(70 32 -76 -65) -76])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-16 -16 -16 -82] -82]
Train Case:   6 | Input/Output: [[97 63 63 63] 63]
Train Case:   7 | Input/Output: [[-12 -12 -43 -12] -43]
Train Case:   8 | Input/Output: [[65 -71 65 65] -71]
Train Case:   9 | Input/Output: [[8 -7 8 8] -7]
Train Case:  10 | Input/Output: [[14 -71 14 14] -71]
Train Case:  11 | Input/Output: [[-69 -69 -69 -69] -69]
Train Case:  12 | Input/Output: [[81 -80 81 81] -80]
Train Case:  13 | Input/Output: [[-22 66 -22 -22] -22]
Train Case:  14 | Input/Output: [[22 23 23 23] 22]
Train Case:  15 | Input/Output: [(-94 -94 -94 -94) -94]
Train Case:  16 | Input/Output: [(-8 -8 -8 -8) -8]
Train Case:  17 | Input/Output: [(89 89 89 89) 89]
Train Case:  18 | Input/Output: [(0 0 0 0) 0]
Train Case:  19 | Input/Output: [(99 99 99 99) 99]
Train Case:  20 | Input/Output: [(96 13 78 86) 13]
Train Case:  21 | Input/Output: [(65 63 74 51) 51]
Train Case:  22 | Input/Output: [(48 97 56 58) 48]
Train Case:  23 | Input/Output: [(2 62 46 4) 2]
Train Case:  24 | Input/Output: [(79 71 2 86) 2]
Train Case:  25 | Input/Output: [(12 94 46 54) 12]
Train Case:  26 | Input/Output: [(12 15 92 93) 12]
Train Case:  27 | Input/Output: [(40 82 65 56) 40]
Train Case:  28 | Input/Output: [(21 19 10 45) 10]
Train Case:  29 | Input/Output: [(45 3 19 48) 3]
Train Case:  30 | Input/Output: [(72 90 68 13) 13]
Train Case:  31 | Input/Output: [(7 43 20 66) 7]
Train Case:  32 | Input/Output: [(43 34 94 4) 4]
Train Case:  33 | Input/Output: [(56 32 41 68) 32]
Train Case:  34 | Input/Output: [(76 43 90 40) 40]
Train Case:  35 | Input/Output: [(89 13 20 21) 13]
Train Case:  36 | Input/Output: [(60 63 68 5) 5]
Train Case:  37 | Input/Output: [(51 79 19 9) 9]
Train Case:  38 | Input/Output: [(60 1 53 64) 1]
Train Case:  39 | Input/Output: [(50 96 73 45) 45]
Train Case:  40 | Input/Output: [(-46 -87 -41 -7) -87]
Train Case:  41 | Input/Output: [(20 -90 10 -10) -90]
Train Case:  42 | Input/Output: [(25 72 -26 -62) -62]
Train Case:  43 | Input/Output: [(85 1 62 -29) -29]
Train Case:  44 | Input/Output: [(-18 8 47 43) -18]
Train Case:  45 | Input/Output: [(2 -55 92 39) -55]
Train Case:  46 | Input/Output: [(-10 -19 -86 -9) -86]
Train Case:  47 | Input/Output: [(-77 97 10 -4) -77]
Train Case:  48 | Input/Output: [(-95 19 -93 -2) -95]
Train Case:  49 | Input/Output: [(-37 -91 66 98) -91]
Train Case:  50 | Input/Output: [(-61 36 93 57) -61]
Train Case:  51 | Input/Output: [(-19 -57 -13 -81) -81]
Train Case:  52 | Input/Output: [(-84 35 -79 -58) -84]
Train Case:  53 | Input/Output: [(-51 -70 81 65) -70]
Train Case:  54 | Input/Output: [(3 13 57 20) 3]
Train Case:  55 | Input/Output: [(-9 -88 -27 -54) -88]
Train Case:  56 | Input/Output: [(-86 89 85 -73) -86]
Train Case:  57 | Input/Output: [(23 72 92 -51) -51]
Train Case:  58 | Input/Output: [(77 71 66 -62) -62]
Train Case:  59 | Input/Output: [(27 29 -77 -27) -77]
Train Case:  60 | Input/Output: [(-50 -71 73 -62) -71]
Train Case:  61 | Input/Output: [(-66 -39 88 58) -66]
Train Case:  62 | Input/Output: [(77 -22 16 9) -22]
Train Case:  63 | Input/Output: [(46 3 -51 15) -51]
Train Case:  64 | Input/Output: [(24 19 4 42) 4]
Train Case:  65 | Input/Output: [(-7 51 -7 -49) -49]
Train Case:  66 | Input/Output: [(-53 99 -23 92) -53]
Train Case:  67 | Input/Output: [(76 9 99 -71) -71]
Train Case:  68 | Input/Output: [(-68 -86 18 -26) -86]
Train Case:  69 | Input/Output: [(-48 -61 76 5) -61]
Train Case:  70 | Input/Output: [(12 -44 48 -92) -92]
Train Case:  71 | Input/Output: [(-5 -46 -57 9) -57]
Train Case:  72 | Input/Output: [(15 13 -100 -88) -100]
Train Case:  73 | Input/Output: [(-60 -55 -3 -85) -85]
Train Case:  74 | Input/Output: [(31 -41 50 52) -41]
Train Case:  75 | Input/Output: [(-42 -19 -16 -35) -42]
Train Case:  76 | Input/Output: [(12 36 -42 50) -42]
Train Case:  77 | Input/Output: [(-30 -99 -66 -92) -99]
Train Case:  78 | Input/Output: [(-31 27 -76 56) -76]
Train Case:  79 | Input/Output: [(-53 -71 15 -61) -71]
Train Case:  80 | Input/Output: [(-51 -23 88 86) -51]
Train Case:  81 | Input/Output: [(36 59 55 67) 36]
Train Case:  82 | Input/Output: [(-26 -23 -78 -34) -78]
Train Case:  83 | Input/Output: [(9 -6 -87 -9) -87]
Train Case:  84 | Input/Output: [(93 1 -87 -49) -87]
Train Case:  85 | Input/Output: [(5 -44 54 2) -44]
Train Case:  86 | Input/Output: [(-14 -4 -10 -81) -81]
Train Case:  87 | Input/Output: [(65 17 38 75) 17]
Train Case:  88 | Input/Output: [(-29 -62 75 96) -62]
Train Case:  89 | Input/Output: [(-65 85 94 -16) -65]
Train Case:  90 | Input/Output: [(99 -25 17 21) -25]
Train Case:  91 | Input/Output: [(-56 58 27 -70) -70]
Train Case:  92 | Input/Output: [(-70 7 -41 7) -70]
Train Case:  93 | Input/Output: [(60 -2 84 -97) -97]
Train Case:  94 | Input/Output: [(30 -5 -92 -47) -92]
Train Case:  95 | Input/Output: [(28 -11 40 -77) -77]
Train Case:  96 | Input/Output: [(-72 15 -65 -52) -72]
Train Case:  97 | Input/Output: [(34 42 31 -43) -43]
Train Case:  98 | Input/Output: [(-12 -12 -63 3) -63]
Train Case:  99 | Input/Output: [(70 32 -76 -65) -76]
Test Case:   0 | Input/Output: [[92 92 -61 92] -61]
Test Case:   1 | Input/Output: [[-98 -98 -98 29] -98]
Test Case:   2 | Input/Output: [[-91 -91 -91 -45] -91]
Test Case:   3 | Input/Output: [[52 52 -23 52] -23]
Test Case:   4 | Input/Output: [[23 23 23 54] 23]
Test Case:   5 | Input/Output: [[-89 -89 -72 -89] -89]
Test Case:   6 | Input/Output: [[-66 -66 -66 56] -66]
Test Case:   7 | Input/Output: [[-41 77 77 77] -41]
Test Case:   8 | Input/Output: [[-92 -92 91 -92] -92]
Test Case:   9 | Input/Output: [[-14 -14 -14 95] -14]
Test Case:  10 | Input/Output: [[87 87 87 -50] -50]
Test Case:  11 | Input/Output: [[91 91 -88 91] -88]
Test Case:  12 | Input/Output: [[60 19 60 60] 19]
Test Case:  13 | Input/Output: [[-45 -45 24 -45] -45]
Test Case:  14 | Input/Output: [[-11 -11 -11 -80] -80]
Test Case:  15 | Input/Output: [[-65 -65 88 -65] -65]
Test Case:  16 | Input/Output: [[-23 -23 -25 -23] -25]
Test Case:  17 | Input/Output: [[-59 92 92 92] -59]
Test Case:  18 | Input/Output: [[-91 -91 82 -91] -91]
Test Case:  19 | Input/Output: [[-82 17 17 17] -82]
Test Case:  20 | Input/Output: [[100 -28 -28 -28] -28]
Test Case:  21 | Input/Output: [[-49 -49 -49 29] -49]
Test Case:  22 | Input/Output: [[-69 -69 -69 -81] -81]
Test Case:  23 | Input/Output: [[95 95 33 95] 33]
Test Case:  24 | Input/Output: [[-2 -2 -2 36] -2]
Test Case:  25 | Input/Output: [[-47 -47 63 -47] -47]
Test Case:  26 | Input/Output: [[14 65 65 65] 14]
Test Case:  27 | Input/Output: [[-82 -82 -82 -18] -82]
Test Case:  28 | Input/Output: [[-12 -12 -52 -12] -52]
Test Case:  29 | Input/Output: [[-20 -4 -4 -4] -20]
Test Case:  30 | Input/Output: [[-28 -28 17 -28] -28]
Test Case:  31 | Input/Output: [[89 -42 -42 -42] -42]
Test Case:  32 | Input/Output: [[-51 -51 -51 -32] -51]
Test Case:  33 | Input/Output: [[35 23 23 23] 23]
Test Case:  34 | Input/Output: [[2 22 22 22] 2]
Test Case:  35 | Input/Output: [[42 42 42 -73] -73]
Test Case:  36 | Input/Output: [[68 68 68 61] 61]
Test Case:  37 | Input/Output: [[-47 89 -47 -47] -47]
Test Case:  38 | Input/Output: [[-38 23 -38 -38] -38]
Test Case:  39 | Input/Output: [[-5 -5 -5 -47] -47]
Test Case:  40 | Input/Output: [[35 40 35 35] 35]
Test Case:  41 | Input/Output: [[-12 -12 -12 37] -12]
Test Case:  42 | Input/Output: [[-22 -22 -32 -22] -32]
Test Case:  43 | Input/Output: [[-57 -25 -25 -25] -57]
Test Case:  44 | Input/Output: [[-67 21 -67 -67] -67]
Test Case:  45 | Input/Output: [[-37 -37 -37 -4] -37]
Test Case:  46 | Input/Output: [[86 -70 86 86] -70]
Test Case:  47 | Input/Output: [[64 18 64 64] 18]
Test Case:  48 | Input/Output: [[100 100 100 95] 95]
Test Case:  49 | Input/Output: [[43 -94 -94 -94] -94]
Test Case:  50 | Input/Output: [[86 86 16 86] 16]
Test Case:  51 | Input/Output: [[-15 -15 67 -15] -15]
Test Case:  52 | Input/Output: [[-25 -12 -12 -12] -25]
Test Case:  53 | Input/Output: [[78 78 78 -71] -71]
Test Case:  54 | Input/Output: [[-45 -45 -45 20] -45]
Test Case:  55 | Input/Output: [[15 15 -83 15] -83]
Test Case:  56 | Input/Output: [[85 85 -7 85] -7]
Test Case:  57 | Input/Output: [[79 79 79 -4] -4]
Test Case:  58 | Input/Output: [[-6 50 50 50] -6]
Test Case:  59 | Input/Output: [[81 81 81 -33] -33]
Test Case:  60 | Input/Output: [[-54 -54 -54 -91] -91]
Test Case:  61 | Input/Output: [[57 57 57 20] 20]
Test Case:  62 | Input/Output: [[-28 -99 -28 -28] -99]
Test Case:  63 | Input/Output: [[-29 -24 -24 -24] -29]
Test Case:  64 | Input/Output: [[64 -49 64 64] -49]
Test Case:  65 | Input/Output: [[-55 -55 -55 17] -55]
Test Case:  66 | Input/Output: [[28 28 28 -64] -64]
Test Case:  67 | Input/Output: [[-33 -33 -33 -52] -52]
Test Case:  68 | Input/Output: [[72 -57 72 72] -57]
Test Case:  69 | Input/Output: [[16 58 16 16] 16]
Test Case:  70 | Input/Output: [[-63 -63 -63 60] -63]
Test Case:  71 | Input/Output: [[-72 -72 -72 -18] -72]
Test Case:  72 | Input/Output: [[-38 -16 -38 -38] -38]
Test Case:  73 | Input/Output: [[27 -74 27 27] -74]
Test Case:  74 | Input/Output: [[49 49 49 51] 49]
Test Case:  75 | Input/Output: [[-5 84 -5 -5] -5]
Test Case:  76 | Input/Output: [[20 20 20 -32] -32]
Test Case:  77 | Input/Output: [[-70 -70 -46 -70] -70]
Test Case:  78 | Input/Output: [[22 22 35 22] 22]
Test Case:  79 | Input/Output: [[-92 -52 -52 -52] -92]
Test Case:  80 | Input/Output: [[-36 -36 -36 -88] -88]
Test Case:  81 | Input/Output: [[-66 -66 75 -66] -66]
Test Case:  82 | Input/Output: [[97 31 31 31] 31]
Test Case:  83 | Input/Output: [[-14 -14 77 -14] -14]
Test Case:  84 | Input/Output: [[52 26 26 26] 26]
Test Case:  85 | Input/Output: [[68 68 68 53] 53]
Test Case:  86 | Input/Output: [[-89 -89 -89 84] -89]
Test Case:  87 | Input/Output: [[28 28 28 -84] -84]
Test Case:  88 | Input/Output: [[-95 -98 -98 -98] -98]
Test Case:  89 | Input/Output: [[-94 84 -94 -94] -94]
Test Case:  90 | Input/Output: [[65 65 65 -99] -99]
Test Case:  91 | Input/Output: [[-21 -21 2 -21] -21]
Test Case:  92 | Input/Output: [[-4 -4 -67 -4] -67]
Test Case:  93 | Input/Output: [[-55 -55 -55 -47] -55]
Test Case:  94 | Input/Output: [[-32 1 -32 -32] -32]
Test Case:  95 | Input/Output: [[49 33 49 49] 33]
Test Case:  96 | Input/Output: [[10 10 -40 10] -40]
Test Case:  97 | Input/Output: [[-73 -43 -43 -43] -73]
Test Case:  98 | Input/Output: [[-97 62 -97 -97] -97]
Test Case:  99 | Input/Output: [[49 49 9 49] 9]
Test Case: 100 | Input/Output: [(74 74 74 74) 74]
Test Case: 101 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 102 | Input/Output: [(80 80 80 80) 80]
Test Case: 103 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 104 | Input/Output: [(28 28 28 28) 28]
Test Case: 105 | Input/Output: [(61 61 61 61) 61]
Test Case: 106 | Input/Output: [(80 80 80 80) 80]
Test Case: 107 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 108 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 109 | Input/Output: [(44 44 44 44) 44]
Test Case: 110 | Input/Output: [(87 87 87 87) 87]
Test Case: 111 | Input/Output: [(89 89 89 89) 89]
Test Case: 112 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 113 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 114 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 115 | Input/Output: [(90 90 90 90) 90]
Test Case: 116 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 117 | Input/Output: [(72 72 72 72) 72]
Test Case: 118 | Input/Output: [(33 33 33 33) 33]
Test Case: 119 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 120 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 121 | Input/Output: [(64 64 64 64) 64]
Test Case: 122 | Input/Output: [(59 59 59 59) 59]
Test Case: 123 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 124 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 125 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 126 | Input/Output: [(43 43 43 43) 43]
Test Case: 127 | Input/Output: [(74 74 74 74) 74]
Test Case: 128 | Input/Output: [(1 1 1 1) 1]
Test Case: 129 | Input/Output: [(91 91 91 91) 91]
Test Case: 130 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 131 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 132 | Input/Output: [(64 64 64 64) 64]
Test Case: 133 | Input/Output: [(58 58 58 58) 58]
Test Case: 134 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 135 | Input/Output: [(29 29 29 29) 29]
Test Case: 136 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 137 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 138 | Input/Output: [(3 3 3 3) 3]
Test Case: 139 | Input/Output: [(87 87 87 87) 87]
Test Case: 140 | Input/Output: [(12 12 12 12) 12]
Test Case: 141 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 142 | Input/Output: [(42 42 42 42) 42]
Test Case: 143 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 144 | Input/Output: [(79 79 79 79) 79]
Test Case: 145 | Input/Output: [(4 4 4 4) 4]
Test Case: 146 | Input/Output: [(69 69 69 69) 69]
Test Case: 147 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 148 | Input/Output: [(23 23 23 23) 23]
Test Case: 149 | Input/Output: [(23 23 23 23) 23]
Test Case: 150 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 151 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 152 | Input/Output: [(66 66 66 66) 66]
Test Case: 153 | Input/Output: [(55 55 55 55) 55]
Test Case: 154 | Input/Output: [(26 26 26 26) 26]
Test Case: 155 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 156 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 157 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 158 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 159 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 160 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 161 | Input/Output: [(28 28 28 28) 28]
Test Case: 162 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 163 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 164 | Input/Output: [(93 93 93 93) 93]
Test Case: 165 | Input/Output: [(30 30 30 30) 30]
Test Case: 166 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 167 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 168 | Input/Output: [(89 89 89 89) 89]
Test Case: 169 | Input/Output: [(71 71 71 71) 71]
Test Case: 170 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 171 | Input/Output: [(57 57 57 57) 57]
Test Case: 172 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 173 | Input/Output: [(65 65 65 65) 65]
Test Case: 174 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 175 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 176 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 177 | Input/Output: [(14 14 14 14) 14]
Test Case: 178 | Input/Output: [(63 63 63 63) 63]
Test Case: 179 | Input/Output: [(15 15 15 15) 15]
Test Case: 180 | Input/Output: [(50 50 50 50) 50]
Test Case: 181 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 182 | Input/Output: [(53 53 53 53) 53]
Test Case: 183 | Input/Output: [(84 84 84 84) 84]
Test Case: 184 | Input/Output: [(85 85 85 85) 85]
Test Case: 185 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 186 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 187 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 188 | Input/Output: [(19 19 19 19) 19]
Test Case: 189 | Input/Output: [(30 30 30 30) 30]
Test Case: 190 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 191 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 192 | Input/Output: [(35 35 35 35) 35]
Test Case: 193 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 194 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 195 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 196 | Input/Output: [(69 69 69 69) 69]
Test Case: 197 | Input/Output: [(0 0 0 0) 0]
Test Case: 198 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 199 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 200 | Input/Output: [(88 55 36 82) 36]
Test Case: 201 | Input/Output: [(74 69 10 68) 10]
Test Case: 202 | Input/Output: [(58 44 4 70) 4]
Test Case: 203 | Input/Output: [(50 58 92 48) 48]
Test Case: 204 | Input/Output: [(13 23 25 29) 13]
Test Case: 205 | Input/Output: [(11 21 89 13) 11]
Test Case: 206 | Input/Output: [(57 72 2 13) 2]
Test Case: 207 | Input/Output: [(74 18 89 44) 18]
Test Case: 208 | Input/Output: [(35 35 0 72) 0]
Test Case: 209 | Input/Output: [(44 52 64 64) 44]
Test Case: 210 | Input/Output: [(68 4 44 74) 4]
Test Case: 211 | Input/Output: [(71 2 14 53) 2]
Test Case: 212 | Input/Output: [(36 15 75 51) 15]
Test Case: 213 | Input/Output: [(38 59 51 74) 38]
Test Case: 214 | Input/Output: [(28 84 85 21) 21]
Test Case: 215 | Input/Output: [(42 77 93 48) 42]
Test Case: 216 | Input/Output: [(14 98 61 89) 14]
Test Case: 217 | Input/Output: [(31 17 16 61) 16]
Test Case: 218 | Input/Output: [(50 76 95 41) 41]
Test Case: 219 | Input/Output: [(15 67 47 98) 15]
Test Case: 220 | Input/Output: [(93 22 15 99) 15]
Test Case: 221 | Input/Output: [(34 34 8 25) 8]
Test Case: 222 | Input/Output: [(96 82 30 52) 30]
Test Case: 223 | Input/Output: [(87 97 79 37) 37]
Test Case: 224 | Input/Output: [(92 47 0 36) 0]
Test Case: 225 | Input/Output: [(46 11 38 30) 11]
Test Case: 226 | Input/Output: [(6 18 9 1) 1]
Test Case: 227 | Input/Output: [(100 38 87 36) 36]
Test Case: 228 | Input/Output: [(23 91 44 61) 23]
Test Case: 229 | Input/Output: [(91 82 5 51) 5]
Test Case: 230 | Input/Output: [(7 43 52 37) 7]
Test Case: 231 | Input/Output: [(78 4 15 40) 4]
Test Case: 232 | Input/Output: [(56 67 51 48) 48]
Test Case: 233 | Input/Output: [(95 99 31 58) 31]
Test Case: 234 | Input/Output: [(27 41 59 78) 27]
Test Case: 235 | Input/Output: [(46 18 56 43) 18]
Test Case: 236 | Input/Output: [(73 67 32 68) 32]
Test Case: 237 | Input/Output: [(91 57 28 25) 25]
Test Case: 238 | Input/Output: [(14 6 14 79) 6]
Test Case: 239 | Input/Output: [(6 64 38 64) 6]
Test Case: 240 | Input/Output: [(57 9 100 93) 9]
Test Case: 241 | Input/Output: [(78 3 9 18) 3]
Test Case: 242 | Input/Output: [(25 99 95 61) 25]
Test Case: 243 | Input/Output: [(12 99 59 22) 12]
Test Case: 244 | Input/Output: [(97 27 95 51) 27]
Test Case: 245 | Input/Output: [(92 72 100 13) 13]
Test Case: 246 | Input/Output: [(81 46 11 46) 11]
Test Case: 247 | Input/Output: [(92 19 78 94) 19]
Test Case: 248 | Input/Output: [(81 21 80 4) 4]
Test Case: 249 | Input/Output: [(84 19 89 87) 19]
Test Case: 250 | Input/Output: [(100 61 23 9) 9]
Test Case: 251 | Input/Output: [(51 65 54 51) 51]
Test Case: 252 | Input/Output: [(89 27 71 5) 5]
Test Case: 253 | Input/Output: [(20 3 19 78) 3]
Test Case: 254 | Input/Output: [(83 35 36 11) 11]
Test Case: 255 | Input/Output: [(48 81 69 19) 19]
Test Case: 256 | Input/Output: [(73 6 31 40) 6]
Test Case: 257 | Input/Output: [(77 30 72 69) 30]
Test Case: 258 | Input/Output: [(41 73 59 40) 40]
Test Case: 259 | Input/Output: [(52 5 26 52) 5]
Test Case: 260 | Input/Output: [(62 81 85 19) 19]
Test Case: 261 | Input/Output: [(87 78 73 85) 73]
Test Case: 262 | Input/Output: [(88 15 81 66) 15]
Test Case: 263 | Input/Output: [(89 89 24 70) 24]
Test Case: 264 | Input/Output: [(76 83 52 96) 52]
Test Case: 265 | Input/Output: [(86 72 21 51) 21]
Test Case: 266 | Input/Output: [(8 12 88 39) 8]
Test Case: 267 | Input/Output: [(4 13 93 75) 4]
Test Case: 268 | Input/Output: [(17 42 18 96) 17]
Test Case: 269 | Input/Output: [(2 3 69 33) 2]
Test Case: 270 | Input/Output: [(16 22 37 24) 16]
Test Case: 271 | Input/Output: [(2 14 22 86) 2]
Test Case: 272 | Input/Output: [(62 3 50 37) 3]
Test Case: 273 | Input/Output: [(5 30 37 59) 5]
Test Case: 274 | Input/Output: [(83 8 65 60) 8]
Test Case: 275 | Input/Output: [(84 93 73 95) 73]
Test Case: 276 | Input/Output: [(81 73 41 58) 41]
Test Case: 277 | Input/Output: [(85 39 94 40) 39]
Test Case: 278 | Input/Output: [(5 18 21 3) 3]
Test Case: 279 | Input/Output: [(38 44 34 71) 34]
Test Case: 280 | Input/Output: [(79 98 46 11) 11]
Test Case: 281 | Input/Output: [(48 67 71 48) 48]
Test Case: 282 | Input/Output: [(61 22 67 96) 22]
Test Case: 283 | Input/Output: [(24 31 38 79) 24]
Test Case: 284 | Input/Output: [(69 13 97 99) 13]
Test Case: 285 | Input/Output: [(52 100 57 4) 4]
Test Case: 286 | Input/Output: [(44 89 64 51) 44]
Test Case: 287 | Input/Output: [(44 43 92 3) 3]
Test Case: 288 | Input/Output: [(0 79 77 72) 0]
Test Case: 289 | Input/Output: [(73 22 13 40) 13]
Test Case: 290 | Input/Output: [(100 100 91 97) 91]
Test Case: 291 | Input/Output: [(87 87 60 24) 24]
Test Case: 292 | Input/Output: [(55 68 80 81) 55]
Test Case: 293 | Input/Output: [(84 40 37 42) 37]
Test Case: 294 | Input/Output: [(12 67 96 8) 8]
Test Case: 295 | Input/Output: [(52 7 38 70) 7]
Test Case: 296 | Input/Output: [(62 53 88 66) 53]
Test Case: 297 | Input/Output: [(35 26 7 54) 7]
Test Case: 298 | Input/Output: [(8 51 91 21) 8]
Test Case: 299 | Input/Output: [(40 19 54 46) 19]
Test Case: 300 | Input/Output: [(56 80 75 99) 56]
Test Case: 301 | Input/Output: [(19 76 89 90) 19]
Test Case: 302 | Input/Output: [(0 37 81 29) 0]
Test Case: 303 | Input/Output: [(6 93 10 40) 6]
Test Case: 304 | Input/Output: [(19 45 50 81) 19]
Test Case: 305 | Input/Output: [(86 11 87 24) 11]
Test Case: 306 | Input/Output: [(16 92 94 82) 16]
Test Case: 307 | Input/Output: [(8 21 80 30) 8]
Test Case: 308 | Input/Output: [(83 53 38 64) 38]
Test Case: 309 | Input/Output: [(3 4 9 16) 3]
Test Case: 310 | Input/Output: [(63 38 88 15) 15]
Test Case: 311 | Input/Output: [(21 36 41 100) 21]
Test Case: 312 | Input/Output: [(66 63 35 42) 35]
Test Case: 313 | Input/Output: [(33 50 69 52) 33]
Test Case: 314 | Input/Output: [(4 0 62 15) 0]
Test Case: 315 | Input/Output: [(7 18 22 70) 7]
Test Case: 316 | Input/Output: [(93 60 89 96) 60]
Test Case: 317 | Input/Output: [(4 75 11 77) 4]
Test Case: 318 | Input/Output: [(80 47 51 95) 47]
Test Case: 319 | Input/Output: [(15 7 81 42) 7]
Test Case: 320 | Input/Output: [(53 60 83 74) 53]
Test Case: 321 | Input/Output: [(48 44 42 23) 23]
Test Case: 322 | Input/Output: [(18 14 24 82) 14]
Test Case: 323 | Input/Output: [(41 31 41 34) 31]
Test Case: 324 | Input/Output: [(77 11 41 47) 11]
Test Case: 325 | Input/Output: [(55 86 75 50) 50]
Test Case: 326 | Input/Output: [(80 88 87 75) 75]
Test Case: 327 | Input/Output: [(34 94 82 71) 34]
Test Case: 328 | Input/Output: [(39 11 90 89) 11]
Test Case: 329 | Input/Output: [(76 38 60 75) 38]
Test Case: 330 | Input/Output: [(100 91 11 77) 11]
Test Case: 331 | Input/Output: [(75 56 54 13) 13]
Test Case: 332 | Input/Output: [(19 46 49 67) 19]
Test Case: 333 | Input/Output: [(98 40 68 5) 5]
Test Case: 334 | Input/Output: [(33 11 49 31) 11]
Test Case: 335 | Input/Output: [(85 36 82 4) 4]
Test Case: 336 | Input/Output: [(74 86 64 15) 15]
Test Case: 337 | Input/Output: [(62 91 24 31) 24]
Test Case: 338 | Input/Output: [(27 93 12 84) 12]
Test Case: 339 | Input/Output: [(85 78 86 42) 42]
Test Case: 340 | Input/Output: [(40 41 92 67) 40]
Test Case: 341 | Input/Output: [(21 72 91 9) 9]
Test Case: 342 | Input/Output: [(33 76 57 59) 33]
Test Case: 343 | Input/Output: [(9 19 41 42) 9]
Test Case: 344 | Input/Output: [(28 9 49 45) 9]
Test Case: 345 | Input/Output: [(30 1 84 77) 1]
Test Case: 346 | Input/Output: [(72 83 38 20) 20]
Test Case: 347 | Input/Output: [(28 76 21 72) 21]
Test Case: 348 | Input/Output: [(93 24 67 73) 24]
Test Case: 349 | Input/Output: [(79 81 46 8) 8]
Test Case: 350 | Input/Output: [(25 79 97 63) 25]
Test Case: 351 | Input/Output: [(99 99 89 9) 9]
Test Case: 352 | Input/Output: [(89 6 1 20) 1]
Test Case: 353 | Input/Output: [(49 5 74 82) 5]
Test Case: 354 | Input/Output: [(86 27 16 28) 16]
Test Case: 355 | Input/Output: [(29 25 19 29) 19]
Test Case: 356 | Input/Output: [(34 45 49 67) 34]
Test Case: 357 | Input/Output: [(60 61 40 64) 40]
Test Case: 358 | Input/Output: [(27 37 73 96) 27]
Test Case: 359 | Input/Output: [(19 18 52 23) 18]
Test Case: 360 | Input/Output: [(89 86 6 64) 6]
Test Case: 361 | Input/Output: [(88 88 15 26) 15]
Test Case: 362 | Input/Output: [(14 51 37 92) 14]
Test Case: 363 | Input/Output: [(53 11 78 7) 7]
Test Case: 364 | Input/Output: [(70 16 1 97) 1]
Test Case: 365 | Input/Output: [(42 45 96 94) 42]
Test Case: 366 | Input/Output: [(27 56 85 55) 27]
Test Case: 367 | Input/Output: [(46 33 64 29) 29]
Test Case: 368 | Input/Output: [(31 21 8 81) 8]
Test Case: 369 | Input/Output: [(91 95 46 78) 46]
Test Case: 370 | Input/Output: [(43 84 16 43) 16]
Test Case: 371 | Input/Output: [(60 70 26 40) 26]
Test Case: 372 | Input/Output: [(27 22 1 48) 1]
Test Case: 373 | Input/Output: [(48 65 8 11) 8]
Test Case: 374 | Input/Output: [(82 28 91 67) 28]
Test Case: 375 | Input/Output: [(75 31 31 33) 31]
Test Case: 376 | Input/Output: [(45 64 91 83) 45]
Test Case: 377 | Input/Output: [(0 85 9 34) 0]
Test Case: 378 | Input/Output: [(48 2 30 40) 2]
Test Case: 379 | Input/Output: [(80 11 28 91) 11]
Test Case: 380 | Input/Output: [(50 27 98 5) 5]
Test Case: 381 | Input/Output: [(80 90 38 72) 38]
Test Case: 382 | Input/Output: [(75 67 87 24) 24]
Test Case: 383 | Input/Output: [(20 87 40 100) 20]
Test Case: 384 | Input/Output: [(61 93 17 11) 11]
Test Case: 385 | Input/Output: [(41 22 83 43) 22]
Test Case: 386 | Input/Output: [(64 31 97 84) 31]
Test Case: 387 | Input/Output: [(0 51 84 65) 0]
Test Case: 388 | Input/Output: [(35 42 36 33) 33]
Test Case: 389 | Input/Output: [(58 22 49 38) 22]
Test Case: 390 | Input/Output: [(85 32 63 55) 32]
Test Case: 391 | Input/Output: [(15 96 64 17) 15]
Test Case: 392 | Input/Output: [(64 74 57 17) 17]
Test Case: 393 | Input/Output: [(68 40 55 65) 40]
Test Case: 394 | Input/Output: [(56 50 61 56) 50]
Test Case: 395 | Input/Output: [(47 17 47 68) 17]
Test Case: 396 | Input/Output: [(30 54 70 44) 30]
Test Case: 397 | Input/Output: [(78 87 65 95) 65]
Test Case: 398 | Input/Output: [(70 35 87 55) 35]
Test Case: 399 | Input/Output: [(73 54 69 52) 52]
Test Case: 400 | Input/Output: [(-66 -78 19 79) -78]
Test Case: 401 | Input/Output: [(-71 2 28 9) -71]
Test Case: 402 | Input/Output: [(-1 -63 -63 83) -63]
Test Case: 403 | Input/Output: [(50 43 -50 -37) -50]
Test Case: 404 | Input/Output: [(41 59 -99 -95) -99]
Test Case: 405 | Input/Output: [(-88 90 -75 73) -88]
Test Case: 406 | Input/Output: [(-73 -75 -70 -33) -75]
Test Case: 407 | Input/Output: [(29 -85 74 -31) -85]
Test Case: 408 | Input/Output: [(32 50 44 49) 32]
Test Case: 409 | Input/Output: [(-8 66 94 -74) -74]
Test Case: 410 | Input/Output: [(12 -19 -3 -66) -66]
Test Case: 411 | Input/Output: [(16 -60 84 78) -60]
Test Case: 412 | Input/Output: [(-80 52 14 78) -80]
Test Case: 413 | Input/Output: [(-38 9 -71 80) -71]
Test Case: 414 | Input/Output: [(74 -86 80 57) -86]
Test Case: 415 | Input/Output: [(-46 26 -38 28) -46]
Test Case: 416 | Input/Output: [(-34 -89 16 -3) -89]
Test Case: 417 | Input/Output: [(2 75 67 7) 2]
Test Case: 418 | Input/Output: [(83 57 10 -73) -73]
Test Case: 419 | Input/Output: [(70 -50 -3 72) -50]
Test Case: 420 | Input/Output: [(27 63 87 -37) -37]
Test Case: 421 | Input/Output: [(73 -84 -11 47) -84]
Test Case: 422 | Input/Output: [(-44 -50 -47 -75) -75]
Test Case: 423 | Input/Output: [(-73 94 -69 -94) -94]
Test Case: 424 | Input/Output: [(-59 13 -32 -96) -96]
Test Case: 425 | Input/Output: [(52 11 -64 -97) -97]
Test Case: 426 | Input/Output: [(19 26 4 -96) -96]
Test Case: 427 | Input/Output: [(89 -21 -82 41) -82]
Test Case: 428 | Input/Output: [(-58 -88 -48 35) -88]
Test Case: 429 | Input/Output: [(-72 72 -93 -45) -93]
Test Case: 430 | Input/Output: [(66 -86 93 -43) -86]
Test Case: 431 | Input/Output: [(89 4 -72 -74) -74]
Test Case: 432 | Input/Output: [(11 44 -57 -88) -88]
Test Case: 433 | Input/Output: [(-97 -92 19 -79) -97]
Test Case: 434 | Input/Output: [(1 2 -18 -46) -46]
Test Case: 435 | Input/Output: [(-14 7 28 -51) -51]
Test Case: 436 | Input/Output: [(-30 28 -59 -6) -59]
Test Case: 437 | Input/Output: [(14 90 45 59) 14]
Test Case: 438 | Input/Output: [(43 43 -87 -10) -87]
Test Case: 439 | Input/Output: [(5 50 -98 63) -98]
Test Case: 440 | Input/Output: [(-79 29 -46 44) -79]
Test Case: 441 | Input/Output: [(34 -23 -51 12) -51]
Test Case: 442 | Input/Output: [(51 -20 -13 -60) -60]
Test Case: 443 | Input/Output: [(55 36 98 85) 36]
Test Case: 444 | Input/Output: [(-55 -53 -81 -73) -81]
Test Case: 445 | Input/Output: [(-32 -61 87 -11) -61]
Test Case: 446 | Input/Output: [(-9 -67 -93 9) -93]
Test Case: 447 | Input/Output: [(-89 48 75 -54) -89]
Test Case: 448 | Input/Output: [(-79 -94 -80 -79) -94]
Test Case: 449 | Input/Output: [(-73 -25 -94 40) -94]
Test Case: 450 | Input/Output: [(90 -87 -85 -89) -89]
Test Case: 451 | Input/Output: [(76 14 -96 -30) -96]
Test Case: 452 | Input/Output: [(70 49 82 -68) -68]
Test Case: 453 | Input/Output: [(82 -50 13 -99) -99]
Test Case: 454 | Input/Output: [(55 52 3 39) 3]
Test Case: 455 | Input/Output: [(59 90 -15 -81) -81]
Test Case: 456 | Input/Output: [(-59 34 -36 55) -59]
Test Case: 457 | Input/Output: [(29 64 7 -77) -77]
Test Case: 458 | Input/Output: [(9 -29 62 -82) -82]
Test Case: 459 | Input/Output: [(29 -82 15 -64) -82]
Test Case: 460 | Input/Output: [(-10 31 -2 -67) -67]
Test Case: 461 | Input/Output: [(77 -4 9 62) -4]
Test Case: 462 | Input/Output: [(-59 -74 -84 -19) -84]
Test Case: 463 | Input/Output: [(-33 6 32 94) -33]
Test Case: 464 | Input/Output: [(55 -85 15 -24) -85]
Test Case: 465 | Input/Output: [(48 -19 -82 99) -82]
Test Case: 466 | Input/Output: [(-84 45 30 70) -84]
Test Case: 467 | Input/Output: [(-85 12 -65 -55) -85]
Test Case: 468 | Input/Output: [(75 -23 -90 43) -90]
Test Case: 469 | Input/Output: [(56 63 -29 -78) -78]
Test Case: 470 | Input/Output: [(80 33 44 -2) -2]
Test Case: 471 | Input/Output: [(-3 32 63 40) -3]
Test Case: 472 | Input/Output: [(-61 71 -29 -78) -78]
Test Case: 473 | Input/Output: [(-98 -96 -60 -11) -98]
Test Case: 474 | Input/Output: [(71 -35 -97 13) -97]
Test Case: 475 | Input/Output: [(-16 -15 -85 31) -85]
Test Case: 476 | Input/Output: [(20 74 92 32) 20]
Test Case: 477 | Input/Output: [(-72 -9 96 91) -72]
Test Case: 478 | Input/Output: [(53 -89 -63 -31) -89]
Test Case: 479 | Input/Output: [(-42 -88 -17 -16) -88]
Test Case: 480 | Input/Output: [(-17 -56 -9 -53) -56]
Test Case: 481 | Input/Output: [(100 -42 3 -63) -63]
Test Case: 482 | Input/Output: [(83 25 97 94) 25]
Test Case: 483 | Input/Output: [(-10 -10 -53 -15) -53]
Test Case: 484 | Input/Output: [(-24 32 -40 -50) -50]
Test Case: 485 | Input/Output: [(41 -70 10 -18) -70]
Test Case: 486 | Input/Output: [(58 -31 -62 85) -62]
Test Case: 487 | Input/Output: [(-7 -22 43 65) -22]
Test Case: 488 | Input/Output: [(-19 80 -86 6) -86]
Test Case: 489 | Input/Output: [(-79 70 -30 34) -79]
Test Case: 490 | Input/Output: [(-26 62 74 -75) -75]
Test Case: 491 | Input/Output: [(-61 -78 77 28) -78]
Test Case: 492 | Input/Output: [(39 -3 -70 57) -70]
Test Case: 493 | Input/Output: [(-94 54 -11 -65) -94]
Test Case: 494 | Input/Output: [(-82 25 98 59) -82]
Test Case: 495 | Input/Output: [(15 69 70 -72) -72]
Test Case: 496 | Input/Output: [(-59 55 -93 88) -93]
Test Case: 497 | Input/Output: [(-97 16 -37 78) -97]
Test Case: 498 | Input/Output: [(13 85 -79 60) -79]
Test Case: 499 | Input/Output: [(23 86 -89 -8) -89]
Test Case: 500 | Input/Output: [(10 88 32 68) 10]
Test Case: 501 | Input/Output: [(-24 40 23 -5) -24]
Test Case: 502 | Input/Output: [(67 4 37 -1) -1]
Test Case: 503 | Input/Output: [(43 -77 -56 -34) -77]
Test Case: 504 | Input/Output: [(-20 75 -82 -46) -82]
Test Case: 505 | Input/Output: [(-29 -77 56 -31) -77]
Test Case: 506 | Input/Output: [(43 94 51 -30) -30]
Test Case: 507 | Input/Output: [(-84 -44 -31 94) -84]
Test Case: 508 | Input/Output: [(56 43 87 -86) -86]
Test Case: 509 | Input/Output: [(52 55 -46 -45) -46]
Test Case: 510 | Input/Output: [(-85 76 40 -10) -85]
Test Case: 511 | Input/Output: [(-59 12 -4 6) -59]
Test Case: 512 | Input/Output: [(-30 69 -92 39) -92]
Test Case: 513 | Input/Output: [(-2 -13 37 9) -13]
Test Case: 514 | Input/Output: [(-32 29 -91 -10) -91]
Test Case: 515 | Input/Output: [(84 -50 22 -89) -89]
Test Case: 516 | Input/Output: [(-24 -35 17 59) -35]
Test Case: 517 | Input/Output: [(62 -24 -92 -6) -92]
Test Case: 518 | Input/Output: [(13 62 -11 94) -11]
Test Case: 519 | Input/Output: [(-50 -59 -23 8) -59]
Test Case: 520 | Input/Output: [(-1 51 88 -68) -68]
Test Case: 521 | Input/Output: [(11 -13 -10 -75) -75]
Test Case: 522 | Input/Output: [(38 37 -66 45) -66]
Test Case: 523 | Input/Output: [(63 -55 -75 -32) -75]
Test Case: 524 | Input/Output: [(-43 96 42 10) -43]
Test Case: 525 | Input/Output: [(46 30 -65 -46) -65]
Test Case: 526 | Input/Output: [(-1 73 64 48) -1]
Test Case: 527 | Input/Output: [(23 97 29 98) 23]
Test Case: 528 | Input/Output: [(3 27 59 85) 3]
Test Case: 529 | Input/Output: [(68 -11 -70 13) -70]
Test Case: 530 | Input/Output: [(-39 -19 34 -84) -84]
Test Case: 531 | Input/Output: [(47 45 -100 42) -100]
Test Case: 532 | Input/Output: [(57 93 35 -80) -80]
Test Case: 533 | Input/Output: [(33 27 -18 86) -18]
Test Case: 534 | Input/Output: [(10 82 44 -65) -65]
Test Case: 535 | Input/Output: [(-38 4 -19 -53) -53]
Test Case: 536 | Input/Output: [(77 46 43 -3) -3]
Test Case: 537 | Input/Output: [(-71 90 57 35) -71]
Test Case: 538 | Input/Output: [(63 76 -97 -97) -97]
Test Case: 539 | Input/Output: [(-97 39 -100 -26) -100]
Test Case: 540 | Input/Output: [(-45 35 -46 -84) -84]
Test Case: 541 | Input/Output: [(-44 -30 30 -23) -44]
Test Case: 542 | Input/Output: [(-21 -60 91 18) -60]
Test Case: 543 | Input/Output: [(100 66 89 -65) -65]
Test Case: 544 | Input/Output: [(52 -51 -20 -97) -97]
Test Case: 545 | Input/Output: [(54 96 -71 95) -71]
Test Case: 546 | Input/Output: [(23 -14 -70 -45) -70]
Test Case: 547 | Input/Output: [(-8 74 45 97) -8]
Test Case: 548 | Input/Output: [(64 41 -43 27) -43]
Test Case: 549 | Input/Output: [(65 -47 1 -7) -47]
Test Case: 550 | Input/Output: [(85 41 -43 -3) -43]
Test Case: 551 | Input/Output: [(-2 28 -87 93) -87]
Test Case: 552 | Input/Output: [(-19 100 84 36) -19]
Test Case: 553 | Input/Output: [(-96 -72 -1 26) -96]
Test Case: 554 | Input/Output: [(22 66 96 68) 22]
Test Case: 555 | Input/Output: [(-42 8 44 38) -42]
Test Case: 556 | Input/Output: [(38 -75 6 -80) -80]
Test Case: 557 | Input/Output: [(-27 -20 68 10) -27]
Test Case: 558 | Input/Output: [(-40 -24 -65 -42) -65]
Test Case: 559 | Input/Output: [(-36 71 -86 92) -86]
Test Case: 560 | Input/Output: [(-49 -89 -35 -53) -89]
Test Case: 561 | Input/Output: [(-1 17 -72 -25) -72]
Test Case: 562 | Input/Output: [(94 53 16 50) 16]
Test Case: 563 | Input/Output: [(-1 -2 -17 -71) -71]
Test Case: 564 | Input/Output: [(-59 96 75 -69) -69]
Test Case: 565 | Input/Output: [(54 -11 -39 -8) -39]
Test Case: 566 | Input/Output: [(94 30 9 -29) -29]
Test Case: 567 | Input/Output: [(-79 -25 -68 57) -79]
Test Case: 568 | Input/Output: [(-5 -84 -36 -31) -84]
Test Case: 569 | Input/Output: [(0 58 -22 -77) -77]
Test Case: 570 | Input/Output: [(-66 -66 -14 35) -66]
Test Case: 571 | Input/Output: [(-68 -87 79 22) -87]
Test Case: 572 | Input/Output: [(-41 -44 42 -49) -49]
Test Case: 573 | Input/Output: [(-38 -91 -50 56) -91]
Test Case: 574 | Input/Output: [(-17 -33 7 87) -33]
Test Case: 575 | Input/Output: [(34 63 38 -17) -17]
Test Case: 576 | Input/Output: [(78 38 -69 82) -69]
Test Case: 577 | Input/Output: [(-91 82 -74 -11) -91]
Test Case: 578 | Input/Output: [(31 18 -87 70) -87]
Test Case: 579 | Input/Output: [(81 -7 58 39) -7]
Test Case: 580 | Input/Output: [(50 -35 72 54) -35]
Test Case: 581 | Input/Output: [(32 64 -24 50) -24]
Test Case: 582 | Input/Output: [(49 -56 100 -70) -70]
Test Case: 583 | Input/Output: [(-9 13 30 -42) -42]
Test Case: 584 | Input/Output: [(98 25 78 18) 18]
Test Case: 585 | Input/Output: [(-43 -32 72 24) -43]
Test Case: 586 | Input/Output: [(38 12 -32 -63) -63]
Test Case: 587 | Input/Output: [(-92 55 97 -26) -92]
Test Case: 588 | Input/Output: [(30 -32 -60 7) -60]
Test Case: 589 | Input/Output: [(35 -5 14 61) -5]
Test Case: 590 | Input/Output: [(-79 81 -16 -15) -79]
Test Case: 591 | Input/Output: [(28 -84 -100 -22) -100]
Test Case: 592 | Input/Output: [(-46 -50 -54 -94) -94]
Test Case: 593 | Input/Output: [(57 -5 48 -50) -50]
Test Case: 594 | Input/Output: [(-6 -18 -29 73) -29]
Test Case: 595 | Input/Output: [(48 -18 49 -27) -27]
Test Case: 596 | Input/Output: [(-100 33 -48 -66) -100]
Test Case: 597 | Input/Output: [(-86 -25 -85 -78) -86]
Test Case: 598 | Input/Output: [(-66 34 61 54) -66]
Test Case: 599 | Input/Output: [(-24 -19 -36 -90) -90]
Test Case: 600 | Input/Output: [(-29 -71 53 -64) -71]
Test Case: 601 | Input/Output: [(50 -19 78 -64) -64]
Test Case: 602 | Input/Output: [(69 -77 64 9) -77]
Test Case: 603 | Input/Output: [(-19 22 30 -27) -27]
Test Case: 604 | Input/Output: [(7 91 9 -69) -69]
Test Case: 605 | Input/Output: [(-38 72 -90 -51) -90]
Test Case: 606 | Input/Output: [(-59 77 -69 1) -69]
Test Case: 607 | Input/Output: [(7 75 48 -14) -14]
Test Case: 608 | Input/Output: [(-99 -48 -68 12) -99]
Test Case: 609 | Input/Output: [(-99 71 -88 62) -99]
Test Case: 610 | Input/Output: [(-32 25 28 -34) -34]
Test Case: 611 | Input/Output: [(-65 -87 -2 96) -87]
Test Case: 612 | Input/Output: [(40 -66 -4 45) -66]
Test Case: 613 | Input/Output: [(-92 -46 -3 29) -92]
Test Case: 614 | Input/Output: [(42 37 -22 90) -22]
Test Case: 615 | Input/Output: [(50 37 80 47) 37]
Test Case: 616 | Input/Output: [(-90 44 -20 31) -90]
Test Case: 617 | Input/Output: [(6 21 71 -5) -5]
Test Case: 618 | Input/Output: [(-67 22 -63 -53) -67]
Test Case: 619 | Input/Output: [(21 -37 51 42) -37]
Test Case: 620 | Input/Output: [(96 -85 -50 15) -85]
Test Case: 621 | Input/Output: [(4 80 27 19) 4]
Test Case: 622 | Input/Output: [(33 16 66 24) 16]
Test Case: 623 | Input/Output: [(65 -24 8 30) -24]
Test Case: 624 | Input/Output: [(-29 -16 51 -41) -41]
Test Case: 625 | Input/Output: [(52 -15 -3 -51) -51]
Test Case: 626 | Input/Output: [(-94 12 -29 48) -94]
Test Case: 627 | Input/Output: [(-40 -71 78 60) -71]
Test Case: 628 | Input/Output: [(97 7 93 -4) -4]
Test Case: 629 | Input/Output: [(-27 -84 -31 -44) -84]
Test Case: 630 | Input/Output: [(99 -45 -18 50) -45]
Test Case: 631 | Input/Output: [(94 61 57 -68) -68]
Test Case: 632 | Input/Output: [(5 83 -51 -25) -51]
Test Case: 633 | Input/Output: [(-43 26 21 -5) -43]
Test Case: 634 | Input/Output: [(-35 -9 36 -87) -87]
Test Case: 635 | Input/Output: [(33 88 6 -68) -68]
Test Case: 636 | Input/Output: [(95 -55 8 55) -55]
Test Case: 637 | Input/Output: [(11 62 -73 57) -73]
Test Case: 638 | Input/Output: [(37 38 -52 -29) -52]
Test Case: 639 | Input/Output: [(82 -70 -93 0) -93]
Test Case: 640 | Input/Output: [(-38 -13 77 97) -38]
Test Case: 641 | Input/Output: [(46 10 25 -64) -64]
Test Case: 642 | Input/Output: [(2 60 -54 48) -54]
Test Case: 643 | Input/Output: [(-32 58 -7 67) -32]
Test Case: 644 | Input/Output: [(-34 -14 61 65) -34]
Test Case: 645 | Input/Output: [(73 -79 -63 -26) -79]
Test Case: 646 | Input/Output: [(31 -64 47 -24) -64]
Test Case: 647 | Input/Output: [(-99 -18 -19 -41) -99]
Test Case: 648 | Input/Output: [(-30 46 -14 -65) -65]
Test Case: 649 | Input/Output: [(-87 -76 -92 73) -92]
Test Case: 650 | Input/Output: [(31 -3 -76 20) -76]
Test Case: 651 | Input/Output: [(34 79 -94 -95) -95]
Test Case: 652 | Input/Output: [(95 -7 3 -23) -23]
Test Case: 653 | Input/Output: [(-87 99 -42 -71) -87]
Test Case: 654 | Input/Output: [(86 25 93 -8) -8]
Test Case: 655 | Input/Output: [(36 61 85 -48) -48]
Test Case: 656 | Input/Output: [(-77 47 71 32) -77]
Test Case: 657 | Input/Output: [(83 -98 26 -9) -98]
Test Case: 658 | Input/Output: [(-18 -98 49 -74) -98]
Test Case: 659 | Input/Output: [(-64 12 -2 -13) -64]
Test Case: 660 | Input/Output: [(52 -80 42 -43) -80]
Test Case: 661 | Input/Output: [(-30 21 83 -58) -58]
Test Case: 662 | Input/Output: [(42 38 -15 -55) -55]
Test Case: 663 | Input/Output: [(61 39 -71 25) -71]
Test Case: 664 | Input/Output: [(-91 20 61 -28) -91]
Test Case: 665 | Input/Output: [(-81 23 40 3) -81]
Test Case: 666 | Input/Output: [(-39 -17 79 88) -39]
Test Case: 667 | Input/Output: [(97 -12 -77 -75) -77]
Test Case: 668 | Input/Output: [(55 5 47 23) 5]
Test Case: 669 | Input/Output: [(76 -12 -31 -43) -43]
Test Case: 670 | Input/Output: [(-42 70 60 -88) -88]
Test Case: 671 | Input/Output: [(5 16 15 42) 5]
Test Case: 672 | Input/Output: [(-84 81 -46 -6) -84]
Test Case: 673 | Input/Output: [(91 -73 75 26) -73]
Test Case: 674 | Input/Output: [(-95 29 -5 40) -95]
Test Case: 675 | Input/Output: [(24 -75 -26 -53) -75]
Test Case: 676 | Input/Output: [(-30 70 67 -99) -99]
Test Case: 677 | Input/Output: [(-54 66 30 -8) -54]
Test Case: 678 | Input/Output: [(59 -52 69 -37) -52]
Test Case: 679 | Input/Output: [(35 24 -46 -48) -48]
Test Case: 680 | Input/Output: [(-78 -85 -96 -71) -96]
Test Case: 681 | Input/Output: [(29 0 -7 -100) -100]
Test Case: 682 | Input/Output: [(-5 -32 35 -90) -90]
Test Case: 683 | Input/Output: [(-100 29 -78 86) -100]
Test Case: 684 | Input/Output: [(-33 45 69 54) -33]
Test Case: 685 | Input/Output: [(-82 8 -1 16) -82]
Test Case: 686 | Input/Output: [(70 91 13 -53) -53]
Test Case: 687 | Input/Output: [(-37 -41 14 86) -41]
Test Case: 688 | Input/Output: [(-76 -30 70 -21) -76]
Test Case: 689 | Input/Output: [(94 -97 -40 73) -97]
Test Case: 690 | Input/Output: [(88 94 77 65) 65]
Test Case: 691 | Input/Output: [(65 -91 88 26) -91]
Test Case: 692 | Input/Output: [(12 -97 -19 9) -97]
Test Case: 693 | Input/Output: [(-77 13 12 58) -77]
Test Case: 694 | Input/Output: [(-29 -56 -61 -32) -61]
Test Case: 695 | Input/Output: [(11 -41 -97 -61) -97]
Test Case: 696 | Input/Output: [(63 -25 -61 -89) -89]
Test Case: 697 | Input/Output: [(-68 -78 20 86) -78]
Test Case: 698 | Input/Output: [(6 34 12 -18) -18]
Test Case: 699 | Input/Output: [(68 -61 -85 -72) -85]
Test Case: 700 | Input/Output: [(-91 -30 44 -99) -99]
Test Case: 701 | Input/Output: [(-49 22 8 3) -49]
Test Case: 702 | Input/Output: [(-7 63 11 73) -7]
Test Case: 703 | Input/Output: [(27 68 61 57) 27]
Test Case: 704 | Input/Output: [(-91 70 -20 -33) -91]
Test Case: 705 | Input/Output: [(-70 -30 64 -31) -70]
Test Case: 706 | Input/Output: [(-24 -7 70 88) -24]
Test Case: 707 | Input/Output: [(-1 -5 25 34) -5]
Test Case: 708 | Input/Output: [(-97 -59 53 -28) -97]
Test Case: 709 | Input/Output: [(-45 -98 -82 -99) -99]
Test Case: 710 | Input/Output: [(-5 -64 -82 90) -82]
Test Case: 711 | Input/Output: [(-9 10 67 -60) -60]
Test Case: 712 | Input/Output: [(60 -52 46 44) -52]
Test Case: 713 | Input/Output: [(-11 -41 90 52) -41]
Test Case: 714 | Input/Output: [(-9 -8 -79 57) -79]
Test Case: 715 | Input/Output: [(50 -17 57 54) -17]
Test Case: 716 | Input/Output: [(57 -64 -65 93) -65]
Test Case: 717 | Input/Output: [(-57 72 -82 54) -82]
Test Case: 718 | Input/Output: [(-95 51 64 -62) -95]
Test Case: 719 | Input/Output: [(88 97 -27 72) -27]
Test Case: 720 | Input/Output: [(9 69 -11 -41) -41]
Test Case: 721 | Input/Output: [(-40 -23 53 -32) -40]
Test Case: 722 | Input/Output: [(-89 90 59 94) -89]
Test Case: 723 | Input/Output: [(30 -81 33 -66) -81]
Test Case: 724 | Input/Output: [(-83 -93 -76 2) -93]
Test Case: 725 | Input/Output: [(91 -88 -98 8) -98]
Test Case: 726 | Input/Output: [(-74 -55 71 -8) -74]
Test Case: 727 | Input/Output: [(-82 38 -100 81) -100]
Test Case: 728 | Input/Output: [(-82 -1 45 -58) -82]
Test Case: 729 | Input/Output: [(35 -99 -15 76) -99]
Test Case: 730 | Input/Output: [(-56 73 -73 -5) -73]
Test Case: 731 | Input/Output: [(5 59 -19 10) -19]
Test Case: 732 | Input/Output: [(-3 -61 32 -30) -61]
Test Case: 733 | Input/Output: [(-21 -25 -84 67) -84]
Test Case: 734 | Input/Output: [(-33 -82 -42 43) -82]
Test Case: 735 | Input/Output: [(20 -4 94 -64) -64]
Test Case: 736 | Input/Output: [(30 29 -93 3) -93]
Test Case: 737 | Input/Output: [(-34 -21 -71 -79) -79]
Test Case: 738 | Input/Output: [(91 1 80 57) 1]
Test Case: 739 | Input/Output: [(11 93 27 82) 11]
Test Case: 740 | Input/Output: [(91 45 -96 -5) -96]
Test Case: 741 | Input/Output: [(11 -11 -75 -49) -75]
Test Case: 742 | Input/Output: [(-64 -95 -63 -7) -95]
Test Case: 743 | Input/Output: [(40 -27 -54 -31) -54]
Test Case: 744 | Input/Output: [(-97 -18 30 -52) -97]
Test Case: 745 | Input/Output: [(57 -86 41 -9) -86]
Test Case: 746 | Input/Output: [(3 -8 -83 -47) -83]
Test Case: 747 | Input/Output: [(-93 -11 -83 16) -93]
Test Case: 748 | Input/Output: [(70 -3 58 80) -3]
Test Case: 749 | Input/Output: [(22 -95 20 -94) -95]
Test Case: 750 | Input/Output: [(25 66 -71 -74) -74]
Test Case: 751 | Input/Output: [(-20 71 -83 -72) -83]
Test Case: 752 | Input/Output: [(66 -39 12 -75) -75]
Test Case: 753 | Input/Output: [(-57 81 -50 82) -57]
Test Case: 754 | Input/Output: [(68 21 72 21) 21]
Test Case: 755 | Input/Output: [(80 17 -5 38) -5]
Test Case: 756 | Input/Output: [(45 -38 84 13) -38]
Test Case: 757 | Input/Output: [(78 -20 -20 5) -20]
Test Case: 758 | Input/Output: [(77 72 -38 -97) -97]
Test Case: 759 | Input/Output: [(51 77 -75 99) -75]
Test Case: 760 | Input/Output: [(-15 7 -85 -39) -85]
Test Case: 761 | Input/Output: [(60 -88 71 73) -88]
Test Case: 762 | Input/Output: [(-43 -44 100 -42) -44]
Test Case: 763 | Input/Output: [(-33 -32 28 -33) -33]
Test Case: 764 | Input/Output: [(-62 -23 59 -97) -97]
Test Case: 765 | Input/Output: [(48 29 -4 37) -4]
Test Case: 766 | Input/Output: [(-6 -84 12 4) -84]
Test Case: 767 | Input/Output: [(-77 -74 -91 -46) -91]
Test Case: 768 | Input/Output: [(-94 49 63 28) -94]
Test Case: 769 | Input/Output: [(-73 76 -70 -72) -73]
Test Case: 770 | Input/Output: [(-25 28 45 90) -25]
Test Case: 771 | Input/Output: [(-58 -83 43 20) -83]
Test Case: 772 | Input/Output: [(-19 -82 79 26) -82]
Test Case: 773 | Input/Output: [(64 -100 -10 86) -100]
Test Case: 774 | Input/Output: [(-31 -61 -39 -4) -61]
Test Case: 775 | Input/Output: [(40 54 -30 24) -30]
Test Case: 776 | Input/Output: [(66 -36 -98 75) -98]
Test Case: 777 | Input/Output: [(-80 28 -21 92) -80]
Test Case: 778 | Input/Output: [(67 -92 5 50) -92]
Test Case: 779 | Input/Output: [(40 -29 74 69) -29]
Test Case: 780 | Input/Output: [(-30 28 58 -34) -34]
Test Case: 781 | Input/Output: [(59 6 -15 89) -15]
Test Case: 782 | Input/Output: [(5 71 -38 48) -38]
Test Case: 783 | Input/Output: [(-46 -42 25 97) -46]
Test Case: 784 | Input/Output: [(-91 65 9 78) -91]
Test Case: 785 | Input/Output: [(27 95 -12 70) -12]
Test Case: 786 | Input/Output: [(94 -62 23 -43) -62]
Test Case: 787 | Input/Output: [(68 25 -66 90) -66]
Test Case: 788 | Input/Output: [(-48 11 46 -40) -48]
Test Case: 789 | Input/Output: [(-14 23 -78 38) -78]
Test Case: 790 | Input/Output: [(-76 -28 52 -44) -76]
Test Case: 791 | Input/Output: [(-35 -75 93 1) -75]
Test Case: 792 | Input/Output: [(-48 91 42 -37) -48]
Test Case: 793 | Input/Output: [(50 -79 -5 -83) -83]
Test Case: 794 | Input/Output: [(-46 48 73 82) -46]
Test Case: 795 | Input/Output: [(-82 83 95 25) -82]
Test Case: 796 | Input/Output: [(-40 81 -25 93) -40]
Test Case: 797 | Input/Output: [(48 46 -64 -96) -96]
Test Case: 798 | Input/Output: [(-89 1 27 85) -89]
Test Case: 799 | Input/Output: [(-30 -32 69 47) -32]
Test Case: 800 | Input/Output: [(-70 78 -49 -52) -70]
Test Case: 801 | Input/Output: [(32 -34 48 79) -34]
Test Case: 802 | Input/Output: [(-66 -15 96 -75) -75]
Test Case: 803 | Input/Output: [(-88 -96 -41 60) -96]
Test Case: 804 | Input/Output: [(70 -30 -18 57) -30]
Test Case: 805 | Input/Output: [(62 -76 37 68) -76]
Test Case: 806 | Input/Output: [(-61 30 55 -40) -61]
Test Case: 807 | Input/Output: [(16 82 45 -72) -72]
Test Case: 808 | Input/Output: [(31 -80 59 100) -80]
Test Case: 809 | Input/Output: [(41 74 -17 -81) -81]
Test Case: 810 | Input/Output: [(50 -20 -8 -12) -20]
Test Case: 811 | Input/Output: [(-33 -31 -87 99) -87]
Test Case: 812 | Input/Output: [(90 -62 30 93) -62]
Test Case: 813 | Input/Output: [(97 22 43 48) 22]
Test Case: 814 | Input/Output: [(-73 -12 -98 23) -98]
Test Case: 815 | Input/Output: [(25 -2 -60 -70) -70]
Test Case: 816 | Input/Output: [(-50 21 -10 -28) -50]
Test Case: 817 | Input/Output: [(-97 -78 51 53) -97]
Test Case: 818 | Input/Output: [(-44 31 99 63) -44]
Test Case: 819 | Input/Output: [(44 -49 60 54) -49]
Test Case: 820 | Input/Output: [(-98 -63 -37 86) -98]
Test Case: 821 | Input/Output: [(-71 -67 9 9) -71]
Test Case: 822 | Input/Output: [(11 -100 65 33) -100]
Test Case: 823 | Input/Output: [(78 -57 -71 -73) -73]
Test Case: 824 | Input/Output: [(-47 -24 7 94) -47]
Test Case: 825 | Input/Output: [(53 -7 70 -60) -60]
Test Case: 826 | Input/Output: [(46 78 -28 41) -28]
Test Case: 827 | Input/Output: [(-37 -1 -58 47) -58]
Test Case: 828 | Input/Output: [(-87 96 -68 -9) -87]
Test Case: 829 | Input/Output: [(82 -95 -55 49) -95]
Test Case: 830 | Input/Output: [(57 10 -80 36) -80]
Test Case: 831 | Input/Output: [(-61 -23 -88 -89) -89]
Test Case: 832 | Input/Output: [(21 6 -45 -100) -100]
Test Case: 833 | Input/Output: [(-46 -98 -10 -63) -98]
Test Case: 834 | Input/Output: [(89 8 -61 -73) -73]
Test Case: 835 | Input/Output: [(73 42 -100 -8) -100]
Test Case: 836 | Input/Output: [(8 -24 -21 35) -24]
Test Case: 837 | Input/Output: [(6 -37 72 53) -37]
Test Case: 838 | Input/Output: [(-22 87 -4 35) -22]
Test Case: 839 | Input/Output: [(76 94 -20 -97) -97]
Test Case: 840 | Input/Output: [(-51 -96 -10 -45) -96]
Test Case: 841 | Input/Output: [(53 11 34 -64) -64]
Test Case: 842 | Input/Output: [(89 -25 89 21) -25]
Test Case: 843 | Input/Output: [(41 -77 97 -68) -77]
Test Case: 844 | Input/Output: [(-28 36 -36 67) -36]
Test Case: 845 | Input/Output: [(-25 26 2 21) -25]
Test Case: 846 | Input/Output: [(-87 -43 54 -86) -87]
Test Case: 847 | Input/Output: [(-38 32 83 -39) -39]
Test Case: 848 | Input/Output: [(-41 -75 -2 -70) -75]
Test Case: 849 | Input/Output: [(5 -47 -84 92) -84]
Test Case: 850 | Input/Output: [(27 -26 -56 17) -56]
Test Case: 851 | Input/Output: [(98 71 98 -85) -85]
Test Case: 852 | Input/Output: [(-46 -48 -80 80) -80]
Test Case: 853 | Input/Output: [(-10 -19 -12 -36) -36]
Test Case: 854 | Input/Output: [(-76 -64 42 89) -76]
Test Case: 855 | Input/Output: [(-90 44 -84 0) -90]
Test Case: 856 | Input/Output: [(-21 95 60 -40) -40]
Test Case: 857 | Input/Output: [(-73 -10 9 -24) -73]
Test Case: 858 | Input/Output: [(-94 -45 -80 -25) -94]
Test Case: 859 | Input/Output: [(27 68 36 19) 19]
Test Case: 860 | Input/Output: [(48 66 12 42) 12]
Test Case: 861 | Input/Output: [(-71 65 0 12) -71]
Test Case: 862 | Input/Output: [(57 -69 -38 74) -69]
Test Case: 863 | Input/Output: [(85 -5 -25 -28) -28]
Test Case: 864 | Input/Output: [(-100 66 14 44) -100]
Test Case: 865 | Input/Output: [(67 -82 31 85) -82]
Test Case: 866 | Input/Output: [(-37 -37 11 -82) -82]
Test Case: 867 | Input/Output: [(-1 63 -60 -79) -79]
Test Case: 868 | Input/Output: [(98 16 70 -15) -15]
Test Case: 869 | Input/Output: [(-98 7 -26 50) -98]
Test Case: 870 | Input/Output: [(-29 66 79 46) -29]
Test Case: 871 | Input/Output: [(-62 -9 -45 -65) -65]
Test Case: 872 | Input/Output: [(74 -38 -59 57) -59]
Test Case: 873 | Input/Output: [(-52 -70 -21 16) -70]
Test Case: 874 | Input/Output: [(43 -51 72 7) -51]
Test Case: 875 | Input/Output: [(27 -93 40 47) -93]
Test Case: 876 | Input/Output: [(95 88 -60 -78) -78]
Test Case: 877 | Input/Output: [(-37 -86 -20 -99) -99]
Test Case: 878 | Input/Output: [(-8 -14 30 -65) -65]
Test Case: 879 | Input/Output: [(6 -97 -51 -90) -97]
Test Case: 880 | Input/Output: [(77 -78 0 -84) -84]
Test Case: 881 | Input/Output: [(-35 -86 26 -4) -86]
Test Case: 882 | Input/Output: [(-80 -45 -61 33) -80]
Test Case: 883 | Input/Output: [(-65 -43 -25 25) -65]
Test Case: 884 | Input/Output: [(-47 100 44 -9) -47]
Test Case: 885 | Input/Output: [(85 -64 -49 -78) -78]
Test Case: 886 | Input/Output: [(-42 74 24 -85) -85]
Test Case: 887 | Input/Output: [(-100 22 52 -55) -100]
Test Case: 888 | Input/Output: [(-88 69 60 -87) -88]
Test Case: 889 | Input/Output: [(65 -99 95 2) -99]
Test Case: 890 | Input/Output: [(63 -67 29 87) -67]
Test Case: 891 | Input/Output: [(-2 15 -75 -55) -75]
Test Case: 892 | Input/Output: [(71 -44 91 71) -44]
Test Case: 893 | Input/Output: [(84 62 -21 -73) -73]
Test Case: 894 | Input/Output: [(28 -41 93 52) -41]
Test Case: 895 | Input/Output: [(43 -30 87 90) -30]
Test Case: 896 | Input/Output: [(-44 3 -88 -19) -88]
Test Case: 897 | Input/Output: [(-18 80 11 -22) -22]
Test Case: 898 | Input/Output: [(-94 95 74 -5) -94]
Test Case: 899 | Input/Output: [(34 -86 -32 -23) -86]
Test Case: 900 | Input/Output: [(-1 -89 18 61) -89]
Test Case: 901 | Input/Output: [(79 18 3 -85) -85]
Test Case: 902 | Input/Output: [(42 -14 -33 -80) -80]
Test Case: 903 | Input/Output: [(16 11 -1 -2) -2]
Test Case: 904 | Input/Output: [(-47 20 68 81) -47]
Test Case: 905 | Input/Output: [(-89 62 1 -99) -99]
Test Case: 906 | Input/Output: [(-74 -71 -69 74) -74]
Test Case: 907 | Input/Output: [(-16 25 17 57) -16]
Test Case: 908 | Input/Output: [(-44 -99 12 0) -99]
Test Case: 909 | Input/Output: [(99 95 -45 -88) -88]
Test Case: 910 | Input/Output: [(-50 55 -24 -77) -77]
Test Case: 911 | Input/Output: [(-92 -47 -91 -69) -92]
Test Case: 912 | Input/Output: [(36 -96 -65 -45) -96]
Test Case: 913 | Input/Output: [(-63 27 72 5) -63]
Test Case: 914 | Input/Output: [(91 39 -6 75) -6]
Test Case: 915 | Input/Output: [(94 51 -85 91) -85]
Test Case: 916 | Input/Output: [(-86 -44 45 41) -86]
Test Case: 917 | Input/Output: [(48 -41 -56 50) -56]
Test Case: 918 | Input/Output: [(11 -41 -32 6) -41]
Test Case: 919 | Input/Output: [(-83 -31 -74 89) -83]
Test Case: 920 | Input/Output: [(14 8 -57 61) -57]
Test Case: 921 | Input/Output: [(-65 -24 31 19) -65]
Test Case: 922 | Input/Output: [(-96 -77 -23 57) -96]
Test Case: 923 | Input/Output: [(-88 -33 -2 87) -88]
Test Case: 924 | Input/Output: [(-90 -64 44 -18) -90]
Test Case: 925 | Input/Output: [(-46 -11 -75 69) -75]
Test Case: 926 | Input/Output: [(-33 16 31 -66) -66]
Test Case: 927 | Input/Output: [(92 72 49 -49) -49]
Test Case: 928 | Input/Output: [(-28 36 -73 -67) -73]
Test Case: 929 | Input/Output: [(-91 3 -19 83) -91]
Test Case: 930 | Input/Output: [(-47 15 -57 -16) -57]
Test Case: 931 | Input/Output: [(-45 -82 -11 15) -82]
Test Case: 932 | Input/Output: [(88 57 -56 -85) -85]
Test Case: 933 | Input/Output: [(11 51 -25 24) -25]
Test Case: 934 | Input/Output: [(-39 91 24 -29) -39]
Test Case: 935 | Input/Output: [(-57 -20 65 26) -57]
Test Case: 936 | Input/Output: [(-45 31 -51 -26) -51]
Test Case: 937 | Input/Output: [(-90 90 57 -24) -90]
Test Case: 938 | Input/Output: [(7 73 -28 29) -28]
Test Case: 939 | Input/Output: [(-76 -27 97 -69) -76]
Test Case: 940 | Input/Output: [(-46 74 -88 -69) -88]
Test Case: 941 | Input/Output: [(19 51 -24 -72) -72]
Test Case: 942 | Input/Output: [(81 73 58 -57) -57]
Test Case: 943 | Input/Output: [(4 31 77 -59) -59]
Test Case: 944 | Input/Output: [(66 78 -46 -12) -46]
Test Case: 945 | Input/Output: [(-42 44 42 34) -42]
Test Case: 946 | Input/Output: [(-11 -32 67 33) -32]
Test Case: 947 | Input/Output: [(61 55 54 -13) -13]
Test Case: 948 | Input/Output: [(14 73 60 11) 11]
Test Case: 949 | Input/Output: [(42 -93 -3 -33) -93]
Test Case: 950 | Input/Output: [(-98 -29 75 62) -98]
Test Case: 951 | Input/Output: [(-82 -13 55 88) -82]
Test Case: 952 | Input/Output: [(56 -74 52 -27) -74]
Test Case: 953 | Input/Output: [(35 21 -68 -60) -68]
Test Case: 954 | Input/Output: [(55 51 67 29) 29]
Test Case: 955 | Input/Output: [(-7 41 -41 -6) -41]
Test Case: 956 | Input/Output: [(-89 -41 -34 11) -89]
Test Case: 957 | Input/Output: [(35 16 96 -60) -60]
Test Case: 958 | Input/Output: [(-97 -45 -38 -37) -97]
Test Case: 959 | Input/Output: [(-85 -81 83 -1) -85]
Test Case: 960 | Input/Output: [(-81 80 -96 74) -96]
Test Case: 961 | Input/Output: [(4 100 -94 -11) -94]
Test Case: 962 | Input/Output: [(37 -5 64 -23) -23]
Test Case: 963 | Input/Output: [(-75 -91 -57 -46) -91]
Test Case: 964 | Input/Output: [(-34 -27 -52 -41) -52]
Test Case: 965 | Input/Output: [(48 -27 81 29) -27]
Test Case: 966 | Input/Output: [(41 94 -28 15) -28]
Test Case: 967 | Input/Output: [(70 44 -34 98) -34]
Test Case: 968 | Input/Output: [(-40 60 87 -52) -52]
Test Case: 969 | Input/Output: [(76 96 11 36) 11]
Test Case: 970 | Input/Output: [(-31 53 90 61) -31]
Test Case: 971 | Input/Output: [(76 -89 60 -38) -89]
Test Case: 972 | Input/Output: [(84 6 -42 -85) -85]
Test Case: 973 | Input/Output: [(17 65 37 -60) -60]
Test Case: 974 | Input/Output: [(-87 26 -60 -32) -87]
Test Case: 975 | Input/Output: [(-9 -67 15 66) -67]
Test Case: 976 | Input/Output: [(-49 -80 -99 84) -99]
Test Case: 977 | Input/Output: [(41 88 28 96) 28]
Test Case: 978 | Input/Output: [(-100 44 -5 65) -100]
Test Case: 979 | Input/Output: [(-89 94 -42 -58) -89]
Test Case: 980 | Input/Output: [(-5 43 -73 30) -73]
Test Case: 981 | Input/Output: [(-24 72 -64 -56) -64]
Test Case: 982 | Input/Output: [(-25 25 -83 -100) -100]
Test Case: 983 | Input/Output: [(-6 21 43 -85) -85]
Test Case: 984 | Input/Output: [(7 59 75 97) 7]
Test Case: 985 | Input/Output: [(15 88 41 61) 15]
Test Case: 986 | Input/Output: [(85 -72 -95 9) -95]
Test Case: 987 | Input/Output: [(-18 -4 -71 -18) -71]
Test Case: 988 | Input/Output: [(-90 76 -53 48) -90]
Test Case: 989 | Input/Output: [(81 -21 51 33) -21]
Test Case: 990 | Input/Output: [(-75 33 97 45) -75]
Test Case: 991 | Input/Output: [(73 -68 -18 95) -68]
Test Case: 992 | Input/Output: [(40 -94 -47 -78) -94]
Test Case: 993 | Input/Output: [(-85 4 -81 -82) -85]
Test Case: 994 | Input/Output: [(-78 61 44 31) -78]
Test Case: 995 | Input/Output: [(68 -71 20 4) -71]
Test Case: 996 | Input/Output: [(-16 -58 -4 -64) -64]
Test Case: 997 | Input/Output: [(-58 -37 -39 -4) -58]
Test Case: 998 | Input/Output: [(54 75 -57 76) -57]
Test Case: 999 | Input/Output: [(55 -16 78 -39) -39]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = 122 114 -66 18 47 37 20 119 118 107 94 72 107 -98 52 -19
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-16 -16 -16 -82] -82] [[97 63 63 63] 63] [[-12 -12 -43 -12] -43] [[65 -71 65 65] -71] [[8 -7 8 8] -7] [[14 -71 14 14] -71] [[-69 -69 -69 -69] -69] [[81 -80 81 81] -80] [[-22 66 -22 -22] -22] [[22 23 23 23] 22] [(-94 -94 -94 -94) -94] [(-8 -8 -8 -8) -8] [(89 89 89 89) 89] [(0 0 0 0) 0] [(99 99 99 99) 99] [(96 13 78 86) 13] [(65 63 74 51) 51] [(48 97 56 58) 48] [(2 62 46 4) 2] [(79 71 2 86) 2] [(12 94 46 54) 12] [(12 15 92 93) 12] [(40 82 65 56) 40] [(21 19 10 45) 10] [(45 3 19 48) 3] [(72 90 68 13) 13] [(7 43 20 66) 7] [(43 34 94 4) 4] [(56 32 41 68) 32] [(76 43 90 40) 40] [(89 13 20 21) 13] [(60 63 68 5) 5] [(51 79 19 9) 9] [(60 1 53 64) 1] [(50 96 73 45) 45] [(-46 -87 -41 -7) -87] [(20 -90 10 -10) -90] [(25 72 -26 -62) -62] [(85 1 62 -29) -29] [(-18 8 47 43) -18] [(2 -55 92 39) -55] [(-10 -19 -86 -9) -86] [(-77 97 10 -4) -77] [(-95 19 -93 -2) -95] [(-37 -91 66 98) -91] [(-61 36 93 57) -61] [(-19 -57 -13 -81) -81] [(-84 35 -79 -58) -84] [(-51 -70 81 65) -70] [(3 13 57 20) 3] [(-9 -88 -27 -54) -88] [(-86 89 85 -73) -86] [(23 72 92 -51) -51] [(77 71 66 -62) -62] [(27 29 -77 -27) -77] [(-50 -71 73 -62) -71] [(-66 -39 88 58) -66] [(77 -22 16 9) -22] [(46 3 -51 15) -51] [(24 19 4 42) 4] [(-7 51 -7 -49) -49] [(-53 99 -23 92) -53] [(76 9 99 -71) -71] [(-68 -86 18 -26) -86] [(-48 -61 76 5) -61] [(12 -44 48 -92) -92] [(-5 -46 -57 9) -57] [(15 13 -100 -88) -100] [(-60 -55 -3 -85) -85] [(31 -41 50 52) -41] [(-42 -19 -16 -35) -42] [(12 36 -42 50) -42] [(-30 -99 -66 -92) -99] [(-31 27 -76 56) -76] [(-53 -71 15 -61) -71] [(-51 -23 88 86) -51] [(36 59 55 67) 36] [(-26 -23 -78 -34) -78] [(9 -6 -87 -9) -87] [(93 1 -87 -49) -87] [(5 -44 54 2) -44] [(-14 -4 -10 -81) -81] [(65 17 38 75) 17] [(-29 -62 75 96) -62] [(-65 85 94 -16) -65] [(99 -25 17 21) -25] [(-56 58 27 -70) -70] [(-70 7 -41 7) -70] [(60 -2 84 -97) -97] [(30 -5 -92 -47) -92] [(28 -11 40 -77) -77] [(-72 15 -65 -52) -72] [(34 42 31 -43) -43] [(-12 -12 -63 3) -63] [(70 32 -76 -65) -76])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -82                 | Program output: -16                
Correct output: 63                  | Program output: 63                 
Correct output: -43                 | Program output: -12                
Correct output: -71                 | Program output: -71                
Correct output: -7                  | Program output: -7                 
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: -22                 | Program output: 66                 
Correct output: 22                  | Program output: 23                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: 51                  | Program output: 63                 
Correct output: 48                  | Program output: 97                 
Correct output: 2                   | Program output: 62                 
Correct output: 2                   | Program output: 71                 
Correct output: 12                  | Program output: 94                 
Correct output: 12                  | Program output: 15                 
Correct output: 40                  | Program output: 82                 
Correct output: 10                  | Program output: 19                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 90                 
Correct output: 7                   | Program output: 43                 
Correct output: 4                   | Program output: 34                 
Correct output: 32                  | Program output: 32                 
Correct output: 40                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 5                   | Program output: 63                 
Correct output: 9                   | Program output: 79                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 96                 
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: 72                 
Correct output: -29                 | Program output: 1                  
Correct output: -18                 | Program output: 8                  
Correct output: -55                 | Program output: -55                
Correct output: -86                 | Program output: -19                
Correct output: -77                 | Program output: 97                 
Correct output: -95                 | Program output: 19                 
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output: 36                 
Correct output: -81                 | Program output: -57                
Correct output: -84                 | Program output: 35                 
Correct output: -70                 | Program output: -70                
Correct output: 3                   | Program output: 13                 
Correct output: -88                 | Program output: -88                
Correct output: -86                 | Program output: 89                 
Correct output: -51                 | Program output: 72                 
Correct output: -62                 | Program output: 71                 
Correct output: -77                 | Program output: 29                 
Correct output: -71                 | Program output: -71                
Correct output: -66                 | Program output: -39                
Correct output: -22                 | Program output: -22                
Correct output: -51                 | Program output: 3                  
Correct output: 4                   | Program output: 19                 
Correct output: -49                 | Program output: 51                 
Correct output: -53                 | Program output: 99                 
Correct output: -71                 | Program output: 9                  
Correct output: -86                 | Program output: -86                
Correct output: -61                 | Program output: -61                
Correct output: -92                 | Program output: -44                
Correct output: -57                 | Program output: -46                
Correct output: -100                | Program output: 13                 
Correct output: -85                 | Program output: -55                
Correct output: -41                 | Program output: -41                
Correct output: -42                 | Program output: -19                
Correct output: -42                 | Program output: 36                 
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: 27                 
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: -23                
Correct output: 36                  | Program output: 59                 
Correct output: -78                 | Program output: -23                
Correct output: -87                 | Program output: -6                 
Correct output: -87                 | Program output: 1                  
Correct output: -44                 | Program output: -44                
Correct output: -81                 | Program output: -4                 
Correct output: 17                  | Program output: 17                 
Correct output: -62                 | Program output: -62                
Correct output: -65                 | Program output: 85                 
Correct output: -25                 | Program output: -25                
Correct output: -70                 | Program output: 58                 
Correct output: -70                 | Program output: 7                  
Correct output: -97                 | Program output: -2                 
Correct output: -92                 | Program output: -5                 
Correct output: -77                 | Program output: -11                
Correct output: -72                 | Program output: 15                 
Correct output: -43                 | Program output: 42                 
Correct output: -63                 | Program output: -12                
Correct output: -76                 | Program output: 32                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_shove} {:close 1, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max})
Lexicase best program: (exec_shove (boolean_rot) in2 print_integer exec_do*count (integer_lt exec_empty exec_do*times () integer_inc integer_max))
Lexicase best errors: [0 1 1 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 14
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_shove} {:close 1, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max})
Zero cases best program: (exec_shove (boolean_rot) in2 print_integer exec_do*count (integer_lt exec_empty exec_do*times () integer_inc integer_max))
Zero cases best errors: [0 1 1 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 14
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 2 3 4 4 1 5 5 4 1)
Population mean number of elite cases: 0.03
Count of perfect (error zero) individuals by case: (4 2 3 4 4 1 5 5 4 1)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tagged_611} {:close 0, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction -42} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 1, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot})
Best program: (exec_eq integer_dup_items tagged_611 in2 exec_pop (integer_inc exec_flush integer_lt exec_flush exec_yankdup) boolean_eq print_integer integer_dup_items -42 integer_mod integer_gt integer_yankdup in4 exec_y () exec_empty in4 boolean_yank integer_yank boolean_dup_times exec_when () boolean_xor boolean_and exec_swap (boolean_flush integer_shove exec_y (in4 integer_dup boolean_dup_times integer_gte in2 exec_s_when_autoconstructing (boolean_yankdup integer_rot) () ())) ())
Errors: [0 1 1 0 0 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 39
Size: 49
Percent parens: 0.204
--- Population Statistics ---
Average total errors in population: 9.967
Median total errors in population: 10
Error averages by case: (0.996 0.998 0.997 0.996 0.996 0.999 0.995 0.995 0.996 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.378
Average program size in population (points): 69.139
Average percent parens in population: 0.279
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.28
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 467184
--- Timings ---
Current time: 1559584806169 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  4.1%
Reproduction:         0.8 seconds, 29.2%
Fitness Testing:      1.7 seconds, 66.8%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -82                 | Program output: -16                
Correct output: 63                  | Program output: 63                 
Correct output: -43                 | Program output: -12                
Correct output: -71                 | Program output: -71                
Correct output: -7                  | Program output: -7                 
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: -22                 | Program output: 66                 
Correct output: 22                  | Program output: 23                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: 51                  | Program output: 63                 
Correct output: 48                  | Program output: 97                 
Correct output: 2                   | Program output: 62                 
Correct output: 2                   | Program output: 71                 
Correct output: 12                  | Program output: 94                 
Correct output: 12                  | Program output: 15                 
Correct output: 40                  | Program output: 82                 
Correct output: 10                  | Program output: 19                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 90                 
Correct output: 7                   | Program output: 43                 
Correct output: 4                   | Program output: 34                 
Correct output: 32                  | Program output: 32                 
Correct output: 40                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 5                   | Program output: 63                 
Correct output: 9                   | Program output: 79                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 96                 
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: 72                 
Correct output: -29                 | Program output: 1                  
Correct output: -18                 | Program output: 8                  
Correct output: -55                 | Program output: -55                
Correct output: -86                 | Program output: -19                
Correct output: -77                 | Program output: 97                 
Correct output: -95                 | Program output: 19                 
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output: 36                 
Correct output: -81                 | Program output: -57                
Correct output: -84                 | Program output: 35                 
Correct output: -70                 | Program output: -70                
Correct output: 3                   | Program output: 13                 
Correct output: -88                 | Program output: -88                
Correct output: -86                 | Program output: 89                 
Correct output: -51                 | Program output: 72                 
Correct output: -62                 | Program output: 71                 
Correct output: -77                 | Program output: 29                 
Correct output: -71                 | Program output: -71                
Correct output: -66                 | Program output: -39                
Correct output: -22                 | Program output: -22                
Correct output: -51                 | Program output: 3                  
Correct output: 4                   | Program output: 19                 
Correct output: -49                 | Program output: 51                 
Correct output: -53                 | Program output: 99                 
Correct output: -71                 | Program output: 9                  
Correct output: -86                 | Program output: -86                
Correct output: -61                 | Program output: -61                
Correct output: -92                 | Program output: -44                
Correct output: -57                 | Program output: -46                
Correct output: -100                | Program output: 13                 
Correct output: -85                 | Program output: -55                
Correct output: -41                 | Program output: -41                
Correct output: -42                 | Program output: -19                
Correct output: -42                 | Program output: 36                 
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: 27                 
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: -23                
Correct output: 36                  | Program output: 59                 
Correct output: -78                 | Program output: -23                
Correct output: -87                 | Program output: -6                 
Correct output: -87                 | Program output: 1                  
Correct output: -44                 | Program output: -44                
Correct output: -81                 | Program output: -4                 
Correct output: 17                  | Program output: 17                 
Correct output: -62                 | Program output: -62                
Correct output: -65                 | Program output: 85                 
Correct output: -25                 | Program output: -25                
Correct output: -70                 | Program output: 58                 
Correct output: -70                 | Program output: 7                  
Correct output: -97                 | Program output: -2                 
Correct output: -92                 | Program output: -5                 
Correct output: -77                 | Program output: -11                
Correct output: -72                 | Program output: 15                 
Correct output: -43                 | Program output: 42                 
Correct output: -63                 | Program output: -12                
Correct output: -76                 | Program output: 32                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_shove} {:close 1, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max})
Lexicase best program: (exec_shove (boolean_rot) in2 print_integer exec_do*count (integer_lt exec_empty exec_do*times () integer_inc integer_max))
Lexicase best errors: [0 1 1 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 14
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_shove} {:close 1, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max})
Zero cases best program: (exec_shove (boolean_rot) in2 print_integer exec_do*count (integer_lt exec_empty exec_do*times () integer_inc integer_max))
Zero cases best errors: [0 1 1 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 14
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (895 301 301 480 416 416 301 415 415 416)
Population mean number of elite cases: 4.36
Count of perfect (error zero) individuals by case: (895 301 301 480 416 416 301 415 415 416)
Population mean number of perfect (error zero) cases: 4.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction 75} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction tagged_706} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_706} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 0, :instruction print_newline} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min})
Best program: (integer_swap exec_y_when_autoconstructing () boolean_not integer_eq in2 print_boolean integer_gt integer_rot exec_empty integer_mod print_integer boolean_dup_items boolean_dup_items boolean_xor boolean_flush exec_while (integer_dup_items print_newline exec_s_when_autoconstructing (integer_eq boolean_pop boolean_yankdup in2 integer_div) (print_integer boolean_swap exec_shove (exec_flush) integer_pop boolean_stackdepth print_integer) (boolean_dup 75) integer_eq exec_k_when_autoconstructing (boolean_and boolean_yank) (tagged_706 integer_dup_items in2) integer_empty exec_y_when_autoconstructing (integer_mod) exec_k_when_autoconstructing () (exec_k_when_autoconstructing () (exec_do*count (exec_while (boolean_flush integer_eq tagged_706 boolean_dup_items) integer_add boolean_and exec_swap () (exec_dup_times (in4) boolean_dup boolean_rot boolean_and exec_when (integer_lt print_newline print_integer integer_min)))))))
Errors: [0 1 1 1 0 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 64
Size: 84
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 5.644
Median total errors in population: 5
Error averages by case: (0.105 0.699 0.699 0.52 0.584 0.584 0.699 0.585 0.585 0.584)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.109
Average program size in population (points): 62.628
Average percent parens in population: 0.265
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.503
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 102
Genome diversity (% unique genomes):	 0.505
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 103
Syntactic diversity (% unique Push programs):	 0.493
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1016705
--- Timings ---
Current time: 1559584808802 milliseconds
Total Time:           5.6 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         2.5 seconds, 43.6%
Fitness Testing:      2.4 seconds, 43.5%
Report:               0.6 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -82                 | Program output: -16                
Correct output: 63                  | Program output: 63                 
Correct output: -43                 | Program output: -12                
Correct output: -71                 | Program output: -71                
Correct output: -7                  | Program output: -7                 
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: -22                 | Program output: 66                 
Correct output: 22                  | Program output: 23                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: 51                  | Program output: 63                 
Correct output: 48                  | Program output: 97                 
Correct output: 2                   | Program output: 62                 
Correct output: 2                   | Program output: 71                 
Correct output: 12                  | Program output: 94                 
Correct output: 12                  | Program output: 15                 
Correct output: 40                  | Program output: 82                 
Correct output: 10                  | Program output: 19                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 90                 
Correct output: 7                   | Program output: 43                 
Correct output: 4                   | Program output: 34                 
Correct output: 32                  | Program output: 32                 
Correct output: 40                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 5                   | Program output: 63                 
Correct output: 9                   | Program output: 79                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 96                 
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: 72                 
Correct output: -29                 | Program output: 1                  
Correct output: -18                 | Program output: 8                  
Correct output: -55                 | Program output: -55                
Correct output: -86                 | Program output: -19                
Correct output: -77                 | Program output: 97                 
Correct output: -95                 | Program output: 19                 
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output: 36                 
Correct output: -81                 | Program output: -57                
Correct output: -84                 | Program output: 35                 
Correct output: -70                 | Program output: -70                
Correct output: 3                   | Program output: 13                 
Correct output: -88                 | Program output: -88                
Correct output: -86                 | Program output: 89                 
Correct output: -51                 | Program output: 72                 
Correct output: -62                 | Program output: 71                 
Correct output: -77                 | Program output: 29                 
Correct output: -71                 | Program output: -71                
Correct output: -66                 | Program output: -39                
Correct output: -22                 | Program output: -22                
Correct output: -51                 | Program output: 3                  
Correct output: 4                   | Program output: 19                 
Correct output: -49                 | Program output: 51                 
Correct output: -53                 | Program output: 99                 
Correct output: -71                 | Program output: 9                  
Correct output: -86                 | Program output: -86                
Correct output: -61                 | Program output: -61                
Correct output: -92                 | Program output: -44                
Correct output: -57                 | Program output: -46                
Correct output: -100                | Program output: 13                 
Correct output: -85                 | Program output: -55                
Correct output: -41                 | Program output: -41                
Correct output: -42                 | Program output: -19                
Correct output: -42                 | Program output: 36                 
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: 27                 
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: -23                
Correct output: 36                  | Program output: 59                 
Correct output: -78                 | Program output: -23                
Correct output: -87                 | Program output: -6                 
Correct output: -87                 | Program output: 1                  
Correct output: -44                 | Program output: -44                
Correct output: -81                 | Program output: -4                 
Correct output: 17                  | Program output: 17                 
Correct output: -62                 | Program output: -62                
Correct output: -65                 | Program output: 85                 
Correct output: -25                 | Program output: -25                
Correct output: -70                 | Program output: 58                 
Correct output: -70                 | Program output: 7                  
Correct output: -97                 | Program output: -2                 
Correct output: -92                 | Program output: -5                 
Correct output: -77                 | Program output: -11                
Correct output: -72                 | Program output: 15                 
Correct output: -43                 | Program output: 42                 
Correct output: -63                 | Program output: -12                
Correct output: -76                 | Program output: 32                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in2} {:close 0, :instruction 36} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer})
Lexicase best program: (in2 36 exec_pop (boolean_or) exec_s (integer_gt integer_add exec_noop exec_rot () (exec_rot (integer_add integer_flush) (exec_stackdepth in4) (in2 exec_s_when_autoconstructing (print_integer) () ())) ()) () ())
Lexicase best errors: [0 1 0 1 1 1 0 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 31
Percent parens: 0.452
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in2} {:close 0, :instruction 36} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer})
Zero cases best program: (in2 36 exec_pop (boolean_or) exec_s (integer_gt integer_add exec_noop exec_rot () (exec_rot (integer_add integer_flush) (exec_stackdepth in4) (in2 exec_s_when_autoconstructing (print_integer) () ())) ()) () ())
Zero cases best errors: [0 1 0 1 1 1 0 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 31
Percent parens: 0.452
--- Lexicase Population Statistics ---
Count of elite individuals by case: (493 1000 493 1000 1 418 493 418 1000 1000)
Population mean number of elite cases: 6.32
Count of perfect (error zero) individuals by case: (493 0 493 0 1 418 493 418 0 0)
Population mean number of perfect (error zero) cases: 2.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction 75} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction tagged_706} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_706} {:close 1, :instruction boolean_dup_items})
Best program: (integer_swap exec_y_when_autoconstructing () boolean_not integer_eq in2 print_boolean integer_gt integer_rot exec_empty integer_mod print_integer boolean_dup_items boolean_dup_items boolean_xor boolean_flush exec_while (integer_dup_items print_newline exec_s_when_autoconstructing (integer_eq boolean_pop boolean_yankdup in2 integer_div) (print_integer boolean_swap exec_shove (exec_flush) integer_pop boolean_stackdepth print_integer) (boolean_dup 75) integer_eq exec_k_when_autoconstructing (boolean_and boolean_yank) (tagged_706 integer_dup_items in2) integer_empty exec_y_when_autoconstructing (integer_mod) exec_k_when_autoconstructing () (exec_k_when_autoconstructing () (exec_do*count (exec_while (boolean_flush integer_eq tagged_706 boolean_dup_items))))))
Errors: [0 1 0 1 1 1 0 1 1 1]
Total: 7
Mean: 0.7
Genome size: 51
Size: 67
Percent parens: 0.239
--- Population Statistics ---
Average total errors in population: 7.684
Median total errors in population: 8
Error averages by case: (0.507 1.0 0.507 1.0 0.999 0.582 0.507 0.582 1.0 1.0)
Error minima by case: (0 1 0 1 0 0 0 0 1 1)
Average genome size in population (length): 45.965
Average program size in population (points): 60.948
Average percent parens in population: 0.268
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.048
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 113
Genome diversity (% unique genomes):	 0.629
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 114
Syntactic diversity (% unique Push programs):	 0.615
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1646096
--- Timings ---
Current time: 1559584811858 milliseconds
Total Time:           8.7 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.6 seconds, 52.5%
Fitness Testing:      3.2 seconds, 36.6%
Report:               0.8 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -82                 | Program output: -16                
Correct output: 63                  | Program output: 63                 
Correct output: -43                 | Program output: -12                
Correct output: -71                 | Program output: -71                
Correct output: -7                  | Program output: -7                 
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: -22                 | Program output: 66                 
Correct output: 22                  | Program output: 23                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: 51                  | Program output: 63                 
Correct output: 48                  | Program output: 97                 
Correct output: 2                   | Program output: 62                 
Correct output: 2                   | Program output: 71                 
Correct output: 12                  | Program output: 94                 
Correct output: 12                  | Program output: 15                 
Correct output: 40                  | Program output: 82                 
Correct output: 10                  | Program output: 19                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 90                 
Correct output: 7                   | Program output: 43                 
Correct output: 4                   | Program output: 34                 
Correct output: 32                  | Program output: 32                 
Correct output: 40                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 5                   | Program output: 63                 
Correct output: 9                   | Program output: 79                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 96                 
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: 72                 
Correct output: -29                 | Program output: 1                  
Correct output: -18                 | Program output: 8                  
Correct output: -55                 | Program output: -55                
Correct output: -86                 | Program output: -19                
Correct output: -77                 | Program output: 97                 
Correct output: -95                 | Program output: 19                 
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output: 36                 
Correct output: -81                 | Program output: -57                
Correct output: -84                 | Program output: 35                 
Correct output: -70                 | Program output: -70                
Correct output: 3                   | Program output: 13                 
Correct output: -88                 | Program output: -88                
Correct output: -86                 | Program output: 89                 
Correct output: -51                 | Program output: 72                 
Correct output: -62                 | Program output: 71                 
Correct output: -77                 | Program output: 29                 
Correct output: -71                 | Program output: -71                
Correct output: -66                 | Program output: -39                
Correct output: -22                 | Program output: -22                
Correct output: -51                 | Program output: 3                  
Correct output: 4                   | Program output: 19                 
Correct output: -49                 | Program output: 51                 
Correct output: -53                 | Program output: 99                 
Correct output: -71                 | Program output: 9                  
Correct output: -86                 | Program output: -86                
Correct output: -61                 | Program output: -61                
Correct output: -92                 | Program output: -44                
Correct output: -57                 | Program output: -46                
Correct output: -100                | Program output: 13                 
Correct output: -85                 | Program output: -55                
Correct output: -41                 | Program output: -41                
Correct output: -42                 | Program output: -19                
Correct output: -42                 | Program output: 36                 
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: 27                 
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: -23                
Correct output: 36                  | Program output: 59                 
Correct output: -78                 | Program output: -23                
Correct output: -87                 | Program output: -6                 
Correct output: -87                 | Program output: 1                  
Correct output: -44                 | Program output: -44                
Correct output: -81                 | Program output: -4                 
Correct output: 17                  | Program output: 17                 
Correct output: -62                 | Program output: -62                
Correct output: -65                 | Program output: 85                 
Correct output: -25                 | Program output: -25                
Correct output: -70                 | Program output: 58                 
Correct output: -70                 | Program output: 7                  
Correct output: -97                 | Program output: -2                 
Correct output: -92                 | Program output: -5                 
Correct output: -77                 | Program output: -11                
Correct output: -72                 | Program output: 15                 
Correct output: -43                 | Program output: 42                 
Correct output: -63                 | Program output: -12                
Correct output: -76                 | Program output: 32                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 0, :instruction -68} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction boolean_pop} {:close 1, :instruction exec_empty} {:close 2, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction print_newline} {:close 0, :instruction integer_gte})
Lexicase best program: (in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth integer_fromboolean boolean_not exec_y (boolean_invert_second_then_and) integer_min exec_pop () exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div boolean_or) (exec_yankdup) (integer_dup_times) integer_add exec_eq boolean_invert_second_then_and boolean_eq integer_gte print_boolean -68 boolean_invert_second_then_and boolean_pop) () exec_empty exec_dup () integer_mult boolean_yankdup boolean_flush integer_dec boolean_invert_second_then_and integer_lt integer_max boolean_flush boolean_pop integer_rot integer_flush integer_sub boolean_pop integer_rot integer_yankdup exec_yankdup integer_dup integer_inc integer_stackdepth print_exec () boolean_empty integer_pop boolean_rot integer_div boolean_not exec_noop exec_do*times (boolean_yank) integer_pop print_newline integer_gte)
Lexicase best errors: [0 1 1 1 0 1 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 74
Percent parens: 0.149
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 0, :instruction -68} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction boolean_pop} {:close 1, :instruction exec_empty} {:close 2, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction print_newline} {:close 0, :instruction integer_gte})
Zero cases best program: (in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth integer_fromboolean boolean_not exec_y (boolean_invert_second_then_and) integer_min exec_pop () exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div boolean_or) (exec_yankdup) (integer_dup_times) integer_add exec_eq boolean_invert_second_then_and boolean_eq integer_gte print_boolean -68 boolean_invert_second_then_and boolean_pop) () exec_empty exec_dup () integer_mult boolean_yankdup boolean_flush integer_dec boolean_invert_second_then_and integer_lt integer_max boolean_flush boolean_pop integer_rot integer_flush integer_sub boolean_pop integer_rot integer_yankdup exec_yankdup integer_dup integer_inc integer_stackdepth print_exec () boolean_empty integer_pop boolean_rot integer_div boolean_not exec_noop exec_do*times (boolean_yank) integer_pop print_newline integer_gte)
Zero cases best errors: [0 1 1 1 0 1 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 74
Percent parens: 0.149
--- Lexicase Population Statistics ---
Count of elite individuals by case: (297 147 147 1000 908 1000 464 297 1000 463)
Population mean number of elite cases: 5.72
Count of perfect (error zero) individuals by case: (297 147 147 0 908 0 464 297 0 463)
Population mean number of perfect (error zero) cases: 2.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in2} {:close 0, :instruction 36} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer})
Best program: (in2 36 exec_pop (boolean_or) exec_s (integer_gt integer_add exec_noop exec_rot () (exec_rot (integer_add integer_flush) (exec_stackdepth in4) (in2 exec_s_when_autoconstructing (print_integer) () ())) ()) () ())
Errors: [1 1 1 1 0 1 0 1 1 0]
Total: 7
Mean: 0.7
Genome size: 17
Size: 31
Percent parens: 0.452
--- Population Statistics ---
Average total errors in population: 7.277
Median total errors in population: 7
Error averages by case: (0.703 0.853 0.853 1.0 0.092 1.0 0.536 0.703 1.0 0.537)
Error minima by case: (0 0 0 1 0 1 0 0 1 0)
Average genome size in population (length): 45.571
Average program size in population (points): 59.756
Average percent parens in population: 0.261
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.71275
Median age in population: 4.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 107
Genome diversity (% unique genomes):	 0.683
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 108
Syntactic diversity (% unique Push programs):	 0.667
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2280925
--- Timings ---
Current time: 1559584814615 milliseconds
Total Time:          11.4 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.4 seconds, 56.2%
Fitness Testing:      3.9 seconds, 33.7%
Report:               1.1 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -82                 | Program output: -16                
Correct output: 63                  | Program output: 63                 
Correct output: -43                 | Program output: -43                
Correct output: -71                 | Program output: 65                 
Correct output: -7                  | Program output: 8                  
Correct output: -71                 | Program output: 14                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 81                 
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 23                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 78                 
Correct output: 51                  | Program output: 74                 
Correct output: 48                  | Program output: 56                 
Correct output: 2                   | Program output: 46                 
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output: 46                 
Correct output: 12                  | Program output: 92                 
Correct output: 40                  | Program output: 65                 
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 19                 
Correct output: 13                  | Program output: 68                 
Correct output: 7                   | Program output: 20                 
Correct output: 4                   | Program output: 94                 
Correct output: 32                  | Program output: 41                 
Correct output: 40                  | Program output: 90                 
Correct output: 13                  | Program output: 20                 
Correct output: 5                   | Program output: 68                 
Correct output: 9                   | Program output: 19                 
Correct output: 1                   | Program output: 53                 
Correct output: 45                  | Program output: 73                 
Correct output: -87                 | Program output: -41                
Correct output: -90                 | Program output: 10                 
Correct output: -62                 | Program output: -26                
Correct output: -29                 | Program output: 62                 
Correct output: -18                 | Program output: 47                 
Correct output: -55                 | Program output: 92                 
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: 10                 
Correct output: -95                 | Program output: -93                
Correct output: -91                 | Program output: 66                 
Correct output: -61                 | Program output: 93                 
Correct output: -81                 | Program output: -13                
Correct output: -84                 | Program output: -79                
Correct output: -70                 | Program output: 81                 
Correct output: 3                   | Program output: 57                 
Correct output: -88                 | Program output: -27                
Correct output: -86                 | Program output: 85                 
Correct output: -51                 | Program output: 92                 
Correct output: -62                 | Program output: 66                 
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: 73                 
Correct output: -66                 | Program output: 88                 
Correct output: -22                 | Program output: 16                 
Correct output: -51                 | Program output: -51                
Correct output: 4                   | Program output: 4                  
Correct output: -49                 | Program output: -7                 
Correct output: -53                 | Program output: -23                
Correct output: -71                 | Program output: 99                 
Correct output: -86                 | Program output: 18                 
Correct output: -61                 | Program output: 76                 
Correct output: -92                 | Program output: 48                 
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -3                 
Correct output: -41                 | Program output: 50                 
Correct output: -42                 | Program output: -16                
Correct output: -42                 | Program output: -42                
Correct output: -99                 | Program output: -66                
Correct output: -76                 | Program output: -76                
Correct output: -71                 | Program output: 15                 
Correct output: -51                 | Program output: 88                 
Correct output: 36                  | Program output: 55                 
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -87                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: 54                 
Correct output: -81                 | Program output: -10                
Correct output: 17                  | Program output: 38                 
Correct output: -62                 | Program output: 75                 
Correct output: -65                 | Program output: 94                 
Correct output: -25                 | Program output: 17                 
Correct output: -70                 | Program output: 27                 
Correct output: -70                 | Program output: -41                
Correct output: -97                 | Program output: 84                 
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: 40                 
Correct output: -72                 | Program output: -65                
Correct output: -43                 | Program output: 31                 
Correct output: -63                 | Program output: -63                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction 75} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_yank} {:close 0, :instruction tagged_706} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction print_newline} {:close 0, :instruction integer_gte})
Lexicase best program: (in3 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth integer_fromboolean boolean_not exec_y (boolean_invert_second_then_and) integer_min exec_pop () exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div boolean_rot) (exec_yankdup) (integer_dup_items integer_swap exec_s_when_autoconstructing (integer_eq boolean_pop boolean_yankdup in2 integer_div) (print_integer boolean_swap exec_shove (exec_flush) integer_pop boolean_stackdepth print_integer) (boolean_dup 75) integer_eq exec_k_when_autoconstructing (exec_pop (boolean_yank) tagged_706 integer_dup_items in2) (integer_empty exec_y_when_autoconstructing (boolean_flush integer_dec boolean_invert_second_then_and)) integer_lt integer_max) boolean_pop boolean_shove boolean_shove integer_rot integer_add) (boolean_rot integer_flush integer_sub boolean_pop) integer_rot integer_yankdup exec_yankdup integer_dup integer_inc integer_stackdepth print_exec () boolean_rot boolean_empty integer_pop boolean_rot integer_div boolean_not exec_noop exec_do*times (boolean_yank) integer_pop print_newline integer_gte)
Lexicase best errors: [0 0 1 0 1 1 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 97
Percent parens: 0.186
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction 75} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_yank} {:close 0, :instruction tagged_706} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction print_newline} {:close 0, :instruction integer_gte})
Zero cases best program: (in3 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth integer_fromboolean boolean_not exec_y (boolean_invert_second_then_and) integer_min exec_pop () exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div boolean_rot) (exec_yankdup) (integer_dup_items integer_swap exec_s_when_autoconstructing (integer_eq boolean_pop boolean_yankdup in2 integer_div) (print_integer boolean_swap exec_shove (exec_flush) integer_pop boolean_stackdepth print_integer) (boolean_dup 75) integer_eq exec_k_when_autoconstructing (exec_pop (boolean_yank) tagged_706 integer_dup_items in2) (integer_empty exec_y_when_autoconstructing (boolean_flush integer_dec boolean_invert_second_then_and)) integer_lt integer_max) boolean_pop boolean_shove boolean_shove integer_rot integer_add) (boolean_rot integer_flush integer_sub boolean_pop) integer_rot integer_yankdup exec_yankdup integer_dup integer_inc integer_stackdepth print_exec () boolean_rot boolean_empty integer_pop boolean_rot integer_div boolean_not exec_noop exec_do*times (boolean_yank) integer_pop print_newline integer_gte)
Zero cases best errors: [0 0 1 0 1 1 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 97
Percent parens: 0.186
--- Lexicase Population Statistics ---
Count of elite individuals by case: (336 336 264 336 313 1000 913 313 264 913)
Population mean number of elite cases: 4.99
Count of perfect (error zero) individuals by case: (336 336 264 336 313 0 913 313 264 913)
Population mean number of perfect (error zero) cases: 3.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction 75} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction tagged_706} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup})
Best program: (in3 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth integer_fromboolean boolean_not exec_y (boolean_invert_second_then_and) integer_min exec_pop () exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div boolean_rot) (exec_yankdup) (integer_dup_items print_newline exec_s_when_autoconstructing (integer_eq boolean_pop boolean_yankdup in2 integer_div) (print_integer boolean_swap exec_shove (exec_flush) integer_pop boolean_stackdepth print_integer) (boolean_dup 75) integer_eq exec_k_when_autoconstructing (boolean_and boolean_yank) (tagged_706 integer_dup_items in2) integer_empty exec_y_when_autoconstructing (boolean_flush integer_dec boolean_invert_second_then_and)) integer_lt integer_max) (boolean_pop boolean_shove boolean_shove integer_rot integer_add) boolean_rot integer_flush integer_sub boolean_pop integer_rot integer_yankdup exec_yankdup)
Errors: [0 0 1 0 1 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 63
Size: 78
Percent parens: 0.192
--- Population Statistics ---
Average total errors in population: 6.012
Median total errors in population: 6
Error averages by case: (0.664 0.664 0.736 0.664 0.687 1.0 0.087 0.687 0.736 0.087)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 51.746
Average program size in population (points): 66.624
Average percent parens in population: 0.243
Minimum age in population: 4.0
Maximum age in population: 8.0
Average age in population: 6.309125
Median age in population: 6.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 59
Genome diversity (% unique genomes):	 0.779
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.763
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3065296
--- Timings ---
Current time: 1559584818055 milliseconds
Total Time:          14.5 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.5 seconds, 58.6%
Fitness Testing:      4.6 seconds, 31.9%
Report:               1.3 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -82                 | Program output: -82                
Correct output: 63                  | Program output: 63                 
Correct output: -43                 | Program output: -12                
Correct output: -71                 | Program output: 65                 
Correct output: -7                  | Program output: 8                  
Correct output: -71                 | Program output: 14                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 81                 
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 23                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 86                 
Correct output: 51                  | Program output: 51                 
Correct output: 48                  | Program output: 58                 
Correct output: 2                   | Program output: 4                  
Correct output: 2                   | Program output: 86                 
Correct output: 12                  | Program output: 54                 
Correct output: 12                  | Program output: 93                 
Correct output: 40                  | Program output: 56                 
Correct output: 10                  | Program output: 45                 
Correct output: 3                   | Program output: 48                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 66                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 68                 
Correct output: 40                  | Program output: 40                 
Correct output: 13                  | Program output: 21                 
Correct output: 5                   | Program output: 5                  
Correct output: 9                   | Program output: 9                  
Correct output: 1                   | Program output: 64                 
Correct output: 45                  | Program output: 45                 
Correct output: -87                 | Program output: -7                 
Correct output: -90                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -29                 | Program output: -29                
Correct output: -18                 | Program output: 43                 
Correct output: -55                 | Program output: 39                 
Correct output: -86                 | Program output: -9                 
Correct output: -77                 | Program output: -4                 
Correct output: -95                 | Program output: -2                 
Correct output: -91                 | Program output: 98                 
Correct output: -61                 | Program output: 57                 
Correct output: -81                 | Program output: -81                
Correct output: -84                 | Program output: -58                
Correct output: -70                 | Program output: 65                 
Correct output: 3                   | Program output: 20                 
Correct output: -88                 | Program output: -54                
Correct output: -86                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -62                 | Program output: -62                
Correct output: -77                 | Program output: -27                
Correct output: -71                 | Program output: -62                
Correct output: -66                 | Program output: 58                 
Correct output: -22                 | Program output: 9                  
Correct output: -51                 | Program output: 15                 
Correct output: 4                   | Program output: 42                 
Correct output: -49                 | Program output: -49                
Correct output: -53                 | Program output: 92                 
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -26                
Correct output: -61                 | Program output: 5                  
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: 9                  
Correct output: -100                | Program output: -88                
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: 52                 
Correct output: -42                 | Program output: -35                
Correct output: -42                 | Program output: 50                 
Correct output: -99                 | Program output: -92                
Correct output: -76                 | Program output: 56                 
Correct output: -71                 | Program output: -61                
Correct output: -51                 | Program output: 86                 
Correct output: 36                  | Program output: 67                 
Correct output: -78                 | Program output: -34                
Correct output: -87                 | Program output: -9                 
Correct output: -87                 | Program output: -49                
Correct output: -44                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: 17                  | Program output: 75                 
Correct output: -62                 | Program output: 96                 
Correct output: -65                 | Program output: -16                
Correct output: -25                 | Program output: 21                 
Correct output: -70                 | Program output: -70                
Correct output: -70                 | Program output: 7                  
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -47                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: -52                
Correct output: -43                 | Program output: -43                
Correct output: -63                 | Program output: 3                  
Correct output: -76                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction 75} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction tagged_706} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction print_newline} {:close 0, :instruction integer_gte})
Lexicase best program: (in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth integer_fromboolean boolean_not exec_y (boolean_invert_second_then_and) integer_swap exec_pop () exec_if () (integer_inc exec_s_when_autoconstructing (boolean_empty integer_min exec_pop () exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div boolean_rot) (exec_yankdup) (integer_dup_items print_newline exec_s_when_autoconstructing (integer_eq boolean_pop boolean_yankdup in2 integer_div) (print_integer boolean_swap exec_shove (exec_flush) integer_pop boolean_stackdepth print_integer) (boolean_dup 75) integer_eq exec_k_when_autoconstructing (boolean_and boolean_yank) (tagged_706 integer_dup_items in2 integer_empty exec_y_when_autoconstructing (boolean_flush integer_dec boolean_invert_second_then_and)) integer_lt) integer_max) (boolean_pop boolean_shove boolean_shove integer_rot) integer_add) (exec_y_when_autoconstructing (integer_flush integer_sub boolean_pop) integer_rot integer_yankdup exec_yankdup integer_dup integer_inc integer_stackdepth print_exec () boolean_rot integer_pop boolean_rot integer_div boolean_not) (exec_noop exec_do*times (boolean_yank integer_pop print_newline) integer_gte)))
Lexicase best errors: [0 0 0 1 1 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 108
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction 75} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction tagged_706} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction print_newline} {:close 0, :instruction integer_gte})
Zero cases best program: (in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth integer_fromboolean boolean_not exec_y (boolean_invert_second_then_and) integer_swap exec_pop () exec_if () (integer_inc exec_s_when_autoconstructing (boolean_empty integer_min exec_pop () exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div boolean_rot) (exec_yankdup) (integer_dup_items print_newline exec_s_when_autoconstructing (integer_eq boolean_pop boolean_yankdup in2 integer_div) (print_integer boolean_swap exec_shove (exec_flush) integer_pop boolean_stackdepth print_integer) (boolean_dup 75) integer_eq exec_k_when_autoconstructing (boolean_and boolean_yank) (tagged_706 integer_dup_items in2 integer_empty exec_y_when_autoconstructing (boolean_flush integer_dec boolean_invert_second_then_and)) integer_lt) integer_max) (boolean_pop boolean_shove boolean_shove integer_rot) integer_add) (exec_y_when_autoconstructing (integer_flush integer_sub boolean_pop) integer_rot integer_yankdup exec_yankdup integer_dup integer_inc integer_stackdepth print_exec () boolean_rot integer_pop boolean_rot integer_div boolean_not) (exec_noop exec_do*times (boolean_yank integer_pop print_newline) integer_gte)))
Zero cases best errors: [0 0 0 1 1 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 108
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (271 671 271 1 399 249 399 271 921 1)
Population mean number of elite cases: 3.45
Count of perfect (error zero) individuals by case: (271 671 271 1 399 249 399 271 921 1)
Population mean number of perfect (error zero) cases: 3.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction -42} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 1, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_or})
Best program: (in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth exec_yankdup boolean_eq print_integer integer_dup_items -42 integer_mod integer_sub integer_yankdup in4 exec_y () exec_empty in4 exec_when () boolean_xor boolean_and integer_dec boolean_flush integer_shove exec_y (in4 integer_dup boolean_dup_times integer_gte in2 exec_s_when_autoconstructing (boolean_yankdup exec_s_when_autoconstructing (boolean_yankdup boolean_or) () ()) () ()))
Errors: [0 0 0 1 1 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 36
Size: 46
Percent parens: 0.217
--- Population Statistics ---
Average total errors in population: 6.546
Median total errors in population: 6
Error averages by case: (0.729 0.329 0.729 0.999 0.601 0.751 0.601 0.729 0.079 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.243
Average program size in population (points): 64.799
Average percent parens in population: 0.244
Minimum age in population: 5.0
Maximum age in population: 9.875
Average age in population: 7.834125
Median age in population: 7.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 51
Genome diversity (% unique genomes):	 0.796
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.779
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3869227
--- Timings ---
Current time: 1559584821543 milliseconds
Total Time:          18.1 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.7 seconds, 59.0%
Fitness Testing:      5.5 seconds, 30.2%
Report:               1.9 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -82                 | Program output: -16                
Correct output: 63                  | Program output: 63                 
Correct output: -43                 | Program output: -43                
Correct output: -71                 | Program output: 65                 
Correct output: -7                  | Program output: 8                  
Correct output: -71                 | Program output: 14                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 81                 
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 23                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 78                 
Correct output: 51                  | Program output: 74                 
Correct output: 48                  | Program output: 56                 
Correct output: 2                   | Program output: 46                 
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output: 46                 
Correct output: 12                  | Program output: 92                 
Correct output: 40                  | Program output: 65                 
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 19                 
Correct output: 13                  | Program output: 68                 
Correct output: 7                   | Program output: 20                 
Correct output: 4                   | Program output: 94                 
Correct output: 32                  | Program output: 41                 
Correct output: 40                  | Program output: 90                 
Correct output: 13                  | Program output: 20                 
Correct output: 5                   | Program output: 68                 
Correct output: 9                   | Program output: 19                 
Correct output: 1                   | Program output: 53                 
Correct output: 45                  | Program output: 73                 
Correct output: -87                 | Program output: -41                
Correct output: -90                 | Program output: 10                 
Correct output: -62                 | Program output: -26                
Correct output: -29                 | Program output: 62                 
Correct output: -18                 | Program output: 47                 
Correct output: -55                 | Program output: 92                 
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: 10                 
Correct output: -95                 | Program output: -93                
Correct output: -91                 | Program output: 66                 
Correct output: -61                 | Program output: 93                 
Correct output: -81                 | Program output: -13                
Correct output: -84                 | Program output: -79                
Correct output: -70                 | Program output: 81                 
Correct output: 3                   | Program output: 57                 
Correct output: -88                 | Program output: -27                
Correct output: -86                 | Program output: 85                 
Correct output: -51                 | Program output: 92                 
Correct output: -62                 | Program output: 66                 
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: 73                 
Correct output: -66                 | Program output: 88                 
Correct output: -22                 | Program output: 16                 
Correct output: -51                 | Program output: -51                
Correct output: 4                   | Program output: 4                  
Correct output: -49                 | Program output: -7                 
Correct output: -53                 | Program output: -23                
Correct output: -71                 | Program output: 99                 
Correct output: -86                 | Program output: 18                 
Correct output: -61                 | Program output: 76                 
Correct output: -92                 | Program output: 48                 
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -3                 
Correct output: -41                 | Program output: 50                 
Correct output: -42                 | Program output: -16                
Correct output: -42                 | Program output: -42                
Correct output: -99                 | Program output: -66                
Correct output: -76                 | Program output: -76                
Correct output: -71                 | Program output: 15                 
Correct output: -51                 | Program output: 88                 
Correct output: 36                  | Program output: 55                 
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -87                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: 54                 
Correct output: -81                 | Program output: -10                
Correct output: 17                  | Program output: 38                 
Correct output: -62                 | Program output: 75                 
Correct output: -65                 | Program output: 94                 
Correct output: -25                 | Program output: 17                 
Correct output: -70                 | Program output: 27                 
Correct output: -70                 | Program output: -41                
Correct output: -97                 | Program output: 84                 
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: 40                 
Correct output: -72                 | Program output: -65                
Correct output: -43                 | Program output: 31                 
Correct output: -63                 | Program output: -63                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 0, :instruction -68} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction boolean_pop} {:close 1, :instruction exec_empty} {:close 2, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction print_exec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop})
Lexicase best program: (in3 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth integer_fromboolean boolean_not exec_y (boolean_invert_second_then_and) integer_min exec_pop () exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div integer_max exec_do*times (exec_eq in2 exec_rot () (exec_shove () exec_dup (exec_k (exec_do*times (boolean_invert_second_then_and boolean_eq integer_gte print_boolean -68 boolean_invert_second_then_and boolean_pop)) (exec_empty) exec_dup ()) integer_mult boolean_yankdup boolean_flush integer_dec boolean_invert_second_then_and) () integer_lt integer_max) boolean_pop boolean_shove boolean_shove integer_rot integer_add) (boolean_rot integer_flush integer_sub boolean_pop) (integer_rot integer_yankdup exec_yankdup integer_dup integer_inc integer_stackdepth print_exec () integer_stackdepth print_exec () boolean_rot integer_pop boolean_rot integer_div boolean_not) exec_noop) ())
Lexicase best errors: [0 1 0 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 87
Percent parens: 0.230
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 0, :instruction -68} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction boolean_pop} {:close 1, :instruction exec_empty} {:close 2, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction print_exec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop})
Zero cases best program: (in3 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth integer_fromboolean boolean_not exec_y (boolean_invert_second_then_and) integer_min exec_pop () exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div integer_max exec_do*times (exec_eq in2 exec_rot () (exec_shove () exec_dup (exec_k (exec_do*times (boolean_invert_second_then_and boolean_eq integer_gte print_boolean -68 boolean_invert_second_then_and boolean_pop)) (exec_empty) exec_dup ()) integer_mult boolean_yankdup boolean_flush integer_dec boolean_invert_second_then_and) () integer_lt integer_max) boolean_pop boolean_shove boolean_shove integer_rot integer_add) (boolean_rot integer_flush integer_sub boolean_pop) (integer_rot integer_yankdup exec_yankdup integer_dup integer_inc integer_stackdepth print_exec () integer_stackdepth print_exec () boolean_rot integer_pop boolean_rot integer_div boolean_not) exec_noop) ())
Zero cases best errors: [0 1 0 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 87
Percent parens: 0.230
--- Lexicase Population Statistics ---
Count of elite individuals by case: (942 202 737 242 244 202 371 124 244 371)
Population mean number of elite cases: 3.68
Count of perfect (error zero) individuals by case: (942 202 737 242 244 202 371 124 244 371)
Population mean number of perfect (error zero) cases: 3.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction 75} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_yank} {:close 1, :instruction tagged_706} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_add} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction print_newline} {:close 0, :instruction integer_gte})
Best program: (in3 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth integer_fromboolean boolean_not exec_y (boolean_invert_second_then_and) integer_min exec_pop () exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div boolean_rot) (exec_yankdup) (integer_dup_items print_newline exec_s_when_autoconstructing (integer_eq boolean_pop boolean_yankdup in2 integer_div) (print_integer boolean_swap exec_shove (exec_flush integer_pop boolean_stackdepth print_integer) boolean_dup 75) (integer_eq exec_k_when_autoconstructing (boolean_and boolean_yank) (tagged_706) integer_dup_items in2) integer_empty exec_y_when_autoconstructing (boolean_flush integer_dec integer_add) integer_lt integer_max) boolean_pop) (boolean_shove boolean_shove integer_rot integer_add) boolean_rot integer_flush integer_sub boolean_pop integer_rot integer_yankdup integer_rot integer_yankdup exec_yankdup integer_dup integer_inc integer_stackdepth print_exec () boolean_rot integer_pop boolean_rot integer_div boolean_not exec_noop exec_do*times (boolean_yank) integer_pop print_newline integer_gte)
Errors: [0 1 0 0 0 1 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 80
Size: 97
Percent parens: 0.175
--- Population Statistics ---
Average total errors in population: 6.321
Median total errors in population: 6
Error averages by case: (0.058 0.798 0.263 0.758 0.756 0.798 0.629 0.876 0.756 0.629)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.67
Average program size in population (points): 72.367
Average percent parens in population: 0.230
Minimum age in population: 6.5
Maximum age in population: 11.28125
Average age in population: 9.51315625
Median age in population: 9.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 64
Genome diversity (% unique genomes):	 0.804
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 69
Syntactic diversity (% unique Push programs):	 0.786
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4773976
--- Timings ---
Current time: 1559584825445 milliseconds
Total Time:          21.9 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.1 seconds, 59.8%
Fitness Testing:      6.3 seconds, 28.9%
Report:               2.4 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 626
Test mean error for best: 0.62600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -82                 | Program output: -16                
Correct output: 63                  | Program output: 97                 
Correct output: -43                 | Program output: -12                
Correct output: -71                 | Program output: 65                 
Correct output: -7                  | Program output: 8                  
Correct output: -71                 | Program output: 14                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 81                 
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 22                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 96                 
Correct output: 51                  | Program output: 65                 
Correct output: 48                  | Program output: 48                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 79                 
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 40                  | Program output: 40                 
Correct output: 10                  | Program output: 21                 
Correct output: 3                   | Program output: 45                 
Correct output: 13                  | Program output: 72                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 43                 
Correct output: 32                  | Program output: 56                 
Correct output: 40                  | Program output: 76                 
Correct output: 13                  | Program output: 89                 
Correct output: 5                   | Program output: 60                 
Correct output: 9                   | Program output: 51                 
Correct output: 1                   | Program output: 60                 
Correct output: 45                  | Program output: 50                 
Correct output: -87                 | Program output: -46                
Correct output: -90                 | Program output: 20                 
Correct output: -62                 | Program output: 25                 
Correct output: -29                 | Program output: 85                 
Correct output: -18                 | Program output: -18                
Correct output: -55                 | Program output: 2                  
Correct output: -86                 | Program output: -10                
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -37                
Correct output: -61                 | Program output: -61                
Correct output: -81                 | Program output: -19                
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: -51                
Correct output: 3                   | Program output: 3                  
Correct output: -88                 | Program output: -9                 
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: 23                 
Correct output: -62                 | Program output: 77                 
Correct output: -77                 | Program output: 27                 
Correct output: -71                 | Program output: -50                
Correct output: -66                 | Program output: -66                
Correct output: -22                 | Program output: 77                 
Correct output: -51                 | Program output: 46                 
Correct output: 4                   | Program output: 24                 
Correct output: -49                 | Program output: -7                 
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: 76                 
Correct output: -86                 | Program output: -68                
Correct output: -61                 | Program output: -48                
Correct output: -92                 | Program output: 12                 
Correct output: -57                 | Program output: -5                 
Correct output: -100                | Program output: 15                 
Correct output: -85                 | Program output: -60                
Correct output: -41                 | Program output: 31                 
Correct output: -42                 | Program output: -42                
Correct output: -42                 | Program output: 12                 
Correct output: -99                 | Program output: -30                
Correct output: -76                 | Program output: -31                
Correct output: -71                 | Program output: -53                
Correct output: -51                 | Program output: -51                
Correct output: 36                  | Program output: 36                 
Correct output: -78                 | Program output: -26                
Correct output: -87                 | Program output: 9                  
Correct output: -87                 | Program output: 93                 
Correct output: -44                 | Program output: 5                  
Correct output: -81                 | Program output: -14                
Correct output: 17                  | Program output: 65                 
Correct output: -62                 | Program output: -29                
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: 99                 
Correct output: -70                 | Program output: -56                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: 60                 
Correct output: -92                 | Program output: 30                 
Correct output: -77                 | Program output: 28                 
Correct output: -72                 | Program output: -72                
Correct output: -43                 | Program output: 34                 
Correct output: -63                 | Program output: -12                
Correct output: -76                 | Program output: 70                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Lexicase best program: (in3 integer_shove integer_gt in1 print_integer boolean_xor integer_stackdepth integer_fromboolean boolean_not exec_y (boolean_invert_second_then_and) integer_min exec_pop () exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div boolean_rot) (print_newline exec_s_when_autoconstructing (integer_eq boolean_pop boolean_yankdup in2 integer_div) (print_integer boolean_swap exec_shove (exec_flush) integer_pop boolean_stackdepth print_integer) ()) ()) ())
Lexicase best errors: [1 0 0 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 45
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Zero cases best program: (in3 integer_shove integer_gt in1 print_integer boolean_xor integer_stackdepth integer_fromboolean boolean_not exec_y (boolean_invert_second_then_and) integer_min exec_pop () exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div boolean_rot) (print_newline exec_s_when_autoconstructing (integer_eq boolean_pop boolean_yankdup in2 integer_div) (print_integer boolean_swap exec_shove (exec_flush) integer_pop boolean_stackdepth print_integer) ()) ()) ())
Zero cases best errors: [1 0 0 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 45
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (265 311 826 942 115 196 196 265 196 365)
Population mean number of elite cases: 3.68
Count of perfect (error zero) individuals by case: (265 311 826 942 115 196 196 265 196 365)
Population mean number of perfect (error zero) cases: 3.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction 75} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction tagged_706} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction print_exec} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction print_newline} {:close 1, :instruction integer_gte})
Best program: (in3 integer_shove integer_gt in1 print_integer boolean_xor integer_stackdepth integer_fromboolean boolean_not exec_y (boolean_invert_second_then_and) integer_min exec_pop () exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div boolean_rot) (print_newline exec_s_when_autoconstructing (integer_eq boolean_pop boolean_yankdup in2 integer_div) (print_integer boolean_swap exec_shove (exec_flush) integer_min boolean_stackdepth print_integer) (boolean_dup 75) integer_eq exec_k_when_autoconstructing (boolean_and boolean_yank) (tagged_706 integer_dup_items in2) integer_empty exec_y_when_autoconstructing (boolean_flush integer_dec print_exec ()) integer_lt integer_max) (boolean_pop boolean_shove boolean_shove integer_rot) integer_add) (boolean_rot integer_flush integer_sub boolean_pop) integer_rot boolean_frominteger exec_yankdup integer_dup integer_inc integer_stackdepth print_exec () boolean_rot integer_pop boolean_rot integer_div boolean_not exec_noop exec_do*times (boolean_yank) integer_pop print_newline integer_gte)
Errors: [1 0 0 0 1 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 76
Size: 94
Percent parens: 0.191
--- Population Statistics ---
Average total errors in population: 6.323
Median total errors in population: 7
Error averages by case: (0.735 0.689 0.174 0.058 0.885 0.804 0.804 0.735 0.804 0.635)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.082
Average program size in population (points): 71.46
Average percent parens in population: 0.228
Minimum age in population: 7.875
Maximum age in population: 12.96875
Average age in population: 11.014953125
Median age in population: 11.0625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 23
Genome diversity (% unique genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.835
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 5692187
--- Timings ---
Current time: 1559584829454 milliseconds
Total Time:          25.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.6 seconds, 60.3%
Fitness Testing:      7.3 seconds, 28.0%
Report:               2.9 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -82                 | Program output: -82                
Correct output: 63                  | Program output: 63                 
Correct output: -43                 | Program output: -12                
Correct output: -71                 | Program output: 65                 
Correct output: -7                  | Program output: 8                  
Correct output: -71                 | Program output: 14                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 81                 
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 23                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 86                 
Correct output: 51                  | Program output: 51                 
Correct output: 48                  | Program output: 58                 
Correct output: 2                   | Program output: 4                  
Correct output: 2                   | Program output: 86                 
Correct output: 12                  | Program output: 54                 
Correct output: 12                  | Program output: 93                 
Correct output: 40                  | Program output: 56                 
Correct output: 10                  | Program output: 45                 
Correct output: 3                   | Program output: 48                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 66                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 68                 
Correct output: 40                  | Program output: 40                 
Correct output: 13                  | Program output: 21                 
Correct output: 5                   | Program output: 5                  
Correct output: 9                   | Program output: 9                  
Correct output: 1                   | Program output: 64                 
Correct output: 45                  | Program output: 45                 
Correct output: -87                 | Program output: -7                 
Correct output: -90                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -29                 | Program output: -29                
Correct output: -18                 | Program output: 43                 
Correct output: -55                 | Program output: 39                 
Correct output: -86                 | Program output: -9                 
Correct output: -77                 | Program output: -4                 
Correct output: -95                 | Program output: -2                 
Correct output: -91                 | Program output: 98                 
Correct output: -61                 | Program output: 57                 
Correct output: -81                 | Program output: -81                
Correct output: -84                 | Program output: -58                
Correct output: -70                 | Program output: 65                 
Correct output: 3                   | Program output: 20                 
Correct output: -88                 | Program output: -54                
Correct output: -86                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -62                 | Program output: -62                
Correct output: -77                 | Program output: -27                
Correct output: -71                 | Program output: -62                
Correct output: -66                 | Program output: 58                 
Correct output: -22                 | Program output: 9                  
Correct output: -51                 | Program output: 15                 
Correct output: 4                   | Program output: 42                 
Correct output: -49                 | Program output: -49                
Correct output: -53                 | Program output: 92                 
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -26                
Correct output: -61                 | Program output: 5                  
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: 9                  
Correct output: -100                | Program output: -88                
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: 52                 
Correct output: -42                 | Program output: -35                
Correct output: -42                 | Program output: 50                 
Correct output: -99                 | Program output: -92                
Correct output: -76                 | Program output: 56                 
Correct output: -71                 | Program output: -61                
Correct output: -51                 | Program output: 86                 
Correct output: 36                  | Program output: 67                 
Correct output: -78                 | Program output: -34                
Correct output: -87                 | Program output: -9                 
Correct output: -87                 | Program output: -49                
Correct output: -44                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: 17                  | Program output: 75                 
Correct output: -62                 | Program output: 96                 
Correct output: -65                 | Program output: -16                
Correct output: -25                 | Program output: 21                 
Correct output: -70                 | Program output: -70                
Correct output: -70                 | Program output: 7                  
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -47                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: -52                
Correct output: -43                 | Program output: -43                
Correct output: -63                 | Program output: 3                  
Correct output: -76                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq})
Lexicase best program: (in3 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth integer_fromboolean boolean_not exec_y (boolean_invert_second_then_and) integer_min exec_pop () exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div boolean_rot) (exec_yankdup) (integer_dup_items print_newline exec_s_when_autoconstructing (integer_eq) () ())) ())
Lexicase best errors: [1 0 1 0 1 0 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 35
Percent parens: 0.314
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq})
Zero cases best program: (in3 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth integer_fromboolean boolean_not exec_y (boolean_invert_second_then_and) integer_min exec_pop () exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div boolean_rot) (exec_yankdup) (integer_dup_items print_newline exec_s_when_autoconstructing (integer_eq) () ())) ())
Zero cases best errors: [1 0 1 0 1 0 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 35
Percent parens: 0.314
--- Lexicase Population Statistics ---
Count of elite individuals by case: (259 122 122 926 257 123 122 123 423 259)
Population mean number of elite cases: 2.74
Count of perfect (error zero) individuals by case: (259 122 122 926 257 123 122 123 423 259)
Population mean number of perfect (error zero) cases: 2.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 0, :instruction tagged_706} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_649} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_not})
Best program: (in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth integer_fromboolean boolean_not exec_y (boolean_invert_second_then_and) integer_min exec_pop () exec_if (boolean_pop boolean_yankdup in2 integer_div) (print_integer in2 integer_div) print_integer boolean_swap exec_shove (exec_flush) integer_pop boolean_stackdepth print_integer integer_dup_times tagged_706 integer_dup_items in2 integer_empty exec_y_when_autoconstructing (integer_mod) exec_do*count (exec_while (boolean_flush integer_eq tagged_649 boolean_shove boolean_shove integer_rot integer_add) boolean_rot integer_flush integer_sub boolean_pop) integer_rot integer_yankdup exec_yankdup integer_dup integer_inc integer_stackdepth print_exec () boolean_shove integer_pop boolean_rot integer_div boolean_not)
Errors: [0 1 1 0 0 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 60
Size: 70
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 7.264
Median total errors in population: 7
Error averages by case: (0.741 0.878 0.878 0.074 0.743 0.877 0.878 0.877 0.577 0.741)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.026
Average program size in population (points): 71.35
Average percent parens in population: 0.228
Minimum age in population: 9.5
Maximum age in population: 14.3984375
Average age in population: 12.572171875
Median age in population: 12.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 18
Genome diversity (% unique genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.838
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 6604387
--- Timings ---
Current time: 1559584833351 milliseconds
Total Time:          29.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.0 seconds, 60.4%
Fitness Testing:      8.2 seconds, 27.4%
Report:               3.5 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -82                 | Program output: -16                
Correct output: 63                  | Program output: 63                 
Correct output: -43                 | Program output: -43                
Correct output: -71                 | Program output: 65                 
Correct output: -7                  | Program output: 8                  
Correct output: -71                 | Program output: 14                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 81                 
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 23                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 78                 
Correct output: 51                  | Program output: 74                 
Correct output: 48                  | Program output: 56                 
Correct output: 2                   | Program output: 46                 
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output: 46                 
Correct output: 12                  | Program output: 92                 
Correct output: 40                  | Program output: 65                 
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 19                 
Correct output: 13                  | Program output: 68                 
Correct output: 7                   | Program output: 20                 
Correct output: 4                   | Program output: 94                 
Correct output: 32                  | Program output: 41                 
Correct output: 40                  | Program output: 90                 
Correct output: 13                  | Program output: 20                 
Correct output: 5                   | Program output: 68                 
Correct output: 9                   | Program output: 19                 
Correct output: 1                   | Program output: 53                 
Correct output: 45                  | Program output: 73                 
Correct output: -87                 | Program output: -41                
Correct output: -90                 | Program output: 10                 
Correct output: -62                 | Program output: -26                
Correct output: -29                 | Program output: 62                 
Correct output: -18                 | Program output: 47                 
Correct output: -55                 | Program output: 92                 
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: 10                 
Correct output: -95                 | Program output: -93                
Correct output: -91                 | Program output: 66                 
Correct output: -61                 | Program output: 93                 
Correct output: -81                 | Program output: -13                
Correct output: -84                 | Program output: -79                
Correct output: -70                 | Program output: 81                 
Correct output: 3                   | Program output: 57                 
Correct output: -88                 | Program output: -27                
Correct output: -86                 | Program output: 85                 
Correct output: -51                 | Program output: 92                 
Correct output: -62                 | Program output: 66                 
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: 73                 
Correct output: -66                 | Program output: 88                 
Correct output: -22                 | Program output: 16                 
Correct output: -51                 | Program output: -51                
Correct output: 4                   | Program output: 4                  
Correct output: -49                 | Program output: -7                 
Correct output: -53                 | Program output: -23                
Correct output: -71                 | Program output: 99                 
Correct output: -86                 | Program output: 18                 
Correct output: -61                 | Program output: 76                 
Correct output: -92                 | Program output: 48                 
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -3                 
Correct output: -41                 | Program output: 50                 
Correct output: -42                 | Program output: -16                
Correct output: -42                 | Program output: -42                
Correct output: -99                 | Program output: -66                
Correct output: -76                 | Program output: -76                
Correct output: -71                 | Program output: 15                 
Correct output: -51                 | Program output: 88                 
Correct output: 36                  | Program output: 55                 
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -87                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: 54                 
Correct output: -81                 | Program output: -10                
Correct output: 17                  | Program output: 38                 
Correct output: -62                 | Program output: 75                 
Correct output: -65                 | Program output: 94                 
Correct output: -25                 | Program output: 17                 
Correct output: -70                 | Program output: 27                 
Correct output: -70                 | Program output: -41                
Correct output: -97                 | Program output: 84                 
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: 40                 
Correct output: -72                 | Program output: -65                
Correct output: -43                 | Program output: 31                 
Correct output: -63                 | Program output: -63                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction tagged_706} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_137} {:close 1, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_add} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction print_newline} {:close 0, :instruction integer_gte})
Lexicase best program: (in3 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth integer_fromboolean boolean_not exec_y (boolean_invert_second_then_and) integer_min exec_pop () exec_if (integer_inc exec_s_when_autoconstructing (integer_lt integer_div boolean_rot) (exec_yankdup) (integer_dup_items exec_empty exec_s_when_autoconstructing (integer_eq boolean_pop boolean_yankdup in2 integer_div) (print_integer boolean_swap exec_shove (exec_flush) integer_pop boolean_stackdepth boolean_and boolean_yank) (tagged_706 integer_dup_items in2) integer_empty exec_y_when_autoconstructing (boolean_flush integer_dec boolean_invert_second_then_and)) tagged_137 integer_max) (in2 boolean_shove print_exec (integer_rot integer_add) integer_yankdup exec_yankdup integer_dup integer_inc integer_stackdepth print_exec () boolean_rot integer_pop boolean_rot integer_div boolean_not) exec_noop exec_do*times (boolean_yank) integer_pop print_newline integer_gte)
Lexicase best errors: [0 1 1 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 84
Percent parens: 0.190
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction tagged_706} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_137} {:close 1, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_add} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction print_newline} {:close 0, :instruction integer_gte})
Zero cases best program: (in3 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth integer_fromboolean boolean_not exec_y (boolean_invert_second_then_and) integer_min exec_pop () exec_if (integer_inc exec_s_when_autoconstructing (integer_lt integer_div boolean_rot) (exec_yankdup) (integer_dup_items exec_empty exec_s_when_autoconstructing (integer_eq boolean_pop boolean_yankdup in2 integer_div) (print_integer boolean_swap exec_shove (exec_flush) integer_pop boolean_stackdepth boolean_and boolean_yank) (tagged_706 integer_dup_items in2) integer_empty exec_y_when_autoconstructing (boolean_flush integer_dec boolean_invert_second_then_and)) tagged_137 integer_max) (in2 boolean_shove print_exec (integer_rot integer_add) integer_yankdup exec_yankdup integer_dup integer_inc integer_stackdepth print_exec () boolean_rot integer_pop boolean_rot integer_div boolean_not) exec_noop exec_do*times (boolean_yank) integer_pop print_newline integer_gte)
Zero cases best errors: [0 1 1 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 84
Percent parens: 0.190
--- Lexicase Population Statistics ---
Count of elite individuals by case: (316 303 303 942 100 316 303 100 316 316)
Population mean number of elite cases: 3.32
Count of perfect (error zero) individuals by case: (316 303 303 942 100 316 303 100 316 316)
Population mean number of perfect (error zero) cases: 3.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Best program: (in3 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth integer_fromboolean boolean_not exec_y (boolean_invert_second_then_and) integer_min exec_pop () exec_if (integer_inc exec_s_when_autoconstructing (exec_pop (integer_eq boolean_rot) exec_yankdup) (integer_dup_items print_newline exec_s_when_autoconstructing (integer_eq boolean_pop boolean_yankdup in2 integer_div) (print_integer boolean_swap exec_shove (exec_flush) integer_pop boolean_stackdepth print_integer) ()) ()) ())
Errors: [0 1 1 0 1 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 35
Size: 48
Percent parens: 0.271
--- Population Statistics ---
Average total errors in population: 6.685
Median total errors in population: 6
Error averages by case: (0.684 0.697 0.697 0.058 0.9 0.684 0.697 0.9 0.684 0.684)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.852
Average program size in population (points): 64.305
Average percent parens in population: 0.241
Minimum age in population: 10.875
Maximum age in population: 15.97265625
Average age in population: 14.01336328125
Median age in population: 14.10546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 21
Genome diversity (% unique genomes):	 0.795
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.787
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 7464481
--- Timings ---
Current time: 1559584837078 milliseconds
Total Time:          33.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.3 seconds, 60.5%
Fitness Testing:      9.0 seconds, 26.9%
Report:               4.1 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 626
Test mean error for best: 0.62600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -82                 | Program output: -16                
Correct output: 63                  | Program output: 97                 
Correct output: -43                 | Program output: -12                
Correct output: -71                 | Program output: 65                 
Correct output: -7                  | Program output: 8                  
Correct output: -71                 | Program output: 14                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 81                 
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 22                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 96                 
Correct output: 51                  | Program output: 65                 
Correct output: 48                  | Program output: 48                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 79                 
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 40                  | Program output: 40                 
Correct output: 10                  | Program output: 21                 
Correct output: 3                   | Program output: 45                 
Correct output: 13                  | Program output: 72                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 43                 
Correct output: 32                  | Program output: 56                 
Correct output: 40                  | Program output: 76                 
Correct output: 13                  | Program output: 89                 
Correct output: 5                   | Program output: 60                 
Correct output: 9                   | Program output: 51                 
Correct output: 1                   | Program output: 60                 
Correct output: 45                  | Program output: 50                 
Correct output: -87                 | Program output: -46                
Correct output: -90                 | Program output: 20                 
Correct output: -62                 | Program output: 25                 
Correct output: -29                 | Program output: 85                 
Correct output: -18                 | Program output: -18                
Correct output: -55                 | Program output: 2                  
Correct output: -86                 | Program output: -10                
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -37                
Correct output: -61                 | Program output: -61                
Correct output: -81                 | Program output: -19                
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: -51                
Correct output: 3                   | Program output: 3                  
Correct output: -88                 | Program output: -9                 
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: 23                 
Correct output: -62                 | Program output: 77                 
Correct output: -77                 | Program output: 27                 
Correct output: -71                 | Program output: -50                
Correct output: -66                 | Program output: -66                
Correct output: -22                 | Program output: 77                 
Correct output: -51                 | Program output: 46                 
Correct output: 4                   | Program output: 24                 
Correct output: -49                 | Program output: -7                 
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: 76                 
Correct output: -86                 | Program output: -68                
Correct output: -61                 | Program output: -48                
Correct output: -92                 | Program output: 12                 
Correct output: -57                 | Program output: -5                 
Correct output: -100                | Program output: 15                 
Correct output: -85                 | Program output: -60                
Correct output: -41                 | Program output: 31                 
Correct output: -42                 | Program output: -42                
Correct output: -42                 | Program output: 12                 
Correct output: -99                 | Program output: -30                
Correct output: -76                 | Program output: -31                
Correct output: -71                 | Program output: -53                
Correct output: -51                 | Program output: -51                
Correct output: 36                  | Program output: 36                 
Correct output: -78                 | Program output: -26                
Correct output: -87                 | Program output: 9                  
Correct output: -87                 | Program output: 93                 
Correct output: -44                 | Program output: 5                  
Correct output: -81                 | Program output: -14                
Correct output: 17                  | Program output: 65                 
Correct output: -62                 | Program output: -29                
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: 99                 
Correct output: -70                 | Program output: -56                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: 60                 
Correct output: -92                 | Program output: 30                 
Correct output: -77                 | Program output: 28                 
Correct output: -72                 | Program output: -72                
Correct output: -43                 | Program output: 34                 
Correct output: -63                 | Program output: -12                
Correct output: -76                 | Program output: 70                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction 75} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction tagged_706} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup})
Lexicase best program: (in3 integer_shove integer_gt in1 print_integer boolean_xor integer_stackdepth integer_fromboolean boolean_not exec_y (boolean_invert_second_then_and) integer_min exec_pop () exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div boolean_rot) (print_newline exec_s_when_autoconstructing (integer_eq boolean_pop boolean_yankdup in2 integer_div) (print_integer boolean_swap exec_shove (exec_flush) integer_pop boolean_flush print_integer) (boolean_dup 75) integer_eq exec_k_when_autoconstructing (boolean_and boolean_yank) (tagged_706 integer_dup_items in2) integer_empty exec_y_when_autoconstructing (boolean_flush integer_dec boolean_invert_second_then_and)) (integer_lt integer_max) boolean_pop boolean_shove boolean_shove integer_rot) (integer_add) boolean_rot integer_flush integer_sub boolean_pop integer_rot integer_yankdup exec_yankdup)
Lexicase best errors: [1 1 0 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 76
Percent parens: 0.197
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction 75} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction tagged_706} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup})
Zero cases best program: (in3 integer_shove integer_gt in1 print_integer boolean_xor integer_stackdepth integer_fromboolean boolean_not exec_y (boolean_invert_second_then_and) integer_min exec_pop () exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div boolean_rot) (print_newline exec_s_when_autoconstructing (integer_eq boolean_pop boolean_yankdup in2 integer_div) (print_integer boolean_swap exec_shove (exec_flush) integer_pop boolean_flush print_integer) (boolean_dup 75) integer_eq exec_k_when_autoconstructing (boolean_and boolean_yank) (tagged_706 integer_dup_items in2) integer_empty exec_y_when_autoconstructing (boolean_flush integer_dec boolean_invert_second_then_and)) (integer_lt integer_max) boolean_pop boolean_shove boolean_shove integer_rot) (integer_add) boolean_rot integer_flush integer_sub boolean_pop integer_rot integer_yankdup exec_yankdup)
Zero cases best errors: [1 1 0 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 76
Percent parens: 0.197
--- Lexicase Population Statistics ---
Count of elite individuals by case: (411 411 196 196 924 923 317 195 196 411)
Population mean number of elite cases: 4.18
Count of perfect (error zero) individuals by case: (411 411 196 196 924 923 317 195 196 411)
Population mean number of perfect (error zero) cases: 4.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot})
Best program: (in3 integer_shove integer_gt in1 print_integer boolean_xor integer_stackdepth integer_fromboolean boolean_not exec_y (boolean_invert_second_then_and) integer_min exec_pop () exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty exec_y (boolean_rot) print_newline exec_s_when_autoconstructing (integer_eq boolean_pop boolean_yankdup in2 boolean_and exec_swap (boolean_flush integer_shove exec_y (in4 integer_dup boolean_dup_times integer_gte in2 exec_s_when_autoconstructing (boolean_yankdup integer_rot) () ())) ()) () ()) () ()) ())
Errors: [1 1 0 0 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 38
Size: 56
Percent parens: 0.321
--- Population Statistics ---
Average total errors in population: 5.82
Median total errors in population: 5
Error averages by case: (0.589 0.589 0.804 0.804 0.076 0.077 0.683 0.805 0.804 0.589)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.92
Average program size in population (points): 70.168
Average percent parens in population: 0.225
Minimum age in population: 12.71875
Maximum age in population: 17.44140625
Average age in population: 15.52690625
Median age in population: 15.5986328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.865
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.852
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 8481281
--- Timings ---
Current time: 1559584841171 milliseconds
Total Time:          37.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.8 seconds, 60.7%
Fitness Testing:     10.0 seconds, 26.6%
Report:               4.7 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -82                 | Program output: -16                
Correct output: 63                  | Program output: 63                 
Correct output: -43                 | Program output: -43                
Correct output: -71                 | Program output: 65                 
Correct output: -7                  | Program output: 8                  
Correct output: -71                 | Program output: 14                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 81                 
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 23                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 78                 
Correct output: 51                  | Program output: 74                 
Correct output: 48                  | Program output: 56                 
Correct output: 2                   | Program output: 46                 
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output: 46                 
Correct output: 12                  | Program output: 92                 
Correct output: 40                  | Program output: 65                 
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 19                 
Correct output: 13                  | Program output: 68                 
Correct output: 7                   | Program output: 20                 
Correct output: 4                   | Program output: 94                 
Correct output: 32                  | Program output: 41                 
Correct output: 40                  | Program output: 90                 
Correct output: 13                  | Program output: 20                 
Correct output: 5                   | Program output: 68                 
Correct output: 9                   | Program output: 19                 
Correct output: 1                   | Program output: 53                 
Correct output: 45                  | Program output: 73                 
Correct output: -87                 | Program output: -41                
Correct output: -90                 | Program output: 10                 
Correct output: -62                 | Program output: -26                
Correct output: -29                 | Program output: 62                 
Correct output: -18                 | Program output: 47                 
Correct output: -55                 | Program output: 92                 
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: 10                 
Correct output: -95                 | Program output: -93                
Correct output: -91                 | Program output: 66                 
Correct output: -61                 | Program output: 93                 
Correct output: -81                 | Program output: -13                
Correct output: -84                 | Program output: -79                
Correct output: -70                 | Program output: 81                 
Correct output: 3                   | Program output: 57                 
Correct output: -88                 | Program output: -27                
Correct output: -86                 | Program output: 85                 
Correct output: -51                 | Program output: 92                 
Correct output: -62                 | Program output: 66                 
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: 73                 
Correct output: -66                 | Program output: 88                 
Correct output: -22                 | Program output: 16                 
Correct output: -51                 | Program output: -51                
Correct output: 4                   | Program output: 4                  
Correct output: -49                 | Program output: -7                 
Correct output: -53                 | Program output: -23                
Correct output: -71                 | Program output: 99                 
Correct output: -86                 | Program output: 18                 
Correct output: -61                 | Program output: 76                 
Correct output: -92                 | Program output: 48                 
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -3                 
Correct output: -41                 | Program output: 50                 
Correct output: -42                 | Program output: -16                
Correct output: -42                 | Program output: -42                
Correct output: -99                 | Program output: -66                
Correct output: -76                 | Program output: -76                
Correct output: -71                 | Program output: 15                 
Correct output: -51                 | Program output: 88                 
Correct output: 36                  | Program output: 55                 
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -87                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: 54                 
Correct output: -81                 | Program output: -10                
Correct output: 17                  | Program output: 38                 
Correct output: -62                 | Program output: 75                 
Correct output: -65                 | Program output: 94                 
Correct output: -25                 | Program output: 17                 
Correct output: -70                 | Program output: 27                 
Correct output: -70                 | Program output: -41                
Correct output: -97                 | Program output: 84                 
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: 40                 
Correct output: -72                 | Program output: -65                
Correct output: -43                 | Program output: 31                 
Correct output: -63                 | Program output: -63                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer})
Lexicase best program: (in3 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth integer_fromboolean boolean_not exec_y (boolean_invert_second_then_and) integer_min exec_pop () exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div boolean_rot) (exec_yankdup integer_dup_items print_newline integer_dec integer_eq boolean_pop boolean_yankdup in2 integer_div print_integer) ()) ())
Lexicase best errors: [1 1 1 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 37
Percent parens: 0.216
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer})
Zero cases best program: (in3 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth integer_fromboolean boolean_not exec_y (boolean_invert_second_then_and) integer_min exec_pop () exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div boolean_rot) (exec_yankdup integer_dup_items print_newline integer_dec integer_eq boolean_pop boolean_yankdup in2 integer_div print_integer) ()) ())
Zero cases best errors: [1 1 1 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 37
Percent parens: 0.216
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 110 483 351 109 484 352 352 352)
Population mean number of elite cases: 4.59
Count of perfect (error zero) individuals by case: (0 0 110 483 351 109 484 352 352 352)
Population mean number of perfect (error zero) cases: 2.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div})
Best program: (in3 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth integer_fromboolean boolean_not exec_y (boolean_invert_second_then_and) integer_min exec_pop () exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div) () ()) ())
Errors: [1 1 1 1 0 1 1 0 0 0]
Total: 6
Mean: 0.6
Genome size: 18
Size: 26
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 7.407
Median total errors in population: 8
Error averages by case: (1.0 1.0 0.89 0.517 0.649 0.891 0.516 0.648 0.648 0.648)
Error minima by case: (1 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.97
Average program size in population (points): 70.312
Average percent parens in population: 0.227
Minimum age in population: 14.1875
Maximum age in population: 19.025390625
Average age in population: 16.9740595703125
Median age in population: 17.04052734375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.837
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.828
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 9498405
--- Timings ---
Current time: 1559584845178 milliseconds
Total Time:          41.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.3 seconds, 60.7%
Fitness Testing:     11.0 seconds, 26.5%
Report:               5.3 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -82                 | Program output: -82                
Correct output: 63                  | Program output: 63                 
Correct output: -43                 | Program output: -12                
Correct output: -71                 | Program output: 65                 
Correct output: -7                  | Program output: 8                  
Correct output: -71                 | Program output: 14                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 81                 
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 23                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 86                 
Correct output: 51                  | Program output: 51                 
Correct output: 48                  | Program output: 58                 
Correct output: 2                   | Program output: 4                  
Correct output: 2                   | Program output: 86                 
Correct output: 12                  | Program output: 54                 
Correct output: 12                  | Program output: 93                 
Correct output: 40                  | Program output: 56                 
Correct output: 10                  | Program output: 45                 
Correct output: 3                   | Program output: 48                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 66                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 68                 
Correct output: 40                  | Program output: 40                 
Correct output: 13                  | Program output: 21                 
Correct output: 5                   | Program output: 5                  
Correct output: 9                   | Program output: 9                  
Correct output: 1                   | Program output: 64                 
Correct output: 45                  | Program output: 45                 
Correct output: -87                 | Program output: -7                 
Correct output: -90                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -29                 | Program output: -29                
Correct output: -18                 | Program output: 43                 
Correct output: -55                 | Program output: 39                 
Correct output: -86                 | Program output: -9                 
Correct output: -77                 | Program output: -4                 
Correct output: -95                 | Program output: -2                 
Correct output: -91                 | Program output: 98                 
Correct output: -61                 | Program output: 57                 
Correct output: -81                 | Program output: -81                
Correct output: -84                 | Program output: -58                
Correct output: -70                 | Program output: 65                 
Correct output: 3                   | Program output: 20                 
Correct output: -88                 | Program output: -54                
Correct output: -86                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -62                 | Program output: -62                
Correct output: -77                 | Program output: -27                
Correct output: -71                 | Program output: -62                
Correct output: -66                 | Program output: 58                 
Correct output: -22                 | Program output: 9                  
Correct output: -51                 | Program output: 15                 
Correct output: 4                   | Program output: 42                 
Correct output: -49                 | Program output: -49                
Correct output: -53                 | Program output: 92                 
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -26                
Correct output: -61                 | Program output: 5                  
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: 9                  
Correct output: -100                | Program output: -88                
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: 52                 
Correct output: -42                 | Program output: -35                
Correct output: -42                 | Program output: 50                 
Correct output: -99                 | Program output: -92                
Correct output: -76                 | Program output: 56                 
Correct output: -71                 | Program output: -61                
Correct output: -51                 | Program output: 86                 
Correct output: 36                  | Program output: 67                 
Correct output: -78                 | Program output: -34                
Correct output: -87                 | Program output: -9                 
Correct output: -87                 | Program output: -49                
Correct output: -44                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: 17                  | Program output: 75                 
Correct output: -62                 | Program output: 96                 
Correct output: -65                 | Program output: -16                
Correct output: -25                 | Program output: 21                 
Correct output: -70                 | Program output: -70                
Correct output: -70                 | Program output: 7                  
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -47                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: -52                
Correct output: -43                 | Program output: -43                
Correct output: -63                 | Program output: 3                  
Correct output: -76                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_max})
Lexicase best program: (in4 integer_shove integer_gt boolean_swap print_integer boolean_xor exec_do*count (integer_lt exec_empty exec_do*times () integer_lt integer_max))
Lexicase best errors: [1 1 1 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 15
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_max})
Zero cases best program: (in4 integer_shove integer_gt boolean_swap print_integer boolean_xor exec_do*count (integer_lt exec_empty exec_do*times () integer_lt integer_max))
Zero cases best errors: [1 1 1 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 15
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 1000 238 246 238 246 246 238 246)
Population mean number of elite cases: 4.70
Count of perfect (error zero) individuals by case: (0 0 0 238 246 238 246 246 238 246)
Population mean number of perfect (error zero) cases: 1.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_add} {:close 1, :instruction integer_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 0, :instruction -68} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction boolean_pop} {:close 1, :instruction exec_empty} {:close 2, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 2, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 1, :instruction print_newline} {:close 0, :instruction integer_gte})
Best program: (in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth integer_fromboolean boolean_not exec_y (boolean_invert_second_then_and) integer_min exec_pop () integer_yank integer_inc exec_s_when_autoconstructing (boolean_empty integer_div boolean_rot) (exec_yankdup) (integer_dup_times) integer_add integer_pop print_exec (integer_max exec_do*times (exec_eq in2 exec_rot () (exec_shove () exec_dup (exec_k (exec_do*times (boolean_invert_second_then_and integer_lt integer_gte print_boolean -68 boolean_invert_second_then_and boolean_pop)) (exec_empty) exec_dup ()) integer_mult boolean_yankdup boolean_flush integer_dec boolean_invert_second_then_and) () integer_lt integer_empty exec_y_when_autoconstructing (boolean_flush integer_dec boolean_invert_second_then_and)) integer_lt integer_max) boolean_pop boolean_shove boolean_shove integer_rot integer_add boolean_rot integer_flush integer_sub boolean_pop integer_rot integer_yankdup exec_yankdup integer_dup integer_inc integer_stackdepth print_exec () boolean_rot integer_pop boolean_rot integer_div boolean_not exec_noop integer_lt boolean_yank integer_mult print_newline integer_gte)
Errors: [1 1 1 1 0 1 0 0 1 0]
Total: 6
Mean: 0.6
Genome size: 82
Size: 101
Percent parens: 0.188
--- Population Statistics ---
Average total errors in population: 8.302
Median total errors in population: 10
Error averages by case: (1.0 1.0 1.0 0.762 0.754 0.762 0.754 0.754 0.762 0.754)
Error minima by case: (1 1 1 0 0 0 0 0 0 0)
Average genome size in population (length): 52.287
Average program size in population (points): 67.213
Average percent parens in population: 0.228
Minimum age in population: 15.83203125
Maximum age in population: 20.67822265625
Average age in population: 18.46060498046875
Median age in population: 18.4970703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.845
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.835
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 10509452
--- Timings ---
Current time: 1559584848805 milliseconds
Total Time:          45.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.3 seconds, 60.4%
Fitness Testing:     12.0 seconds, 26.5%
Report:               5.8 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 626
Test mean error for best: 0.62600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -82                 | Program output: -16                
Correct output: 63                  | Program output: 97                 
Correct output: -43                 | Program output: -12                
Correct output: -71                 | Program output: 65                 
Correct output: -7                  | Program output: 8                  
Correct output: -71                 | Program output: 14                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 81                 
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 22                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 96                 
Correct output: 51                  | Program output: 65                 
Correct output: 48                  | Program output: 48                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 79                 
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 40                  | Program output: 40                 
Correct output: 10                  | Program output: 21                 
Correct output: 3                   | Program output: 45                 
Correct output: 13                  | Program output: 72                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 43                 
Correct output: 32                  | Program output: 56                 
Correct output: 40                  | Program output: 76                 
Correct output: 13                  | Program output: 89                 
Correct output: 5                   | Program output: 60                 
Correct output: 9                   | Program output: 51                 
Correct output: 1                   | Program output: 60                 
Correct output: 45                  | Program output: 50                 
Correct output: -87                 | Program output: -46                
Correct output: -90                 | Program output: 20                 
Correct output: -62                 | Program output: 25                 
Correct output: -29                 | Program output: 85                 
Correct output: -18                 | Program output: -18                
Correct output: -55                 | Program output: 2                  
Correct output: -86                 | Program output: -10                
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -37                
Correct output: -61                 | Program output: -61                
Correct output: -81                 | Program output: -19                
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: -51                
Correct output: 3                   | Program output: 3                  
Correct output: -88                 | Program output: -9                 
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: 23                 
Correct output: -62                 | Program output: 77                 
Correct output: -77                 | Program output: 27                 
Correct output: -71                 | Program output: -50                
Correct output: -66                 | Program output: -66                
Correct output: -22                 | Program output: 77                 
Correct output: -51                 | Program output: 46                 
Correct output: 4                   | Program output: 24                 
Correct output: -49                 | Program output: -7                 
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: 76                 
Correct output: -86                 | Program output: -68                
Correct output: -61                 | Program output: -48                
Correct output: -92                 | Program output: 12                 
Correct output: -57                 | Program output: -5                 
Correct output: -100                | Program output: 15                 
Correct output: -85                 | Program output: -60                
Correct output: -41                 | Program output: 31                 
Correct output: -42                 | Program output: -42                
Correct output: -42                 | Program output: 12                 
Correct output: -99                 | Program output: -30                
Correct output: -76                 | Program output: -31                
Correct output: -71                 | Program output: -53                
Correct output: -51                 | Program output: -51                
Correct output: 36                  | Program output: 36                 
Correct output: -78                 | Program output: -26                
Correct output: -87                 | Program output: 9                  
Correct output: -87                 | Program output: 93                 
Correct output: -44                 | Program output: 5                  
Correct output: -81                 | Program output: -14                
Correct output: 17                  | Program output: 65                 
Correct output: -62                 | Program output: -29                
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: 99                 
Correct output: -70                 | Program output: -56                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: 60                 
Correct output: -92                 | Program output: 30                 
Correct output: -77                 | Program output: 28                 
Correct output: -72                 | Program output: -72                
Correct output: -43                 | Program output: 34                 
Correct output: -63                 | Program output: -12                
Correct output: -76                 | Program output: 70                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div})
Lexicase best program: (in3 integer_shove integer_gt in1 print_integer boolean_xor integer_stackdepth integer_fromboolean boolean_not exec_y (boolean_invert_second_then_and) boolean_shove boolean_invert_second_then_and exec_if (integer_inc exec_do*count (boolean_empty integer_div)) ())
Lexicase best errors: [0 0 1 1 1 0 1 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 23
Percent parens: 0.217
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div})
Zero cases best program: (in3 integer_shove integer_gt in1 print_integer boolean_xor integer_stackdepth integer_fromboolean boolean_not exec_y (boolean_invert_second_then_and) boolean_shove boolean_invert_second_then_and exec_if (integer_inc exec_do*count (boolean_empty integer_div)) ())
Zero cases best errors: [0 0 1 1 1 0 1 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 23
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (398 398 1000 3 3 398 1000 398 1000 3)
Population mean number of elite cases: 4.60
Count of perfect (error zero) individuals by case: (398 398 0 3 3 398 0 398 0 3)
Population mean number of perfect (error zero) cases: 1.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 1, :instruction 75} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction tagged_706} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction print_newline} {:close 1, :instruction integer_rot})
Best program: (in3 integer_shove integer_gt in1 print_integer boolean_xor print_boolean integer_fromboolean boolean_not exec_y (boolean_invert_second_then_and) integer_min exec_pop () exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div boolean_rot) (print_newline exec_s_when_autoconstructing (integer_eq boolean_pop boolean_yankdup in2 integer_div) (print_integer boolean_swap exec_shove (exec_flush) integer_pop boolean_stackdepth print_integer) (integer_dup 75) integer_eq exec_k_when_autoconstructing (boolean_and boolean_yank) (tagged_706 integer_dup_items in2) integer_empty exec_y_when_autoconstructing (boolean_flush integer_dec boolean_invert_second_then_and)) (integer_lt integer_max) boolean_pop boolean_shove boolean_shove integer_rot) (integer_add) boolean_rot integer_flush integer_sub boolean_pop integer_rot integer_yankdup exec_yankdup integer_dup integer_inc integer_stackdepth print_exec () exec_do*times (integer_pop boolean_rot integer_div boolean_not exec_noop exec_do*times (boolean_yank) integer_pop print_newline) integer_rot)
Errors: [0 0 1 1 1 0 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 76
Size: 94
Percent parens: 0.191
--- Population Statistics ---
Average total errors in population: 8.399
Median total errors in population: 10
Error averages by case: (0.602 0.602 1.0 0.997 0.997 0.602 1.0 0.602 1.0 0.997)
Error minima by case: (0 0 1 0 0 0 1 0 1 0)
Average genome size in population (length): 50.724
Average program size in population (points): 65.63
Average percent parens in population: 0.232
Minimum age in population: 16.83203125
Maximum age in population: 22.109619140625
Average age in population: 19.97847631835938
Median age in population: 20.0570068359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 20
Genome diversity (% unique genomes):	 0.777
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.765
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 11533785
--- Timings ---
Current time: 1559584852260 milliseconds
Total Time:          48.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.2 seconds, 59.9%
Fitness Testing:     13.0 seconds, 26.7%
Report:               6.4 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -82                 | Program output: -82                
Correct output: 63                  | Program output: 63                 
Correct output: -43                 | Program output: -12                
Correct output: -71                 | Program output: 65                 
Correct output: -7                  | Program output: 8                  
Correct output: -71                 | Program output: 14                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 81                 
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 23                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 86                 
Correct output: 51                  | Program output: 51                 
Correct output: 48                  | Program output: 58                 
Correct output: 2                   | Program output: 4                  
Correct output: 2                   | Program output: 86                 
Correct output: 12                  | Program output: 54                 
Correct output: 12                  | Program output: 93                 
Correct output: 40                  | Program output: 56                 
Correct output: 10                  | Program output: 45                 
Correct output: 3                   | Program output: 48                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 66                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 68                 
Correct output: 40                  | Program output: 40                 
Correct output: 13                  | Program output: 21                 
Correct output: 5                   | Program output: 5                  
Correct output: 9                   | Program output: 9                  
Correct output: 1                   | Program output: 64                 
Correct output: 45                  | Program output: 45                 
Correct output: -87                 | Program output: -7                 
Correct output: -90                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -29                 | Program output: -29                
Correct output: -18                 | Program output: 43                 
Correct output: -55                 | Program output: 39                 
Correct output: -86                 | Program output: -9                 
Correct output: -77                 | Program output: -4                 
Correct output: -95                 | Program output: -2                 
Correct output: -91                 | Program output: 98                 
Correct output: -61                 | Program output: 57                 
Correct output: -81                 | Program output: -81                
Correct output: -84                 | Program output: -58                
Correct output: -70                 | Program output: 65                 
Correct output: 3                   | Program output: 20                 
Correct output: -88                 | Program output: -54                
Correct output: -86                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -62                 | Program output: -62                
Correct output: -77                 | Program output: -27                
Correct output: -71                 | Program output: -62                
Correct output: -66                 | Program output: 58                 
Correct output: -22                 | Program output: 9                  
Correct output: -51                 | Program output: 15                 
Correct output: 4                   | Program output: 42                 
Correct output: -49                 | Program output: -49                
Correct output: -53                 | Program output: 92                 
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -26                
Correct output: -61                 | Program output: 5                  
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: 9                  
Correct output: -100                | Program output: -88                
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: 52                 
Correct output: -42                 | Program output: -35                
Correct output: -42                 | Program output: 50                 
Correct output: -99                 | Program output: -92                
Correct output: -76                 | Program output: 56                 
Correct output: -71                 | Program output: -61                
Correct output: -51                 | Program output: 86                 
Correct output: 36                  | Program output: 67                 
Correct output: -78                 | Program output: -34                
Correct output: -87                 | Program output: -9                 
Correct output: -87                 | Program output: -49                
Correct output: -44                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: 17                  | Program output: 75                 
Correct output: -62                 | Program output: 96                 
Correct output: -65                 | Program output: -16                
Correct output: -25                 | Program output: 21                 
Correct output: -70                 | Program output: -70                
Correct output: -70                 | Program output: 7                  
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -47                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: -52                
Correct output: -43                 | Program output: -43                
Correct output: -63                 | Program output: 3                  
Correct output: -76                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction print_newline} {:close 0, :instruction integer_gte})
Lexicase best program: (integer_gt integer_shove in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth integer_fromboolean boolean_not exec_y (integer_min exec_pop () exec_if (integer_inc boolean_pop boolean_empty integer_div boolean_rot) (exec_yankdup) integer_pop) print_exec (integer_max exec_do*times (exec_eq in2 exec_rot () (exec_shove () exec_dup (exec_k (exec_do*times (in2 boolean_pop) exec_shove () exec_dup (exec_k (exec_do*times (boolean_invert_second_then_and boolean_eq integer_gte print_boolean integer_empty exec_y_when_autoconstructing (boolean_flush integer_dec boolean_invert_second_then_and)) integer_lt integer_max) (boolean_pop boolean_shove boolean_shove integer_rot integer_add) boolean_rot integer_flush integer_max) boolean_pop) (integer_rot integer_yankdup exec_yankdup exec_do*times (boolean_yank) integer_pop print_newline) integer_gte)) ())))
Lexicase best errors: [0 0 1 1 1 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 88
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction print_newline} {:close 0, :instruction integer_gte})
Zero cases best program: (integer_gt integer_shove in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth integer_fromboolean boolean_not exec_y (integer_min exec_pop () exec_if (integer_inc boolean_pop boolean_empty integer_div boolean_rot) (exec_yankdup) integer_pop) print_exec (integer_max exec_do*times (exec_eq in2 exec_rot () (exec_shove () exec_dup (exec_k (exec_do*times (in2 boolean_pop) exec_shove () exec_dup (exec_k (exec_do*times (boolean_invert_second_then_and boolean_eq integer_gte print_boolean integer_empty exec_y_when_autoconstructing (boolean_flush integer_dec boolean_invert_second_then_and)) integer_lt integer_max) (boolean_pop boolean_shove boolean_shove integer_rot integer_add) boolean_rot integer_flush integer_max) boolean_pop) (integer_rot integer_yankdup exec_yankdup exec_do*times (boolean_yank) integer_pop print_newline) integer_gte)) ())))
Zero cases best errors: [0 0 1 1 1 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 88
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 3 405 406 405 3 3 522 2 3)
Population mean number of elite cases: 1.75
Count of perfect (error zero) individuals by case: (3 3 405 406 405 3 3 522 2 3)
Population mean number of perfect (error zero) cases: 1.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction print_newline} {:close 0, :instruction integer_gte})
Best program: (integer_dup integer_shove in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth integer_fromboolean boolean_not exec_y (exec_empty exec_pop () exec_if (integer_inc boolean_pop boolean_empty integer_div boolean_rot) (exec_yankdup) integer_pop) print_exec (integer_max exec_do*times (exec_eq in2 exec_rot () (exec_shove () exec_dup (exec_k (exec_do*times (in2 boolean_pop) exec_shove () exec_dup (exec_k (exec_do*times (boolean_invert_second_then_and boolean_eq integer_gte print_boolean integer_empty exec_y_when_autoconstructing (boolean_flush integer_dec boolean_invert_second_then_and)) integer_lt integer_max) (boolean_pop boolean_shove boolean_shove integer_rot integer_add) boolean_rot integer_flush integer_max) boolean_pop) (integer_rot integer_yankdup exec_yankdup exec_do*times (boolean_yank) integer_pop print_newline) integer_gte)) ())))
Errors: [0 0 1 1 1 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 66
Size: 88
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 8.245
Median total errors in population: 9
Error averages by case: (0.997 0.997 0.595 0.594 0.595 0.997 0.997 0.478 0.998 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.585
Average program size in population (points): 71.871
Average percent parens in population: 0.258
Minimum age in population: 18.044921875
Maximum age in population: 23.260009765625
Average age in population: 21.48763818359375
Median age in population: 21.5318603515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 93
Genome diversity (% unique genomes):	 0.726
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 96
Syntactic diversity (% unique Push programs):	 0.711
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 12620011
--- Timings ---
Current time: 1559584855918 milliseconds
Total Time:          52.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.0 seconds, 59.5%
Fitness Testing:     14.1 seconds, 27.0%
Report:               7.0 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -82                 | Program output: -16                
Correct output: 63                  | Program output: 63                 
Correct output: -43                 | Program output: -43                
Correct output: -71                 | Program output: 65                 
Correct output: -7                  | Program output: 8                  
Correct output: -71                 | Program output: 14                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 81                 
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 23                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 78                 
Correct output: 51                  | Program output: 74                 
Correct output: 48                  | Program output: 56                 
Correct output: 2                   | Program output: 46                 
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output: 46                 
Correct output: 12                  | Program output: 92                 
Correct output: 40                  | Program output: 65                 
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 19                 
Correct output: 13                  | Program output: 68                 
Correct output: 7                   | Program output: 20                 
Correct output: 4                   | Program output: 94                 
Correct output: 32                  | Program output: 41                 
Correct output: 40                  | Program output: 90                 
Correct output: 13                  | Program output: 20                 
Correct output: 5                   | Program output: 68                 
Correct output: 9                   | Program output: 19                 
Correct output: 1                   | Program output: 53                 
Correct output: 45                  | Program output: 73                 
Correct output: -87                 | Program output: -41                
Correct output: -90                 | Program output: 10                 
Correct output: -62                 | Program output: -26                
Correct output: -29                 | Program output: 62                 
Correct output: -18                 | Program output: 47                 
Correct output: -55                 | Program output: 92                 
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: 10                 
Correct output: -95                 | Program output: -93                
Correct output: -91                 | Program output: 66                 
Correct output: -61                 | Program output: 93                 
Correct output: -81                 | Program output: -13                
Correct output: -84                 | Program output: -79                
Correct output: -70                 | Program output: 81                 
Correct output: 3                   | Program output: 57                 
Correct output: -88                 | Program output: -27                
Correct output: -86                 | Program output: 85                 
Correct output: -51                 | Program output: 92                 
Correct output: -62                 | Program output: 66                 
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: 73                 
Correct output: -66                 | Program output: 88                 
Correct output: -22                 | Program output: 16                 
Correct output: -51                 | Program output: -51                
Correct output: 4                   | Program output: 4                  
Correct output: -49                 | Program output: -7                 
Correct output: -53                 | Program output: -23                
Correct output: -71                 | Program output: 99                 
Correct output: -86                 | Program output: 18                 
Correct output: -61                 | Program output: 76                 
Correct output: -92                 | Program output: 48                 
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -3                 
Correct output: -41                 | Program output: 50                 
Correct output: -42                 | Program output: -16                
Correct output: -42                 | Program output: -42                
Correct output: -99                 | Program output: -66                
Correct output: -76                 | Program output: -76                
Correct output: -71                 | Program output: 15                 
Correct output: -51                 | Program output: 88                 
Correct output: 36                  | Program output: 55                 
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -87                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: 54                 
Correct output: -81                 | Program output: -10                
Correct output: 17                  | Program output: 38                 
Correct output: -62                 | Program output: 75                 
Correct output: -65                 | Program output: 94                 
Correct output: -25                 | Program output: 17                 
Correct output: -70                 | Program output: 27                 
Correct output: -70                 | Program output: -41                
Correct output: -97                 | Program output: 84                 
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: 40                 
Correct output: -72                 | Program output: -65                
Correct output: -43                 | Program output: 31                 
Correct output: -63                 | Program output: -63                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction 75} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction tagged_706} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_rot})
Lexicase best program: (in3 in3 in3 in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth integer_div boolean_not exec_y (boolean_invert_second_then_and) exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (integer_mult integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove () print_integer boolean_swap exec_k_when_autoconstructing (print_integer) (boolean_dup 75) integer_eq boolean_xor boolean_and boolean_yank) (tagged_706 integer_dup_items in2) (integer_empty exec_y_when_autoconstructing (boolean_flush integer_dec boolean_invert_second_then_and)) integer_lt integer_max) boolean_pop exec_when (boolean_shove integer_rot)) ()) ()))
Lexicase best errors: [1 1 0 0 1 1 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 72
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction 75} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction tagged_706} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_rot})
Zero cases best program: (in3 in3 in3 in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth integer_div boolean_not exec_y (boolean_invert_second_then_and) exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (integer_mult integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove () print_integer boolean_swap exec_k_when_autoconstructing (print_integer) (boolean_dup 75) integer_eq boolean_xor boolean_and boolean_yank) (tagged_706 integer_dup_items in2) (integer_empty exec_y_when_autoconstructing (boolean_flush integer_dec boolean_invert_second_then_and)) integer_lt integer_max) boolean_pop exec_when (boolean_shove integer_rot)) ()) ()))
Zero cases best errors: [1 1 0 0 1 1 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 72
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (90 90 909 203 614 1000 203 203 1000 614)
Population mean number of elite cases: 4.93
Count of perfect (error zero) individuals by case: (90 90 909 203 614 0 203 203 0 614)
Population mean number of perfect (error zero) cases: 2.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Best program: (in3 in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and) exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () integer_min) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove () print_integer boolean_swap exec_shove (exec_flush integer_pop boolean_stackdepth print_integer)) () ())) ()) ()))
Errors: [1 1 0 0 1 1 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 35
Size: 51
Percent parens: 0.314
--- Population Statistics ---
Average total errors in population: 7.074
Median total errors in population: 7
Error averages by case: (0.91 0.91 0.091 0.797 0.386 1.0 0.797 0.797 1.0 0.386)
Error minima by case: (0 0 0 0 0 1 0 0 1 0)
Average genome size in population (length): 58.2
Average program size in population (points): 77.736
Average percent parens in population: 0.252
Minimum age in population: 20.3408203125
Maximum age in population: 24.661376953125
Average age in population: 23.16276226806641
Median age in population: 23.15087890625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 147
Genome diversity (% unique genomes):	 0.672
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 149
Syntactic diversity (% unique Push programs):	 0.665
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 13813276
--- Timings ---
Current time: 1559584859486 milliseconds
Total Time:          56.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.9 seconds, 58.7%
Fitness Testing:     15.3 seconds, 27.3%
Report:               7.7 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -82                 | Program output: -16                
Correct output: 63                  | Program output: 63                 
Correct output: -43                 | Program output: -43                
Correct output: -71                 | Program output: 65                 
Correct output: -7                  | Program output: 8                  
Correct output: -71                 | Program output: 14                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 81                 
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 23                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 78                 
Correct output: 51                  | Program output: 74                 
Correct output: 48                  | Program output: 56                 
Correct output: 2                   | Program output: 46                 
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output: 46                 
Correct output: 12                  | Program output: 92                 
Correct output: 40                  | Program output: 65                 
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 19                 
Correct output: 13                  | Program output: 68                 
Correct output: 7                   | Program output: 20                 
Correct output: 4                   | Program output: 94                 
Correct output: 32                  | Program output: 41                 
Correct output: 40                  | Program output: 90                 
Correct output: 13                  | Program output: 20                 
Correct output: 5                   | Program output: 68                 
Correct output: 9                   | Program output: 19                 
Correct output: 1                   | Program output: 53                 
Correct output: 45                  | Program output: 73                 
Correct output: -87                 | Program output: -41                
Correct output: -90                 | Program output: 10                 
Correct output: -62                 | Program output: -26                
Correct output: -29                 | Program output: 62                 
Correct output: -18                 | Program output: 47                 
Correct output: -55                 | Program output: 92                 
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: 10                 
Correct output: -95                 | Program output: -93                
Correct output: -91                 | Program output: 66                 
Correct output: -61                 | Program output: 93                 
Correct output: -81                 | Program output: -13                
Correct output: -84                 | Program output: -79                
Correct output: -70                 | Program output: 81                 
Correct output: 3                   | Program output: 57                 
Correct output: -88                 | Program output: -27                
Correct output: -86                 | Program output: 85                 
Correct output: -51                 | Program output: 92                 
Correct output: -62                 | Program output: 66                 
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: 73                 
Correct output: -66                 | Program output: 88                 
Correct output: -22                 | Program output: 16                 
Correct output: -51                 | Program output: -51                
Correct output: 4                   | Program output: 4                  
Correct output: -49                 | Program output: -7                 
Correct output: -53                 | Program output: -23                
Correct output: -71                 | Program output: 99                 
Correct output: -86                 | Program output: 18                 
Correct output: -61                 | Program output: 76                 
Correct output: -92                 | Program output: 48                 
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -3                 
Correct output: -41                 | Program output: 50                 
Correct output: -42                 | Program output: -16                
Correct output: -42                 | Program output: -42                
Correct output: -99                 | Program output: -66                
Correct output: -76                 | Program output: -76                
Correct output: -71                 | Program output: 15                 
Correct output: -51                 | Program output: 88                 
Correct output: 36                  | Program output: 55                 
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -87                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: 54                 
Correct output: -81                 | Program output: -10                
Correct output: 17                  | Program output: 38                 
Correct output: -62                 | Program output: 75                 
Correct output: -65                 | Program output: 94                 
Correct output: -25                 | Program output: 17                 
Correct output: -70                 | Program output: 27                 
Correct output: -70                 | Program output: -41                
Correct output: -97                 | Program output: 84                 
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: 40                 
Correct output: -72                 | Program output: -65                
Correct output: -43                 | Program output: 31                 
Correct output: -63                 | Program output: -63                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_yankdup})
Lexicase best program: (in3 integer_shove integer_gt in1 print_integer boolean_xor integer_stackdepth integer_fromboolean boolean_not exec_y (boolean_invert_second_then_and) integer_min exec_y (boolean_invert_second_then_and) integer_min exec_pop () exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_if () (exec_y (boolean_invert_second_then_and)) boolean_empty exec_pop () exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_fromboolean integer_flush) (exec_stackdepth in4) (in2 exec_s_when_autoconstructing (integer_stackdepth integer_fromboolean boolean_not) (exec_y (integer_min exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div boolean_rot) (exec_yankdup) ()) ()))) ())) ()) () ()) ())
Lexicase best errors: [0 0 1 0 1 1 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 77
Percent parens: 0.364
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_yankdup})
Zero cases best program: (in3 integer_shove integer_gt in1 print_integer boolean_xor integer_stackdepth integer_fromboolean boolean_not exec_y (boolean_invert_second_then_and) integer_min exec_y (boolean_invert_second_then_and) integer_min exec_pop () exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_if () (exec_y (boolean_invert_second_then_and)) boolean_empty exec_pop () exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_fromboolean integer_flush) (exec_stackdepth in4) (in2 exec_s_when_autoconstructing (integer_stackdepth integer_fromboolean boolean_not) (exec_y (integer_min exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div boolean_rot) (exec_yankdup) ()) ()))) ())) ()) () ()) ())
Zero cases best errors: [0 0 1 0 1 1 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 77
Percent parens: 0.364
--- Lexicase Population Statistics ---
Count of elite individuals by case: (282 287 377 934 268 377 1000 1000 286 644)
Population mean number of elite cases: 5.45
Count of perfect (error zero) individuals by case: (282 287 377 934 268 377 0 0 286 644)
Population mean number of perfect (error zero) cases: 3.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 0, :instruction -68} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction boolean_pop} {:close 1, :instruction exec_empty} {:close 2, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction -53} {:close 2, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction print_newline} {:close 0, :instruction integer_gte})
Best program: (in3 integer_shove boolean_swap print_integer boolean_xor integer_stackdepth integer_fromboolean boolean_not exec_y (boolean_invert_second_then_and) integer_swap exec_pop () exec_if (boolean_rot exec_dup_times (boolean_empty integer_div boolean_rot) integer_dup_items) (integer_dup_times) integer_pop print_exec (integer_max exec_do*times (exec_eq in2 exec_rot () (exec_shove () exec_dup (exec_k (exec_do*times (integer_max exec_do*times (exec_eq in2 exec_rot () (exec_shove () exec_dup (exec_k (exec_do*times (boolean_invert_second_then_and boolean_eq integer_gte print_boolean -68 boolean_invert_second_then_and boolean_pop)) (exec_empty) exec_dup ()) integer_mult boolean_yankdup boolean_flush -53 boolean_invert_second_then_and) () print_exec () boolean_rot integer_pop) boolean_rot integer_div boolean_not) exec_noop exec_do*times (boolean_yank integer_pop print_newline) integer_gte) ())) ())))
Errors: [1 1 0 0 1 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 66
Size: 94
Percent parens: 0.298
--- Population Statistics ---
Average total errors in population: 6.545
Median total errors in population: 6
Error averages by case: (0.718 0.713 0.623 0.066 0.732 0.623 1.0 1.0 0.714 0.356)
Error minima by case: (0 0 0 0 0 0 1 1 0 0)
Average genome size in population (length): 55.464
Average program size in population (points): 74.772
Average percent parens in population: 0.259
Minimum age in population: 21.966552734375
Maximum age in population: 26.42495727539062
Average age in population: 24.61686511230469
Median age in population: 24.6654052734375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 36
Genome diversity (% unique genomes):	 0.803
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.795
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 14947352
--- Timings ---
Current time: 1559584863216 milliseconds
Total Time:          59.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.8 seconds, 58.3%
Fitness Testing:     16.4 seconds, 27.5%
Report:               8.3 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -82                 | Program output: -16                
Correct output: 63                  | Program output: 63                 
Correct output: -43                 | Program output: -43                
Correct output: -71                 | Program output: 65                 
Correct output: -7                  | Program output: 8                  
Correct output: -71                 | Program output: 14                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 81                 
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 23                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 78                 
Correct output: 51                  | Program output: 74                 
Correct output: 48                  | Program output: 56                 
Correct output: 2                   | Program output: 46                 
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output: 46                 
Correct output: 12                  | Program output: 92                 
Correct output: 40                  | Program output: 65                 
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 19                 
Correct output: 13                  | Program output: 68                 
Correct output: 7                   | Program output: 20                 
Correct output: 4                   | Program output: 94                 
Correct output: 32                  | Program output: 41                 
Correct output: 40                  | Program output: 90                 
Correct output: 13                  | Program output: 20                 
Correct output: 5                   | Program output: 68                 
Correct output: 9                   | Program output: 19                 
Correct output: 1                   | Program output: 53                 
Correct output: 45                  | Program output: 73                 
Correct output: -87                 | Program output: -41                
Correct output: -90                 | Program output: 10                 
Correct output: -62                 | Program output: -26                
Correct output: -29                 | Program output: 62                 
Correct output: -18                 | Program output: 47                 
Correct output: -55                 | Program output: 92                 
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: 10                 
Correct output: -95                 | Program output: -93                
Correct output: -91                 | Program output: 66                 
Correct output: -61                 | Program output: 93                 
Correct output: -81                 | Program output: -13                
Correct output: -84                 | Program output: -79                
Correct output: -70                 | Program output: 81                 
Correct output: 3                   | Program output: 57                 
Correct output: -88                 | Program output: -27                
Correct output: -86                 | Program output: 85                 
Correct output: -51                 | Program output: 92                 
Correct output: -62                 | Program output: 66                 
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: 73                 
Correct output: -66                 | Program output: 88                 
Correct output: -22                 | Program output: 16                 
Correct output: -51                 | Program output: -51                
Correct output: 4                   | Program output: 4                  
Correct output: -49                 | Program output: -7                 
Correct output: -53                 | Program output: -23                
Correct output: -71                 | Program output: 99                 
Correct output: -86                 | Program output: 18                 
Correct output: -61                 | Program output: 76                 
Correct output: -92                 | Program output: 48                 
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -3                 
Correct output: -41                 | Program output: 50                 
Correct output: -42                 | Program output: -16                
Correct output: -42                 | Program output: -42                
Correct output: -99                 | Program output: -66                
Correct output: -76                 | Program output: -76                
Correct output: -71                 | Program output: 15                 
Correct output: -51                 | Program output: 88                 
Correct output: 36                  | Program output: 55                 
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -87                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: 54                 
Correct output: -81                 | Program output: -10                
Correct output: 17                  | Program output: 38                 
Correct output: -62                 | Program output: 75                 
Correct output: -65                 | Program output: 94                 
Correct output: -25                 | Program output: 17                 
Correct output: -70                 | Program output: 27                 
Correct output: -70                 | Program output: -41                
Correct output: -97                 | Program output: 84                 
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: 40                 
Correct output: -72                 | Program output: -65                
Correct output: -43                 | Program output: 31                 
Correct output: -63                 | Program output: -63                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction 75} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction tagged_706} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_rot})
Lexicase best program: (in3 in3 in3 in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth integer_div boolean_not exec_y (boolean_invert_second_then_and) exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (integer_mult integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_dup_times boolean_yank boolean_yankdup in2 exec_shove () print_integer boolean_swap exec_k_when_autoconstructing (print_integer) (boolean_dup 75) integer_eq boolean_xor boolean_and boolean_yank) (tagged_706 integer_dup_items in2) (integer_empty exec_y_when_autoconstructing (boolean_flush integer_dec boolean_invert_second_then_and)) integer_lt integer_max) boolean_pop exec_when (boolean_shove integer_rot)) ()) ()))
Lexicase best errors: [1 1 1 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 72
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction 75} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction tagged_706} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_rot})
Zero cases best program: (in3 in3 in3 in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth integer_div boolean_not exec_y (boolean_invert_second_then_and) exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (integer_mult integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_dup_times boolean_yank boolean_yankdup in2 exec_shove () print_integer boolean_swap exec_k_when_autoconstructing (print_integer) (boolean_dup 75) integer_eq boolean_xor boolean_and boolean_yank) (tagged_706 integer_dup_items in2) (integer_empty exec_y_when_autoconstructing (boolean_flush integer_dec boolean_invert_second_then_and)) integer_lt integer_max) boolean_pop exec_when (boolean_shove integer_rot)) ()) ()))
Zero cases best errors: [1 1 1 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 72
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (169 395 1000 355 355 395 395 921 355 1000)
Population mean number of elite cases: 5.34
Count of perfect (error zero) individuals by case: (169 395 0 355 355 395 395 921 355 0)
Population mean number of perfect (error zero) cases: 3.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_pop} {:close 0, :instruction print_exec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction -53} {:close 2, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_exec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_rot})
Best program: (in3 integer_shove in3 integer_shove in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth integer_fromboolean boolean_not exec_y (integer_min exec_pop () exec_if (integer_inc boolean_pop boolean_empty integer_div boolean_rot) (boolean_flush) integer_pop) print_exec (integer_max exec_do*times (exec_eq in2 exec_rot () (exec_shove () exec_dup (exec_k (exec_do*times (in2 boolean_pop) exec_shove () exec_dup (exec_k (exec_do*times (boolean_invert_second_then_and boolean_eq integer_gte print_boolean integer_empty exec_y_when_autoconstructing (boolean_flush integer_dec boolean_yankdup boolean_flush -53 boolean_invert_second_then_and)) print_exec () exec_when (boolean_shove integer_rot)) ())) ())) ())))
Errors: [1 1 1 0 0 1 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 56
Size: 79
Percent parens: 0.291
--- Population Statistics ---
Average total errors in population: 6.66
Median total errors in population: 6
Error averages by case: (0.831 0.605 1.0 0.645 0.645 0.605 0.605 0.079 0.645 1.0)
Error minima by case: (0 0 1 0 0 0 0 0 0 1)
Average genome size in population (length): 53.238
Average program size in population (points): 71.737
Average percent parens in population: 0.257
Minimum age in population: 23.248291015625
Maximum age in population: 27.80430603027344
Average age in population: 26.11829315185547
Median age in population: 26.17008972167969
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 17
Genome diversity (% unique genomes):	 0.855
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.848
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 16050249
--- Timings ---
Current time: 1559584867216 milliseconds
Total Time:          63.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.9 seconds, 58.1%
Fitness Testing:     17.5 seconds, 27.6%
Report:               9.0 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 626
Test mean error for best: 0.62600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -82                 | Program output: -16                
Correct output: 63                  | Program output: 97                 
Correct output: -43                 | Program output: -12                
Correct output: -71                 | Program output: 65                 
Correct output: -7                  | Program output: 8                  
Correct output: -71                 | Program output: 14                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 81                 
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 22                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 96                 
Correct output: 51                  | Program output: 65                 
Correct output: 48                  | Program output: 48                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 79                 
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 40                  | Program output: 40                 
Correct output: 10                  | Program output: 21                 
Correct output: 3                   | Program output: 45                 
Correct output: 13                  | Program output: 72                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 43                 
Correct output: 32                  | Program output: 56                 
Correct output: 40                  | Program output: 76                 
Correct output: 13                  | Program output: 89                 
Correct output: 5                   | Program output: 60                 
Correct output: 9                   | Program output: 51                 
Correct output: 1                   | Program output: 60                 
Correct output: 45                  | Program output: 50                 
Correct output: -87                 | Program output: -46                
Correct output: -90                 | Program output: 20                 
Correct output: -62                 | Program output: 25                 
Correct output: -29                 | Program output: 85                 
Correct output: -18                 | Program output: -18                
Correct output: -55                 | Program output: 2                  
Correct output: -86                 | Program output: -10                
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -37                
Correct output: -61                 | Program output: -61                
Correct output: -81                 | Program output: -19                
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: -51                
Correct output: 3                   | Program output: 3                  
Correct output: -88                 | Program output: -9                 
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: 23                 
Correct output: -62                 | Program output: 77                 
Correct output: -77                 | Program output: 27                 
Correct output: -71                 | Program output: -50                
Correct output: -66                 | Program output: -66                
Correct output: -22                 | Program output: 77                 
Correct output: -51                 | Program output: 46                 
Correct output: 4                   | Program output: 24                 
Correct output: -49                 | Program output: -7                 
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: 76                 
Correct output: -86                 | Program output: -68                
Correct output: -61                 | Program output: -48                
Correct output: -92                 | Program output: 12                 
Correct output: -57                 | Program output: -5                 
Correct output: -100                | Program output: 15                 
Correct output: -85                 | Program output: -60                
Correct output: -41                 | Program output: 31                 
Correct output: -42                 | Program output: -42                
Correct output: -42                 | Program output: 12                 
Correct output: -99                 | Program output: -30                
Correct output: -76                 | Program output: -31                
Correct output: -71                 | Program output: -53                
Correct output: -51                 | Program output: -51                
Correct output: 36                  | Program output: 36                 
Correct output: -78                 | Program output: -26                
Correct output: -87                 | Program output: 9                  
Correct output: -87                 | Program output: 93                 
Correct output: -44                 | Program output: 5                  
Correct output: -81                 | Program output: -14                
Correct output: 17                  | Program output: 65                 
Correct output: -62                 | Program output: -29                
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: 99                 
Correct output: -70                 | Program output: -56                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: 60                 
Correct output: -92                 | Program output: 30                 
Correct output: -77                 | Program output: 28                 
Correct output: -72                 | Program output: -72                
Correct output: -43                 | Program output: 34                 
Correct output: -63                 | Program output: -12                
Correct output: -76                 | Program output: 70                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 1, :instruction integer_shove} {:close 0, :instruction tag_boolean_337} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 1, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_rot} {:close 1, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_div} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot})
Lexicase best program: (in3 integer_shove tag_boolean_337 in1 print_integer boolean_xor integer_stackdepth integer_fromboolean boolean_not exec_y (boolean_invert_second_then_and) integer_min exec_pop () exec_if (integer_inc) (in2 boolean_empty exec_stackdepth boolean_rot) print_newline exec_s_when_autoconstructing (integer_eq integer_lte boolean_yankdup in2 integer_div) (print_integer boolean_swap) (exec_shove (exec_flush) integer_pop boolean_flush integer_div) integer_dup_items boolean_swap exec_shove (exec_flush) integer_pop boolean_stackdepth integer_gte in2 exec_s_when_autoconstructing (boolean_yankdup integer_rot) () ())
Lexicase best errors: [1 0 1 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 57
Percent parens: 0.228
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 1, :instruction integer_shove} {:close 0, :instruction tag_boolean_337} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 1, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_rot} {:close 1, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_div} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot})
Zero cases best program: (in3 integer_shove tag_boolean_337 in1 print_integer boolean_xor integer_stackdepth integer_fromboolean boolean_not exec_y (boolean_invert_second_then_and) integer_min exec_pop () exec_if (integer_inc) (in2 boolean_empty exec_stackdepth boolean_rot) print_newline exec_s_when_autoconstructing (integer_eq integer_lte boolean_yankdup in2 integer_div) (print_integer boolean_swap) (exec_shove (exec_flush) integer_pop boolean_flush integer_div) integer_dup_items boolean_swap exec_shove (exec_flush) integer_pop boolean_stackdepth integer_gte in2 exec_s_when_autoconstructing (boolean_yankdup integer_rot) () ())
Zero cases best errors: [1 0 1 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 57
Percent parens: 0.228
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 399 133 930 399 1000 133 393 400 135)
Population mean number of elite cases: 3.92
Count of perfect (error zero) individuals by case: (1 399 133 930 399 0 133 393 400 135)
Population mean number of perfect (error zero) cases: 2.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 1, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Best program: (in3 integer_shove integer_gt in1 print_integer boolean_xor exec_dup_times (integer_fromboolean boolean_not) exec_y () boolean_invert_second_then_and integer_min exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div) (boolean_rot) (print_newline) exec_s_when_autoconstructing (integer_eq boolean_yankdup in2 exec_shove () print_integer boolean_swap exec_shove (exec_flush in2 boolean_stackdepth print_integer)) () ()) ()))
Errors: [1 0 1 0 0 1 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 32
Size: 46
Percent parens: 0.304
--- Population Statistics ---
Average total errors in population: 7.077
Median total errors in population: 6
Error averages by case: (0.999 0.601 0.867 0.07 0.601 1.0 0.867 0.607 0.6 0.865)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 51.889
Average program size in population (points): 70.141
Average percent parens in population: 0.260
Minimum age in population: 24.78746032714844
Maximum age in population: 29.64910125732422
Average age in population: 27.64967208862305
Median age in population: 27.77256774902344
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.856
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.851
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 17143409
--- Timings ---
Current time: 1559584870870 milliseconds
Total Time:          67.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.0 seconds, 57.8%
Fitness Testing:     18.6 seconds, 27.6%
Report:               9.7 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 667
Test mean error for best: 0.66700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -82                 | Program output: -16                
Correct output: 63                  | Program output: 63                 
Correct output: -43                 | Program output: -12                
Correct output: -71                 | Program output: 65                 
Correct output: -7                  | Program output: 8                  
Correct output: -71                 | Program output: 14                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 81                 
Correct output: -22                 | Program output: 66                 
Correct output: 22                  | Program output: 23                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 78                 
Correct output: 51                  | Program output: 74                 
Correct output: 48                  | Program output: 56                 
Correct output: 2                   | Program output: 46                 
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output: 46                 
Correct output: 12                  | Program output: 92                 
Correct output: 40                  | Program output: 65                 
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 19                 
Correct output: 13                  | Program output: 68                 
Correct output: 7                   | Program output: 20                 
Correct output: 4                   | Program output: 94                 
Correct output: 32                  | Program output: 41                 
Correct output: 40                  | Program output: 90                 
Correct output: 13                  | Program output: 20                 
Correct output: 5                   | Program output: 68                 
Correct output: 9                   | Program output: 19                 
Correct output: 1                   | Program output: 53                 
Correct output: 45                  | Program output: 73                 
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: 72                 
Correct output: -29                 | Program output: 1                  
Correct output: -18                 | Program output: 47                 
Correct output: -55                 | Program output: 92                 
Correct output: -86                 | Program output: -19                
Correct output: -77                 | Program output: 97                 
Correct output: -95                 | Program output: 19                 
Correct output: -91                 | Program output: 66                 
Correct output: -61                 | Program output: 93                 
Correct output: -81                 | Program output: -57                
Correct output: -84                 | Program output: 35                 
Correct output: -70                 | Program output: 81                 
Correct output: 3                   | Program output: 57                 
Correct output: -88                 | Program output: -88                
Correct output: -86                 | Program output: 89                 
Correct output: -51                 | Program output: 72                 
Correct output: -62                 | Program output: 71                 
Correct output: -77                 | Program output: 29                 
Correct output: -71                 | Program output: -71                
Correct output: -66                 | Program output: 88                 
Correct output: -22                 | Program output: 16                 
Correct output: -51                 | Program output: -51                
Correct output: 4                   | Program output: 4                  
Correct output: -49                 | Program output: 51                 
Correct output: -53                 | Program output: -23                
Correct output: -71                 | Program output: 9                  
Correct output: -86                 | Program output: -86                
Correct output: -61                 | Program output: 76                 
Correct output: -92                 | Program output: -44                
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: 13                 
Correct output: -85                 | Program output: -55                
Correct output: -41                 | Program output: 50                 
Correct output: -42                 | Program output: -19                
Correct output: -42                 | Program output: -42                
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: -76                
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: 88                 
Correct output: 36                  | Program output: 55                 
Correct output: -78                 | Program output: -23                
Correct output: -87                 | Program output: -6                 
Correct output: -87                 | Program output: 1                  
Correct output: -44                 | Program output: 54                 
Correct output: -81                 | Program output: -4                 
Correct output: 17                  | Program output: 38                 
Correct output: -62                 | Program output: 75                 
Correct output: -65                 | Program output: 85                 
Correct output: -25                 | Program output: 17                 
Correct output: -70                 | Program output: 58                 
Correct output: -70                 | Program output: -41                
Correct output: -97                 | Program output: -2                 
Correct output: -92                 | Program output: -5                 
Correct output: -77                 | Program output: -11                
Correct output: -72                 | Program output: 15                 
Correct output: -43                 | Program output: 42                 
Correct output: -63                 | Program output: -63                
Correct output: -76                 | Program output: 32                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_boolean_331} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction print_newline})
Lexicase best program: (in3 integer_shove integer_gt in1 print_integer boolean_xor integer_stackdepth integer_fromboolean boolean_not exec_y (exec_empty) integer_min exec_pop () exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div boolean_rot) (print_newline boolean_empty integer_div exec_y () print_newline exec_s_when_autoconstructing (integer_eq boolean_rot print_newline exec_s_when_autoconstructing (integer_eq integer_lte boolean_yankdup in2 integer_div) (print_integer boolean_swap exec_shove (exec_flush) integer_pop boolean_stackdepth print_integer boolean_dup) (integer_mult boolean_yankdup boolean_flush boolean_invert_second_then_and) integer_lt integer_max) (boolean_pop boolean_shove boolean_shove integer_rot) (integer_add boolean_rot tag_boolean_331 integer_sub boolean_pop) integer_rot integer_yankdup exec_yankdup integer_dup integer_inc integer_stackdepth print_exec () boolean_rot boolean_eq boolean_rot integer_div boolean_not exec_noop exec_do*times (boolean_yank) integer_pop print_newline) ()) ())
Lexicase best errors: [0 0 1 1 1 0 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 92
Percent parens: 0.196
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_boolean_331} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction print_newline})
Zero cases best program: (in3 integer_shove integer_gt in1 print_integer boolean_xor integer_stackdepth integer_fromboolean boolean_not exec_y (exec_empty) integer_min exec_pop () exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div boolean_rot) (print_newline boolean_empty integer_div exec_y () print_newline exec_s_when_autoconstructing (integer_eq boolean_rot print_newline exec_s_when_autoconstructing (integer_eq integer_lte boolean_yankdup in2 integer_div) (print_integer boolean_swap exec_shove (exec_flush) integer_pop boolean_stackdepth print_integer boolean_dup) (integer_mult boolean_yankdup boolean_flush boolean_invert_second_then_and) integer_lt integer_max) (boolean_pop boolean_shove boolean_shove integer_rot) (integer_add boolean_rot tag_boolean_331 integer_sub boolean_pop) integer_rot integer_yankdup exec_yankdup integer_dup integer_inc integer_stackdepth print_exec () boolean_rot boolean_eq boolean_rot integer_div boolean_not exec_noop exec_do*times (boolean_yank) integer_pop print_newline) ()) ())
Zero cases best errors: [0 0 1 1 1 0 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 92
Percent parens: 0.196
--- Lexicase Population Statistics ---
Count of elite individuals by case: (475 378 3 122 3 928 378 364 364 188)
Population mean number of elite cases: 3.20
Count of perfect (error zero) individuals by case: (475 378 3 122 3 928 378 364 364 188)
Population mean number of perfect (error zero) cases: 3.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction 75} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction tagged_706} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt})
Best program: (in2 integer_shove in3 in3 in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and) exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () exec_yankdup exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup integer_div) (exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove () print_integer boolean_swap boolean_stackdepth print_integer) (boolean_dup 75) (integer_eq boolean_xor boolean_and boolean_yank) tagged_706 integer_dup_items in2) integer_empty exec_y_when_autoconstructing (boolean_flush integer_dec boolean_invert_second_then_and)) integer_lt)) () ()) ()))
Errors: [0 1 1 1 1 0 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 59
Size: 80
Percent parens: 0.263
--- Population Statistics ---
Average total errors in population: 6.797
Median total errors in population: 6
Error averages by case: (0.525 0.622 0.997 0.878 0.997 0.072 0.622 0.636 0.636 0.812)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.147
Average program size in population (points): 71.243
Average percent parens in population: 0.255
Minimum age in population: 26.09527587890625
Maximum age in population: 30.95322799682617
Average age in population: 29.18276741027832
Median age in population: 29.26168251037598
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 39
Genome diversity (% unique genomes):	 0.835
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.823
Total error diversity:				 0.004
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 18235325
--- Timings ---
Current time: 1559584874582 milliseconds
Total Time:          71.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        41.0 seconds, 57.7%
Fitness Testing:     19.7 seconds, 27.7%
Report:              10.2 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 430
Test mean error for best: 0.43000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -82                 | Program output: -82                
Correct output: 63                  | Program output: 63                 
Correct output: -43                 | Program output: -43                
Correct output: -71                 | Program output: 65                 
Correct output: -7                  | Program output: 8                  
Correct output: -71                 | Program output: 14                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 81                 
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 23                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 78                 
Correct output: 51                  | Program output: 51                 
Correct output: 48                  | Program output: 56                 
Correct output: 2                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output: 46                 
Correct output: 12                  | Program output: 92                 
Correct output: 40                  | Program output: 56                 
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 19                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 41                 
Correct output: 40                  | Program output: 40                 
Correct output: 13                  | Program output: 20                 
Correct output: 5                   | Program output: 5                  
Correct output: 9                   | Program output: 9                  
Correct output: 1                   | Program output: 53                 
Correct output: 45                  | Program output: 45                 
Correct output: -87                 | Program output: -41                
Correct output: -90                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -29                 | Program output: -29                
Correct output: -18                 | Program output: 43                 
Correct output: -55                 | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: -4                 
Correct output: -95                 | Program output: -93                
Correct output: -91                 | Program output: 66                 
Correct output: -61                 | Program output: 57                 
Correct output: -81                 | Program output: -81                
Correct output: -84                 | Program output: -79                
Correct output: -70                 | Program output: 65                 
Correct output: 3                   | Program output: 20                 
Correct output: -88                 | Program output: -54                
Correct output: -86                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -62                 | Program output: -62                
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: -62                
Correct output: -66                 | Program output: 58                 
Correct output: -22                 | Program output: 9                  
Correct output: -51                 | Program output: -51                
Correct output: 4                   | Program output: 4                  
Correct output: -49                 | Program output: -49                
Correct output: -53                 | Program output: -23                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -26                
Correct output: -61                 | Program output: 5                  
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: 50                 
Correct output: -42                 | Program output: -35                
Correct output: -42                 | Program output: -42                
Correct output: -99                 | Program output: -92                
Correct output: -76                 | Program output: -76                
Correct output: -71                 | Program output: -61                
Correct output: -51                 | Program output: 86                 
Correct output: 36                  | Program output: 55                 
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -87                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: 17                  | Program output: 38                 
Correct output: -62                 | Program output: 75                 
Correct output: -65                 | Program output: -16                
Correct output: -25                 | Program output: 17                 
Correct output: -70                 | Program output: -70                
Correct output: -70                 | Program output: -41                
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -63                 | Program output: -63                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Lexicase best program: (in3 in4 integer_min integer_gt boolean_swap print_integer boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and) exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove () exec_s (boolean_swap exec_shove (exec_do*while (integer_pop boolean_stackdepth print_integer))) () ()) () ())) ()) ()))
Lexicase best errors: [0 1 0 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 55
Percent parens: 0.364
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Zero cases best program: (in3 in4 integer_min integer_gt boolean_swap print_integer boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and) exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove () exec_s (boolean_swap exec_shove (exec_do*while (integer_pop boolean_stackdepth print_integer))) () ()) () ())) ()) ()))
Zero cases best errors: [0 1 0 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 55
Percent parens: 0.364
--- Lexicase Population Statistics ---
Count of elite individuals by case: (125 234 433 300 301 234 275 274 433 234)
Population mean number of elite cases: 2.84
Count of perfect (error zero) individuals by case: (125 234 433 300 301 234 275 274 433 234)
Population mean number of perfect (error zero) cases: 2.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Best program: (in3 in4 integer_min integer_gt boolean_swap print_integer boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and) exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove () exec_s (boolean_swap exec_shove (exec_do*while (integer_pop boolean_stackdepth print_integer))) () ()) () ())) ()) ()))
Errors: [0 1 0 0 0 1 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 35
Size: 55
Percent parens: 0.364
--- Population Statistics ---
Average total errors in population: 7.157
Median total errors in population: 7
Error averages by case: (0.875 0.766 0.567 0.7 0.699 0.766 0.725 0.726 0.567 0.766)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.386
Average program size in population (points): 74.336
Average percent parens in population: 0.254
Minimum age in population: 28.34603881835938
Maximum age in population: 32.52179527282715
Average age in population: 30.75733111381531
Median age in population: 30.82199382781982
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 67
Genome diversity (% unique genomes):	 0.749
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 70
Syntactic diversity (% unique Push programs):	 0.742
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 19310578
--- Timings ---
Current time: 1559584878385 milliseconds
Total Time:          74.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        43.0 seconds, 57.5%
Fitness Testing:     20.9 seconds, 27.9%
Report:              10.8 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 430
Test mean error for best: 0.43000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -82                 | Program output: -82                
Correct output: 63                  | Program output: 63                 
Correct output: -43                 | Program output: -43                
Correct output: -71                 | Program output: 65                 
Correct output: -7                  | Program output: 8                  
Correct output: -71                 | Program output: 14                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 81                 
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 23                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 78                 
Correct output: 51                  | Program output: 51                 
Correct output: 48                  | Program output: 56                 
Correct output: 2                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output: 46                 
Correct output: 12                  | Program output: 92                 
Correct output: 40                  | Program output: 56                 
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 19                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 41                 
Correct output: 40                  | Program output: 40                 
Correct output: 13                  | Program output: 20                 
Correct output: 5                   | Program output: 5                  
Correct output: 9                   | Program output: 9                  
Correct output: 1                   | Program output: 53                 
Correct output: 45                  | Program output: 45                 
Correct output: -87                 | Program output: -41                
Correct output: -90                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -29                 | Program output: -29                
Correct output: -18                 | Program output: 43                 
Correct output: -55                 | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: -4                 
Correct output: -95                 | Program output: -93                
Correct output: -91                 | Program output: 66                 
Correct output: -61                 | Program output: 57                 
Correct output: -81                 | Program output: -81                
Correct output: -84                 | Program output: -79                
Correct output: -70                 | Program output: 65                 
Correct output: 3                   | Program output: 20                 
Correct output: -88                 | Program output: -54                
Correct output: -86                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -62                 | Program output: -62                
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: -62                
Correct output: -66                 | Program output: 58                 
Correct output: -22                 | Program output: 9                  
Correct output: -51                 | Program output: -51                
Correct output: 4                   | Program output: 4                  
Correct output: -49                 | Program output: -49                
Correct output: -53                 | Program output: -23                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -26                
Correct output: -61                 | Program output: 5                  
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: 50                 
Correct output: -42                 | Program output: -35                
Correct output: -42                 | Program output: -42                
Correct output: -99                 | Program output: -92                
Correct output: -76                 | Program output: -76                
Correct output: -71                 | Program output: -61                
Correct output: -51                 | Program output: 86                 
Correct output: 36                  | Program output: 55                 
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -87                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: 17                  | Program output: 38                 
Correct output: -62                 | Program output: 75                 
Correct output: -65                 | Program output: -16                
Correct output: -25                 | Program output: 17                 
Correct output: -70                 | Program output: -70                
Correct output: -70                 | Program output: -41                
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -63                 | Program output: -63                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Lexicase best program: (in3 in4 integer_min integer_gt boolean_swap print_integer boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and) exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove () exec_s (boolean_swap exec_shove (exec_do*while (integer_pop boolean_stackdepth print_integer))) () ()) () ())) ()) ()))
Lexicase best errors: [0 0 1 0 1 1 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 55
Percent parens: 0.364
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Zero cases best program: (in3 in4 integer_min integer_gt boolean_swap print_integer boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and) exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove () exec_s (boolean_swap exec_shove (exec_do*while (integer_pop boolean_stackdepth print_integer))) () ()) () ())) ()) ()))
Zero cases best errors: [0 0 1 0 1 1 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 55
Percent parens: 0.364
--- Lexicase Population Statistics ---
Count of elite individuals by case: (401 405 298 405 298 220 2 3 405 297)
Population mean number of elite cases: 2.73
Count of perfect (error zero) individuals by case: (401 405 298 405 298 220 2 3 405 297)
Population mean number of perfect (error zero) cases: 2.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Best program: (in3 in4 integer_min integer_gt boolean_swap print_integer boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and) integer_div exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove () exec_s (boolean_swap exec_shove (exec_do*while (integer_pop boolean_stackdepth print_integer))) () ()) () ())) ()) ())
Errors: [0 0 1 0 1 1 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 35
Size: 54
Percent parens: 0.352
--- Population Statistics ---
Average total errors in population: 7.266
Median total errors in population: 7
Error averages by case: (0.599 0.595 0.702 0.595 0.702 0.78 0.998 0.997 0.595 0.703)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.391
Average program size in population (points): 63.422
Average percent parens in population: 0.291
Minimum age in population: 29.39236450195312
Maximum age in population: 34.24527740478516
Average age in population: 32.81913648796082
Median age in population: 32.77494239807129
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 249
Genome diversity (% unique genomes):	 0.627
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 256
Syntactic diversity (% unique Push programs):	 0.615
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 20392330
--- Timings ---
Current time: 1559584882387 milliseconds
Total Time:          78.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.2 seconds, 57.3%
Fitness Testing:     22.2 seconds, 28.1%
Report:              11.4 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -82                 | Program output: -16                
Correct output: 63                  | Program output: 63                 
Correct output: -43                 | Program output: -12                
Correct output: -71                 | Program output: -71                
Correct output: -7                  | Program output: -7                 
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: -22                 | Program output: 66                 
Correct output: 22                  | Program output: 23                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: 51                  | Program output: 63                 
Correct output: 48                  | Program output: 97                 
Correct output: 2                   | Program output: 62                 
Correct output: 2                   | Program output: 71                 
Correct output: 12                  | Program output: 94                 
Correct output: 12                  | Program output: 15                 
Correct output: 40                  | Program output: 82                 
Correct output: 10                  | Program output: 19                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 90                 
Correct output: 7                   | Program output: 43                 
Correct output: 4                   | Program output: 34                 
Correct output: 32                  | Program output: 32                 
Correct output: 40                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 5                   | Program output: 63                 
Correct output: 9                   | Program output: 79                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 96                 
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: 72                 
Correct output: -29                 | Program output: 1                  
Correct output: -18                 | Program output: 8                  
Correct output: -55                 | Program output: -55                
Correct output: -86                 | Program output: -19                
Correct output: -77                 | Program output: 97                 
Correct output: -95                 | Program output: 19                 
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output: 36                 
Correct output: -81                 | Program output: -57                
Correct output: -84                 | Program output: 35                 
Correct output: -70                 | Program output: -70                
Correct output: 3                   | Program output: 13                 
Correct output: -88                 | Program output: -88                
Correct output: -86                 | Program output: 89                 
Correct output: -51                 | Program output: 72                 
Correct output: -62                 | Program output: 71                 
Correct output: -77                 | Program output: 29                 
Correct output: -71                 | Program output: -71                
Correct output: -66                 | Program output: -39                
Correct output: -22                 | Program output: -22                
Correct output: -51                 | Program output: 3                  
Correct output: 4                   | Program output: 19                 
Correct output: -49                 | Program output: 51                 
Correct output: -53                 | Program output: 99                 
Correct output: -71                 | Program output: 9                  
Correct output: -86                 | Program output: -86                
Correct output: -61                 | Program output: -61                
Correct output: -92                 | Program output: -44                
Correct output: -57                 | Program output: -46                
Correct output: -100                | Program output: 13                 
Correct output: -85                 | Program output: -55                
Correct output: -41                 | Program output: -41                
Correct output: -42                 | Program output: -19                
Correct output: -42                 | Program output: 36                 
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: 27                 
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: -23                
Correct output: 36                  | Program output: 59                 
Correct output: -78                 | Program output: -23                
Correct output: -87                 | Program output: -6                 
Correct output: -87                 | Program output: 1                  
Correct output: -44                 | Program output: -44                
Correct output: -81                 | Program output: -4                 
Correct output: 17                  | Program output: 17                 
Correct output: -62                 | Program output: -62                
Correct output: -65                 | Program output: 85                 
Correct output: -25                 | Program output: -25                
Correct output: -70                 | Program output: 58                 
Correct output: -70                 | Program output: 7                  
Correct output: -97                 | Program output: -2                 
Correct output: -92                 | Program output: -5                 
Correct output: -77                 | Program output: -11                
Correct output: -72                 | Program output: 15                 
Correct output: -43                 | Program output: 42                 
Correct output: -63                 | Program output: -12                
Correct output: -76                 | Program output: 32                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction 75} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction tagged_706} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_rot})
Lexicase best program: (in2 exec_pop (in3 in3 in4 integer_shove in3 in4 integer_shove in3 in3 in4 integer_shove integer_gt) boolean_swap print_integer boolean_xor integer_stackdepth exec_do*times (boolean_not exec_y (boolean_invert_second_then_and exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times (exec_yankdup) exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove (print_integer boolean_swap boolean_stackdepth print_integer) boolean_dup 75) (integer_eq boolean_xor boolean_and boolean_yank tagged_706 integer_dup_items in2) (integer_empty) exec_y_when_autoconstructing (boolean_flush integer_dec boolean_invert_second_then_and)) integer_lt integer_max) (boolean_pop exec_when (boolean_shove integer_rot)) ()) ()))))
Lexicase best errors: [0 1 1 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 80
Percent parens: 0.225
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction 75} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction tagged_706} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_rot})
Zero cases best program: (in2 exec_pop (in3 in3 in4 integer_shove in3 in4 integer_shove in3 in3 in4 integer_shove integer_gt) boolean_swap print_integer boolean_xor integer_stackdepth exec_do*times (boolean_not exec_y (boolean_invert_second_then_and exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times (exec_yankdup) exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove (print_integer boolean_swap boolean_stackdepth print_integer) boolean_dup 75) (integer_eq boolean_xor boolean_and boolean_yank tagged_706 integer_dup_items in2) (integer_empty) exec_y_when_autoconstructing (boolean_flush integer_dec boolean_invert_second_then_and)) integer_lt integer_max) (boolean_pop exec_when (boolean_shove integer_rot)) ()) ()))))
Zero cases best errors: [0 1 1 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 80
Percent parens: 0.225
--- Lexicase Population Statistics ---
Count of elite individuals by case: (283 262 262 281 283 262 938 283 935 283)
Population mean number of elite cases: 4.07
Count of perfect (error zero) individuals by case: (283 262 262 281 283 262 938 283 935 283)
Population mean number of perfect (error zero) cases: 4.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction 75} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction tagged_706} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_rot})
Best program: (in2 exec_pop (in3 in3 in4 integer_shove in3 in4 integer_shove in3 in3 in4 integer_shove integer_gt) boolean_swap print_integer boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove (print_integer boolean_swap boolean_stackdepth print_integer) boolean_dup 75) (integer_eq boolean_xor boolean_and boolean_yank tagged_706 integer_dup_items in2) (integer_empty exec_y_when_autoconstructing (boolean_flush integer_dec boolean_invert_second_then_and)) integer_lt integer_max) boolean_pop exec_when (boolean_shove integer_rot)) ()) ())))
Errors: [0 1 1 0 0 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 62
Size: 80
Percent parens: 0.225
--- Population Statistics ---
Average total errors in population: 5.928
Median total errors in population: 5
Error averages by case: (0.717 0.738 0.738 0.719 0.717 0.738 0.062 0.717 0.065 0.717)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.082
Average program size in population (points): 64.031
Average percent parens in population: 0.300
Minimum age in population: 30.89245986938477
Maximum age in population: 35.77500629425049
Average age in population: 34.35559071397781
Median age in population: 34.51010990142822
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 153
Genome diversity (% unique genomes):	 0.65
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 156
Syntactic diversity (% unique Push programs):	 0.64
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 21434505
--- Timings ---
Current time: 1559584887076 milliseconds
Total Time:          82.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.2 seconds, 57.1%
Fitness Testing:     23.4 seconds, 28.3%
Report:              12.0 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -82                 | Program output: -16                
Correct output: 63                  | Program output: 63                 
Correct output: -43                 | Program output: -43                
Correct output: -71                 | Program output: -71                
Correct output: -7                  | Program output: -7                 
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 23                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: 51                  | Program output: 63                 
Correct output: 48                  | Program output: 97                 
Correct output: 2                   | Program output: 62                 
Correct output: 2                   | Program output: 71                 
Correct output: 12                  | Program output: 94                 
Correct output: 12                  | Program output: 15                 
Correct output: 40                  | Program output: 82                 
Correct output: 10                  | Program output: 19                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 90                 
Correct output: 7                   | Program output: 43                 
Correct output: 4                   | Program output: 34                 
Correct output: 32                  | Program output: 32                 
Correct output: 40                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 5                   | Program output: 63                 
Correct output: 9                   | Program output: 79                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 96                 
Correct output: -87                 | Program output: -41                
Correct output: -90                 | Program output: 10                 
Correct output: -62                 | Program output: -26                
Correct output: -29                 | Program output: 62                 
Correct output: -18                 | Program output: 8                  
Correct output: -55                 | Program output: -55                
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: 10                 
Correct output: -95                 | Program output: -93                
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output: 36                 
Correct output: -81                 | Program output: -13                
Correct output: -84                 | Program output: -79                
Correct output: -70                 | Program output: -70                
Correct output: 3                   | Program output: 13                 
Correct output: -88                 | Program output: -27                
Correct output: -86                 | Program output: 85                 
Correct output: -51                 | Program output: 92                 
Correct output: -62                 | Program output: 66                 
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: 73                 
Correct output: -66                 | Program output: -39                
Correct output: -22                 | Program output: -22                
Correct output: -51                 | Program output: 3                  
Correct output: 4                   | Program output: 19                 
Correct output: -49                 | Program output: -7                 
Correct output: -53                 | Program output: 99                 
Correct output: -71                 | Program output: 99                 
Correct output: -86                 | Program output: 18                 
Correct output: -61                 | Program output: -61                
Correct output: -92                 | Program output: 48                 
Correct output: -57                 | Program output: -46                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -3                 
Correct output: -41                 | Program output: -41                
Correct output: -42                 | Program output: -16                
Correct output: -42                 | Program output: 36                 
Correct output: -99                 | Program output: -66                
Correct output: -76                 | Program output: 27                 
Correct output: -71                 | Program output: 15                 
Correct output: -51                 | Program output: -23                
Correct output: 36                  | Program output: 59                 
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -87                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: 54                 
Correct output: -81                 | Program output: -10                
Correct output: 17                  | Program output: 17                 
Correct output: -62                 | Program output: -62                
Correct output: -65                 | Program output: 94                 
Correct output: -25                 | Program output: -25                
Correct output: -70                 | Program output: 27                 
Correct output: -70                 | Program output: 7                  
Correct output: -97                 | Program output: 84                 
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: 40                 
Correct output: -72                 | Program output: -65                
Correct output: -43                 | Program output: 31                 
Correct output: -63                 | Program output: -12                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction 75} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction tagged_706} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_rot})
Lexicase best program: (in2 boolean_eq in3 in3 in4 integer_shove in3 in4 integer_shove in3 in3 in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove (print_integer boolean_swap boolean_stackdepth print_integer) boolean_dup 75) (integer_eq boolean_xor boolean_and boolean_yank tagged_706 integer_dup_items in2) (integer_empty exec_y_when_autoconstructing (boolean_flush integer_dec boolean_invert_second_then_and)) integer_lt integer_max) boolean_pop exec_when (boolean_shove integer_rot)) ()) ())))
Lexicase best errors: [0 1 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 79
Percent parens: 0.215
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction 75} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction tagged_706} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_rot})
Zero cases best program: (in2 boolean_eq in3 in3 in4 integer_shove in3 in4 integer_shove in3 in3 in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove (print_integer boolean_swap boolean_stackdepth print_integer) boolean_dup 75) (integer_eq boolean_xor boolean_and boolean_yank tagged_706 integer_dup_items in2) (integer_empty exec_y_when_autoconstructing (boolean_flush integer_dec boolean_invert_second_then_and)) integer_lt integer_max) boolean_pop exec_when (boolean_shove integer_rot)) ()) ())))
Zero cases best errors: [0 1 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 79
Percent parens: 0.215
--- Lexicase Population Statistics ---
Count of elite individuals by case: (15 2 582 935 354 582 15 337 934 2)
Population mean number of elite cases: 3.76
Count of perfect (error zero) individuals by case: (15 2 582 935 354 582 15 337 934 2)
Population mean number of perfect (error zero) cases: 3.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction 75} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction tagged_706} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_rot})
Best program: (in2 exec_pop () in3 in3 in4 integer_shove in3 in4 integer_shove in3 in3 in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove (print_integer boolean_swap boolean_stackdepth print_integer) boolean_dup 75) (integer_eq boolean_xor boolean_and boolean_yank tagged_706 integer_dup_items in2) (integer_empty exec_y_when_autoconstructing (boolean_flush integer_dec boolean_invert_second_then_and)) integer_lt integer_max) boolean_pop exec_when (boolean_shove integer_rot)) ()) ())))
Errors: [0 1 0 0 0 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 62
Size: 80
Percent parens: 0.225
--- Population Statistics ---
Average total errors in population: 6.242
Median total errors in population: 6
Error averages by case: (0.985 0.998 0.418 0.065 0.646 0.418 0.985 0.663 0.066 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.046
Average program size in population (points): 70.798
Average percent parens in population: 0.265
Minimum age in population: 32.01103973388672
Maximum age in population: 37.71634340286255
Average age in population: 35.79136671209335
Median age in population: 35.87630295753479
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 53
Genome diversity (% unique genomes):	 0.764
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.76
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 22502685
--- Timings ---
Current time: 1559584891815 milliseconds
Total Time:          87.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.1 seconds, 56.2%
Fitness Testing:     24.7 seconds, 28.3%
Report:              13.5 seconds, 15.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -82                 | Program output: -16                
Correct output: 63                  | Program output: 63                 
Correct output: -43                 | Program output: -12                
Correct output: -71                 | Program output: -71                
Correct output: -7                  | Program output: -7                 
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: -22                 | Program output: 66                 
Correct output: 22                  | Program output: 23                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: 51                  | Program output: 63                 
Correct output: 48                  | Program output: 97                 
Correct output: 2                   | Program output: 62                 
Correct output: 2                   | Program output: 71                 
Correct output: 12                  | Program output: 94                 
Correct output: 12                  | Program output: 15                 
Correct output: 40                  | Program output: 82                 
Correct output: 10                  | Program output: 19                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 90                 
Correct output: 7                   | Program output: 43                 
Correct output: 4                   | Program output: 34                 
Correct output: 32                  | Program output: 32                 
Correct output: 40                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 5                   | Program output: 63                 
Correct output: 9                   | Program output: 79                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 96                 
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: 72                 
Correct output: -29                 | Program output: 1                  
Correct output: -18                 | Program output: 8                  
Correct output: -55                 | Program output: -55                
Correct output: -86                 | Program output: -19                
Correct output: -77                 | Program output: 97                 
Correct output: -95                 | Program output: 19                 
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output: 36                 
Correct output: -81                 | Program output: -57                
Correct output: -84                 | Program output: 35                 
Correct output: -70                 | Program output: -70                
Correct output: 3                   | Program output: 13                 
Correct output: -88                 | Program output: -88                
Correct output: -86                 | Program output: 89                 
Correct output: -51                 | Program output: 72                 
Correct output: -62                 | Program output: 71                 
Correct output: -77                 | Program output: 29                 
Correct output: -71                 | Program output: -71                
Correct output: -66                 | Program output: -39                
Correct output: -22                 | Program output: -22                
Correct output: -51                 | Program output: 3                  
Correct output: 4                   | Program output: 19                 
Correct output: -49                 | Program output: 51                 
Correct output: -53                 | Program output: 99                 
Correct output: -71                 | Program output: 9                  
Correct output: -86                 | Program output: -86                
Correct output: -61                 | Program output: -61                
Correct output: -92                 | Program output: -44                
Correct output: -57                 | Program output: -46                
Correct output: -100                | Program output: 13                 
Correct output: -85                 | Program output: -55                
Correct output: -41                 | Program output: -41                
Correct output: -42                 | Program output: -19                
Correct output: -42                 | Program output: 36                 
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: 27                 
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: -23                
Correct output: 36                  | Program output: 59                 
Correct output: -78                 | Program output: -23                
Correct output: -87                 | Program output: -6                 
Correct output: -87                 | Program output: 1                  
Correct output: -44                 | Program output: -44                
Correct output: -81                 | Program output: -4                 
Correct output: 17                  | Program output: 17                 
Correct output: -62                 | Program output: -62                
Correct output: -65                 | Program output: 85                 
Correct output: -25                 | Program output: -25                
Correct output: -70                 | Program output: 58                 
Correct output: -70                 | Program output: 7                  
Correct output: -97                 | Program output: -2                 
Correct output: -92                 | Program output: -5                 
Correct output: -77                 | Program output: -11                
Correct output: -72                 | Program output: 15                 
Correct output: -43                 | Program output: 42                 
Correct output: -63                 | Program output: -12                
Correct output: -76                 | Program output: 32                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot})
Lexicase best program: (in2 exec_pop () in3 in3 in4 integer_shove in3 exec_stackdepth boolean_rot boolean_and exec_s_when_autoconstructing (integer_eq integer_lte boolean_yankdup in2 integer_div) (print_integer boolean_swap) (exec_shove (exec_flush) integer_pop boolean_flush integer_div integer_dup_items boolean_swap exec_shove (exec_flush integer_pop boolean_stackdepth integer_gte in2 exec_s_when_autoconstructing (boolean_yankdup integer_rot) () ())))
Lexicase best errors: [0 1 1 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 44
Percent parens: 0.227
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot})
Zero cases best program: (in2 exec_pop () in3 in3 in4 integer_shove in3 exec_stackdepth boolean_rot boolean_and exec_s_when_autoconstructing (integer_eq integer_lte boolean_yankdup in2 integer_div) (print_integer boolean_swap) (exec_shove (exec_flush) integer_pop boolean_flush integer_div integer_dup_items boolean_swap exec_shove (exec_flush integer_pop boolean_stackdepth integer_gte in2 exec_s_when_autoconstructing (boolean_yankdup integer_rot) () ())))
Zero cases best errors: [0 1 1 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 44
Percent parens: 0.227
--- Lexicase Population Statistics ---
Count of elite individuals by case: (441 69 154 67 7 442 251 918 154 442)
Population mean number of elite cases: 2.94
Count of perfect (error zero) individuals by case: (441 69 154 67 7 442 251 918 154 442)
Population mean number of perfect (error zero) cases: 2.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction 75} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction tagged_706} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_rot})
Best program: (in2 exec_pop (in3 in3 in4 integer_shove in3 in4 integer_shove in3 in3 in4 integer_shove integer_gt) boolean_swap print_integer boolean_xor integer_stackdepth exec_do*times (boolean_not exec_y (boolean_invert_second_then_and exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove (print_integer boolean_swap boolean_stackdepth print_integer) boolean_dup 75) (integer_eq boolean_xor boolean_and boolean_yank tagged_706 integer_dup_items in2) (integer_empty exec_y_when_autoconstructing (boolean_flush integer_dec boolean_invert_second_then_and)) integer_lt integer_max) boolean_pop exec_when (boolean_shove integer_rot)) ()) ()))))
Errors: [0 1 1 1 0 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 62
Size: 80
Percent parens: 0.225
--- Population Statistics ---
Average total errors in population: 7.055
Median total errors in population: 7
Error averages by case: (0.559 0.931 0.846 0.933 0.993 0.558 0.749 0.082 0.846 0.558)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.603
Average program size in population (points): 71.429
Average percent parens in population: 0.253
Minimum age in population: 33.01103973388672
Maximum age in population: 38.6551399230957
Average age in population: 37.37140972507
Median age in population: 37.41218495368958
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 76
Genome diversity (% unique genomes):	 0.649
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 78
Syntactic diversity (% unique Push programs):	 0.639
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 23656303
--- Timings ---
Current time: 1559584896762 milliseconds
Total Time:          92.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.9 seconds, 55.2%
Fitness Testing:     26.4 seconds, 28.6%
Report:              14.9 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 626
Test mean error for best: 0.62600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -82                 | Program output: -16                
Correct output: 63                  | Program output: 97                 
Correct output: -43                 | Program output: -12                
Correct output: -71                 | Program output: 65                 
Correct output: -7                  | Program output: 8                  
Correct output: -71                 | Program output: 14                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 81                 
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 22                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 96                 
Correct output: 51                  | Program output: 65                 
Correct output: 48                  | Program output: 48                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 79                 
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 40                  | Program output: 40                 
Correct output: 10                  | Program output: 21                 
Correct output: 3                   | Program output: 45                 
Correct output: 13                  | Program output: 72                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 43                 
Correct output: 32                  | Program output: 56                 
Correct output: 40                  | Program output: 76                 
Correct output: 13                  | Program output: 89                 
Correct output: 5                   | Program output: 60                 
Correct output: 9                   | Program output: 51                 
Correct output: 1                   | Program output: 60                 
Correct output: 45                  | Program output: 50                 
Correct output: -87                 | Program output: -46                
Correct output: -90                 | Program output: 20                 
Correct output: -62                 | Program output: 25                 
Correct output: -29                 | Program output: 85                 
Correct output: -18                 | Program output: -18                
Correct output: -55                 | Program output: 2                  
Correct output: -86                 | Program output: -10                
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -37                
Correct output: -61                 | Program output: -61                
Correct output: -81                 | Program output: -19                
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: -51                
Correct output: 3                   | Program output: 3                  
Correct output: -88                 | Program output: -9                 
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: 23                 
Correct output: -62                 | Program output: 77                 
Correct output: -77                 | Program output: 27                 
Correct output: -71                 | Program output: -50                
Correct output: -66                 | Program output: -66                
Correct output: -22                 | Program output: 77                 
Correct output: -51                 | Program output: 46                 
Correct output: 4                   | Program output: 24                 
Correct output: -49                 | Program output: -7                 
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: 76                 
Correct output: -86                 | Program output: -68                
Correct output: -61                 | Program output: -48                
Correct output: -92                 | Program output: 12                 
Correct output: -57                 | Program output: -5                 
Correct output: -100                | Program output: 15                 
Correct output: -85                 | Program output: -60                
Correct output: -41                 | Program output: 31                 
Correct output: -42                 | Program output: -42                
Correct output: -42                 | Program output: 12                 
Correct output: -99                 | Program output: -30                
Correct output: -76                 | Program output: -31                
Correct output: -71                 | Program output: -53                
Correct output: -51                 | Program output: -51                
Correct output: 36                  | Program output: 36                 
Correct output: -78                 | Program output: -26                
Correct output: -87                 | Program output: 9                  
Correct output: -87                 | Program output: 93                 
Correct output: -44                 | Program output: 5                  
Correct output: -81                 | Program output: -14                
Correct output: 17                  | Program output: 65                 
Correct output: -62                 | Program output: -29                
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: 99                 
Correct output: -70                 | Program output: -56                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: 60                 
Correct output: -92                 | Program output: 30                 
Correct output: -77                 | Program output: 28                 
Correct output: -72                 | Program output: -72                
Correct output: -43                 | Program output: 34                 
Correct output: -63                 | Program output: -12                
Correct output: -76                 | Program output: 70                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Lexicase best program: (in3 integer_shove integer_gt in1 print_integer boolean_xor integer_stackdepth integer_fromboolean exec_dup_items exec_y (integer_stackdepth) integer_swap exec_pop () exec_if (boolean_rot exec_rot (integer_div boolean_invert_second_then_and) (integer_swap exec_pop () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove () exec_s (boolean_swap exec_shove (exec_do*while (integer_pop boolean_stackdepth print_integer))) () ()) () ()))) ())
Lexicase best errors: [0 1 1 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 55
Percent parens: 0.345
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer})
Zero cases best program: (in3 integer_shove integer_gt in1 print_integer boolean_xor integer_stackdepth integer_fromboolean exec_dup_items exec_y (integer_stackdepth) integer_swap exec_pop () exec_if (boolean_rot exec_rot (integer_div boolean_invert_second_then_and) (integer_swap exec_pop () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove () exec_s (boolean_swap exec_shove (exec_do*while (integer_pop boolean_stackdepth print_integer))) () ()) () ()))) ())
Zero cases best errors: [0 1 1 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 55
Percent parens: 0.345
--- Lexicase Population Statistics ---
Count of elite individuals by case: (221 322 204 913 901 222 379 913 223 151)
Population mean number of elite cases: 4.45
Count of perfect (error zero) individuals by case: (221 322 204 913 901 222 379 913 223 151)
Population mean number of perfect (error zero) cases: 4.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction print_exec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction 75} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction tagged_706} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_rot})
Best program: (in3 integer_shove integer_gt in1 print_integer boolean_xor integer_stackdepth integer_fromboolean exec_dup_items exec_y (integer_stackdepth integer_swap exec_pop () exec_if (boolean_rot exec_dup_times (integer_div boolean_invert_second_then_and) integer_swap exec_pop () exec_if (boolean_rot exec_dup_times (boolean_empty integer_div boolean_rot) integer_dup_items) (integer_dup_times) integer_empty) (print_exec (integer_max exec_do*times (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove (print_integer boolean_swap boolean_stackdepth print_integer) boolean_dup 75) (integer_eq boolean_xor boolean_and boolean_yank tagged_706 integer_dup_items in2) (integer_empty exec_y_when_autoconstructing (boolean_flush integer_dec boolean_invert_second_then_and)) integer_lt integer_max) boolean_pop exec_when (boolean_shove integer_rot))))))
Errors: [0 1 1 0 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 64
Size: 83
Percent parens: 0.229
--- Population Statistics ---
Average total errors in population: 5.551
Median total errors in population: 5
Error averages by case: (0.779 0.678 0.796 0.087 0.099 0.778 0.621 0.087 0.777 0.849)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.091
Average program size in population (points): 71.083
Average percent parens in population: 0.239
Minimum age in population: 34.01103973388672
Maximum age in population: 40.43021541833878
Average age in population: 38.70232593637705
Median age in population: 38.69672352075577
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 70
Genome diversity (% unique genomes):	 0.645
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 70
Syntactic diversity (% unique Push programs):	 0.642
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 24671929
--- Timings ---
Current time: 1559584900955 milliseconds
Total Time:          97.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.8 seconds, 54.3%
Fitness Testing:     28.0 seconds, 28.7%
Report:              16.4 seconds, 16.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 582
Test mean error for best: 0.58200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -82                 | Program output: -16                
Correct output: 63                  | Program output: 97                 
Correct output: -43                 | Program output: -43                
Correct output: -71                 | Program output: -71                
Correct output: -7                  | Program output: -7                 
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 22                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 96                 
Correct output: 51                  | Program output: 65                 
Correct output: 48                  | Program output: 48                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 79                 
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 40                  | Program output: 40                 
Correct output: 10                  | Program output: 21                 
Correct output: 3                   | Program output: 45                 
Correct output: 13                  | Program output: 72                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 43                 
Correct output: 32                  | Program output: 56                 
Correct output: 40                  | Program output: 76                 
Correct output: 13                  | Program output: 89                 
Correct output: 5                   | Program output: 60                 
Correct output: 9                   | Program output: 51                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 50                 
Correct output: -87                 | Program output: -41                
Correct output: -90                 | Program output: 10                 
Correct output: -62                 | Program output: -26                
Correct output: -29                 | Program output: 62                 
Correct output: -18                 | Program output: -18                
Correct output: -55                 | Program output: -55                
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: 10                 
Correct output: -95                 | Program output: -93                
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output: -61                
Correct output: -81                 | Program output: -13                
Correct output: -84                 | Program output: -79                
Correct output: -70                 | Program output: -70                
Correct output: 3                   | Program output: 3                  
Correct output: -88                 | Program output: -27                
Correct output: -86                 | Program output: 85                 
Correct output: -51                 | Program output: 92                 
Correct output: -62                 | Program output: 66                 
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: 73                 
Correct output: -66                 | Program output: -39                
Correct output: -22                 | Program output: -22                
Correct output: -51                 | Program output: 46                 
Correct output: 4                   | Program output: 24                 
Correct output: -49                 | Program output: -7                 
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: 99                 
Correct output: -86                 | Program output: 18                 
Correct output: -61                 | Program output: -61                
Correct output: -92                 | Program output: 48                 
Correct output: -57                 | Program output: -46                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -3                 
Correct output: -41                 | Program output: -41                
Correct output: -42                 | Program output: -16                
Correct output: -42                 | Program output: 12                 
Correct output: -99                 | Program output: -66                
Correct output: -76                 | Program output: -31                
Correct output: -71                 | Program output: 15                 
Correct output: -51                 | Program output: -23                
Correct output: 36                  | Program output: 36                 
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -87                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: 54                 
Correct output: -81                 | Program output: -10                
Correct output: 17                  | Program output: 65                 
Correct output: -62                 | Program output: -62                
Correct output: -65                 | Program output: 94                 
Correct output: -25                 | Program output: -25                
Correct output: -70                 | Program output: 27                 
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: 84                 
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: 40                 
Correct output: -72                 | Program output: -65                
Correct output: -43                 | Program output: 31                 
Correct output: -63                 | Program output: -12                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction tagged_706})
Lexicase best program: (in3 integer_shove integer_gt in1 in2 exec_pop () in3 in3 in4 integer_shove in3 in2 integer_shove integer_gt boolean_swap in3 in3 in4 integer_shove in3 in4 integer_shove in3 in3 in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove (print_integer boolean_swap boolean_stackdepth print_integer) boolean_yank tagged_706) () ())) ()) ())))
Lexicase best errors: [0 1 1 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 73
Percent parens: 0.219
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction tagged_706})
Zero cases best program: (in3 integer_shove integer_gt in1 in2 exec_pop () in3 in3 in4 integer_shove in3 in2 integer_shove integer_gt boolean_swap in3 in3 in4 integer_shove in3 in4 integer_shove in3 in3 in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove (print_integer boolean_swap boolean_stackdepth print_integer) boolean_yank tagged_706) () ())) ()) ())))
Zero cases best errors: [0 1 1 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 73
Percent parens: 0.219
--- Lexicase Population Statistics ---
Count of elite individuals by case: (98 381 8 172 102 504 384 383 183 99)
Population mean number of elite cases: 2.31
Count of perfect (error zero) individuals by case: (98 381 8 172 102 504 384 383 183 99)
Population mean number of perfect (error zero) cases: 2.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction tagged_706})
Best program: (in3 integer_shove integer_gt in1 in2 exec_pop () in3 in3 in4 integer_shove in3 in2 integer_shove integer_gt boolean_swap in3 in3 in4 integer_shove in3 in4 integer_shove in3 in3 in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove (print_integer boolean_swap boolean_stackdepth print_integer) boolean_yank tagged_706) () ())) ()) ())))
Errors: [0 1 1 1 0 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 57
Size: 73
Percent parens: 0.219
--- Population Statistics ---
Average total errors in population: 7.686
Median total errors in population: 8
Error averages by case: (0.902 0.619 0.992 0.828 0.898 0.496 0.616 0.617 0.817 0.901)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.998
Average program size in population (points): 72.912
Average percent parens in population: 0.245
Minimum age in population: 37.25432544946671
Maximum age in population: 41.96515345573425
Average age in population: 40.23761553868651
Median age in population: 40.32180520892143
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 24
Genome diversity (% unique genomes):	 0.782
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.769
Total error diversity:				 0.007
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.081
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 25753199
--- Timings ---
Current time: 1559584905658 milliseconds
Total Time:         101.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.9 seconds, 54.0%
Fitness Testing:     29.6 seconds, 29.1%
Report:              17.1 seconds, 16.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -82                 | Program output: -16                
Correct output: 63                  | Program output: 63                 
Correct output: -43                 | Program output: -43                
Correct output: -71                 | Program output: 65                 
Correct output: -7                  | Program output: 8                  
Correct output: -71                 | Program output: 14                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 81                 
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 23                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 86                 
Correct output: 51                  | Program output: 51                 
Correct output: 48                  | Program output: 58                 
Correct output: 2                   | Program output: 4                  
Correct output: 2                   | Program output: 86                 
Correct output: 12                  | Program output: 54                 
Correct output: 12                  | Program output: 93                 
Correct output: 40                  | Program output: 56                 
Correct output: 10                  | Program output: 45                 
Correct output: 3                   | Program output: 48                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 66                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 68                 
Correct output: 40                  | Program output: 40                 
Correct output: 13                  | Program output: 21                 
Correct output: 5                   | Program output: 5                  
Correct output: 9                   | Program output: 9                  
Correct output: 1                   | Program output: 64                 
Correct output: 45                  | Program output: 45                 
Correct output: -87                 | Program output: -41                
Correct output: -90                 | Program output: 10                 
Correct output: -62                 | Program output: -26                
Correct output: -29                 | Program output: 62                 
Correct output: -18                 | Program output: 43                 
Correct output: -55                 | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: 10                 
Correct output: -95                 | Program output: -93                
Correct output: -91                 | Program output: 98                 
Correct output: -61                 | Program output: 57                 
Correct output: -81                 | Program output: -13                
Correct output: -84                 | Program output: -79                
Correct output: -70                 | Program output: 65                 
Correct output: 3                   | Program output: 20                 
Correct output: -88                 | Program output: -27                
Correct output: -86                 | Program output: 85                 
Correct output: -51                 | Program output: 92                 
Correct output: -62                 | Program output: 66                 
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: 73                 
Correct output: -66                 | Program output: 58                 
Correct output: -22                 | Program output: 9                  
Correct output: -51                 | Program output: -51                
Correct output: 4                   | Program output: 42                 
Correct output: -49                 | Program output: -7                 
Correct output: -53                 | Program output: -23                
Correct output: -71                 | Program output: 99                 
Correct output: -86                 | Program output: 18                 
Correct output: -61                 | Program output: 5                  
Correct output: -92                 | Program output: 48                 
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -3                 
Correct output: -41                 | Program output: 52                 
Correct output: -42                 | Program output: -16                
Correct output: -42                 | Program output: -42                
Correct output: -99                 | Program output: -66                
Correct output: -76                 | Program output: -76                
Correct output: -71                 | Program output: 15                 
Correct output: -51                 | Program output: 86                 
Correct output: 36                  | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -87                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: 54                 
Correct output: -81                 | Program output: -10                
Correct output: 17                  | Program output: 75                 
Correct output: -62                 | Program output: 96                 
Correct output: -65                 | Program output: 94                 
Correct output: -25                 | Program output: 21                 
Correct output: -70                 | Program output: 27                 
Correct output: -70                 | Program output: -41                
Correct output: -97                 | Program output: 84                 
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: 40                 
Correct output: -72                 | Program output: -65                
Correct output: -43                 | Program output: 31                 
Correct output: -63                 | Program output: -63                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction tagged_706})
Lexicase best program: (in3 integer_shove integer_gt in1 in2 exec_pop () in3 in3 in4 integer_shove in3 in2 integer_shove exec_yank boolean_swap in3 in3 in4 integer_shove in3 in4 integer_shove in3 in3 in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove (print_integer boolean_swap boolean_stackdepth print_integer) boolean_yank tagged_706) () ())) ()) ())))
Lexicase best errors: [0 1 1 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 73
Percent parens: 0.219
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction tagged_706})
Zero cases best program: (in3 integer_shove integer_gt in1 in2 exec_pop () in3 in3 in4 integer_shove in3 in2 integer_shove exec_yank boolean_swap in3 in3 in4 integer_shove in3 in4 integer_shove in3 in3 in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove (print_integer boolean_swap boolean_stackdepth print_integer) boolean_yank tagged_706) () ())) ()) ())))
Zero cases best errors: [0 1 1 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 73
Percent parens: 0.219
--- Lexicase Population Statistics ---
Count of elite individuals by case: (107 215 8 173 133 147 534 534 305 133)
Population mean number of elite cases: 2.29
Count of perfect (error zero) individuals by case: (107 215 8 173 133 147 534 534 305 133)
Population mean number of perfect (error zero) cases: 2.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction tagged_706})
Best program: (in2 exec_pop () in3 in3 in4 integer_shove in3 in2 integer_shove integer_gt boolean_swap in3 in3 in4 boolean_swap in3 in3 in4 integer_shove in3 in4 integer_shove in3 in3 integer_shove in3 in3 in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove (print_integer boolean_swap boolean_stackdepth print_integer) boolean_yank tagged_706) () ())) ()) ())))
Errors: [1 1 1 0 0 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 60
Size: 76
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 7.711
Median total errors in population: 8
Error averages by case: (0.893 0.785 0.992 0.827 0.867 0.853 0.466 0.466 0.695 0.867)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.033
Average program size in population (points): 77.146
Average percent parens in population: 0.235
Minimum age in population: 38.94208002090454
Maximum age in population: 43.61034688353539
Average age in population: 42.09094860507548
Median age in population: 42.2437247633934
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 136
Genome diversity (% unique genomes):	 0.696
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 146
Syntactic diversity (% unique Push programs):	 0.671
Total error diversity:				 0.006
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.098
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 26970416
--- Timings ---
Current time: 1559584910376 milliseconds
Total Time:         106.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.7 seconds, 53.3%
Fitness Testing:     31.3 seconds, 29.5%
Report:              18.2 seconds, 17.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 628
Test mean error for best: 0.62800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -82                 | Program output: -16                
Correct output: 63                  | Program output: 63                 
Correct output: -43                 | Program output: -43                
Correct output: -71                 | Program output: 65                 
Correct output: -7                  | Program output: 8                  
Correct output: -71                 | Program output: 14                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 81                 
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 23                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 78                 
Correct output: 51                  | Program output: 74                 
Correct output: 48                  | Program output: 56                 
Correct output: 2                   | Program output: 46                 
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output: 46                 
Correct output: 12                  | Program output: 92                 
Correct output: 40                  | Program output: 65                 
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 19                 
Correct output: 13                  | Program output: 68                 
Correct output: 7                   | Program output: 20                 
Correct output: 4                   | Program output: 94                 
Correct output: 32                  | Program output: 41                 
Correct output: 40                  | Program output: 90                 
Correct output: 13                  | Program output: 20                 
Correct output: 5                   | Program output: 68                 
Correct output: 9                   | Program output: 19                 
Correct output: 1                   | Program output: 60                 
Correct output: 45                  | Program output: 73                 
Correct output: -87                 | Program output: -41                
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: -26                
Correct output: -29                 | Program output: 1                  
Correct output: -18                 | Program output: 47                 
Correct output: -55                 | Program output: 92                 
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -93                
Correct output: -91                 | Program output: 66                 
Correct output: -61                 | Program output: 93                 
Correct output: -81                 | Program output: -13                
Correct output: -84                 | Program output: -79                
Correct output: -70                 | Program output: 81                 
Correct output: 3                   | Program output: 57                 
Correct output: -88                 | Program output: -27                
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: 23                 
Correct output: -62                 | Program output: 77                 
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: -71                
Correct output: -66                 | Program output: 88                 
Correct output: -22                 | Program output: 16                 
Correct output: -51                 | Program output: -51                
Correct output: 4                   | Program output: 4                  
Correct output: -49                 | Program output: -7                 
Correct output: -53                 | Program output: -23                
Correct output: -71                 | Program output: 76                 
Correct output: -86                 | Program output: -86                
Correct output: -61                 | Program output: 76                 
Correct output: -92                 | Program output: -44                
Correct output: -57                 | Program output: -5                 
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -3                 
Correct output: -41                 | Program output: 50                 
Correct output: -42                 | Program output: -16                
Correct output: -42                 | Program output: -42                
Correct output: -99                 | Program output: -66                
Correct output: -76                 | Program output: -76                
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: 88                 
Correct output: 36                  | Program output: 55                 
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -87                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: 54                 
Correct output: -81                 | Program output: -10                
Correct output: 17                  | Program output: 38                 
Correct output: -62                 | Program output: 75                 
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: 17                 
Correct output: -70                 | Program output: -56                
Correct output: -70                 | Program output: -41                
Correct output: -97                 | Program output: -2                 
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: -11                
Correct output: -72                 | Program output: -65                
Correct output: -43                 | Program output: 34                 
Correct output: -63                 | Program output: -12                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction 75} {:close 0, :instruction tagged_706} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction tagged_706})
Lexicase best program: (in2 exec_pop () exec_k_when_autoconstructing (in3 in4 integer_shove in3 in2 integer_shove integer_gt boolean_swap) (in3 in3 in4 integer_shove in3 in4 integer_shove integer_lte in3 in4 integer_shove integer_gt) boolean_swap print_integer boolean_not integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove (integer_yankdup boolean_swap boolean_stackdepth print_integer) boolean_dup 75) (tagged_706 integer_dup_items in2) (boolean_swap boolean_stackdepth print_integer) boolean_yank tagged_706)) ()) ())))
Lexicase best errors: [1 0 0 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 79
Percent parens: 0.228
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction 75} {:close 0, :instruction tagged_706} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction tagged_706})
Zero cases best program: (in2 exec_pop () exec_k_when_autoconstructing (in3 in4 integer_shove in3 in2 integer_shove integer_gt boolean_swap) (in3 in3 in4 integer_shove in3 in4 integer_shove integer_lte in3 in4 integer_shove integer_gt) boolean_swap print_integer boolean_not integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove (integer_yankdup boolean_swap boolean_stackdepth print_integer) boolean_dup 75) (tagged_706 integer_dup_items in2) (boolean_swap boolean_stackdepth print_integer) boolean_yank tagged_706)) ()) ())))
Zero cases best errors: [1 0 0 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 79
Percent parens: 0.228
--- Lexicase Population Statistics ---
Count of elite individuals by case: (169 541 237 563 902 205 16 206 563 16)
Population mean number of elite cases: 3.42
Count of perfect (error zero) individuals by case: (169 541 237 563 902 205 16 206 563 16)
Population mean number of perfect (error zero) cases: 3.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 2, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction tagged_706})
Best program: (in3 integer_shove integer_gt in1 in2 exec_pop () in3 in3 in4 integer_shove in3 in2 integer_shove integer_gt boolean_swap in3 in3 in4 integer_shove in3 integer_shove integer_shove in3 in3 in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove (print_integer boolean_swap boolean_stackdepth print_integer) boolean_yank tagged_706) () ())) ()) ())))
Errors: [0 0 1 0 0 0 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 57
Size: 73
Percent parens: 0.219
--- Population Statistics ---
Average total errors in population: 6.582
Median total errors in population: 6
Error averages by case: (0.831 0.459 0.763 0.437 0.098 0.795 0.984 0.794 0.437 0.984)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.579
Average program size in population (points): 75.124
Average percent parens in population: 0.232
Minimum age in population: 41.14909291267395
Maximum age in population: 45.2437247633934
Average age in population: 43.76227070238441
Median age in population: 43.78378870338202
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 94
Genome diversity (% unique genomes):	 0.656
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 105
Syntactic diversity (% unique Push programs):	 0.621
Total error diversity:				 0.008
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.102
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 28232113
--- Timings ---
Current time: 1559584915264 milliseconds
Total Time:         111.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.6 seconds, 52.7%
Fitness Testing:     33.2 seconds, 29.9%
Report:              19.2 seconds, 17.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 537
Test mean error for best: 0.53700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -82                 | Program output: -16                
Correct output: 63                  | Program output: 97                 
Correct output: -43                 | Program output: -12                
Correct output: -71                 | Program output: -71                
Correct output: -7                  | Program output: -7                 
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 22                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 96                 
Correct output: 51                  | Program output: 65                 
Correct output: 48                  | Program output: 48                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 40                  | Program output: 40                 
Correct output: 10                  | Program output: 21                 
Correct output: 3                   | Program output: 45                 
Correct output: 13                  | Program output: 72                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 43                 
Correct output: 32                  | Program output: 56                 
Correct output: 40                  | Program output: 76                 
Correct output: 13                  | Program output: 89                 
Correct output: 5                   | Program output: 60                 
Correct output: 9                   | Program output: 51                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 50                 
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: 20                 
Correct output: -62                 | Program output: -26                
Correct output: -29                 | Program output: 62                 
Correct output: -18                 | Program output: -18                
Correct output: -55                 | Program output: -55                
Correct output: -86                 | Program output: -19                
Correct output: -77                 | Program output: 10                 
Correct output: -95                 | Program output: -93                
Correct output: -91                 | Program output: 66                 
Correct output: -61                 | Program output: -61                
Correct output: -81                 | Program output: -57                
Correct output: -84                 | Program output: -79                
Correct output: -70                 | Program output: 81                 
Correct output: 3                   | Program output: 3                  
Correct output: -88                 | Program output: -88                
Correct output: -86                 | Program output: 85                 
Correct output: -51                 | Program output: 92                 
Correct output: -62                 | Program output: 66                 
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: -50                
Correct output: -66                 | Program output: 88                 
Correct output: -22                 | Program output: -22                
Correct output: -51                 | Program output: -51                
Correct output: 4                   | Program output: 24                 
Correct output: -49                 | Program output: -7                 
Correct output: -53                 | Program output: -23                
Correct output: -71                 | Program output: 99                 
Correct output: -86                 | Program output: -68                
Correct output: -61                 | Program output: 76                 
Correct output: -92                 | Program output: 12                 
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -55                
Correct output: -41                 | Program output: -41                
Correct output: -42                 | Program output: -19                
Correct output: -42                 | Program output: -42                
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: -76                
Correct output: -71                 | Program output: -53                
Correct output: -51                 | Program output: 88                 
Correct output: 36                  | Program output: 36                 
Correct output: -78                 | Program output: -23                
Correct output: -87                 | Program output: -6                 
Correct output: -87                 | Program output: 1                  
Correct output: -44                 | Program output: 54                 
Correct output: -81                 | Program output: -4                 
Correct output: 17                  | Program output: 65                 
Correct output: -62                 | Program output: 75                 
Correct output: -65                 | Program output: 94                 
Correct output: -25                 | Program output: -25                
Correct output: -70                 | Program output: 27                 
Correct output: -70                 | Program output: -41                
Correct output: -97                 | Program output: 60                 
Correct output: -92                 | Program output: -5                 
Correct output: -77                 | Program output: 28                 
Correct output: -72                 | Program output: -65                
Correct output: -43                 | Program output: 31                 
Correct output: -63                 | Program output: -63                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction tagged_706})
Lexicase best program: (in3 integer_shove integer_gt in1 in2 exec_pop () in3 in3 in4 integer_shove in3 in2 integer_shove integer_gt boolean_swap in3 in3 integer_mod integer_shove in3 integer_shove integer_shove in3 in3 in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove (print_integer boolean_swap boolean_stackdepth print_integer) boolean_yank tagged_706) () ())) ()) ())))
Lexicase best errors: [0 1 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 73
Percent parens: 0.219
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction tagged_706})
Zero cases best program: (in3 integer_shove integer_gt in1 in2 exec_pop () in3 in3 in4 integer_shove in3 in2 integer_shove integer_gt boolean_swap in3 in3 integer_mod integer_shove in3 integer_shove integer_shove in3 in3 in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove (print_integer boolean_swap boolean_stackdepth print_integer) boolean_yank tagged_706) () ())) ()) ())))
Zero cases best errors: [0 1 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 73
Percent parens: 0.219
--- Lexicase Population Statistics ---
Count of elite individuals by case: (914 11 360 588 911 292 292 137 294 8)
Population mean number of elite cases: 3.81
Count of perfect (error zero) individuals by case: (914 11 360 588 911 292 292 137 294 8)
Population mean number of perfect (error zero) cases: 3.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction tagged_706})
Best program: (in3 integer_shove integer_gt in1 in2 exec_pop () in3 in3 in4 integer_shove in3 in2 integer_shove integer_gt boolean_swap in3 in3 integer_mod integer_shove in3 integer_shove integer_shove in3 in3 in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove (print_integer boolean_swap boolean_stackdepth print_integer) boolean_yank tagged_706) () ())) ()) ())))
Errors: [0 1 0 0 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 57
Size: 73
Percent parens: 0.219
--- Population Statistics ---
Average total errors in population: 6.193
Median total errors in population: 6
Error averages by case: (0.086 0.989 0.64 0.412 0.089 0.708 0.708 0.863 0.706 0.992)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.216
Average program size in population (points): 75.58
Average percent parens in population: 0.229
Minimum age in population: 43.4317187666893
Maximum age in population: 46.92144032940269
Average age in population: 45.27697469383851
Median age in population: 45.34409288130701
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 80
Genome diversity (% unique genomes):	 0.648
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.615
Total error diversity:				 0.009
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.112
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 29447984
--- Timings ---
Current time: 1559584920083 milliseconds
Total Time:         115.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.4 seconds, 52.1%
Fitness Testing:     34.9 seconds, 30.1%
Report:              20.5 seconds, 17.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 630
Test mean error for best: 0.63000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -82                 | Program output: -16                
Correct output: 63                  | Program output: 63                 
Correct output: -43                 | Program output: -43                
Correct output: -71                 | Program output: 65                 
Correct output: -7                  | Program output: 8                  
Correct output: -71                 | Program output: 14                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 81                 
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 23                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 78                 
Correct output: 51                  | Program output: 74                 
Correct output: 48                  | Program output: 56                 
Correct output: 2                   | Program output: 46                 
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output: 46                 
Correct output: 12                  | Program output: 92                 
Correct output: 40                  | Program output: 65                 
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 19                 
Correct output: 13                  | Program output: 68                 
Correct output: 7                   | Program output: 20                 
Correct output: 4                   | Program output: 94                 
Correct output: 32                  | Program output: 41                 
Correct output: 40                  | Program output: 90                 
Correct output: 13                  | Program output: 20                 
Correct output: 5                   | Program output: 68                 
Correct output: 9                   | Program output: 19                 
Correct output: 1                   | Program output: 60                 
Correct output: 45                  | Program output: 73                 
Correct output: -87                 | Program output: -41                
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: -26                
Correct output: -29                 | Program output: 1                  
Correct output: -18                 | Program output: 47                 
Correct output: -55                 | Program output: 92                 
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -93                
Correct output: -91                 | Program output: 66                 
Correct output: -61                 | Program output: 93                 
Correct output: -81                 | Program output: -13                
Correct output: -84                 | Program output: -79                
Correct output: -70                 | Program output: 81                 
Correct output: 3                   | Program output: 57                 
Correct output: -88                 | Program output: -27                
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: 23                 
Correct output: -62                 | Program output: 77                 
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: -71                
Correct output: -66                 | Program output: 88                 
Correct output: -22                 | Program output: 16                 
Correct output: -51                 | Program output: -51                
Correct output: 4                   | Program output: 4                  
Correct output: -49                 | Program output: -7                 
Correct output: -53                 | Program output: -23                
Correct output: -71                 | Program output: 76                 
Correct output: -86                 | Program output: -86                
Correct output: -61                 | Program output: 76                 
Correct output: -92                 | Program output: -44                
Correct output: -57                 | Program output: -5                 
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -3                 
Correct output: -41                 | Program output: 50                 
Correct output: -42                 | Program output: -16                
Correct output: -42                 | Program output: -42                
Correct output: -99                 | Program output: -66                
Correct output: -76                 | Program output: -76                
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: 88                 
Correct output: 36                  | Program output: 55                 
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -87                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: 54                 
Correct output: -81                 | Program output: -10                
Correct output: 17                  | Program output: 38                 
Correct output: -62                 | Program output: 75                 
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: 17                 
Correct output: -70                 | Program output: -56                
Correct output: -70                 | Program output: -41                
Correct output: -97                 | Program output: -2                 
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: -11                
Correct output: -72                 | Program output: -65                
Correct output: -43                 | Program output: 34                 
Correct output: -63                 | Program output: -63                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction tagged_706})
Lexicase best program: (in3 integer_shove integer_gt in1 in2 exec_pop () in3 in3 in4 integer_shove in3 in2 integer_shove integer_gt integer_shove in3 in2 integer_shove integer_gt boolean_swap in3 in3 integer_mod integer_shove in3 integer_shove integer_shove in3 in3 in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove (print_integer boolean_swap boolean_stackdepth print_integer) boolean_yank tagged_706) () ())) ()) ())))
Lexicase best errors: [0 1 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 78
Percent parens: 0.205
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction tagged_706})
Zero cases best program: (in3 integer_shove integer_gt in1 in2 exec_pop () in3 in3 in4 integer_shove in3 in2 integer_shove integer_gt integer_shove in3 in2 integer_shove integer_gt boolean_swap in3 in3 integer_mod integer_shove in3 integer_shove integer_shove in3 in3 in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove (print_integer boolean_swap boolean_stackdepth print_integer) boolean_yank tagged_706) () ())) ()) ())))
Zero cases best errors: [0 1 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 78
Percent parens: 0.205
--- Lexicase Population Statistics ---
Count of elite individuals by case: (454 155 296 905 33 166 32 769 135 910)
Population mean number of elite cases: 3.86
Count of perfect (error zero) individuals by case: (454 155 296 905 33 166 32 769 135 910)
Population mean number of perfect (error zero) cases: 3.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction tagged_706})
Best program: (in3 integer_shove integer_gt in1 in2 exec_pop () in3 in3 in4 integer_shove in3 in3 in4 integer_shove in3 in2 integer_shove integer_gt boolean_swap in3 in3 integer_mod integer_shove in3 integer_shove integer_shove in3 in3 in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove (print_integer boolean_swap boolean_stackdepth print_integer) boolean_yank tagged_706) () ())) ()) ())))
Errors: [0 1 0 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 61
Size: 77
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 6.145
Median total errors in population: 7
Error averages by case: (0.546 0.845 0.704 0.095 0.967 0.834 0.968 0.231 0.865 0.09)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.828
Average program size in population (points): 74.218
Average percent parens in population: 0.221
Minimum age in population: 45.01322987303138
Maximum age in population: 48.09636152908206
Average age in population: 46.56502848187275
Median age in population: 46.63213540613651
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 166
Genome diversity (% unique genomes):	 0.64
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 191
Syntactic diversity (% unique Push programs):	 0.607
Total error diversity:				 0.009
Error (vector) diversity:			 0.046
Behavioral diversity:				 0.134
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 30734698
--- Timings ---
Current time: 1559584924904 milliseconds
Total Time:         120.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.3 seconds, 51.5%
Fitness Testing:     36.8 seconds, 30.4%
Report:              21.7 seconds, 17.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 537
Test mean error for best: 0.53700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -82                 | Program output: -16                
Correct output: 63                  | Program output: 97                 
Correct output: -43                 | Program output: -43                
Correct output: -71                 | Program output: 65                 
Correct output: -7                  | Program output: 8                  
Correct output: -71                 | Program output: 14                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 81                 
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 22                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 96                 
Correct output: 51                  | Program output: 65                 
Correct output: 48                  | Program output: 48                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 40                  | Program output: 40                 
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 45                 
Correct output: 13                  | Program output: 72                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 43                 
Correct output: 32                  | Program output: 56                 
Correct output: 40                  | Program output: 76                 
Correct output: 13                  | Program output: 89                 
Correct output: 5                   | Program output: 60                 
Correct output: 9                   | Program output: 19                 
Correct output: 1                   | Program output: 60                 
Correct output: 45                  | Program output: 50                 
Correct output: -87                 | Program output: -41                
Correct output: -90                 | Program output: 20                 
Correct output: -62                 | Program output: -26                
Correct output: -29                 | Program output: 85                 
Correct output: -18                 | Program output: -18                
Correct output: -55                 | Program output: 2                  
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -93                
Correct output: -91                 | Program output: -37                
Correct output: -61                 | Program output: -61                
Correct output: -81                 | Program output: -13                
Correct output: -84                 | Program output: -79                
Correct output: -70                 | Program output: -51                
Correct output: 3                   | Program output: 3                  
Correct output: -88                 | Program output: -27                
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: 23                 
Correct output: -62                 | Program output: 77                 
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: -50                
Correct output: -66                 | Program output: -66                
Correct output: -22                 | Program output: 16                 
Correct output: -51                 | Program output: -51                
Correct output: 4                   | Program output: 4                  
Correct output: -49                 | Program output: -7                 
Correct output: -53                 | Program output: -23                
Correct output: -71                 | Program output: 76                 
Correct output: -86                 | Program output: -68                
Correct output: -61                 | Program output: -48                
Correct output: -92                 | Program output: 12                 
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -3                 
Correct output: -41                 | Program output: 31                 
Correct output: -42                 | Program output: -16                
Correct output: -42                 | Program output: -42                
Correct output: -99                 | Program output: -66                
Correct output: -76                 | Program output: -76                
Correct output: -71                 | Program output: -53                
Correct output: -51                 | Program output: -51                
Correct output: 36                  | Program output: 36                 
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -87                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: 54                 
Correct output: -81                 | Program output: -10                
Correct output: 17                  | Program output: 65                 
Correct output: -62                 | Program output: -29                
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: 99                 
Correct output: -70                 | Program output: -56                
Correct output: -70                 | Program output: -41                
Correct output: -97                 | Program output: 60                 
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: 28                 
Correct output: -72                 | Program output: -65                
Correct output: -43                 | Program output: 34                 
Correct output: -63                 | Program output: -63                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_706})
Lexicase best program: (in3 integer_shove integer_gt in1 boolean_rot exec_pop () in3 integer_dup_times in4 integer_shove in3 in2 integer_shove integer_gt boolean_swap boolean_yankdup in3 in4 integer_shove in3 integer_shove integer_shove integer_shove in3 integer_shove integer_shove in3 in3 in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove (print_integer boolean_swap boolean_stackdepth print_integer) exec_dup (tagged_706)) () ())) ()) ())))
Lexicase best errors: [0 0 0 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 78
Percent parens: 0.218
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_706})
Zero cases best program: (in3 integer_shove integer_gt in1 boolean_rot exec_pop () in3 integer_dup_times in4 integer_shove in3 in2 integer_shove integer_gt boolean_swap boolean_yankdup in3 in4 integer_shove in3 integer_shove integer_shove integer_shove in3 integer_shove integer_shove in3 in3 in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove (print_integer boolean_swap boolean_stackdepth print_integer) exec_dup (tagged_706)) () ())) ()) ())))
Zero cases best errors: [0 0 0 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 78
Percent parens: 0.218
--- Lexicase Population Statistics ---
Count of elite individuals by case: (840 853 596 339 699 51 837 22 286 11)
Population mean number of elite cases: 4.53
Count of perfect (error zero) individuals by case: (840 853 596 339 699 51 837 22 286 11)
Population mean number of perfect (error zero) cases: 4.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline})
Best program: (in3 integer_shove integer_gt in1 in2 exec_pop () in3 integer_gt boolean_swap in3 integer_empty integer_dup_times in4 integer_shove in3 in2 integer_shove integer_gt boolean_swap boolean_yankdup in3 in4 integer_shove in3 integer_shove integer_shove integer_shove in3 integer_shove integer_shove in3 in3 in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline)) ()) ())))
Errors: [0 0 0 1 0 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 53
Size: 65
Percent parens: 0.185
--- Population Statistics ---
Average total errors in population: 5.466
Median total errors in population: 5
Error averages by case: (0.16 0.147 0.404 0.661 0.301 0.949 0.163 0.978 0.714 0.989)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.932
Average program size in population (points): 78.672
Average percent parens in population: 0.213
Minimum age in population: 46.73027503304183
Maximum age in population: 49.82698259316385
Average age in population: 48.48365813551284
Median age in population: 48.43970317114145
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 137
Genome diversity (% unique genomes):	 0.634
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 145
Syntactic diversity (% unique Push programs):	 0.608
Total error diversity:				 0.008
Error (vector) diversity:			 0.066
Behavioral diversity:				 0.156
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 32044160
--- Timings ---
Current time: 1559584929470 milliseconds
Total Time:         125.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.1 seconds, 51.1%
Fitness Testing:     38.6 seconds, 30.7%
Report:              22.8 seconds, 18.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -82                 | Program output: -16                
Correct output: 63                  | Program output: 63                 
Correct output: -43                 | Program output: -12                
Correct output: -71                 | Program output: -71                
Correct output: -7                  | Program output: -7                 
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: -22                 | Program output: 66                 
Correct output: 22                  | Program output: 23                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: 51                  | Program output: 63                 
Correct output: 48                  | Program output: 97                 
Correct output: 2                   | Program output: 62                 
Correct output: 2                   | Program output: 71                 
Correct output: 12                  | Program output: 94                 
Correct output: 12                  | Program output: 15                 
Correct output: 40                  | Program output: 82                 
Correct output: 10                  | Program output: 19                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 90                 
Correct output: 7                   | Program output: 43                 
Correct output: 4                   | Program output: 34                 
Correct output: 32                  | Program output: 32                 
Correct output: 40                  | Program output: 43                 
Correct output: 13                  | Program output: 13                 
Correct output: 5                   | Program output: 63                 
Correct output: 9                   | Program output: 79                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 96                 
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: 72                 
Correct output: -29                 | Program output: 1                  
Correct output: -18                 | Program output: 8                  
Correct output: -55                 | Program output: -55                
Correct output: -86                 | Program output: -19                
Correct output: -77                 | Program output: 97                 
Correct output: -95                 | Program output: 19                 
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output: 36                 
Correct output: -81                 | Program output: -57                
Correct output: -84                 | Program output: 35                 
Correct output: -70                 | Program output: -70                
Correct output: 3                   | Program output: 13                 
Correct output: -88                 | Program output: -88                
Correct output: -86                 | Program output: 89                 
Correct output: -51                 | Program output: 72                 
Correct output: -62                 | Program output: 71                 
Correct output: -77                 | Program output: 29                 
Correct output: -71                 | Program output: -71                
Correct output: -66                 | Program output: -39                
Correct output: -22                 | Program output: -22                
Correct output: -51                 | Program output: 3                  
Correct output: 4                   | Program output: 19                 
Correct output: -49                 | Program output: 51                 
Correct output: -53                 | Program output: 99                 
Correct output: -71                 | Program output: 9                  
Correct output: -86                 | Program output: -86                
Correct output: -61                 | Program output: -61                
Correct output: -92                 | Program output: -44                
Correct output: -57                 | Program output: -46                
Correct output: -100                | Program output: 13                 
Correct output: -85                 | Program output: -55                
Correct output: -41                 | Program output: -41                
Correct output: -42                 | Program output: -19                
Correct output: -42                 | Program output: 36                 
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: 27                 
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: -23                
Correct output: 36                  | Program output: 59                 
Correct output: -78                 | Program output: -23                
Correct output: -87                 | Program output: -6                 
Correct output: -87                 | Program output: 1                  
Correct output: -44                 | Program output: -44                
Correct output: -81                 | Program output: -4                 
Correct output: 17                  | Program output: 17                 
Correct output: -62                 | Program output: -62                
Correct output: -65                 | Program output: 85                 
Correct output: -25                 | Program output: -25                
Correct output: -70                 | Program output: 58                 
Correct output: -70                 | Program output: 7                  
Correct output: -97                 | Program output: -2                 
Correct output: -92                 | Program output: -5                 
Correct output: -77                 | Program output: -11                
Correct output: -72                 | Program output: 15                 
Correct output: -43                 | Program output: 42                 
Correct output: -63                 | Program output: -12                
Correct output: -76                 | Program output: 32                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_990} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup})
Lexicase best program: (integer_gt in1 in3 integer_shove integer_gt in1 in2 exec_pop () in3 in3 in4 integer_shove in3 in2 integer_shove tag_exec_990 (boolean_swap) in3 boolean_dup_items integer_mod integer_shove in3 integer_shove integer_shove in3 in3 in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth integer_stackdepth exec_do*times (boolean_not) exec_noop boolean_invert_second_then_and exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove (integer_yankdup)) () ())) ()) ()))
Lexicase best errors: [0 0 1 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 71
Percent parens: 0.225
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_990} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup})
Zero cases best program: (integer_gt in1 in3 integer_shove integer_gt in1 in2 exec_pop () in3 in3 in4 integer_shove in3 in2 integer_shove tag_exec_990 (boolean_swap) in3 boolean_dup_items integer_mod integer_shove in3 integer_shove integer_shove in3 in3 in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth integer_stackdepth exec_do*times (boolean_not) exec_noop boolean_invert_second_then_and exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove (integer_yankdup)) () ())) ()) ()))
Zero cases best errors: [0 0 1 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 71
Percent parens: 0.225
--- Lexicase Population Statistics ---
Count of elite individuals by case: (884 406 11 326 97 298 351 405 348 884)
Population mean number of elite cases: 4.01
Count of perfect (error zero) individuals by case: (884 406 11 326 97 298 351 405 348 884)
Population mean number of perfect (error zero) cases: 4.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_990} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yank})
Best program: (in3 integer_shove integer_gt in1 in2 exec_pop (in3 in3 in4 integer_shove in3 in2 integer_shove tag_exec_990 (boolean_swap) in3 boolean_dup_items integer_mod integer_shove in3 integer_shove integer_shove in3 in3 in4 integer_shove integer_gt) boolean_swap print_integer boolean_xor integer_stackdepth integer_stackdepth exec_do*times (boolean_not) exec_noop boolean_invert_second_then_and exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () exec_yankdup) () (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove (integer_yankdup boolean_swap boolean_stackdepth print_integer boolean_stackdepth print_integer) boolean_yank) () ()))) ()))
Errors: [0 0 1 0 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 59
Size: 75
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 5.99
Median total errors in population: 6
Error averages by case: (0.116 0.594 0.989 0.674 0.903 0.702 0.649 0.595 0.652 0.116)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.944
Average program size in population (points): 76.116
Average percent parens in population: 0.211
Minimum age in population: 49.14913130924106
Maximum age in population: 51.48805695120245
Average age in population: 50.41454713905882
Median age in population: 50.47417999058962
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 77
Genome diversity (% unique genomes):	 0.627
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 83
Syntactic diversity (% unique Push programs):	 0.594
Total error diversity:				 0.008
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.131
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 33333891
--- Timings ---
Current time: 1559584933201 milliseconds
Total Time:         130.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.0 seconds, 50.8%
Fitness Testing:     40.2 seconds, 30.9%
Report:              23.7 seconds, 18.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 550
Test mean error for best: 0.55000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -82                 | Program output: -82                
Correct output: 63                  | Program output: 63                 
Correct output: -43                 | Program output: -12                
Correct output: -71                 | Program output: 65                 
Correct output: -7                  | Program output: 8                  
Correct output: -71                 | Program output: 14                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 81                 
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 23                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 78                 
Correct output: 51                  | Program output: 74                 
Correct output: 48                  | Program output: 56                 
Correct output: 2                   | Program output: 46                 
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output: 46                 
Correct output: 12                  | Program output: 92                 
Correct output: 40                  | Program output: 65                 
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 19                 
Correct output: 13                  | Program output: 68                 
Correct output: 7                   | Program output: 20                 
Correct output: 4                   | Program output: 94                 
Correct output: 32                  | Program output: 41                 
Correct output: 40                  | Program output: 90                 
Correct output: 13                  | Program output: 20                 
Correct output: 5                   | Program output: 68                 
Correct output: 9                   | Program output: 19                 
Correct output: 1                   | Program output: 53                 
Correct output: 45                  | Program output: 73                 
Correct output: -87                 | Program output: -7                 
Correct output: -90                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -29                 | Program output: -29                
Correct output: -18                 | Program output: 47                 
Correct output: -55                 | Program output: 92                 
Correct output: -86                 | Program output: -9                 
Correct output: -77                 | Program output: -4                 
Correct output: -95                 | Program output: -2                 
Correct output: -91                 | Program output: 66                 
Correct output: -61                 | Program output: 93                 
Correct output: -81                 | Program output: -81                
Correct output: -84                 | Program output: -58                
Correct output: -70                 | Program output: 81                 
Correct output: 3                   | Program output: 57                 
Correct output: -88                 | Program output: -54                
Correct output: -86                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -62                 | Program output: -62                
Correct output: -77                 | Program output: -27                
Correct output: -71                 | Program output: -62                
Correct output: -66                 | Program output: 88                 
Correct output: -22                 | Program output: 16                 
Correct output: -51                 | Program output: -51                
Correct output: 4                   | Program output: 4                  
Correct output: -49                 | Program output: -49                
Correct output: -53                 | Program output: -23                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -26                
Correct output: -61                 | Program output: 76                 
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -88                
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: 50                 
Correct output: -42                 | Program output: -35                
Correct output: -42                 | Program output: -42                
Correct output: -99                 | Program output: -92                
Correct output: -76                 | Program output: -76                
Correct output: -71                 | Program output: -61                
Correct output: -51                 | Program output: 88                 
Correct output: 36                  | Program output: 55                 
Correct output: -78                 | Program output: -34                
Correct output: -87                 | Program output: -9                 
Correct output: -87                 | Program output: -49                
Correct output: -44                 | Program output: 54                 
Correct output: -81                 | Program output: -81                
Correct output: 17                  | Program output: 38                 
Correct output: -62                 | Program output: 75                 
Correct output: -65                 | Program output: -16                
Correct output: -25                 | Program output: 17                 
Correct output: -70                 | Program output: -70                
Correct output: -70                 | Program output: -41                
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -47                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: -52                
Correct output: -43                 | Program output: -43                
Correct output: -63                 | Program output: -63                
Correct output: -76                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_990} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_706})
Lexicase best program: (integer_gt in1 in3 integer_shove integer_gt in1 in2 exec_pop () in3 in3 in4 integer_shove in3 in2 integer_shove tag_exec_990 (boolean_swap) in3 boolean_dup_items integer_mod integer_shove in3 integer_shove integer_shove in3 in3 in4 in3 in3 in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and exec_pop (exec_if (integer_inc integer_add boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove (print_integer boolean_swap boolean_stackdepth print_integer) exec_dup (tagged_706)) () ())))))
Lexicase best errors: [1 1 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 77
Percent parens: 0.195
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_990} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_706})
Zero cases best program: (integer_gt in1 in3 integer_shove integer_gt in1 in2 exec_pop () in3 in3 in4 integer_shove in3 in2 integer_shove tag_exec_990 (boolean_swap) in3 boolean_dup_items integer_mod integer_shove in3 integer_shove integer_shove in3 in3 in4 in3 in3 in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and exec_pop (exec_if (integer_inc integer_add boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove (print_integer boolean_swap boolean_stackdepth print_integer) exec_dup (tagged_706)) () ())))))
Zero cases best errors: [1 1 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 77
Percent parens: 0.195
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 486 495 501 11 366 7 502 7 8)
Population mean number of elite cases: 2.39
Count of perfect (error zero) individuals by case: (4 486 495 501 11 366 7 502 7 8)
Population mean number of perfect (error zero) cases: 2.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_990} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction tag_boolean_256} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_706})
Best program: (integer_gt in1 in3 integer_shove integer_gt in1 in2 exec_pop () in3 in3 in4 integer_shove in3 in2 integer_shove tag_exec_990 (boolean_swap) in3 boolean_dup_items integer_mod integer_shove in3 integer_shove integer_shove in3 in3 in4 in3 in3 in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth exec_do*times (tag_boolean_256) exec_y (boolean_invert_second_then_and exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove (print_integer boolean_swap boolean_stackdepth print_integer) exec_dup (tagged_706)) () ())) ()) ())))
Errors: [1 1 0 0 0 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 62
Size: 80
Percent parens: 0.225
--- Population Statistics ---
Average total errors in population: 7.613
Median total errors in population: 8
Error averages by case: (0.996 0.514 0.505 0.499 0.989 0.634 0.993 0.498 0.993 0.992)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.943
Average program size in population (points): 75.284
Average percent parens in population: 0.217
Minimum age in population: 50.64913130924106
Maximum age in population: 53.31859413022175
Average age in population: 51.96417202103115
Median age in population: 52.09212820604444
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 152
Genome diversity (% unique genomes):	 0.591
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 163
Syntactic diversity (% unique Push programs):	 0.568
Total error diversity:				 0.007
Error (vector) diversity:			 0.035
Behavioral diversity:				 0.165
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 34253928
--- Timings ---
Current time: 1559584937394 milliseconds
Total Time:         133.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.9 seconds, 51.0%
Fitness Testing:     41.3 seconds, 31.0%
Report:              23.9 seconds, 18.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 550
Test mean error for best: 0.55000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -82                 | Program output: -82                
Correct output: 63                  | Program output: 63                 
Correct output: -43                 | Program output: -12                
Correct output: -71                 | Program output: 65                 
Correct output: -7                  | Program output: 8                  
Correct output: -71                 | Program output: 14                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 81                 
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 23                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 78                 
Correct output: 51                  | Program output: 74                 
Correct output: 48                  | Program output: 56                 
Correct output: 2                   | Program output: 46                 
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output: 46                 
Correct output: 12                  | Program output: 92                 
Correct output: 40                  | Program output: 65                 
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 19                 
Correct output: 13                  | Program output: 68                 
Correct output: 7                   | Program output: 20                 
Correct output: 4                   | Program output: 94                 
Correct output: 32                  | Program output: 41                 
Correct output: 40                  | Program output: 90                 
Correct output: 13                  | Program output: 20                 
Correct output: 5                   | Program output: 68                 
Correct output: 9                   | Program output: 19                 
Correct output: 1                   | Program output: 53                 
Correct output: 45                  | Program output: 73                 
Correct output: -87                 | Program output: -7                 
Correct output: -90                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -29                 | Program output: -29                
Correct output: -18                 | Program output: 47                 
Correct output: -55                 | Program output: 92                 
Correct output: -86                 | Program output: -9                 
Correct output: -77                 | Program output: -4                 
Correct output: -95                 | Program output: -2                 
Correct output: -91                 | Program output: 66                 
Correct output: -61                 | Program output: 93                 
Correct output: -81                 | Program output: -81                
Correct output: -84                 | Program output: -58                
Correct output: -70                 | Program output: 81                 
Correct output: 3                   | Program output: 57                 
Correct output: -88                 | Program output: -54                
Correct output: -86                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -62                 | Program output: -62                
Correct output: -77                 | Program output: -27                
Correct output: -71                 | Program output: -62                
Correct output: -66                 | Program output: 88                 
Correct output: -22                 | Program output: 16                 
Correct output: -51                 | Program output: -51                
Correct output: 4                   | Program output: 4                  
Correct output: -49                 | Program output: -49                
Correct output: -53                 | Program output: -23                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -26                
Correct output: -61                 | Program output: 76                 
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -88                
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: 50                 
Correct output: -42                 | Program output: -35                
Correct output: -42                 | Program output: -42                
Correct output: -99                 | Program output: -92                
Correct output: -76                 | Program output: -76                
Correct output: -71                 | Program output: -61                
Correct output: -51                 | Program output: 88                 
Correct output: 36                  | Program output: 55                 
Correct output: -78                 | Program output: -34                
Correct output: -87                 | Program output: -9                 
Correct output: -87                 | Program output: -49                
Correct output: -44                 | Program output: 54                 
Correct output: -81                 | Program output: -81                
Correct output: 17                  | Program output: 38                 
Correct output: -62                 | Program output: 75                 
Correct output: -65                 | Program output: -16                
Correct output: -25                 | Program output: 17                 
Correct output: -70                 | Program output: -70                
Correct output: -70                 | Program output: -41                
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -47                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: -52                
Correct output: -43                 | Program output: -43                
Correct output: -63                 | Program output: -63                
Correct output: -76                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_990} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction tag_boolean_256} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_706})
Lexicase best program: (integer_gt in1 in3 integer_shove integer_gt in1 in2 exec_pop () exec_dup (in3 in4 in4 in3 in2 integer_shove tag_exec_990 (boolean_swap) in3 boolean_dup_items integer_mod integer_shove in3 integer_shove integer_shove in3 in3 in3 boolean_dup_items integer_mod integer_shove in3 integer_shove integer_shove in3 in3 in4 in3 in3 in4 integer_shove integer_gt) boolean_swap print_integer boolean_xor integer_stackdepth exec_do*times (tag_boolean_256) exec_y (boolean_invert_second_then_and exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove (print_integer boolean_swap boolean_stackdepth print_integer) exec_dup (tagged_706)) () ())) ()) ())))
Lexicase best errors: [1 0 0 1 0 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 90
Percent parens: 0.211
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_990} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction tag_boolean_256} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_706})
Zero cases best program: (integer_gt in1 in3 integer_shove integer_gt in1 in2 exec_pop () exec_dup (in3 in4 in4 in3 in2 integer_shove tag_exec_990 (boolean_swap) in3 boolean_dup_items integer_mod integer_shove in3 integer_shove integer_shove in3 in3 in3 boolean_dup_items integer_mod integer_shove in3 integer_shove integer_shove in3 in3 in4 in3 in3 in4 integer_shove integer_gt) boolean_swap print_integer boolean_xor integer_stackdepth exec_do*times (tag_boolean_256) exec_y (boolean_invert_second_then_and exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove (print_integer boolean_swap boolean_stackdepth print_integer) exec_dup (tagged_706)) () ())) ()) ())))
Zero cases best errors: [1 0 0 1 0 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 90
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (227 634 475 41 457 339 473 77 299 43)
Population mean number of elite cases: 3.07
Count of perfect (error zero) individuals by case: (227 634 475 41 457 339 473 77 299 43)
Population mean number of perfect (error zero) cases: 3.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dec} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_990} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_706})
Best program: (integer_dec in1 in3 integer_shove integer_gt in1 in2 exec_pop () in3 in3 in4 integer_shove in3 in2 integer_shove tag_exec_990 (boolean_swap) in3 boolean_dup_items integer_mod integer_shove in3 integer_shove integer_shove in3 in3 in4 in3 in3 in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and exec_pop (exec_if (integer_inc integer_add boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove (print_integer boolean_swap boolean_stackdepth print_integer) exec_dup (tagged_706)) () ())))))
Errors: [1 0 0 1 0 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 62
Size: 77
Percent parens: 0.195
--- Population Statistics ---
Average total errors in population: 6.935
Median total errors in population: 7
Error averages by case: (0.773 0.366 0.525 0.959 0.543 0.661 0.527 0.923 0.701 0.957)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.163
Average program size in population (points): 76.493
Average percent parens in population: 0.226
Minimum age in population: 51.64913130924106
Maximum age in population: 55.10468553658575
Average age in population: 53.42988704589452
Median age in population: 53.49780939647462
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 110
Genome diversity (% unique genomes):	 0.642
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 123
Syntactic diversity (% unique Push programs):	 0.618
Total error diversity:				 0.006
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.125
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 35320163
--- Timings ---
Current time: 1559584941533 milliseconds
Total Time:         137.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.8 seconds, 50.7%
Fitness Testing:     42.5 seconds, 30.9%
Report:              25.1 seconds, 18.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 553
Test mean error for best: 0.55300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output:                    
Correct output: -82                 | Program output: -16                
Correct output: 63                  | Program output: 63                 
Correct output: -43                 | Program output: -12                
Correct output: -71                 | Program output: 65                 
Correct output: -7                  | Program output: 8                  
Correct output: -71                 | Program output: 14                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 81                 
Correct output: -22                 | Program output: 66                 
Correct output: 22                  | Program output: 23                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output:                    
Correct output: 51                  | Program output: 51                 
Correct output: 48                  | Program output:                    
Correct output: 2                   | Program output: 62                 
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output:                    
Correct output: 12                  | Program output:                    
Correct output: 40                  | Program output: 82                 
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 43                 
Correct output: 4                   | Program output: 34                 
Correct output: 32                  | Program output: 32                 
Correct output: 40                  | Program output: 40                 
Correct output: 13                  | Program output: 21                 
Correct output: 5                   | Program output: 5                  
Correct output: 9                   | Program output: 9                  
Correct output: 1                   | Program output: 64                 
Correct output: 45                  | Program output: 45                 
Correct output: -87                 | Program output: -87                
Correct output: -90                 | Program output: -10                
Correct output: -62                 | Program output: 72                 
Correct output: -29                 | Program output: -29                
Correct output: -18                 | Program output: 8                  
Correct output: -55                 | Program output: 39                 
Correct output: -86                 | Program output: -19                
Correct output: -77                 | Program output: -4                 
Correct output: -95                 | Program output: 19                 
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output: 57                 
Correct output: -81                 | Program output: -57                
Correct output: -84                 | Program output: 35                 
Correct output: -70                 | Program output: 65                 
Correct output: 3                   | Program output: 20                 
Correct output: -88                 | Program output: -88                
Correct output: -86                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -62                 | Program output: -62                
Correct output: -77                 | Program output: 29                 
Correct output: -71                 | Program output: -62                
Correct output: -66                 | Program output: 58                 
Correct output: -22                 | Program output: 9                  
Correct output: -51                 | Program output: -51                
Correct output: 4                   | Program output: 4                  
Correct output: -49                 | Program output: 51                 
Correct output: -53                 | Program output: -23                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -26                
Correct output: -61                 | Program output: 5                  
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: 13                 
Correct output: -85                 | Program output: -55                
Correct output: -41                 | Program output: -41                
Correct output: -42                 | Program output: -19                
Correct output: -42                 | Program output: -42                
Correct output: -99                 | Program output: -99                
Correct output: -76                 | Program output: -76                
Correct output: -71                 | Program output: -61                
Correct output: -51                 | Program output: 86                 
Correct output: 36                  | Program output:                    
Correct output: -78                 | Program output: -23                
Correct output: -87                 | Program output: -6                 
Correct output: -87                 | Program output: 1                  
Correct output: -44                 | Program output: 54                 
Correct output: -81                 | Program output: -4                 
Correct output: 17                  | Program output: 17                 
Correct output: -62                 | Program output:                    
Correct output: -65                 | Program output: -16                
Correct output: -25                 | Program output: -25                
Correct output: -70                 | Program output: -70                
Correct output: -70                 | Program output: -41                
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -5                 
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: 15                 
Correct output: -43                 | Program output: -43                
Correct output: -63                 | Program output: -63                
Correct output: -76                 | Program output: 32                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_990} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup})
Lexicase best program: (in3 in2 exec_pop () in3 integer_dup_times in4 exec_pop () in3 integer_dup_times in1 in2 exec_pop () exec_dup (in3 in4 in4 in3 exec_do*while (integer_shove tag_exec_990 (boolean_swap) in3 boolean_dup_items integer_mod integer_shove in3 integer_shove integer_shove in3 in3 in4 integer_shove integer_gt) boolean_swap) print_integer boolean_xor integer_lt integer_stackdepth exec_do*times (boolean_not) exec_noop integer_swap exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup exec_flush exec_shove (integer_yankdup)) () ())) ()) ()))
Lexicase best errors: [0 1 0 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 79
Percent parens: 0.253
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_990} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup})
Zero cases best program: (in3 in2 exec_pop () in3 integer_dup_times in4 exec_pop () in3 integer_dup_times in1 in2 exec_pop () exec_dup (in3 in4 in4 in3 exec_do*while (integer_shove tag_exec_990 (boolean_swap) in3 boolean_dup_items integer_mod integer_shove in3 integer_shove integer_shove in3 in3 in4 integer_shove integer_gt) boolean_swap) print_integer boolean_xor integer_lt integer_stackdepth exec_do*times (boolean_not) exec_noop integer_swap exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup exec_flush exec_shove (integer_yankdup)) () ())) ()) ()))
Zero cases best errors: [0 1 0 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 79
Percent parens: 0.253
--- Lexicase Population Statistics ---
Count of elite individuals by case: (569 31 570 462 89 207 457 158 263 69)
Population mean number of elite cases: 2.88
Count of perfect (error zero) individuals by case: (569 31 570 462 89 207 457 158 263 69)
Population mean number of perfect (error zero) cases: 2.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_990} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup})
Best program: (in3 in2 exec_pop () in3 integer_dup_times in4 exec_pop () in3 integer_dup_times in1 in2 exec_pop () exec_dup (in3 in4 in4 in3 exec_do*while (integer_shove tag_exec_990 (boolean_swap) in3 boolean_dup_items integer_mod integer_shove in3 integer_shove integer_shove in3 in3 in4 integer_shove integer_gt) boolean_swap) print_integer boolean_xor integer_lt integer_stackdepth exec_do*times (boolean_not) exec_noop integer_swap exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup exec_flush exec_shove (integer_yankdup)) () ())) ()) ()))
Errors: [0 1 0 1 1 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 59
Size: 79
Percent parens: 0.253
--- Population Statistics ---
Average total errors in population: 7.125
Median total errors in population: 7
Error averages by case: (0.431 0.969 0.43 0.538 0.911 0.793 0.543 0.842 0.737 0.931)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.256
Average program size in population (points): 79.712
Average percent parens in population: 0.207
Minimum age in population: 53.59840687131509
Maximum age in population: 56.35154620395042
Average age in population: 55.02999447664642
Median age in population: 55.10468553658575
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 71
Genome diversity (% unique genomes):	 0.648
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.618
Total error diversity:				 0.007
Error (vector) diversity:			 0.038
Behavioral diversity:				 0.187
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 36544669
--- Timings ---
Current time: 1559584946094 milliseconds
Total Time:         142.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.7 seconds, 50.5%
Fitness Testing:     44.0 seconds, 31.0%
Report:              26.2 seconds, 18.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 483
Test mean error for best: 0.48300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output:                    
Correct output: -82                 | Program output: -16                
Correct output: 63                  | Program output: 63                 
Correct output: -43                 | Program output: -43                
Correct output: -71                 | Program output: 65                 
Correct output: -7                  | Program output: 8                  
Correct output: -71                 | Program output: 14                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 81                 
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 23                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 86                 
Correct output: 51                  | Program output: 51                 
Correct output: 48                  | Program output: 97                 
Correct output: 2                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output:                    
Correct output: 12                  | Program output:                    
Correct output: 40                  | Program output: 56                 
Correct output: 10                  | Program output: 19                 
Correct output: 3                   | Program output: 48                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 32                 
Correct output: 40                  | Program output: 40                 
Correct output: 13                  | Program output: 21                 
Correct output: 5                   | Program output: 5                  
Correct output: 9                   | Program output: 9                  
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 45                 
Correct output: -87                 | Program output: -46                
Correct output: -90                 | Program output: -10                
Correct output: -62                 | Program output: -26                
Correct output: -29                 | Program output: -29                
Correct output: -18                 | Program output: 43                 
Correct output: -55                 | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: -4                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output: 57                 
Correct output: -81                 | Program output: -19                
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: 65                 
Correct output: 3                   | Program output: 20                 
Correct output: -88                 | Program output: -27                
Correct output: -86                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -62                 | Program output: -62                
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: -62                
Correct output: -66                 | Program output: 58                 
Correct output: -22                 | Program output: 9                  
Correct output: -51                 | Program output: -51                
Correct output: 4                   | Program output: 4                  
Correct output: -49                 | Program output: -7                 
Correct output: -53                 | Program output: -23                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -26                
Correct output: -61                 | Program output: 5                  
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -60                
Correct output: -41                 | Program output: 52                 
Correct output: -42                 | Program output: -42                
Correct output: -42                 | Program output: -42                
Correct output: -99                 | Program output: -66                
Correct output: -76                 | Program output: -76                
Correct output: -71                 | Program output: -61                
Correct output: -51                 | Program output: 86                 
Correct output: 36                  | Program output:                    
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -87                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: 54                 
Correct output: -81                 | Program output: -14                
Correct output: 17                  | Program output: 75                 
Correct output: -62                 | Program output: 96                 
Correct output: -65                 | Program output: -16                
Correct output: -25                 | Program output: -25                
Correct output: -70                 | Program output: -70                
Correct output: -70                 | Program output: -41                
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: -72                
Correct output: -43                 | Program output: -43                
Correct output: -63                 | Program output: -63                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 2, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_706})
Lexicase best program: (in3 integer_shove integer_gt in1 in2 exec_pop (in3 integer_dup_times in4 exec_pop ()) in3 integer_dup_times in4 integer_shove integer_min boolean_yank integer_shove integer_gt boolean_swap boolean_yankdup in3 in4 integer_shove in3 integer_shove integer_shove integer_shove in3 integer_shove integer_shove integer_shove in3 integer_shove integer_shove in3 in3 in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and exec_pop (exec_if (integer_inc integer_lte boolean_empty integer_div exec_do*times () integer_yank) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq print_exec (boolean_yankdup exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove (print_integer boolean_swap boolean_stackdepth print_integer exec_dup (tagged_706))) () ()))) () ())))))
Lexicase best errors: [0 0 1 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 95
Percent parens: 0.211
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 2, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_706})
Zero cases best program: (in3 integer_shove integer_gt in1 in2 exec_pop (in3 integer_dup_times in4 exec_pop ()) in3 integer_dup_times in4 integer_shove integer_min boolean_yank integer_shove integer_gt boolean_swap boolean_yankdup in3 in4 integer_shove in3 integer_shove integer_shove integer_shove in3 integer_shove integer_shove integer_shove in3 integer_shove integer_shove in3 in3 in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and exec_pop (exec_if (integer_inc integer_lte boolean_empty integer_div exec_do*times () integer_yank) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq print_exec (boolean_yankdup exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove (print_integer boolean_swap boolean_stackdepth print_integer exec_dup (tagged_706))) () ()))) () ())))))
Zero cases best errors: [0 0 1 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 95
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (76 275 196 208 81 197 285 194 258 252)
Population mean number of elite cases: 2.02
Count of perfect (error zero) individuals by case: (76 275 196 208 81 197 285 194 258 252)
Population mean number of perfect (error zero) cases: 2.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_990} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup})
Best program: (in3 integer_shove integer_gt in1 in2 exec_pop () in3 integer_dup_times in4 exec_pop () in3 integer_dup_times in4 integer_shove integer_min boolean_yank in4 in4 in3 exec_do*while (integer_shove tag_exec_990 (boolean_swap) in3 boolean_dup_items integer_mod integer_shove in3 integer_shove integer_shove in3 in3 in4 integer_shove integer_gt) boolean_swap print_integer boolean_xor integer_lt integer_stackdepth exec_do*times (boolean_not) exec_noop integer_swap exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup exec_flush exec_shove (integer_yankdup)) () ())) ()) ()))
Errors: [1 0 1 0 0 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 61
Size: 79
Percent parens: 0.228
--- Population Statistics ---
Average total errors in population: 7.978
Median total errors in population: 8
Error averages by case: (0.924 0.725 0.804 0.792 0.919 0.803 0.715 0.806 0.742 0.748)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.765
Average program size in population (points): 81.205
Average percent parens in population: 0.216
Minimum age in population: 54.87062975764275
Maximum age in population: 58.28983103710925
Average age in population: 56.47765281743743
Median age in population: 56.54303225921467
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 69
Genome diversity (% unique genomes):	 0.677
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 69
Syntactic diversity (% unique Push programs):	 0.663
Total error diversity:				 0.007
Error (vector) diversity:			 0.062
Behavioral diversity:				 0.222
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 37658564
--- Timings ---
Current time: 1559584950345 milliseconds
Total Time:         146.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.6 seconds, 50.2%
Fitness Testing:     45.6 seconds, 31.1%
Report:              27.3 seconds, 18.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 492
Test mean error for best: 0.49200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output:                    
Correct output: -82                 | Program output: -16                
Correct output: 63                  | Program output: 63                 
Correct output: -43                 | Program output: -43                
Correct output: -71                 | Program output: 65                 
Correct output: -7                  | Program output: 8                  
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 81                 
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 23                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output:                    
Correct output: 51                  | Program output: 51                 
Correct output: 48                  | Program output:                    
Correct output: 2                   | Program output: 46                 
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output:                    
Correct output: 12                  | Program output: 93                 
Correct output: 40                  | Program output: 56                 
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 48                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 43                 
Correct output: 4                   | Program output: 94                 
Correct output: 32                  | Program output: 32                 
Correct output: 40                  | Program output: 40                 
Correct output: 13                  | Program output: 13                 
Correct output: 5                   | Program output: 5                  
Correct output: 9                   | Program output: 9                  
Correct output: 1                   | Program output:                    
Correct output: 45                  | Program output: 45                 
Correct output: -87                 | Program output: -46                
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: -26                
Correct output: -29                 | Program output: -29                
Correct output: -18                 | Program output: 43                 
Correct output: -55                 | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: 97                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: 98                 
Correct output: -61                 | Program output: 57                 
Correct output: -81                 | Program output: -19                
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: 65                 
Correct output: 3                   | Program output: 20                 
Correct output: -88                 | Program output: -27                
Correct output: -86                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -62                 | Program output: -62                
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: -62                
Correct output: -66                 | Program output: 58                 
Correct output: -22                 | Program output: 9                  
Correct output: -51                 | Program output: -51                
Correct output: 4                   | Program output: 4                  
Correct output: -49                 | Program output: -7                 
Correct output: -53                 | Program output: -23                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -26                
Correct output: -61                 | Program output: 5                  
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -60                
Correct output: -41                 | Program output: 52                 
Correct output: -42                 | Program output: -42                
Correct output: -42                 | Program output: -42                
Correct output: -99                 | Program output: -66                
Correct output: -76                 | Program output: -76                
Correct output: -71                 | Program output: -61                
Correct output: -51                 | Program output: 86                 
Correct output: 36                  | Program output:                    
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -87                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: 54                 
Correct output: -81                 | Program output: -14                
Correct output: 17                  | Program output: 17                 
Correct output: -62                 | Program output: 96                 
Correct output: -65                 | Program output: -16                
Correct output: -25                 | Program output: 17                 
Correct output: -70                 | Program output: -70                
Correct output: -70                 | Program output: -41                
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: -72                
Correct output: -43                 | Program output: -43                
Correct output: -63                 | Program output: -63                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_990} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_706})
Lexicase best program: (in3 integer_shove integer_gt in1 in2 exec_pop () in3 integer_dup_times in4 exec_pop () in3 integer_dup_times in4 integer_shove integer_min boolean_yank in4 in4 in3 exec_do*while (integer_shove tag_exec_990 (boolean_swap) in3 boolean_dup_items integer_mod integer_shove in3 integer_shove integer_shove in3 in4 integer_shove in3 integer_shove integer_shove integer_shove in3 integer_shove integer_shove integer_shove in3 integer_shove integer_shove in3 in3 in4 integer_shove integer_gt) boolean_swap print_integer boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and exec_pop (exec_if (integer_inc integer_add boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (exec_k_when_autoconstructing (exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove (print_integer boolean_swap boolean_stackdepth print_integer) exec_dup (tagged_706)) () ()) ())))))
Lexicase best errors: [0 0 1 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 98
Percent parens: 0.194
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_990} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_706})
Zero cases best program: (in3 integer_shove integer_gt in1 in2 exec_pop () in3 integer_dup_times in4 exec_pop () in3 integer_dup_times in4 integer_shove integer_min boolean_yank in4 in4 in3 exec_do*while (integer_shove tag_exec_990 (boolean_swap) in3 boolean_dup_items integer_mod integer_shove in3 integer_shove integer_shove in3 in4 integer_shove in3 integer_shove integer_shove integer_shove in3 integer_shove integer_shove integer_shove in3 integer_shove integer_shove in3 in3 in4 integer_shove integer_gt) boolean_swap print_integer boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and exec_pop (exec_if (integer_inc integer_add boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (exec_k_when_autoconstructing (exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove (print_integer boolean_swap boolean_stackdepth print_integer) exec_dup (tagged_706)) () ()) ())))))
Zero cases best errors: [0 0 1 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 98
Percent parens: 0.194
--- Lexicase Population Statistics ---
Count of elite individuals by case: (252 275 255 303 208 105 250 315 527 227)
Population mean number of elite cases: 2.72
Count of perfect (error zero) individuals by case: (252 275 255 303 208 105 250 315 527 227)
Population mean number of perfect (error zero) cases: 2.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_990} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_706})
Best program: (in3 integer_shove integer_gt in1 in2 exec_pop () in3 integer_dup_times in4 exec_pop () in3 integer_dup_times in4 integer_shove integer_min boolean_yank in4 in4 in3 exec_do*while (integer_shove tag_exec_990 (boolean_swap) in3 boolean_dup_items integer_mod integer_shove in3 integer_shove integer_shove in3 in4 integer_shove in3 integer_shove integer_shove integer_shove in3 integer_shove integer_shove integer_shove in3 integer_shove integer_shove in3 in3 in4 integer_shove integer_gt) boolean_swap print_integer boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and exec_pop (exec_if (integer_inc integer_add boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (exec_k_when_autoconstructing (exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove (print_integer boolean_swap boolean_stackdepth print_integer) exec_dup (tagged_706)) () ()) ())))))
Errors: [0 0 1 0 1 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 79
Size: 98
Percent parens: 0.194
--- Population Statistics ---
Average total errors in population: 7.283
Median total errors in population: 7
Error averages by case: (0.748 0.725 0.745 0.697 0.792 0.895 0.75 0.685 0.473 0.773)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 69.606
Average program size in population (points): 88.15
Average percent parens in population: 0.211
Minimum age in population: 55.87062975764275
Maximum age in population: 59.36187281395542
Average age in population: 58.01259193837902
Median age in population: 58.08806570118759
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 77
Genome diversity (% unique genomes):	 0.696
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 79
Syntactic diversity (% unique Push programs):	 0.669
Total error diversity:				 0.007
Error (vector) diversity:			 0.068
Behavioral diversity:				 0.239
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 38973822
--- Timings ---
Current time: 1559584955429 milliseconds
Total Time:         150.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.4 seconds, 50.0%
Fitness Testing:     47.3 seconds, 31.3%
Report:              28.2 seconds, 18.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 492
Test mean error for best: 0.49200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output:                    
Correct output: -82                 | Program output: -16                
Correct output: 63                  | Program output: 63                 
Correct output: -43                 | Program output: -43                
Correct output: -71                 | Program output: 65                 
Correct output: -7                  | Program output: 8                  
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 81                 
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 23                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output:                    
Correct output: 51                  | Program output: 51                 
Correct output: 48                  | Program output:                    
Correct output: 2                   | Program output: 46                 
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output:                    
Correct output: 12                  | Program output: 93                 
Correct output: 40                  | Program output: 56                 
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 48                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 43                 
Correct output: 4                   | Program output: 94                 
Correct output: 32                  | Program output: 32                 
Correct output: 40                  | Program output: 40                 
Correct output: 13                  | Program output: 13                 
Correct output: 5                   | Program output: 5                  
Correct output: 9                   | Program output: 9                  
Correct output: 1                   | Program output:                    
Correct output: 45                  | Program output: 45                 
Correct output: -87                 | Program output: -46                
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: -26                
Correct output: -29                 | Program output: -29                
Correct output: -18                 | Program output: 43                 
Correct output: -55                 | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: 97                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: 98                 
Correct output: -61                 | Program output: 57                 
Correct output: -81                 | Program output: -19                
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: 65                 
Correct output: 3                   | Program output: 20                 
Correct output: -88                 | Program output: -27                
Correct output: -86                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -62                 | Program output: -62                
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: -62                
Correct output: -66                 | Program output: 58                 
Correct output: -22                 | Program output: 9                  
Correct output: -51                 | Program output: -51                
Correct output: 4                   | Program output: 4                  
Correct output: -49                 | Program output: -7                 
Correct output: -53                 | Program output: -23                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -26                
Correct output: -61                 | Program output: 5                  
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -60                
Correct output: -41                 | Program output: 52                 
Correct output: -42                 | Program output: -42                
Correct output: -42                 | Program output: -42                
Correct output: -99                 | Program output: -66                
Correct output: -76                 | Program output: -76                
Correct output: -71                 | Program output: -61                
Correct output: -51                 | Program output: 86                 
Correct output: 36                  | Program output:                    
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -87                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: 54                 
Correct output: -81                 | Program output: -14                
Correct output: 17                  | Program output: 17                 
Correct output: -62                 | Program output: 96                 
Correct output: -65                 | Program output: -16                
Correct output: -25                 | Program output: 17                 
Correct output: -70                 | Program output: -70                
Correct output: -70                 | Program output: -41                
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: -72                
Correct output: -43                 | Program output: -43                
Correct output: -63                 | Program output: -63                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_990} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_706})
Lexicase best program: (in3 integer_shove integer_gt in1 in2 exec_pop () in3 integer_dup_times in4 exec_pop () in3 integer_dup_times in4 integer_shove integer_min boolean_yank in4 in4 in3 exec_do*while (integer_shove tag_exec_990 (boolean_swap) in3 boolean_dup_items) integer_mod integer_shove in3 integer_shove integer_shove in3 in4 integer_shove in3 integer_shove integer_shove integer_shove in3 integer_shove integer_shove integer_shove in3 integer_shove integer_shove in3 in3 in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and exec_pop (exec_if () (integer_inc integer_add boolean_empty integer_div exec_do*times () exec_yankdup) exec_do*count (exec_k_when_autoconstructing (exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove (print_integer boolean_swap boolean_stackdepth print_integer) exec_dup (tagged_706)) () ()) ()))))
Lexicase best errors: [0 1 0 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 98
Percent parens: 0.194
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_990} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_706})
Zero cases best program: (in3 integer_shove integer_gt in1 in2 exec_pop () in3 integer_dup_times in4 exec_pop () in3 integer_dup_times in4 integer_shove integer_min boolean_yank in4 in4 in3 exec_do*while (integer_shove tag_exec_990 (boolean_swap) in3 boolean_dup_items) integer_mod integer_shove in3 integer_shove integer_shove in3 in4 integer_shove in3 integer_shove integer_shove integer_shove in3 integer_shove integer_shove integer_shove in3 integer_shove integer_shove in3 in3 in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and exec_pop (exec_if () (integer_inc integer_add boolean_empty integer_div exec_do*times () exec_yankdup) exec_do*count (exec_k_when_autoconstructing (exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup in2 exec_shove (print_integer boolean_swap boolean_stackdepth print_integer) exec_dup (tagged_706)) () ()) ()))))
Zero cases best errors: [0 1 0 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 98
Percent parens: 0.194
--- Lexicase Population Statistics ---
Count of elite individuals by case: (298 132 430 337 278 517 225 349 837 264)
Population mean number of elite cases: 3.67
Count of perfect (error zero) individuals by case: (298 132 430 337 278 517 225 349 837 264)
Population mean number of perfect (error zero) cases: 3.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_990} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup})
Best program: (in3 integer_shove integer_gt in1 in2 exec_pop () in3 integer_dup_times in4 exec_pop () in3 integer_dup_times in4 integer_shove integer_min boolean_yank in4 in4 in3 exec_do*while (integer_shove tag_exec_990 (boolean_swap) in3 boolean_dup_items integer_mod integer_shove in3 integer_shove integer_shove in3 in4 integer_shove in3 integer_shove integer_shove integer_shove in3 integer_shove integer_shove integer_shove in3 integer_shove integer_shove in3 in3 in4 integer_shove integer_gt) boolean_swap print_integer boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and exec_pop (exec_if (integer_inc integer_add boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (exec_k_when_autoconstructing (exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup) () ()) ())))))
Errors: [0 1 0 0 1 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 71
Size: 88
Percent parens: 0.193
--- Population Statistics ---
Average total errors in population: 6.333
Median total errors in population: 6
Error averages by case: (0.702 0.868 0.57 0.663 0.722 0.483 0.775 0.651 0.163 0.736)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 71.887
Average program size in population (points): 90.836
Average percent parens in population: 0.211
Minimum age in population: 57.11108798079658
Maximum age in population: 61.05785331365769
Average age in population: 59.36354159235062
Median age in population: 59.44947482747375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 62
Genome diversity (% unique genomes):	 0.687
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.671
Total error diversity:				 0.007
Error (vector) diversity:			 0.06
Behavioral diversity:				 0.249
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 40217289
--- Timings ---
Current time: 1559584960587 milliseconds
Total Time:         156.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        77.3 seconds, 49.5%
Fitness Testing:     48.9 seconds, 31.4%
Report:              29.7 seconds, 19.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 579
Test mean error for best: 0.57900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -82                 | Program output: -82                
Correct output: 63                  | Program output: 63                 
Correct output: -43                 | Program output: -43                
Correct output: -71                 | Program output: -71                
Correct output: -7                  | Program output: -7                 
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 23                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 96                 
Correct output: 51                  | Program output: 65                 
Correct output: 48                  | Program output: 48                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 71                 
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 40                  | Program output: 40                 
Correct output: 10                  | Program output: 21                 
Correct output: 3                   | Program output: 19                 
Correct output: 13                  | Program output: 72                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 43                 
Correct output: 32                  | Program output: 56                 
Correct output: 40                  | Program output: 76                 
Correct output: 13                  | Program output: 89                 
Correct output: 5                   | Program output: 60                 
Correct output: 9                   | Program output: 51                 
Correct output: 1                   | Program output: 53                 
Correct output: 45                  | Program output: 50                 
Correct output: -87                 | Program output: -7                 
Correct output: -90                 | Program output: 10                 
Correct output: -62                 | Program output: -26                
Correct output: -29                 | Program output: 62                 
Correct output: -18                 | Program output: -18                
Correct output: -55                 | Program output: -55                
Correct output: -86                 | Program output: -9                 
Correct output: -77                 | Program output: 97                 
Correct output: -95                 | Program output: -93                
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output: -61                
Correct output: -81                 | Program output: -13                
Correct output: -84                 | Program output: -79                
Correct output: -70                 | Program output: -70                
Correct output: 3                   | Program output: 3                  
Correct output: -88                 | Program output: -27                
Correct output: -86                 | Program output: 89                 
Correct output: -51                 | Program output: 72                 
Correct output: -62                 | Program output: 71                 
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: 73                 
Correct output: -66                 | Program output: -39                
Correct output: -22                 | Program output: -22                
Correct output: -51                 | Program output: -51                
Correct output: 4                   | Program output: 24                 
Correct output: -49                 | Program output: -7                 
Correct output: -53                 | Program output: -23                
Correct output: -71                 | Program output: 9                  
Correct output: -86                 | Program output: 18                 
Correct output: -61                 | Program output: -61                
Correct output: -92                 | Program output: 48                 
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -3                 
Correct output: -41                 | Program output: -41                
Correct output: -42                 | Program output: -16                
Correct output: -42                 | Program output: 36                 
Correct output: -99                 | Program output: -66                
Correct output: -76                 | Program output: 27                 
Correct output: -71                 | Program output: 15                 
Correct output: -51                 | Program output: -23                
Correct output: 36                  | Program output: 36                 
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -87                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: 54                 
Correct output: -81                 | Program output: -10                
Correct output: 17                  | Program output: 65                 
Correct output: -62                 | Program output: -62                
Correct output: -65                 | Program output: 85                 
Correct output: -25                 | Program output: -25                
Correct output: -70                 | Program output: 58                 
Correct output: -70                 | Program output: -41                
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: 40                 
Correct output: -72                 | Program output: -65                
Correct output: -43                 | Program output: 42                 
Correct output: -63                 | Program output: -63                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_exec_990} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup})
Lexicase best program: (in3 integer_shove integer_gt in1 in2 exec_pop () in3 in3 in4 in4 in3 in2 integer_shove tag_exec_990 () in2 in3 boolean_dup_items integer_mod integer_div in3 integer_shove integer_shove boolean_rot in3 in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth integer_stackdepth exec_do*times (boolean_not) exec_noop integer_swap exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (boolean_frominteger exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup exec_flush exec_shove (integer_yankdup)) () ())) ()) ()))
Lexicase best errors: [0 0 1 0 0 1 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 69
Percent parens: 0.232
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_exec_990} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup})
Zero cases best program: (in3 integer_shove integer_gt in1 in2 exec_pop () in3 in3 in4 in4 in3 in2 integer_shove tag_exec_990 () in2 in3 boolean_dup_items integer_mod integer_div in3 integer_shove integer_shove boolean_rot in3 in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth integer_stackdepth exec_do*times (boolean_not) exec_noop integer_swap exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (boolean_frominteger exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup exec_flush exec_shove (integer_yankdup)) () ())) ()) ()))
Zero cases best errors: [0 0 1 0 0 1 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 69
Percent parens: 0.232
--- Lexicase Population Statistics ---
Count of elite individuals by case: (299 389 28 287 301 258 261 181 235 290)
Population mean number of elite cases: 2.53
Count of perfect (error zero) individuals by case: (299 389 28 287 301 258 261 181 235 290)
Population mean number of perfect (error zero) cases: 2.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_exec_990} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup})
Best program: (in3 integer_shove integer_gt in1 in2 exec_pop () in3 in3 in4 in4 in3 in2 integer_shove tag_exec_990 () in2 in3 boolean_dup_items integer_mod integer_div in3 integer_shove integer_shove in3 in3 in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth integer_stackdepth exec_do*times (boolean_not) exec_noop integer_swap exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup exec_flush exec_shove (integer_yankdup)) () ())) ()) ()))
Errors: [1 0 1 0 1 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 53
Size: 69
Percent parens: 0.232
--- Population Statistics ---
Average total errors in population: 7.471
Median total errors in population: 8
Error averages by case: (0.701 0.611 0.972 0.713 0.699 0.742 0.739 0.819 0.765 0.71)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 66.72
Average program size in population (points): 84.542
Average percent parens in population: 0.209
Minimum age in population: 59.3596990504011
Maximum age in population: 62.31341267527023
Average age in population: 60.73399574246215
Median age in population: 60.84949928617425
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 62
Genome diversity (% unique genomes):	 0.697
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.686
Total error diversity:				 0.007
Error (vector) diversity:			 0.053
Behavioral diversity:				 0.255
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 41320610
--- Timings ---
Current time: 1559584964348 milliseconds
Total Time:         161.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        79.2 seconds, 49.2%
Fitness Testing:     50.4 seconds, 31.3%
Report:              31.3 seconds, 19.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 541
Test mean error for best: 0.54100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -82                 | Program output: -16                
Correct output: 63                  | Program output: 97                 
Correct output: -43                 | Program output: -43                
Correct output: -71                 | Program output: -71                
Correct output: -7                  | Program output: -7                 
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 22                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 96                 
Correct output: 51                  | Program output: 65                 
Correct output: 48                  | Program output: 48                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 71                 
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 40                  | Program output: 40                 
Correct output: 10                  | Program output: 21                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 72                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 43                 
Correct output: 32                  | Program output: 56                 
Correct output: 40                  | Program output: 76                 
Correct output: 13                  | Program output: 89                 
Correct output: 5                   | Program output: 60                 
Correct output: 9                   | Program output: 51                 
Correct output: 1                   | Program output: 60                 
Correct output: 45                  | Program output: 50                 
Correct output: -87                 | Program output: -41                
Correct output: -90                 | Program output: 10                 
Correct output: -62                 | Program output: -26                
Correct output: -29                 | Program output: 1                  
Correct output: -18                 | Program output: -18                
Correct output: -55                 | Program output: 2                  
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: 97                 
Correct output: -95                 | Program output: -93                
Correct output: -91                 | Program output: -37                
Correct output: -61                 | Program output: -61                
Correct output: -81                 | Program output: -13                
Correct output: -84                 | Program output: -79                
Correct output: -70                 | Program output: -51                
Correct output: 3                   | Program output: 3                  
Correct output: -88                 | Program output: -54                
Correct output: -86                 | Program output: 89                 
Correct output: -51                 | Program output: 72                 
Correct output: -62                 | Program output: 71                 
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: -71                
Correct output: -66                 | Program output: -66                
Correct output: -22                 | Program output: 77                 
Correct output: -51                 | Program output: -51                
Correct output: 4                   | Program output: 24                 
Correct output: -49                 | Program output: -7                 
Correct output: -53                 | Program output: -23                
Correct output: -71                 | Program output: 9                  
Correct output: -86                 | Program output: -86                
Correct output: -61                 | Program output: -48                
Correct output: -92                 | Program output: -44                
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -3                 
Correct output: -41                 | Program output: 31                 
Correct output: -42                 | Program output: -16                
Correct output: -42                 | Program output: -42                
Correct output: -99                 | Program output: -66                
Correct output: -76                 | Program output: -76                
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: -51                
Correct output: 36                  | Program output: 36                 
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -87                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: 54                 
Correct output: -81                 | Program output: -10                
Correct output: 17                  | Program output: 65                 
Correct output: -62                 | Program output: -29                
Correct output: -65                 | Program output: 85                 
Correct output: -25                 | Program output: 99                 
Correct output: -70                 | Program output: 58                 
Correct output: -70                 | Program output: -41                
Correct output: -97                 | Program output: -2                 
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: -11                
Correct output: -72                 | Program output: -65                
Correct output: -43                 | Program output: 42                 
Correct output: -63                 | Program output: -63                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 0, :instruction in2} {:close 2, :instruction exec_pop} {:close 0, :instruction tag_integer_30} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_exec_990} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup})
Lexicase best program: (in3 in2 exec_pop () in3 integer_dup_times integer_gt in1 in3 integer_shove integer_gt boolean_shove in2 exec_pop () tag_integer_30 in3 in4 in4 in3 in2 integer_shove tag_exec_990 () boolean_swap in3 boolean_dup_items integer_mod integer_shove in3 integer_shove in3 integer_shove integer_shove in3 in3 in3 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_lt integer_stackdepth exec_do*times (boolean_not) exec_noop integer_swap exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup exec_flush exec_shove (integer_yankdup)) () ())) ()) ()))
Lexicase best errors: [0 1 0 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 79
Percent parens: 0.215
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_shove} {:close 0, :instruction in2} {:close 2, :instruction exec_pop} {:close 0, :instruction tag_integer_30} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 1, :instruction tag_exec_990} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup})
Zero cases best program: (in3 in2 exec_pop () in3 integer_dup_times integer_gt in1 in3 integer_shove integer_gt boolean_shove in2 exec_pop () tag_integer_30 in3 in4 in4 in3 in2 integer_shove tag_exec_990 () boolean_swap in3 boolean_dup_items integer_mod integer_shove in3 integer_shove in3 integer_shove integer_shove in3 in3 in3 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_lt integer_stackdepth exec_do*times (boolean_not) exec_noop integer_swap exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times () exec_yankdup) (exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup exec_flush exec_shove (integer_yankdup)) () ())) ()) ()))
Zero cases best errors: [0 1 0 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 79
Percent parens: 0.215
--- Lexicase Population Statistics ---
Count of elite individuals by case: (884 75 175 375 396 65 437 545 27 374)
Population mean number of elite cases: 3.35
Count of perfect (error zero) individuals by case: (884 75 175 375 396 65 437 545 27 374)
Population mean number of perfect (error zero) cases: 3.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_990} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup})
Best program: (in3 integer_shove integer_gt in1 in2 exec_pop () in3 in3 in4 in4 in3 in2 integer_shove tag_exec_990 (in2) in3 boolean_dup_items integer_mod integer_div in3 integer_shove integer_shove in3 in3 in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_stackdepth integer_stackdepth exec_do*times (boolean_not) exec_noop integer_swap exec_pop (exec_if (integer_inc exec_s_when_autoconstructing (boolean_empty integer_div exec_do*times (exec_yankdup) exec_do*count (print_newline exec_s_when_autoconstructing (integer_eq boolean_yank boolean_yankdup exec_flush exec_shove (integer_yankdup)) () ())) () ()) ()))
Errors: [0 1 1 0 0 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 53
Size: 69
Percent parens: 0.232
--- Population Statistics ---
Average total errors in population: 6.647
Median total errors in population: 6
Error averages by case: (0.116 0.925 0.825 0.625 0.604 0.935 0.563 0.455 0.973 0.626)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 70.503
Average program size in population (points): 89.227
Average percent parens in population: 0.211
Minimum age in population: 60.48539351559884
Maximum age in population: 64.02056848949724
Average age in population: 62.09300072177622
Median age in population: 62.09531195648742
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 65
Genome diversity (% unique genomes):	 0.731
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 67
Syntactic diversity (% unique Push programs):	 0.708
Total error diversity:				 0.007
Error (vector) diversity:			 0.088
Behavioral diversity:				 0.304
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 42344355
--- Timings ---
Current time: 1559584967927 milliseconds
Total Time:         164.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        81.1 seconds, 49.3%
Fitness Testing:     51.7 seconds, 31.4%
Report:              31.7 seconds, 19.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Smallest problem report - generation 41
Test total error for best: 430
Test mean error for best: 0.43000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -82                 | Program output: -82                
Correct output: 63                  | Program output: 63                 
Correct output: -43                 | Program output: -43                
Correct output: -71                 | Program output: 65                 
Correct output: -7                  | Program output: 8                  
Correct output: -71                 | Program output: 14                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 81                 
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 23                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 78                 
Correct output: 51                  | Program output: 51                 
Correct output: 48                  | Program output: 56                 
Correct output: 2                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output: 46                 
Correct output: 12                  | Program output: 92                 
Correct output: 40                  | Program output: 56                 
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 19                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 41                 
Correct output: 40                  | Program output: 40                 
Correct output: 13                  | Program output: 20                 
Correct output: 5                   | Program output: 5                  
Correct output: 9                   | Program output: 9                  
Correct output: 1                   | Program output: 53                 
Correct output: 45                  | Program output: 45                 
Correct output: -87                 | Program output: -41                
Correct output: -90                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -29                 | Program output: -29                
Correct output: -18                 | Program output: 43                 
Correct output: -55                 | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: -4                 
Correct output: -95                 | Program output: -93                
Correct output: -91                 | Program output: 66                 
Correct output: -61                 | Program output: 57                 
Correct output: -81                 | Program output: -81                
Correct output: -84                 | Program output: -79                
Correct output: -70                 | Program output: 65                 
Correct output: 3                   | Program output: 20                 
Correct output: -88                 | Program output: -54                
Correct output: -86                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -62                 | Program output: -62                
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: -62                
Correct output: -66                 | Program output: 58                 
Correct output: -22                 | Program output: 9                  
Correct output: -51                 | Program output: -51                
Correct output: 4                   | Program output: 4                  
Correct output: -49                 | Program output: -49                
Correct output: -53                 | Program output: -23                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -26                
Correct output: -61                 | Program output: 5                  
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: 50                 
Correct output: -42                 | Program output: -35                
Correct output: -42                 | Program output: -42                
Correct output: -99                 | Program output: -92                
Correct output: -76                 | Program output: -76                
Correct output: -71                 | Program output: -61                
Correct output: -51                 | Program output: 86                 
Correct output: 36                  | Program output: 55                 
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -87                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: 17                  | Program output: 38                 
Correct output: -62                 | Program output: 75                 
Correct output: -65                 | Program output: -16                
Correct output: -25                 | Program output: 17                 
Correct output: -70                 | Program output: -70                
Correct output: -70                 | Program output: -41                
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -63                 | Program output: -63                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_990} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup})
Lexicase best program: (integer_gt integer_gt in1 in3 integer_shove integer_gt in1 in2 integer_shove integer_gt exec_yankdup in2 exec_pop () integer_dup_times in4 integer_shove integer_min boolean_yank in4 in4 in3 exec_do*while (integer_shove exec_do*while (integer_shove tag_exec_990 (boolean_swap) in3 boolean_dup_items integer_mod integer_shove exec_stackdepth integer_shove integer_shove in3 integer_min in4 integer_shove integer_gt) boolean_swap) print_integer boolean_xor integer_lt integer_stackdepth exec_do*times (boolean_not) exec_noop integer_swap exec_pop (boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and exec_pop (exec_if (integer_inc integer_add boolean_empty integer_div exec_do*times () exec_yankdup) ()))))
Lexicase best errors: [0 0 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 76
Percent parens: 0.171
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_990} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup})
Zero cases best program: (integer_gt integer_gt in1 in3 integer_shove integer_gt in1 in2 integer_shove integer_gt exec_yankdup in2 exec_pop () integer_dup_times in4 integer_shove integer_min boolean_yank in4 in4 in3 exec_do*while (integer_shove exec_do*while (integer_shove tag_exec_990 (boolean_swap) in3 boolean_dup_items integer_mod integer_shove exec_stackdepth integer_shove integer_shove in3 integer_min in4 integer_shove integer_gt) boolean_swap) print_integer boolean_xor integer_lt integer_stackdepth exec_do*times (boolean_not) exec_noop integer_swap exec_pop (boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and exec_pop (exec_if (integer_inc integer_add boolean_empty integer_div exec_do*times () exec_yankdup) ()))))
Zero cases best errors: [0 0 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 76
Percent parens: 0.171
--- Lexicase Population Statistics ---
Count of elite individuals by case: (229 360 108 604 316 79 875 110 107 366)
Population mean number of elite cases: 3.15
Count of perfect (error zero) individuals by case: (229 360 108 604 316 79 875 110 107 366)
Population mean number of perfect (error zero) cases: 3.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_990} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup})
Best program: (integer_gt integer_gt in1 in3 integer_shove integer_gt in1 in2 integer_shove integer_gt exec_yankdup in2 exec_pop () integer_dup_times in4 integer_shove integer_min boolean_yank in4 in4 in3 exec_do*while (integer_shove exec_do*while (integer_shove tag_exec_990 (boolean_swap) in3 boolean_dup_items integer_mod integer_shove exec_stackdepth integer_shove integer_shove in3 integer_min in4 integer_shove integer_gt) boolean_swap) print_integer boolean_xor integer_lt integer_stackdepth exec_do*times (boolean_not) exec_noop integer_swap exec_pop (boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and exec_pop (exec_if (integer_inc integer_add boolean_empty integer_div exec_do*times () exec_yankdup) ()))))
Errors: [0 0 0 0 0 1 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 63
Size: 76
Percent parens: 0.171
--- Population Statistics ---
Average total errors in population: 6.846
Median total errors in population: 7
Error averages by case: (0.771 0.64 0.892 0.396 0.684 0.921 0.125 0.89 0.893 0.634)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 72.774
Average program size in population (points): 90.686
Average percent parens in population: 0.198
Minimum age in population: 61.61108798079658
Maximum age in population: 65.16091734051042
Average age in population: 63.7578126098153
Median age in population: 63.84196837845593
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 48
Genome diversity (% unique genomes):	 0.725
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.697
Total error diversity:				 0.009
Error (vector) diversity:			 0.069
Behavioral diversity:				 0.299
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 43439992
--- Timings ---
Current time: 1559584971519 milliseconds
Total Time:         168.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        83.0 seconds, 49.4%
Fitness Testing:     52.9 seconds, 31.5%
Report:              32.1 seconds, 19.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Smallest problem report - generation 42
Test total error for best: 467
Test mean error for best: 0.46700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -82                 | Program output: -82                
Correct output: 63                  | Program output: 97                 
Correct output: -43                 | Program output: -43                
Correct output: -71                 | Program output: -71                
Correct output: -7                  | Program output:                    
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 22                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 96                 
Correct output: 51                  | Program output: 65                 
Correct output: 48                  | Program output: 48                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 79                 
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 40                  | Program output: 40                 
Correct output: 10                  | Program output: 45                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 72                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 43                 
Correct output: 32                  | Program output: 56                 
Correct output: 40                  | Program output: 76                 
Correct output: 13                  | Program output: 89                 
Correct output: 5                   | Program output: 60                 
Correct output: 9                   | Program output: 51                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 50                 
Correct output: -87                 | Program output: -41                
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output:                    
Correct output: -29                 | Program output: 1                  
Correct output: -18                 | Program output: 8                  
Correct output: -55                 | Program output: -55                
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output: -61                
Correct output: -81                 | Program output: -81                
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: -70                
Correct output: 3                   | Program output: 3                  
Correct output: -88                 | Program output: -54                
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: 23                 
Correct output: -62                 | Program output:                    
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: -71                
Correct output: -66                 | Program output: -39                
Correct output: -22                 | Program output: -22                
Correct output: -51                 | Program output: -51                
Correct output: 4                   | Program output: 24                 
Correct output: -49                 | Program output: -7                 
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: 9                  
Correct output: -86                 | Program output: -86                
Correct output: -61                 | Program output: -61                
Correct output: -92                 | Program output: -44                
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: -41                
Correct output: -42                 | Program output: -35                
Correct output: -42                 | Program output: 12                 
Correct output: -99                 | Program output: -92                
Correct output: -76                 | Program output: -31                
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: -23                
Correct output: 36                  | Program output: 36                 
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -87                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: -44                
Correct output: -81                 | Program output: -81                
Correct output: 17                  | Program output: 65                 
Correct output: -62                 | Program output: -62                
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -25                
Correct output: -70                 | Program output: -56                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -2                 
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: -11                
Correct output: -72                 | Program output: -72                
Correct output: -43                 | Program output:                    
Correct output: -63                 | Program output: -63                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup})
Lexicase best program: (in3 in2 exec_pop () in3 integer_dup_times integer_gt in1 in3 integer_shove in2 integer_shove integer_gt in1 in2 exec_pop () integer_dup_times in4 integer_shove integer_min boolean_yank in4 in4 in3 exec_do*while (integer_shove exec_do*while (integer_shove boolean_swap) in3 boolean_dup_items integer_mod integer_shove exec_stackdepth integer_shove integer_shove in3 integer_min in4 integer_shove integer_gt) boolean_swap print_integer boolean_xor integer_lt integer_stackdepth exec_do*times (boolean_not) exec_noop integer_swap exec_pop (boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and exec_pop (exec_if (integer_mod integer_add boolean_empty integer_div exec_do*times () exec_yankdup) ()))))
Lexicase best errors: [0 1 0 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 77
Percent parens: 0.169
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup})
Zero cases best program: (in3 in2 exec_pop () in3 integer_dup_times integer_gt in1 in3 integer_shove in2 integer_shove integer_gt in1 in2 exec_pop () integer_dup_times in4 integer_shove integer_min boolean_yank in4 in4 in3 exec_do*while (integer_shove exec_do*while (integer_shove boolean_swap) in3 boolean_dup_items integer_mod integer_shove exec_stackdepth integer_shove integer_shove in3 integer_min in4 integer_shove integer_gt) boolean_swap print_integer boolean_xor integer_lt integer_stackdepth exec_do*times (boolean_not) exec_noop integer_swap exec_pop (boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and exec_pop (exec_if (integer_mod integer_add boolean_empty integer_div exec_do*times () exec_yankdup) ()))))
Zero cases best errors: [0 1 0 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 77
Percent parens: 0.169
--- Lexicase Population Statistics ---
Count of elite individuals by case: (234 433 110 93 527 142 486 97 22 639)
Population mean number of elite cases: 2.78
Count of perfect (error zero) individuals by case: (234 433 110 93 527 142 486 97 22 639)
Population mean number of perfect (error zero) cases: 2.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup})
Best program: (in3 in2 exec_pop () in3 integer_dup_times integer_gt in1 in3 integer_shove in2 integer_shove integer_gt in1 in2 exec_pop () integer_dup_times in4 integer_shove integer_min boolean_yank in4 in4 in3 exec_do*while (integer_shove exec_do*while (integer_shove boolean_swap) in3 boolean_dup_items integer_mod integer_shove exec_stackdepth integer_shove integer_shove in3 integer_min in4 integer_shove integer_gt) boolean_swap print_integer boolean_xor integer_lt integer_stackdepth exec_do*times (boolean_not) exec_noop integer_swap exec_pop (boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and exec_pop (exec_if (integer_mod integer_add boolean_empty integer_div exec_do*times () exec_yankdup) ()))))
Errors: [0 1 0 1 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 64
Size: 77
Percent parens: 0.169
--- Population Statistics ---
Average total errors in population: 7.217
Median total errors in population: 7
Error averages by case: (0.766 0.567 0.89 0.907 0.473 0.858 0.514 0.903 0.978 0.361)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 70.501
Average program size in population (points): 86.301
Average percent parens in population: 0.182
Minimum age in population: 63.02504464046797
Maximum age in population: 67.00780496530751
Average age in population: 65.40441260356786
Median age in population: 65.40430248228267
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 119
Genome diversity (% unique genomes):	 0.728
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 135
Syntactic diversity (% unique Push programs):	 0.707
Total error diversity:				 0.008
Error (vector) diversity:			 0.074
Behavioral diversity:				 0.286
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 44439152
--- Timings ---
Current time: 1559584975378 milliseconds
Total Time:         171.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        84.9 seconds, 49.5%
Fitness Testing:     54.1 seconds, 31.5%
Report:              32.5 seconds, 18.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Smallest problem report - generation 43
Test total error for best: 441
Test mean error for best: 0.44100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -82                 | Program output: -82                
Correct output: 63                  | Program output:                    
Correct output: -43                 | Program output: -43                
Correct output: -71                 | Program output: 65                 
Correct output: -7                  | Program output: 8                  
Correct output: -71                 | Program output: 14                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 81                 
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 22                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 78                 
Correct output: 51                  | Program output: 65                 
Correct output: 48                  | Program output: 48                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output:                    
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 40                  | Program output: 40                 
Correct output: 10                  | Program output: 0                  
Correct output: 3                   | Program output: 19                 
Correct output: 13                  | Program output:                    
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 41                 
Correct output: 40                  | Program output: 40                 
Correct output: 13                  | Program output: 20                 
Correct output: 5                   | Program output: 60                 
Correct output: 9                   | Program output:                    
Correct output: 1                   | Program output: 53                 
Correct output: 45                  | Program output:                    
Correct output: -87                 | Program output: -41                
Correct output: -90                 | Program output: -10                
Correct output: -62                 | Program output:                    
Correct output: -29                 | Program output: -29                
Correct output: -18                 | Program output: -18                
Correct output: -55                 | Program output: 39                 
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: 66                 
Correct output: -61                 | Program output: -61                
Correct output: -81                 | Program output: -81                
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: 65                 
Correct output: 3                   | Program output: 3                  
Correct output: -88                 | Program output: -54                
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output:                    
Correct output: -62                 | Program output:                    
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: -62                
Correct output: -66                 | Program output: 58                 
Correct output: -22                 | Program output: 9                  
Correct output: -51                 | Program output: -51                
Correct output: 4                   | Program output: 0                  
Correct output: -49                 | Program output: -49                
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -26                
Correct output: -61                 | Program output: 5                  
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: 50                 
Correct output: -42                 | Program output: -35                
Correct output: -42                 | Program output: -42                
Correct output: -99                 | Program output: -92                
Correct output: -76                 | Program output: -76                
Correct output: -71                 | Program output: -61                
Correct output: -51                 | Program output: 86                 
Correct output: 36                  | Program output: 36                 
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -87                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: 2                  
Correct output: -81                 | Program output: -81                
Correct output: 17                  | Program output: 38                 
Correct output: -62                 | Program output: 75                 
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: 17                 
Correct output: -70                 | Program output:                    
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: -72                
Correct output: -43                 | Program output: -43                
Correct output: -63                 | Program output: -63                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup})
Lexicase best program: (integer_gt in1 in3 exec_y_when_autoconstructing (integer_gt in3 integer_dup_times integer_gt in1 in3 integer_shove in2 integer_shove integer_gt in1) in2 exec_pop () integer_dup_times in4 integer_shove integer_min boolean_yank in4 in4 in3 exec_do*while (integer_shove exec_do*while (integer_shove boolean_swap) in3 boolean_dup_items integer_mod integer_shove exec_stackdepth integer_shove integer_shove in3 integer_min in4 integer_min integer_gt) boolean_swap print_integer boolean_xor integer_lt integer_stackdepth exec_do*times (boolean_not) exec_noop integer_swap exec_pop (boolean_xor exec_do*times () exec_yankdup))
Lexicase best errors: [1 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 63
Percent parens: 0.127
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup})
Zero cases best program: (integer_gt in1 in3 exec_y_when_autoconstructing (integer_gt in3 integer_dup_times integer_gt in1 in3 integer_shove in2 integer_shove integer_gt in1) in2 exec_pop () integer_dup_times in4 integer_shove integer_min boolean_yank in4 in4 in3 exec_do*while (integer_shove exec_do*while (integer_shove boolean_swap) in3 boolean_dup_items integer_mod integer_shove exec_stackdepth integer_shove integer_shove in3 integer_min in4 integer_min integer_gt) boolean_swap print_integer boolean_xor integer_lt integer_stackdepth exec_do*times (boolean_not) exec_noop integer_swap exec_pop (boolean_xor exec_do*times () exec_yankdup))
Zero cases best errors: [1 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 63
Percent parens: 0.127
--- Lexicase Population Statistics ---
Count of elite individuals by case: (505 213 282 782 579 143 662 512 533 193)
Population mean number of elite cases: 4.40
Count of perfect (error zero) individuals by case: (505 213 282 782 579 143 662 512 533 193)
Population mean number of perfect (error zero) cases: 4.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup})
Best program: (integer_gt in1 in3 exec_y_when_autoconstructing (integer_gt in3 integer_dup_times integer_gt in1 in3 integer_shove in2 integer_shove integer_gt in1) in2 exec_pop () integer_dup_times in4 integer_shove integer_min boolean_yank in4 in4 in3 exec_do*while (integer_shove exec_do*while (integer_shove boolean_swap) in3 boolean_dup_items integer_mod integer_shove exec_stackdepth integer_shove integer_shove in3 integer_min in4 integer_min integer_gt) boolean_swap print_integer boolean_xor integer_lt integer_stackdepth exec_do*times (boolean_not) exec_noop integer_swap exec_pop (boolean_xor exec_do*times () exec_yankdup))
Errors: [1 0 0 0 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 55
Size: 63
Percent parens: 0.127
--- Population Statistics ---
Average total errors in population: 5.596
Median total errors in population: 5
Error averages by case: (0.495 0.787 0.718 0.218 0.421 0.857 0.338 0.488 0.467 0.807)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.454
Average program size in population (points): 79.242
Average percent parens in population: 0.185
Minimum age in population: 64.79548604843148
Maximum age in population: 68.67275428258472
Average age in population: 67.19592924556713
Median age in population: 67.3303368727868
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 101
Genome diversity (% unique genomes):	 0.679
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 105
Syntactic diversity (% unique Push programs):	 0.667
Total error diversity:				 0.009
Error (vector) diversity:			 0.093
Behavioral diversity:				 0.224
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 45597128
--- Timings ---
Current time: 1559584979206 milliseconds
Total Time:         175.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        86.8 seconds, 49.4%
Fitness Testing:     55.3 seconds, 31.5%
Report:              33.3 seconds, 19.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Smallest problem report - generation 44
Test total error for best: 529
Test mean error for best: 0.52900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -82                 | Program output: -16                
Correct output: 63                  | Program output: 97                 
Correct output: -43                 | Program output: -12                
Correct output: -71                 | Program output: -71                
Correct output: -7                  | Program output: -7                 
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 22                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 96                 
Correct output: 51                  | Program output: 65                 
Correct output: 48                  | Program output: 48                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 79                 
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 40                  | Program output: 40                 
Correct output: 10                  | Program output: 21                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 72                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 43                 
Correct output: 32                  | Program output: 56                 
Correct output: 40                  | Program output: 76                 
Correct output: 13                  | Program output: 89                 
Correct output: 5                   | Program output: 60                 
Correct output: 9                   | Program output: 51                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 50                 
Correct output: -87                 | Program output: -46                
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: 25                 
Correct output: -29                 | Program output: 1                  
Correct output: -18                 | Program output: -18                
Correct output: -55                 | Program output: -55                
Correct output: -86                 | Program output: -10                
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output: -61                
Correct output: -81                 | Program output: -19                
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: -70                
Correct output: 3                   | Program output: 3                  
Correct output: -88                 | Program output: -9                 
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output: 23                 
Correct output: -62                 | Program output: 77                 
Correct output: -77                 | Program output: 27                 
Correct output: -71                 | Program output: -71                
Correct output: -66                 | Program output: -66                
Correct output: -22                 | Program output: -22                
Correct output: -51                 | Program output: 46                 
Correct output: 4                   | Program output: 24                 
Correct output: -49                 | Program output: -7                 
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: 76                 
Correct output: -86                 | Program output: -86                
Correct output: -61                 | Program output: -61                
Correct output: -92                 | Program output: -44                
Correct output: -57                 | Program output: -5                 
Correct output: -100                | Program output: 15                 
Correct output: -85                 | Program output: -60                
Correct output: -41                 | Program output: -41                
Correct output: -42                 | Program output: -42                
Correct output: -42                 | Program output: 12                 
Correct output: -99                 | Program output: -30                
Correct output: -76                 | Program output: -31                
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: -51                
Correct output: 36                  | Program output: 36                 
Correct output: -78                 | Program output: -26                
Correct output: -87                 | Program output: 9                  
Correct output: -87                 | Program output: 93                 
Correct output: -44                 | Program output: -44                
Correct output: -81                 | Program output: -14                
Correct output: 17                  | Program output: 65                 
Correct output: -62                 | Program output: -62                
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -25                
Correct output: -70                 | Program output: -56                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -2                 
Correct output: -92                 | Program output: 30                 
Correct output: -77                 | Program output: -11                
Correct output: -72                 | Program output: -72                
Correct output: -43                 | Program output: 34                 
Correct output: -63                 | Program output: -12                
Correct output: -76                 | Program output: 70                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup})
Lexicase best program: (in3 in2 exec_pop () in3 integer_dup_times integer_gt exec_eq boolean_xor integer_shove in2 integer_shove integer_gt in1 in2 exec_pop () integer_dup_times in4 integer_shove integer_min integer_shove in4 in4 in2 exec_pop () integer_dup_times in4 integer_shove integer_min boolean_yank in4 in4 in3 exec_do*while (integer_shove exec_do*while (integer_shove boolean_swap) in3 boolean_dup_items integer_mod integer_shove exec_stackdepth integer_shove integer_shove in3 integer_min in4 integer_min integer_gt) boolean_swap print_integer boolean_xor integer_lt integer_stackdepth exec_do*times (boolean_not) exec_noop integer_swap exec_pop (boolean_xor exec_do*times () exec_yankdup))
Lexicase best errors: [0 0 0 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 71
Percent parens: 0.127
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup})
Zero cases best program: (in3 in2 exec_pop () in3 integer_dup_times integer_gt exec_eq boolean_xor integer_shove in2 integer_shove integer_gt in1 in2 exec_pop () integer_dup_times in4 integer_shove integer_min integer_shove in4 in4 in2 exec_pop () integer_dup_times in4 integer_shove integer_min boolean_yank in4 in4 in3 exec_do*while (integer_shove exec_do*while (integer_shove boolean_swap) in3 boolean_dup_items integer_mod integer_shove exec_stackdepth integer_shove integer_shove in3 integer_min in4 integer_min integer_gt) boolean_swap print_integer boolean_xor integer_lt integer_stackdepth exec_do*times (boolean_not) exec_noop integer_swap exec_pop (boolean_xor exec_do*times () exec_yankdup))
Zero cases best errors: [0 0 0 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 71
Percent parens: 0.127
--- Lexicase Population Statistics ---
Count of elite individuals by case: (158 304 216 217 883 554 447 185 559 73)
Population mean number of elite cases: 3.60
Count of perfect (error zero) individuals by case: (158 304 216 217 883 554 447 185 559 73)
Population mean number of perfect (error zero) cases: 3.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup})
Best program: (integer_gt integer_gt in1 in3 integer_shove integer_gt in1 in2 exec_eq integer_gt exec_yankdup in2 in3 integer_shove in2 integer_shove integer_gt in1 in2 exec_pop () integer_dup_times in4 integer_shove integer_min integer_min in4 integer_shove integer_gt boolean_swap print_integer boolean_xor integer_lt integer_stackdepth exec_do*times (boolean_not) exec_noop integer_swap exec_pop (boolean_xor integer_stackdepth exec_do*times (boolean_not) exec_y (boolean_invert_second_then_and exec_pop (exec_if (integer_inc integer_add boolean_empty integer_div exec_do*times () exec_yankdup) ()))))
Errors: [1 1 0 0 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 52
Size: 62
Percent parens: 0.161
--- Population Statistics ---
Average total errors in population: 6.404
Median total errors in population: 6
Error averages by case: (0.842 0.696 0.784 0.783 0.117 0.446 0.553 0.815 0.441 0.927)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.646
Average program size in population (points): 72.748
Average percent parens in population: 0.150
Minimum age in population: 65.79548604843148
Maximum age in population: 70.51905790694286
Average age in population: 69.07853767718522
Median age in population: 69.08390368313508
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 160
Genome diversity (% unique genomes):	 0.662
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 169
Syntactic diversity (% unique Push programs):	 0.637
Total error diversity:				 0.009
Error (vector) diversity:			 0.054
Behavioral diversity:				 0.225
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 46610615
--- Timings ---
Current time: 1559584982793 milliseconds
Total Time:         179.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        88.7 seconds, 49.4%
Fitness Testing:     56.5 seconds, 31.5%
Report:              34.1 seconds, 19.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Smallest problem report - generation 45
Test total error for best: 396
Test mean error for best: 0.39600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -82                 | Program output: -82                
Correct output: 63                  | Program output:                    
Correct output: -43                 | Program output: -43                
Correct output: -71                 | Program output: -71                
Correct output: -7                  | Program output: -7                 
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 22                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 78                 
Correct output: 51                  | Program output:                    
Correct output: 48                  | Program output: 48                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output:                    
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 40                  | Program output: 40                 
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output:                    
Correct output: 13                  | Program output: 72                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 41                 
Correct output: 40                  | Program output: 76                 
Correct output: 13                  | Program output: 20                 
Correct output: 5                   | Program output:                    
Correct output: 9                   | Program output:                    
Correct output: 1                   | Program output: 53                 
Correct output: 45                  | Program output:                    
Correct output: -87                 | Program output: -41                
Correct output: -90                 | Program output: -10                
Correct output: -62                 | Program output:                    
Correct output: -29                 | Program output: -29                
Correct output: -18                 | Program output: 8                  
Correct output: -55                 | Program output: -55                
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: 7                  
Correct output: -61                 | Program output: -61                
Correct output: -81                 | Program output: -81                
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: 60                 
Correct output: 3                   | Program output: 3                  
Correct output: -88                 | Program output: -54                
Correct output: -86                 | Program output: -86                
Correct output: -51                 | Program output:                    
Correct output: -62                 | Program output:                    
Correct output: -77                 | Program output: -77                
Correct output: -71                 | Program output: -62                
Correct output: -66                 | Program output: 19                 
Correct output: -22                 | Program output: -22                
Correct output: -51                 | Program output: -51                
Correct output: 4                   | Program output: 4                  
Correct output: -49                 | Program output: -49                
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -26                
Correct output: -61                 | Program output: 4                  
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: -41                
Correct output: -42                 | Program output: -35                
Correct output: -42                 | Program output: -42                
Correct output: -99                 | Program output: -92                
Correct output: -76                 | Program output: -76                
Correct output: -71                 | Program output: -61                
Correct output: -51                 | Program output: 63                 
Correct output: 36                  | Program output: 36                 
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -87                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: -44                
Correct output: -81                 | Program output: -81                
Correct output: 17                  | Program output: 20                 
Correct output: -62                 | Program output: 34                 
Correct output: -65                 | Program output: -65                
Correct output: -25                 | Program output: -25                
Correct output: -70                 | Program output:                    
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -97                
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: -72                
Correct output: -43                 | Program output: -43                
Correct output: -63                 | Program output: -63                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup})
Lexicase best program: (in3 in2 exec_pop () in3 integer_dup_times integer_gt exec_eq in3 integer_shove in2 integer_shove integer_gt in1 in2 exec_pop () integer_dup_times in4 integer_shove integer_min integer_shove in4 exec_s (in4 in3 exec_do*while (integer_shove exec_do*while (integer_shove boolean_swap) in3 boolean_dup_items integer_mod integer_rot exec_stackdepth integer_shove integer_shove in3 integer_min in4 integer_min integer_gt) boolean_swap) (print_integer boolean_xor integer_lt integer_stackdepth exec_do*times (boolean_not) exec_noop integer_swap exec_pop (boolean_xor exec_do*times () exec_yankdup)) ())
Lexicase best errors: [0 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 65
Percent parens: 0.169
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup})
Zero cases best program: (in3 in2 exec_pop () in3 integer_dup_times integer_gt exec_eq in3 integer_shove in2 integer_shove integer_gt in1 in2 exec_pop () integer_dup_times in4 integer_shove integer_min integer_shove in4 exec_s (in4 in3 exec_do*while (integer_shove exec_do*while (integer_shove boolean_swap) in3 boolean_dup_items integer_mod integer_rot exec_stackdepth integer_shove integer_shove in3 integer_min in4 integer_min integer_gt) boolean_swap) (print_integer boolean_xor integer_lt integer_stackdepth exec_do*times (boolean_not) exec_noop integer_swap exec_pop (boolean_xor exec_do*times () exec_yankdup)) ())
Zero cases best errors: [0 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 65
Percent parens: 0.169
--- Lexicase Population Statistics ---
Count of elite individuals by case: (506 429 522 375 544 661 507 359 223 507)
Population mean number of elite cases: 4.63
Count of perfect (error zero) individuals by case: (506 429 522 375 544 661 507 359 223 507)
Population mean number of perfect (error zero) cases: 4.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup})
Best program: (integer_gt integer_gt in1 in3 integer_shove integer_gt in1 in2 exec_eq integer_gt exec_yankdup in2 in3 integer_shove in2 integer_shove integer_gt in1 in2 exec_pop () integer_dup_times in4 integer_min boolean_yank in4 in4 in3 exec_do*while (integer_shove exec_do*while (integer_shove boolean_swap) in3 boolean_dup_items integer_mod integer_shove exec_stackdepth integer_shove integer_shove in3 integer_min in4 integer_min integer_gt) boolean_swap print_integer boolean_xor integer_lt integer_stackdepth exec_do*times (boolean_not) exec_noop integer_swap exec_pop (boolean_xor exec_do*times () exec_yankdup))
Errors: [0 0 0 0 0 0 1 0 0 0]
Total: 1
Mean: 0.1
Genome size: 57
Size: 64
Percent parens: 0.109
--- Population Statistics ---
Average total errors in population: 5.367
Median total errors in population: 5
Error averages by case: (0.494 0.571 0.478 0.625 0.456 0.339 0.493 0.641 0.777 0.493)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.137
Average program size in population (points): 67.672
Average percent parens in population: 0.141
Minimum age in population: 69.08786491402861
Maximum age in population: 72.04162785030735
Average age in population: 71.3280269677511
Median age in population: 71.05039819434705
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 157
Genome diversity (% unique genomes):	 0.598
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 168
Syntactic diversity (% unique Push programs):	 0.557
Total error diversity:				 0.01
Error (vector) diversity:			 0.09
Behavioral diversity:				 0.215
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 47474752
--- Timings ---
Current time: 1559584986325 milliseconds
Total Time:         182.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        90.5 seconds, 49.6%
Fitness Testing:     57.4 seconds, 31.5%
Report:              34.6 seconds, 18.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Smallest problem report - generation 46
Test total error for best: 340
Test mean error for best: 0.34000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -82                 | Program output: -82                
Correct output: 63                  | Program output: 63                 
Correct output: -43                 | Program output: -43                
Correct output: -71                 | Program output: -71                
Correct output: -7                  | Program output: 8                  
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 22                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: 51                  | Program output:                    
Correct output: 48                  | Program output: 48                 
Correct output: 2                   | Program output: 4                  
Correct output: 2                   | Program output:                    
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 40                  | Program output: 40                 
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 72                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 32                 
Correct output: 40                  | Program output:                    
Correct output: 13                  | Program output: 21                 
Correct output: 5                   | Program output: 5                  
Correct output: 9                   | Program output:                    
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output:                    
Correct output: -87                 | Program output: -41                
Correct output: -90                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -29                 | Program output:                    
Correct output: -18                 | Program output: 8                  
Correct output: -55                 | Program output: -55                
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: -4                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output: -61                
Correct output: -81                 | Program output: -81                
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: -70                
Correct output: 3                   | Program output: 3                  
Correct output: -88                 | Program output: -54                
Correct output: -86                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -62                 | Program output: -62                
Correct output: -77                 | Program output:                    
Correct output: -71                 | Program output: -71                
Correct output: -66                 | Program output: -39                
Correct output: -22                 | Program output: -22                
Correct output: -51                 | Program output: -51                
Correct output: 4                   | Program output: 4                  
Correct output: -49                 | Program output: -49                
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -86                
Correct output: -61                 | Program output: -61                
Correct output: -92                 | Program output: -44                
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: 15                 
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: -41                
Correct output: -42                 | Program output: -35                
Correct output: -42                 | Program output: -42                
Correct output: -99                 | Program output: -92                
Correct output: -76                 | Program output: -31                
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: -23                
Correct output: 36                  | Program output: 36                 
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -87                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: -44                
Correct output: -81                 | Program output: -81                
Correct output: 17                  | Program output: 17                 
Correct output: -62                 | Program output: -62                
Correct output: -65                 | Program output: -16                
Correct output: -25                 | Program output: -25                
Correct output: -70                 | Program output: -70                
Correct output: -70                 | Program output: 7                  
Correct output: -97                 | Program output:                    
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: -72                
Correct output: -43                 | Program output: -43                
Correct output: -63                 | Program output: -63                
Correct output: -76                 | Program output:                    
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup})
Lexicase best program: (in3 in2 exec_pop () in3 integer_dup_times integer_gt exec_eq boolean_xor integer_shove in2 integer_shove integer_gt in1 in2 exec_pop () integer_dup_times in4 exec_shove (integer_min integer_shove in4 in4 in2 exec_pop () integer_dup_times in4 integer_shove) integer_min boolean_yank in4 in4 in3 exec_do*while (integer_shove exec_do*while (integer_shove boolean_swap) in3 boolean_dup_items integer_mod integer_shove exec_stackdepth integer_shove integer_shove in3 integer_min in4 integer_min integer_gt) boolean_swap print_integer boolean_xor integer_lt integer_stackdepth exec_do*times (boolean_not) exec_noop integer_swap exec_pop (boolean_xor exec_do*times () exec_yankdup))
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 72
Percent parens: 0.139
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup})
Zero cases best program: (in3 in2 exec_pop () in3 integer_dup_times integer_gt exec_eq boolean_xor integer_shove in2 integer_shove integer_gt in1 in2 exec_pop () integer_dup_times in4 exec_shove (integer_min integer_shove in4 in4 in2 exec_pop () integer_dup_times in4 integer_shove) integer_min boolean_yank in4 in4 in3 exec_do*while (integer_shove exec_do*while (integer_shove boolean_swap) in3 boolean_dup_items integer_mod integer_shove exec_stackdepth integer_shove integer_shove in3 integer_min in4 integer_min integer_gt) boolean_swap print_integer boolean_xor integer_lt integer_stackdepth exec_do*times (boolean_not) exec_noop integer_swap exec_pop (boolean_xor exec_do*times () exec_yankdup))
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 72
Percent parens: 0.139
--- Lexicase Population Statistics ---
Count of elite individuals by case: (863 228 210 877 753 654 782 626 655 409)
Population mean number of elite cases: 6.06
Count of perfect (error zero) individuals by case: (863 228 210 877 753 654 782 626 655 409)
Population mean number of perfect (error zero) cases: 6.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup})
Best program: (in3 in2 exec_pop () in3 integer_dup_times integer_gt exec_eq boolean_xor integer_shove in2 integer_shove integer_gt in1 in2 exec_pop () integer_dup_times in4 exec_shove (integer_min integer_shove in4 in4 in2 exec_pop () integer_dup_times in4 integer_shove) integer_min boolean_yank in4 in4 in3 exec_do*while (integer_shove exec_do*while (integer_shove boolean_swap) in3 boolean_dup_items integer_mod integer_shove exec_stackdepth integer_shove integer_shove in3 integer_min in4 integer_min integer_gt) boolean_swap print_integer boolean_xor integer_lt integer_stackdepth exec_do*times (boolean_not) exec_noop integer_swap exec_pop (boolean_xor exec_do*times () exec_yankdup))
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 62
Size: 72
Percent parens: 0.139
--- Population Statistics ---
Average total errors in population: 3.943
Median total errors in population: 3
Error averages by case: (0.137 0.772 0.79 0.123 0.247 0.346 0.218 0.374 0.345 0.591)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.844
Average program size in population (points): 64.806
Average percent parens in population: 0.138
Minimum age in population: 70.77007883382589
Maximum age in population: 74.01293147466549
Average age in population: 72.86298568056942
Median age in population: 72.95221831445559
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 106
Genome diversity (% unique genomes):	 0.605
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 110
Syntactic diversity (% unique Push programs):	 0.575
Total error diversity:				 0.01
Error (vector) diversity:			 0.071
Behavioral diversity:				 0.188
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 48671958
--- Timings ---
Current time: 1559584990700 milliseconds
Total Time:         186.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        92.4 seconds, 49.5%
Fitness Testing:     59.0 seconds, 31.6%
Report:              35.3 seconds, 18.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Smallest problem report - generation 47
Test total error for best: 392
Test mean error for best: 0.39200
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 1
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 1
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 1
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 1
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 1
Test Case   57 | Error: 0
Test Case   58 | Error: 1
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 1
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 1
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 1
Test Case  370 | Error: 1
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 1
Test Case  396 | Error: 1
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 1
Test Case  405 | Error: 1
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 1
Test Case  478 | Error: 1
Test Case  479 | Error: 1
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 1
Test Case  500 | Error: 1
Test Case  501 | Error: 1
Test Case  502 | Error: 1
Test Case  503 | Error: 1
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 1
Test Case  526 | Error: 1
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 1
Test Case  552 | Error: 1
Test Case  553 | Error: 1
Test Case  554 | Error: 1
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 1
Test Case  597 | Error: 1
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 1
Test Case  613 | Error: 1
Test Case  614 | Error: 1
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 1
Test Case  622 | Error: 1
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 1
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 1
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 1
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 1
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 1
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 1
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 1
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 1
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 1
Test Case  913 | Error: 1
Test Case  914 | Error: 1
Test Case  915 | Error: 1
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 1
Test Case  923 | Error: 1
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 1
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 1
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -82                 | Program output: -82                
Correct output: 63                  | Program output: 63                 
Correct output: -43                 | Program output: -43                
Correct output: -71                 | Program output: -71                
Correct output: -7                  | Program output: 8                  
Correct output: -71                 | Program output: 14                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 23                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: 51                  | Program output: 51                 
Correct output: 48                  | Program output:                    
Correct output: 2                   | Program output: 4                  
Correct output: 2                   | Program output:                    
Correct output: 12                  | Program output:                    
Correct output: 12                  | Program output: 12                 
Correct output: 40                  | Program output: 56                 
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 32                 
Correct output: 40                  | Program output: 40                 
Correct output: 13                  | Program output: 13                 
Correct output: 5                   | Program output: 5                  
Correct output: 9                   | Program output: 9                  
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 45                 
Correct output: -87                 | Program output: -41                
Correct output: -90                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -29                 | Program output: -29                
Correct output: -18                 | Program output: 43                 
Correct output: -55                 | Program output: -55                
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: -4                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output: 57                 
Correct output: -81                 | Program output: -81                
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: -70                
Correct output: 3                   | Program output: 20                 
Correct output: -88                 | Program output: -54                
Correct output: -86                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -62                 | Program output: -62                
Correct output: -77                 | Program output: 27                 
Correct output: -71                 | Program output: -71                
Correct output: -66                 | Program output: -39                
Correct output: -22                 | Program output: -22                
Correct output: -51                 | Program output: -51                
Correct output: 4                   | Program output: 4                  
Correct output: -49                 | Program output: -49                
Correct output: -53                 | Program output:                    
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -86                
Correct output: -61                 | Program output: -61                
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: 15                 
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: -41                
Correct output: -42                 | Program output: -35                
Correct output: -42                 | Program output: -42                
Correct output: -99                 | Program output: -92                
Correct output: -76                 | Program output: -76                
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: -23                
Correct output: 36                  | Program output: 36                 
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -87                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: -44                
Correct output: -81                 | Program output: -81                
Correct output: 17                  | Program output: 17                 
Correct output: -62                 | Program output: -62                
Correct output: -65                 | Program output: -16                
Correct output: -25                 | Program output: -25                
Correct output: -70                 | Program output: -70                
Correct output: -70                 | Program output: 7                  
Correct output: -97                 | Program output:                    
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: -72                
Correct output: -43                 | Program output: -43                
Correct output: -63                 | Program output: -63                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup})
Lexicase best program: (in3 in2 exec_pop () in3 integer_dup_times integer_gt exec_eq boolean_xor integer_shove in2 integer_shove integer_gt in1 in2 exec_pop () integer_dup_times in4 exec_shove (integer_min integer_shove in4 in4 in2 exec_pop () integer_dup_times in4 integer_shove) integer_min boolean_yank in4 in4 integer_shove integer_min boolean_yank in4 in4 in3 exec_do*while (integer_shove exec_do*while (integer_shove boolean_swap) in3 boolean_dup_items integer_mod integer_shove exec_stackdepth integer_shove integer_shove in3 integer_min in4 integer_min integer_gt) boolean_swap print_integer boolean_xor integer_lt integer_stackdepth exec_do*times (boolean_not) exec_noop integer_swap exec_pop (boolean_xor exec_do*times () exec_yankdup))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 77
Percent parens: 0.130
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_yankdup})
Zero cases best program: (in3 in2 exec_pop () in3 integer_dup_times integer_gt exec_eq boolean_xor integer_shove in2 integer_shove integer_gt in1 in2 exec_pop () integer_dup_times in4 exec_shove (integer_min integer_shove in4 in4 in2 exec_pop () integer_dup_times in4 integer_shove) integer_min boolean_yank in4 in4 integer_shove integer_min boolean_yank in4 in4 in3 exec_do*while (integer_shove exec_do*while (integer_shove boolean_swap) in3 boolean_dup_items integer_mod integer_shove exec_stackdepth integer_shove integer_shove in3 integer_min in4 integer_min integer_gt) boolean_swap print_integer boolean_xor integer_lt integer_stackdepth exec_do*times (boolean_not) exec_noop integer_swap exec_pop (boolean_xor exec_do*times () exec_yankdup))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 77
Percent parens: 0.130
--- Lexicase Population Statistics ---
Count of elite individuals by case: (579 797 795 425 579 877 202 678 804 708)
Population mean number of elite cases: 6.44
Count of perfect (error zero) individuals by case: (579 797 795 425 579 877 202 678 804 708)
Population mean number of perfect (error zero) cases: 6.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_yankdup})
Best program: (in3 in2 exec_pop () in3 integer_dup_times integer_gt exec_eq boolean_xor integer_shove in2 integer_shove integer_gt in1 in2 exec_pop () integer_dup_times in4 integer_shove integer_min integer_shove integer_max in4 in2 exec_pop () integer_dup_times in4 integer_shove integer_min boolean_yank in4 in4 in3 exec_do*while (integer_shove integer_shove in3 integer_min in4 integer_min integer_gt) boolean_swap print_integer boolean_xor integer_lt integer_stackdepth exec_do*times (boolean_not) exec_noop integer_swap exec_pop (boolean_xor boolean_eq) exec_yankdup)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 53
Size: 60
Percent parens: 0.117
--- Population Statistics ---
Average total errors in population: 3.556
Median total errors in population: 3
Error averages by case: (0.421 0.203 0.205 0.575 0.421 0.123 0.798 0.322 0.196 0.292)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.166
Average program size in population (points): 66.979
Average percent parens in population: 0.131
Minimum age in population: 72.89150515424569
Maximum age in population: 75.84450253838531
Average age in population: 73.94908446343133
Median age in population: 74.01293147466549
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 202
Genome diversity (% unique genomes):	 0.61
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 214
Syntactic diversity (% unique Push programs):	 0.583
Total error diversity:				 0.011
Error (vector) diversity:			 0.089
Behavioral diversity:				 0.23
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 49868085
--- Timings ---
Current time: 1559584994880 milliseconds
Total Time:         191.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        94.3 seconds, 49.4%
Fitness Testing:     60.3 seconds, 31.6%
Report:              36.3 seconds, 19.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 47
Successful program: (in3 in2 exec_pop () in3 integer_dup_times integer_gt exec_eq boolean_xor integer_shove in2 integer_shove integer_gt in1 in2 exec_pop () integer_dup_times in4 integer_shove integer_min integer_shove integer_max in4 in2 exec_pop () integer_dup_times in4 integer_shove integer_min boolean_yank in4 in4 in3 exec_do*while (integer_shove integer_shove in3 integer_min in4 integer_min integer_gt) boolean_swap print_integer boolean_xor integer_lt integer_stackdepth exec_do*times (boolean_not) exec_noop integer_swap exec_pop (boolean_xor boolean_eq) exec_yankdup)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 60


Auto-simplifying with starting size: 60
step: 0
program: (in3 in2 exec_pop () in3 integer_dup_times integer_gt exec_eq boolean_xor integer_shove in2 integer_shove integer_gt in1 in2 exec_pop () integer_dup_times in4 integer_shove integer_min integer_shove integer_max in4 in2 exec_pop () integer_dup_times in4 integer_shove integer_min boolean_yank in4 in4 in3 exec_do*while (integer_shove integer_shove in3 integer_min in4 integer_min integer_gt) boolean_swap print_integer boolean_xor integer_lt integer_stackdepth exec_do*times (boolean_not) exec_noop integer_swap exec_pop (boolean_xor boolean_eq) exec_yankdup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 60

step: 500
program: (in3 in2 exec_pop () in3 integer_dup_times integer_gt exec_eq boolean_xor integer_shove in2 integer_shove integer_gt in1 in2 exec_pop () integer_dup_times in4 integer_shove integer_min integer_shove integer_max in4 in2 exec_pop () integer_dup_times in4 integer_shove integer_min boolean_yank in4 in4 in3 exec_do*while (integer_shove integer_shove in3 integer_min in4 integer_min integer_gt) boolean_swap print_integer boolean_xor integer_lt integer_stackdepth exec_do*times (boolean_not) exec_noop integer_swap exec_pop (boolean_xor boolean_eq) exec_yankdup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 60

step: 1000
program: (in3 in2 exec_pop () in3 integer_dup_times integer_gt exec_eq boolean_xor integer_shove in2 integer_shove integer_gt in1 in2 exec_pop () integer_dup_times in4 integer_shove integer_min integer_shove integer_max in4 in2 exec_pop () integer_dup_times in4 integer_shove integer_min boolean_yank in4 in4 in3 exec_do*while (integer_shove integer_shove in3 integer_min in4 integer_min integer_gt) boolean_swap print_integer boolean_xor integer_lt integer_stackdepth exec_do*times (boolean_not) exec_noop integer_swap exec_pop (boolean_xor boolean_eq) exec_yankdup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 60

step: 1500
program: (in3 in2 exec_pop () in3 integer_dup_times integer_gt exec_eq boolean_xor integer_shove in2 integer_shove integer_gt in1 in2 exec_pop () integer_dup_times in4 integer_shove integer_min integer_shove integer_max in4 in2 exec_pop () integer_dup_times in4 integer_shove integer_min boolean_yank in4 in4 in3 exec_do*while (integer_shove integer_shove in3 integer_min in4 integer_min integer_gt) boolean_swap print_integer boolean_xor integer_lt integer_stackdepth exec_do*times (boolean_not) exec_noop integer_swap exec_pop (boolean_xor boolean_eq) exec_yankdup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 60

step: 2000
program: (in3 in2 exec_pop () in3 integer_dup_times integer_gt exec_eq boolean_xor integer_shove in2 integer_shove integer_gt in1 in2 exec_pop () integer_dup_times in4 integer_shove integer_min integer_shove integer_max in4 in2 exec_pop () integer_dup_times in4 integer_shove integer_min boolean_yank in4 in4 in3 exec_do*while (integer_shove integer_shove in3 integer_min in4 integer_min integer_gt) boolean_swap print_integer boolean_xor integer_lt integer_stackdepth exec_do*times (boolean_not) exec_noop integer_swap exec_pop (boolean_xor boolean_eq) exec_yankdup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 60

step: 2500
program: (in3 in2 exec_pop () in3 integer_dup_times integer_gt exec_eq boolean_xor integer_shove in2 integer_shove integer_gt in1 in2 exec_pop () integer_dup_times in4 integer_shove integer_min integer_shove integer_max in4 in2 exec_pop () integer_dup_times in4 integer_shove integer_min boolean_yank in4 in4 in3 exec_do*while (integer_shove integer_shove in3 integer_min in4 integer_min integer_gt) boolean_swap print_integer boolean_xor integer_lt integer_stackdepth exec_do*times (boolean_not) exec_noop integer_swap exec_pop (boolean_xor boolean_eq) exec_yankdup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 60

step: 3000
program: (in3 in2 exec_pop () in3 integer_dup_times integer_gt exec_eq boolean_xor integer_shove in2 integer_shove integer_gt in1 in2 exec_pop () integer_dup_times in4 integer_shove integer_min integer_shove integer_max in4 in2 exec_pop () integer_dup_times in4 integer_shove integer_min boolean_yank in4 in4 in3 exec_do*while (integer_shove integer_shove in3 integer_min in4 integer_min integer_gt) boolean_swap print_integer boolean_xor integer_lt integer_stackdepth exec_do*times (boolean_not) exec_noop integer_swap exec_pop (boolean_xor boolean_eq) exec_yankdup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 60

step: 3500
program: (in3 in2 exec_pop () in3 integer_dup_times integer_gt exec_eq boolean_xor integer_shove in2 integer_shove integer_gt in1 in2 exec_pop () integer_dup_times in4 integer_shove integer_min integer_shove integer_max in4 in2 exec_pop () integer_dup_times in4 integer_shove integer_min boolean_yank in4 in4 in3 exec_do*while (integer_shove integer_shove in3 integer_min in4 integer_min integer_gt) boolean_swap print_integer boolean_xor integer_lt integer_stackdepth exec_do*times (boolean_not) exec_noop integer_swap exec_pop (boolean_xor boolean_eq) exec_yankdup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 60

step: 4000
program: (in3 in2 exec_pop () in3 integer_dup_times integer_gt exec_eq boolean_xor integer_shove in2 integer_shove integer_gt in1 in2 exec_pop () integer_dup_times in4 integer_shove integer_min integer_shove integer_max in4 in2 exec_pop () integer_dup_times in4 integer_shove integer_min boolean_yank in4 in4 in3 exec_do*while (integer_shove integer_shove in3 integer_min in4 integer_min integer_gt) boolean_swap print_integer boolean_xor integer_lt integer_stackdepth exec_do*times (boolean_not) exec_noop integer_swap exec_pop (boolean_xor boolean_eq) exec_yankdup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 60

step: 4500
program: (in3 in2 exec_pop () in3 integer_dup_times integer_gt exec_eq boolean_xor integer_shove in2 integer_shove integer_gt in1 in2 exec_pop () integer_dup_times in4 integer_shove integer_min integer_shove integer_max in4 in2 exec_pop () integer_dup_times in4 integer_shove integer_min boolean_yank in4 in4 in3 exec_do*while (integer_shove integer_shove in3 integer_min in4 integer_min integer_gt) boolean_swap print_integer boolean_xor integer_lt integer_stackdepth exec_do*times (boolean_not) exec_noop integer_swap exec_pop (boolean_xor boolean_eq) exec_yankdup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 60

step: 5000
program: (in3 in2 exec_pop () in3 integer_dup_times integer_gt exec_eq boolean_xor integer_shove in2 integer_shove integer_gt in1 in2 exec_pop () integer_dup_times in4 integer_shove integer_min integer_shove integer_max in4 in2 exec_pop () integer_dup_times in4 integer_shove integer_min boolean_yank in4 in4 in3 exec_do*while (integer_shove integer_shove in3 integer_min in4 integer_min integer_gt) boolean_swap print_integer boolean_xor integer_lt integer_stackdepth exec_do*times (boolean_not) exec_noop integer_swap exec_pop (boolean_xor boolean_eq) exec_yankdup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 60

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 47
Test total error for best: 392
Test mean error for best: 0.39200
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 1
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 1
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 1
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 1
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 1
Test Case   57 | Error: 0
Test Case   58 | Error: 1
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 1
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 1
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 1
Test Case  370 | Error: 1
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 1
Test Case  396 | Error: 1
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 1
Test Case  405 | Error: 1
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 1
Test Case  478 | Error: 1
Test Case  479 | Error: 1
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 1
Test Case  500 | Error: 1
Test Case  501 | Error: 1
Test Case  502 | Error: 1
Test Case  503 | Error: 1
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 1
Test Case  526 | Error: 1
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 1
Test Case  552 | Error: 1
Test Case  553 | Error: 1
Test Case  554 | Error: 1
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 1
Test Case  597 | Error: 1
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 1
Test Case  613 | Error: 1
Test Case  614 | Error: 1
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 1
Test Case  622 | Error: 1
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 1
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 1
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 1
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 1
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 1
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 1
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 1
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 1
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 1
Test Case  913 | Error: 1
Test Case  914 | Error: 1
Test Case  915 | Error: 1
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 1
Test Case  923 | Error: 1
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 1
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 1
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -82                 | Program output: -82                
Correct output: 63                  | Program output: 63                 
Correct output: -43                 | Program output: -43                
Correct output: -71                 | Program output: -71                
Correct output: -7                  | Program output: 8                  
Correct output: -71                 | Program output: 14                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: -22                 | Program output: -22                
Correct output: 22                  | Program output: 23                 
Correct output: -94                 | Program output: -94                
Correct output: -8                  | Program output: -8                 
Correct output: 89                  | Program output: 89                 
Correct output: 0                   | Program output: 0                  
Correct output: 99                  | Program output: 99                 
Correct output: 13                  | Program output: 13                 
Correct output: 51                  | Program output: 51                 
Correct output: 48                  | Program output:                    
Correct output: 2                   | Program output: 4                  
Correct output: 2                   | Program output:                    
Correct output: 12                  | Program output:                    
Correct output: 12                  | Program output: 12                 
Correct output: 40                  | Program output: 56                 
Correct output: 10                  | Program output: 10                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 7                  
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 32                 
Correct output: 40                  | Program output: 40                 
Correct output: 13                  | Program output: 13                 
Correct output: 5                   | Program output: 5                  
Correct output: 9                   | Program output: 9                  
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 45                 
Correct output: -87                 | Program output: -41                
Correct output: -90                 | Program output: -10                
Correct output: -62                 | Program output: -62                
Correct output: -29                 | Program output: -29                
Correct output: -18                 | Program output: 43                 
Correct output: -55                 | Program output: -55                
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: -4                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output: 57                 
Correct output: -81                 | Program output: -81                
Correct output: -84                 | Program output: -84                
Correct output: -70                 | Program output: -70                
Correct output: 3                   | Program output: 20                 
Correct output: -88                 | Program output: -54                
Correct output: -86                 | Program output: -73                
Correct output: -51                 | Program output: -51                
Correct output: -62                 | Program output: -62                
Correct output: -77                 | Program output: 27                 
Correct output: -71                 | Program output: -71                
Correct output: -66                 | Program output: -39                
Correct output: -22                 | Program output: -22                
Correct output: -51                 | Program output: -51                
Correct output: 4                   | Program output: 4                  
Correct output: -49                 | Program output: -49                
Correct output: -53                 | Program output:                    
Correct output: -71                 | Program output: -71                
Correct output: -86                 | Program output: -86                
Correct output: -61                 | Program output: -61                
Correct output: -92                 | Program output: -92                
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: 15                 
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: -41                
Correct output: -42                 | Program output: -35                
Correct output: -42                 | Program output: -42                
Correct output: -99                 | Program output: -92                
Correct output: -76                 | Program output: -76                
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: -23                
Correct output: 36                  | Program output: 36                 
Correct output: -78                 | Program output: -78                
Correct output: -87                 | Program output: -87                
Correct output: -87                 | Program output: -87                
Correct output: -44                 | Program output: -44                
Correct output: -81                 | Program output: -81                
Correct output: 17                  | Program output: 17                 
Correct output: -62                 | Program output: -62                
Correct output: -65                 | Program output: -16                
Correct output: -25                 | Program output: -25                
Correct output: -70                 | Program output: -70                
Correct output: -70                 | Program output: 7                  
Correct output: -97                 | Program output:                    
Correct output: -92                 | Program output: -92                
Correct output: -77                 | Program output: -77                
Correct output: -72                 | Program output: -72                
Correct output: -43                 | Program output: -43                
Correct output: -63                 | Program output: -63                
Correct output: -76                 | Program output: -76                
;;******************************
