Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[91 -94 -94 -94] -94] [[-13 -47 -13 -13] -47] [[65 -80 65 65] -80] [[79 0 79 79] 0] [[28 28 28 74] 28] [[8 -14 -14 -14] -14] [[-84 -84 -84 -12] -84] [[-68 -68 6 -68] -68] [[81 70 70 70] 70] [[-43 49 -43 -43] -43] [(55 55 55 55) 55] [(-87 -87 -87 -87) -87] [(88 88 88 88) 88] [(-73 -73 -73 -73) -73] [(28 28 28 28) 28] [(79 22 18 66) 18] [(7 12 50 21) 7] [(85 61 14 14) 14] [(45 69 42 33) 33] [(87 60 67 60) 60] [(43 91 75 73) 43] [(9 43 91 60) 9] [(39 82 83 56) 39] [(14 45 42 88) 14] [(53 53 0 22) 0] [(25 79 87 2) 2] [(57 49 51 8) 8] [(35 48 41 35) 35] [(11 31 69 76) 11] [(64 50 91 55) 50] [(25 15 90 3) 3] [(3 95 55 46) 3] [(50 72 41 84) 41] [(66 31 50 72) 31] [(95 73 74 34) 34] [(83 -36 89 -92) -92] [(-28 -30 -37 96) -37] [(-62 12 43 29) -62] [(19 5 -100 16) -100] [(1 62 -61 13) -61] [(-20 -10 9 14) -20] [(-51 19 -43 -36) -51] [(-8 -61 71 -60) -61] [(73 -25 10 -44) -44] [(78 -75 22 -42) -75] [(-52 -65 76 -85) -85] [(-97 22 -29 -18) -97] [(65 16 -65 -91) -91] [(41 47 50 -4) -4] [(12 14 -89 13) -89] [(-80 81 40 -63) -80] [(-65 -45 25 0) -65] [(-73 -88 -85 91) -88] [(-95 -27 -80 -9) -95] [(67 81 5 -49) -49] [(-47 34 57 -81) -81] [(-34 86 60 -33) -34] [(-37 -38 8 -6) -38] [(20 4 -55 8) -55] [(92 79 -62 43) -62] [(53 -62 -98 21) -98] [(79 41 51 -71) -71] [(-97 19 -16 -67) -97] [(-97 85 -67 2) -97] [(-68 49 77 67) -68] [(83 83 16 -75) -75] [(55 -55 25 -9) -55] [(-23 100 0 -57) -57] [(-78 -4 96 41) -78] [(40 74 -11 -43) -43] [(-8 -29 9 34) -29] [(-58 64 96 80) -58] [(-13 -19 -66 56) -66] [(19 58 -68 97) -68] [(15 77 65 -39) -39] [(-26 93 -23 -55) -55] [(87 -90 -45 -19) -90] [(17 -99 32 58) -99] [(-81 22 3 -30) -81] [(21 -96 84 47) -96] [(-12 82 -60 -28) -60] [(34 2 60 17) 2] [(65 -60 6 -26) -60] [(-61 -58 86 79) -61] [(-7 -51 28 -97) -97] [(-26 22 -88 66) -88] [(97 -75 93 50) -75] [(25 11 -21 -73) -73] [(-75 24 2 52) -75] [(-3 61 -67 50) -67] [(-42 -40 80 79) -42] [(64 72 41 -32) -32] [(39 -89 99 9) -89] [(-50 73 68 64) -50] [(-51 68 -62 34) -62])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[91 -94 -94 -94] -94]
Train Case:   6 | Input/Output: [[-13 -47 -13 -13] -47]
Train Case:   7 | Input/Output: [[65 -80 65 65] -80]
Train Case:   8 | Input/Output: [[79 0 79 79] 0]
Train Case:   9 | Input/Output: [[28 28 28 74] 28]
Train Case:  10 | Input/Output: [[8 -14 -14 -14] -14]
Train Case:  11 | Input/Output: [[-84 -84 -84 -12] -84]
Train Case:  12 | Input/Output: [[-68 -68 6 -68] -68]
Train Case:  13 | Input/Output: [[81 70 70 70] 70]
Train Case:  14 | Input/Output: [[-43 49 -43 -43] -43]
Train Case:  15 | Input/Output: [(55 55 55 55) 55]
Train Case:  16 | Input/Output: [(-87 -87 -87 -87) -87]
Train Case:  17 | Input/Output: [(88 88 88 88) 88]
Train Case:  18 | Input/Output: [(-73 -73 -73 -73) -73]
Train Case:  19 | Input/Output: [(28 28 28 28) 28]
Train Case:  20 | Input/Output: [(79 22 18 66) 18]
Train Case:  21 | Input/Output: [(7 12 50 21) 7]
Train Case:  22 | Input/Output: [(85 61 14 14) 14]
Train Case:  23 | Input/Output: [(45 69 42 33) 33]
Train Case:  24 | Input/Output: [(87 60 67 60) 60]
Train Case:  25 | Input/Output: [(43 91 75 73) 43]
Train Case:  26 | Input/Output: [(9 43 91 60) 9]
Train Case:  27 | Input/Output: [(39 82 83 56) 39]
Train Case:  28 | Input/Output: [(14 45 42 88) 14]
Train Case:  29 | Input/Output: [(53 53 0 22) 0]
Train Case:  30 | Input/Output: [(25 79 87 2) 2]
Train Case:  31 | Input/Output: [(57 49 51 8) 8]
Train Case:  32 | Input/Output: [(35 48 41 35) 35]
Train Case:  33 | Input/Output: [(11 31 69 76) 11]
Train Case:  34 | Input/Output: [(64 50 91 55) 50]
Train Case:  35 | Input/Output: [(25 15 90 3) 3]
Train Case:  36 | Input/Output: [(3 95 55 46) 3]
Train Case:  37 | Input/Output: [(50 72 41 84) 41]
Train Case:  38 | Input/Output: [(66 31 50 72) 31]
Train Case:  39 | Input/Output: [(95 73 74 34) 34]
Train Case:  40 | Input/Output: [(83 -36 89 -92) -92]
Train Case:  41 | Input/Output: [(-28 -30 -37 96) -37]
Train Case:  42 | Input/Output: [(-62 12 43 29) -62]
Train Case:  43 | Input/Output: [(19 5 -100 16) -100]
Train Case:  44 | Input/Output: [(1 62 -61 13) -61]
Train Case:  45 | Input/Output: [(-20 -10 9 14) -20]
Train Case:  46 | Input/Output: [(-51 19 -43 -36) -51]
Train Case:  47 | Input/Output: [(-8 -61 71 -60) -61]
Train Case:  48 | Input/Output: [(73 -25 10 -44) -44]
Train Case:  49 | Input/Output: [(78 -75 22 -42) -75]
Train Case:  50 | Input/Output: [(-52 -65 76 -85) -85]
Train Case:  51 | Input/Output: [(-97 22 -29 -18) -97]
Train Case:  52 | Input/Output: [(65 16 -65 -91) -91]
Train Case:  53 | Input/Output: [(41 47 50 -4) -4]
Train Case:  54 | Input/Output: [(12 14 -89 13) -89]
Train Case:  55 | Input/Output: [(-80 81 40 -63) -80]
Train Case:  56 | Input/Output: [(-65 -45 25 0) -65]
Train Case:  57 | Input/Output: [(-73 -88 -85 91) -88]
Train Case:  58 | Input/Output: [(-95 -27 -80 -9) -95]
Train Case:  59 | Input/Output: [(67 81 5 -49) -49]
Train Case:  60 | Input/Output: [(-47 34 57 -81) -81]
Train Case:  61 | Input/Output: [(-34 86 60 -33) -34]
Train Case:  62 | Input/Output: [(-37 -38 8 -6) -38]
Train Case:  63 | Input/Output: [(20 4 -55 8) -55]
Train Case:  64 | Input/Output: [(92 79 -62 43) -62]
Train Case:  65 | Input/Output: [(53 -62 -98 21) -98]
Train Case:  66 | Input/Output: [(79 41 51 -71) -71]
Train Case:  67 | Input/Output: [(-97 19 -16 -67) -97]
Train Case:  68 | Input/Output: [(-97 85 -67 2) -97]
Train Case:  69 | Input/Output: [(-68 49 77 67) -68]
Train Case:  70 | Input/Output: [(83 83 16 -75) -75]
Train Case:  71 | Input/Output: [(55 -55 25 -9) -55]
Train Case:  72 | Input/Output: [(-23 100 0 -57) -57]
Train Case:  73 | Input/Output: [(-78 -4 96 41) -78]
Train Case:  74 | Input/Output: [(40 74 -11 -43) -43]
Train Case:  75 | Input/Output: [(-8 -29 9 34) -29]
Train Case:  76 | Input/Output: [(-58 64 96 80) -58]
Train Case:  77 | Input/Output: [(-13 -19 -66 56) -66]
Train Case:  78 | Input/Output: [(19 58 -68 97) -68]
Train Case:  79 | Input/Output: [(15 77 65 -39) -39]
Train Case:  80 | Input/Output: [(-26 93 -23 -55) -55]
Train Case:  81 | Input/Output: [(87 -90 -45 -19) -90]
Train Case:  82 | Input/Output: [(17 -99 32 58) -99]
Train Case:  83 | Input/Output: [(-81 22 3 -30) -81]
Train Case:  84 | Input/Output: [(21 -96 84 47) -96]
Train Case:  85 | Input/Output: [(-12 82 -60 -28) -60]
Train Case:  86 | Input/Output: [(34 2 60 17) 2]
Train Case:  87 | Input/Output: [(65 -60 6 -26) -60]
Train Case:  88 | Input/Output: [(-61 -58 86 79) -61]
Train Case:  89 | Input/Output: [(-7 -51 28 -97) -97]
Train Case:  90 | Input/Output: [(-26 22 -88 66) -88]
Train Case:  91 | Input/Output: [(97 -75 93 50) -75]
Train Case:  92 | Input/Output: [(25 11 -21 -73) -73]
Train Case:  93 | Input/Output: [(-75 24 2 52) -75]
Train Case:  94 | Input/Output: [(-3 61 -67 50) -67]
Train Case:  95 | Input/Output: [(-42 -40 80 79) -42]
Train Case:  96 | Input/Output: [(64 72 41 -32) -32]
Train Case:  97 | Input/Output: [(39 -89 99 9) -89]
Train Case:  98 | Input/Output: [(-50 73 68 64) -50]
Train Case:  99 | Input/Output: [(-51 68 -62 34) -62]
Test Case:   0 | Input/Output: [[-63 -63 -63 73] -63]
Test Case:   1 | Input/Output: [[-42 -42 -42 7] -42]
Test Case:   2 | Input/Output: [[54 54 -56 54] -56]
Test Case:   3 | Input/Output: [[94 -63 94 94] -63]
Test Case:   4 | Input/Output: [[-97 -87 -97 -97] -97]
Test Case:   5 | Input/Output: [[-16 -16 -16 -100] -100]
Test Case:   6 | Input/Output: [[82 82 -28 82] -28]
Test Case:   7 | Input/Output: [[-72 27 27 27] -72]
Test Case:   8 | Input/Output: [[93 75 93 93] 75]
Test Case:   9 | Input/Output: [[46 46 50 46] 46]
Test Case:  10 | Input/Output: [[-32 -32 -32 41] -32]
Test Case:  11 | Input/Output: [[40 21 40 40] 21]
Test Case:  12 | Input/Output: [[91 -56 91 91] -56]
Test Case:  13 | Input/Output: [[-57 -57 86 -57] -57]
Test Case:  14 | Input/Output: [[20 82 20 20] 20]
Test Case:  15 | Input/Output: [[41 -8 41 41] -8]
Test Case:  16 | Input/Output: [[-82 -82 -82 -30] -82]
Test Case:  17 | Input/Output: [[93 93 93 8] 8]
Test Case:  18 | Input/Output: [[-42 -42 -42 -63] -63]
Test Case:  19 | Input/Output: [[80 80 18 80] 18]
Test Case:  20 | Input/Output: [[-16 -16 -16 -52] -52]
Test Case:  21 | Input/Output: [[-92 55 55 55] -92]
Test Case:  22 | Input/Output: [[73 73 73 -83] -83]
Test Case:  23 | Input/Output: [[23 33 33 33] 23]
Test Case:  24 | Input/Output: [[96 14 96 96] 14]
Test Case:  25 | Input/Output: [[-59 -59 -59 -15] -59]
Test Case:  26 | Input/Output: [[9 -96 9 9] -96]
Test Case:  27 | Input/Output: [[-58 30 -58 -58] -58]
Test Case:  28 | Input/Output: [[-63 -63 -63 97] -63]
Test Case:  29 | Input/Output: [[90 90 90 57] 57]
Test Case:  30 | Input/Output: [[2 2 2 30] 2]
Test Case:  31 | Input/Output: [[-40 -40 46 -40] -40]
Test Case:  32 | Input/Output: [[-80 -80 87 -80] -80]
Test Case:  33 | Input/Output: [[99 99 99 -23] -23]
Test Case:  34 | Input/Output: [[94 31 94 94] 31]
Test Case:  35 | Input/Output: [[94 94 -16 94] -16]
Test Case:  36 | Input/Output: [[-87 -87 -19 -87] -87]
Test Case:  37 | Input/Output: [[-88 -97 -88 -88] -97]
Test Case:  38 | Input/Output: [[48 48 -30 48] -30]
Test Case:  39 | Input/Output: [[39 -42 39 39] -42]
Test Case:  40 | Input/Output: [[25 25 86 25] 25]
Test Case:  41 | Input/Output: [[42 -69 42 42] -69]
Test Case:  42 | Input/Output: [[-54 -98 -54 -54] -98]
Test Case:  43 | Input/Output: [[27 73 73 73] 27]
Test Case:  44 | Input/Output: [[10 45 45 45] 10]
Test Case:  45 | Input/Output: [[48 48 -11 48] -11]
Test Case:  46 | Input/Output: [[83 -44 83 83] -44]
Test Case:  47 | Input/Output: [[-76 -76 55 -76] -76]
Test Case:  48 | Input/Output: [[-49 -49 -49 -54] -54]
Test Case:  49 | Input/Output: [[4 4 -16 4] -16]
Test Case:  50 | Input/Output: [[-47 -47 -47 12] -47]
Test Case:  51 | Input/Output: [[-73 33 -73 -73] -73]
Test Case:  52 | Input/Output: [[-85 -85 14 -85] -85]
Test Case:  53 | Input/Output: [[-39 -13 -13 -13] -39]
Test Case:  54 | Input/Output: [[-47 -47 6 -47] -47]
Test Case:  55 | Input/Output: [[-69 -69 -69 11] -69]
Test Case:  56 | Input/Output: [[-57 -16 -57 -57] -57]
Test Case:  57 | Input/Output: [[24 98 98 98] 24]
Test Case:  58 | Input/Output: [[-79 -33 -79 -79] -79]
Test Case:  59 | Input/Output: [[-32 73 73 73] -32]
Test Case:  60 | Input/Output: [[-27 -60 -27 -27] -60]
Test Case:  61 | Input/Output: [[-20 -16 -20 -20] -20]
Test Case:  62 | Input/Output: [[-16 39 39 39] -16]
Test Case:  63 | Input/Output: [[21 21 -89 21] -89]
Test Case:  64 | Input/Output: [[-12 -12 71 -12] -12]
Test Case:  65 | Input/Output: [[-72 -72 -72 8] -72]
Test Case:  66 | Input/Output: [[18 18 18 -26] -26]
Test Case:  67 | Input/Output: [[68 19 68 68] 19]
Test Case:  68 | Input/Output: [[-95 -95 -18 -95] -95]
Test Case:  69 | Input/Output: [[77 -26 -26 -26] -26]
Test Case:  70 | Input/Output: [[15 15 29 15] 15]
Test Case:  71 | Input/Output: [[33 33 74 33] 33]
Test Case:  72 | Input/Output: [[-93 -93 -35 -93] -93]
Test Case:  73 | Input/Output: [[23 100 23 23] 23]
Test Case:  74 | Input/Output: [[-8 97 97 97] -8]
Test Case:  75 | Input/Output: [[15 81 15 15] 15]
Test Case:  76 | Input/Output: [[40 77 40 40] 40]
Test Case:  77 | Input/Output: [[47 47 47 -46] -46]
Test Case:  78 | Input/Output: [[-1 -1 -83 -1] -83]
Test Case:  79 | Input/Output: [[-9 -9 -9 5] -9]
Test Case:  80 | Input/Output: [[-23 68 -23 -23] -23]
Test Case:  81 | Input/Output: [[-82 -20 -82 -82] -82]
Test Case:  82 | Input/Output: [[-10 -10 -10 -78] -78]
Test Case:  83 | Input/Output: [[-32 -32 93 -32] -32]
Test Case:  84 | Input/Output: [[-4 -4 0 -4] -4]
Test Case:  85 | Input/Output: [[72 72 72 -50] -50]
Test Case:  86 | Input/Output: [[98 86 86 86] 86]
Test Case:  87 | Input/Output: [[-77 25 -77 -77] -77]
Test Case:  88 | Input/Output: [[92 92 92 -69] -69]
Test Case:  89 | Input/Output: [[44 82 44 44] 44]
Test Case:  90 | Input/Output: [[67 67 97 67] 67]
Test Case:  91 | Input/Output: [[-44 -44 -44 72] -44]
Test Case:  92 | Input/Output: [[1 1 1 72] 1]
Test Case:  93 | Input/Output: [[-42 100 100 100] -42]
Test Case:  94 | Input/Output: [[-69 89 89 89] -69]
Test Case:  95 | Input/Output: [[-67 -67 -67 74] -67]
Test Case:  96 | Input/Output: [[24 24 -17 24] -17]
Test Case:  97 | Input/Output: [[46 96 46 46] 46]
Test Case:  98 | Input/Output: [[-73 -44 -73 -73] -73]
Test Case:  99 | Input/Output: [[42 42 27 42] 27]
Test Case: 100 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 101 | Input/Output: [(37 37 37 37) 37]
Test Case: 102 | Input/Output: [(83 83 83 83) 83]
Test Case: 103 | Input/Output: [(2 2 2 2) 2]
Test Case: 104 | Input/Output: [(16 16 16 16) 16]
Test Case: 105 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 106 | Input/Output: [(60 60 60 60) 60]
Test Case: 107 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 108 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 109 | Input/Output: [(29 29 29 29) 29]
Test Case: 110 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 111 | Input/Output: [(81 81 81 81) 81]
Test Case: 112 | Input/Output: [(38 38 38 38) 38]
Test Case: 113 | Input/Output: [(47 47 47 47) 47]
Test Case: 114 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 115 | Input/Output: [(36 36 36 36) 36]
Test Case: 116 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 117 | Input/Output: [(48 48 48 48) 48]
Test Case: 118 | Input/Output: [(93 93 93 93) 93]
Test Case: 119 | Input/Output: [(34 34 34 34) 34]
Test Case: 120 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 121 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 122 | Input/Output: [(24 24 24 24) 24]
Test Case: 123 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 124 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 125 | Input/Output: [(34 34 34 34) 34]
Test Case: 126 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 127 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 128 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 129 | Input/Output: [(2 2 2 2) 2]
Test Case: 130 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 131 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 132 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 133 | Input/Output: [(56 56 56 56) 56]
Test Case: 134 | Input/Output: [(91 91 91 91) 91]
Test Case: 135 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 136 | Input/Output: [(23 23 23 23) 23]
Test Case: 137 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 138 | Input/Output: [(76 76 76 76) 76]
Test Case: 139 | Input/Output: [(9 9 9 9) 9]
Test Case: 140 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 141 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 142 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 143 | Input/Output: [(4 4 4 4) 4]
Test Case: 144 | Input/Output: [(100 100 100 100) 100]
Test Case: 145 | Input/Output: [(28 28 28 28) 28]
Test Case: 146 | Input/Output: [(59 59 59 59) 59]
Test Case: 147 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 148 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 149 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 150 | Input/Output: [(38 38 38 38) 38]
Test Case: 151 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 152 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 153 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 154 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 155 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 156 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 157 | Input/Output: [(72 72 72 72) 72]
Test Case: 158 | Input/Output: [(80 80 80 80) 80]
Test Case: 159 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 160 | Input/Output: [(17 17 17 17) 17]
Test Case: 161 | Input/Output: [(69 69 69 69) 69]
Test Case: 162 | Input/Output: [(22 22 22 22) 22]
Test Case: 163 | Input/Output: [(0 0 0 0) 0]
Test Case: 164 | Input/Output: [(13 13 13 13) 13]
Test Case: 165 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 166 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 167 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 168 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 169 | Input/Output: [(64 64 64 64) 64]
Test Case: 170 | Input/Output: [(27 27 27 27) 27]
Test Case: 171 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 172 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 173 | Input/Output: [(46 46 46 46) 46]
Test Case: 174 | Input/Output: [(42 42 42 42) 42]
Test Case: 175 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 176 | Input/Output: [(71 71 71 71) 71]
Test Case: 177 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 178 | Input/Output: [(51 51 51 51) 51]
Test Case: 179 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 180 | Input/Output: [(95 95 95 95) 95]
Test Case: 181 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 182 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 183 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 184 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 185 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 186 | Input/Output: [(2 2 2 2) 2]
Test Case: 187 | Input/Output: [(62 62 62 62) 62]
Test Case: 188 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 189 | Input/Output: [(56 56 56 56) 56]
Test Case: 190 | Input/Output: [(49 49 49 49) 49]
Test Case: 191 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 192 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 193 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 194 | Input/Output: [(24 24 24 24) 24]
Test Case: 195 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 196 | Input/Output: [(20 20 20 20) 20]
Test Case: 197 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 198 | Input/Output: [(43 43 43 43) 43]
Test Case: 199 | Input/Output: [(16 16 16 16) 16]
Test Case: 200 | Input/Output: [(65 100 63 96) 63]
Test Case: 201 | Input/Output: [(10 42 82 90) 10]
Test Case: 202 | Input/Output: [(7 71 62 98) 7]
Test Case: 203 | Input/Output: [(84 2 63 67) 2]
Test Case: 204 | Input/Output: [(6 91 42 64) 6]
Test Case: 205 | Input/Output: [(17 45 92 96) 17]
Test Case: 206 | Input/Output: [(73 74 70 93) 70]
Test Case: 207 | Input/Output: [(74 40 53 90) 40]
Test Case: 208 | Input/Output: [(68 61 30 46) 30]
Test Case: 209 | Input/Output: [(51 68 53 56) 51]
Test Case: 210 | Input/Output: [(56 29 98 5) 5]
Test Case: 211 | Input/Output: [(91 36 77 58) 36]
Test Case: 212 | Input/Output: [(36 29 6 25) 6]
Test Case: 213 | Input/Output: [(11 94 96 64) 11]
Test Case: 214 | Input/Output: [(54 17 28 1) 1]
Test Case: 215 | Input/Output: [(43 44 35 19) 19]
Test Case: 216 | Input/Output: [(6 49 59 12) 6]
Test Case: 217 | Input/Output: [(26 81 17 24) 17]
Test Case: 218 | Input/Output: [(44 82 43 84) 43]
Test Case: 219 | Input/Output: [(63 96 66 60) 60]
Test Case: 220 | Input/Output: [(33 78 16 83) 16]
Test Case: 221 | Input/Output: [(15 92 8 40) 8]
Test Case: 222 | Input/Output: [(34 87 73 55) 34]
Test Case: 223 | Input/Output: [(36 92 5 92) 5]
Test Case: 224 | Input/Output: [(81 67 74 95) 67]
Test Case: 225 | Input/Output: [(83 20 31 52) 20]
Test Case: 226 | Input/Output: [(94 19 77 10) 10]
Test Case: 227 | Input/Output: [(52 9 94 6) 6]
Test Case: 228 | Input/Output: [(24 73 79 76) 24]
Test Case: 229 | Input/Output: [(47 84 27 55) 27]
Test Case: 230 | Input/Output: [(79 60 67 36) 36]
Test Case: 231 | Input/Output: [(30 1 7 70) 1]
Test Case: 232 | Input/Output: [(33 66 15 12) 12]
Test Case: 233 | Input/Output: [(28 79 1 73) 1]
Test Case: 234 | Input/Output: [(47 50 38 36) 36]
Test Case: 235 | Input/Output: [(79 5 46 32) 5]
Test Case: 236 | Input/Output: [(81 52 67 81) 52]
Test Case: 237 | Input/Output: [(79 23 100 10) 10]
Test Case: 238 | Input/Output: [(25 3 50 24) 3]
Test Case: 239 | Input/Output: [(31 37 21 98) 21]
Test Case: 240 | Input/Output: [(82 7 82 96) 7]
Test Case: 241 | Input/Output: [(17 75 33 42) 17]
Test Case: 242 | Input/Output: [(43 20 45 73) 20]
Test Case: 243 | Input/Output: [(90 70 6 77) 6]
Test Case: 244 | Input/Output: [(22 15 4 45) 4]
Test Case: 245 | Input/Output: [(13 61 55 37) 13]
Test Case: 246 | Input/Output: [(64 56 29 49) 29]
Test Case: 247 | Input/Output: [(10 80 91 46) 10]
Test Case: 248 | Input/Output: [(96 98 81 28) 28]
Test Case: 249 | Input/Output: [(97 7 27 41) 7]
Test Case: 250 | Input/Output: [(38 91 22 49) 22]
Test Case: 251 | Input/Output: [(60 47 38 17) 17]
Test Case: 252 | Input/Output: [(22 62 43 36) 22]
Test Case: 253 | Input/Output: [(18 8 51 19) 8]
Test Case: 254 | Input/Output: [(64 100 85 65) 64]
Test Case: 255 | Input/Output: [(50 77 42 25) 25]
Test Case: 256 | Input/Output: [(0 76 58 35) 0]
Test Case: 257 | Input/Output: [(69 76 40 19) 19]
Test Case: 258 | Input/Output: [(6 13 42 16) 6]
Test Case: 259 | Input/Output: [(16 46 13 85) 13]
Test Case: 260 | Input/Output: [(65 88 1 64) 1]
Test Case: 261 | Input/Output: [(46 85 39 16) 16]
Test Case: 262 | Input/Output: [(96 23 28 11) 11]
Test Case: 263 | Input/Output: [(64 25 62 22) 22]
Test Case: 264 | Input/Output: [(90 13 37 78) 13]
Test Case: 265 | Input/Output: [(45 73 97 40) 40]
Test Case: 266 | Input/Output: [(86 98 1 20) 1]
Test Case: 267 | Input/Output: [(64 65 10 85) 10]
Test Case: 268 | Input/Output: [(51 24 62 95) 24]
Test Case: 269 | Input/Output: [(98 51 11 37) 11]
Test Case: 270 | Input/Output: [(7 69 58 72) 7]
Test Case: 271 | Input/Output: [(48 58 80 73) 48]
Test Case: 272 | Input/Output: [(17 84 30 67) 17]
Test Case: 273 | Input/Output: [(27 74 0 16) 0]
Test Case: 274 | Input/Output: [(47 59 48 44) 44]
Test Case: 275 | Input/Output: [(57 24 90 23) 23]
Test Case: 276 | Input/Output: [(44 12 94 72) 12]
Test Case: 277 | Input/Output: [(32 16 84 22) 16]
Test Case: 278 | Input/Output: [(21 33 36 9) 9]
Test Case: 279 | Input/Output: [(0 54 58 88) 0]
Test Case: 280 | Input/Output: [(25 41 67 42) 25]
Test Case: 281 | Input/Output: [(56 79 64 29) 29]
Test Case: 282 | Input/Output: [(77 34 23 29) 23]
Test Case: 283 | Input/Output: [(78 38 76 89) 38]
Test Case: 284 | Input/Output: [(54 46 41 23) 23]
Test Case: 285 | Input/Output: [(98 12 76 94) 12]
Test Case: 286 | Input/Output: [(77 36 2 82) 2]
Test Case: 287 | Input/Output: [(14 47 69 80) 14]
Test Case: 288 | Input/Output: [(59 100 99 72) 59]
Test Case: 289 | Input/Output: [(52 58 15 29) 15]
Test Case: 290 | Input/Output: [(93 32 30 63) 30]
Test Case: 291 | Input/Output: [(85 82 60 9) 9]
Test Case: 292 | Input/Output: [(52 53 27 19) 19]
Test Case: 293 | Input/Output: [(4 32 93 83) 4]
Test Case: 294 | Input/Output: [(90 14 41 10) 10]
Test Case: 295 | Input/Output: [(1 65 2 12) 1]
Test Case: 296 | Input/Output: [(6 29 61 5) 5]
Test Case: 297 | Input/Output: [(73 3 24 98) 3]
Test Case: 298 | Input/Output: [(3 53 21 22) 3]
Test Case: 299 | Input/Output: [(100 49 10 4) 4]
Test Case: 300 | Input/Output: [(85 34 41 61) 34]
Test Case: 301 | Input/Output: [(45 23 59 53) 23]
Test Case: 302 | Input/Output: [(80 38 85 88) 38]
Test Case: 303 | Input/Output: [(15 0 56 39) 0]
Test Case: 304 | Input/Output: [(49 51 87 63) 49]
Test Case: 305 | Input/Output: [(67 49 77 29) 29]
Test Case: 306 | Input/Output: [(42 7 41 58) 7]
Test Case: 307 | Input/Output: [(44 70 32 12) 12]
Test Case: 308 | Input/Output: [(10 27 16 33) 10]
Test Case: 309 | Input/Output: [(17 42 97 26) 17]
Test Case: 310 | Input/Output: [(65 12 10 72) 10]
Test Case: 311 | Input/Output: [(49 53 79 100) 49]
Test Case: 312 | Input/Output: [(62 16 60 34) 16]
Test Case: 313 | Input/Output: [(91 71 67 3) 3]
Test Case: 314 | Input/Output: [(21 51 79 100) 21]
Test Case: 315 | Input/Output: [(32 80 46 52) 32]
Test Case: 316 | Input/Output: [(63 50 36 97) 36]
Test Case: 317 | Input/Output: [(61 98 22 18) 18]
Test Case: 318 | Input/Output: [(0 16 21 85) 0]
Test Case: 319 | Input/Output: [(97 14 54 95) 14]
Test Case: 320 | Input/Output: [(43 5 0 91) 0]
Test Case: 321 | Input/Output: [(48 61 55 72) 48]
Test Case: 322 | Input/Output: [(92 11 20 8) 8]
Test Case: 323 | Input/Output: [(98 78 39 50) 39]
Test Case: 324 | Input/Output: [(26 40 5 66) 5]
Test Case: 325 | Input/Output: [(51 71 93 63) 51]
Test Case: 326 | Input/Output: [(93 39 82 7) 7]
Test Case: 327 | Input/Output: [(50 63 25 84) 25]
Test Case: 328 | Input/Output: [(24 26 74 9) 9]
Test Case: 329 | Input/Output: [(9 61 4 21) 4]
Test Case: 330 | Input/Output: [(83 78 2 60) 2]
Test Case: 331 | Input/Output: [(60 79 45 79) 45]
Test Case: 332 | Input/Output: [(22 75 92 24) 22]
Test Case: 333 | Input/Output: [(31 94 93 71) 31]
Test Case: 334 | Input/Output: [(79 59 53 14) 14]
Test Case: 335 | Input/Output: [(10 82 22 5) 5]
Test Case: 336 | Input/Output: [(48 23 38 16) 16]
Test Case: 337 | Input/Output: [(57 13 51 18) 13]
Test Case: 338 | Input/Output: [(56 81 98 72) 56]
Test Case: 339 | Input/Output: [(58 94 95 74) 58]
Test Case: 340 | Input/Output: [(81 67 71 81) 67]
Test Case: 341 | Input/Output: [(49 83 47 44) 44]
Test Case: 342 | Input/Output: [(87 60 57 8) 8]
Test Case: 343 | Input/Output: [(75 11 26 19) 11]
Test Case: 344 | Input/Output: [(26 35 60 97) 26]
Test Case: 345 | Input/Output: [(73 30 92 21) 21]
Test Case: 346 | Input/Output: [(31 14 84 64) 14]
Test Case: 347 | Input/Output: [(23 7 62 23) 7]
Test Case: 348 | Input/Output: [(35 71 91 78) 35]
Test Case: 349 | Input/Output: [(4 74 9 77) 4]
Test Case: 350 | Input/Output: [(49 76 35 98) 35]
Test Case: 351 | Input/Output: [(18 37 84 14) 14]
Test Case: 352 | Input/Output: [(6 42 19 86) 6]
Test Case: 353 | Input/Output: [(7 72 62 17) 7]
Test Case: 354 | Input/Output: [(36 97 93 76) 36]
Test Case: 355 | Input/Output: [(56 17 10 38) 10]
Test Case: 356 | Input/Output: [(11 23 12 45) 11]
Test Case: 357 | Input/Output: [(11 3 79 19) 3]
Test Case: 358 | Input/Output: [(94 84 43 14) 14]
Test Case: 359 | Input/Output: [(18 70 69 59) 18]
Test Case: 360 | Input/Output: [(32 7 2 20) 2]
Test Case: 361 | Input/Output: [(85 61 4 78) 4]
Test Case: 362 | Input/Output: [(99 71 64 95) 64]
Test Case: 363 | Input/Output: [(86 23 36 42) 23]
Test Case: 364 | Input/Output: [(11 6 88 89) 6]
Test Case: 365 | Input/Output: [(61 62 85 23) 23]
Test Case: 366 | Input/Output: [(29 81 100 95) 29]
Test Case: 367 | Input/Output: [(20 41 55 39) 20]
Test Case: 368 | Input/Output: [(83 7 69 82) 7]
Test Case: 369 | Input/Output: [(48 11 15 22) 11]
Test Case: 370 | Input/Output: [(51 71 74 47) 47]
Test Case: 371 | Input/Output: [(57 35 7 99) 7]
Test Case: 372 | Input/Output: [(23 53 43 83) 23]
Test Case: 373 | Input/Output: [(15 13 36 84) 13]
Test Case: 374 | Input/Output: [(54 31 58 93) 31]
Test Case: 375 | Input/Output: [(65 78 9 59) 9]
Test Case: 376 | Input/Output: [(64 23 54 28) 23]
Test Case: 377 | Input/Output: [(30 20 73 94) 20]
Test Case: 378 | Input/Output: [(82 17 70 89) 17]
Test Case: 379 | Input/Output: [(88 40 32 60) 32]
Test Case: 380 | Input/Output: [(30 81 27 26) 26]
Test Case: 381 | Input/Output: [(24 44 1 88) 1]
Test Case: 382 | Input/Output: [(92 43 56 67) 43]
Test Case: 383 | Input/Output: [(21 79 54 37) 21]
Test Case: 384 | Input/Output: [(32 11 75 93) 11]
Test Case: 385 | Input/Output: [(69 99 57 51) 51]
Test Case: 386 | Input/Output: [(34 85 100 71) 34]
Test Case: 387 | Input/Output: [(17 67 90 16) 16]
Test Case: 388 | Input/Output: [(97 73 34 39) 34]
Test Case: 389 | Input/Output: [(9 56 81 44) 9]
Test Case: 390 | Input/Output: [(61 53 63 43) 43]
Test Case: 391 | Input/Output: [(70 2 78 92) 2]
Test Case: 392 | Input/Output: [(55 34 33 26) 26]
Test Case: 393 | Input/Output: [(1 24 19 69) 1]
Test Case: 394 | Input/Output: [(20 85 99 16) 16]
Test Case: 395 | Input/Output: [(85 47 84 53) 47]
Test Case: 396 | Input/Output: [(71 40 7 96) 7]
Test Case: 397 | Input/Output: [(62 56 96 1) 1]
Test Case: 398 | Input/Output: [(62 48 39 50) 39]
Test Case: 399 | Input/Output: [(17 6 84 7) 6]
Test Case: 400 | Input/Output: [(70 -2 -97 74) -97]
Test Case: 401 | Input/Output: [(5 -2 -48 -49) -49]
Test Case: 402 | Input/Output: [(35 1 -47 -55) -55]
Test Case: 403 | Input/Output: [(76 97 -85 -22) -85]
Test Case: 404 | Input/Output: [(38 -23 40 22) -23]
Test Case: 405 | Input/Output: [(78 14 -71 81) -71]
Test Case: 406 | Input/Output: [(97 -99 10 78) -99]
Test Case: 407 | Input/Output: [(38 35 44 32) 32]
Test Case: 408 | Input/Output: [(-61 38 -8 34) -61]
Test Case: 409 | Input/Output: [(20 -53 47 41) -53]
Test Case: 410 | Input/Output: [(29 40 52 -24) -24]
Test Case: 411 | Input/Output: [(88 68 94 -14) -14]
Test Case: 412 | Input/Output: [(75 -38 59 -26) -38]
Test Case: 413 | Input/Output: [(39 63 4 -53) -53]
Test Case: 414 | Input/Output: [(-6 68 49 87) -6]
Test Case: 415 | Input/Output: [(15 -30 -80 -87) -87]
Test Case: 416 | Input/Output: [(-98 42 34 20) -98]
Test Case: 417 | Input/Output: [(-37 7 -69 80) -69]
Test Case: 418 | Input/Output: [(-99 86 92 8) -99]
Test Case: 419 | Input/Output: [(96 -98 -87 76) -98]
Test Case: 420 | Input/Output: [(51 83 -45 96) -45]
Test Case: 421 | Input/Output: [(-93 -50 -61 78) -93]
Test Case: 422 | Input/Output: [(-96 -95 57 -93) -96]
Test Case: 423 | Input/Output: [(86 -66 85 -55) -66]
Test Case: 424 | Input/Output: [(-42 96 -71 -97) -97]
Test Case: 425 | Input/Output: [(-21 30 94 86) -21]
Test Case: 426 | Input/Output: [(-81 46 -21 48) -81]
Test Case: 427 | Input/Output: [(-3 -13 89 -77) -77]
Test Case: 428 | Input/Output: [(-60 100 93 -51) -60]
Test Case: 429 | Input/Output: [(-71 -94 -66 -83) -94]
Test Case: 430 | Input/Output: [(-99 24 -97 -90) -99]
Test Case: 431 | Input/Output: [(-37 73 10 13) -37]
Test Case: 432 | Input/Output: [(-92 75 73 68) -92]
Test Case: 433 | Input/Output: [(62 51 49 -25) -25]
Test Case: 434 | Input/Output: [(74 92 -42 99) -42]
Test Case: 435 | Input/Output: [(72 35 15 82) 15]
Test Case: 436 | Input/Output: [(-2 -91 16 12) -91]
Test Case: 437 | Input/Output: [(-34 19 77 27) -34]
Test Case: 438 | Input/Output: [(72 59 -72 41) -72]
Test Case: 439 | Input/Output: [(-67 18 -47 -71) -71]
Test Case: 440 | Input/Output: [(-75 -12 24 56) -75]
Test Case: 441 | Input/Output: [(24 -5 48 44) -5]
Test Case: 442 | Input/Output: [(-12 -48 -62 56) -62]
Test Case: 443 | Input/Output: [(20 -24 -22 38) -24]
Test Case: 444 | Input/Output: [(-18 -91 11 -74) -91]
Test Case: 445 | Input/Output: [(27 -15 21 91) -15]
Test Case: 446 | Input/Output: [(20 95 59 60) 20]
Test Case: 447 | Input/Output: [(95 74 -27 -47) -47]
Test Case: 448 | Input/Output: [(-73 -38 -4 64) -73]
Test Case: 449 | Input/Output: [(-11 54 96 87) -11]
Test Case: 450 | Input/Output: [(-82 -36 -86 20) -86]
Test Case: 451 | Input/Output: [(-45 -88 -76 -14) -88]
Test Case: 452 | Input/Output: [(-31 87 -97 16) -97]
Test Case: 453 | Input/Output: [(-44 -11 -30 67) -44]
Test Case: 454 | Input/Output: [(-5 25 20 72) -5]
Test Case: 455 | Input/Output: [(-32 -6 -16 -17) -32]
Test Case: 456 | Input/Output: [(-20 -85 -39 -72) -85]
Test Case: 457 | Input/Output: [(23 -39 81 -80) -80]
Test Case: 458 | Input/Output: [(91 100 97 -53) -53]
Test Case: 459 | Input/Output: [(-22 86 -53 45) -53]
Test Case: 460 | Input/Output: [(93 50 8 83) 8]
Test Case: 461 | Input/Output: [(-68 63 63 -100) -100]
Test Case: 462 | Input/Output: [(-36 -8 -59 79) -59]
Test Case: 463 | Input/Output: [(-42 -3 25 80) -42]
Test Case: 464 | Input/Output: [(-100 -75 1 100) -100]
Test Case: 465 | Input/Output: [(-27 -20 5 -31) -31]
Test Case: 466 | Input/Output: [(35 -69 -57 -74) -74]
Test Case: 467 | Input/Output: [(85 -16 59 36) -16]
Test Case: 468 | Input/Output: [(57 95 54 56) 54]
Test Case: 469 | Input/Output: [(57 62 -11 75) -11]
Test Case: 470 | Input/Output: [(-3 -18 -72 77) -72]
Test Case: 471 | Input/Output: [(-9 41 -27 -70) -70]
Test Case: 472 | Input/Output: [(-99 -38 34 -61) -99]
Test Case: 473 | Input/Output: [(-4 -66 -51 53) -66]
Test Case: 474 | Input/Output: [(10 17 97 77) 10]
Test Case: 475 | Input/Output: [(-26 15 97 -78) -78]
Test Case: 476 | Input/Output: [(-74 63 -71 60) -74]
Test Case: 477 | Input/Output: [(75 -9 5 44) -9]
Test Case: 478 | Input/Output: [(65 -95 60 0) -95]
Test Case: 479 | Input/Output: [(-97 -66 -62 -7) -97]
Test Case: 480 | Input/Output: [(1 46 48 -4) -4]
Test Case: 481 | Input/Output: [(-65 92 -79 52) -79]
Test Case: 482 | Input/Output: [(57 42 7 -56) -56]
Test Case: 483 | Input/Output: [(-7 -30 -58 -22) -58]
Test Case: 484 | Input/Output: [(73 -4 -41 46) -41]
Test Case: 485 | Input/Output: [(50 58 -77 -82) -82]
Test Case: 486 | Input/Output: [(-32 14 92 98) -32]
Test Case: 487 | Input/Output: [(92 28 37 30) 28]
Test Case: 488 | Input/Output: [(-2 -60 -34 -22) -60]
Test Case: 489 | Input/Output: [(98 -61 -41 76) -61]
Test Case: 490 | Input/Output: [(19 -71 43 43) -71]
Test Case: 491 | Input/Output: [(-55 -19 -25 -78) -78]
Test Case: 492 | Input/Output: [(40 -74 -7 -77) -77]
Test Case: 493 | Input/Output: [(47 -54 -90 64) -90]
Test Case: 494 | Input/Output: [(38 -95 17 79) -95]
Test Case: 495 | Input/Output: [(-23 54 -88 -30) -88]
Test Case: 496 | Input/Output: [(-31 17 -50 32) -50]
Test Case: 497 | Input/Output: [(42 -61 -92 41) -92]
Test Case: 498 | Input/Output: [(-33 18 -20 87) -33]
Test Case: 499 | Input/Output: [(-35 93 56 82) -35]
Test Case: 500 | Input/Output: [(3 43 -56 -29) -56]
Test Case: 501 | Input/Output: [(32 7 -35 10) -35]
Test Case: 502 | Input/Output: [(19 -48 -24 -55) -55]
Test Case: 503 | Input/Output: [(-20 -13 -86 -43) -86]
Test Case: 504 | Input/Output: [(-52 -86 28 18) -86]
Test Case: 505 | Input/Output: [(-82 -80 -59 11) -82]
Test Case: 506 | Input/Output: [(-40 -50 19 12) -50]
Test Case: 507 | Input/Output: [(41 -33 68 46) -33]
Test Case: 508 | Input/Output: [(-64 -58 42 -89) -89]
Test Case: 509 | Input/Output: [(-91 -41 -69 58) -91]
Test Case: 510 | Input/Output: [(-21 61 -97 -77) -97]
Test Case: 511 | Input/Output: [(41 78 98 -12) -12]
Test Case: 512 | Input/Output: [(-42 16 -17 54) -42]
Test Case: 513 | Input/Output: [(61 -99 84 60) -99]
Test Case: 514 | Input/Output: [(-19 -29 -99 54) -99]
Test Case: 515 | Input/Output: [(71 68 99 94) 68]
Test Case: 516 | Input/Output: [(-98 -94 -13 73) -98]
Test Case: 517 | Input/Output: [(-43 62 55 -40) -43]
Test Case: 518 | Input/Output: [(70 28 89 21) 21]
Test Case: 519 | Input/Output: [(95 -89 90 47) -89]
Test Case: 520 | Input/Output: [(-1 -50 -95 6) -95]
Test Case: 521 | Input/Output: [(-47 -33 -95 -22) -95]
Test Case: 522 | Input/Output: [(-28 -67 -18 -84) -84]
Test Case: 523 | Input/Output: [(23 -46 67 -22) -46]
Test Case: 524 | Input/Output: [(-24 -82 83 73) -82]
Test Case: 525 | Input/Output: [(23 94 53 -23) -23]
Test Case: 526 | Input/Output: [(45 68 -84 -3) -84]
Test Case: 527 | Input/Output: [(-11 -59 89 48) -59]
Test Case: 528 | Input/Output: [(-53 90 27 -92) -92]
Test Case: 529 | Input/Output: [(93 88 -38 -15) -38]
Test Case: 530 | Input/Output: [(-46 83 98 -50) -50]
Test Case: 531 | Input/Output: [(84 -2 -26 14) -26]
Test Case: 532 | Input/Output: [(11 -66 12 -62) -66]
Test Case: 533 | Input/Output: [(32 -12 27 -66) -66]
Test Case: 534 | Input/Output: [(41 -56 -97 -26) -97]
Test Case: 535 | Input/Output: [(-59 -93 9 -28) -93]
Test Case: 536 | Input/Output: [(62 69 -50 63) -50]
Test Case: 537 | Input/Output: [(63 23 63 26) 23]
Test Case: 538 | Input/Output: [(76 -12 77 -75) -75]
Test Case: 539 | Input/Output: [(-24 -31 49 -17) -31]
Test Case: 540 | Input/Output: [(10 9 50 -4) -4]
Test Case: 541 | Input/Output: [(12 -51 -67 28) -67]
Test Case: 542 | Input/Output: [(5 -10 -91 14) -91]
Test Case: 543 | Input/Output: [(76 -99 -21 66) -99]
Test Case: 544 | Input/Output: [(-94 -20 10 74) -94]
Test Case: 545 | Input/Output: [(-96 -93 -27 -33) -96]
Test Case: 546 | Input/Output: [(51 -9 -30 -48) -48]
Test Case: 547 | Input/Output: [(-74 -17 -83 65) -83]
Test Case: 548 | Input/Output: [(-17 -69 79 -48) -69]
Test Case: 549 | Input/Output: [(-48 -25 7 -4) -48]
Test Case: 550 | Input/Output: [(-77 -83 -71 95) -83]
Test Case: 551 | Input/Output: [(-35 -92 45 -79) -92]
Test Case: 552 | Input/Output: [(68 40 -96 45) -96]
Test Case: 553 | Input/Output: [(-87 -60 -32 -8) -87]
Test Case: 554 | Input/Output: [(57 -78 -73 -31) -78]
Test Case: 555 | Input/Output: [(80 63 67 -78) -78]
Test Case: 556 | Input/Output: [(78 -93 0 36) -93]
Test Case: 557 | Input/Output: [(46 71 72 -14) -14]
Test Case: 558 | Input/Output: [(-3 54 68 95) -3]
Test Case: 559 | Input/Output: [(95 -50 -22 11) -50]
Test Case: 560 | Input/Output: [(-46 -64 -3 -28) -64]
Test Case: 561 | Input/Output: [(-21 40 30 -84) -84]
Test Case: 562 | Input/Output: [(33 -78 98 -42) -78]
Test Case: 563 | Input/Output: [(98 83 26 36) 26]
Test Case: 564 | Input/Output: [(-14 78 -88 89) -88]
Test Case: 565 | Input/Output: [(-31 -66 57 34) -66]
Test Case: 566 | Input/Output: [(-58 12 -6 36) -58]
Test Case: 567 | Input/Output: [(92 84 38 -26) -26]
Test Case: 568 | Input/Output: [(20 11 -58 66) -58]
Test Case: 569 | Input/Output: [(40 -88 -79 54) -88]
Test Case: 570 | Input/Output: [(21 48 23 -24) -24]
Test Case: 571 | Input/Output: [(-20 -50 67 -24) -50]
Test Case: 572 | Input/Output: [(5 79 25 28) 5]
Test Case: 573 | Input/Output: [(100 -68 -11 -7) -68]
Test Case: 574 | Input/Output: [(75 -78 71 46) -78]
Test Case: 575 | Input/Output: [(-31 -15 -75 92) -75]
Test Case: 576 | Input/Output: [(24 -11 -86 27) -86]
Test Case: 577 | Input/Output: [(34 -1 -55 -60) -60]
Test Case: 578 | Input/Output: [(92 -34 -99 -56) -99]
Test Case: 579 | Input/Output: [(32 43 6 -99) -99]
Test Case: 580 | Input/Output: [(96 -23 27 59) -23]
Test Case: 581 | Input/Output: [(-86 -65 65 34) -86]
Test Case: 582 | Input/Output: [(97 -67 -74 -100) -100]
Test Case: 583 | Input/Output: [(18 28 -55 -10) -55]
Test Case: 584 | Input/Output: [(25 67 -25 57) -25]
Test Case: 585 | Input/Output: [(-74 -55 85 85) -74]
Test Case: 586 | Input/Output: [(93 -75 80 0) -75]
Test Case: 587 | Input/Output: [(56 42 50 -38) -38]
Test Case: 588 | Input/Output: [(-87 -23 -87 3) -87]
Test Case: 589 | Input/Output: [(-99 21 96 -5) -99]
Test Case: 590 | Input/Output: [(10 -76 -21 40) -76]
Test Case: 591 | Input/Output: [(24 -81 24 70) -81]
Test Case: 592 | Input/Output: [(43 -20 -66 6) -66]
Test Case: 593 | Input/Output: [(-71 -50 54 76) -71]
Test Case: 594 | Input/Output: [(-63 -25 -10 52) -63]
Test Case: 595 | Input/Output: [(12 -60 -92 -2) -92]
Test Case: 596 | Input/Output: [(79 -2 49 52) -2]
Test Case: 597 | Input/Output: [(-95 -32 -19 40) -95]
Test Case: 598 | Input/Output: [(-62 -24 -51 -21) -62]
Test Case: 599 | Input/Output: [(-8 -100 21 -89) -100]
Test Case: 600 | Input/Output: [(-76 -19 -9 -22) -76]
Test Case: 601 | Input/Output: [(86 -36 42 -98) -98]
Test Case: 602 | Input/Output: [(-94 25 -93 -90) -94]
Test Case: 603 | Input/Output: [(80 -44 8 -86) -86]
Test Case: 604 | Input/Output: [(-11 -66 59 -94) -94]
Test Case: 605 | Input/Output: [(-64 83 -9 -36) -64]
Test Case: 606 | Input/Output: [(-10 20 86 -27) -27]
Test Case: 607 | Input/Output: [(39 35 64 94) 35]
Test Case: 608 | Input/Output: [(-55 -74 -66 51) -74]
Test Case: 609 | Input/Output: [(-39 -42 83 -53) -53]
Test Case: 610 | Input/Output: [(64 28 3 -82) -82]
Test Case: 611 | Input/Output: [(6 -84 80 49) -84]
Test Case: 612 | Input/Output: [(32 -19 -69 44) -69]
Test Case: 613 | Input/Output: [(-9 -95 -27 24) -95]
Test Case: 614 | Input/Output: [(12 12 73 0) 0]
Test Case: 615 | Input/Output: [(-79 -9 28 67) -79]
Test Case: 616 | Input/Output: [(-24 -54 52 8) -54]
Test Case: 617 | Input/Output: [(12 -42 64 16) -42]
Test Case: 618 | Input/Output: [(71 -57 32 -67) -67]
Test Case: 619 | Input/Output: [(14 -59 -34 38) -59]
Test Case: 620 | Input/Output: [(88 13 82 -2) -2]
Test Case: 621 | Input/Output: [(-27 -40 -31 90) -40]
Test Case: 622 | Input/Output: [(72 -54 -30 99) -54]
Test Case: 623 | Input/Output: [(72 53 23 -37) -37]
Test Case: 624 | Input/Output: [(87 98 26 2) 2]
Test Case: 625 | Input/Output: [(-46 92 84 70) -46]
Test Case: 626 | Input/Output: [(64 59 -15 -39) -39]
Test Case: 627 | Input/Output: [(70 93 19 21) 19]
Test Case: 628 | Input/Output: [(-63 -90 32 -15) -90]
Test Case: 629 | Input/Output: [(10 -55 -16 83) -55]
Test Case: 630 | Input/Output: [(-70 44 65 -2) -70]
Test Case: 631 | Input/Output: [(82 20 3 39) 3]
Test Case: 632 | Input/Output: [(38 95 -48 68) -48]
Test Case: 633 | Input/Output: [(57 -53 -47 33) -53]
Test Case: 634 | Input/Output: [(-19 72 10 -36) -36]
Test Case: 635 | Input/Output: [(7 6 21 -40) -40]
Test Case: 636 | Input/Output: [(78 -44 23 -10) -44]
Test Case: 637 | Input/Output: [(67 -44 -68 -22) -68]
Test Case: 638 | Input/Output: [(-1 -16 40 -39) -39]
Test Case: 639 | Input/Output: [(68 1 57 -71) -71]
Test Case: 640 | Input/Output: [(-99 46 66 -80) -99]
Test Case: 641 | Input/Output: [(75 -30 -67 8) -67]
Test Case: 642 | Input/Output: [(-49 -7 -95 -52) -95]
Test Case: 643 | Input/Output: [(-73 7 -54 -13) -73]
Test Case: 644 | Input/Output: [(-60 33 -89 -33) -89]
Test Case: 645 | Input/Output: [(-100 29 -78 -63) -100]
Test Case: 646 | Input/Output: [(79 27 16 60) 16]
Test Case: 647 | Input/Output: [(25 33 21 -29) -29]
Test Case: 648 | Input/Output: [(-66 97 26 -28) -66]
Test Case: 649 | Input/Output: [(33 -84 -63 -32) -84]
Test Case: 650 | Input/Output: [(-3 -77 -84 15) -84]
Test Case: 651 | Input/Output: [(-39 36 83 87) -39]
Test Case: 652 | Input/Output: [(-23 9 -72 15) -72]
Test Case: 653 | Input/Output: [(-87 -33 95 59) -87]
Test Case: 654 | Input/Output: [(-31 87 -57 38) -57]
Test Case: 655 | Input/Output: [(-74 -95 -60 -82) -95]
Test Case: 656 | Input/Output: [(99 -73 32 -10) -73]
Test Case: 657 | Input/Output: [(13 -80 92 24) -80]
Test Case: 658 | Input/Output: [(-9 88 -91 -85) -91]
Test Case: 659 | Input/Output: [(1 -70 -68 -12) -70]
Test Case: 660 | Input/Output: [(-62 48 11 -34) -62]
Test Case: 661 | Input/Output: [(-83 -35 13 -89) -89]
Test Case: 662 | Input/Output: [(33 51 -62 37) -62]
Test Case: 663 | Input/Output: [(-69 94 -75 33) -75]
Test Case: 664 | Input/Output: [(7 -27 -92 1) -92]
Test Case: 665 | Input/Output: [(-32 4 25 -76) -76]
Test Case: 666 | Input/Output: [(-86 72 -65 73) -86]
Test Case: 667 | Input/Output: [(48 -90 -31 92) -90]
Test Case: 668 | Input/Output: [(78 -92 -56 -40) -92]
Test Case: 669 | Input/Output: [(-21 -41 60 52) -41]
Test Case: 670 | Input/Output: [(-72 79 83 -72) -72]
Test Case: 671 | Input/Output: [(-90 41 9 1) -90]
Test Case: 672 | Input/Output: [(72 7 51 -89) -89]
Test Case: 673 | Input/Output: [(32 77 -73 -18) -73]
Test Case: 674 | Input/Output: [(-68 48 19 93) -68]
Test Case: 675 | Input/Output: [(41 13 -19 78) -19]
Test Case: 676 | Input/Output: [(76 73 41 30) 30]
Test Case: 677 | Input/Output: [(-25 -72 53 -31) -72]
Test Case: 678 | Input/Output: [(-57 -23 -98 14) -98]
Test Case: 679 | Input/Output: [(67 -19 96 25) -19]
Test Case: 680 | Input/Output: [(46 -88 47 64) -88]
Test Case: 681 | Input/Output: [(67 -33 -14 -95) -95]
Test Case: 682 | Input/Output: [(33 -90 -31 -43) -90]
Test Case: 683 | Input/Output: [(-58 -97 -97 65) -97]
Test Case: 684 | Input/Output: [(25 -38 -70 -100) -100]
Test Case: 685 | Input/Output: [(7 -78 -25 -34) -78]
Test Case: 686 | Input/Output: [(3 34 -50 63) -50]
Test Case: 687 | Input/Output: [(-74 85 -42 -91) -91]
Test Case: 688 | Input/Output: [(-70 -14 -77 83) -77]
Test Case: 689 | Input/Output: [(82 7 93 -17) -17]
Test Case: 690 | Input/Output: [(89 80 79 -57) -57]
Test Case: 691 | Input/Output: [(91 -88 -88 21) -88]
Test Case: 692 | Input/Output: [(-44 -1 67 55) -44]
Test Case: 693 | Input/Output: [(1 66 21 24) 1]
Test Case: 694 | Input/Output: [(42 32 -27 15) -27]
Test Case: 695 | Input/Output: [(79 16 88 43) 16]
Test Case: 696 | Input/Output: [(-41 84 -61 97) -61]
Test Case: 697 | Input/Output: [(-80 -23 67 44) -80]
Test Case: 698 | Input/Output: [(-28 62 -69 69) -69]
Test Case: 699 | Input/Output: [(92 -53 -87 -21) -87]
Test Case: 700 | Input/Output: [(34 76 6 -30) -30]
Test Case: 701 | Input/Output: [(-14 -20 -90 87) -90]
Test Case: 702 | Input/Output: [(-31 41 41 35) -31]
Test Case: 703 | Input/Output: [(87 -94 57 91) -94]
Test Case: 704 | Input/Output: [(-35 59 -26 19) -35]
Test Case: 705 | Input/Output: [(39 -90 44 -68) -90]
Test Case: 706 | Input/Output: [(97 67 23 -92) -92]
Test Case: 707 | Input/Output: [(79 77 -37 63) -37]
Test Case: 708 | Input/Output: [(-90 -21 -16 10) -90]
Test Case: 709 | Input/Output: [(50 31 8 49) 8]
Test Case: 710 | Input/Output: [(6 -98 -12 54) -98]
Test Case: 711 | Input/Output: [(-25 -78 -23 92) -78]
Test Case: 712 | Input/Output: [(14 -4 51 -77) -77]
Test Case: 713 | Input/Output: [(-100 -72 10 68) -100]
Test Case: 714 | Input/Output: [(50 20 100 -95) -95]
Test Case: 715 | Input/Output: [(6 -32 -76 37) -76]
Test Case: 716 | Input/Output: [(78 -66 55 -35) -66]
Test Case: 717 | Input/Output: [(-64 86 -21 18) -64]
Test Case: 718 | Input/Output: [(33 -47 66 85) -47]
Test Case: 719 | Input/Output: [(-3 4 0 -72) -72]
Test Case: 720 | Input/Output: [(7 22 66 14) 7]
Test Case: 721 | Input/Output: [(72 -14 29 -34) -34]
Test Case: 722 | Input/Output: [(38 81 100 50) 38]
Test Case: 723 | Input/Output: [(-92 42 11 -29) -92]
Test Case: 724 | Input/Output: [(-61 18 -42 -74) -74]
Test Case: 725 | Input/Output: [(43 49 15 -12) -12]
Test Case: 726 | Input/Output: [(21 94 82 32) 21]
Test Case: 727 | Input/Output: [(-92 89 31 -54) -92]
Test Case: 728 | Input/Output: [(32 8 25 69) 8]
Test Case: 729 | Input/Output: [(25 -11 -46 -25) -46]
Test Case: 730 | Input/Output: [(-21 35 -33 -91) -91]
Test Case: 731 | Input/Output: [(-68 74 -80 -46) -80]
Test Case: 732 | Input/Output: [(87 74 -49 -54) -54]
Test Case: 733 | Input/Output: [(87 48 81 70) 48]
Test Case: 734 | Input/Output: [(39 -28 1 -9) -28]
Test Case: 735 | Input/Output: [(-63 2 -70 -82) -82]
Test Case: 736 | Input/Output: [(-47 32 -62 3) -62]
Test Case: 737 | Input/Output: [(57 -42 -84 36) -84]
Test Case: 738 | Input/Output: [(93 15 96 -95) -95]
Test Case: 739 | Input/Output: [(23 -88 -6 -33) -88]
Test Case: 740 | Input/Output: [(-81 -42 52 71) -81]
Test Case: 741 | Input/Output: [(47 85 -49 -55) -55]
Test Case: 742 | Input/Output: [(89 71 -51 82) -51]
Test Case: 743 | Input/Output: [(87 -68 20 -85) -85]
Test Case: 744 | Input/Output: [(-77 -85 24 40) -85]
Test Case: 745 | Input/Output: [(-38 92 21 60) -38]
Test Case: 746 | Input/Output: [(74 -81 68 9) -81]
Test Case: 747 | Input/Output: [(64 -52 85 97) -52]
Test Case: 748 | Input/Output: [(14 -83 65 40) -83]
Test Case: 749 | Input/Output: [(37 -85 78 84) -85]
Test Case: 750 | Input/Output: [(6 27 -72 45) -72]
Test Case: 751 | Input/Output: [(32 -62 70 -39) -62]
Test Case: 752 | Input/Output: [(-19 -93 18 97) -93]
Test Case: 753 | Input/Output: [(-14 5 89 22) -14]
Test Case: 754 | Input/Output: [(13 42 -98 -59) -98]
Test Case: 755 | Input/Output: [(40 53 -28 95) -28]
Test Case: 756 | Input/Output: [(-80 82 78 -43) -80]
Test Case: 757 | Input/Output: [(26 29 41 -99) -99]
Test Case: 758 | Input/Output: [(-89 -56 -85 -61) -89]
Test Case: 759 | Input/Output: [(-46 88 -35 11) -46]
Test Case: 760 | Input/Output: [(-72 -66 -6 -82) -82]
Test Case: 761 | Input/Output: [(-5 -87 19 64) -87]
Test Case: 762 | Input/Output: [(42 -22 -11 71) -22]
Test Case: 763 | Input/Output: [(-16 27 66 -33) -33]
Test Case: 764 | Input/Output: [(-16 -78 77 75) -78]
Test Case: 765 | Input/Output: [(65 70 100 10) 10]
Test Case: 766 | Input/Output: [(65 70 44 73) 44]
Test Case: 767 | Input/Output: [(41 -1 3 -67) -67]
Test Case: 768 | Input/Output: [(-4 48 84 91) -4]
Test Case: 769 | Input/Output: [(37 73 -21 -99) -99]
Test Case: 770 | Input/Output: [(-29 13 100 -39) -39]
Test Case: 771 | Input/Output: [(-43 -82 83 -85) -85]
Test Case: 772 | Input/Output: [(-93 30 -4 39) -93]
Test Case: 773 | Input/Output: [(27 24 -37 22) -37]
Test Case: 774 | Input/Output: [(-53 20 73 -79) -79]
Test Case: 775 | Input/Output: [(88 -98 35 -8) -98]
Test Case: 776 | Input/Output: [(67 -24 -69 10) -69]
Test Case: 777 | Input/Output: [(74 39 -54 16) -54]
Test Case: 778 | Input/Output: [(67 37 -61 10) -61]
Test Case: 779 | Input/Output: [(67 -25 63 52) -25]
Test Case: 780 | Input/Output: [(94 48 -21 -32) -32]
Test Case: 781 | Input/Output: [(-74 11 18 -12) -74]
Test Case: 782 | Input/Output: [(-12 69 64 -67) -67]
Test Case: 783 | Input/Output: [(-29 -77 52 -76) -77]
Test Case: 784 | Input/Output: [(3 74 81 -10) -10]
Test Case: 785 | Input/Output: [(49 99 -47 -47) -47]
Test Case: 786 | Input/Output: [(20 -45 63 -38) -45]
Test Case: 787 | Input/Output: [(89 -13 -38 -36) -38]
Test Case: 788 | Input/Output: [(-4 -94 35 76) -94]
Test Case: 789 | Input/Output: [(-4 81 83 -48) -48]
Test Case: 790 | Input/Output: [(82 88 -62 -58) -62]
Test Case: 791 | Input/Output: [(54 38 -35 54) -35]
Test Case: 792 | Input/Output: [(-76 -40 -86 -86) -86]
Test Case: 793 | Input/Output: [(77 -27 32 42) -27]
Test Case: 794 | Input/Output: [(28 -24 17 38) -24]
Test Case: 795 | Input/Output: [(61 68 -39 95) -39]
Test Case: 796 | Input/Output: [(-90 -39 -92 75) -92]
Test Case: 797 | Input/Output: [(41 -31 75 44) -31]
Test Case: 798 | Input/Output: [(5 -56 40 98) -56]
Test Case: 799 | Input/Output: [(34 -17 -87 -99) -99]
Test Case: 800 | Input/Output: [(97 78 -31 55) -31]
Test Case: 801 | Input/Output: [(-85 -34 62 88) -85]
Test Case: 802 | Input/Output: [(64 57 -71 -66) -71]
Test Case: 803 | Input/Output: [(-90 -70 -39 -4) -90]
Test Case: 804 | Input/Output: [(58 78 89 -68) -68]
Test Case: 805 | Input/Output: [(-73 77 33 1) -73]
Test Case: 806 | Input/Output: [(3 -90 -5 -82) -90]
Test Case: 807 | Input/Output: [(-5 -77 65 -55) -77]
Test Case: 808 | Input/Output: [(-66 -26 40 63) -66]
Test Case: 809 | Input/Output: [(8 -92 -17 -33) -92]
Test Case: 810 | Input/Output: [(-31 -46 -5 -75) -75]
Test Case: 811 | Input/Output: [(89 36 73 67) 36]
Test Case: 812 | Input/Output: [(-34 -23 -69 -36) -69]
Test Case: 813 | Input/Output: [(-96 48 -30 77) -96]
Test Case: 814 | Input/Output: [(59 56 -54 94) -54]
Test Case: 815 | Input/Output: [(2 -78 -95 18) -95]
Test Case: 816 | Input/Output: [(-12 48 86 63) -12]
Test Case: 817 | Input/Output: [(16 -40 30 -64) -64]
Test Case: 818 | Input/Output: [(-11 23 -31 91) -31]
Test Case: 819 | Input/Output: [(58 56 -93 46) -93]
Test Case: 820 | Input/Output: [(17 -33 -45 68) -45]
Test Case: 821 | Input/Output: [(10 43 -16 -42) -42]
Test Case: 822 | Input/Output: [(-24 -72 -99 10) -99]
Test Case: 823 | Input/Output: [(23 33 50 82) 23]
Test Case: 824 | Input/Output: [(-39 12 87 9) -39]
Test Case: 825 | Input/Output: [(-1 -5 76 -82) -82]
Test Case: 826 | Input/Output: [(10 77 -77 -63) -77]
Test Case: 827 | Input/Output: [(10 -80 17 -97) -97]
Test Case: 828 | Input/Output: [(38 40 -34 12) -34]
Test Case: 829 | Input/Output: [(27 -13 9 -46) -46]
Test Case: 830 | Input/Output: [(79 -22 62 45) -22]
Test Case: 831 | Input/Output: [(48 63 -9 39) -9]
Test Case: 832 | Input/Output: [(4 -83 -53 -49) -83]
Test Case: 833 | Input/Output: [(85 -69 -15 1) -69]
Test Case: 834 | Input/Output: [(-84 2 -93 -38) -93]
Test Case: 835 | Input/Output: [(-75 -91 -42 55) -91]
Test Case: 836 | Input/Output: [(87 -99 -58 -40) -99]
Test Case: 837 | Input/Output: [(81 -17 70 -58) -58]
Test Case: 838 | Input/Output: [(91 -8 -78 36) -78]
Test Case: 839 | Input/Output: [(11 -14 55 -65) -65]
Test Case: 840 | Input/Output: [(31 -83 97 10) -83]
Test Case: 841 | Input/Output: [(9 -78 83 11) -78]
Test Case: 842 | Input/Output: [(-63 99 13 -60) -63]
Test Case: 843 | Input/Output: [(-4 -32 -68 7) -68]
Test Case: 844 | Input/Output: [(-2 -66 -19 -37) -66]
Test Case: 845 | Input/Output: [(-74 25 32 84) -74]
Test Case: 846 | Input/Output: [(32 -78 -91 -77) -91]
Test Case: 847 | Input/Output: [(89 -60 62 4) -60]
Test Case: 848 | Input/Output: [(74 21 -94 100) -94]
Test Case: 849 | Input/Output: [(25 -96 -81 -55) -96]
Test Case: 850 | Input/Output: [(38 12 36 99) 12]
Test Case: 851 | Input/Output: [(17 98 100 29) 17]
Test Case: 852 | Input/Output: [(84 -82 -93 4) -93]
Test Case: 853 | Input/Output: [(-31 -42 54 -32) -42]
Test Case: 854 | Input/Output: [(58 -97 84 95) -97]
Test Case: 855 | Input/Output: [(3 -62 -42 51) -62]
Test Case: 856 | Input/Output: [(-84 10 81 -97) -97]
Test Case: 857 | Input/Output: [(-25 46 -18 -27) -27]
Test Case: 858 | Input/Output: [(-72 27 17 0) -72]
Test Case: 859 | Input/Output: [(76 87 94 -38) -38]
Test Case: 860 | Input/Output: [(44 -64 97 33) -64]
Test Case: 861 | Input/Output: [(15 -33 -83 14) -83]
Test Case: 862 | Input/Output: [(94 38 -39 -54) -54]
Test Case: 863 | Input/Output: [(94 -17 -9 93) -17]
Test Case: 864 | Input/Output: [(-10 69 -81 -55) -81]
Test Case: 865 | Input/Output: [(46 87 -10 -90) -90]
Test Case: 866 | Input/Output: [(-74 18 87 43) -74]
Test Case: 867 | Input/Output: [(89 -83 84 59) -83]
Test Case: 868 | Input/Output: [(89 -79 83 -7) -79]
Test Case: 869 | Input/Output: [(-82 14 -14 -51) -82]
Test Case: 870 | Input/Output: [(15 64 -96 -70) -96]
Test Case: 871 | Input/Output: [(-14 -79 79 100) -79]
Test Case: 872 | Input/Output: [(12 -24 67 -35) -35]
Test Case: 873 | Input/Output: [(-49 -1 -61 -18) -61]
Test Case: 874 | Input/Output: [(20 95 38 -97) -97]
Test Case: 875 | Input/Output: [(53 -38 -9 -36) -38]
Test Case: 876 | Input/Output: [(58 -72 63 87) -72]
Test Case: 877 | Input/Output: [(-14 95 -69 64) -69]
Test Case: 878 | Input/Output: [(18 9 19 -46) -46]
Test Case: 879 | Input/Output: [(53 88 -5 -49) -49]
Test Case: 880 | Input/Output: [(16 96 96 87) 16]
Test Case: 881 | Input/Output: [(-2 79 66 35) -2]
Test Case: 882 | Input/Output: [(1 54 83 -90) -90]
Test Case: 883 | Input/Output: [(-90 -11 -61 -6) -90]
Test Case: 884 | Input/Output: [(74 91 4 59) 4]
Test Case: 885 | Input/Output: [(-17 9 -14 61) -17]
Test Case: 886 | Input/Output: [(-100 -93 -30 13) -100]
Test Case: 887 | Input/Output: [(-96 53 10 -25) -96]
Test Case: 888 | Input/Output: [(-46 32 43 -18) -46]
Test Case: 889 | Input/Output: [(-96 72 -22 -43) -96]
Test Case: 890 | Input/Output: [(-55 34 -49 -62) -62]
Test Case: 891 | Input/Output: [(-13 23 -52 -54) -54]
Test Case: 892 | Input/Output: [(57 -22 66 -67) -67]
Test Case: 893 | Input/Output: [(70 -1 44 86) -1]
Test Case: 894 | Input/Output: [(90 45 58 -92) -92]
Test Case: 895 | Input/Output: [(76 68 65 68) 65]
Test Case: 896 | Input/Output: [(-21 72 -71 -52) -71]
Test Case: 897 | Input/Output: [(47 -94 3 -10) -94]
Test Case: 898 | Input/Output: [(-1 71 76 28) -1]
Test Case: 899 | Input/Output: [(-4 -20 25 48) -20]
Test Case: 900 | Input/Output: [(-68 7 -63 50) -68]
Test Case: 901 | Input/Output: [(33 -25 -5 93) -25]
Test Case: 902 | Input/Output: [(-28 -87 53 20) -87]
Test Case: 903 | Input/Output: [(18 47 46 72) 18]
Test Case: 904 | Input/Output: [(-68 -80 83 -10) -80]
Test Case: 905 | Input/Output: [(-48 -13 -6 -21) -48]
Test Case: 906 | Input/Output: [(-76 5 11 -22) -76]
Test Case: 907 | Input/Output: [(0 23 59 55) 0]
Test Case: 908 | Input/Output: [(78 74 -54 -26) -54]
Test Case: 909 | Input/Output: [(10 -48 -7 18) -48]
Test Case: 910 | Input/Output: [(-81 -54 30 93) -81]
Test Case: 911 | Input/Output: [(-83 -76 -8 -42) -83]
Test Case: 912 | Input/Output: [(-53 -32 67 -94) -94]
Test Case: 913 | Input/Output: [(-63 46 13 66) -63]
Test Case: 914 | Input/Output: [(-46 -89 -51 -64) -89]
Test Case: 915 | Input/Output: [(-9 61 2 -78) -78]
Test Case: 916 | Input/Output: [(-22 -72 -93 -9) -93]
Test Case: 917 | Input/Output: [(-66 90 -75 70) -75]
Test Case: 918 | Input/Output: [(83 42 -51 98) -51]
Test Case: 919 | Input/Output: [(50 -70 5 15) -70]
Test Case: 920 | Input/Output: [(-86 34 92 57) -86]
Test Case: 921 | Input/Output: [(-63 -97 39 -60) -97]
Test Case: 922 | Input/Output: [(87 -99 -85 23) -99]
Test Case: 923 | Input/Output: [(72 -72 1 24) -72]
Test Case: 924 | Input/Output: [(-16 -45 35 17) -45]
Test Case: 925 | Input/Output: [(80 34 4 -3) -3]
Test Case: 926 | Input/Output: [(56 -11 51 48) -11]
Test Case: 927 | Input/Output: [(-52 -53 47 -52) -53]
Test Case: 928 | Input/Output: [(-13 33 -67 -19) -67]
Test Case: 929 | Input/Output: [(0 -61 -4 82) -61]
Test Case: 930 | Input/Output: [(41 78 88 -9) -9]
Test Case: 931 | Input/Output: [(5 -4 -46 55) -46]
Test Case: 932 | Input/Output: [(-6 56 -35 34) -35]
Test Case: 933 | Input/Output: [(-6 -52 27 -47) -52]
Test Case: 934 | Input/Output: [(50 63 12 -69) -69]
Test Case: 935 | Input/Output: [(93 66 -97 -78) -97]
Test Case: 936 | Input/Output: [(-8 39 -51 -74) -74]
Test Case: 937 | Input/Output: [(-9 95 -89 96) -89]
Test Case: 938 | Input/Output: [(20 -48 97 75) -48]
Test Case: 939 | Input/Output: [(-18 34 88 -85) -85]
Test Case: 940 | Input/Output: [(-22 31 68 -15) -22]
Test Case: 941 | Input/Output: [(41 78 -28 42) -28]
Test Case: 942 | Input/Output: [(26 9 -13 42) -13]
Test Case: 943 | Input/Output: [(-55 67 85 -29) -55]
Test Case: 944 | Input/Output: [(59 -29 14 -14) -29]
Test Case: 945 | Input/Output: [(45 66 97 2) 2]
Test Case: 946 | Input/Output: [(-51 -74 1 -35) -74]
Test Case: 947 | Input/Output: [(-62 95 68 -14) -62]
Test Case: 948 | Input/Output: [(-10 39 -25 -82) -82]
Test Case: 949 | Input/Output: [(84 85 45 -7) -7]
Test Case: 950 | Input/Output: [(-20 4 -53 -78) -78]
Test Case: 951 | Input/Output: [(-24 64 56 61) -24]
Test Case: 952 | Input/Output: [(93 7 16 -18) -18]
Test Case: 953 | Input/Output: [(44 65 -49 -85) -85]
Test Case: 954 | Input/Output: [(-10 56 -30 32) -30]
Test Case: 955 | Input/Output: [(62 -20 -34 4) -34]
Test Case: 956 | Input/Output: [(43 25 97 74) 25]
Test Case: 957 | Input/Output: [(25 29 58 -1) -1]
Test Case: 958 | Input/Output: [(-35 -16 55 -8) -35]
Test Case: 959 | Input/Output: [(-56 73 -13 12) -56]
Test Case: 960 | Input/Output: [(52 57 87 -16) -16]
Test Case: 961 | Input/Output: [(-55 -80 13 -72) -80]
Test Case: 962 | Input/Output: [(-13 70 -53 -31) -53]
Test Case: 963 | Input/Output: [(87 57 -97 39) -97]
Test Case: 964 | Input/Output: [(-42 49 59 47) -42]
Test Case: 965 | Input/Output: [(59 25 10 22) 10]
Test Case: 966 | Input/Output: [(6 -12 -57 -73) -73]
Test Case: 967 | Input/Output: [(63 -38 73 -8) -38]
Test Case: 968 | Input/Output: [(82 28 -32 73) -32]
Test Case: 969 | Input/Output: [(-8 47 -39 -13) -39]
Test Case: 970 | Input/Output: [(-7 60 60 97) -7]
Test Case: 971 | Input/Output: [(-56 -57 51 78) -57]
Test Case: 972 | Input/Output: [(-9 -98 53 21) -98]
Test Case: 973 | Input/Output: [(84 74 -93 32) -93]
Test Case: 974 | Input/Output: [(70 60 -56 56) -56]
Test Case: 975 | Input/Output: [(48 -26 -67 -54) -67]
Test Case: 976 | Input/Output: [(32 -63 -47 51) -63]
Test Case: 977 | Input/Output: [(-64 36 -21 -66) -66]
Test Case: 978 | Input/Output: [(-85 60 -35 -87) -87]
Test Case: 979 | Input/Output: [(51 -65 21 13) -65]
Test Case: 980 | Input/Output: [(-45 0 17 -81) -81]
Test Case: 981 | Input/Output: [(41 -67 -64 62) -67]
Test Case: 982 | Input/Output: [(-37 76 86 -48) -48]
Test Case: 983 | Input/Output: [(-37 97 -88 95) -88]
Test Case: 984 | Input/Output: [(3 -79 79 13) -79]
Test Case: 985 | Input/Output: [(59 61 -90 91) -90]
Test Case: 986 | Input/Output: [(-96 95 46 -14) -96]
Test Case: 987 | Input/Output: [(25 -19 48 -34) -34]
Test Case: 988 | Input/Output: [(55 -50 -31 -78) -78]
Test Case: 989 | Input/Output: [(-30 24 -24 -39) -39]
Test Case: 990 | Input/Output: [(20 9 25 89) 9]
Test Case: 991 | Input/Output: [(91 -84 45 -57) -84]
Test Case: 992 | Input/Output: [(12 -75 89 -11) -75]
Test Case: 993 | Input/Output: [(31 -88 9 -10) -88]
Test Case: 994 | Input/Output: [(-83 33 -45 -14) -83]
Test Case: 995 | Input/Output: [(69 88 -27 -37) -37]
Test Case: 996 | Input/Output: [(-55 8 -11 42) -55]
Test Case: 997 | Input/Output: [(-63 71 19 -64) -64]
Test Case: 998 | Input/Output: [(-96 34 -61 21) -96]
Test Case: 999 | Input/Output: [(-80 74 -4 11) -80]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -80 93 -105 -122 -63 61 26 -83 -81 -15 -54 67 33 46 -17 47
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[91 -94 -94 -94] -94] [[-13 -47 -13 -13] -47] [[65 -80 65 65] -80] [[79 0 79 79] 0] [[28 28 28 74] 28] [[8 -14 -14 -14] -14] [[-84 -84 -84 -12] -84] [[-68 -68 6 -68] -68] [[81 70 70 70] 70] [[-43 49 -43 -43] -43] [(55 55 55 55) 55] [(-87 -87 -87 -87) -87] [(88 88 88 88) 88] [(-73 -73 -73 -73) -73] [(28 28 28 28) 28] [(79 22 18 66) 18] [(7 12 50 21) 7] [(85 61 14 14) 14] [(45 69 42 33) 33] [(87 60 67 60) 60] [(43 91 75 73) 43] [(9 43 91 60) 9] [(39 82 83 56) 39] [(14 45 42 88) 14] [(53 53 0 22) 0] [(25 79 87 2) 2] [(57 49 51 8) 8] [(35 48 41 35) 35] [(11 31 69 76) 11] [(64 50 91 55) 50] [(25 15 90 3) 3] [(3 95 55 46) 3] [(50 72 41 84) 41] [(66 31 50 72) 31] [(95 73 74 34) 34] [(83 -36 89 -92) -92] [(-28 -30 -37 96) -37] [(-62 12 43 29) -62] [(19 5 -100 16) -100] [(1 62 -61 13) -61] [(-20 -10 9 14) -20] [(-51 19 -43 -36) -51] [(-8 -61 71 -60) -61] [(73 -25 10 -44) -44] [(78 -75 22 -42) -75] [(-52 -65 76 -85) -85] [(-97 22 -29 -18) -97] [(65 16 -65 -91) -91] [(41 47 50 -4) -4] [(12 14 -89 13) -89] [(-80 81 40 -63) -80] [(-65 -45 25 0) -65] [(-73 -88 -85 91) -88] [(-95 -27 -80 -9) -95] [(67 81 5 -49) -49] [(-47 34 57 -81) -81] [(-34 86 60 -33) -34] [(-37 -38 8 -6) -38] [(20 4 -55 8) -55] [(92 79 -62 43) -62] [(53 -62 -98 21) -98] [(79 41 51 -71) -71] [(-97 19 -16 -67) -97] [(-97 85 -67 2) -97] [(-68 49 77 67) -68] [(83 83 16 -75) -75] [(55 -55 25 -9) -55] [(-23 100 0 -57) -57] [(-78 -4 96 41) -78] [(40 74 -11 -43) -43] [(-8 -29 9 34) -29] [(-58 64 96 80) -58] [(-13 -19 -66 56) -66] [(19 58 -68 97) -68] [(15 77 65 -39) -39] [(-26 93 -23 -55) -55] [(87 -90 -45 -19) -90] [(17 -99 32 58) -99] [(-81 22 3 -30) -81] [(21 -96 84 47) -96] [(-12 82 -60 -28) -60] [(34 2 60 17) 2] [(65 -60 6 -26) -60] [(-61 -58 86 79) -61] [(-7 -51 28 -97) -97] [(-26 22 -88 66) -88] [(97 -75 93 50) -75] [(25 11 -21 -73) -73] [(-75 24 2 52) -75] [(-3 61 -67 50) -67] [(-42 -40 80 79) -42] [(64 72 41 -32) -32] [(39 -89 99 9) -89] [(-50 73 68 64) -50] [(-51 68 -62 34) -62])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -94                 | Program output: -94                
Correct output: -47                 | Program output: -13                
Correct output: -80                 | Program output: 65                 
Correct output: 0                   | Program output: 79                 
Correct output: 28                  | Program output: 74                 
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -12                
Correct output: -68                 | Program output: -68                
Correct output: 70                  | Program output: 70                 
Correct output: -43                 | Program output: -43                
Correct output: 55                  | Program output: 55                 
Correct output: -87                 | Program output: -87                
Correct output: 88                  | Program output: 88                 
Correct output: -73                 | Program output: -73                
Correct output: 28                  | Program output: 28                 
Correct output: 18                  | Program output: 66                 
Correct output: 7                   | Program output: 21                 
Correct output: 14                  | Program output: 14                 
Correct output: 33                  | Program output: 33                 
Correct output: 60                  | Program output: 60                 
Correct output: 43                  | Program output: 73                 
Correct output: 9                   | Program output: 60                 
Correct output: 39                  | Program output: 56                 
Correct output: 14                  | Program output: 88                 
Correct output: 0                   | Program output: 22                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 76                 
Correct output: 50                  | Program output: 55                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 46                 
Correct output: 41                  | Program output: 84                 
Correct output: 31                  | Program output: 72                 
Correct output: 34                  | Program output: 34                 
Correct output: -92                 | Program output: -92                
Correct output: -37                 | Program output: 96                 
Correct output: -62                 | Program output: 29                 
Correct output: -100                | Program output: 16                 
Correct output: -61                 | Program output: 13                 
Correct output: -20                 | Program output: 14                 
Correct output: -51                 | Program output: -36                
Correct output: -61                 | Program output: -60                
Correct output: -44                 | Program output: -44                
Correct output: -75                 | Program output: -42                
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: -18                
Correct output: -91                 | Program output: -91                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: 13                 
Correct output: -80                 | Program output: -63                
Correct output: -65                 | Program output: 0                  
Correct output: -88                 | Program output: 91                 
Correct output: -95                 | Program output: -9                 
Correct output: -49                 | Program output: -49                
Correct output: -81                 | Program output: -81                
Correct output: -34                 | Program output: -33                
Correct output: -38                 | Program output: -6                 
Correct output: -55                 | Program output: 8                  
Correct output: -62                 | Program output: 43                 
Correct output: -98                 | Program output: 21                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -67                
Correct output: -97                 | Program output: 2                  
Correct output: -68                 | Program output: 67                 
Correct output: -75                 | Program output: -75                
Correct output: -55                 | Program output: -9                 
Correct output: -57                 | Program output: -57                
Correct output: -78                 | Program output: 41                 
Correct output: -43                 | Program output: -43                
Correct output: -29                 | Program output: 34                 
Correct output: -58                 | Program output: 80                 
Correct output: -66                 | Program output: 56                 
Correct output: -68                 | Program output: 97                 
Correct output: -39                 | Program output: -39                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -19                
Correct output: -99                 | Program output: 58                 
Correct output: -81                 | Program output: -30                
Correct output: -96                 | Program output: 47                 
Correct output: -60                 | Program output: -28                
Correct output: 2                   | Program output: 17                 
Correct output: -60                 | Program output: -26                
Correct output: -61                 | Program output: 79                 
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: 66                 
Correct output: -75                 | Program output: 50                 
Correct output: -73                 | Program output: -73                
Correct output: -75                 | Program output: 52                 
Correct output: -67                 | Program output: 50                 
Correct output: -42                 | Program output: 79                 
Correct output: -32                 | Program output: -32                
Correct output: -89                 | Program output: 9                  
Correct output: -50                 | Program output: 64                 
Correct output: -62                 | Program output: 34                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_boolean_580} {:close 0, :instruction tag_exec_217} {:close 1, :instruction exec_do*times} {:close 1, :instruction tag_integer_203} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_integer_670} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction tagged_949} {:close 1, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_add} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove})
Lexicase best program: (exec_if () (integer_eq in1) exec_noop boolean_and integer_gt boolean_invert_second_then_and print_integer exec_while () boolean_yankdup integer_shove exec_s (integer_add integer_stackdepth tag_boolean_580 tag_exec_217 (exec_do*times () tag_integer_203) integer_mult) (exec_do*range (integer_min integer_mult integer_mult)) (integer_fromboolean exec_eq exec_dup_times (boolean_stackdepth tag_integer_670 boolean_dup_items) exec_if (exec_if (integer_yank exec_eq exec_swap (integer_yankdup) () exec_when (exec_stackdepth boolean_eq integer_dec integer_dup_times boolean_xor)) (integer_shove print_boolean integer_flush exec_dup_times () integer_gt boolean_eq tagged_949 in3) exec_stackdepth exec_do*range (integer_div boolean_yank integer_add)) (exec_flush) integer_inc boolean_shove) boolean_dup_items exec_yank exec_rot (integer_shove) () ())
Lexicase best errors: [1 0 1 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 84
Percent parens: 0.274
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_boolean_580} {:close 0, :instruction tag_exec_217} {:close 1, :instruction exec_do*times} {:close 1, :instruction tag_integer_203} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_integer_670} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction tagged_949} {:close 1, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_add} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove})
Zero cases best program: (exec_if () (integer_eq in1) exec_noop boolean_and integer_gt boolean_invert_second_then_and print_integer exec_while () boolean_yankdup integer_shove exec_s (integer_add integer_stackdepth tag_boolean_580 tag_exec_217 (exec_do*times () tag_integer_203) integer_mult) (exec_do*range (integer_min integer_mult integer_mult)) (integer_fromboolean exec_eq exec_dup_times (boolean_stackdepth tag_integer_670 boolean_dup_items) exec_if (exec_if (integer_yank exec_eq exec_swap (integer_yankdup) () exec_when (exec_stackdepth boolean_eq integer_dec integer_dup_times boolean_xor)) (integer_shove print_boolean integer_flush exec_dup_times () integer_gt boolean_eq tagged_949 in3) exec_stackdepth exec_do*range (integer_div boolean_yank integer_add)) (exec_flush) integer_inc boolean_shove) boolean_dup_items exec_yank exec_rot (integer_shove) () ())
Zero cases best errors: [1 0 1 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 84
Percent parens: 0.274
--- Lexicase Population Statistics ---
Count of elite individuals by case: (6 14 3 3 3 9 16 19 8 3)
Population mean number of elite cases: 0.08
Count of perfect (error zero) individuals by case: (6 14 3 3 3 9 16 19 8 3)
Population mean number of perfect (error zero) cases: 0.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 1, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer})
Best program: (integer_div exec_yankdup boolean_eq integer_eq integer_empty exec_empty exec_swap (exec_pop (integer_yankdup) integer_gte) (in4) integer_div integer_lte integer_lt boolean_pop print_integer)
Errors: [1 0 1 0 1 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 16
Size: 20
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 9.916
Median total errors in population: 10
Error averages by case: (0.994 0.986 0.997 0.997 0.997 0.991 0.984 0.981 0.992 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.367
Average program size in population (points): 70.568
Average percent parens in population: 0.281
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.274
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 472105
--- Timings ---
Current time: 1559583074694 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  3.7%
Reproduction:         0.8 seconds, 30.0%
Fitness Testing:      1.8 seconds, 66.3%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -94                 | Program output: -94                
Correct output: -47                 | Program output: -13                
Correct output: -80                 | Program output: 65                 
Correct output: 0                   | Program output: 79                 
Correct output: 28                  | Program output: 74                 
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -12                
Correct output: -68                 | Program output: -68                
Correct output: 70                  | Program output: 70                 
Correct output: -43                 | Program output: -43                
Correct output: 55                  | Program output: 55                 
Correct output: -87                 | Program output: -87                
Correct output: 88                  | Program output: 88                 
Correct output: -73                 | Program output: -73                
Correct output: 28                  | Program output: 28                 
Correct output: 18                  | Program output: 66                 
Correct output: 7                   | Program output: 21                 
Correct output: 14                  | Program output: 14                 
Correct output: 33                  | Program output: 33                 
Correct output: 60                  | Program output: 60                 
Correct output: 43                  | Program output: 73                 
Correct output: 9                   | Program output: 60                 
Correct output: 39                  | Program output: 56                 
Correct output: 14                  | Program output: 88                 
Correct output: 0                   | Program output: 22                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 76                 
Correct output: 50                  | Program output: 55                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 46                 
Correct output: 41                  | Program output: 84                 
Correct output: 31                  | Program output: 72                 
Correct output: 34                  | Program output: 34                 
Correct output: -92                 | Program output: -92                
Correct output: -37                 | Program output: 96                 
Correct output: -62                 | Program output: 29                 
Correct output: -100                | Program output: 16                 
Correct output: -61                 | Program output: 13                 
Correct output: -20                 | Program output: 14                 
Correct output: -51                 | Program output: -36                
Correct output: -61                 | Program output: -60                
Correct output: -44                 | Program output: -44                
Correct output: -75                 | Program output: -42                
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: -18                
Correct output: -91                 | Program output: -91                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: 13                 
Correct output: -80                 | Program output: -63                
Correct output: -65                 | Program output: 0                  
Correct output: -88                 | Program output: 91                 
Correct output: -95                 | Program output: -9                 
Correct output: -49                 | Program output: -49                
Correct output: -81                 | Program output: -81                
Correct output: -34                 | Program output: -33                
Correct output: -38                 | Program output: -6                 
Correct output: -55                 | Program output: 8                  
Correct output: -62                 | Program output: 43                 
Correct output: -98                 | Program output: 21                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -67                
Correct output: -97                 | Program output: 2                  
Correct output: -68                 | Program output: 67                 
Correct output: -75                 | Program output: -75                
Correct output: -55                 | Program output: -9                 
Correct output: -57                 | Program output: -57                
Correct output: -78                 | Program output: 41                 
Correct output: -43                 | Program output: -43                
Correct output: -29                 | Program output: 34                 
Correct output: -58                 | Program output: 80                 
Correct output: -66                 | Program output: 56                 
Correct output: -68                 | Program output: 97                 
Correct output: -39                 | Program output: -39                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -19                
Correct output: -99                 | Program output: 58                 
Correct output: -81                 | Program output: -30                
Correct output: -96                 | Program output: 47                 
Correct output: -60                 | Program output: -28                
Correct output: 2                   | Program output: 17                 
Correct output: -60                 | Program output: -26                
Correct output: -61                 | Program output: 79                 
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: 66                 
Correct output: -75                 | Program output: 50                 
Correct output: -73                 | Program output: -73                
Correct output: -75                 | Program output: 52                 
Correct output: -67                 | Program output: 50                 
Correct output: -42                 | Program output: 79                 
Correct output: -32                 | Program output: -32                
Correct output: -89                 | Program output: 9                  
Correct output: -50                 | Program output: 64                 
Correct output: -62                 | Program output: 34                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_583} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_375} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction 68} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3})
Lexicase best program: (boolean_dup integer_lt integer_sub integer_fromboolean integer_dup_times integer_max exec_eq boolean_swap integer_dec integer_max boolean_invert_first_then_and integer_swap exec_do*range (boolean_or boolean_pop) boolean_dup_times boolean_swap boolean_not boolean_pop exec_yankdup integer_dup_times exec_k_when_autoconstructing (tagged_583 exec_yankdup) (boolean_swap exec_do*while (boolean_dup_items) in4 boolean_eq) tagged_375 print_integer integer_mod integer_flush 68 exec_eq integer_yank boolean_yankdup boolean_dup_items boolean_and integer_mult exec_dup_items print_integer exec_pop (integer_inc integer_yankdup integer_yankdup) integer_lte integer_dup exec_s_when_autoconstructing (boolean_stackdepth exec_k () (integer_yankdup exec_k (integer_inc boolean_invert_first_then_and) (integer_add integer_empty integer_lte integer_div integer_yankdup) integer_flush) boolean_invert_second_then_and) (in3) ())
Lexicase best errors: [0 1 0 0 1 1 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 76
Percent parens: 0.171
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_583} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_375} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction 68} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3})
Zero cases best program: (boolean_dup integer_lt integer_sub integer_fromboolean integer_dup_times integer_max exec_eq boolean_swap integer_dec integer_max boolean_invert_first_then_and integer_swap exec_do*range (boolean_or boolean_pop) boolean_dup_times boolean_swap boolean_not boolean_pop exec_yankdup integer_dup_times exec_k_when_autoconstructing (tagged_583 exec_yankdup) (boolean_swap exec_do*while (boolean_dup_items) in4 boolean_eq) tagged_375 print_integer integer_mod integer_flush 68 exec_eq integer_yank boolean_yankdup boolean_dup_items boolean_and integer_mult exec_dup_items print_integer exec_pop (integer_inc integer_yankdup integer_yankdup) integer_lte integer_dup exec_s_when_autoconstructing (boolean_stackdepth exec_k () (integer_yankdup exec_k (integer_inc boolean_invert_first_then_and) (integer_add integer_empty integer_lte integer_div integer_yankdup) integer_flush) boolean_invert_second_then_and) (in3) ())
Zero cases best errors: [0 1 0 0 1 1 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 76
Percent parens: 0.171
--- Lexicase Population Statistics ---
Count of elite individuals by case: (783 273 234 235 105 262 234 262 275 105)
Population mean number of elite cases: 2.77
Count of perfect (error zero) individuals by case: (783 273 234 235 105 262 234 262 275 105)
Population mean number of perfect (error zero) cases: 2.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_583} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_375} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_yankdup} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3})
Best program: (boolean_dup integer_lt integer_sub integer_fromboolean integer_dup_times integer_max exec_eq boolean_swap integer_dec integer_max boolean_invert_first_then_and integer_swap exec_do*range (boolean_or boolean_pop) integer_inc boolean_swap boolean_not boolean_pop exec_yankdup integer_dup_times exec_k_when_autoconstructing (tagged_583 exec_yankdup) (boolean_swap exec_do*while (boolean_dup_items) in4 boolean_eq) tagged_375 print_integer integer_mod integer_flush integer_yankdup exec_eq integer_yank boolean_yankdup boolean_dup_items boolean_and integer_mult exec_dup_items print_integer exec_pop (integer_inc integer_yankdup integer_yankdup) integer_lte integer_dup exec_s_when_autoconstructing (boolean_stackdepth exec_k () (integer_yankdup exec_k (integer_inc boolean_invert_first_then_and) (integer_add integer_empty integer_lte integer_div integer_yankdup) integer_flush) boolean_invert_second_then_and) (in3) ())
Errors: [0 1 0 0 1 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 63
Size: 76
Percent parens: 0.171
--- Population Statistics ---
Average total errors in population: 7.232
Median total errors in population: 7
Error averages by case: (0.217 0.727 0.766 0.765 0.895 0.738 0.766 0.738 0.725 0.895)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.67
Average program size in population (points): 72.169
Average percent parens in population: 0.220
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.517
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 58
Genome diversity (% unique genomes):	 0.582
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.567
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 932028
--- Timings ---
Current time: 1559583077329 milliseconds
Total Time:           5.3 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         2.4 seconds, 46.4%
Fitness Testing:      2.4 seconds, 45.8%
Report:               0.3 seconds,  5.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -94                 | Program output: -94                
Correct output: -47                 | Program output: -13                
Correct output: -80                 | Program output: 65                 
Correct output: 0                   | Program output: 79                 
Correct output: 28                  | Program output: 74                 
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -12                
Correct output: -68                 | Program output: -68                
Correct output: 70                  | Program output: 70                 
Correct output: -43                 | Program output: -43                
Correct output: 55                  | Program output: 55                 
Correct output: -87                 | Program output: -87                
Correct output: 88                  | Program output: 88                 
Correct output: -73                 | Program output: -73                
Correct output: 28                  | Program output: 28                 
Correct output: 18                  | Program output: 66                 
Correct output: 7                   | Program output: 21                 
Correct output: 14                  | Program output: 14                 
Correct output: 33                  | Program output: 33                 
Correct output: 60                  | Program output: 60                 
Correct output: 43                  | Program output: 73                 
Correct output: 9                   | Program output: 60                 
Correct output: 39                  | Program output: 56                 
Correct output: 14                  | Program output: 88                 
Correct output: 0                   | Program output: 22                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 76                 
Correct output: 50                  | Program output: 55                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 46                 
Correct output: 41                  | Program output: 84                 
Correct output: 31                  | Program output: 72                 
Correct output: 34                  | Program output: 34                 
Correct output: -92                 | Program output: -92                
Correct output: -37                 | Program output: 96                 
Correct output: -62                 | Program output: 29                 
Correct output: -100                | Program output: 16                 
Correct output: -61                 | Program output: 13                 
Correct output: -20                 | Program output: 14                 
Correct output: -51                 | Program output: -36                
Correct output: -61                 | Program output: -60                
Correct output: -44                 | Program output: -44                
Correct output: -75                 | Program output: -42                
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: -18                
Correct output: -91                 | Program output: -91                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: 13                 
Correct output: -80                 | Program output: -63                
Correct output: -65                 | Program output: 0                  
Correct output: -88                 | Program output: 91                 
Correct output: -95                 | Program output: -9                 
Correct output: -49                 | Program output: -49                
Correct output: -81                 | Program output: -81                
Correct output: -34                 | Program output: -33                
Correct output: -38                 | Program output: -6                 
Correct output: -55                 | Program output: 8                  
Correct output: -62                 | Program output: 43                 
Correct output: -98                 | Program output: 21                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -67                
Correct output: -97                 | Program output: 2                  
Correct output: -68                 | Program output: 67                 
Correct output: -75                 | Program output: -75                
Correct output: -55                 | Program output: -9                 
Correct output: -57                 | Program output: -57                
Correct output: -78                 | Program output: 41                 
Correct output: -43                 | Program output: -43                
Correct output: -29                 | Program output: 34                 
Correct output: -58                 | Program output: 80                 
Correct output: -66                 | Program output: 56                 
Correct output: -68                 | Program output: 97                 
Correct output: -39                 | Program output: -39                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -19                
Correct output: -99                 | Program output: 58                 
Correct output: -81                 | Program output: -30                
Correct output: -96                 | Program output: 47                 
Correct output: -60                 | Program output: -28                
Correct output: 2                   | Program output: 17                 
Correct output: -60                 | Program output: -26                
Correct output: -61                 | Program output: 79                 
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: 66                 
Correct output: -75                 | Program output: 50                 
Correct output: -73                 | Program output: -73                
Correct output: -75                 | Program output: 52                 
Correct output: -67                 | Program output: 50                 
Correct output: -42                 | Program output: 79                 
Correct output: -32                 | Program output: -32                
Correct output: -89                 | Program output: 9                  
Correct output: -50                 | Program output: 64                 
Correct output: -62                 | Program output: 34                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 1, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer})
Lexicase best program: (integer_div exec_yankdup boolean_eq integer_eq integer_empty exec_empty exec_swap (exec_pop (integer_yankdup) integer_gte) (in4) integer_div integer_lte integer_lt boolean_pop print_integer)
Lexicase best errors: [0 1 1 1 0 0 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 20
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 1, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer})
Zero cases best program: (integer_div exec_yankdup boolean_eq integer_eq integer_empty exec_empty exec_swap (exec_pop (integer_yankdup) integer_gte) (in4) integer_div integer_lte integer_lt boolean_pop print_integer)
Zero cases best errors: [0 1 1 1 0 0 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 20
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (297 203 583 210 677 297 169 206 212 297)
Population mean number of elite cases: 3.15
Count of perfect (error zero) individuals by case: (297 203 583 210 677 297 169 206 212 297)
Population mean number of perfect (error zero) cases: 3.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 2, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 1, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer})
Best program: (integer_div exec_yankdup boolean_eq integer_eq integer_empty exec_empty exec_swap (exec_pop (integer_yankdup) integer_gte) (in4) integer_div integer_lte integer_lt boolean_pop print_integer)
Errors: [0 1 1 1 0 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 16
Size: 20
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 6.849
Median total errors in population: 6
Error averages by case: (0.703 0.797 0.417 0.79 0.323 0.703 0.831 0.794 0.788 0.703)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.512
Average program size in population (points): 69.619
Average percent parens in population: 0.213
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9725
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 59
Genome diversity (% unique genomes):	 0.697
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.678
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1332207
--- Timings ---
Current time: 1559583080711 milliseconds
Total Time:           8.8 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         5.2 seconds, 58.5%
Fitness Testing:      2.9 seconds, 32.7%
Report:               0.7 seconds,  7.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -94                 | Program output: -94                
Correct output: -47                 | Program output: -13                
Correct output: -80                 | Program output: 65                 
Correct output: 0                   | Program output: 79                 
Correct output: 28                  | Program output: 28                 
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: 6                  
Correct output: 70                  | Program output: 70                 
Correct output: -43                 | Program output: -43                
Correct output: 55                  | Program output: 55                 
Correct output: -87                 | Program output: -87                
Correct output: 88                  | Program output: 88                 
Correct output: -73                 | Program output: -73                
Correct output: 28                  | Program output: 28                 
Correct output: 18                  | Program output: 18                 
Correct output: 7                   | Program output: 50                 
Correct output: 14                  | Program output: 14                 
Correct output: 33                  | Program output: 42                 
Correct output: 60                  | Program output: 67                 
Correct output: 43                  | Program output: 75                 
Correct output: 9                   | Program output: 91                 
Correct output: 39                  | Program output: 83                 
Correct output: 14                  | Program output: 42                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 87                 
Correct output: 8                   | Program output: 51                 
Correct output: 35                  | Program output: 41                 
Correct output: 11                  | Program output: 69                 
Correct output: 50                  | Program output: 91                 
Correct output: 3                   | Program output: 90                 
Correct output: 3                   | Program output: 55                 
Correct output: 41                  | Program output: 41                 
Correct output: 31                  | Program output: 50                 
Correct output: 34                  | Program output: 74                 
Correct output: -92                 | Program output: 89                 
Correct output: -37                 | Program output: -37                
Correct output: -62                 | Program output: 43                 
Correct output: -100                | Program output: -100               
Correct output: -61                 | Program output: -61                
Correct output: -20                 | Program output: 9                  
Correct output: -51                 | Program output: -43                
Correct output: -61                 | Program output: 71                 
Correct output: -44                 | Program output: 10                 
Correct output: -75                 | Program output: 22                 
Correct output: -85                 | Program output: 76                 
Correct output: -97                 | Program output: -29                
Correct output: -91                 | Program output: -65                
Correct output: -4                  | Program output: 50                 
Correct output: -89                 | Program output: -89                
Correct output: -80                 | Program output: 40                 
Correct output: -65                 | Program output: 25                 
Correct output: -88                 | Program output: -85                
Correct output: -95                 | Program output: -80                
Correct output: -49                 | Program output: 5                  
Correct output: -81                 | Program output: 57                 
Correct output: -34                 | Program output: 60                 
Correct output: -38                 | Program output: 8                  
Correct output: -55                 | Program output: -55                
Correct output: -62                 | Program output: -62                
Correct output: -98                 | Program output: -98                
Correct output: -71                 | Program output: 51                 
Correct output: -97                 | Program output: -16                
Correct output: -97                 | Program output: -67                
Correct output: -68                 | Program output: 77                 
Correct output: -75                 | Program output: 16                 
Correct output: -55                 | Program output: 25                 
Correct output: -57                 | Program output: 0                  
Correct output: -78                 | Program output: 96                 
Correct output: -43                 | Program output: -11                
Correct output: -29                 | Program output: 9                  
Correct output: -58                 | Program output: 96                 
Correct output: -66                 | Program output: -66                
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 65                 
Correct output: -55                 | Program output: -23                
Correct output: -90                 | Program output: -45                
Correct output: -99                 | Program output: 32                 
Correct output: -81                 | Program output: 3                  
Correct output: -96                 | Program output: 84                 
Correct output: -60                 | Program output: -60                
Correct output: 2                   | Program output: 60                 
Correct output: -60                 | Program output: 6                  
Correct output: -61                 | Program output: 86                 
Correct output: -97                 | Program output: 28                 
Correct output: -88                 | Program output: -88                
Correct output: -75                 | Program output: 93                 
Correct output: -73                 | Program output: -21                
Correct output: -75                 | Program output: 2                  
Correct output: -67                 | Program output: -67                
Correct output: -42                 | Program output: 80                 
Correct output: -32                 | Program output: 41                 
Correct output: -89                 | Program output: 99                 
Correct output: -50                 | Program output: 68                 
Correct output: -62                 | Program output: -62                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction 16} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_and} {:close 2, :instruction print_boolean} {:close 1, :instruction tag_boolean_986} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_gt})
Lexicase best program: (exec_s_when_autoconstructing (boolean_or) (boolean_pop boolean_dup exec_do*times (boolean_dup_items exec_when (boolean_yank boolean_invert_second_then_and integer_div boolean_frominteger) in3 integer_dec integer_add)) (integer_add exec_shove (boolean_invert_second_then_and boolean_eq in3 print_integer boolean_and) integer_dup_items exec_eq) exec_do*while (boolean_yankdup exec_y_when_autoconstructing (integer_sub exec_rot (integer_pop 16) (exec_yank) (exec_eq exec_shove () integer_mod boolean_yank boolean_xor boolean_dup_items) exec_swap (integer_gte boolean_not integer_rot) (boolean_rot boolean_dup_times exec_do*times (boolean_or boolean_frominteger exec_if (boolean_and print_boolean) () tag_boolean_986) integer_sub) integer_rot integer_flush integer_dup integer_dup boolean_dup_items in3 integer_fromboolean exec_yankdup print_integer) in3 boolean_frominteger boolean_not integer_max exec_dup_items in2) boolean_dup_items exec_dup_times () integer_gt)
Lexicase best errors: [0 1 0 1 1 0 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 88
Percent parens: 0.216
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction 16} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_and} {:close 2, :instruction print_boolean} {:close 1, :instruction tag_boolean_986} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_gt})
Zero cases best program: (exec_s_when_autoconstructing (boolean_or) (boolean_pop boolean_dup exec_do*times (boolean_dup_items exec_when (boolean_yank boolean_invert_second_then_and integer_div boolean_frominteger) in3 integer_dec integer_add)) (integer_add exec_shove (boolean_invert_second_then_and boolean_eq in3 print_integer boolean_and) integer_dup_items exec_eq) exec_do*while (boolean_yankdup exec_y_when_autoconstructing (integer_sub exec_rot (integer_pop 16) (exec_yank) (exec_eq exec_shove () integer_mod boolean_yank boolean_xor boolean_dup_items) exec_swap (integer_gte boolean_not integer_rot) (boolean_rot boolean_dup_times exec_do*times (boolean_or boolean_frominteger exec_if (boolean_and print_boolean) () tag_boolean_986) integer_sub) integer_rot integer_flush integer_dup integer_dup boolean_dup_items in3 integer_fromboolean exec_yankdup print_integer) in3 boolean_frominteger boolean_not integer_max exec_dup_items in2) boolean_dup_items exec_dup_times () integer_gt)
Zero cases best errors: [0 1 0 1 1 0 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 88
Percent parens: 0.216
--- Lexicase Population Statistics ---
Count of elite individuals by case: (622 552 198 306 247 199 120 869 198 248)
Population mean number of elite cases: 3.56
Count of perfect (error zero) individuals by case: (622 552 198 306 247 199 120 869 198 248)
Population mean number of perfect (error zero) cases: 3.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 2, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq})
Best program: (boolean_not exec_eq integer_fromboolean boolean_yank exec_dup_items integer_yank boolean_pop integer_dup_items boolean_dup_times integer_fromboolean exec_do*count (in3 integer_mult) exec_rot (boolean_and exec_empty integer_eq) () (print_integer boolean_and) boolean_dup exec_k_when_autoconstructing (integer_fromboolean integer_gt integer_flush boolean_dup_items boolean_not in4 exec_k_when_autoconstructing (boolean_eq) ()) ())
Errors: [0 1 0 1 1 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 29
Size: 38
Percent parens: 0.237
--- Population Statistics ---
Average total errors in population: 6.441
Median total errors in population: 6
Error averages by case: (0.378 0.448 0.802 0.694 0.753 0.801 0.88 0.131 0.802 0.752)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.41
Average program size in population (points): 63.244
Average percent parens in population: 0.213
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.44025
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 50
Genome diversity (% unique genomes):	 0.735
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.714
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1715542
--- Timings ---
Current time: 1559583083617 milliseconds
Total Time:          11.7 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         7.4 seconds, 63.2%
Fitness Testing:      3.3 seconds, 28.5%
Report:               0.9 seconds,  7.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -94                 | Program output: -94                
Correct output: -47                 | Program output: -13                
Correct output: -80                 | Program output: 65                 
Correct output: 0                   | Program output: 79                 
Correct output: 28                  | Program output: 28                 
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: 6                  
Correct output: 70                  | Program output: 70                 
Correct output: -43                 | Program output: -43                
Correct output: 55                  | Program output: 55                 
Correct output: -87                 | Program output: -87                
Correct output: 88                  | Program output: 88                 
Correct output: -73                 | Program output: -73                
Correct output: 28                  | Program output: 28                 
Correct output: 18                  | Program output: 18                 
Correct output: 7                   | Program output: 50                 
Correct output: 14                  | Program output: 14                 
Correct output: 33                  | Program output: 42                 
Correct output: 60                  | Program output: 67                 
Correct output: 43                  | Program output: 75                 
Correct output: 9                   | Program output: 91                 
Correct output: 39                  | Program output: 83                 
Correct output: 14                  | Program output: 42                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 87                 
Correct output: 8                   | Program output: 51                 
Correct output: 35                  | Program output: 41                 
Correct output: 11                  | Program output: 69                 
Correct output: 50                  | Program output: 91                 
Correct output: 3                   | Program output: 90                 
Correct output: 3                   | Program output: 55                 
Correct output: 41                  | Program output: 41                 
Correct output: 31                  | Program output: 50                 
Correct output: 34                  | Program output: 74                 
Correct output: -92                 | Program output: 89                 
Correct output: -37                 | Program output: -37                
Correct output: -62                 | Program output: 43                 
Correct output: -100                | Program output: -100               
Correct output: -61                 | Program output: -61                
Correct output: -20                 | Program output: 9                  
Correct output: -51                 | Program output: -43                
Correct output: -61                 | Program output: 71                 
Correct output: -44                 | Program output: 10                 
Correct output: -75                 | Program output: 22                 
Correct output: -85                 | Program output: 76                 
Correct output: -97                 | Program output: -29                
Correct output: -91                 | Program output: -65                
Correct output: -4                  | Program output: 50                 
Correct output: -89                 | Program output: -89                
Correct output: -80                 | Program output: 40                 
Correct output: -65                 | Program output: 25                 
Correct output: -88                 | Program output: -85                
Correct output: -95                 | Program output: -80                
Correct output: -49                 | Program output: 5                  
Correct output: -81                 | Program output: 57                 
Correct output: -34                 | Program output: 60                 
Correct output: -38                 | Program output: 8                  
Correct output: -55                 | Program output: -55                
Correct output: -62                 | Program output: -62                
Correct output: -98                 | Program output: -98                
Correct output: -71                 | Program output: 51                 
Correct output: -97                 | Program output: -16                
Correct output: -97                 | Program output: -67                
Correct output: -68                 | Program output: 77                 
Correct output: -75                 | Program output: 16                 
Correct output: -55                 | Program output: 25                 
Correct output: -57                 | Program output: 0                  
Correct output: -78                 | Program output: 96                 
Correct output: -43                 | Program output: -11                
Correct output: -29                 | Program output: 9                  
Correct output: -58                 | Program output: 96                 
Correct output: -66                 | Program output: -66                
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 65                 
Correct output: -55                 | Program output: -23                
Correct output: -90                 | Program output: -45                
Correct output: -99                 | Program output: 32                 
Correct output: -81                 | Program output: 3                  
Correct output: -96                 | Program output: 84                 
Correct output: -60                 | Program output: -60                
Correct output: 2                   | Program output: 60                 
Correct output: -60                 | Program output: 6                  
Correct output: -61                 | Program output: 86                 
Correct output: -97                 | Program output: 28                 
Correct output: -88                 | Program output: -88                
Correct output: -75                 | Program output: 93                 
Correct output: -73                 | Program output: -21                
Correct output: -75                 | Program output: 2                  
Correct output: -67                 | Program output: -67                
Correct output: -42                 | Program output: 80                 
Correct output: -32                 | Program output: 41                 
Correct output: -89                 | Program output: 99                 
Correct output: -50                 | Program output: 68                 
Correct output: -62                 | Program output: -62                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction 16} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_while} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction 62} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_if} {:close 1, :instruction print_exec} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction tagged_329} {:close 0, :instruction integer_dup})
Lexicase best program: (integer_inc boolean_yankdup boolean_and integer_max exec_do*range () boolean_pop integer_min exec_do*range (exec_s_when_autoconstructing (boolean_eq integer_swap exec_shove (exec_eq integer_empty integer_div integer_stackdepth exec_do*while (integer_empty) boolean_invert_second_then_and boolean_eq in3 print_integer boolean_and) integer_dup_items exec_eq) (in3 boolean_yankdup exec_y_when_autoconstructing (integer_sub exec_rot (integer_pop 16) (exec_stackdepth) (exec_if () (exec_y (integer_flush) exec_y_when_autoconstructing (exec_y_when_autoconstructing (exec_do*range (exec_dup_items exec_while () print_exec (boolean_dup_items) boolean_shove integer_sub) integer_rot integer_flush exec_dup (integer_dup 62 integer_dec boolean_frominteger boolean_yankdup integer_gte exec_if (boolean_and exec_flush integer_yank boolean_invert_second_then_and exec_flush exec_dup (boolean_or exec_if (print_exec () integer_mod boolean_invert_second_then_and boolean_yank tagged_329 integer_dup) ())) ()))))))) ()))
Lexicase best errors: [1 1 1 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 96
Percent parens: 0.281
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction 16} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_if} {:close 0, :instruction exec_y} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_while} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction 62} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_if} {:close 1, :instruction print_exec} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction tagged_329} {:close 0, :instruction integer_dup})
Zero cases best program: (integer_inc boolean_yankdup boolean_and integer_max exec_do*range () boolean_pop integer_min exec_do*range (exec_s_when_autoconstructing (boolean_eq integer_swap exec_shove (exec_eq integer_empty integer_div integer_stackdepth exec_do*while (integer_empty) boolean_invert_second_then_and boolean_eq in3 print_integer boolean_and) integer_dup_items exec_eq) (in3 boolean_yankdup exec_y_when_autoconstructing (integer_sub exec_rot (integer_pop 16) (exec_stackdepth) (exec_if () (exec_y (integer_flush) exec_y_when_autoconstructing (exec_y_when_autoconstructing (exec_do*range (exec_dup_items exec_while () print_exec (boolean_dup_items) boolean_shove integer_sub) integer_rot integer_flush exec_dup (integer_dup 62 integer_dec boolean_frominteger boolean_yankdup integer_gte exec_if (boolean_and exec_flush integer_yank boolean_invert_second_then_and exec_flush exec_dup (boolean_or exec_if (print_exec () integer_mod boolean_invert_second_then_and boolean_yank tagged_329 integer_dup) ())) ()))))))) ()))
Zero cases best errors: [1 1 1 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 96
Percent parens: 0.281
--- Lexicase Population Statistics ---
Count of elite individuals by case: (254 186 186 302 305 302 302 186 302 305)
Population mean number of elite cases: 2.63
Count of perfect (error zero) individuals by case: (254 186 186 302 305 302 302 186 302 305)
Population mean number of perfect (error zero) cases: 2.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction tagged_807} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction -60} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_empty})
Best program: (exec_y_when_autoconstructing (tagged_807) integer_shove boolean_empty boolean_invert_second_then_and boolean_yank integer_eq exec_do*count (boolean_dup_items in3) integer_dup boolean_pop exec_do*while (-60 exec_yank integer_dup boolean_invert_first_then_and print_integer integer_flush) boolean_dup_times boolean_xor boolean_stackdepth exec_do*times (integer_pop boolean_shove boolean_or integer_dup) integer_rot boolean_frominteger exec_yankdup print_boolean integer_empty)
Errors: [1 1 1 0 0 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 32
Size: 37
Percent parens: 0.135
--- Population Statistics ---
Average total errors in population: 7.37
Median total errors in population: 9
Error averages by case: (0.746 0.814 0.814 0.698 0.695 0.698 0.698 0.814 0.698 0.695)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.368
Average program size in population (points): 58.27
Average percent parens in population: 0.215
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 5.9455
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 52
Genome diversity (% unique genomes):	 0.736
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.717
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2112406
--- Timings ---
Current time: 1559583086537 milliseconds
Total Time:          14.6 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         9.6 seconds, 65.9%
Fitness Testing:      3.8 seconds, 25.8%
Report:               1.1 seconds,  7.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -94                 | Program output: 91                 
Correct output: -47                 | Program output: -13                
Correct output: -80                 | Program output: 65                 
Correct output: 0                   | Program output: 79                 
Correct output: 28                  | Program output: 28                 
Correct output: -14                 | Program output: 8                  
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: 70                  | Program output: 81                 
Correct output: -43                 | Program output: -43                
Correct output: 55                  | Program output: 55                 
Correct output: -87                 | Program output: -87                
Correct output: 88                  | Program output: 88                 
Correct output: -73                 | Program output: -73                
Correct output: 28                  | Program output: 28                 
Correct output: 18                  | Program output: 79                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 85                 
Correct output: 33                  | Program output: 45                 
Correct output: 60                  | Program output: 87                 
Correct output: 43                  | Program output: 43                 
Correct output: 9                   | Program output: 9                  
Correct output: 39                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 0                   | Program output: 53                 
Correct output: 2                   | Program output: 25                 
Correct output: 8                   | Program output: 57                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 50                  | Program output: 64                 
Correct output: 3                   | Program output: 25                 
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 50                 
Correct output: 31                  | Program output: 66                 
Correct output: 34                  | Program output: 95                 
Correct output: -92                 | Program output: 83                 
Correct output: -37                 | Program output: -28                
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: 19                 
Correct output: -61                 | Program output: 1                  
Correct output: -20                 | Program output: -20                
Correct output: -51                 | Program output: -51                
Correct output: -61                 | Program output: -8                 
Correct output: -44                 | Program output: 73                 
Correct output: -75                 | Program output: 78                 
Correct output: -85                 | Program output: -52                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 65                 
Correct output: -4                  | Program output: 41                 
Correct output: -89                 | Program output: 12                 
Correct output: -80                 | Program output: -80                
Correct output: -65                 | Program output: -65                
Correct output: -88                 | Program output: -73                
Correct output: -95                 | Program output: -95                
Correct output: -49                 | Program output: 67                 
Correct output: -81                 | Program output: -47                
Correct output: -34                 | Program output: -34                
Correct output: -38                 | Program output: -37                
Correct output: -55                 | Program output: 20                 
Correct output: -62                 | Program output: 92                 
Correct output: -98                 | Program output: 53                 
Correct output: -71                 | Program output: 79                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -75                 | Program output: 83                 
Correct output: -55                 | Program output: 55                 
Correct output: -57                 | Program output: -23                
Correct output: -78                 | Program output: -78                
Correct output: -43                 | Program output: 40                 
Correct output: -29                 | Program output: -8                 
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -13                
Correct output: -68                 | Program output: 19                 
Correct output: -39                 | Program output: 15                 
Correct output: -55                 | Program output: -26                
Correct output: -90                 | Program output: 87                 
Correct output: -99                 | Program output: 17                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: 21                 
Correct output: -60                 | Program output: -12                
Correct output: 2                   | Program output: 34                 
Correct output: -60                 | Program output: 65                 
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -7                 
Correct output: -88                 | Program output: -26                
Correct output: -75                 | Program output: 97                 
Correct output: -73                 | Program output: 25                 
Correct output: -75                 | Program output: -75                
Correct output: -67                 | Program output: -3                 
Correct output: -42                 | Program output: -42                
Correct output: -32                 | Program output: 64                 
Correct output: -89                 | Program output: 39                 
Correct output: -50                 | Program output: -50                
Correct output: -62                 | Program output: -51                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gt} {:close 1, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_boolean_580} {:close 0, :instruction tag_exec_217} {:close 1, :instruction exec_do*times} {:close 1, :instruction tag_integer_203} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_integer_670} {:close 1, :instruction boolean_dup_items})
Lexicase best program: (integer_gt exec_if () (integer_eq in1) exec_noop boolean_and integer_gt exec_dup () print_integer exec_while () boolean_yankdup integer_shove exec_s (integer_add integer_stackdepth tag_boolean_580 tag_exec_217 (exec_do*times () tag_integer_203) integer_mult) (exec_do*range (integer_min integer_mult integer_mult)) (integer_fromboolean exec_eq exec_dup_times (boolean_stackdepth tag_integer_670 boolean_dup_items)))
Lexicase best errors: [1 1 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 42
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gt} {:close 1, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_boolean_580} {:close 0, :instruction tag_exec_217} {:close 1, :instruction exec_do*times} {:close 1, :instruction tag_integer_203} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_integer_670} {:close 1, :instruction boolean_dup_items})
Zero cases best program: (integer_gt exec_if () (integer_eq in1) exec_noop boolean_and integer_gt exec_dup () print_integer exec_while () boolean_yankdup integer_shove exec_s (integer_add integer_stackdepth tag_boolean_580 tag_exec_217 (exec_do*times () tag_integer_203) integer_mult) (exec_do*range (integer_min integer_mult integer_mult)) (integer_fromboolean exec_eq exec_dup_times (boolean_stackdepth tag_integer_670 boolean_dup_items)))
Zero cases best errors: [1 1 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 42
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (278 1000 883 878 103 277 104 103 104 276)
Population mean number of elite cases: 4.01
Count of perfect (error zero) individuals by case: (278 0 883 878 103 277 104 103 104 276)
Population mean number of perfect (error zero) cases: 3.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 2, :instruction in1} {:close 0, :instruction print_integer} {:close 2, :instruction exec_do*while} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction print_newline} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction -78} {:close 1, :instruction integer_pop} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 1, :instruction exec_rot} {:close 1, :instruction print_exec} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_sub} {:close 0, :instruction print_exec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction tag_exec_826} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction in2})
Best program: (integer_div exec_yankdup boolean_eq integer_eq integer_empty integer_dup_times in2 in4 exec_swap (in1) () print_integer exec_do*while () exec_swap () (exec_when (exec_do*count (boolean_flush) boolean_empty integer_dec boolean_rot) boolean_invert_second_then_and integer_dec integer_flush boolean_empty exec_flush) exec_yank exec_do*range (integer_gte exec_shove (integer_flush integer_fromboolean) integer_stackdepth print_integer boolean_empty exec_stackdepth) print_newline exec_y_when_autoconstructing () integer_empty boolean_and integer_stackdepth integer_dup_times exec_dup_items integer_max boolean_dup_items exec_eq exec_s_when_autoconstructing (boolean_and integer_fromboolean -78 integer_pop) (print_newline exec_yankdup integer_eq integer_rot integer_min exec_k (exec_stackdepth) (integer_empty) integer_dup_items exec_do*range (exec_rot (exec_shove () exec_if (exec_rot () (print_exec () in3 boolean_swap integer_lte boolean_empty exec_do*count (exec_k () (integer_max boolean_and integer_mult integer_dup integer_sub) print_exec (exec_when (boolean_swap boolean_stackdepth) boolean_shove boolean_or integer_yankdup exec_shove (integer_max) boolean_dup_times) integer_yankdup boolean_or) boolean_not tag_exec_826 (print_boolean integer_eq in2)) ()) ()) () ())) ())
Errors: [1 1 0 0 0 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 92
Size: 126
Percent parens: 0.270
--- Population Statistics ---
Average total errors in population: 6.994
Median total errors in population: 8
Error averages by case: (0.722 1.0 0.117 0.122 0.897 0.723 0.896 0.897 0.896 0.724)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.921
Average program size in population (points): 53.187
Average percent parens in population: 0.209
Minimum age in population: 5.0
Maximum age in population: 9.1875
Average age in population: 7.40125
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 68
Genome diversity (% unique genomes):	 0.731
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 83
Syntactic diversity (% unique Push programs):	 0.712
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2481876
--- Timings ---
Current time: 1559583089522 milliseconds
Total Time:          17.5 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.9 seconds, 68.0%
Fitness Testing:      4.1 seconds, 23.7%
Report:               1.4 seconds,  7.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -94                 | Program output: -94                
Correct output: -47                 | Program output: -13                
Correct output: -80                 | Program output: 65                 
Correct output: 0                   | Program output: 79                 
Correct output: 28                  | Program output: 74                 
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -12                
Correct output: -68                 | Program output: -68                
Correct output: 70                  | Program output: 70                 
Correct output: -43                 | Program output: -43                
Correct output: 55                  | Program output: 55                 
Correct output: -87                 | Program output: -87                
Correct output: 88                  | Program output: 88                 
Correct output: -73                 | Program output: -73                
Correct output: 28                  | Program output: 28                 
Correct output: 18                  | Program output: 66                 
Correct output: 7                   | Program output: 21                 
Correct output: 14                  | Program output: 14                 
Correct output: 33                  | Program output: 33                 
Correct output: 60                  | Program output: 60                 
Correct output: 43                  | Program output: 73                 
Correct output: 9                   | Program output: 60                 
Correct output: 39                  | Program output: 56                 
Correct output: 14                  | Program output: 88                 
Correct output: 0                   | Program output: 22                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 76                 
Correct output: 50                  | Program output: 55                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 46                 
Correct output: 41                  | Program output: 84                 
Correct output: 31                  | Program output: 72                 
Correct output: 34                  | Program output: 34                 
Correct output: -92                 | Program output: -92                
Correct output: -37                 | Program output: 96                 
Correct output: -62                 | Program output: 29                 
Correct output: -100                | Program output: 16                 
Correct output: -61                 | Program output: 13                 
Correct output: -20                 | Program output: 14                 
Correct output: -51                 | Program output: -36                
Correct output: -61                 | Program output: -60                
Correct output: -44                 | Program output: -44                
Correct output: -75                 | Program output: -42                
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: -18                
Correct output: -91                 | Program output: -91                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: 13                 
Correct output: -80                 | Program output: -63                
Correct output: -65                 | Program output: 
0                 
Correct output: -88                 | Program output: 91                 
Correct output: -95                 | Program output: -9                 
Correct output: -49                 | Program output: -49                
Correct output: -81                 | Program output: -81                
Correct output: -34                 | Program output: -33                
Correct output: -38                 | Program output: -6                 
Correct output: -55                 | Program output: 8                  
Correct output: -62                 | Program output: 43                 
Correct output: -98                 | Program output: 21                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -67                
Correct output: -97                 | Program output: 2                  
Correct output: -68                 | Program output: 67                 
Correct output: -75                 | Program output: -75                
Correct output: -55                 | Program output: 
-9                
Correct output: -57                 | Program output: -57                
Correct output: -78                 | Program output: 41                 
Correct output: -43                 | Program output: -43                
Correct output: -29                 | Program output: 34                 
Correct output: -58                 | Program output: 80                 
Correct output: -66                 | Program output: 56                 
Correct output: -68                 | Program output: 97                 
Correct output: -39                 | Program output: -39                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -19                
Correct output: -99                 | Program output: 58                 
Correct output: -81                 | Program output: -30                
Correct output: -96                 | Program output: 47                 
Correct output: -60                 | Program output: -28                
Correct output: 2                   | Program output: 17                 
Correct output: -60                 | Program output: -26                
Correct output: -61                 | Program output: 79                 
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: 66                 
Correct output: -75                 | Program output: 50                 
Correct output: -73                 | Program output: -73                
Correct output: -75                 | Program output: 52                 
Correct output: -67                 | Program output: 50                 
Correct output: -42                 | Program output: 79                 
Correct output: -32                 | Program output: -32                
Correct output: -89                 | Program output: 9                  
Correct output: -50                 | Program output: 64                 
Correct output: -62                 | Program output: 34                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*times} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_583} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_375} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_yankdup} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (exec_do*times (integer_mod) exec_eq exec_k (integer_dup_times boolean_and integer_dup_times) (in2 exec_do*while (boolean_rot) boolean_dup_times boolean_swap) boolean_not boolean_pop exec_yankdup integer_dup_times exec_k_when_autoconstructing (tagged_583 exec_yankdup) (boolean_swap exec_do*while (in3) in4 boolean_eq) tagged_375 print_integer integer_mod integer_flush integer_yankdup exec_eq integer_yank boolean_yankdup boolean_dup_items boolean_and integer_mult exec_dup_items print_integer exec_pop (integer_inc integer_gte integer_yankdup) integer_lte integer_gt print_integer integer_add boolean_invert_second_then_and)
Lexicase best errors: [0 0 0 1 1 1 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 55
Percent parens: 0.164
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*times} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_583} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_375} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_yankdup} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (exec_do*times (integer_mod) exec_eq exec_k (integer_dup_times boolean_and integer_dup_times) (in2 exec_do*while (boolean_rot) boolean_dup_times boolean_swap) boolean_not boolean_pop exec_yankdup integer_dup_times exec_k_when_autoconstructing (tagged_583 exec_yankdup) (boolean_swap exec_do*while (in3) in4 boolean_eq) tagged_375 print_integer integer_mod integer_flush integer_yankdup exec_eq integer_yank boolean_yankdup boolean_dup_items boolean_and integer_mult exec_dup_items print_integer exec_pop (integer_inc integer_gte integer_yankdup) integer_lte integer_gt print_integer integer_add boolean_invert_second_then_and)
Zero cases best errors: [0 0 0 1 1 1 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 55
Percent parens: 0.164
--- Lexicase Population Statistics ---
Count of elite individuals by case: (377 884 377 509 507 1 1000 884 1000 377)
Population mean number of elite cases: 5.92
Count of perfect (error zero) individuals by case: (377 884 377 509 507 1 0 884 0 377)
Population mean number of perfect (error zero) cases: 3.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_583} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_375} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_yankdup} {:close 3, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction 62} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_if} {:close 1, :instruction print_exec} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction tagged_329} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yank} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_eq})
Best program: (boolean_not exec_eq integer_fromboolean boolean_yank exec_dup_items integer_yank boolean_pop integer_dup_items boolean_dup_times integer_fromboolean exec_do*count (in3 boolean_or boolean_pop) boolean_dup_times boolean_swap boolean_not boolean_pop exec_yankdup integer_dup_times exec_k_when_autoconstructing (tagged_583 exec_yankdup) (boolean_swap exec_do*while (boolean_dup_items) in4 boolean_eq) tagged_375 print_integer integer_mod integer_flush integer_yankdup exec_eq integer_yank exec_dup (exec_y_when_autoconstructing ()) exec_yankdup integer_empty boolean_yankdup integer_eq 62 boolean_invert_first_then_and boolean_frominteger boolean_yankdup integer_gte exec_if (boolean_and exec_flush integer_yank boolean_invert_second_then_and exec_flush exec_dup (boolean_or exec_if (print_exec () integer_mod boolean_invert_second_then_and boolean_yank tagged_329 integer_dup exec_yankdup) (integer_fromboolean integer_sub integer_lte print_boolean) boolean_invert_first_then_and) integer_add) (integer_swap exec_eq integer_pop) print_newline integer_empty integer_inc integer_yank boolean_not integer_mod integer_shove exec_k (integer_stackdepth) (exec_dup_times (boolean_stackdepth exec_k_when_autoconstructing () (boolean_flush integer_shove) in2 integer_swap integer_eq)))
Errors: [0 0 0 1 1 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 88
Size: 106
Percent parens: 0.170
--- Population Statistics ---
Average total errors in population: 6.084
Median total errors in population: 6
Error averages by case: (0.623 0.116 0.623 0.491 0.493 0.999 1.0 0.116 1.0 0.623)
Error minima by case: (0 0 0 0 0 0 1 0 1 0)
Average genome size in population (length): 34.823
Average program size in population (points): 45.313
Average percent parens in population: 0.215
Minimum age in population: 6.5
Maximum age in population: 10.875
Average age in population: 8.899875
Median age in population: 8.9375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 55
Genome diversity (% unique genomes):	 0.586
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 67
Syntactic diversity (% unique Push programs):	 0.567
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2778780
--- Timings ---
Current time: 1559583092067 milliseconds
Total Time:          20.1 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.8 seconds, 68.9%
Fitness Testing:      4.4 seconds, 22.1%
Report:               1.7 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -94                 | Program output: 91                 
Correct output: -47                 | Program output: -13                
Correct output: -80                 | Program output: 65                 
Correct output: 0                   | Program output: 79                 
Correct output: 28                  | Program output: 28                 
Correct output: -14                 | Program output: 8                  
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: 70                  | Program output: 81                 
Correct output: -43                 | Program output: -43                
Correct output: 55                  | Program output: 55                 
Correct output: -87                 | Program output: -87                
Correct output: 88                  | Program output: 88                 
Correct output: -73                 | Program output: -73                
Correct output: 28                  | Program output: 28                 
Correct output: 18                  | Program output: 79                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 85                 
Correct output: 33                  | Program output: 45                 
Correct output: 60                  | Program output: 87                 
Correct output: 43                  | Program output: 43                 
Correct output: 9                   | Program output: 9                  
Correct output: 39                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 0                   | Program output: 53                 
Correct output: 2                   | Program output: 25                 
Correct output: 8                   | Program output: 57                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 50                  | Program output: 64                 
Correct output: 3                   | Program output: 25                 
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 50                 
Correct output: 31                  | Program output: 66                 
Correct output: 34                  | Program output: 95                 
Correct output: -92                 | Program output: 83                 
Correct output: -37                 | Program output: -28                
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: 19                 
Correct output: -61                 | Program output: 1                  
Correct output: -20                 | Program output: -20                
Correct output: -51                 | Program output: -51                
Correct output: -61                 | Program output: -8                 
Correct output: -44                 | Program output: 73                 
Correct output: -75                 | Program output: 78                 
Correct output: -85                 | Program output: -52                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 65                 
Correct output: -4                  | Program output: 41                 
Correct output: -89                 | Program output: 12                 
Correct output: -80                 | Program output: -80                
Correct output: -65                 | Program output: -65                
Correct output: -88                 | Program output: -73                
Correct output: -95                 | Program output: -95                
Correct output: -49                 | Program output: 67                 
Correct output: -81                 | Program output: -47                
Correct output: -34                 | Program output: -34                
Correct output: -38                 | Program output: -37                
Correct output: -55                 | Program output: 20                 
Correct output: -62                 | Program output: 92                 
Correct output: -98                 | Program output: 53                 
Correct output: -71                 | Program output: 79                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -75                 | Program output: 83                 
Correct output: -55                 | Program output: 55                 
Correct output: -57                 | Program output: -23                
Correct output: -78                 | Program output: -78                
Correct output: -43                 | Program output: 40                 
Correct output: -29                 | Program output: -8                 
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -13                
Correct output: -68                 | Program output: 19                 
Correct output: -39                 | Program output: 15                 
Correct output: -55                 | Program output: -26                
Correct output: -90                 | Program output: 87                 
Correct output: -99                 | Program output: 17                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: 21                 
Correct output: -60                 | Program output: -12                
Correct output: 2                   | Program output: 34                 
Correct output: -60                 | Program output: 65                 
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -7                 
Correct output: -88                 | Program output: -26                
Correct output: -75                 | Program output: 97                 
Correct output: -73                 | Program output: 25                 
Correct output: -75                 | Program output: -75                
Correct output: -67                 | Program output: -3                 
Correct output: -42                 | Program output: -42                
Correct output: -32                 | Program output: 64                 
Correct output: -89                 | Program output: 39                 
Correct output: -50                 | Program output: -50                
Correct output: -62                 | Program output: -51                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction tagged_481} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction -47} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction 7} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_fromboolean})
Lexicase best program: (boolean_stackdepth exec_do*count (boolean_invert_first_then_and integer_mult) integer_dup integer_shove tagged_481 integer_lte boolean_empty -47 boolean_and boolean_yankdup integer_dup exec_swap (integer_rot 7 boolean_dup) (exec_eq exec_noop integer_add in1 print_integer) exec_y (integer_dup_items exec_flush) boolean_empty integer_dec integer_swap integer_sub integer_fromboolean)
Lexicase best errors: [1 0 0 1 0 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 35
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction tagged_481} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction -47} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction 7} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_fromboolean})
Zero cases best program: (boolean_stackdepth exec_do*count (boolean_invert_first_then_and integer_mult) integer_dup integer_shove tagged_481 integer_lte boolean_empty -47 boolean_and boolean_yankdup integer_dup exec_swap (integer_rot 7 boolean_dup) (exec_eq exec_noop integer_add in1 print_integer) exec_y (integer_dup_items exec_flush) boolean_empty integer_dec integer_swap integer_sub integer_fromboolean)
Zero cases best errors: [1 0 0 1 0 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 35
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 331 334 1 796 465 1 464 336 330)
Population mean number of elite cases: 3.06
Count of perfect (error zero) individuals by case: (1 331 334 1 796 465 1 464 336 330)
Population mean number of perfect (error zero) cases: 3.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction print_integer})
Best program: (boolean_not exec_eq integer_fromboolean boolean_yank exec_dup_items integer_yank boolean_pop integer_dup_items boolean_dup_times integer_dec boolean_yankdup exec_pop () integer_min integer_inc exec_y_when_autoconstructing (boolean_and) exec_while () boolean_dup_items integer_dup_items exec_dup () boolean_rot integer_dup_items in1 print_integer)
Errors: [1 0 0 1 0 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 24
Size: 29
Percent parens: 0.172
--- Population Statistics ---
Average total errors in population: 6.941
Median total errors in population: 7
Error averages by case: (0.999 0.669 0.666 0.999 0.204 0.535 0.999 0.536 0.664 0.67)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.115
Average program size in population (points): 47.542
Average percent parens in population: 0.208
Minimum age in population: 7.5
Maximum age in population: 12.1875
Average age in population: 10.45821875
Median age in population: 10.46875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 55
Genome diversity (% unique genomes):	 0.655
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 76
Syntactic diversity (% unique Push programs):	 0.626
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3070000
--- Timings ---
Current time: 1559583094295 milliseconds
Total Time:          22.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.6 seconds, 69.5%
Fitness Testing:      4.7 seconds, 21.1%
Report:               2.0 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -94                 | Program output: -94                
Correct output: -47                 | Program output: -47                
Correct output: -80                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 28                 
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: 70                  | Program output: 70                 
Correct output: -43                 | Program output: 49                 
Correct output: 55                  | Program output: 55                 
Correct output: -87                 | Program output: -87                
Correct output: 88                  | Program output: 88                 
Correct output: -73                 | Program output: -73                
Correct output: 28                  | Program output: 28                 
Correct output: 18                  | Program output: 22                 
Correct output: 7                   | Program output: 12                 
Correct output: 14                  | Program output: 61                 
Correct output: 33                  | Program output: 69                 
Correct output: 60                  | Program output: 60                 
Correct output: 43                  | Program output: 91                 
Correct output: 9                   | Program output: 43                 
Correct output: 39                  | Program output: 82                 
Correct output: 14                  | Program output: 45                 
Correct output: 0                   | Program output: 53                 
Correct output: 2                   | Program output: 79                 
Correct output: 8                   | Program output: 49                 
Correct output: 35                  | Program output: 48                 
Correct output: 11                  | Program output: 31                 
Correct output: 50                  | Program output: 50                 
Correct output: 3                   | Program output: 15                 
Correct output: 3                   | Program output: 95                 
Correct output: 41                  | Program output: 72                 
Correct output: 31                  | Program output: 31                 
Correct output: 34                  | Program output: 73                 
Correct output: -92                 | Program output: -36                
Correct output: -37                 | Program output: -30                
Correct output: -62                 | Program output: 12                 
Correct output: -100                | Program output: 5                  
Correct output: -61                 | Program output: 62                 
Correct output: -20                 | Program output: -10                
Correct output: -51                 | Program output: 19                 
Correct output: -61                 | Program output: -61                
Correct output: -44                 | Program output: -25                
Correct output: -75                 | Program output: -75                
Correct output: -85                 | Program output: -65                
Correct output: -97                 | Program output: 22                 
Correct output: -91                 | Program output: 16                 
Correct output: -4                  | Program output: 47                 
Correct output: -89                 | Program output: 14                 
Correct output: -80                 | Program output: 81                 
Correct output: -65                 | Program output: -45                
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -27                
Correct output: -49                 | Program output: 81                 
Correct output: -81                 | Program output: 34                 
Correct output: -34                 | Program output: 86                 
Correct output: -38                 | Program output: -38                
Correct output: -55                 | Program output: 4                  
Correct output: -62                 | Program output: 79                 
Correct output: -98                 | Program output: -62                
Correct output: -71                 | Program output: 41                 
Correct output: -97                 | Program output: 19                 
Correct output: -97                 | Program output: 85                 
Correct output: -68                 | Program output: 49                 
Correct output: -75                 | Program output: 83                 
Correct output: -55                 | Program output: -55                
Correct output: -57                 | Program output: 100                
Correct output: -78                 | Program output: -4                 
Correct output: -43                 | Program output: 74                 
Correct output: -29                 | Program output: -29                
Correct output: -58                 | Program output: 64                 
Correct output: -66                 | Program output: -19                
Correct output: -68                 | Program output: 58                 
Correct output: -39                 | Program output: 77                 
Correct output: -55                 | Program output: 93                 
Correct output: -90                 | Program output: -90                
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: 22                 
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: 82                 
Correct output: 2                   | Program output: 2                  
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -58                
Correct output: -97                 | Program output: -51                
Correct output: -88                 | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: 11                 
Correct output: -75                 | Program output: 24                 
Correct output: -67                 | Program output: 61                 
Correct output: -42                 | Program output: -40                
Correct output: -32                 | Program output: 72                 
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: 73                 
Correct output: -62                 | Program output: 68                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 1, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer})
Lexicase best program: (exec_do*times (boolean_and) exec_eq exec_k (integer_dup_times boolean_and integer_dup_times) (in2 in4 exec_empty exec_swap (exec_pop (integer_yankdup) integer_gte) (in4) integer_div integer_lte integer_lt boolean_pop print_integer))
Lexicase best errors: [0 0 0 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 27
Percent parens: 0.259
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 1, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer})
Zero cases best program: (exec_do*times (boolean_and) exec_eq exec_k (integer_dup_times boolean_and integer_dup_times) (in2 in4 exec_empty exec_swap (exec_pop (integer_yankdup) integer_gte) (in4) integer_div integer_lte integer_lt boolean_pop print_integer))
Zero cases best errors: [0 0 0 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 27
Percent parens: 0.259
--- Lexicase Population Statistics ---
Count of elite individuals by case: (901 84 84 336 361 361 84 84 120 901)
Population mean number of elite cases: 3.32
Count of perfect (error zero) individuals by case: (901 84 84 336 361 361 84 84 120 901)
Population mean number of perfect (error zero) cases: 3.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 1, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer})
Best program: (exec_do*times (boolean_and) exec_eq exec_k (integer_dup_times boolean_and integer_dup_times) (in2 in4 exec_empty exec_swap (exec_pop (integer_yankdup) integer_gte) (in4) integer_div integer_lte integer_lt boolean_pop print_integer))
Errors: [0 0 0 1 1 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 20
Size: 27
Percent parens: 0.259
--- Population Statistics ---
Average total errors in population: 6.684
Median total errors in population: 7
Error averages by case: (0.099 0.916 0.916 0.664 0.639 0.639 0.916 0.916 0.88 0.099)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.394
Average program size in population (points): 54.134
Average percent parens in population: 0.242
Minimum age in population: 9.53125
Maximum age in population: 13.5859375
Average age in population: 11.9877109375
Median age in population: 12.046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 136
Genome diversity (% unique genomes):	 0.618
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 139
Syntactic diversity (% unique Push programs):	 0.603
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3382356
--- Timings ---
Current time: 1559583096798 milliseconds
Total Time:          24.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.5 seconds, 70.4%
Fitness Testing:      5.1 seconds, 20.4%
Report:               2.2 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -94                 | Program output: -94                
Correct output: -47                 | Program output: -13                
Correct output: -80                 | Program output: 65                 
Correct output: 0                   | Program output: 79                 
Correct output: 28                  | Program output: 74                 
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -12                
Correct output: -68                 | Program output: -68                
Correct output: 70                  | Program output: 70                 
Correct output: -43                 | Program output: -43                
Correct output: 55                  | Program output: 55                 
Correct output: -87                 | Program output: -87                
Correct output: 88                  | Program output: 88                 
Correct output: -73                 | Program output: -73                
Correct output: 28                  | Program output: 28                 
Correct output: 18                  | Program output: 66                 
Correct output: 7                   | Program output: 21                 
Correct output: 14                  | Program output: 14                 
Correct output: 33                  | Program output: 33                 
Correct output: 60                  | Program output: 60                 
Correct output: 43                  | Program output: 73                 
Correct output: 9                   | Program output: 60                 
Correct output: 39                  | Program output: 56                 
Correct output: 14                  | Program output: 88                 
Correct output: 0                   | Program output: 22                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 76                 
Correct output: 50                  | Program output: 55                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 46                 
Correct output: 41                  | Program output: 84                 
Correct output: 31                  | Program output: 72                 
Correct output: 34                  | Program output: 34                 
Correct output: -92                 | Program output: -92                
Correct output: -37                 | Program output: 96                 
Correct output: -62                 | Program output: 29                 
Correct output: -100                | Program output: 16                 
Correct output: -61                 | Program output: 13                 
Correct output: -20                 | Program output: 14                 
Correct output: -51                 | Program output: -36                
Correct output: -61                 | Program output: -60                
Correct output: -44                 | Program output: -44                
Correct output: -75                 | Program output: -42                
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: -18                
Correct output: -91                 | Program output: -91                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: 13                 
Correct output: -80                 | Program output: -63                
Correct output: -65                 | Program output: 0                  
Correct output: -88                 | Program output: 91                 
Correct output: -95                 | Program output: -9                 
Correct output: -49                 | Program output: -49                
Correct output: -81                 | Program output: -81                
Correct output: -34                 | Program output: -33                
Correct output: -38                 | Program output: -6                 
Correct output: -55                 | Program output: 8                  
Correct output: -62                 | Program output: 43                 
Correct output: -98                 | Program output: 21                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -67                
Correct output: -97                 | Program output: 2                  
Correct output: -68                 | Program output: 67                 
Correct output: -75                 | Program output: -75                
Correct output: -55                 | Program output: -9                 
Correct output: -57                 | Program output: -57                
Correct output: -78                 | Program output: 41                 
Correct output: -43                 | Program output: -43                
Correct output: -29                 | Program output: 34                 
Correct output: -58                 | Program output: 80                 
Correct output: -66                 | Program output: 56                 
Correct output: -68                 | Program output: 97                 
Correct output: -39                 | Program output: -39                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -19                
Correct output: -99                 | Program output: 58                 
Correct output: -81                 | Program output: -30                
Correct output: -96                 | Program output: 47                 
Correct output: -60                 | Program output: -28                
Correct output: 2                   | Program output: 17                 
Correct output: -60                 | Program output: -26                
Correct output: -61                 | Program output: 79                 
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: 66                 
Correct output: -75                 | Program output: 50                 
Correct output: -73                 | Program output: -73                
Correct output: -75                 | Program output: 52                 
Correct output: -67                 | Program output: 50                 
Correct output: -42                 | Program output: 79                 
Correct output: -32                 | Program output: -32                
Correct output: -89                 | Program output: 9                  
Correct output: -50                 | Program output: 64                 
Correct output: -62                 | Program output: 34                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer})
Lexicase best program: (integer_div exec_yankdup boolean_eq integer_eq integer_empty exec_empty exec_swap (exec_pop (integer_yankdup) integer_gte) (in4 integer_div integer_lte integer_dup boolean_pop print_integer))
Lexicase best errors: [1 1 0 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 20
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer})
Zero cases best program: (integer_div exec_yankdup boolean_eq integer_eq integer_empty exec_empty exec_swap (exec_pop (integer_yankdup) integer_gte) (in4 integer_div integer_lte integer_dup boolean_pop print_integer))
Zero cases best errors: [1 1 0 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 20
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (218 120 129 129 218 218 129 870 120 869)
Population mean number of elite cases: 3.02
Count of perfect (error zero) individuals by case: (218 120 129 129 218 218 129 870 120 869)
Population mean number of perfect (error zero) cases: 3.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_583} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_375} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod})
Best program: (boolean_dup integer_lt integer_sub integer_fromboolean integer_dup_times integer_max integer_yank boolean_swap exec_swap (integer_max boolean_invert_first_then_and integer_empty exec_do*range (boolean_or boolean_pop) exec_eq boolean_swap) (boolean_not boolean_pop) exec_yankdup integer_dup_times integer_mod tagged_583 exec_yankdup exec_k_when_autoconstructing (exec_do*while (boolean_dup_items) in4 boolean_eq) (tagged_375 print_integer integer_mod))
Errors: [1 1 0 0 1 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 32
Size: 39
Percent parens: 0.179
--- Population Statistics ---
Average total errors in population: 6.98
Median total errors in population: 8
Error averages by case: (0.782 0.88 0.871 0.871 0.782 0.782 0.871 0.13 0.88 0.131)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.463
Average program size in population (points): 38.029
Average percent parens in population: 0.245
Minimum age in population: 10.875
Maximum age in population: 15.0390625
Average age in population: 13.421140625
Median age in population: 13.46875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 315
Genome diversity (% unique genomes):	 0.536
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 319
Syntactic diversity (% unique Push programs):	 0.517
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 3603302
--- Timings ---
Current time: 1559583099888 milliseconds
Total Time:          28.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        20.1 seconds, 72.0%
Fitness Testing:      5.3 seconds, 19.0%
Report:               2.4 seconds,  8.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -94                 | Program output: -94                
Correct output: -47                 | Program output: -13                
Correct output: -80                 | Program output: 65                 
Correct output: 0                   | Program output: 79                 
Correct output: 28                  | Program output: 74                 
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -12                
Correct output: -68                 | Program output: -68                
Correct output: 70                  | Program output: 70                 
Correct output: -43                 | Program output: -43                
Correct output: 55                  | Program output: 55                 
Correct output: -87                 | Program output: -87                
Correct output: 88                  | Program output: 88                 
Correct output: -73                 | Program output: -73                
Correct output: 28                  | Program output: 28                 
Correct output: 18                  | Program output: 66                 
Correct output: 7                   | Program output: 21                 
Correct output: 14                  | Program output: 14                 
Correct output: 33                  | Program output: 33                 
Correct output: 60                  | Program output: 60                 
Correct output: 43                  | Program output: 73                 
Correct output: 9                   | Program output: 60                 
Correct output: 39                  | Program output: 56                 
Correct output: 14                  | Program output: 88                 
Correct output: 0                   | Program output: 22                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 76                 
Correct output: 50                  | Program output: 55                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 46                 
Correct output: 41                  | Program output: 84                 
Correct output: 31                  | Program output: 72                 
Correct output: 34                  | Program output: 34                 
Correct output: -92                 | Program output: -92                
Correct output: -37                 | Program output: 96                 
Correct output: -62                 | Program output: 29                 
Correct output: -100                | Program output: 16                 
Correct output: -61                 | Program output: 13                 
Correct output: -20                 | Program output: 14                 
Correct output: -51                 | Program output: -36                
Correct output: -61                 | Program output: -60                
Correct output: -44                 | Program output: -44                
Correct output: -75                 | Program output: -42                
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: -18                
Correct output: -91                 | Program output: -91                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: 13                 
Correct output: -80                 | Program output: -63                
Correct output: -65                 | Program output: 0                  
Correct output: -88                 | Program output: 91                 
Correct output: -95                 | Program output: -9                 
Correct output: -49                 | Program output: -49                
Correct output: -81                 | Program output: -81                
Correct output: -34                 | Program output: -33                
Correct output: -38                 | Program output: -6                 
Correct output: -55                 | Program output: 8                  
Correct output: -62                 | Program output: 43                 
Correct output: -98                 | Program output: 21                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -67                
Correct output: -97                 | Program output: 2                  
Correct output: -68                 | Program output: 67                 
Correct output: -75                 | Program output: -75                
Correct output: -55                 | Program output: -9                 
Correct output: -57                 | Program output: -57                
Correct output: -78                 | Program output: 41                 
Correct output: -43                 | Program output: -43                
Correct output: -29                 | Program output: 34                 
Correct output: -58                 | Program output: 80                 
Correct output: -66                 | Program output: 56                 
Correct output: -68                 | Program output: 97                 
Correct output: -39                 | Program output: -39                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -19                
Correct output: -99                 | Program output: 58                 
Correct output: -81                 | Program output: -30                
Correct output: -96                 | Program output: 47                 
Correct output: -60                 | Program output: -28                
Correct output: 2                   | Program output: 17                 
Correct output: -60                 | Program output: -26                
Correct output: -61                 | Program output: 79                 
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: 66                 
Correct output: -75                 | Program output: 50                 
Correct output: -73                 | Program output: -73                
Correct output: -75                 | Program output: 52                 
Correct output: -67                 | Program output: 50                 
Correct output: -42                 | Program output: 79                 
Correct output: -32                 | Program output: -32                
Correct output: -89                 | Program output: 9                  
Correct output: -50                 | Program output: 64                 
Correct output: -62                 | Program output: 34                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction tagged_481} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction -47} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 1, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer})
Lexicase best program: (boolean_stackdepth exec_do*count (boolean_invert_first_then_and integer_mult) integer_dup integer_shove tagged_481 integer_lte boolean_empty -47 boolean_and boolean_yankdup integer_dup exec_swap (integer_yankdup) (integer_gte) in4 integer_div integer_lte integer_lt boolean_pop print_integer)
Lexicase best errors: [0 0 1 1 1 0 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 26
Percent parens: 0.154
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction tagged_481} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction -47} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 1, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer})
Zero cases best program: (boolean_stackdepth exec_do*count (boolean_invert_first_then_and integer_mult) integer_dup integer_shove tagged_481 integer_lte boolean_empty -47 boolean_and boolean_yankdup integer_dup exec_swap (integer_yankdup) (integer_gte) in4 integer_div integer_lte integer_lt boolean_pop print_integer)
Zero cases best errors: [0 0 1 1 1 0 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 26
Percent parens: 0.154
--- Lexicase Population Statistics ---
Count of elite individuals by case: (346 346 1000 229 229 346 346 348 1000 229)
Population mean number of elite cases: 4.42
Count of perfect (error zero) individuals by case: (346 346 0 229 229 346 346 348 0 229)
Population mean number of perfect (error zero) cases: 2.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_583} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 2, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_integer_670} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_yankdup} {:close 2, :instruction exec_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3})
Best program: (integer_dec integer_lt integer_sub integer_fromboolean integer_dup_times integer_max exec_eq boolean_invert_second_then_and integer_dec integer_max boolean_invert_first_then_and integer_swap exec_do*range (boolean_or boolean_pop) boolean_dup_times boolean_swap boolean_not boolean_pop exec_yankdup integer_dup_times exec_k_when_autoconstructing (tagged_583 exec_yankdup) (boolean_swap exec_do*while (boolean_dup_items) in4 boolean_eq) integer_min print_integer integer_mod integer_mult integer_fromboolean exec_eq exec_dup_times (boolean_stackdepth tag_integer_670 boolean_dup_items) exec_if (exec_if (integer_yank boolean_dup exec_swap (integer_yankdup) () exec_when (print_integer integer_mod integer_flush integer_yankdup) exec_eq) () boolean_yankdup boolean_yankdup boolean_dup_items boolean_and integer_mult exec_dup_items integer_mult exec_pop (integer_inc integer_yankdup exec_rot (integer_lte) (integer_dup exec_s_when_autoconstructing (boolean_stackdepth exec_k () (integer_yankdup exec_k (integer_inc boolean_invert_first_then_and) (integer_add integer_empty integer_lte exec_do*while (integer_yankdup) integer_flush) boolean_invert_second_then_and in3)) () ()) ())) ())
Errors: [0 0 1 1 1 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 79
Size: 104
Percent parens: 0.240
--- Population Statistics ---
Average total errors in population: 7.581
Median total errors in population: 7
Error averages by case: (0.654 0.654 1.0 0.771 0.771 0.654 0.654 0.652 1.0 0.771)
Error minima by case: (0 0 1 0 0 0 0 0 1 0)
Average genome size in population (length): 34.559
Average program size in population (points): 45.431
Average percent parens in population: 0.225
Minimum age in population: 12.15625
Maximum age in population: 16.681640625
Average age in population: 14.92553515625
Median age in population: 15.0048828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 26
Genome diversity (% unique genomes):	 0.644
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.616
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 3877758
--- Timings ---
Current time: 1559583102918 milliseconds
Total Time:          31.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.7 seconds, 73.1%
Fitness Testing:      5.6 seconds, 18.1%
Report:               2.6 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -94                 | Program output: 91                 
Correct output: -47                 | Program output: -13                
Correct output: -80                 | Program output: 65                 
Correct output: 0                   | Program output: 79                 
Correct output: 28                  | Program output: 28                 
Correct output: -14                 | Program output: 8                  
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: 70                  | Program output: 81                 
Correct output: -43                 | Program output: -43                
Correct output: 55                  | Program output: 55                 
Correct output: -87                 | Program output: -87                
Correct output: 88                  | Program output: 88                 
Correct output: -73                 | Program output: -73                
Correct output: 28                  | Program output: 28                 
Correct output: 18                  | Program output: 79                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 85                 
Correct output: 33                  | Program output: 45                 
Correct output: 60                  | Program output: 87                 
Correct output: 43                  | Program output: 43                 
Correct output: 9                   | Program output: 9                  
Correct output: 39                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 0                   | Program output: 53                 
Correct output: 2                   | Program output: 25                 
Correct output: 8                   | Program output: 57                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 50                  | Program output: 64                 
Correct output: 3                   | Program output: 25                 
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 50                 
Correct output: 31                  | Program output: 66                 
Correct output: 34                  | Program output: 95                 
Correct output: -92                 | Program output: 83                 
Correct output: -37                 | Program output: -28                
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: 19                 
Correct output: -61                 | Program output: 1                  
Correct output: -20                 | Program output: -20                
Correct output: -51                 | Program output: -51                
Correct output: -61                 | Program output: -8                 
Correct output: -44                 | Program output: 73                 
Correct output: -75                 | Program output: 78                 
Correct output: -85                 | Program output: -52                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 65                 
Correct output: -4                  | Program output: 41                 
Correct output: -89                 | Program output: 12                 
Correct output: -80                 | Program output: -80                
Correct output: -65                 | Program output: -65                
Correct output: -88                 | Program output: -73                
Correct output: -95                 | Program output: -95                
Correct output: -49                 | Program output: 67                 
Correct output: -81                 | Program output: -47                
Correct output: -34                 | Program output: -34                
Correct output: -38                 | Program output: -37                
Correct output: -55                 | Program output: 20                 
Correct output: -62                 | Program output: 92                 
Correct output: -98                 | Program output: 53                 
Correct output: -71                 | Program output: 79                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -75                 | Program output: 83                 
Correct output: -55                 | Program output: 55                 
Correct output: -57                 | Program output: -23                
Correct output: -78                 | Program output: -78                
Correct output: -43                 | Program output: 40                 
Correct output: -29                 | Program output: -8                 
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -13                
Correct output: -68                 | Program output: 19                 
Correct output: -39                 | Program output: 15                 
Correct output: -55                 | Program output: -26                
Correct output: -90                 | Program output: 87                 
Correct output: -99                 | Program output: 17                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: 21                 
Correct output: -60                 | Program output: -12                
Correct output: 2                   | Program output: 34                 
Correct output: -60                 | Program output: 65                 
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -7                 
Correct output: -88                 | Program output: -26                
Correct output: -75                 | Program output: 97                 
Correct output: -73                 | Program output: 25                 
Correct output: -75                 | Program output: -75                
Correct output: -67                 | Program output: -3                 
Correct output: -42                 | Program output: -42                
Correct output: -32                 | Program output: 64                 
Correct output: -89                 | Program output: 39                 
Correct output: -50                 | Program output: -50                
Correct output: -62                 | Program output: -51                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_shove} {:close 0, :instruction tagged_481} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction -47} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction 7} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_fromboolean})
Lexicase best program: (integer_add exec_do*count (boolean_invert_first_then_and integer_mult) exec_do*while (integer_shove) tagged_481 integer_add boolean_empty -47 boolean_and boolean_yankdup integer_dup exec_swap (integer_rot 7 boolean_dup) (exec_eq exec_noop integer_add in1 print_integer exec_y (exec_s_when_autoconstructing (exec_flush boolean_empty) (integer_dec exec_empty integer_pop integer_fromboolean) ())))
Lexicase best errors: [0 0 0 1 1 0 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 39
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_shove} {:close 0, :instruction tagged_481} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction -47} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction 7} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_fromboolean})
Zero cases best program: (integer_add exec_do*count (boolean_invert_first_then_and integer_mult) exec_do*while (integer_shove) tagged_481 integer_add boolean_empty -47 boolean_and boolean_yankdup integer_dup exec_swap (integer_rot 7 boolean_dup) (exec_eq exec_noop integer_add in1 print_integer exec_y (exec_s_when_autoconstructing (exec_flush boolean_empty) (integer_dec exec_empty integer_pop integer_fromboolean) ())))
Zero cases best errors: [0 0 0 1 1 0 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 39
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (911 119 119 372 419 912 1000 373 119 419)
Population mean number of elite cases: 4.76
Count of perfect (error zero) individuals by case: (911 119 119 372 419 912 0 373 119 419)
Population mean number of perfect (error zero) cases: 3.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 1, :instruction integer_dup})
Best program: (exec_pop () integer_dup integer_flush in1 print_integer boolean_xor in2 boolean_frominteger integer_yankdup integer_mod integer_eq in3 integer_dup)
Errors: [0 0 0 1 1 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 13
Size: 15
Percent parens: 0.133
--- Population Statistics ---
Average total errors in population: 6.237
Median total errors in population: 6
Error averages by case: (0.089 0.881 0.881 0.628 0.581 0.088 1.0 0.627 0.881 0.581)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 36.82
Average program size in population (points): 48.459
Average percent parens in population: 0.227
Minimum age in population: 14.0625
Maximum age in population: 18.2568359375
Average age in population: 16.4121650390625
Median age in population: 16.4853515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 20
Genome diversity (% unique genomes):	 0.701
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.679
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 4142736
--- Timings ---
Current time: 1559583105340 milliseconds
Total Time:          33.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.6 seconds, 73.5%
Fitness Testing:      5.9 seconds, 17.6%
Report:               2.9 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -94                 | Program output: -94                
Correct output: -47                 | Program output: -47                
Correct output: -80                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 28                 
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: 70                  | Program output: 70                 
Correct output: -43                 | Program output: 49                 
Correct output: 55                  | Program output: 55                 
Correct output: -87                 | Program output: -87                
Correct output: 88                  | Program output: 88                 
Correct output: -73                 | Program output: -73                
Correct output: 28                  | Program output: 28                 
Correct output: 18                  | Program output: 22                 
Correct output: 7                   | Program output: 12                 
Correct output: 14                  | Program output: 61                 
Correct output: 33                  | Program output: 69                 
Correct output: 60                  | Program output: 60                 
Correct output: 43                  | Program output: 91                 
Correct output: 9                   | Program output: 43                 
Correct output: 39                  | Program output: 82                 
Correct output: 14                  | Program output: 45                 
Correct output: 0                   | Program output: 53                 
Correct output: 2                   | Program output: 79                 
Correct output: 8                   | Program output: 49                 
Correct output: 35                  | Program output: 48                 
Correct output: 11                  | Program output: 31                 
Correct output: 50                  | Program output: 50                 
Correct output: 3                   | Program output: 15                 
Correct output: 3                   | Program output: 95                 
Correct output: 41                  | Program output: 72                 
Correct output: 31                  | Program output: 31                 
Correct output: 34                  | Program output: 73                 
Correct output: -92                 | Program output: -36                
Correct output: -37                 | Program output: -30                
Correct output: -62                 | Program output: 12                 
Correct output: -100                | Program output: 5                  
Correct output: -61                 | Program output: 62                 
Correct output: -20                 | Program output: -10                
Correct output: -51                 | Program output: 19                 
Correct output: -61                 | Program output: -61                
Correct output: -44                 | Program output: -25                
Correct output: -75                 | Program output: -75                
Correct output: -85                 | Program output: -65                
Correct output: -97                 | Program output: 22                 
Correct output: -91                 | Program output: 16                 
Correct output: -4                  | Program output: 47                 
Correct output: -89                 | Program output: 14                 
Correct output: -80                 | Program output: 81                 
Correct output: -65                 | Program output: -45                
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -27                
Correct output: -49                 | Program output: 81                 
Correct output: -81                 | Program output: 34                 
Correct output: -34                 | Program output: 86                 
Correct output: -38                 | Program output: -38                
Correct output: -55                 | Program output: 4                  
Correct output: -62                 | Program output: 79                 
Correct output: -98                 | Program output: -62                
Correct output: -71                 | Program output: 41                 
Correct output: -97                 | Program output: 19                 
Correct output: -97                 | Program output: 85                 
Correct output: -68                 | Program output: 49                 
Correct output: -75                 | Program output: 83                 
Correct output: -55                 | Program output: -55                
Correct output: -57                 | Program output: 100                
Correct output: -78                 | Program output: -4                 
Correct output: -43                 | Program output: 74                 
Correct output: -29                 | Program output: -29                
Correct output: -58                 | Program output: 64                 
Correct output: -66                 | Program output: -19                
Correct output: -68                 | Program output: 58                 
Correct output: -39                 | Program output: 77                 
Correct output: -55                 | Program output: 93                 
Correct output: -90                 | Program output: -90                
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: 22                 
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: 82                 
Correct output: 2                   | Program output: 2                  
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -58                
Correct output: -97                 | Program output: -51                
Correct output: -88                 | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: 11                 
Correct output: -75                 | Program output: 24                 
Correct output: -67                 | Program output: 61                 
Correct output: -42                 | Program output: -40                
Correct output: -32                 | Program output: 72                 
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: 73                 
Correct output: -62                 | Program output: 68                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction tagged_114} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_boolean_580} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_do*times} {:close 1, :instruction tag_integer_203} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_integer_670} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_add} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove})
Lexicase best program: (exec_eq exec_k (integer_dup_times) (boolean_and tagged_114) in2 in4 exec_empty integer_fromboolean boolean_yank boolean_dup_items exec_empty print_integer exec_while () boolean_yankdup integer_shove exec_do*range (integer_inc integer_stackdepth tag_boolean_580 integer_yankdup exec_do*times () tag_integer_203) boolean_yankdup exec_do*range (integer_min integer_mult integer_mult) integer_fromboolean exec_eq exec_dup_times (boolean_stackdepth tag_integer_670 boolean_dup_items) exec_if (exec_if (integer_yank boolean_dup exec_swap (integer_yankdup) () exec_when (print_exec (boolean_eq integer_dec integer_dup_times boolean_xor)) integer_shove print_boolean integer_flush exec_dup_times () integer_gt print_newline boolean_invert_second_then_and in3) (exec_stackdepth integer_dup_times integer_mod boolean_yank integer_add)) (exec_flush) integer_inc boolean_shove boolean_dup_items integer_yankdup exec_rot (integer_shove) () ())
Lexicase best errors: [0 1 1 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 86
Percent parens: 0.233
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction tagged_114} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_boolean_580} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_do*times} {:close 1, :instruction tag_integer_203} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_integer_670} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_add} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove})
Zero cases best program: (exec_eq exec_k (integer_dup_times) (boolean_and tagged_114) in2 in4 exec_empty integer_fromboolean boolean_yank boolean_dup_items exec_empty print_integer exec_while () boolean_yankdup integer_shove exec_do*range (integer_inc integer_stackdepth tag_boolean_580 integer_yankdup exec_do*times () tag_integer_203) boolean_yankdup exec_do*range (integer_min integer_mult integer_mult) integer_fromboolean exec_eq exec_dup_times (boolean_stackdepth tag_integer_670 boolean_dup_items) exec_if (exec_if (integer_yank boolean_dup exec_swap (integer_yankdup) () exec_when (print_exec (boolean_eq integer_dec integer_dup_times boolean_xor)) integer_shove print_boolean integer_flush exec_dup_times () integer_gt print_newline boolean_invert_second_then_and in3) (exec_stackdepth integer_dup_times integer_mod boolean_yank integer_add)) (exec_flush) integer_inc boolean_shove boolean_dup_items integer_yankdup exec_rot (integer_shove) () ())
Zero cases best errors: [0 1 1 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 86
Percent parens: 0.233
--- Lexicase Population Statistics ---
Count of elite individuals by case: (908 401 265 1 265 1 1 400 1 1)
Population mean number of elite cases: 2.24
Count of perfect (error zero) individuals by case: (908 401 265 1 265 1 1 400 1 1)
Population mean number of perfect (error zero) cases: 2.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction tagged_114} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_boolean_580} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_do*times} {:close 1, :instruction tag_integer_203} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_integer_670} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_add} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove})
Best program: (exec_eq exec_k (integer_dup_times) (boolean_and tagged_114) in2 in4 exec_empty integer_fromboolean boolean_yank boolean_dup_items exec_empty print_integer exec_while () boolean_yankdup integer_shove exec_do*range (integer_inc integer_stackdepth tag_boolean_580 integer_yankdup exec_do*times () tag_integer_203) boolean_yankdup exec_do*range (integer_min integer_mult integer_mult) integer_fromboolean exec_eq exec_dup_times (boolean_stackdepth tag_integer_670 boolean_dup_items) exec_if (exec_if (integer_yank boolean_dup exec_swap (integer_yankdup) () exec_when (print_exec (boolean_eq integer_dec integer_dup_times boolean_xor)) integer_shove print_boolean integer_flush exec_dup_times () integer_gt print_newline boolean_invert_second_then_and in3) (exec_stackdepth integer_dup_times integer_mod boolean_yank integer_add)) (exec_flush) integer_inc boolean_shove boolean_dup_items integer_yankdup exec_rot (integer_shove) () ())
Errors: [0 1 1 0 1 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 66
Size: 86
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 7.756
Median total errors in population: 7
Error averages by case: (0.092 0.599 0.735 0.999 0.735 0.999 0.999 0.6 0.999 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.164
Average program size in population (points): 42.568
Average percent parens in population: 0.227
Minimum age in population: 15.0625
Maximum age in population: 19.8447265625
Average age in population: 17.8765498046875
Median age in population: 17.9404296875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 51
Genome diversity (% unique genomes):	 0.667
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.643
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 4401175
--- Timings ---
Current time: 1559583107755 milliseconds
Total Time:          35.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.5 seconds, 74.1%
Fitness Testing:      6.2 seconds, 17.3%
Report:               3.0 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -94                 | Program output: 91                 
Correct output: -47                 | Program output: -13                
Correct output: -80                 | Program output: 65                 
Correct output: 0                   | Program output: 79                 
Correct output: 28                  | Program output: 28                 
Correct output: -14                 | Program output: 8                  
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: 70                  | Program output: 81                 
Correct output: -43                 | Program output: -43                
Correct output: 55                  | Program output: 55                 
Correct output: -87                 | Program output: -87                
Correct output: 88                  | Program output: 88                 
Correct output: -73                 | Program output: -73                
Correct output: 28                  | Program output: 28                 
Correct output: 18                  | Program output: 79                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 85                 
Correct output: 33                  | Program output: 45                 
Correct output: 60                  | Program output: 87                 
Correct output: 43                  | Program output: 43                 
Correct output: 9                   | Program output: 9                  
Correct output: 39                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 0                   | Program output: 53                 
Correct output: 2                   | Program output: 25                 
Correct output: 8                   | Program output: 57                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 50                  | Program output: 64                 
Correct output: 3                   | Program output: 25                 
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 50                 
Correct output: 31                  | Program output: 66                 
Correct output: 34                  | Program output: 95                 
Correct output: -92                 | Program output: 83                 
Correct output: -37                 | Program output: -28                
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: 19                 
Correct output: -61                 | Program output: 1                  
Correct output: -20                 | Program output: -20                
Correct output: -51                 | Program output: -51                
Correct output: -61                 | Program output: -8                 
Correct output: -44                 | Program output: 73                 
Correct output: -75                 | Program output: 78                 
Correct output: -85                 | Program output: -52                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 65                 
Correct output: -4                  | Program output: 41                 
Correct output: -89                 | Program output: 12                 
Correct output: -80                 | Program output: -80                
Correct output: -65                 | Program output: -65                
Correct output: -88                 | Program output: -73                
Correct output: -95                 | Program output: -95                
Correct output: -49                 | Program output: 67                 
Correct output: -81                 | Program output: -47                
Correct output: -34                 | Program output: -34                
Correct output: -38                 | Program output: -37                
Correct output: -55                 | Program output: 20                 
Correct output: -62                 | Program output: 92                 
Correct output: -98                 | Program output: 53                 
Correct output: -71                 | Program output: 79                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -75                 | Program output: 83                 
Correct output: -55                 | Program output: 55                 
Correct output: -57                 | Program output: -23                
Correct output: -78                 | Program output: -78                
Correct output: -43                 | Program output: 40                 
Correct output: -29                 | Program output: -8                 
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -13                
Correct output: -68                 | Program output: 19                 
Correct output: -39                 | Program output: 15                 
Correct output: -55                 | Program output: -26                
Correct output: -90                 | Program output: 87                 
Correct output: -99                 | Program output: 17                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: 21                 
Correct output: -60                 | Program output: -12                
Correct output: 2                   | Program output: 34                 
Correct output: -60                 | Program output: 65                 
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -7                 
Correct output: -88                 | Program output: -26                
Correct output: -75                 | Program output: 97                 
Correct output: -73                 | Program output: 25                 
Correct output: -75                 | Program output: -75                
Correct output: -67                 | Program output: -3                 
Correct output: -42                 | Program output: -42                
Correct output: -32                 | Program output: 64                 
Correct output: -89                 | Program output: 39                 
Correct output: -50                 | Program output: -50                
Correct output: -62                 | Program output: -51                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 2, :instruction in1} {:close 0, :instruction print_integer} {:close 2, :instruction exec_do*while} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 2, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_375} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_yankdup} {:close 2, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add})
Lexicase best program: (integer_div exec_yank boolean_eq integer_dec integer_empty integer_dup_times in2 in4 exec_swap (in1) () print_integer exec_do*while () exec_swap () (exec_when (exec_do*count (boolean_flush)) in3 integer_dec boolean_rot) boolean_invert_second_then_and integer_dec integer_flush boolean_empty exec_flush boolean_eq boolean_dup_items in4 boolean_eq tagged_375 print_integer integer_mod integer_flush integer_yankdup in3 integer_yank boolean_yankdup boolean_dup_items boolean_and integer_mult exec_dup_items print_integer exec_pop (integer_inc boolean_flush integer_yankdup) integer_lte integer_dup exec_s_when_autoconstructing (print_integer exec_k () (integer_yankdup exec_k (integer_inc boolean_invert_first_then_and) (integer_add integer_empty integer_lte integer_div exec_dup_times () integer_gt print_integer integer_add))) () ())
Lexicase best errors: [1 0 0 0 1 1 1 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 79
Percent parens: 0.215
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 2, :instruction in1} {:close 0, :instruction print_integer} {:close 2, :instruction exec_do*while} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 2, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_375} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_yankdup} {:close 2, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add})
Zero cases best program: (integer_div exec_yank boolean_eq integer_dec integer_empty integer_dup_times in2 in4 exec_swap (in1) () print_integer exec_do*while () exec_swap () (exec_when (exec_do*count (boolean_flush)) in3 integer_dec boolean_rot) boolean_invert_second_then_and integer_dec integer_flush boolean_empty exec_flush boolean_eq boolean_dup_items in4 boolean_eq tagged_375 print_integer integer_mod integer_flush integer_yankdup in3 integer_yank boolean_yankdup boolean_dup_items boolean_and integer_mult exec_dup_items print_integer exec_pop (integer_inc boolean_flush integer_yankdup) integer_lte integer_dup exec_s_when_autoconstructing (print_integer exec_k () (integer_yankdup exec_k (integer_inc boolean_invert_first_then_and) (integer_add integer_empty integer_lte integer_div exec_dup_times () integer_gt print_integer integer_add))) () ())
Zero cases best errors: [1 0 0 0 1 1 1 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 79
Percent parens: 0.215
--- Lexicase Population Statistics ---
Count of elite individuals by case: (212 212 212 212 211 1000 2 1000 1000 211)
Population mean number of elite cases: 4.27
Count of perfect (error zero) individuals by case: (212 212 212 212 211 0 2 0 0 211)
Population mean number of perfect (error zero) cases: 1.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in1} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction 46} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction tag_boolean_580} {:close 0, :instruction tag_exec_217} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 1, :instruction tagged_639} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_stackdepth})
Best program: (exec_if () (exec_dup_times (in1) exec_noop) boolean_and integer_gt boolean_invert_second_then_and print_integer exec_while () 46 integer_shove exec_s (integer_add integer_stackdepth) (tag_boolean_580 tag_exec_217 (integer_empty) integer_dup_times) (exec_dup_times (tagged_639) boolean_invert_first_then_and exec_stackdepth exec_yankdup integer_stackdepth))
Errors: [1 0 0 0 1 1 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 24
Size: 34
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 8.728
Median total errors in population: 10
Error averages by case: (0.788 0.788 0.788 0.788 0.789 1.0 0.998 1.0 1.0 0.789)
Error minima by case: (0 0 0 0 0 1 0 1 1 0)
Average genome size in population (length): 46.88
Average program size in population (points): 61.108
Average percent parens in population: 0.225
Minimum age in population: 16.0625
Maximum age in population: 21.337646484375
Average age in population: 19.85961645507812
Median age in population: 19.83056640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 179
Genome diversity (% unique genomes):	 0.675
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 183
Syntactic diversity (% unique Push programs):	 0.661
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 4697809
--- Timings ---
Current time: 1559583110866 milliseconds
Total Time:          38.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        28.6 seconds, 74.4%
Fitness Testing:      6.5 seconds, 16.9%
Report:               3.3 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -94                 | Program output: 91                 
Correct output: -47                 | Program output: -13                
Correct output: -80                 | Program output: 65                 
Correct output: 0                   | Program output: 79                 
Correct output: 28                  | Program output: 28                 
Correct output: -14                 | Program output: 8                  
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: 70                  | Program output: 81                 
Correct output: -43                 | Program output: -43                
Correct output: 55                  | Program output: 55                 
Correct output: -87                 | Program output: -87                
Correct output: 88                  | Program output: 88                 
Correct output: -73                 | Program output: -73                
Correct output: 28                  | Program output: 28                 
Correct output: 18                  | Program output: 79                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 85                 
Correct output: 33                  | Program output: 45                 
Correct output: 60                  | Program output: 87                 
Correct output: 43                  | Program output: 43                 
Correct output: 9                   | Program output: 9                  
Correct output: 39                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 0                   | Program output: 53                 
Correct output: 2                   | Program output: 25                 
Correct output: 8                   | Program output: 57                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 50                  | Program output: 64                 
Correct output: 3                   | Program output: 25                 
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 50                 
Correct output: 31                  | Program output: 66                 
Correct output: 34                  | Program output: 95                 
Correct output: -92                 | Program output: 83                 
Correct output: -37                 | Program output: -28                
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: 19                 
Correct output: -61                 | Program output: 1                  
Correct output: -20                 | Program output: -20                
Correct output: -51                 | Program output: -51                
Correct output: -61                 | Program output: -8                 
Correct output: -44                 | Program output: 73                 
Correct output: -75                 | Program output: 78                 
Correct output: -85                 | Program output: -52                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 65                 
Correct output: -4                  | Program output: 41                 
Correct output: -89                 | Program output: 12                 
Correct output: -80                 | Program output: -80                
Correct output: -65                 | Program output: -65                
Correct output: -88                 | Program output: -73                
Correct output: -95                 | Program output: -95                
Correct output: -49                 | Program output: 67                 
Correct output: -81                 | Program output: -47                
Correct output: -34                 | Program output: -34                
Correct output: -38                 | Program output: -37                
Correct output: -55                 | Program output: 20                 
Correct output: -62                 | Program output: 92                 
Correct output: -98                 | Program output: 53                 
Correct output: -71                 | Program output: 79                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -75                 | Program output: 83                 
Correct output: -55                 | Program output: 55                 
Correct output: -57                 | Program output: -23                
Correct output: -78                 | Program output: -78                
Correct output: -43                 | Program output: 40                 
Correct output: -29                 | Program output: -8                 
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -13                
Correct output: -68                 | Program output: 19                 
Correct output: -39                 | Program output: 15                 
Correct output: -55                 | Program output: -26                
Correct output: -90                 | Program output: 87                 
Correct output: -99                 | Program output: 17                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: 21                 
Correct output: -60                 | Program output: -12                
Correct output: 2                   | Program output: 34                 
Correct output: -60                 | Program output: 65                 
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -7                 
Correct output: -88                 | Program output: -26                
Correct output: -75                 | Program output: 97                 
Correct output: -73                 | Program output: 25                 
Correct output: -75                 | Program output: -75                
Correct output: -67                 | Program output: -3                 
Correct output: -42                 | Program output: -42                
Correct output: -32                 | Program output: 64                 
Correct output: -89                 | Program output: 39                 
Correct output: -50                 | Program output: -50                
Correct output: -62                 | Program output: -51                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 2, :instruction in1} {:close 0, :instruction print_integer} {:close 2, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if})
Lexicase best program: (integer_div exec_yankdup boolean_eq integer_eq integer_empty exec_yank exec_swap (exec_pop (integer_yankdup) in1) () print_integer exec_do*while () exec_swap (exec_when (exec_do*count (boolean_flush) boolean_empty integer_dec boolean_rot) boolean_invert_second_then_and integer_dec) (integer_flush boolean_empty exec_flush exec_yank exec_if () ()))
Lexicase best errors: [0 1 1 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 37
Percent parens: 0.297
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 2, :instruction in1} {:close 0, :instruction print_integer} {:close 2, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if})
Zero cases best program: (integer_div exec_yankdup boolean_eq integer_eq integer_empty exec_yank exec_swap (exec_pop (integer_yankdup) in1) () print_integer exec_do*while () exec_swap (exec_when (exec_do*count (boolean_flush) boolean_empty integer_dec boolean_rot) boolean_invert_second_then_and integer_dec) (integer_flush boolean_empty exec_flush exec_yank exec_if () ()))
Zero cases best errors: [0 1 1 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 37
Percent parens: 0.297
--- Lexicase Population Statistics ---
Count of elite individuals by case: (790 387 1000 407 790 407 1000 408 4 405)
Population mean number of elite cases: 5.60
Count of perfect (error zero) individuals by case: (790 387 0 407 790 407 0 408 4 405)
Population mean number of perfect (error zero) cases: 3.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_max} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction 7} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank})
Best program: (integer_inc boolean_yankdup boolean_and integer_max exec_do*range () boolean_pop integer_min exec_do*range (integer_pop boolean_eq integer_swap exec_shove (integer_dup exec_swap (integer_lt 7 boolean_dup) (exec_eq exec_noop integer_add in1 print_integer) exec_y (boolean_yank integer_sub) boolean_empty) integer_dec) exec_empty integer_sub exec_dup (exec_yank))
Errors: [0 1 1 0 0 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 31
Size: 39
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 6.402
Median total errors in population: 7
Error averages by case: (0.21 0.613 1.0 0.593 0.21 0.593 1.0 0.592 0.996 0.595)
Error minima by case: (0 0 1 0 0 0 1 0 0 0)
Average genome size in population (length): 30.832
Average program size in population (points): 40.754
Average percent parens in population: 0.230
Minimum age in population: 17.0625
Maximum age in population: 22.989013671875
Average age in population: 21.05099780273438
Median age in population: 21.07794189453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 48
Genome diversity (% unique genomes):	 0.588
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 49
Syntactic diversity (% unique Push programs):	 0.575
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 4946973
--- Timings ---
Current time: 1559583113493 milliseconds
Total Time:          41.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.3 seconds, 73.6%
Fitness Testing:      6.8 seconds, 16.4%
Report:               4.0 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -94                 | Program output: -94                
Correct output: -47                 | Program output: -47                
Correct output: -80                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 28                 
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: 70                  | Program output: 70                 
Correct output: -43                 | Program output: 49                 
Correct output: 55                  | Program output: 55                 
Correct output: -87                 | Program output: -87                
Correct output: 88                  | Program output: 88                 
Correct output: -73                 | Program output: -73                
Correct output: 28                  | Program output: 28                 
Correct output: 18                  | Program output: 22                 
Correct output: 7                   | Program output: 12                 
Correct output: 14                  | Program output: 61                 
Correct output: 33                  | Program output: 69                 
Correct output: 60                  | Program output: 60                 
Correct output: 43                  | Program output: 91                 
Correct output: 9                   | Program output: 43                 
Correct output: 39                  | Program output: 82                 
Correct output: 14                  | Program output: 45                 
Correct output: 0                   | Program output: 53                 
Correct output: 2                   | Program output: 79                 
Correct output: 8                   | Program output: 49                 
Correct output: 35                  | Program output: 48                 
Correct output: 11                  | Program output: 31                 
Correct output: 50                  | Program output: 50                 
Correct output: 3                   | Program output: 15                 
Correct output: 3                   | Program output: 95                 
Correct output: 41                  | Program output: 72                 
Correct output: 31                  | Program output: 31                 
Correct output: 34                  | Program output: 73                 
Correct output: -92                 | Program output: -36                
Correct output: -37                 | Program output: -30                
Correct output: -62                 | Program output: 12                 
Correct output: -100                | Program output: 5                  
Correct output: -61                 | Program output: 62                 
Correct output: -20                 | Program output: -10                
Correct output: -51                 | Program output: 19                 
Correct output: -61                 | Program output: -61                
Correct output: -44                 | Program output: -25                
Correct output: -75                 | Program output: -75                
Correct output: -85                 | Program output: -65                
Correct output: -97                 | Program output: 22                 
Correct output: -91                 | Program output: 16                 
Correct output: -4                  | Program output: 47                 
Correct output: -89                 | Program output: 14                 
Correct output: -80                 | Program output: 81                 
Correct output: -65                 | Program output: -45                
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -27                
Correct output: -49                 | Program output: 81                 
Correct output: -81                 | Program output: 34                 
Correct output: -34                 | Program output: 86                 
Correct output: -38                 | Program output: -38                
Correct output: -55                 | Program output: 4                  
Correct output: -62                 | Program output: 79                 
Correct output: -98                 | Program output: -62                
Correct output: -71                 | Program output: 41                 
Correct output: -97                 | Program output: 19                 
Correct output: -97                 | Program output: 85                 
Correct output: -68                 | Program output: 49                 
Correct output: -75                 | Program output: 83                 
Correct output: -55                 | Program output: -55                
Correct output: -57                 | Program output: 100                
Correct output: -78                 | Program output: -4                 
Correct output: -43                 | Program output: 74                 
Correct output: -29                 | Program output: -29                
Correct output: -58                 | Program output: 64                 
Correct output: -66                 | Program output: -19                
Correct output: -68                 | Program output: 58                 
Correct output: -39                 | Program output: 77                 
Correct output: -55                 | Program output: 93                 
Correct output: -90                 | Program output: -90                
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: 22                 
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: 82                 
Correct output: 2                   | Program output: 2                  
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -58                
Correct output: -97                 | Program output: -51                
Correct output: -88                 | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: 11                 
Correct output: -75                 | Program output: 24                 
Correct output: -67                 | Program output: 61                 
Correct output: -42                 | Program output: -40                
Correct output: -32                 | Program output: 72                 
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: 73                 
Correct output: -62                 | Program output: 68                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction tagged_114} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_boolean_580} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_do*times} {:close 1, :instruction tag_integer_203} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_integer_670} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_add} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove})
Lexicase best program: (integer_dup_times boolean_and tagged_114 in2 in4 exec_empty integer_fromboolean boolean_yank boolean_dup_items exec_empty print_integer exec_while () boolean_yankdup integer_shove exec_do*range (integer_inc integer_dec tag_boolean_580 integer_yankdup exec_do*times () tag_integer_203) boolean_yankdup exec_do*range (integer_min integer_mult integer_mult) integer_fromboolean exec_eq exec_dup_times (boolean_stackdepth tag_integer_670 boolean_dup_items) exec_if (exec_if (integer_yank boolean_dup exec_swap (integer_yankdup) () exec_when (print_exec (boolean_eq integer_dec integer_dup_times boolean_xor)) integer_shove print_boolean integer_flush exec_dup_times () boolean_rot print_newline boolean_invert_second_then_and in3) (exec_stackdepth integer_dup_times integer_mod boolean_yank integer_add)) (exec_flush) integer_inc boolean_shove boolean_dup_items integer_yankdup exec_rot (integer_shove) () ())
Lexicase best errors: [0 1 1 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 82
Percent parens: 0.220
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction tagged_114} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_boolean_580} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_do*times} {:close 1, :instruction tag_integer_203} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_integer_670} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_add} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove})
Zero cases best program: (integer_dup_times boolean_and tagged_114 in2 in4 exec_empty integer_fromboolean boolean_yank boolean_dup_items exec_empty print_integer exec_while () boolean_yankdup integer_shove exec_do*range (integer_inc integer_dec tag_boolean_580 integer_yankdup exec_do*times () tag_integer_203) boolean_yankdup exec_do*range (integer_min integer_mult integer_mult) integer_fromboolean exec_eq exec_dup_times (boolean_stackdepth tag_integer_670 boolean_dup_items) exec_if (exec_if (integer_yank boolean_dup exec_swap (integer_yankdup) () exec_when (print_exec (boolean_eq integer_dec integer_dup_times boolean_xor)) integer_shove print_boolean integer_flush exec_dup_times () boolean_rot print_newline boolean_invert_second_then_and in3) (exec_stackdepth integer_dup_times integer_mod boolean_yank integer_add)) (exec_flush) integer_inc boolean_shove boolean_dup_items integer_yankdup exec_rot (integer_shove) () ())
Zero cases best errors: [0 1 1 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 82
Percent parens: 0.220
--- Lexicase Population Statistics ---
Count of elite individuals by case: (115 2 152 113 766 765 650 113 114 650)
Population mean number of elite cases: 3.44
Count of perfect (error zero) individuals by case: (115 2 152 113 766 765 650 113 114 650)
Population mean number of perfect (error zero) cases: 3.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction tagged_114} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_dup})
Best program: (boolean_swap exec_k (integer_dup_times) (boolean_and tagged_114) in2 exec_swap (boolean_xor in2 boolean_frominteger integer_yankdup) (integer_mod print_integer integer_gte) integer_dup)
Errors: [0 0 0 1 0 0 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 15
Size: 20
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.56
Median total errors in population: 6
Error averages by case: (0.885 0.998 0.848 0.887 0.234 0.235 0.35 0.887 0.886 0.35)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.989
Average program size in population (points): 33.149
Average percent parens in population: 0.226
Minimum age in population: 18.947265625
Maximum age in population: 24.383544921875
Average age in population: 22.29534912109375
Median age in population: 22.41323852539062
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 133
Genome diversity (% unique genomes):	 0.528
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 133
Syntactic diversity (% unique Push programs):	 0.512
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 5198392
--- Timings ---
Current time: 1559583115760 milliseconds
Total Time:          43.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.2 seconds, 73.3%
Fitness Testing:      7.0 seconds, 16.0%
Report:               4.6 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -94                 | Program output: -94                
Correct output: -47                 | Program output: -47                
Correct output: -80                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 28                 
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: 70                  | Program output: 70                 
Correct output: -43                 | Program output: 49                 
Correct output: 55                  | Program output: 55                 
Correct output: -87                 | Program output: -87                
Correct output: 88                  | Program output: 88                 
Correct output: -73                 | Program output: -73                
Correct output: 28                  | Program output: 28                 
Correct output: 18                  | Program output: 22                 
Correct output: 7                   | Program output: 12                 
Correct output: 14                  | Program output: 61                 
Correct output: 33                  | Program output: 69                 
Correct output: 60                  | Program output: 60                 
Correct output: 43                  | Program output: 91                 
Correct output: 9                   | Program output: 43                 
Correct output: 39                  | Program output: 82                 
Correct output: 14                  | Program output: 45                 
Correct output: 0                   | Program output: 53                 
Correct output: 2                   | Program output: 79                 
Correct output: 8                   | Program output: 49                 
Correct output: 35                  | Program output: 48                 
Correct output: 11                  | Program output: 31                 
Correct output: 50                  | Program output: 50                 
Correct output: 3                   | Program output: 15                 
Correct output: 3                   | Program output: 95                 
Correct output: 41                  | Program output: 72                 
Correct output: 31                  | Program output: 31                 
Correct output: 34                  | Program output: 73                 
Correct output: -92                 | Program output: -36                
Correct output: -37                 | Program output: -30                
Correct output: -62                 | Program output: 12                 
Correct output: -100                | Program output: 5                  
Correct output: -61                 | Program output: 62                 
Correct output: -20                 | Program output: -10                
Correct output: -51                 | Program output: 19                 
Correct output: -61                 | Program output: -61                
Correct output: -44                 | Program output: -25                
Correct output: -75                 | Program output: -75                
Correct output: -85                 | Program output: -65                
Correct output: -97                 | Program output: 22                 
Correct output: -91                 | Program output: 16                 
Correct output: -4                  | Program output: 47                 
Correct output: -89                 | Program output: 14                 
Correct output: -80                 | Program output: 81                 
Correct output: -65                 | Program output: -45                
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -27                
Correct output: -49                 | Program output: 81                 
Correct output: -81                 | Program output: 34                 
Correct output: -34                 | Program output: 86                 
Correct output: -38                 | Program output: -38                
Correct output: -55                 | Program output: 4                  
Correct output: -62                 | Program output: 79                 
Correct output: -98                 | Program output: -62                
Correct output: -71                 | Program output: 41                 
Correct output: -97                 | Program output: 19                 
Correct output: -97                 | Program output: 85                 
Correct output: -68                 | Program output: 49                 
Correct output: -75                 | Program output: 83                 
Correct output: -55                 | Program output: -55                
Correct output: -57                 | Program output: 100                
Correct output: -78                 | Program output: -4                 
Correct output: -43                 | Program output: 74                 
Correct output: -29                 | Program output: -29                
Correct output: -58                 | Program output: 64                 
Correct output: -66                 | Program output: -19                
Correct output: -68                 | Program output: 58                 
Correct output: -39                 | Program output: 77                 
Correct output: -55                 | Program output: 93                 
Correct output: -90                 | Program output: -90                
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: 22                 
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: 82                 
Correct output: 2                   | Program output: 2                  
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -58                
Correct output: -97                 | Program output: -51                
Correct output: -88                 | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: 11                 
Correct output: -75                 | Program output: 24                 
Correct output: -67                 | Program output: 61                 
Correct output: -42                 | Program output: -40                
Correct output: -32                 | Program output: 72                 
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: 73                 
Correct output: -62                 | Program output: 68                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_empty} {:close 1, :instruction tagged_114} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_dup})
Lexicase best program: (boolean_swap exec_k (integer_dup_times) (exec_empty tagged_114) in2 exec_swap (boolean_xor in2 boolean_frominteger integer_yankdup) (integer_mod print_integer integer_gte) integer_dup)
Lexicase best errors: [0 1 0 0 1 1 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 20
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_empty} {:close 1, :instruction tagged_114} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_dup})
Zero cases best program: (boolean_swap exec_k (integer_dup_times) (exec_empty tagged_114) in2 exec_swap (boolean_xor in2 boolean_frominteger integer_yankdup) (integer_mod print_integer integer_gte) integer_dup)
Zero cases best errors: [0 1 0 0 1 1 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 20
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (359 7 909 358 324 324 322 358 1000 358)
Population mean number of elite cases: 4.32
Count of perfect (error zero) individuals by case: (359 7 909 358 324 324 322 358 0 358)
Population mean number of perfect (error zero) cases: 3.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 2, :instruction integer_gte} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer})
Best program: (integer_mod integer_mod exec_eq exec_k (integer_dup_times boolean_and integer_dup_times) (in2 integer_gte) boolean_stackdepth integer_div integer_lte integer_lt boolean_pop print_integer)
Errors: [0 1 0 0 1 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 15
Size: 18
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 6.681
Median total errors in population: 6
Error averages by case: (0.641 0.993 0.091 0.642 0.676 0.676 0.678 0.642 1.0 0.642)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 22.327
Average program size in population (points): 28.772
Average percent parens in population: 0.212
Minimum age in population: 19.947265625
Maximum age in population: 25.82424926757812
Average age in population: 23.98779190063477
Median age in population: 24.10069274902344
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 151
Genome diversity (% unique genomes):	 0.486
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 153
Syntactic diversity (% unique Push programs):	 0.464
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 5385171
--- Timings ---
Current time: 1559583117925 milliseconds
Total Time:          46.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.0 seconds, 73.8%
Fitness Testing:      7.2 seconds, 15.7%
Report:               4.8 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -94                 | Program output: -94                
Correct output: -47                 | Program output: -47                
Correct output: -80                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 28                 
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: 70                  | Program output: 70                 
Correct output: -43                 | Program output: 49                 
Correct output: 55                  | Program output: 55                 
Correct output: -87                 | Program output: -87                
Correct output: 88                  | Program output: 88                 
Correct output: -73                 | Program output: -73                
Correct output: 28                  | Program output: 28                 
Correct output: 18                  | Program output: 22                 
Correct output: 7                   | Program output: 12                 
Correct output: 14                  | Program output: 61                 
Correct output: 33                  | Program output: 69                 
Correct output: 60                  | Program output: 60                 
Correct output: 43                  | Program output: 91                 
Correct output: 9                   | Program output: 43                 
Correct output: 39                  | Program output: 82                 
Correct output: 14                  | Program output: 45                 
Correct output: 0                   | Program output: 53                 
Correct output: 2                   | Program output: 79                 
Correct output: 8                   | Program output: 49                 
Correct output: 35                  | Program output: 48                 
Correct output: 11                  | Program output: 31                 
Correct output: 50                  | Program output: 50                 
Correct output: 3                   | Program output: 15                 
Correct output: 3                   | Program output: 95                 
Correct output: 41                  | Program output: 72                 
Correct output: 31                  | Program output: 31                 
Correct output: 34                  | Program output: 73                 
Correct output: -92                 | Program output: -36                
Correct output: -37                 | Program output: -30                
Correct output: -62                 | Program output: 12                 
Correct output: -100                | Program output: 5                  
Correct output: -61                 | Program output: 62                 
Correct output: -20                 | Program output: -10                
Correct output: -51                 | Program output: 19                 
Correct output: -61                 | Program output: -61                
Correct output: -44                 | Program output: -25                
Correct output: -75                 | Program output: -75                
Correct output: -85                 | Program output: -65                
Correct output: -97                 | Program output: 22                 
Correct output: -91                 | Program output: 16                 
Correct output: -4                  | Program output: 47                 
Correct output: -89                 | Program output: 14                 
Correct output: -80                 | Program output: 81                 
Correct output: -65                 | Program output: -45                
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -27                
Correct output: -49                 | Program output: 81                 
Correct output: -81                 | Program output: 34                 
Correct output: -34                 | Program output: 86                 
Correct output: -38                 | Program output: -38                
Correct output: -55                 | Program output: 4                  
Correct output: -62                 | Program output: 79                 
Correct output: -98                 | Program output: -62                
Correct output: -71                 | Program output: 41                 
Correct output: -97                 | Program output: 19                 
Correct output: -97                 | Program output: 85                 
Correct output: -68                 | Program output: 49                 
Correct output: -75                 | Program output: 83                 
Correct output: -55                 | Program output: -55                
Correct output: -57                 | Program output: 100                
Correct output: -78                 | Program output: -4                 
Correct output: -43                 | Program output: 74                 
Correct output: -29                 | Program output: -29                
Correct output: -58                 | Program output: 64                 
Correct output: -66                 | Program output: -19                
Correct output: -68                 | Program output: 58                 
Correct output: -39                 | Program output: 77                 
Correct output: -55                 | Program output: 93                 
Correct output: -90                 | Program output: -90                
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: 22                 
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: 82                 
Correct output: 2                   | Program output: 2                  
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -58                
Correct output: -97                 | Program output: -51                
Correct output: -88                 | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: 11                 
Correct output: -75                 | Program output: 24                 
Correct output: -67                 | Program output: 61                 
Correct output: -42                 | Program output: -40                
Correct output: -32                 | Program output: 72                 
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: 73                 
Correct output: -62                 | Program output: 68                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 2, :instruction integer_gte} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer})
Lexicase best program: (integer_mod integer_mod exec_eq exec_k (integer_dup_times boolean_and integer_dup_times) (in2 integer_gte) boolean_stackdepth integer_div integer_lte integer_lt boolean_pop print_integer)
Lexicase best errors: [1 1 1 1 0 0 1 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 18
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 2, :instruction integer_gte} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer})
Zero cases best program: (integer_mod integer_mod exec_eq exec_k (integer_dup_times boolean_and integer_dup_times) (in2 integer_gte) boolean_stackdepth integer_div integer_lte integer_lt boolean_pop print_integer)
Zero cases best errors: [1 1 1 1 0 0 1 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 18
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 382 1000 66 460 460 1000 1000 1000 460)
Population mean number of elite cases: 6.83
Count of perfect (error zero) individuals by case: (0 382 0 66 460 460 0 0 0 460)
Population mean number of perfect (error zero) cases: 1.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 2, :instruction integer_gte} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer})
Best program: (integer_mod integer_mod exec_eq exec_k (integer_dup_times boolean_and integer_dup_times) (in2 integer_gte) boolean_stackdepth integer_div integer_lte integer_lt boolean_pop print_integer)
Errors: [1 1 1 1 0 0 1 1 1 0]
Total: 7
Mean: 0.7
Genome size: 15
Size: 18
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 8.172
Median total errors in population: 9
Error averages by case: (1.0 0.618 1.0 0.934 0.54 0.54 1.0 1.0 1.0 0.54)
Error minima by case: (1 0 1 0 0 0 1 1 1 0)
Average genome size in population (length): 17.602
Average program size in population (points): 22.055
Average percent parens in population: 0.194
Minimum age in population: 22.59210205078125
Maximum age in population: 27.73130798339844
Average age in population: 25.34181176757812
Median age in population: 25.42841339111328
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 162
Genome diversity (% unique genomes):	 0.387
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 174
Syntactic diversity (% unique Push programs):	 0.357
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 5520728
--- Timings ---
Current time: 1559583120147 milliseconds
Total Time:          48.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.0 seconds, 74.4%
Fitness Testing:      7.4 seconds, 15.3%
Report:               4.9 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -94                 | Program output: 91                 
Correct output: -47                 | Program output: -13                
Correct output: -80                 | Program output: 65                 
Correct output: 0                   | Program output: 79                 
Correct output: 28                  | Program output: 28                 
Correct output: -14                 | Program output: 8                  
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: 70                  | Program output: 81                 
Correct output: -43                 | Program output: -43                
Correct output: 55                  | Program output: 55                 
Correct output: -87                 | Program output: -87                
Correct output: 88                  | Program output: 88                 
Correct output: -73                 | Program output: -73                
Correct output: 28                  | Program output: 28                 
Correct output: 18                  | Program output: 79                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 85                 
Correct output: 33                  | Program output: 45                 
Correct output: 60                  | Program output: 87                 
Correct output: 43                  | Program output: 43                 
Correct output: 9                   | Program output: 9                  
Correct output: 39                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 0                   | Program output: 53                 
Correct output: 2                   | Program output: 25                 
Correct output: 8                   | Program output: 57                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 50                  | Program output: 64                 
Correct output: 3                   | Program output: 25                 
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 50                 
Correct output: 31                  | Program output: 66                 
Correct output: 34                  | Program output: 95                 
Correct output: -92                 | Program output: 83                 
Correct output: -37                 | Program output: -28                
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: 19                 
Correct output: -61                 | Program output: 1                  
Correct output: -20                 | Program output: -20                
Correct output: -51                 | Program output: -51                
Correct output: -61                 | Program output: -8                 
Correct output: -44                 | Program output: 73                 
Correct output: -75                 | Program output: 78                 
Correct output: -85                 | Program output: -52                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 65                 
Correct output: -4                  | Program output: 41                 
Correct output: -89                 | Program output: 12                 
Correct output: -80                 | Program output: -80                
Correct output: -65                 | Program output: -65                
Correct output: -88                 | Program output: -73                
Correct output: -95                 | Program output: -95                
Correct output: -49                 | Program output: 67                 
Correct output: -81                 | Program output: -47                
Correct output: -34                 | Program output: -34                
Correct output: -38                 | Program output: -37                
Correct output: -55                 | Program output: 20                 
Correct output: -62                 | Program output: 92                 
Correct output: -98                 | Program output: 53                 
Correct output: -71                 | Program output: 79                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -75                 | Program output: 83                 
Correct output: -55                 | Program output: 55                 
Correct output: -57                 | Program output: -23                
Correct output: -78                 | Program output: -78                
Correct output: -43                 | Program output: 40                 
Correct output: -29                 | Program output: -8                 
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -13                
Correct output: -68                 | Program output: 19                 
Correct output: -39                 | Program output: 15                 
Correct output: -55                 | Program output: -26                
Correct output: -90                 | Program output: 87                 
Correct output: -99                 | Program output: 17                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: 21                 
Correct output: -60                 | Program output: -12                
Correct output: 2                   | Program output: 34                 
Correct output: -60                 | Program output: 65                 
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -7                 
Correct output: -88                 | Program output: -26                
Correct output: -75                 | Program output: 97                 
Correct output: -73                 | Program output: 25                 
Correct output: -75                 | Program output: -75                
Correct output: -67                 | Program output: -3                 
Correct output: -42                 | Program output: -42                
Correct output: -32                 | Program output: 64                 
Correct output: -89                 | Program output: 39                 
Correct output: -50                 | Program output: -50                
Correct output: -62                 | Program output: -51                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_dup})
Lexicase best program: (in1 boolean_swap exec_k (integer_dup_times) (in2 integer_min integer_yankdup) integer_mod print_integer integer_gte integer_dup)
Lexicase best errors: [0 0 1 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 14
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_dup})
Zero cases best program: (in1 boolean_swap exec_k (integer_dup_times) (in2 integer_min integer_yankdup) integer_mod print_integer integer_gte integer_dup)
Zero cases best errors: [0 0 1 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 14
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 2 153 153 726 169 153 569 2 570)
Population mean number of elite cases: 2.50
Count of perfect (error zero) individuals by case: (3 2 153 153 726 169 153 569 2 570)
Population mean number of perfect (error zero) cases: 2.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer})
Best program: (in1 boolean_swap exec_k (integer_dup_times) (boolean_and exec_pop () in2 exec_swap (boolean_xor in2 boolean_frominteger integer_yankdup) (integer_mod print_integer boolean_stackdepth)) integer_div integer_lte integer_lt boolean_pop print_integer)
Errors: [0 0 1 1 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 20
Size: 26
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 7.5
Median total errors in population: 7
Error averages by case: (0.997 0.998 0.847 0.847 0.274 0.831 0.847 0.431 0.998 0.43)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 16.662
Average program size in population (points): 21.133
Average percent parens in population: 0.206
Minimum age in population: 24.25152587890625
Maximum age in population: 29.04409790039062
Average age in population: 26.82409035491943
Median age in population: 26.89838409423828
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 184
Genome diversity (% unique genomes):	 0.364
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 208
Syntactic diversity (% unique Push programs):	 0.339
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 5661719
--- Timings ---
Current time: 1559583122472 milliseconds
Total Time:          50.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.0 seconds, 75.0%
Fitness Testing:      7.6 seconds, 14.9%
Report:               5.0 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -94                 | Program output: -94                
Correct output: -47                 | Program output: -13                
Correct output: -80                 | Program output: 65                 
Correct output: 0                   | Program output: 79                 
Correct output: 28                  | Program output: 74                 
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -12                
Correct output: -68                 | Program output: -68                
Correct output: 70                  | Program output: 70                 
Correct output: -43                 | Program output: -43                
Correct output: 55                  | Program output: 55                 
Correct output: -87                 | Program output: -87                
Correct output: 88                  | Program output: 88                 
Correct output: -73                 | Program output: -73                
Correct output: 28                  | Program output: 28                 
Correct output: 18                  | Program output: 66                 
Correct output: 7                   | Program output: 21                 
Correct output: 14                  | Program output: 14                 
Correct output: 33                  | Program output: 33                 
Correct output: 60                  | Program output: 60                 
Correct output: 43                  | Program output: 73                 
Correct output: 9                   | Program output: 60                 
Correct output: 39                  | Program output: 56                 
Correct output: 14                  | Program output: 88                 
Correct output: 0                   | Program output: 22                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 76                 
Correct output: 50                  | Program output: 55                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 46                 
Correct output: 41                  | Program output: 84                 
Correct output: 31                  | Program output: 72                 
Correct output: 34                  | Program output: 34                 
Correct output: -92                 | Program output: -92                
Correct output: -37                 | Program output: 96                 
Correct output: -62                 | Program output: 29                 
Correct output: -100                | Program output: 16                 
Correct output: -61                 | Program output: 13                 
Correct output: -20                 | Program output: 14                 
Correct output: -51                 | Program output: -36                
Correct output: -61                 | Program output: -60                
Correct output: -44                 | Program output: -44                
Correct output: -75                 | Program output: -42                
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: -18                
Correct output: -91                 | Program output: -91                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: 13                 
Correct output: -80                 | Program output: -63                
Correct output: -65                 | Program output: 0                  
Correct output: -88                 | Program output: 91                 
Correct output: -95                 | Program output: -9                 
Correct output: -49                 | Program output: -49                
Correct output: -81                 | Program output: -81                
Correct output: -34                 | Program output: -33                
Correct output: -38                 | Program output: -6                 
Correct output: -55                 | Program output: 8                  
Correct output: -62                 | Program output: 43                 
Correct output: -98                 | Program output: 21                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -67                
Correct output: -97                 | Program output: 2                  
Correct output: -68                 | Program output: 67                 
Correct output: -75                 | Program output: -75                
Correct output: -55                 | Program output: -9                 
Correct output: -57                 | Program output: -57                
Correct output: -78                 | Program output: 41                 
Correct output: -43                 | Program output: -43                
Correct output: -29                 | Program output: 34                 
Correct output: -58                 | Program output: 80                 
Correct output: -66                 | Program output: 56                 
Correct output: -68                 | Program output: 97                 
Correct output: -39                 | Program output: -39                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -19                
Correct output: -99                 | Program output: 58                 
Correct output: -81                 | Program output: -30                
Correct output: -96                 | Program output: 47                 
Correct output: -60                 | Program output: -28                
Correct output: 2                   | Program output: 17                 
Correct output: -60                 | Program output: -26                
Correct output: -61                 | Program output: 79                 
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: 66                 
Correct output: -75                 | Program output: 50                 
Correct output: -73                 | Program output: -73                
Correct output: -75                 | Program output: 52                 
Correct output: -67                 | Program output: 50                 
Correct output: -42                 | Program output: 79                 
Correct output: -32                 | Program output: -32                
Correct output: -89                 | Program output: 9                  
Correct output: -50                 | Program output: 64                 
Correct output: -62                 | Program output: 34                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction tagged_598} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_rot})
Lexicase best program: (integer_gt exec_empty in4 boolean_eq exec_while (exec_flush) integer_shove integer_sub print_integer exec_flush integer_inc integer_dec tagged_598 boolean_or integer_dup_times boolean_xor integer_div integer_stackdepth integer_empty integer_empty exec_rot () () ())
Lexicase best errors: [1 0 0 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 26
Percent parens: 0.192
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction tagged_598} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_rot})
Zero cases best program: (integer_gt exec_empty in4 boolean_eq exec_while (exec_flush) integer_shove integer_sub print_integer exec_flush integer_inc integer_dec tagged_598 boolean_or integer_dup_times boolean_xor integer_div integer_stackdepth integer_empty integer_empty exec_rot () () ())
Zero cases best errors: [1 0 0 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 26
Percent parens: 0.192
--- Lexicase Population Statistics ---
Count of elite individuals by case: (461 779 300 461 1000 299 1000 187 466 190)
Population mean number of elite cases: 5.14
Count of perfect (error zero) individuals by case: (461 779 300 461 0 299 0 187 466 190)
Population mean number of perfect (error zero) cases: 3.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_flush})
Best program: (integer_gt exec_empty in4 boolean_eq exec_while (exec_flush integer_shove) integer_sub print_integer exec_flush exec_swap () () exec_when (exec_do*count (boolean_flush) boolean_empty integer_dec boolean_rot) boolean_invert_second_then_and integer_dec integer_flush boolean_empty exec_flush)
Errors: [1 0 0 1 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 22
Size: 28
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 6.857
Median total errors in population: 6
Error averages by case: (0.539 0.221 0.7 0.539 1.0 0.701 1.0 0.813 0.534 0.81)
Error minima by case: (0 0 0 0 1 0 1 0 0 0)
Average genome size in population (length): 17.272
Average program size in population (points): 21.896
Average percent parens in population: 0.205
Minimum age in population: 25.3697509765625
Maximum age in population: 30.42333984375
Average age in population: 28.56061919403076
Median age in population: 28.56494140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 225
Genome diversity (% unique genomes):	 0.357
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 228
Syntactic diversity (% unique Push programs):	 0.328
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 5788724
--- Timings ---
Current time: 1559583124633 milliseconds
Total Time:          52.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.9 seconds, 75.5%
Fitness Testing:      7.7 seconds, 14.6%
Report:               5.1 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -94                 | Program output: -94                
Correct output: -47                 | Program output: -13                
Correct output: -80                 | Program output: 65                 
Correct output: 0                   | Program output: 79                 
Correct output: 28                  | Program output: 74                 
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -12                
Correct output: -68                 | Program output: -68                
Correct output: 70                  | Program output: 70                 
Correct output: -43                 | Program output: -43                
Correct output: 55                  | Program output: 55                 
Correct output: -87                 | Program output: -87                
Correct output: 88                  | Program output: 88                 
Correct output: -73                 | Program output: -73                
Correct output: 28                  | Program output: 28                 
Correct output: 18                  | Program output: 66                 
Correct output: 7                   | Program output: 21                 
Correct output: 14                  | Program output: 14                 
Correct output: 33                  | Program output: 33                 
Correct output: 60                  | Program output: 60                 
Correct output: 43                  | Program output: 73                 
Correct output: 9                   | Program output: 60                 
Correct output: 39                  | Program output: 56                 
Correct output: 14                  | Program output: 88                 
Correct output: 0                   | Program output: 22                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 76                 
Correct output: 50                  | Program output: 55                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 46                 
Correct output: 41                  | Program output: 84                 
Correct output: 31                  | Program output: 72                 
Correct output: 34                  | Program output: 34                 
Correct output: -92                 | Program output: -92                
Correct output: -37                 | Program output: 96                 
Correct output: -62                 | Program output: 29                 
Correct output: -100                | Program output: 16                 
Correct output: -61                 | Program output: 13                 
Correct output: -20                 | Program output: 14                 
Correct output: -51                 | Program output: -36                
Correct output: -61                 | Program output: -60                
Correct output: -44                 | Program output: -44                
Correct output: -75                 | Program output: -42                
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: -18                
Correct output: -91                 | Program output: -91                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: 13                 
Correct output: -80                 | Program output: -63                
Correct output: -65                 | Program output: 0                  
Correct output: -88                 | Program output: 91                 
Correct output: -95                 | Program output: -9                 
Correct output: -49                 | Program output: -49                
Correct output: -81                 | Program output: -81                
Correct output: -34                 | Program output: -33                
Correct output: -38                 | Program output: -6                 
Correct output: -55                 | Program output: 8                  
Correct output: -62                 | Program output: 43                 
Correct output: -98                 | Program output: 21                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -67                
Correct output: -97                 | Program output: 2                  
Correct output: -68                 | Program output: 67                 
Correct output: -75                 | Program output: -75                
Correct output: -55                 | Program output: -9                 
Correct output: -57                 | Program output: -57                
Correct output: -78                 | Program output: 41                 
Correct output: -43                 | Program output: -43                
Correct output: -29                 | Program output: 34                 
Correct output: -58                 | Program output: 80                 
Correct output: -66                 | Program output: 56                 
Correct output: -68                 | Program output: 97                 
Correct output: -39                 | Program output: -39                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -19                
Correct output: -99                 | Program output: 58                 
Correct output: -81                 | Program output: -30                
Correct output: -96                 | Program output: 47                 
Correct output: -60                 | Program output: -28                
Correct output: 2                   | Program output: 17                 
Correct output: -60                 | Program output: -26                
Correct output: -61                 | Program output: 79                 
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: 66                 
Correct output: -75                 | Program output: 50                 
Correct output: -73                 | Program output: -73                
Correct output: -75                 | Program output: 52                 
Correct output: -67                 | Program output: 50                 
Correct output: -42                 | Program output: 79                 
Correct output: -32                 | Program output: -32                
Correct output: -89                 | Program output: 9                  
Correct output: -50                 | Program output: 64                 
Correct output: -62                 | Program output: 34                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction tagged_598} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (boolean_yankdup exec_empty in4 boolean_eq exec_while (exec_flush) integer_shove integer_sub print_integer exec_flush integer_inc integer_dec tagged_598 boolean_or integer_flush boolean_xor integer_yankdup boolean_or exec_y_when_autoconstructing (integer_flush integer_dup_items) boolean_invert_first_then_and integer_dup_items in3 exec_k_when_autoconstructing (exec_y_when_autoconstructing ()) ())
Lexicase best errors: [0 1 1 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 32
Percent parens: 0.188
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction tagged_598} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (boolean_yankdup exec_empty in4 boolean_eq exec_while (exec_flush) integer_shove integer_sub print_integer exec_flush integer_inc integer_dec tagged_598 boolean_or integer_flush boolean_xor integer_yankdup boolean_or exec_y_when_autoconstructing (integer_flush integer_dup_items) boolean_invert_first_then_and integer_dup_items in3 exec_k_when_autoconstructing (exec_y_when_autoconstructing ()) ())
Zero cases best errors: [0 1 1 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 32
Percent parens: 0.188
--- Lexicase Population Statistics ---
Count of elite individuals by case: (502 10 10 490 491 489 488 395 6 10)
Population mean number of elite cases: 2.89
Count of perfect (error zero) individuals by case: (502 10 10 490 491 489 488 395 6 10)
Population mean number of perfect (error zero) cases: 2.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_while} {:close 1, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 1, :instruction print_integer})
Best program: (boolean_not exec_eq exec_s_when_autoconstructing (boolean_or) (integer_yankdup) (exec_while () in4) integer_div integer_lte integer_lt boolean_pop print_integer)
Errors: [0 1 1 0 0 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 12
Size: 17
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 7.109
Median total errors in population: 8
Error averages by case: (0.498 0.99 0.99 0.51 0.509 0.511 0.512 0.605 0.994 0.99)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.124
Average program size in population (points): 25.602
Average percent parens in population: 0.205
Minimum age in population: 27.05361938476562
Maximum age in population: 32.12590599060059
Average age in population: 30.04509782409668
Median age in population: 30.11267185211182
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 186
Genome diversity (% unique genomes):	 0.409
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 192
Syntactic diversity (% unique Push programs):	 0.377
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 5929923
--- Timings ---
Current time: 1559583126882 milliseconds
Total Time:          55.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.9 seconds, 76.0%
Fitness Testing:      7.9 seconds, 14.3%
Report:               5.2 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 418
Test mean error for best: 0.41800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -94                 | Program output: -94                
Correct output: -47                 | Program output: -47                
Correct output: -80                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 28                 
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: 70                  | Program output: 70                 
Correct output: -43                 | Program output: -43                
Correct output: 55                  | Program output: 55                 
Correct output: -87                 | Program output: -87                
Correct output: 88                  | Program output: 88                 
Correct output: -73                 | Program output: -73                
Correct output: 28                  | Program output: 28                 
Correct output: 18                  | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 61                 
Correct output: 33                  | Program output: 45                 
Correct output: 60                  | Program output: 60                 
Correct output: 43                  | Program output: 43                 
Correct output: 9                   | Program output: 9                  
Correct output: 39                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 0                   | Program output: 53                 
Correct output: 2                   | Program output: 25                 
Correct output: 8                   | Program output: 49                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 50                  | Program output: 50                 
Correct output: 3                   | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 50                 
Correct output: 31                  | Program output: 31                 
Correct output: 34                  | Program output: 73                 
Correct output: -92                 | Program output: -36                
Correct output: -37                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: 5                  
Correct output: -61                 | Program output: 1                  
Correct output: -20                 | Program output: -20                
Correct output: -51                 | Program output: -51                
Correct output: -61                 | Program output: -61                
Correct output: -44                 | Program output: -25                
Correct output: -75                 | Program output: -75                
Correct output: -85                 | Program output: -65                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 16                 
Correct output: -4                  | Program output: 41                 
Correct output: -89                 | Program output: 12                 
Correct output: -80                 | Program output: -80                
Correct output: -65                 | Program output: -65                
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -95                
Correct output: -49                 | Program output: 67                 
Correct output: -81                 | Program output: -47                
Correct output: -34                 | Program output: -34                
Correct output: -38                 | Program output: -38                
Correct output: -55                 | Program output: 4                  
Correct output: -62                 | Program output: 79                 
Correct output: -98                 | Program output: -62                
Correct output: -71                 | Program output: 41                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -75                 | Program output: 83                 
Correct output: -55                 | Program output: -55                
Correct output: -57                 | Program output: -23                
Correct output: -78                 | Program output: -78                
Correct output: -43                 | Program output: 40                 
Correct output: -29                 | Program output: -29                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -19                
Correct output: -68                 | Program output: 19                 
Correct output: -39                 | Program output: 15                 
Correct output: -55                 | Program output: -26                
Correct output: -90                 | Program output: -90                
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -12                
Correct output: 2                   | Program output: 2                  
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -51                
Correct output: -88                 | Program output: -26                
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: 11                 
Correct output: -75                 | Program output: -75                
Correct output: -67                 | Program output: -3                 
Correct output: -42                 | Program output: -42                
Correct output: -32                 | Program output: 64                 
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: -50                
Correct output: -62                 | Program output: -51                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_dup})
Lexicase best program: (in1 exec_eq exec_k (integer_dup_times) (in2 integer_min integer_yankdup) integer_mod print_integer integer_gte integer_dup)
Lexicase best errors: [0 0 0 1 1 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 14
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_dup})
Zero cases best program: (in1 exec_eq exec_k (integer_dup_times) (in2 integer_min integer_yankdup) integer_mod print_integer integer_gte integer_dup)
Zero cases best errors: [0 0 0 1 1 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 14
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (441 910 915 383 93 446 440 93 93 440)
Population mean number of elite cases: 4.25
Count of perfect (error zero) individuals by case: (441 910 915 383 93 446 440 93 93 440)
Population mean number of perfect (error zero) cases: 4.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_stackdepth})
Best program: (in1 integer_dup_times in2 integer_min integer_yankdup integer_mod print_integer integer_gte integer_stackdepth)
Errors: [0 0 0 1 1 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 9
Size: 10
Percent parens: 0.100
--- Population Statistics ---
Average total errors in population: 5.746
Median total errors in population: 5
Error averages by case: (0.559 0.09 0.085 0.617 0.907 0.554 0.56 0.907 0.907 0.56)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 17.912
Average program size in population (points): 22.595
Average percent parens in population: 0.183
Minimum age in population: 28.05361938476562
Maximum age in population: 33.36036109924316
Average age in population: 31.77391304397583
Median age in population: 31.85238456726074
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 82
Genome diversity (% unique genomes):	 0.383
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 86
Syntactic diversity (% unique Push programs):	 0.343
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 6086686
--- Timings ---
Current time: 1559583129059 milliseconds
Total Time:          57.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.8 seconds, 76.4%
Fitness Testing:      8.1 seconds, 14.1%
Report:               5.3 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -94                 | Program output: -94                
Correct output: -47                 | Program output: -13                
Correct output: -80                 | Program output: 65                 
Correct output: 0                   | Program output: 79                 
Correct output: 28                  | Program output: 74                 
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -12                
Correct output: -68                 | Program output: -68                
Correct output: 70                  | Program output: 70                 
Correct output: -43                 | Program output: -43                
Correct output: 55                  | Program output: 55                 
Correct output: -87                 | Program output: -87                
Correct output: 88                  | Program output: 88                 
Correct output: -73                 | Program output: -73                
Correct output: 28                  | Program output: 28                 
Correct output: 18                  | Program output: 66                 
Correct output: 7                   | Program output: 21                 
Correct output: 14                  | Program output: 14                 
Correct output: 33                  | Program output: 33                 
Correct output: 60                  | Program output: 60                 
Correct output: 43                  | Program output: 73                 
Correct output: 9                   | Program output: 60                 
Correct output: 39                  | Program output: 56                 
Correct output: 14                  | Program output: 88                 
Correct output: 0                   | Program output: 22                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 76                 
Correct output: 50                  | Program output: 55                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 46                 
Correct output: 41                  | Program output: 84                 
Correct output: 31                  | Program output: 72                 
Correct output: 34                  | Program output: 34                 
Correct output: -92                 | Program output: -92                
Correct output: -37                 | Program output: 96                 
Correct output: -62                 | Program output: 29                 
Correct output: -100                | Program output: 16                 
Correct output: -61                 | Program output: 13                 
Correct output: -20                 | Program output: 14                 
Correct output: -51                 | Program output: -36                
Correct output: -61                 | Program output: -60                
Correct output: -44                 | Program output: -44                
Correct output: -75                 | Program output: -42                
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: -18                
Correct output: -91                 | Program output: -91                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: 13                 
Correct output: -80                 | Program output: -63                
Correct output: -65                 | Program output: 0                  
Correct output: -88                 | Program output: 91                 
Correct output: -95                 | Program output: -9                 
Correct output: -49                 | Program output: -49                
Correct output: -81                 | Program output: -81                
Correct output: -34                 | Program output: -33                
Correct output: -38                 | Program output: -6                 
Correct output: -55                 | Program output: 8                  
Correct output: -62                 | Program output: 43                 
Correct output: -98                 | Program output: 21                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -67                
Correct output: -97                 | Program output: 2                  
Correct output: -68                 | Program output: 67                 
Correct output: -75                 | Program output: -75                
Correct output: -55                 | Program output: -9                 
Correct output: -57                 | Program output: -57                
Correct output: -78                 | Program output: 41                 
Correct output: -43                 | Program output: -43                
Correct output: -29                 | Program output: 34                 
Correct output: -58                 | Program output: 80                 
Correct output: -66                 | Program output: 56                 
Correct output: -68                 | Program output: 97                 
Correct output: -39                 | Program output: -39                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -19                
Correct output: -99                 | Program output: 58                 
Correct output: -81                 | Program output: -30                
Correct output: -96                 | Program output: 47                 
Correct output: -60                 | Program output: -28                
Correct output: 2                   | Program output: 17                 
Correct output: -60                 | Program output: -26                
Correct output: -61                 | Program output: 79                 
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: 66                 
Correct output: -75                 | Program output: 50                 
Correct output: -73                 | Program output: -73                
Correct output: -75                 | Program output: 52                 
Correct output: -67                 | Program output: 50                 
Correct output: -42                 | Program output: 79                 
Correct output: -32                 | Program output: -32                
Correct output: -89                 | Program output: 9                  
Correct output: -50                 | Program output: 64                 
Correct output: -62                 | Program output: 34                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction tagged_598} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_rot})
Lexicase best program: (integer_gt exec_empty in4 boolean_eq exec_while (exec_flush) integer_shove integer_sub print_integer exec_flush integer_inc integer_dec tagged_598 boolean_or integer_dup_times boolean_xor integer_div integer_stackdepth integer_empty integer_empty exec_rot () () ())
Lexicase best errors: [0 0 0 0 0 1 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 26
Percent parens: 0.192
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction tagged_598} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_rot})
Zero cases best program: (integer_gt exec_empty in4 boolean_eq exec_while (exec_flush) integer_shove integer_sub print_integer exec_flush integer_inc integer_dec tagged_598 boolean_or integer_dup_times boolean_xor integer_div integer_stackdepth integer_empty integer_empty exec_rot () () ())
Zero cases best errors: [0 0 0 0 0 1 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 26
Percent parens: 0.192
--- Lexicase Population Statistics ---
Count of elite individuals by case: (907 121 121 121 121 479 463 121 465 310)
Population mean number of elite cases: 3.23
Count of perfect (error zero) individuals by case: (907 121 121 121 121 479 463 121 465 310)
Population mean number of perfect (error zero) cases: 3.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_swap} {:close 1, :instruction tagged_114} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction tag_boolean_580} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction tag_integer_203} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min})
Best program: (exec_k (boolean_shove) (integer_swap tagged_114) in2 in4 exec_empty integer_fromboolean boolean_yank boolean_dup_items exec_empty print_integer exec_while () boolean_yankdup integer_shove exec_do*range (integer_inc boolean_yankdup) tag_boolean_580 integer_yankdup exec_do*times () tag_integer_203 boolean_yankdup exec_do*range (integer_min))
Errors: [0 0 0 0 0 1 1 0 1 1]
Total: 4
Mean: 0.4
Genome size: 25
Size: 32
Percent parens: 0.219
--- Population Statistics ---
Average total errors in population: 6.771
Median total errors in population: 6
Error averages by case: (0.093 0.879 0.879 0.879 0.879 0.521 0.537 0.879 0.535 0.69)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 17.955
Average program size in population (points): 23.033
Average percent parens in population: 0.191
Minimum age in population: 30.76694107055664
Maximum age in population: 35.29132699966431
Average age in population: 33.4105079202652
Median age in population: 33.45042204856873
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 131
Genome diversity (% unique genomes):	 0.37
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 140
Syntactic diversity (% unique Push programs):	 0.335
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 6251873
--- Timings ---
Current time: 1559583131520 milliseconds
Total Time:          59.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.7 seconds, 76.8%
Fitness Testing:      8.3 seconds, 13.9%
Report:               5.4 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 418
Test mean error for best: 0.41800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -94                 | Program output: -94                
Correct output: -47                 | Program output: -47                
Correct output: -80                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 28                 
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: 70                  | Program output: 70                 
Correct output: -43                 | Program output: -43                
Correct output: 55                  | Program output: 55                 
Correct output: -87                 | Program output: -87                
Correct output: 88                  | Program output: 88                 
Correct output: -73                 | Program output: -73                
Correct output: 28                  | Program output: 28                 
Correct output: 18                  | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 61                 
Correct output: 33                  | Program output: 45                 
Correct output: 60                  | Program output: 60                 
Correct output: 43                  | Program output: 43                 
Correct output: 9                   | Program output: 9                  
Correct output: 39                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 0                   | Program output: 53                 
Correct output: 2                   | Program output: 25                 
Correct output: 8                   | Program output: 49                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 50                  | Program output: 50                 
Correct output: 3                   | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 50                 
Correct output: 31                  | Program output: 31                 
Correct output: 34                  | Program output: 73                 
Correct output: -92                 | Program output: -36                
Correct output: -37                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: 5                  
Correct output: -61                 | Program output: 1                  
Correct output: -20                 | Program output: -20                
Correct output: -51                 | Program output: -51                
Correct output: -61                 | Program output: -61                
Correct output: -44                 | Program output: -25                
Correct output: -75                 | Program output: -75                
Correct output: -85                 | Program output: -65                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 16                 
Correct output: -4                  | Program output: 41                 
Correct output: -89                 | Program output: 12                 
Correct output: -80                 | Program output: -80                
Correct output: -65                 | Program output: -65                
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -95                
Correct output: -49                 | Program output: 67                 
Correct output: -81                 | Program output: -47                
Correct output: -34                 | Program output: -34                
Correct output: -38                 | Program output: -38                
Correct output: -55                 | Program output: 4                  
Correct output: -62                 | Program output: 79                 
Correct output: -98                 | Program output: -62                
Correct output: -71                 | Program output: 41                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -75                 | Program output: 83                 
Correct output: -55                 | Program output: -55                
Correct output: -57                 | Program output: -23                
Correct output: -78                 | Program output: -78                
Correct output: -43                 | Program output: 40                 
Correct output: -29                 | Program output: -29                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -19                
Correct output: -68                 | Program output: 19                 
Correct output: -39                 | Program output: 15                 
Correct output: -55                 | Program output: -26                
Correct output: -90                 | Program output: -90                
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -12                
Correct output: 2                   | Program output: 2                  
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -51                
Correct output: -88                 | Program output: -26                
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: 11                 
Correct output: -75                 | Program output: -75                
Correct output: -67                 | Program output: -3                 
Correct output: -42                 | Program output: -42                
Correct output: -32                 | Program output: 64                 
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: -50                
Correct output: -62                 | Program output: -51                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte})
Lexicase best program: (in1 boolean_swap exec_swap (integer_dup_times) (in2 integer_min integer_yankdup) integer_mod print_integer integer_gte)
Lexicase best errors: [1 1 1 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 13
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte})
Zero cases best program: (in1 boolean_swap exec_swap (integer_dup_times) (in2 integer_min integer_yankdup) integer_mod print_integer integer_gte)
Zero cases best errors: [1 1 1 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 13
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (76 513 513 312 313 75 311 77 312 312)
Population mean number of elite cases: 2.81
Count of perfect (error zero) individuals by case: (76 513 513 312 313 75 311 77 312 312)
Population mean number of perfect (error zero) cases: 2.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_dup})
Best program: (in1 in2 integer_min integer_yankdup integer_mod print_integer integer_gte integer_dup)
Errors: [1 1 1 0 0 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 8
Size: 9
Percent parens: 0.111
--- Population Statistics ---
Average total errors in population: 7.186
Median total errors in population: 8
Error averages by case: (0.924 0.487 0.487 0.688 0.687 0.925 0.689 0.923 0.688 0.688)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 17.669
Average program size in population (points): 22.108
Average percent parens in population: 0.180
Minimum age in population: 31.76694107055664
Maximum age in population: 37.09359979629517
Average age in population: 34.82948368811607
Median age in population: 34.89738965034485
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 45
Genome diversity (% unique genomes):	 0.406
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.362
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 6387870
--- Timings ---
Current time: 1559583133698 milliseconds
Total Time:          61.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        47.6 seconds, 76.9%
Fitness Testing:      8.5 seconds, 13.7%
Report:               5.8 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 418
Test mean error for best: 0.41800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -94                 | Program output: -94                
Correct output: -47                 | Program output: -47                
Correct output: -80                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 28                 
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: 70                  | Program output: 70                 
Correct output: -43                 | Program output: -43                
Correct output: 55                  | Program output: 55                 
Correct output: -87                 | Program output: -87                
Correct output: 88                  | Program output: 88                 
Correct output: -73                 | Program output: -73                
Correct output: 28                  | Program output: 28                 
Correct output: 18                  | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 61                 
Correct output: 33                  | Program output: 45                 
Correct output: 60                  | Program output: 60                 
Correct output: 43                  | Program output: 43                 
Correct output: 9                   | Program output: 9                  
Correct output: 39                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 0                   | Program output: 53                 
Correct output: 2                   | Program output: 25                 
Correct output: 8                   | Program output: 49                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 50                  | Program output: 50                 
Correct output: 3                   | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 50                 
Correct output: 31                  | Program output: 31                 
Correct output: 34                  | Program output: 73                 
Correct output: -92                 | Program output: -36                
Correct output: -37                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: 5                  
Correct output: -61                 | Program output: 1                  
Correct output: -20                 | Program output: -20                
Correct output: -51                 | Program output: -51                
Correct output: -61                 | Program output: -61                
Correct output: -44                 | Program output: -25                
Correct output: -75                 | Program output: -75                
Correct output: -85                 | Program output: -65                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 16                 
Correct output: -4                  | Program output: 41                 
Correct output: -89                 | Program output: 12                 
Correct output: -80                 | Program output: -80                
Correct output: -65                 | Program output: -65                
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -95                
Correct output: -49                 | Program output: 67                 
Correct output: -81                 | Program output: -47                
Correct output: -34                 | Program output: -34                
Correct output: -38                 | Program output: -38                
Correct output: -55                 | Program output: 4                  
Correct output: -62                 | Program output: 79                 
Correct output: -98                 | Program output: -62                
Correct output: -71                 | Program output: 41                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -75                 | Program output: 83                 
Correct output: -55                 | Program output: -55                
Correct output: -57                 | Program output: -23                
Correct output: -78                 | Program output: -78                
Correct output: -43                 | Program output: 40                 
Correct output: -29                 | Program output: -29                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -19                
Correct output: -68                 | Program output: 19                 
Correct output: -39                 | Program output: 15                 
Correct output: -55                 | Program output: -26                
Correct output: -90                 | Program output: -90                
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -12                
Correct output: 2                   | Program output: 2                  
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -51                
Correct output: -88                 | Program output: -26                
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: 11                 
Correct output: -75                 | Program output: -75                
Correct output: -67                 | Program output: -3                 
Correct output: -42                 | Program output: -42                
Correct output: -32                 | Program output: 64                 
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: -50                
Correct output: -62                 | Program output: -51                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dup})
Lexicase best program: (in1 boolean_swap exec_k (integer_dup_times in2 integer_min) (integer_yankdup) integer_mod print_integer integer_gte integer_dup)
Lexicase best errors: [1 0 0 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 14
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dup})
Zero cases best program: (in1 boolean_swap exec_k (integer_dup_times in2 integer_min) (integer_yankdup) integer_mod print_integer integer_gte integer_dup)
Zero cases best errors: [1 0 0 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 14
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (447 463 462 269 177 907 462 464 463 462)
Population mean number of elite cases: 4.58
Count of perfect (error zero) individuals by case: (447 463 462 269 177 907 462 464 463 462)
Population mean number of perfect (error zero) cases: 4.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 1, :instruction tagged_598} {:close 1, :instruction integer_dup})
Best program: (in1 exec_eq exec_k (integer_dup_times) (in2 integer_min integer_yankdup) integer_mod print_integer print_integer exec_flush integer_inc integer_dec tagged_598 integer_dup)
Errors: [1 0 0 1 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 15
Size: 18
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 5.424
Median total errors in population: 7
Error averages by case: (0.553 0.537 0.538 0.731 0.823 0.093 0.538 0.536 0.537 0.538)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 17.033
Average program size in population (points): 21.644
Average percent parens in population: 0.188
Minimum age in population: 32.76694107055664
Maximum age in population: 38.26052927970886
Average age in population: 36.40249927306175
Median age in population: 36.44618010520935
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 69
Genome diversity (% unique genomes):	 0.429
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 81
Syntactic diversity (% unique Push programs):	 0.37
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 6540042
--- Timings ---
Current time: 1559583135949 milliseconds
Total Time:          64.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        49.5 seconds, 77.2%
Fitness Testing:      8.6 seconds, 13.5%
Report:               5.9 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 418
Test mean error for best: 0.41800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -94                 | Program output: -94                
Correct output: -47                 | Program output: -47                
Correct output: -80                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 28                 
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: 70                  | Program output: 70                 
Correct output: -43                 | Program output: -43                
Correct output: 55                  | Program output: 55                 
Correct output: -87                 | Program output: -87                
Correct output: 88                  | Program output: 88                 
Correct output: -73                 | Program output: -73                
Correct output: 28                  | Program output: 28                 
Correct output: 18                  | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 61                 
Correct output: 33                  | Program output: 45                 
Correct output: 60                  | Program output: 60                 
Correct output: 43                  | Program output: 43                 
Correct output: 9                   | Program output: 9                  
Correct output: 39                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 0                   | Program output: 53                 
Correct output: 2                   | Program output: 25                 
Correct output: 8                   | Program output: 49                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 50                  | Program output: 50                 
Correct output: 3                   | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 50                 
Correct output: 31                  | Program output: 31                 
Correct output: 34                  | Program output: 73                 
Correct output: -92                 | Program output: -36                
Correct output: -37                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: 5                  
Correct output: -61                 | Program output: 1                  
Correct output: -20                 | Program output: -20                
Correct output: -51                 | Program output: -51                
Correct output: -61                 | Program output: -61                
Correct output: -44                 | Program output: -25                
Correct output: -75                 | Program output: -75                
Correct output: -85                 | Program output: -65                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 16                 
Correct output: -4                  | Program output: 41                 
Correct output: -89                 | Program output: 12                 
Correct output: -80                 | Program output: -80                
Correct output: -65                 | Program output: -65                
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -95                
Correct output: -49                 | Program output: 67                 
Correct output: -81                 | Program output: -47                
Correct output: -34                 | Program output: -34                
Correct output: -38                 | Program output: -38                
Correct output: -55                 | Program output: 4                  
Correct output: -62                 | Program output: 79                 
Correct output: -98                 | Program output: -62                
Correct output: -71                 | Program output: 41                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -75                 | Program output: 83                 
Correct output: -55                 | Program output: -55                
Correct output: -57                 | Program output: -23                
Correct output: -78                 | Program output: -78                
Correct output: -43                 | Program output: 40                 
Correct output: -29                 | Program output: -29                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -19                
Correct output: -68                 | Program output: 19                 
Correct output: -39                 | Program output: 15                 
Correct output: -55                 | Program output: -26                
Correct output: -90                 | Program output: -90                
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -12                
Correct output: 2                   | Program output: 2                  
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -51                
Correct output: -88                 | Program output: -26                
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: 11                 
Correct output: -75                 | Program output: -75                
Correct output: -67                 | Program output: -3                 
Correct output: -42                 | Program output: -42                
Correct output: -32                 | Program output: 64                 
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: -50                
Correct output: -62                 | Program output: -51                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_dup})
Lexicase best program: (in1 in2 integer_min integer_yankdup integer_mod print_integer integer_gte integer_dup)
Lexicase best errors: [1 1 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 9
Percent parens: 0.111
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_dup})
Zero cases best program: (in1 in2 integer_min integer_yankdup integer_mod print_integer integer_gte integer_dup)
Zero cases best errors: [1 1 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 9
Percent parens: 0.111
--- Lexicase Population Statistics ---
Count of elite individuals by case: (162 162 618 619 129 619 620 618 918 619)
Population mean number of elite cases: 5.08
Count of perfect (error zero) individuals by case: (162 162 618 619 129 619 620 618 918 619)
Population mean number of perfect (error zero) cases: 5.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_dup})
Best program: (in1 boolean_swap exec_k (integer_dup_times) (in2 integer_min integer_yankdup) integer_dup_times in2 integer_min integer_yankdup integer_div print_integer integer_gte integer_dup)
Errors: [1 1 0 0 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 15
Size: 18
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 4.916
Median total errors in population: 3
Error averages by case: (0.838 0.838 0.382 0.381 0.871 0.381 0.38 0.382 0.082 0.381)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 14.241
Average program size in population (points): 17.732
Average percent parens in population: 0.173
Minimum age in population: 33.76694107055664
Maximum age in population: 39.59884995222092
Average age in population: 37.87104187053442
Median age in population: 37.94518598914146
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 73
Genome diversity (% unique genomes):	 0.41
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 89
Syntactic diversity (% unique Push programs):	 0.352
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 6669855
--- Timings ---
Current time: 1559583138048 milliseconds
Total Time:          66.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        51.4 seconds, 77.6%
Fitness Testing:      8.8 seconds, 13.3%
Report:               6.0 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 204
Test mean error for best: 0.20400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -94                 | Program output: -94                
Correct output: -47                 | Program output: -47                
Correct output: -80                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 28                 
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: 70                  | Program output: 70                 
Correct output: -43                 | Program output: -43                
Correct output: 55                  | Program output: 55                 
Correct output: -87                 | Program output: -87                
Correct output: 88                  | Program output: 88                 
Correct output: -73                 | Program output: -73                
Correct output: 28                  | Program output: 28                 
Correct output: 18                  | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 33                  | Program output: 33                 
Correct output: 60                  | Program output: 60                 
Correct output: 43                  | Program output: 43                 
Correct output: 9                   | Program output: 9                  
Correct output: 39                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 0                   | Program output: 22                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 50                  | Program output: 50                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 50                 
Correct output: 31                  | Program output: 31                 
Correct output: 34                  | Program output: 34                 
Correct output: -92                 | Program output: -92                
Correct output: -37                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: 5                  
Correct output: -61                 | Program output: 1                  
Correct output: -20                 | Program output: -20                
Correct output: -51                 | Program output: -51                
Correct output: -61                 | Program output: -61                
Correct output: -44                 | Program output: -44                
Correct output: -75                 | Program output: -75                
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: 12                 
Correct output: -80                 | Program output: -80                
Correct output: -65                 | Program output: -65                
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -95                
Correct output: -49                 | Program output: -49                
Correct output: -81                 | Program output: -81                
Correct output: -34                 | Program output: -34                
Correct output: -38                 | Program output: -38                
Correct output: -55                 | Program output: 4                  
Correct output: -62                 | Program output: 43                 
Correct output: -98                 | Program output: -62                
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -75                 | Program output: -75                
Correct output: -55                 | Program output: -55                
Correct output: -57                 | Program output: -57                
Correct output: -78                 | Program output: -78                
Correct output: -43                 | Program output: -43                
Correct output: -29                 | Program output: -29                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -19                
Correct output: -68                 | Program output: 19                 
Correct output: -39                 | Program output: -39                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -90                
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -28                
Correct output: 2                   | Program output: 2                  
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -26                
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -73                
Correct output: -75                 | Program output: -75                
Correct output: -67                 | Program output: -3                 
Correct output: -42                 | Program output: -42                
Correct output: -32                 | Program output: -32                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: -50                
Correct output: -62                 | Program output: -51                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_dup})
Lexicase best program: (in1 boolean_swap exec_swap (integer_dup_times) (integer_gt boolean_yankdup in4 boolean_eq exec_while (exec_flush) integer_min) integer_yankdup integer_yankdup integer_dup_times in2 integer_min integer_yankdup integer_mod print_integer integer_gte integer_dup)
Lexicase best errors: [1 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 25
Percent parens: 0.160
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_dup})
Zero cases best program: (in1 boolean_swap exec_swap (integer_dup_times) (integer_gt boolean_yankdup in4 boolean_eq exec_while (exec_flush) integer_min) integer_yankdup integer_yankdup integer_dup_times in2 integer_min integer_yankdup integer_mod print_integer integer_gte integer_dup)
Zero cases best errors: [1 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 25
Percent parens: 0.160
--- Lexicase Population Statistics ---
Count of elite individuals by case: (109 256 256 814 931 564 941 256 934 122)
Population mean number of elite cases: 5.18
Count of perfect (error zero) individuals by case: (109 256 256 814 931 564 941 256 934 122)
Population mean number of perfect (error zero) cases: 5.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_dup})
Best program: (in1 boolean_swap boolean_shove integer_dup_times in4 boolean_eq exec_while (exec_flush) integer_min integer_yankdup integer_yankdup integer_dup_times in2 integer_min integer_yankdup integer_mod print_integer integer_gte integer_dup)
Errors: [1 0 0 0 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 19
Size: 21
Percent parens: 0.095
--- Population Statistics ---
Average total errors in population: 4.817
Median total errors in population: 5
Error averages by case: (0.891 0.744 0.744 0.186 0.069 0.436 0.059 0.744 0.066 0.878)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 14.252
Average program size in population (points): 17.091
Average percent parens in population: 0.153
Minimum age in population: 35.91010165214539
Maximum age in population: 41.40444996953011
Average age in population: 39.24668444517255
Median age in population: 39.32828964293003
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 211
Genome diversity (% unique genomes):	 0.335
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 227
Syntactic diversity (% unique Push programs):	 0.28
Total error diversity:				 0.009
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 6802927
--- Timings ---
Current time: 1559583140319 milliseconds
Total Time:          68.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.3 seconds, 77.9%
Fitness Testing:      9.0 seconds, 13.1%
Report:               6.1 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 410
Test mean error for best: 0.41000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -94                 | Program output: -94                
Correct output: -47                 | Program output: -47                
Correct output: -80                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 28                 
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: 70                  | Program output: 70                 
Correct output: -43                 | Program output: -43                
Correct output: 55                  | Program output: 55                 
Correct output: -87                 | Program output: -87                
Correct output: 88                  | Program output: 88                 
Correct output: -73                 | Program output: -73                
Correct output: 28                  | Program output: 28                 
Correct output: 18                  | Program output: 18                 
Correct output: 7                   | Program output: 12                 
Correct output: 14                  | Program output: 14                 
Correct output: 33                  | Program output: 42                 
Correct output: 60                  | Program output: 60                 
Correct output: 43                  | Program output: 75                 
Correct output: 9                   | Program output: 43                 
Correct output: 39                  | Program output: 82                 
Correct output: 14                  | Program output: 42                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 79                 
Correct output: 8                   | Program output: 49                 
Correct output: 35                  | Program output: 41                 
Correct output: 11                  | Program output: 31                 
Correct output: 50                  | Program output: 50                 
Correct output: 3                   | Program output: 15                 
Correct output: 3                   | Program output: 55                 
Correct output: 41                  | Program output: 41                 
Correct output: 31                  | Program output: 31                 
Correct output: 34                  | Program output: 73                 
Correct output: -92                 | Program output: -36                
Correct output: -37                 | Program output: -37                
Correct output: -62                 | Program output: 12                 
Correct output: -100                | Program output: -100               
Correct output: -61                 | Program output: -61                
Correct output: -20                 | Program output: -10                
Correct output: -51                 | Program output: -43                
Correct output: -61                 | Program output: -61                
Correct output: -44                 | Program output: -25                
Correct output: -75                 | Program output: -75                
Correct output: -85                 | Program output: -65                
Correct output: -97                 | Program output: -29                
Correct output: -91                 | Program output: -65                
Correct output: -4                  | Program output: 47                 
Correct output: -89                 | Program output: -89                
Correct output: -80                 | Program output: 40                 
Correct output: -65                 | Program output: -45                
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -80                
Correct output: -49                 | Program output: 5                  
Correct output: -81                 | Program output: 34                 
Correct output: -34                 | Program output: 60                 
Correct output: -38                 | Program output: -38                
Correct output: -55                 | Program output: -55                
Correct output: -62                 | Program output: -62                
Correct output: -98                 | Program output: -98                
Correct output: -71                 | Program output: 41                 
Correct output: -97                 | Program output: -16                
Correct output: -97                 | Program output: -67                
Correct output: -68                 | Program output: 49                 
Correct output: -75                 | Program output: 16                 
Correct output: -55                 | Program output: -55                
Correct output: -57                 | Program output: 0                  
Correct output: -78                 | Program output: -4                 
Correct output: -43                 | Program output: -11                
Correct output: -29                 | Program output: -29                
Correct output: -58                 | Program output: 64                 
Correct output: -66                 | Program output: -66                
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 65                 
Correct output: -55                 | Program output: -23                
Correct output: -90                 | Program output: -90                
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: 3                  
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -60                
Correct output: 2                   | Program output: 2                  
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -58                
Correct output: -97                 | Program output: -51                
Correct output: -88                 | Program output: -88                
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -21                
Correct output: -75                 | Program output: 2                  
Correct output: -67                 | Program output: -67                
Correct output: -42                 | Program output: -40                
Correct output: -32                 | Program output: 41                 
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: 68                 
Correct output: -62                 | Program output: -62                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_dup})
Lexicase best program: (integer_max exec_eq integer_fromboolean print_boolean exec_dup_items integer_yank boolean_pop integer_dup_items boolean_dup_times integer_fromboolean exec_do*count (in3 integer_yankdup) integer_yankdup integer_dup_times in2 integer_min integer_yankdup integer_mod print_integer integer_gte integer_dup)
Lexicase best errors: [0 0 1 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 24
Percent parens: 0.083
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_dup})
Zero cases best program: (integer_max exec_eq integer_fromboolean print_boolean exec_dup_items integer_yank boolean_pop integer_dup_items boolean_dup_times integer_fromboolean exec_do*count (in3 integer_yankdup) integer_yankdup integer_dup_times in2 integer_min integer_yankdup integer_mod print_integer integer_gte integer_dup)
Zero cases best errors: [0 0 1 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 24
Percent parens: 0.083
--- Lexicase Population Statistics ---
Count of elite individuals by case: (313 916 585 916 586 579 313 312 935 333)
Population mean number of elite cases: 5.79
Count of perfect (error zero) individuals by case: (313 916 585 916 586 579 313 312 935 333)
Population mean number of perfect (error zero) cases: 5.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_dup})
Best program: (integer_max exec_do*count (integer_fromboolean print_boolean) exec_dup_items integer_yank boolean_pop integer_dup_items boolean_dup_times integer_fromboolean exec_do*count (in3 integer_yankdup) integer_yankdup integer_dup_times in2 integer_min integer_yankdup integer_mod print_integer integer_gte integer_dup)
Errors: [0 0 1 0 1 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 22
Size: 25
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 4.212
Median total errors in population: 4
Error averages by case: (0.687 0.084 0.415 0.084 0.414 0.421 0.687 0.688 0.065 0.667)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.281
Average program size in population (points): 22.748
Average percent parens in population: 0.107
Minimum age in population: 39.83011665940285
Maximum age in population: 41.97482365369797
Average age in population: 40.91863870736957
Median age in population: 40.97482365369797
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 242
Genome diversity (% unique genomes):	 0.281
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 260
Syntactic diversity (% unique Push programs):	 0.236
Total error diversity:				 0.008
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 6995604
--- Timings ---
Current time: 1559583142597 milliseconds
Total Time:          70.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.3 seconds, 78.1%
Fitness Testing:      9.2 seconds, 13.0%
Report:               6.2 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 204
Test mean error for best: 0.20400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -94                 | Program output: -94                
Correct output: -47                 | Program output: -47                
Correct output: -80                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 28                 
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: 70                  | Program output: 70                 
Correct output: -43                 | Program output: -43                
Correct output: 55                  | Program output: 55                 
Correct output: -87                 | Program output: -87                
Correct output: 88                  | Program output: 88                 
Correct output: -73                 | Program output: -73                
Correct output: 28                  | Program output: 28                 
Correct output: 18                  | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 33                  | Program output: 33                 
Correct output: 60                  | Program output: 60                 
Correct output: 43                  | Program output: 43                 
Correct output: 9                   | Program output: 9                  
Correct output: 39                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 0                   | Program output: 22                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 50                  | Program output: 50                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 50                 
Correct output: 31                  | Program output: 31                 
Correct output: 34                  | Program output: 34                 
Correct output: -92                 | Program output: -92                
Correct output: -37                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: 5                  
Correct output: -61                 | Program output: 1                  
Correct output: -20                 | Program output: -20                
Correct output: -51                 | Program output: -51                
Correct output: -61                 | Program output: -61                
Correct output: -44                 | Program output: -44                
Correct output: -75                 | Program output: -75                
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: 12                 
Correct output: -80                 | Program output: -80                
Correct output: -65                 | Program output: -65                
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -95                
Correct output: -49                 | Program output: -49                
Correct output: -81                 | Program output: -81                
Correct output: -34                 | Program output: -34                
Correct output: -38                 | Program output: -38                
Correct output: -55                 | Program output: 4                  
Correct output: -62                 | Program output: 43                 
Correct output: -98                 | Program output: -62                
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -75                 | Program output: -75                
Correct output: -55                 | Program output: -55                
Correct output: -57                 | Program output: -57                
Correct output: -78                 | Program output: -78                
Correct output: -43                 | Program output: -43                
Correct output: -29                 | Program output: -29                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -19                
Correct output: -68                 | Program output: 19                 
Correct output: -39                 | Program output: -39                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -90                
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -28                
Correct output: 2                   | Program output: 2                  
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -26                
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -73                
Correct output: -75                 | Program output: -75                
Correct output: -67                 | Program output: -3                 
Correct output: -42                 | Program output: -42                
Correct output: -32                 | Program output: -32                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: -50                
Correct output: -62                 | Program output: -51                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_min} {:close 2, :instruction integer_yankdup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup})
Lexicase best program: (in1 integer_gt boolean_yankdup in4 boolean_eq exec_while (exec_flush) integer_min integer_yankdup integer_yankdup integer_dup_times in2 integer_min integer_yankdup integer_mod print_integer boolean_invert_first_then_and integer_dup)
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 20
Percent parens: 0.100
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_min} {:close 2, :instruction integer_yankdup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup})
Zero cases best program: (in1 integer_gt boolean_yankdup in4 boolean_eq exec_while (exec_flush) integer_min integer_yankdup integer_yankdup integer_dup_times in2 integer_min integer_yankdup integer_mod print_integer boolean_invert_first_then_and integer_dup)
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 20
Percent parens: 0.100
--- Lexicase Population Statistics ---
Count of elite individuals by case: (885 417 846 879 417 931 879 378 474 377)
Population mean number of elite cases: 6.48
Count of perfect (error zero) individuals by case: (885 417 846 879 417 931 879 378 474 377)
Population mean number of perfect (error zero) cases: 6.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_dup})
Best program: (in1 boolean_swap boolean_shove integer_dup_times in4 boolean_eq exec_while (exec_flush) integer_min integer_yankdup integer_yankdup integer_dup_times in2 integer_min integer_yankdup integer_mod print_integer integer_gte integer_dup)
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 19
Size: 21
Percent parens: 0.095
--- Population Statistics ---
Average total errors in population: 3.517
Median total errors in population: 4
Error averages by case: (0.115 0.583 0.154 0.121 0.583 0.069 0.121 0.622 0.526 0.623)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.864
Average program size in population (points): 23.195
Average percent parens in population: 0.100
Minimum age in population: 40.83011665940285
Maximum age in population: 43.97482365369797
Average age in population: 42.3786467833817
Median age in population: 42.43525752425194
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 306
Genome diversity (% unique genomes):	 0.362
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 348
Syntactic diversity (% unique Push programs):	 0.292
Total error diversity:				 0.009
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 7195429
--- Timings ---
Current time: 1559583144732 milliseconds
Total Time:          72.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.1 seconds, 78.3%
Fitness Testing:      9.4 seconds, 12.9%
Report:               6.4 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 204
Test mean error for best: 0.20400
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 1
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 1
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 1
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 1
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 1
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 1
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 1
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -94                 | Program output: -94                
Correct output: -47                 | Program output: -47                
Correct output: -80                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 28                 
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: 70                  | Program output: 70                 
Correct output: -43                 | Program output: -43                
Correct output: 55                  | Program output: 55                 
Correct output: -87                 | Program output: -87                
Correct output: 88                  | Program output: 88                 
Correct output: -73                 | Program output: -73                
Correct output: 28                  | Program output: 28                 
Correct output: 18                  | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 33                  | Program output: 33                 
Correct output: 60                  | Program output: 60                 
Correct output: 43                  | Program output: 43                 
Correct output: 9                   | Program output: 9                  
Correct output: 39                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 0                   | Program output: 22                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 50                  | Program output: 50                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 50                 
Correct output: 31                  | Program output: 31                 
Correct output: 34                  | Program output: 34                 
Correct output: -92                 | Program output: -92                
Correct output: -37                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: 5                  
Correct output: -61                 | Program output: 1                  
Correct output: -20                 | Program output: -20                
Correct output: -51                 | Program output: -51                
Correct output: -61                 | Program output: -61                
Correct output: -44                 | Program output: -44                
Correct output: -75                 | Program output: -75                
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: 12                 
Correct output: -80                 | Program output: -80                
Correct output: -65                 | Program output: -65                
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -95                
Correct output: -49                 | Program output: -49                
Correct output: -81                 | Program output: -81                
Correct output: -34                 | Program output: -34                
Correct output: -38                 | Program output: -38                
Correct output: -55                 | Program output: 4                  
Correct output: -62                 | Program output: 43                 
Correct output: -98                 | Program output: -62                
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -75                 | Program output: -75                
Correct output: -55                 | Program output: -55                
Correct output: -57                 | Program output: -57                
Correct output: -78                 | Program output: -78                
Correct output: -43                 | Program output: -43                
Correct output: -29                 | Program output: -29                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -19                
Correct output: -68                 | Program output: 19                 
Correct output: -39                 | Program output: -39                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -90                
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -28                
Correct output: 2                   | Program output: 2                  
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -26                
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -73                
Correct output: -75                 | Program output: -75                
Correct output: -67                 | Program output: -3                 
Correct output: -42                 | Program output: -42                
Correct output: -32                 | Program output: -32                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: -50                
Correct output: -62                 | Program output: -51                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_dup})
Lexicase best program: (in1 boolean_swap exec_swap (integer_dup_times) (integer_gt boolean_yankdup in4 boolean_eq exec_while (exec_flush) integer_min) integer_yankdup integer_yankdup integer_dup_times in2 integer_min integer_yankdup integer_mod print_integer integer_gte integer_dup)
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 25
Percent parens: 0.160
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_dup})
Zero cases best program: (in1 boolean_swap exec_swap (integer_dup_times) (integer_gt boolean_yankdup in4 boolean_eq exec_while (exec_flush) integer_min) integer_yankdup integer_yankdup integer_dup_times in2 integer_min integer_yankdup integer_mod print_integer integer_gte integer_dup)
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 25
Percent parens: 0.160
--- Lexicase Population Statistics ---
Count of elite individuals by case: (710 939 899 710 709 866 700 709 917 698)
Population mean number of elite cases: 7.86
Count of perfect (error zero) individuals by case: (710 939 899 710 709 866 700 709 917 698)
Population mean number of perfect (error zero) cases: 7.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_dup})
Best program: (in1 boolean_swap boolean_shove integer_dup_times in4 boolean_eq exec_while (exec_flush) integer_min integer_yankdup integer_yankdup integer_dup_times in2 integer_min integer_yankdup integer_mod integer_mod print_integer integer_gte integer_dup)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 20
Size: 22
Percent parens: 0.091
--- Population Statistics ---
Average total errors in population: 2.143
Median total errors in population: 0
Error averages by case: (0.29 0.061 0.101 0.29 0.291 0.134 0.3 0.291 0.083 0.302)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.023
Average program size in population (points): 22.609
Average percent parens in population: 0.113
Minimum age in population: 41.83011665940285
Maximum age in population: 45.35320539772511
Average age in population: 43.84273900670186
Median age in population: 43.89436594769359
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 175
Genome diversity (% unique genomes):	 0.423
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 224
Syntactic diversity (% unique Push programs):	 0.341
Total error diversity:				 0.011
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 7389879
--- Timings ---
Current time: 1559583146924 milliseconds
Total Time:          75.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.9 seconds, 78.4%
Fitness Testing:      9.6 seconds, 12.8%
Report:               6.5 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 29
Successful program: (in1 boolean_swap boolean_shove integer_dup_times in4 boolean_eq exec_while (exec_flush) integer_min integer_yankdup integer_yankdup integer_dup_times in2 integer_min integer_yankdup integer_mod integer_mod print_integer integer_gte integer_dup)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 22


Auto-simplifying with starting size: 22
step: 0
program: (in1 boolean_swap boolean_shove integer_dup_times in4 boolean_eq exec_while (exec_flush) integer_min integer_yankdup integer_yankdup integer_dup_times in2 integer_min integer_yankdup integer_mod integer_mod print_integer integer_gte integer_dup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 22

step: 500
program: (in1 boolean_swap boolean_shove integer_dup_times in4 boolean_eq exec_while (exec_flush) integer_min integer_yankdup integer_yankdup integer_dup_times in2 integer_min integer_yankdup integer_mod integer_mod print_integer integer_gte integer_dup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 22

step: 1000
program: (in1 boolean_swap boolean_shove integer_dup_times in4 boolean_eq exec_while (exec_flush) integer_min integer_yankdup integer_yankdup integer_dup_times in2 integer_min integer_yankdup integer_mod integer_mod print_integer integer_gte integer_dup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 22

step: 1500
program: (in1 boolean_swap boolean_shove integer_dup_times in4 boolean_eq exec_while (exec_flush) integer_min integer_yankdup integer_yankdup integer_dup_times in2 integer_min integer_yankdup integer_mod integer_mod print_integer integer_gte integer_dup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 22

step: 2000
program: (in1 boolean_swap boolean_shove integer_dup_times in4 boolean_eq exec_while (exec_flush) integer_min integer_yankdup integer_yankdup integer_dup_times in2 integer_min integer_yankdup integer_mod integer_mod print_integer integer_gte integer_dup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 22

step: 2500
program: (in1 boolean_swap boolean_shove integer_dup_times in4 boolean_eq exec_while (exec_flush) integer_min integer_yankdup integer_yankdup integer_dup_times in2 integer_min integer_yankdup integer_mod integer_mod print_integer integer_gte integer_dup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 22

step: 3000
program: (in1 boolean_swap boolean_shove integer_dup_times in4 boolean_eq exec_while (exec_flush) integer_min integer_yankdup integer_yankdup integer_dup_times in2 integer_min integer_yankdup integer_mod integer_mod print_integer integer_gte integer_dup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 22

step: 3500
program: (in1 boolean_swap boolean_shove integer_dup_times in4 boolean_eq exec_while (exec_flush) integer_min integer_yankdup integer_yankdup integer_dup_times in2 integer_min integer_yankdup integer_mod integer_mod print_integer integer_gte integer_dup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 22

step: 4000
program: (in1 boolean_swap boolean_shove integer_dup_times in4 boolean_eq exec_while (exec_flush) integer_min integer_yankdup integer_yankdup integer_dup_times in2 integer_min integer_yankdup integer_mod integer_mod print_integer integer_gte integer_dup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 22

step: 4500
program: (in1 boolean_swap boolean_shove integer_dup_times in4 boolean_eq exec_while (exec_flush) integer_min integer_yankdup integer_yankdup integer_dup_times in2 integer_min integer_yankdup integer_mod integer_mod print_integer integer_gte integer_dup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 22

step: 5000
program: (in1 boolean_swap boolean_shove integer_dup_times in4 boolean_eq exec_while (exec_flush) integer_min integer_yankdup integer_yankdup integer_dup_times in2 integer_min integer_yankdup integer_mod integer_mod print_integer integer_gte integer_dup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 22

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 204
Test mean error for best: 0.20400
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 1
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 1
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 1
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 1
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 1
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 1
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 1
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -94                 | Program output: -94                
Correct output: -47                 | Program output: -47                
Correct output: -80                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 28                 
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: 70                  | Program output: 70                 
Correct output: -43                 | Program output: -43                
Correct output: 55                  | Program output: 55                 
Correct output: -87                 | Program output: -87                
Correct output: 88                  | Program output: 88                 
Correct output: -73                 | Program output: -73                
Correct output: 28                  | Program output: 28                 
Correct output: 18                  | Program output: 22                 
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 33                  | Program output: 33                 
Correct output: 60                  | Program output: 60                 
Correct output: 43                  | Program output: 43                 
Correct output: 9                   | Program output: 9                  
Correct output: 39                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 0                   | Program output: 22                 
Correct output: 2                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 50                  | Program output: 50                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 3                  
Correct output: 41                  | Program output: 50                 
Correct output: 31                  | Program output: 31                 
Correct output: 34                  | Program output: 34                 
Correct output: -92                 | Program output: -92                
Correct output: -37                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -100                | Program output: 5                  
Correct output: -61                 | Program output: 1                  
Correct output: -20                 | Program output: -20                
Correct output: -51                 | Program output: -51                
Correct output: -61                 | Program output: -61                
Correct output: -44                 | Program output: -44                
Correct output: -75                 | Program output: -75                
Correct output: -85                 | Program output: -85                
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -4                  | Program output: -4                 
Correct output: -89                 | Program output: 12                 
Correct output: -80                 | Program output: -80                
Correct output: -65                 | Program output: -65                
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -95                
Correct output: -49                 | Program output: -49                
Correct output: -81                 | Program output: -81                
Correct output: -34                 | Program output: -34                
Correct output: -38                 | Program output: -38                
Correct output: -55                 | Program output: 4                  
Correct output: -62                 | Program output: 43                 
Correct output: -98                 | Program output: -62                
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -75                 | Program output: -75                
Correct output: -55                 | Program output: -55                
Correct output: -57                 | Program output: -57                
Correct output: -78                 | Program output: -78                
Correct output: -43                 | Program output: -43                
Correct output: -29                 | Program output: -29                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -19                
Correct output: -68                 | Program output: 19                 
Correct output: -39                 | Program output: -39                
Correct output: -55                 | Program output: -55                
Correct output: -90                 | Program output: -90                
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -28                
Correct output: 2                   | Program output: 2                  
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -26                
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -73                
Correct output: -75                 | Program output: -75                
Correct output: -67                 | Program output: -3                 
Correct output: -42                 | Program output: -42                
Correct output: -32                 | Program output: -32                
Correct output: -89                 | Program output: -89                
Correct output: -50                 | Program output: -50                
Correct output: -62                 | Program output: -51                
;;******************************
