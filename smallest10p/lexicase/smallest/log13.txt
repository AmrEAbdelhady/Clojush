Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[91 91 91 -90] -90] [[86 44 86 86] 44] [[-68 -68 -68 34] -68] [[-46 -25 -25 -25] -46] [[-54 62 62 62] -54] [[26 26 26 5] 5] [[-13 -8 -8 -8] -13] [[33 57 57 57] 33] [[31 -10 31 31] -10] [[74 -95 -95 -95] -95] [(47 47 47 47) 47] [(26 26 26 26) 26] [(50 50 50 50) 50] [(35 35 35 35) 35] [(-43 -43 -43 -43) -43] [(87 64 23 83) 23] [(29 0 6 83) 0] [(90 73 42 78) 42] [(23 88 50 60) 23] [(31 87 31 97) 31] [(20 48 30 47) 20] [(86 9 67 26) 9] [(33 59 16 78) 16] [(15 57 75 22) 15] [(43 3 2 73) 2] [(46 29 23 95) 23] [(10 16 37 16) 10] [(52 30 1 91) 1] [(34 78 97 97) 34] [(20 41 60 82) 20] [(70 15 9 100) 9] [(42 72 3 78) 3] [(39 28 76 81) 28] [(14 18 42 62) 14] [(46 51 50 47) 46] [(-96 82 50 36) -96] [(-61 -53 93 -25) -61] [(-19 86 -78 -71) -78] [(-19 0 55 -91) -91] [(55 -95 21 34) -95] [(28 -73 -84 -65) -84] [(-51 -71 -66 -50) -71] [(-74 98 40 12) -74] [(-60 10 18 42) -60] [(100 -12 20 -55) -55] [(-42 97 14 -41) -42] [(47 -75 -76 47) -76] [(27 -95 -86 -93) -95] [(87 0 85 -96) -96] [(-43 22 35 -38) -43] [(-45 97 20 98) -45] [(-56 10 16 81) -56] [(-75 -1 30 -46) -75] [(-87 -55 27 -23) -87] [(-81 44 55 41) -81] [(-82 -90 -20 79) -90] [(-64 -19 61 -33) -64] [(-41 -75 -43 -62) -75] [(35 -3 -97 -46) -97] [(59 -47 -41 -54) -54] [(56 3 -95 -10) -95] [(35 -21 -97 52) -97] [(-52 73 -85 -40) -85] [(-81 61 51 77) -81] [(10 -19 65 -19) -19] [(95 24 -58 82) -58] [(29 -46 67 -42) -46] [(-78 96 -15 -42) -78] [(-93 59 56 25) -93] [(18 -8 -35 -62) -62] [(-90 -1 -47 -82) -90] [(85 -70 74 100) -70] [(-9 61 -28 32) -28] [(-20 -82 15 -25) -82] [(74 -5 17 19) -5] [(-45 87 6 68) -45] [(83 -11 -23 -20) -23] [(92 92 -61 -30) -61] [(-26 23 -55 79) -55] [(-4 33 -95 63) -95] [(-82 88 94 -6) -82] [(-65 4 57 7) -65] [(-36 10 23 29) -36] [(60 -4 -53 41) -53] [(79 63 -34 72) -34] [(97 54 -17 86) -17] [(-82 -70 47 75) -82] [(-49 -16 90 -12) -49] [(8 -36 71 -54) -54] [(78 -71 76 -54) -71] [(18 -15 3 36) -15] [(44 55 28 -73) -73] [(-22 38 13 -83) -83] [(13 80 62 -63) -63] [(-53 -87 -9 -33) -87])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[91 91 91 -90] -90]
Train Case:   6 | Input/Output: [[86 44 86 86] 44]
Train Case:   7 | Input/Output: [[-68 -68 -68 34] -68]
Train Case:   8 | Input/Output: [[-46 -25 -25 -25] -46]
Train Case:   9 | Input/Output: [[-54 62 62 62] -54]
Train Case:  10 | Input/Output: [[26 26 26 5] 5]
Train Case:  11 | Input/Output: [[-13 -8 -8 -8] -13]
Train Case:  12 | Input/Output: [[33 57 57 57] 33]
Train Case:  13 | Input/Output: [[31 -10 31 31] -10]
Train Case:  14 | Input/Output: [[74 -95 -95 -95] -95]
Train Case:  15 | Input/Output: [(47 47 47 47) 47]
Train Case:  16 | Input/Output: [(26 26 26 26) 26]
Train Case:  17 | Input/Output: [(50 50 50 50) 50]
Train Case:  18 | Input/Output: [(35 35 35 35) 35]
Train Case:  19 | Input/Output: [(-43 -43 -43 -43) -43]
Train Case:  20 | Input/Output: [(87 64 23 83) 23]
Train Case:  21 | Input/Output: [(29 0 6 83) 0]
Train Case:  22 | Input/Output: [(90 73 42 78) 42]
Train Case:  23 | Input/Output: [(23 88 50 60) 23]
Train Case:  24 | Input/Output: [(31 87 31 97) 31]
Train Case:  25 | Input/Output: [(20 48 30 47) 20]
Train Case:  26 | Input/Output: [(86 9 67 26) 9]
Train Case:  27 | Input/Output: [(33 59 16 78) 16]
Train Case:  28 | Input/Output: [(15 57 75 22) 15]
Train Case:  29 | Input/Output: [(43 3 2 73) 2]
Train Case:  30 | Input/Output: [(46 29 23 95) 23]
Train Case:  31 | Input/Output: [(10 16 37 16) 10]
Train Case:  32 | Input/Output: [(52 30 1 91) 1]
Train Case:  33 | Input/Output: [(34 78 97 97) 34]
Train Case:  34 | Input/Output: [(20 41 60 82) 20]
Train Case:  35 | Input/Output: [(70 15 9 100) 9]
Train Case:  36 | Input/Output: [(42 72 3 78) 3]
Train Case:  37 | Input/Output: [(39 28 76 81) 28]
Train Case:  38 | Input/Output: [(14 18 42 62) 14]
Train Case:  39 | Input/Output: [(46 51 50 47) 46]
Train Case:  40 | Input/Output: [(-96 82 50 36) -96]
Train Case:  41 | Input/Output: [(-61 -53 93 -25) -61]
Train Case:  42 | Input/Output: [(-19 86 -78 -71) -78]
Train Case:  43 | Input/Output: [(-19 0 55 -91) -91]
Train Case:  44 | Input/Output: [(55 -95 21 34) -95]
Train Case:  45 | Input/Output: [(28 -73 -84 -65) -84]
Train Case:  46 | Input/Output: [(-51 -71 -66 -50) -71]
Train Case:  47 | Input/Output: [(-74 98 40 12) -74]
Train Case:  48 | Input/Output: [(-60 10 18 42) -60]
Train Case:  49 | Input/Output: [(100 -12 20 -55) -55]
Train Case:  50 | Input/Output: [(-42 97 14 -41) -42]
Train Case:  51 | Input/Output: [(47 -75 -76 47) -76]
Train Case:  52 | Input/Output: [(27 -95 -86 -93) -95]
Train Case:  53 | Input/Output: [(87 0 85 -96) -96]
Train Case:  54 | Input/Output: [(-43 22 35 -38) -43]
Train Case:  55 | Input/Output: [(-45 97 20 98) -45]
Train Case:  56 | Input/Output: [(-56 10 16 81) -56]
Train Case:  57 | Input/Output: [(-75 -1 30 -46) -75]
Train Case:  58 | Input/Output: [(-87 -55 27 -23) -87]
Train Case:  59 | Input/Output: [(-81 44 55 41) -81]
Train Case:  60 | Input/Output: [(-82 -90 -20 79) -90]
Train Case:  61 | Input/Output: [(-64 -19 61 -33) -64]
Train Case:  62 | Input/Output: [(-41 -75 -43 -62) -75]
Train Case:  63 | Input/Output: [(35 -3 -97 -46) -97]
Train Case:  64 | Input/Output: [(59 -47 -41 -54) -54]
Train Case:  65 | Input/Output: [(56 3 -95 -10) -95]
Train Case:  66 | Input/Output: [(35 -21 -97 52) -97]
Train Case:  67 | Input/Output: [(-52 73 -85 -40) -85]
Train Case:  68 | Input/Output: [(-81 61 51 77) -81]
Train Case:  69 | Input/Output: [(10 -19 65 -19) -19]
Train Case:  70 | Input/Output: [(95 24 -58 82) -58]
Train Case:  71 | Input/Output: [(29 -46 67 -42) -46]
Train Case:  72 | Input/Output: [(-78 96 -15 -42) -78]
Train Case:  73 | Input/Output: [(-93 59 56 25) -93]
Train Case:  74 | Input/Output: [(18 -8 -35 -62) -62]
Train Case:  75 | Input/Output: [(-90 -1 -47 -82) -90]
Train Case:  76 | Input/Output: [(85 -70 74 100) -70]
Train Case:  77 | Input/Output: [(-9 61 -28 32) -28]
Train Case:  78 | Input/Output: [(-20 -82 15 -25) -82]
Train Case:  79 | Input/Output: [(74 -5 17 19) -5]
Train Case:  80 | Input/Output: [(-45 87 6 68) -45]
Train Case:  81 | Input/Output: [(83 -11 -23 -20) -23]
Train Case:  82 | Input/Output: [(92 92 -61 -30) -61]
Train Case:  83 | Input/Output: [(-26 23 -55 79) -55]
Train Case:  84 | Input/Output: [(-4 33 -95 63) -95]
Train Case:  85 | Input/Output: [(-82 88 94 -6) -82]
Train Case:  86 | Input/Output: [(-65 4 57 7) -65]
Train Case:  87 | Input/Output: [(-36 10 23 29) -36]
Train Case:  88 | Input/Output: [(60 -4 -53 41) -53]
Train Case:  89 | Input/Output: [(79 63 -34 72) -34]
Train Case:  90 | Input/Output: [(97 54 -17 86) -17]
Train Case:  91 | Input/Output: [(-82 -70 47 75) -82]
Train Case:  92 | Input/Output: [(-49 -16 90 -12) -49]
Train Case:  93 | Input/Output: [(8 -36 71 -54) -54]
Train Case:  94 | Input/Output: [(78 -71 76 -54) -71]
Train Case:  95 | Input/Output: [(18 -15 3 36) -15]
Train Case:  96 | Input/Output: [(44 55 28 -73) -73]
Train Case:  97 | Input/Output: [(-22 38 13 -83) -83]
Train Case:  98 | Input/Output: [(13 80 62 -63) -63]
Train Case:  99 | Input/Output: [(-53 -87 -9 -33) -87]
Test Case:   0 | Input/Output: [[-19 -10 -19 -19] -19]
Test Case:   1 | Input/Output: [[-86 -65 -86 -86] -86]
Test Case:   2 | Input/Output: [[30 30 30 100] 30]
Test Case:   3 | Input/Output: [[-24 -24 -33 -24] -33]
Test Case:   4 | Input/Output: [[-47 -95 -95 -95] -95]
Test Case:   5 | Input/Output: [[-31 25 -31 -31] -31]
Test Case:   6 | Input/Output: [[41 -94 41 41] -94]
Test Case:   7 | Input/Output: [[-63 -63 19 -63] -63]
Test Case:   8 | Input/Output: [[36 36 36 92] 36]
Test Case:   9 | Input/Output: [[-10 -10 36 -10] -10]
Test Case:  10 | Input/Output: [[19 -33 -33 -33] -33]
Test Case:  11 | Input/Output: [[16 91 16 16] 16]
Test Case:  12 | Input/Output: [[-72 -72 -72 -62] -72]
Test Case:  13 | Input/Output: [[8 8 -92 8] -92]
Test Case:  14 | Input/Output: [[-16 -93 -93 -93] -93]
Test Case:  15 | Input/Output: [[-94 -94 -94 -91] -94]
Test Case:  16 | Input/Output: [[71 71 16 71] 16]
Test Case:  17 | Input/Output: [[-28 -28 44 -28] -28]
Test Case:  18 | Input/Output: [[24 24 24 -62] -62]
Test Case:  19 | Input/Output: [[-43 -43 -43 89] -43]
Test Case:  20 | Input/Output: [[-80 -80 -87 -80] -87]
Test Case:  21 | Input/Output: [[-45 -26 -26 -26] -45]
Test Case:  22 | Input/Output: [[-75 -75 -75 -85] -85]
Test Case:  23 | Input/Output: [[39 -3 -3 -3] -3]
Test Case:  24 | Input/Output: [[-19 -19 5 -19] -19]
Test Case:  25 | Input/Output: [[-9 -9 -9 -69] -69]
Test Case:  26 | Input/Output: [[-62 -62 -90 -62] -90]
Test Case:  27 | Input/Output: [[73 -97 -97 -97] -97]
Test Case:  28 | Input/Output: [[-26 -26 -26 -78] -78]
Test Case:  29 | Input/Output: [[82 79 79 79] 79]
Test Case:  30 | Input/Output: [[-7 30 -7 -7] -7]
Test Case:  31 | Input/Output: [[1 89 89 89] 1]
Test Case:  32 | Input/Output: [[26 26 26 -17] -17]
Test Case:  33 | Input/Output: [[84 -21 84 84] -21]
Test Case:  34 | Input/Output: [[29 29 73 29] 29]
Test Case:  35 | Input/Output: [[73 -92 -92 -92] -92]
Test Case:  36 | Input/Output: [[53 -39 -39 -39] -39]
Test Case:  37 | Input/Output: [[51 51 -87 51] -87]
Test Case:  38 | Input/Output: [[4 4 -83 4] -83]
Test Case:  39 | Input/Output: [[-48 40 -48 -48] -48]
Test Case:  40 | Input/Output: [[-78 -78 -78 -38] -78]
Test Case:  41 | Input/Output: [[-47 -80 -47 -47] -80]
Test Case:  42 | Input/Output: [[-8 -82 -82 -82] -82]
Test Case:  43 | Input/Output: [[-2 -64 -64 -64] -64]
Test Case:  44 | Input/Output: [[-81 64 64 64] -81]
Test Case:  45 | Input/Output: [[65 -30 65 65] -30]
Test Case:  46 | Input/Output: [[-88 63 63 63] -88]
Test Case:  47 | Input/Output: [[-1 55 55 55] -1]
Test Case:  48 | Input/Output: [[79 43 43 43] 43]
Test Case:  49 | Input/Output: [[9 -15 -15 -15] -15]
Test Case:  50 | Input/Output: [[-7 -13 -13 -13] -13]
Test Case:  51 | Input/Output: [[65 -49 65 65] -49]
Test Case:  52 | Input/Output: [[-87 -87 -87 -73] -87]
Test Case:  53 | Input/Output: [[-37 -37 -45 -37] -45]
Test Case:  54 | Input/Output: [[-19 -19 -28 -19] -28]
Test Case:  55 | Input/Output: [[-19 -19 -19 -33] -33]
Test Case:  56 | Input/Output: [[-14 -14 -14 -57] -57]
Test Case:  57 | Input/Output: [[-4 99 99 99] -4]
Test Case:  58 | Input/Output: [[-14 -14 -14 29] -14]
Test Case:  59 | Input/Output: [[26 -21 26 26] -21]
Test Case:  60 | Input/Output: [[38 4 38 38] 4]
Test Case:  61 | Input/Output: [[22 -43 -43 -43] -43]
Test Case:  62 | Input/Output: [[95 95 -32 95] -32]
Test Case:  63 | Input/Output: [[99 99 99 64] 64]
Test Case:  64 | Input/Output: [[-65 -65 -65 -38] -65]
Test Case:  65 | Input/Output: [[55 -61 55 55] -61]
Test Case:  66 | Input/Output: [[28 -47 -47 -47] -47]
Test Case:  67 | Input/Output: [[-97 -44 -97 -97] -97]
Test Case:  68 | Input/Output: [[79 31 79 79] 31]
Test Case:  69 | Input/Output: [[17 17 17 100] 17]
Test Case:  70 | Input/Output: [[50 -79 50 50] -79]
Test Case:  71 | Input/Output: [[-68 -77 -77 -77] -77]
Test Case:  72 | Input/Output: [[-33 -33 -33 60] -33]
Test Case:  73 | Input/Output: [[97 97 97 -100] -100]
Test Case:  74 | Input/Output: [[-11 -11 -11 -78] -78]
Test Case:  75 | Input/Output: [[-25 -25 -7 -25] -25]
Test Case:  76 | Input/Output: [[-56 93 93 93] -56]
Test Case:  77 | Input/Output: [[-26 -26 -26 -12] -26]
Test Case:  78 | Input/Output: [[-45 10 10 10] -45]
Test Case:  79 | Input/Output: [[-78 -29 -78 -78] -78]
Test Case:  80 | Input/Output: [[-84 2 -84 -84] -84]
Test Case:  81 | Input/Output: [[44 42 42 42] 42]
Test Case:  82 | Input/Output: [[-67 -32 -67 -67] -67]
Test Case:  83 | Input/Output: [[-70 74 -70 -70] -70]
Test Case:  84 | Input/Output: [[83 -2 83 83] -2]
Test Case:  85 | Input/Output: [[35 -46 -46 -46] -46]
Test Case:  86 | Input/Output: [[56 -3 -3 -3] -3]
Test Case:  87 | Input/Output: [[43 43 43 35] 35]
Test Case:  88 | Input/Output: [[-44 -99 -44 -44] -99]
Test Case:  89 | Input/Output: [[-100 -100 -56 -100] -100]
Test Case:  90 | Input/Output: [[-54 -54 -15 -54] -54]
Test Case:  91 | Input/Output: [[5 44 44 44] 5]
Test Case:  92 | Input/Output: [[-24 -24 -86 -24] -86]
Test Case:  93 | Input/Output: [[-40 -40 -99 -40] -99]
Test Case:  94 | Input/Output: [[59 59 59 62] 59]
Test Case:  95 | Input/Output: [[-86 -26 -26 -26] -86]
Test Case:  96 | Input/Output: [[5 5 5 -23] -23]
Test Case:  97 | Input/Output: [[-7 43 -7 -7] -7]
Test Case:  98 | Input/Output: [[-33 -33 90 -33] -33]
Test Case:  99 | Input/Output: [[-71 -71 -82 -71] -82]
Test Case: 100 | Input/Output: [(9 9 9 9) 9]
Test Case: 101 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 102 | Input/Output: [(75 75 75 75) 75]
Test Case: 103 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 104 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 105 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 106 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 107 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 108 | Input/Output: [(55 55 55 55) 55]
Test Case: 109 | Input/Output: [(15 15 15 15) 15]
Test Case: 110 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 111 | Input/Output: [(38 38 38 38) 38]
Test Case: 112 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 113 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 114 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 115 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 116 | Input/Output: [(39 39 39 39) 39]
Test Case: 117 | Input/Output: [(25 25 25 25) 25]
Test Case: 118 | Input/Output: [(26 26 26 26) 26]
Test Case: 119 | Input/Output: [(82 82 82 82) 82]
Test Case: 120 | Input/Output: [(17 17 17 17) 17]
Test Case: 121 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 122 | Input/Output: [(90 90 90 90) 90]
Test Case: 123 | Input/Output: [(87 87 87 87) 87]
Test Case: 124 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 125 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 126 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 127 | Input/Output: [(60 60 60 60) 60]
Test Case: 128 | Input/Output: [(46 46 46 46) 46]
Test Case: 129 | Input/Output: [(26 26 26 26) 26]
Test Case: 130 | Input/Output: [(21 21 21 21) 21]
Test Case: 131 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 132 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 133 | Input/Output: [(92 92 92 92) 92]
Test Case: 134 | Input/Output: [(75 75 75 75) 75]
Test Case: 135 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 136 | Input/Output: [(88 88 88 88) 88]
Test Case: 137 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 138 | Input/Output: [(60 60 60 60) 60]
Test Case: 139 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 140 | Input/Output: [(72 72 72 72) 72]
Test Case: 141 | Input/Output: [(72 72 72 72) 72]
Test Case: 142 | Input/Output: [(46 46 46 46) 46]
Test Case: 143 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 144 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 145 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 146 | Input/Output: [(1 1 1 1) 1]
Test Case: 147 | Input/Output: [(27 27 27 27) 27]
Test Case: 148 | Input/Output: [(51 51 51 51) 51]
Test Case: 149 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 150 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 151 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 152 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 153 | Input/Output: [(76 76 76 76) 76]
Test Case: 154 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 155 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 156 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 157 | Input/Output: [(28 28 28 28) 28]
Test Case: 158 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 159 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 160 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 161 | Input/Output: [(15 15 15 15) 15]
Test Case: 162 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 163 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 164 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 165 | Input/Output: [(5 5 5 5) 5]
Test Case: 166 | Input/Output: [(47 47 47 47) 47]
Test Case: 167 | Input/Output: [(7 7 7 7) 7]
Test Case: 168 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 169 | Input/Output: [(26 26 26 26) 26]
Test Case: 170 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 171 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 172 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 173 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 174 | Input/Output: [(40 40 40 40) 40]
Test Case: 175 | Input/Output: [(99 99 99 99) 99]
Test Case: 176 | Input/Output: [(70 70 70 70) 70]
Test Case: 177 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 178 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 179 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 180 | Input/Output: [(16 16 16 16) 16]
Test Case: 181 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 182 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 183 | Input/Output: [(36 36 36 36) 36]
Test Case: 184 | Input/Output: [(9 9 9 9) 9]
Test Case: 185 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 186 | Input/Output: [(66 66 66 66) 66]
Test Case: 187 | Input/Output: [(14 14 14 14) 14]
Test Case: 188 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 189 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 190 | Input/Output: [(67 67 67 67) 67]
Test Case: 191 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 192 | Input/Output: [(71 71 71 71) 71]
Test Case: 193 | Input/Output: [(17 17 17 17) 17]
Test Case: 194 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 195 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 196 | Input/Output: [(80 80 80 80) 80]
Test Case: 197 | Input/Output: [(47 47 47 47) 47]
Test Case: 198 | Input/Output: [(93 93 93 93) 93]
Test Case: 199 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 200 | Input/Output: [(7 85 56 51) 7]
Test Case: 201 | Input/Output: [(27 36 22 89) 22]
Test Case: 202 | Input/Output: [(44 12 38 18) 12]
Test Case: 203 | Input/Output: [(43 25 60 25) 25]
Test Case: 204 | Input/Output: [(15 29 48 87) 15]
Test Case: 205 | Input/Output: [(96 77 11 60) 11]
Test Case: 206 | Input/Output: [(4 21 22 49) 4]
Test Case: 207 | Input/Output: [(24 70 87 64) 24]
Test Case: 208 | Input/Output: [(23 47 38 95) 23]
Test Case: 209 | Input/Output: [(20 33 94 0) 0]
Test Case: 210 | Input/Output: [(29 69 9 79) 9]
Test Case: 211 | Input/Output: [(11 93 51 98) 11]
Test Case: 212 | Input/Output: [(92 94 48 35) 35]
Test Case: 213 | Input/Output: [(16 87 79 75) 16]
Test Case: 214 | Input/Output: [(69 52 28 42) 28]
Test Case: 215 | Input/Output: [(82 3 54 62) 3]
Test Case: 216 | Input/Output: [(63 56 0 65) 0]
Test Case: 217 | Input/Output: [(98 59 27 85) 27]
Test Case: 218 | Input/Output: [(100 48 12 96) 12]
Test Case: 219 | Input/Output: [(67 64 73 81) 64]
Test Case: 220 | Input/Output: [(9 15 3 57) 3]
Test Case: 221 | Input/Output: [(89 2 41 15) 2]
Test Case: 222 | Input/Output: [(65 55 94 71) 55]
Test Case: 223 | Input/Output: [(87 45 51 48) 45]
Test Case: 224 | Input/Output: [(4 88 4 63) 4]
Test Case: 225 | Input/Output: [(75 48 29 21) 21]
Test Case: 226 | Input/Output: [(49 14 51 1) 1]
Test Case: 227 | Input/Output: [(8 1 13 95) 1]
Test Case: 228 | Input/Output: [(4 52 53 59) 4]
Test Case: 229 | Input/Output: [(79 40 18 3) 3]
Test Case: 230 | Input/Output: [(58 2 64 11) 2]
Test Case: 231 | Input/Output: [(7 49 33 36) 7]
Test Case: 232 | Input/Output: [(32 83 9 74) 9]
Test Case: 233 | Input/Output: [(74 87 98 8) 8]
Test Case: 234 | Input/Output: [(50 30 72 5) 5]
Test Case: 235 | Input/Output: [(62 85 57 17) 17]
Test Case: 236 | Input/Output: [(90 0 4 44) 0]
Test Case: 237 | Input/Output: [(29 29 56 10) 10]
Test Case: 238 | Input/Output: [(22 37 19 32) 19]
Test Case: 239 | Input/Output: [(52 16 50 57) 16]
Test Case: 240 | Input/Output: [(96 51 0 34) 0]
Test Case: 241 | Input/Output: [(27 86 8 76) 8]
Test Case: 242 | Input/Output: [(18 60 8 53) 8]
Test Case: 243 | Input/Output: [(20 42 23 4) 4]
Test Case: 244 | Input/Output: [(85 19 16 72) 16]
Test Case: 245 | Input/Output: [(19 64 24 19) 19]
Test Case: 246 | Input/Output: [(93 54 55 6) 6]
Test Case: 247 | Input/Output: [(84 98 53 54) 53]
Test Case: 248 | Input/Output: [(26 4 87 15) 4]
Test Case: 249 | Input/Output: [(28 12 75 75) 12]
Test Case: 250 | Input/Output: [(55 96 22 52) 22]
Test Case: 251 | Input/Output: [(65 32 36 14) 14]
Test Case: 252 | Input/Output: [(57 92 80 31) 31]
Test Case: 253 | Input/Output: [(88 64 64 22) 22]
Test Case: 254 | Input/Output: [(20 70 10 7) 7]
Test Case: 255 | Input/Output: [(39 49 2 9) 2]
Test Case: 256 | Input/Output: [(16 83 84 11) 11]
Test Case: 257 | Input/Output: [(6 66 79 90) 6]
Test Case: 258 | Input/Output: [(42 82 19 87) 19]
Test Case: 259 | Input/Output: [(29 28 97 84) 28]
Test Case: 260 | Input/Output: [(58 99 11 1) 1]
Test Case: 261 | Input/Output: [(66 97 58 26) 26]
Test Case: 262 | Input/Output: [(85 10 32 5) 5]
Test Case: 263 | Input/Output: [(14 54 58 87) 14]
Test Case: 264 | Input/Output: [(33 95 55 89) 33]
Test Case: 265 | Input/Output: [(55 62 61 40) 40]
Test Case: 266 | Input/Output: [(46 39 58 63) 39]
Test Case: 267 | Input/Output: [(52 1 81 18) 1]
Test Case: 268 | Input/Output: [(98 83 33 75) 33]
Test Case: 269 | Input/Output: [(4 77 45 10) 4]
Test Case: 270 | Input/Output: [(30 26 22 48) 22]
Test Case: 271 | Input/Output: [(86 24 10 41) 10]
Test Case: 272 | Input/Output: [(28 35 14 90) 14]
Test Case: 273 | Input/Output: [(92 73 13 21) 13]
Test Case: 274 | Input/Output: [(74 62 3 11) 3]
Test Case: 275 | Input/Output: [(42 29 46 83) 29]
Test Case: 276 | Input/Output: [(68 60 97 61) 60]
Test Case: 277 | Input/Output: [(67 89 6 22) 6]
Test Case: 278 | Input/Output: [(92 4 10 14) 4]
Test Case: 279 | Input/Output: [(74 45 62 65) 45]
Test Case: 280 | Input/Output: [(55 69 71 94) 55]
Test Case: 281 | Input/Output: [(46 69 4 88) 4]
Test Case: 282 | Input/Output: [(33 68 28 8) 8]
Test Case: 283 | Input/Output: [(51 90 47 38) 38]
Test Case: 284 | Input/Output: [(40 18 41 42) 18]
Test Case: 285 | Input/Output: [(79 71 67 26) 26]
Test Case: 286 | Input/Output: [(99 57 67 39) 39]
Test Case: 287 | Input/Output: [(28 11 99 58) 11]
Test Case: 288 | Input/Output: [(3 7 9 1) 1]
Test Case: 289 | Input/Output: [(18 68 34 60) 18]
Test Case: 290 | Input/Output: [(93 96 48 42) 42]
Test Case: 291 | Input/Output: [(10 87 25 15) 10]
Test Case: 292 | Input/Output: [(60 54 11 34) 11]
Test Case: 293 | Input/Output: [(69 72 20 88) 20]
Test Case: 294 | Input/Output: [(14 7 41 72) 7]
Test Case: 295 | Input/Output: [(79 11 58 55) 11]
Test Case: 296 | Input/Output: [(26 96 89 42) 26]
Test Case: 297 | Input/Output: [(31 44 99 16) 16]
Test Case: 298 | Input/Output: [(90 100 79 21) 21]
Test Case: 299 | Input/Output: [(50 78 68 93) 50]
Test Case: 300 | Input/Output: [(30 90 22 54) 22]
Test Case: 301 | Input/Output: [(39 26 74 89) 26]
Test Case: 302 | Input/Output: [(74 48 89 13) 13]
Test Case: 303 | Input/Output: [(28 35 84 98) 28]
Test Case: 304 | Input/Output: [(42 19 19 9) 9]
Test Case: 305 | Input/Output: [(94 84 10 52) 10]
Test Case: 306 | Input/Output: [(51 39 39 68) 39]
Test Case: 307 | Input/Output: [(53 67 16 10) 10]
Test Case: 308 | Input/Output: [(24 48 90 24) 24]
Test Case: 309 | Input/Output: [(44 7 53 45) 7]
Test Case: 310 | Input/Output: [(42 62 66 22) 22]
Test Case: 311 | Input/Output: [(3 12 41 36) 3]
Test Case: 312 | Input/Output: [(97 50 36 73) 36]
Test Case: 313 | Input/Output: [(56 84 97 36) 36]
Test Case: 314 | Input/Output: [(95 84 22 92) 22]
Test Case: 315 | Input/Output: [(95 29 33 16) 16]
Test Case: 316 | Input/Output: [(76 88 54 34) 34]
Test Case: 317 | Input/Output: [(43 55 85 92) 43]
Test Case: 318 | Input/Output: [(44 63 52 5) 5]
Test Case: 319 | Input/Output: [(36 53 73 4) 4]
Test Case: 320 | Input/Output: [(28 38 40 4) 4]
Test Case: 321 | Input/Output: [(4 21 73 98) 4]
Test Case: 322 | Input/Output: [(19 57 69 25) 19]
Test Case: 323 | Input/Output: [(54 82 45 42) 42]
Test Case: 324 | Input/Output: [(90 45 11 18) 11]
Test Case: 325 | Input/Output: [(23 85 81 16) 16]
Test Case: 326 | Input/Output: [(0 21 10 33) 0]
Test Case: 327 | Input/Output: [(37 66 39 79) 37]
Test Case: 328 | Input/Output: [(6 62 2 52) 2]
Test Case: 329 | Input/Output: [(16 15 20 32) 15]
Test Case: 330 | Input/Output: [(15 70 33 19) 15]
Test Case: 331 | Input/Output: [(2 40 16 83) 2]
Test Case: 332 | Input/Output: [(14 96 40 55) 14]
Test Case: 333 | Input/Output: [(51 14 78 33) 14]
Test Case: 334 | Input/Output: [(40 70 53 51) 40]
Test Case: 335 | Input/Output: [(3 87 6 94) 3]
Test Case: 336 | Input/Output: [(81 19 55 80) 19]
Test Case: 337 | Input/Output: [(43 39 20 21) 20]
Test Case: 338 | Input/Output: [(16 62 51 95) 16]
Test Case: 339 | Input/Output: [(20 26 37 65) 20]
Test Case: 340 | Input/Output: [(34 31 87 4) 4]
Test Case: 341 | Input/Output: [(64 4 88 14) 4]
Test Case: 342 | Input/Output: [(0 63 12 29) 0]
Test Case: 343 | Input/Output: [(80 55 91 67) 55]
Test Case: 344 | Input/Output: [(86 60 42 35) 35]
Test Case: 345 | Input/Output: [(56 50 70 51) 50]
Test Case: 346 | Input/Output: [(65 19 88 47) 19]
Test Case: 347 | Input/Output: [(42 10 89 14) 10]
Test Case: 348 | Input/Output: [(65 65 68 55) 55]
Test Case: 349 | Input/Output: [(32 48 32 75) 32]
Test Case: 350 | Input/Output: [(24 16 84 6) 6]
Test Case: 351 | Input/Output: [(76 90 98 100) 76]
Test Case: 352 | Input/Output: [(96 12 71 78) 12]
Test Case: 353 | Input/Output: [(35 88 78 68) 35]
Test Case: 354 | Input/Output: [(75 25 71 78) 25]
Test Case: 355 | Input/Output: [(32 76 66 69) 32]
Test Case: 356 | Input/Output: [(64 70 99 0) 0]
Test Case: 357 | Input/Output: [(20 23 57 91) 20]
Test Case: 358 | Input/Output: [(36 21 4 66) 4]
Test Case: 359 | Input/Output: [(1 45 12 99) 1]
Test Case: 360 | Input/Output: [(14 26 88 85) 14]
Test Case: 361 | Input/Output: [(25 79 45 95) 25]
Test Case: 362 | Input/Output: [(47 5 28 98) 5]
Test Case: 363 | Input/Output: [(25 43 5 40) 5]
Test Case: 364 | Input/Output: [(56 57 43 90) 43]
Test Case: 365 | Input/Output: [(17 1 22 9) 1]
Test Case: 366 | Input/Output: [(5 42 60 87) 5]
Test Case: 367 | Input/Output: [(57 83 73 44) 44]
Test Case: 368 | Input/Output: [(94 5 70 45) 5]
Test Case: 369 | Input/Output: [(69 30 57 49) 30]
Test Case: 370 | Input/Output: [(40 71 47 71) 40]
Test Case: 371 | Input/Output: [(8 40 26 82) 8]
Test Case: 372 | Input/Output: [(65 19 99 7) 7]
Test Case: 373 | Input/Output: [(22 26 11 41) 11]
Test Case: 374 | Input/Output: [(79 23 20 87) 20]
Test Case: 375 | Input/Output: [(53 23 39 32) 23]
Test Case: 376 | Input/Output: [(68 18 16 15) 15]
Test Case: 377 | Input/Output: [(43 28 72 79) 28]
Test Case: 378 | Input/Output: [(7 41 30 43) 7]
Test Case: 379 | Input/Output: [(55 55 89 99) 55]
Test Case: 380 | Input/Output: [(60 87 63 10) 10]
Test Case: 381 | Input/Output: [(52 92 50 91) 50]
Test Case: 382 | Input/Output: [(70 56 45 87) 45]
Test Case: 383 | Input/Output: [(21 25 68 74) 21]
Test Case: 384 | Input/Output: [(67 56 67 87) 56]
Test Case: 385 | Input/Output: [(14 60 88 41) 14]
Test Case: 386 | Input/Output: [(59 72 80 68) 59]
Test Case: 387 | Input/Output: [(24 95 50 67) 24]
Test Case: 388 | Input/Output: [(0 55 20 3) 0]
Test Case: 389 | Input/Output: [(19 39 3 35) 3]
Test Case: 390 | Input/Output: [(65 22 82 51) 22]
Test Case: 391 | Input/Output: [(13 92 0 9) 0]
Test Case: 392 | Input/Output: [(95 51 65 13) 13]
Test Case: 393 | Input/Output: [(23 23 78 45) 23]
Test Case: 394 | Input/Output: [(58 8 19 35) 8]
Test Case: 395 | Input/Output: [(14 29 99 77) 14]
Test Case: 396 | Input/Output: [(3 74 98 84) 3]
Test Case: 397 | Input/Output: [(23 51 22 80) 22]
Test Case: 398 | Input/Output: [(87 99 33 75) 33]
Test Case: 399 | Input/Output: [(82 4 48 67) 4]
Test Case: 400 | Input/Output: [(-82 -13 27 -17) -82]
Test Case: 401 | Input/Output: [(-3 41 48 -28) -28]
Test Case: 402 | Input/Output: [(31 -26 77 -50) -50]
Test Case: 403 | Input/Output: [(56 -51 38 69) -51]
Test Case: 404 | Input/Output: [(-94 -5 -33 47) -94]
Test Case: 405 | Input/Output: [(-81 88 20 93) -81]
Test Case: 406 | Input/Output: [(-35 -84 -49 -50) -84]
Test Case: 407 | Input/Output: [(9 27 -60 42) -60]
Test Case: 408 | Input/Output: [(-100 22 67 -98) -100]
Test Case: 409 | Input/Output: [(41 -30 15 98) -30]
Test Case: 410 | Input/Output: [(-82 -50 -34 72) -82]
Test Case: 411 | Input/Output: [(-69 18 35 -67) -69]
Test Case: 412 | Input/Output: [(11 -88 -81 18) -88]
Test Case: 413 | Input/Output: [(60 82 50 -67) -67]
Test Case: 414 | Input/Output: [(66 32 7 -53) -53]
Test Case: 415 | Input/Output: [(-52 -58 -37 -33) -58]
Test Case: 416 | Input/Output: [(-21 -14 55 -91) -91]
Test Case: 417 | Input/Output: [(-42 -30 -19 72) -42]
Test Case: 418 | Input/Output: [(-55 -3 -43 -77) -77]
Test Case: 419 | Input/Output: [(25 3 2 53) 2]
Test Case: 420 | Input/Output: [(56 -21 -52 26) -52]
Test Case: 421 | Input/Output: [(12 -72 -52 61) -72]
Test Case: 422 | Input/Output: [(-52 56 -1 -51) -52]
Test Case: 423 | Input/Output: [(62 13 92 -14) -14]
Test Case: 424 | Input/Output: [(55 -60 -73 83) -73]
Test Case: 425 | Input/Output: [(-14 95 77 -47) -47]
Test Case: 426 | Input/Output: [(-70 -14 -55 -63) -70]
Test Case: 427 | Input/Output: [(-54 29 -48 -21) -54]
Test Case: 428 | Input/Output: [(34 -41 -74 97) -74]
Test Case: 429 | Input/Output: [(-16 -55 77 4) -55]
Test Case: 430 | Input/Output: [(-93 45 -34 19) -93]
Test Case: 431 | Input/Output: [(45 32 -55 -75) -75]
Test Case: 432 | Input/Output: [(21 59 54 -61) -61]
Test Case: 433 | Input/Output: [(69 -83 -64 -30) -83]
Test Case: 434 | Input/Output: [(-90 -32 -78 66) -90]
Test Case: 435 | Input/Output: [(85 93 42 16) 16]
Test Case: 436 | Input/Output: [(-49 44 70 -24) -49]
Test Case: 437 | Input/Output: [(-69 74 73 37) -69]
Test Case: 438 | Input/Output: [(-54 -92 37 30) -92]
Test Case: 439 | Input/Output: [(-88 -93 22 42) -93]
Test Case: 440 | Input/Output: [(-46 24 -6 -75) -75]
Test Case: 441 | Input/Output: [(-34 -10 45 88) -34]
Test Case: 442 | Input/Output: [(10 -21 43 50) -21]
Test Case: 443 | Input/Output: [(44 3 -64 11) -64]
Test Case: 444 | Input/Output: [(-28 57 -45 -12) -45]
Test Case: 445 | Input/Output: [(-44 -31 65 -39) -44]
Test Case: 446 | Input/Output: [(27 -89 43 96) -89]
Test Case: 447 | Input/Output: [(-82 -68 45 17) -82]
Test Case: 448 | Input/Output: [(-43 46 10 -70) -70]
Test Case: 449 | Input/Output: [(-16 4 -37 96) -37]
Test Case: 450 | Input/Output: [(75 -55 -31 -91) -91]
Test Case: 451 | Input/Output: [(-76 22 12 -29) -76]
Test Case: 452 | Input/Output: [(5 -69 -66 -93) -93]
Test Case: 453 | Input/Output: [(81 98 -37 -61) -61]
Test Case: 454 | Input/Output: [(39 -69 12 -82) -82]
Test Case: 455 | Input/Output: [(-48 -47 25 -13) -48]
Test Case: 456 | Input/Output: [(19 -51 5 -33) -51]
Test Case: 457 | Input/Output: [(86 57 -96 -35) -96]
Test Case: 458 | Input/Output: [(-27 52 24 29) -27]
Test Case: 459 | Input/Output: [(0 -29 31 95) -29]
Test Case: 460 | Input/Output: [(-32 57 89 -48) -48]
Test Case: 461 | Input/Output: [(61 44 -11 -78) -78]
Test Case: 462 | Input/Output: [(-47 -93 97 88) -93]
Test Case: 463 | Input/Output: [(10 -28 90 77) -28]
Test Case: 464 | Input/Output: [(52 12 -53 -24) -53]
Test Case: 465 | Input/Output: [(1 -23 5 -88) -88]
Test Case: 466 | Input/Output: [(71 -3 -87 -51) -87]
Test Case: 467 | Input/Output: [(-8 44 36 -11) -11]
Test Case: 468 | Input/Output: [(6 39 99 54) 6]
Test Case: 469 | Input/Output: [(-16 37 -38 55) -38]
Test Case: 470 | Input/Output: [(62 82 -77 -23) -77]
Test Case: 471 | Input/Output: [(-3 8 -24 -79) -79]
Test Case: 472 | Input/Output: [(-61 -62 -40 -16) -62]
Test Case: 473 | Input/Output: [(-18 -19 -51 -11) -51]
Test Case: 474 | Input/Output: [(-17 -100 61 -43) -100]
Test Case: 475 | Input/Output: [(26 47 43 7) 7]
Test Case: 476 | Input/Output: [(92 60 42 73) 42]
Test Case: 477 | Input/Output: [(-98 -68 33 -46) -98]
Test Case: 478 | Input/Output: [(24 45 -59 1) -59]
Test Case: 479 | Input/Output: [(-83 -95 97 -10) -95]
Test Case: 480 | Input/Output: [(-86 66 -90 -46) -90]
Test Case: 481 | Input/Output: [(-38 91 -55 -64) -64]
Test Case: 482 | Input/Output: [(14 -82 70 -7) -82]
Test Case: 483 | Input/Output: [(-69 -5 -40 100) -69]
Test Case: 484 | Input/Output: [(47 87 -14 1) -14]
Test Case: 485 | Input/Output: [(-12 -43 87 -83) -83]
Test Case: 486 | Input/Output: [(-39 73 -81 -58) -81]
Test Case: 487 | Input/Output: [(78 86 -96 -94) -96]
Test Case: 488 | Input/Output: [(-53 44 -19 84) -53]
Test Case: 489 | Input/Output: [(8 -51 23 43) -51]
Test Case: 490 | Input/Output: [(84 57 -58 -86) -86]
Test Case: 491 | Input/Output: [(73 -11 47 95) -11]
Test Case: 492 | Input/Output: [(-33 -23 -31 49) -33]
Test Case: 493 | Input/Output: [(-35 -13 64 -93) -93]
Test Case: 494 | Input/Output: [(84 73 -29 -48) -48]
Test Case: 495 | Input/Output: [(-54 -75 69 96) -75]
Test Case: 496 | Input/Output: [(91 67 28 -69) -69]
Test Case: 497 | Input/Output: [(-98 9 -55 47) -98]
Test Case: 498 | Input/Output: [(-95 -96 -26 16) -96]
Test Case: 499 | Input/Output: [(-76 -70 3 98) -76]
Test Case: 500 | Input/Output: [(-77 90 36 -68) -77]
Test Case: 501 | Input/Output: [(-90 -58 46 -12) -90]
Test Case: 502 | Input/Output: [(38 -44 -64 -59) -64]
Test Case: 503 | Input/Output: [(-41 -61 -36 35) -61]
Test Case: 504 | Input/Output: [(40 -31 5 -54) -54]
Test Case: 505 | Input/Output: [(2 -99 90 -58) -99]
Test Case: 506 | Input/Output: [(-26 71 77 66) -26]
Test Case: 507 | Input/Output: [(6 -46 49 31) -46]
Test Case: 508 | Input/Output: [(-95 21 -57 -22) -95]
Test Case: 509 | Input/Output: [(1 96 60 -53) -53]
Test Case: 510 | Input/Output: [(-82 -35 47 -14) -82]
Test Case: 511 | Input/Output: [(-32 28 -32 18) -32]
Test Case: 512 | Input/Output: [(-4 -94 -87 71) -94]
Test Case: 513 | Input/Output: [(88 3 9 -38) -38]
Test Case: 514 | Input/Output: [(-98 49 22 20) -98]
Test Case: 515 | Input/Output: [(-1 -31 18 98) -31]
Test Case: 516 | Input/Output: [(-61 -12 -58 74) -61]
Test Case: 517 | Input/Output: [(15 7 -34 7) -34]
Test Case: 518 | Input/Output: [(-21 -41 -39 52) -41]
Test Case: 519 | Input/Output: [(0 -7 -1 50) -7]
Test Case: 520 | Input/Output: [(-91 63 -98 -37) -98]
Test Case: 521 | Input/Output: [(-5 36 -55 -93) -93]
Test Case: 522 | Input/Output: [(11 43 60 22) 11]
Test Case: 523 | Input/Output: [(-11 33 4 -23) -23]
Test Case: 524 | Input/Output: [(98 90 -42 91) -42]
Test Case: 525 | Input/Output: [(25 -53 5 -25) -53]
Test Case: 526 | Input/Output: [(-20 75 19 -33) -33]
Test Case: 527 | Input/Output: [(-60 -5 17 45) -60]
Test Case: 528 | Input/Output: [(21 21 81 6) 6]
Test Case: 529 | Input/Output: [(22 -78 79 -36) -78]
Test Case: 530 | Input/Output: [(-64 34 -72 90) -72]
Test Case: 531 | Input/Output: [(-17 93 -38 64) -38]
Test Case: 532 | Input/Output: [(-83 16 90 34) -83]
Test Case: 533 | Input/Output: [(53 -11 72 51) -11]
Test Case: 534 | Input/Output: [(-81 -6 -66 88) -81]
Test Case: 535 | Input/Output: [(5 0 -32 42) -32]
Test Case: 536 | Input/Output: [(-62 -14 -40 -74) -74]
Test Case: 537 | Input/Output: [(77 -23 5 -62) -62]
Test Case: 538 | Input/Output: [(-90 -95 -67 43) -95]
Test Case: 539 | Input/Output: [(-81 -46 -88 -64) -88]
Test Case: 540 | Input/Output: [(-42 22 -72 -69) -72]
Test Case: 541 | Input/Output: [(35 33 -13 56) -13]
Test Case: 542 | Input/Output: [(-70 87 -17 55) -70]
Test Case: 543 | Input/Output: [(73 88 -22 86) -22]
Test Case: 544 | Input/Output: [(-84 -7 4 77) -84]
Test Case: 545 | Input/Output: [(12 -23 18 -38) -38]
Test Case: 546 | Input/Output: [(-6 77 -75 78) -75]
Test Case: 547 | Input/Output: [(64 -69 -83 11) -83]
Test Case: 548 | Input/Output: [(17 72 29 9) 9]
Test Case: 549 | Input/Output: [(-16 64 64 -27) -27]
Test Case: 550 | Input/Output: [(-11 39 65 -40) -40]
Test Case: 551 | Input/Output: [(76 -72 66 9) -72]
Test Case: 552 | Input/Output: [(26 -76 -100 -78) -100]
Test Case: 553 | Input/Output: [(-77 -34 29 12) -77]
Test Case: 554 | Input/Output: [(37 -97 31 -47) -97]
Test Case: 555 | Input/Output: [(-79 2 -16 -67) -79]
Test Case: 556 | Input/Output: [(7 -24 -33 -24) -33]
Test Case: 557 | Input/Output: [(62 -3 35 48) -3]
Test Case: 558 | Input/Output: [(-61 68 47 46) -61]
Test Case: 559 | Input/Output: [(-73 -80 9 77) -80]
Test Case: 560 | Input/Output: [(0 -37 17 -66) -66]
Test Case: 561 | Input/Output: [(-84 -98 -1 -82) -98]
Test Case: 562 | Input/Output: [(-52 -34 -37 38) -52]
Test Case: 563 | Input/Output: [(87 88 -4 57) -4]
Test Case: 564 | Input/Output: [(-21 -51 -55 -79) -79]
Test Case: 565 | Input/Output: [(34 2 28 72) 2]
Test Case: 566 | Input/Output: [(62 11 -37 47) -37]
Test Case: 567 | Input/Output: [(-33 -60 68 39) -60]
Test Case: 568 | Input/Output: [(51 26 81 -34) -34]
Test Case: 569 | Input/Output: [(-35 -57 57 -37) -57]
Test Case: 570 | Input/Output: [(-94 38 -100 6) -100]
Test Case: 571 | Input/Output: [(-72 -96 -55 66) -96]
Test Case: 572 | Input/Output: [(13 23 17 -1) -1]
Test Case: 573 | Input/Output: [(40 -94 49 75) -94]
Test Case: 574 | Input/Output: [(22 -33 -78 -41) -78]
Test Case: 575 | Input/Output: [(-34 -72 65 -82) -82]
Test Case: 576 | Input/Output: [(-51 66 -16 97) -51]
Test Case: 577 | Input/Output: [(-8 74 -18 -87) -87]
Test Case: 578 | Input/Output: [(39 16 69 -85) -85]
Test Case: 579 | Input/Output: [(67 -67 66 74) -67]
Test Case: 580 | Input/Output: [(-28 71 73 -44) -44]
Test Case: 581 | Input/Output: [(26 -67 45 40) -67]
Test Case: 582 | Input/Output: [(-41 70 -18 77) -41]
Test Case: 583 | Input/Output: [(-38 -3 54 -88) -88]
Test Case: 584 | Input/Output: [(-68 43 91 -60) -68]
Test Case: 585 | Input/Output: [(-90 -61 -69 77) -90]
Test Case: 586 | Input/Output: [(91 33 100 73) 33]
Test Case: 587 | Input/Output: [(-85 3 88 -15) -85]
Test Case: 588 | Input/Output: [(-90 65 29 -1) -90]
Test Case: 589 | Input/Output: [(-65 -27 -76 4) -76]
Test Case: 590 | Input/Output: [(-69 -17 0 -41) -69]
Test Case: 591 | Input/Output: [(-23 -33 79 -97) -97]
Test Case: 592 | Input/Output: [(42 64 -37 -90) -90]
Test Case: 593 | Input/Output: [(80 75 -75 -100) -100]
Test Case: 594 | Input/Output: [(5 22 53 -32) -32]
Test Case: 595 | Input/Output: [(47 -36 49 28) -36]
Test Case: 596 | Input/Output: [(9 -96 -84 1) -96]
Test Case: 597 | Input/Output: [(-64 40 -27 -20) -64]
Test Case: 598 | Input/Output: [(-1 -85 -20 62) -85]
Test Case: 599 | Input/Output: [(15 38 -11 -58) -58]
Test Case: 600 | Input/Output: [(-87 -30 -47 13) -87]
Test Case: 601 | Input/Output: [(87 -78 7 -30) -78]
Test Case: 602 | Input/Output: [(-83 45 88 13) -83]
Test Case: 603 | Input/Output: [(-46 -13 -36 34) -46]
Test Case: 604 | Input/Output: [(-16 -75 48 83) -75]
Test Case: 605 | Input/Output: [(-15 -94 -96 12) -96]
Test Case: 606 | Input/Output: [(41 62 -35 -66) -66]
Test Case: 607 | Input/Output: [(74 -87 -26 -17) -87]
Test Case: 608 | Input/Output: [(-56 37 64 4) -56]
Test Case: 609 | Input/Output: [(100 -75 61 -75) -75]
Test Case: 610 | Input/Output: [(9 -72 -67 76) -72]
Test Case: 611 | Input/Output: [(67 41 -17 -49) -49]
Test Case: 612 | Input/Output: [(-13 -52 -80 17) -80]
Test Case: 613 | Input/Output: [(99 -87 -42 -28) -87]
Test Case: 614 | Input/Output: [(75 -78 42 -88) -88]
Test Case: 615 | Input/Output: [(23 5 -98 58) -98]
Test Case: 616 | Input/Output: [(70 3 -9 47) -9]
Test Case: 617 | Input/Output: [(-78 -19 78 -27) -78]
Test Case: 618 | Input/Output: [(88 21 -38 -46) -46]
Test Case: 619 | Input/Output: [(-67 6 10 51) -67]
Test Case: 620 | Input/Output: [(97 -13 -89 99) -89]
Test Case: 621 | Input/Output: [(-69 -13 -17 -77) -77]
Test Case: 622 | Input/Output: [(-19 -38 99 -55) -55]
Test Case: 623 | Input/Output: [(56 -8 95 -48) -48]
Test Case: 624 | Input/Output: [(-80 -95 -14 -13) -95]
Test Case: 625 | Input/Output: [(41 24 -53 32) -53]
Test Case: 626 | Input/Output: [(-54 -59 -81 90) -81]
Test Case: 627 | Input/Output: [(-1 -40 -63 -9) -63]
Test Case: 628 | Input/Output: [(-24 -73 76 20) -73]
Test Case: 629 | Input/Output: [(-59 -53 -73 2) -73]
Test Case: 630 | Input/Output: [(73 22 65 6) 6]
Test Case: 631 | Input/Output: [(12 -75 -16 -63) -75]
Test Case: 632 | Input/Output: [(36 51 3 58) 3]
Test Case: 633 | Input/Output: [(54 34 76 -68) -68]
Test Case: 634 | Input/Output: [(-88 -79 -59 -37) -88]
Test Case: 635 | Input/Output: [(-38 -80 44 39) -80]
Test Case: 636 | Input/Output: [(-18 -30 -85 -11) -85]
Test Case: 637 | Input/Output: [(89 -34 -63 -59) -63]
Test Case: 638 | Input/Output: [(-45 -28 81 71) -45]
Test Case: 639 | Input/Output: [(82 -64 -19 -44) -64]
Test Case: 640 | Input/Output: [(-8 -49 -99 -88) -99]
Test Case: 641 | Input/Output: [(83 96 85 -82) -82]
Test Case: 642 | Input/Output: [(-83 60 -14 -43) -83]
Test Case: 643 | Input/Output: [(30 23 -18 6) -18]
Test Case: 644 | Input/Output: [(-13 -80 -50 -50) -80]
Test Case: 645 | Input/Output: [(66 64 -65 -50) -65]
Test Case: 646 | Input/Output: [(-98 -76 -69 -50) -98]
Test Case: 647 | Input/Output: [(-49 -59 -98 -100) -100]
Test Case: 648 | Input/Output: [(-71 -85 42 33) -85]
Test Case: 649 | Input/Output: [(10 12 65 7) 7]
Test Case: 650 | Input/Output: [(-3 -65 -44 -7) -65]
Test Case: 651 | Input/Output: [(54 -32 -28 38) -32]
Test Case: 652 | Input/Output: [(99 65 52 -75) -75]
Test Case: 653 | Input/Output: [(-12 34 62 74) -12]
Test Case: 654 | Input/Output: [(4 95 47 -29) -29]
Test Case: 655 | Input/Output: [(79 18 -8 27) -8]
Test Case: 656 | Input/Output: [(-27 7 47 -46) -46]
Test Case: 657 | Input/Output: [(84 54 -42 69) -42]
Test Case: 658 | Input/Output: [(77 100 -98 -9) -98]
Test Case: 659 | Input/Output: [(54 4 62 54) 4]
Test Case: 660 | Input/Output: [(89 42 75 37) 37]
Test Case: 661 | Input/Output: [(-81 -16 24 35) -81]
Test Case: 662 | Input/Output: [(-58 21 -97 -19) -97]
Test Case: 663 | Input/Output: [(81 -68 67 -40) -68]
Test Case: 664 | Input/Output: [(-74 64 -55 -89) -89]
Test Case: 665 | Input/Output: [(-80 -6 78 60) -80]
Test Case: 666 | Input/Output: [(36 97 -55 79) -55]
Test Case: 667 | Input/Output: [(-69 79 -71 -47) -71]
Test Case: 668 | Input/Output: [(-1 -93 36 -37) -93]
Test Case: 669 | Input/Output: [(62 92 30 -66) -66]
Test Case: 670 | Input/Output: [(4 -63 95 -68) -68]
Test Case: 671 | Input/Output: [(-24 -80 -23 20) -80]
Test Case: 672 | Input/Output: [(-48 48 26 -80) -80]
Test Case: 673 | Input/Output: [(15 -69 51 -16) -69]
Test Case: 674 | Input/Output: [(-90 98 -90 64) -90]
Test Case: 675 | Input/Output: [(29 56 43 -17) -17]
Test Case: 676 | Input/Output: [(66 -74 -43 -36) -74]
Test Case: 677 | Input/Output: [(-90 51 86 -86) -90]
Test Case: 678 | Input/Output: [(-99 -9 -23 43) -99]
Test Case: 679 | Input/Output: [(68 -26 77 -36) -36]
Test Case: 680 | Input/Output: [(-73 -4 33 -47) -73]
Test Case: 681 | Input/Output: [(-99 -55 17 79) -99]
Test Case: 682 | Input/Output: [(-40 0 -6 -70) -70]
Test Case: 683 | Input/Output: [(-1 51 76 18) -1]
Test Case: 684 | Input/Output: [(43 29 44 50) 29]
Test Case: 685 | Input/Output: [(77 -44 46 -27) -44]
Test Case: 686 | Input/Output: [(-85 -16 87 63) -85]
Test Case: 687 | Input/Output: [(90 11 46 -80) -80]
Test Case: 688 | Input/Output: [(28 -84 -74 2) -84]
Test Case: 689 | Input/Output: [(62 -74 -35 23) -74]
Test Case: 690 | Input/Output: [(77 36 -91 -12) -91]
Test Case: 691 | Input/Output: [(7 70 -15 31) -15]
Test Case: 692 | Input/Output: [(-13 -7 -20 -12) -20]
Test Case: 693 | Input/Output: [(49 7 31 -12) -12]
Test Case: 694 | Input/Output: [(61 -43 -42 20) -43]
Test Case: 695 | Input/Output: [(8 -28 86 47) -28]
Test Case: 696 | Input/Output: [(49 -25 48 -97) -97]
Test Case: 697 | Input/Output: [(-27 25 -16 -34) -34]
Test Case: 698 | Input/Output: [(83 83 42 96) 42]
Test Case: 699 | Input/Output: [(64 -50 14 91) -50]
Test Case: 700 | Input/Output: [(-57 24 51 -74) -74]
Test Case: 701 | Input/Output: [(60 -56 7 -72) -72]
Test Case: 702 | Input/Output: [(82 54 56 -59) -59]
Test Case: 703 | Input/Output: [(67 -18 -29 -93) -93]
Test Case: 704 | Input/Output: [(14 56 -51 18) -51]
Test Case: 705 | Input/Output: [(63 -73 -7 -17) -73]
Test Case: 706 | Input/Output: [(-48 -33 68 -14) -48]
Test Case: 707 | Input/Output: [(30 -82 73 42) -82]
Test Case: 708 | Input/Output: [(3 -87 -62 -69) -87]
Test Case: 709 | Input/Output: [(68 99 93 -38) -38]
Test Case: 710 | Input/Output: [(-34 -25 -66 -67) -67]
Test Case: 711 | Input/Output: [(-83 87 69 -76) -83]
Test Case: 712 | Input/Output: [(19 -28 71 -11) -28]
Test Case: 713 | Input/Output: [(17 -96 41 6) -96]
Test Case: 714 | Input/Output: [(86 -16 -70 65) -70]
Test Case: 715 | Input/Output: [(-49 -44 -66 -5) -66]
Test Case: 716 | Input/Output: [(-64 4 75 -32) -64]
Test Case: 717 | Input/Output: [(-94 -1 -4 -43) -94]
Test Case: 718 | Input/Output: [(-62 -67 -52 -19) -67]
Test Case: 719 | Input/Output: [(23 29 -81 -73) -81]
Test Case: 720 | Input/Output: [(25 -53 -6 -57) -57]
Test Case: 721 | Input/Output: [(-75 -73 -66 -71) -75]
Test Case: 722 | Input/Output: [(-78 -27 53 90) -78]
Test Case: 723 | Input/Output: [(-63 70 -66 -37) -66]
Test Case: 724 | Input/Output: [(90 -73 17 13) -73]
Test Case: 725 | Input/Output: [(-96 72 -100 -72) -100]
Test Case: 726 | Input/Output: [(87 -95 85 -86) -95]
Test Case: 727 | Input/Output: [(-56 62 -32 51) -56]
Test Case: 728 | Input/Output: [(-10 -52 -73 49) -73]
Test Case: 729 | Input/Output: [(-89 99 33 91) -89]
Test Case: 730 | Input/Output: [(95 92 -49 -35) -49]
Test Case: 731 | Input/Output: [(-65 73 82 92) -65]
Test Case: 732 | Input/Output: [(-37 -23 2 -26) -37]
Test Case: 733 | Input/Output: [(25 53 64 -65) -65]
Test Case: 734 | Input/Output: [(-20 -89 -83 -67) -89]
Test Case: 735 | Input/Output: [(-29 84 35 -3) -29]
Test Case: 736 | Input/Output: [(-97 17 -75 67) -97]
Test Case: 737 | Input/Output: [(-92 -19 61 26) -92]
Test Case: 738 | Input/Output: [(22 87 78 25) 22]
Test Case: 739 | Input/Output: [(41 84 81 29) 29]
Test Case: 740 | Input/Output: [(-1 58 57 100) -1]
Test Case: 741 | Input/Output: [(-84 49 -8 66) -84]
Test Case: 742 | Input/Output: [(-48 -48 -19 -35) -48]
Test Case: 743 | Input/Output: [(56 30 -48 -28) -48]
Test Case: 744 | Input/Output: [(95 -35 6 17) -35]
Test Case: 745 | Input/Output: [(-19 80 -55 -29) -55]
Test Case: 746 | Input/Output: [(-46 3 52 -21) -46]
Test Case: 747 | Input/Output: [(34 1 -2 31) -2]
Test Case: 748 | Input/Output: [(-79 -23 60 -93) -93]
Test Case: 749 | Input/Output: [(-72 52 -97 80) -97]
Test Case: 750 | Input/Output: [(13 -49 21 -4) -49]
Test Case: 751 | Input/Output: [(-24 36 -74 4) -74]
Test Case: 752 | Input/Output: [(76 37 -26 63) -26]
Test Case: 753 | Input/Output: [(-66 42 -68 21) -68]
Test Case: 754 | Input/Output: [(52 -53 -76 -42) -76]
Test Case: 755 | Input/Output: [(48 26 -67 -42) -67]
Test Case: 756 | Input/Output: [(-31 21 16 -56) -56]
Test Case: 757 | Input/Output: [(-28 -93 59 -33) -93]
Test Case: 758 | Input/Output: [(11 -67 51 -57) -67]
Test Case: 759 | Input/Output: [(59 17 -79 94) -79]
Test Case: 760 | Input/Output: [(-60 59 -5 79) -60]
Test Case: 761 | Input/Output: [(-41 98 24 -84) -84]
Test Case: 762 | Input/Output: [(39 -96 -99 96) -99]
Test Case: 763 | Input/Output: [(-61 -56 -8 55) -61]
Test Case: 764 | Input/Output: [(9 -50 48 79) -50]
Test Case: 765 | Input/Output: [(53 -59 -22 98) -59]
Test Case: 766 | Input/Output: [(1 42 -51 -5) -51]
Test Case: 767 | Input/Output: [(-26 -61 69 51) -61]
Test Case: 768 | Input/Output: [(59 61 33 2) 2]
Test Case: 769 | Input/Output: [(36 60 61 39) 36]
Test Case: 770 | Input/Output: [(61 41 68 -70) -70]
Test Case: 771 | Input/Output: [(1 -77 57 96) -77]
Test Case: 772 | Input/Output: [(-64 23 -79 18) -79]
Test Case: 773 | Input/Output: [(72 -5 83 71) -5]
Test Case: 774 | Input/Output: [(56 -80 -39 -40) -80]
Test Case: 775 | Input/Output: [(-96 50 68 53) -96]
Test Case: 776 | Input/Output: [(82 3 2 -62) -62]
Test Case: 777 | Input/Output: [(67 -84 -82 -83) -84]
Test Case: 778 | Input/Output: [(88 -89 -55 -72) -89]
Test Case: 779 | Input/Output: [(-95 -74 -42 -80) -95]
Test Case: 780 | Input/Output: [(-22 3 33 -41) -41]
Test Case: 781 | Input/Output: [(-96 27 -87 97) -96]
Test Case: 782 | Input/Output: [(-4 -47 98 -74) -74]
Test Case: 783 | Input/Output: [(-70 -49 14 -55) -70]
Test Case: 784 | Input/Output: [(-66 -62 74 43) -66]
Test Case: 785 | Input/Output: [(-8 -75 31 -88) -88]
Test Case: 786 | Input/Output: [(-68 -75 -27 -39) -75]
Test Case: 787 | Input/Output: [(19 29 61 94) 19]
Test Case: 788 | Input/Output: [(97 -57 58 28) -57]
Test Case: 789 | Input/Output: [(-81 16 83 -59) -81]
Test Case: 790 | Input/Output: [(-45 -30 64 87) -45]
Test Case: 791 | Input/Output: [(-16 -70 -5 81) -70]
Test Case: 792 | Input/Output: [(51 -29 -84 -31) -84]
Test Case: 793 | Input/Output: [(-1 60 -55 47) -55]
Test Case: 794 | Input/Output: [(-12 -56 71 76) -56]
Test Case: 795 | Input/Output: [(15 -66 -94 -86) -94]
Test Case: 796 | Input/Output: [(-15 -10 19 -12) -15]
Test Case: 797 | Input/Output: [(-67 61 12 15) -67]
Test Case: 798 | Input/Output: [(-12 -1 -64 -77) -77]
Test Case: 799 | Input/Output: [(80 -42 -31 63) -42]
Test Case: 800 | Input/Output: [(-19 -82 -56 -23) -82]
Test Case: 801 | Input/Output: [(13 -48 48 18) -48]
Test Case: 802 | Input/Output: [(-38 -73 -36 90) -73]
Test Case: 803 | Input/Output: [(-22 99 -39 -77) -77]
Test Case: 804 | Input/Output: [(68 -54 31 55) -54]
Test Case: 805 | Input/Output: [(75 48 26 39) 26]
Test Case: 806 | Input/Output: [(-63 -76 -49 85) -76]
Test Case: 807 | Input/Output: [(-32 -92 48 70) -92]
Test Case: 808 | Input/Output: [(60 56 -34 -79) -79]
Test Case: 809 | Input/Output: [(-88 -46 14 68) -88]
Test Case: 810 | Input/Output: [(-72 89 -82 75) -82]
Test Case: 811 | Input/Output: [(38 -74 32 -11) -74]
Test Case: 812 | Input/Output: [(-16 45 -60 25) -60]
Test Case: 813 | Input/Output: [(-91 -68 -20 -32) -91]
Test Case: 814 | Input/Output: [(-87 35 90 -30) -87]
Test Case: 815 | Input/Output: [(-52 57 67 -77) -77]
Test Case: 816 | Input/Output: [(50 4 87 -25) -25]
Test Case: 817 | Input/Output: [(66 71 -10 94) -10]
Test Case: 818 | Input/Output: [(63 35 91 -38) -38]
Test Case: 819 | Input/Output: [(-39 2 -5 -75) -75]
Test Case: 820 | Input/Output: [(47 -81 -54 2) -81]
Test Case: 821 | Input/Output: [(99 14 74 -84) -84]
Test Case: 822 | Input/Output: [(15 54 -61 7) -61]
Test Case: 823 | Input/Output: [(37 31 -96 -14) -96]
Test Case: 824 | Input/Output: [(-23 -87 -84 88) -87]
Test Case: 825 | Input/Output: [(57 88 70 74) 57]
Test Case: 826 | Input/Output: [(-48 -74 -15 -37) -74]
Test Case: 827 | Input/Output: [(-39 -88 -74 68) -88]
Test Case: 828 | Input/Output: [(79 35 22 78) 22]
Test Case: 829 | Input/Output: [(2 39 91 -47) -47]
Test Case: 830 | Input/Output: [(-54 94 -66 -61) -66]
Test Case: 831 | Input/Output: [(-52 27 -26 66) -52]
Test Case: 832 | Input/Output: [(91 -19 -81 27) -81]
Test Case: 833 | Input/Output: [(-82 34 -100 92) -100]
Test Case: 834 | Input/Output: [(97 62 1 59) 1]
Test Case: 835 | Input/Output: [(29 -3 56 -71) -71]
Test Case: 836 | Input/Output: [(-63 43 87 13) -63]
Test Case: 837 | Input/Output: [(83 48 27 -80) -80]
Test Case: 838 | Input/Output: [(27 -30 -75 43) -75]
Test Case: 839 | Input/Output: [(82 -92 -49 -32) -92]
Test Case: 840 | Input/Output: [(51 93 20 -43) -43]
Test Case: 841 | Input/Output: [(71 -62 -44 40) -62]
Test Case: 842 | Input/Output: [(-98 -57 -74 63) -98]
Test Case: 843 | Input/Output: [(-9 -5 25 -17) -17]
Test Case: 844 | Input/Output: [(-75 -75 71 -54) -75]
Test Case: 845 | Input/Output: [(-12 -18 14 -80) -80]
Test Case: 846 | Input/Output: [(-89 44 19 -25) -89]
Test Case: 847 | Input/Output: [(80 16 -66 48) -66]
Test Case: 848 | Input/Output: [(-30 97 5 -81) -81]
Test Case: 849 | Input/Output: [(46 79 -92 -45) -92]
Test Case: 850 | Input/Output: [(-54 24 -45 25) -54]
Test Case: 851 | Input/Output: [(43 73 37 -62) -62]
Test Case: 852 | Input/Output: [(-23 -73 -85 94) -85]
Test Case: 853 | Input/Output: [(-68 76 0 73) -68]
Test Case: 854 | Input/Output: [(-93 -66 16 -96) -96]
Test Case: 855 | Input/Output: [(-41 -73 70 -88) -88]
Test Case: 856 | Input/Output: [(-47 -52 80 -76) -76]
Test Case: 857 | Input/Output: [(22 -16 -41 -80) -80]
Test Case: 858 | Input/Output: [(-80 -97 -84 17) -97]
Test Case: 859 | Input/Output: [(93 50 71 -68) -68]
Test Case: 860 | Input/Output: [(82 32 -67 83) -67]
Test Case: 861 | Input/Output: [(-79 20 29 -43) -79]
Test Case: 862 | Input/Output: [(-98 -74 -74 -40) -98]
Test Case: 863 | Input/Output: [(11 -74 -69 36) -74]
Test Case: 864 | Input/Output: [(14 -27 -100 -59) -100]
Test Case: 865 | Input/Output: [(-69 98 50 63) -69]
Test Case: 866 | Input/Output: [(52 -7 -81 49) -81]
Test Case: 867 | Input/Output: [(78 -83 35 -43) -83]
Test Case: 868 | Input/Output: [(-88 -27 -56 -73) -88]
Test Case: 869 | Input/Output: [(79 -86 -53 -14) -86]
Test Case: 870 | Input/Output: [(-85 60 74 55) -85]
Test Case: 871 | Input/Output: [(-46 -29 -24 47) -46]
Test Case: 872 | Input/Output: [(22 -51 54 17) -51]
Test Case: 873 | Input/Output: [(16 61 -48 -24) -48]
Test Case: 874 | Input/Output: [(-49 -60 87 -31) -60]
Test Case: 875 | Input/Output: [(-38 25 -18 73) -38]
Test Case: 876 | Input/Output: [(89 29 -82 93) -82]
Test Case: 877 | Input/Output: [(-23 71 -29 33) -29]
Test Case: 878 | Input/Output: [(92 -59 -73 79) -73]
Test Case: 879 | Input/Output: [(44 40 -44 90) -44]
Test Case: 880 | Input/Output: [(7 -29 52 -14) -29]
Test Case: 881 | Input/Output: [(87 -25 4 -4) -25]
Test Case: 882 | Input/Output: [(23 25 -58 51) -58]
Test Case: 883 | Input/Output: [(81 17 -68 -94) -94]
Test Case: 884 | Input/Output: [(5 -92 55 -34) -92]
Test Case: 885 | Input/Output: [(18 -2 60 85) -2]
Test Case: 886 | Input/Output: [(-91 59 99 16) -91]
Test Case: 887 | Input/Output: [(-46 -53 -44 31) -53]
Test Case: 888 | Input/Output: [(55 6 -58 -73) -73]
Test Case: 889 | Input/Output: [(72 67 46 -10) -10]
Test Case: 890 | Input/Output: [(17 22 67 -87) -87]
Test Case: 891 | Input/Output: [(-53 -86 27 81) -86]
Test Case: 892 | Input/Output: [(-42 29 8 -5) -42]
Test Case: 893 | Input/Output: [(37 67 -69 21) -69]
Test Case: 894 | Input/Output: [(30 -33 61 -10) -33]
Test Case: 895 | Input/Output: [(2 -57 64 -72) -72]
Test Case: 896 | Input/Output: [(78 87 -42 -13) -42]
Test Case: 897 | Input/Output: [(-29 13 49 51) -29]
Test Case: 898 | Input/Output: [(4 -92 72 13) -92]
Test Case: 899 | Input/Output: [(27 -28 -99 41) -99]
Test Case: 900 | Input/Output: [(-23 21 55 -79) -79]
Test Case: 901 | Input/Output: [(10 -60 -76 -63) -76]
Test Case: 902 | Input/Output: [(-38 59 99 -19) -38]
Test Case: 903 | Input/Output: [(6 -100 45 58) -100]
Test Case: 904 | Input/Output: [(63 61 -5 78) -5]
Test Case: 905 | Input/Output: [(36 9 -42 -51) -51]
Test Case: 906 | Input/Output: [(-19 -34 -34 26) -34]
Test Case: 907 | Input/Output: [(-76 -49 55 -65) -76]
Test Case: 908 | Input/Output: [(-77 -62 35 90) -77]
Test Case: 909 | Input/Output: [(71 -31 -63 57) -63]
Test Case: 910 | Input/Output: [(-4 -58 82 -68) -68]
Test Case: 911 | Input/Output: [(-80 -100 17 -88) -100]
Test Case: 912 | Input/Output: [(-29 -25 -6 9) -29]
Test Case: 913 | Input/Output: [(79 -48 -20 3) -48]
Test Case: 914 | Input/Output: [(-68 -96 2 22) -96]
Test Case: 915 | Input/Output: [(4 -28 -27 -51) -51]
Test Case: 916 | Input/Output: [(-95 -81 95 -36) -95]
Test Case: 917 | Input/Output: [(-96 -20 7 -23) -96]
Test Case: 918 | Input/Output: [(13 -69 15 -1) -69]
Test Case: 919 | Input/Output: [(-28 -98 17 53) -98]
Test Case: 920 | Input/Output: [(55 -20 41 35) -20]
Test Case: 921 | Input/Output: [(-70 -91 -26 -99) -99]
Test Case: 922 | Input/Output: [(-83 -31 -41 -14) -83]
Test Case: 923 | Input/Output: [(57 -15 -57 -52) -57]
Test Case: 924 | Input/Output: [(56 46 34 -1) -1]
Test Case: 925 | Input/Output: [(-12 -38 -86 -60) -86]
Test Case: 926 | Input/Output: [(-83 36 91 -44) -83]
Test Case: 927 | Input/Output: [(92 29 -97 91) -97]
Test Case: 928 | Input/Output: [(-54 85 -48 -11) -54]
Test Case: 929 | Input/Output: [(31 -96 13 -50) -96]
Test Case: 930 | Input/Output: [(-68 92 2 -20) -68]
Test Case: 931 | Input/Output: [(-62 80 89 38) -62]
Test Case: 932 | Input/Output: [(71 -17 67 96) -17]
Test Case: 933 | Input/Output: [(-9 -45 77 33) -45]
Test Case: 934 | Input/Output: [(53 -88 3 -81) -88]
Test Case: 935 | Input/Output: [(15 65 -35 -40) -40]
Test Case: 936 | Input/Output: [(-11 34 -84 3) -84]
Test Case: 937 | Input/Output: [(-27 -45 96 57) -45]
Test Case: 938 | Input/Output: [(63 -1 9 89) -1]
Test Case: 939 | Input/Output: [(2 -63 -7 83) -63]
Test Case: 940 | Input/Output: [(32 97 -13 -17) -17]
Test Case: 941 | Input/Output: [(90 -33 -17 31) -33]
Test Case: 942 | Input/Output: [(65 -26 63 47) -26]
Test Case: 943 | Input/Output: [(-93 15 71 -66) -93]
Test Case: 944 | Input/Output: [(-97 57 22 49) -97]
Test Case: 945 | Input/Output: [(-56 -63 -98 -73) -98]
Test Case: 946 | Input/Output: [(99 10 60 -31) -31]
Test Case: 947 | Input/Output: [(27 -24 50 82) -24]
Test Case: 948 | Input/Output: [(14 -27 -43 -28) -43]
Test Case: 949 | Input/Output: [(54 -48 77 16) -48]
Test Case: 950 | Input/Output: [(81 -81 -34 -5) -81]
Test Case: 951 | Input/Output: [(-41 27 -34 59) -41]
Test Case: 952 | Input/Output: [(-96 10 -42 47) -96]
Test Case: 953 | Input/Output: [(-42 -32 -53 85) -53]
Test Case: 954 | Input/Output: [(-49 53 80 -83) -83]
Test Case: 955 | Input/Output: [(-85 -74 -85 -40) -85]
Test Case: 956 | Input/Output: [(-20 21 -51 79) -51]
Test Case: 957 | Input/Output: [(-100 82 -28 35) -100]
Test Case: 958 | Input/Output: [(35 16 35 -73) -73]
Test Case: 959 | Input/Output: [(-18 49 -80 37) -80]
Test Case: 960 | Input/Output: [(90 75 -95 37) -95]
Test Case: 961 | Input/Output: [(51 14 -9 25) -9]
Test Case: 962 | Input/Output: [(-94 38 51 -49) -94]
Test Case: 963 | Input/Output: [(-74 -94 -90 24) -94]
Test Case: 964 | Input/Output: [(-56 55 24 53) -56]
Test Case: 965 | Input/Output: [(16 -50 78 50) -50]
Test Case: 966 | Input/Output: [(39 -49 -59 59) -59]
Test Case: 967 | Input/Output: [(-65 -89 -24 -64) -89]
Test Case: 968 | Input/Output: [(-88 -32 69 38) -88]
Test Case: 969 | Input/Output: [(89 3 -20 54) -20]
Test Case: 970 | Input/Output: [(-73 -79 -52 48) -79]
Test Case: 971 | Input/Output: [(-63 22 28 -86) -86]
Test Case: 972 | Input/Output: [(-80 -72 45 18) -80]
Test Case: 973 | Input/Output: [(81 97 -95 0) -95]
Test Case: 974 | Input/Output: [(15 -20 29 -37) -37]
Test Case: 975 | Input/Output: [(-61 38 27 -56) -61]
Test Case: 976 | Input/Output: [(85 46 -20 1) -20]
Test Case: 977 | Input/Output: [(-50 -18 48 82) -50]
Test Case: 978 | Input/Output: [(-37 100 12 25) -37]
Test Case: 979 | Input/Output: [(93 24 -12 -34) -34]
Test Case: 980 | Input/Output: [(-38 75 3 -97) -97]
Test Case: 981 | Input/Output: [(45 -59 17 34) -59]
Test Case: 982 | Input/Output: [(3 12 -72 -96) -96]
Test Case: 983 | Input/Output: [(-33 -30 26 96) -33]
Test Case: 984 | Input/Output: [(27 18 94 7) 7]
Test Case: 985 | Input/Output: [(63 100 10 35) 10]
Test Case: 986 | Input/Output: [(73 14 30 -56) -56]
Test Case: 987 | Input/Output: [(38 32 -92 88) -92]
Test Case: 988 | Input/Output: [(-12 74 -8 -69) -69]
Test Case: 989 | Input/Output: [(-72 -20 -99 68) -99]
Test Case: 990 | Input/Output: [(-71 38 21 91) -71]
Test Case: 991 | Input/Output: [(69 -77 30 -81) -81]
Test Case: 992 | Input/Output: [(-23 -31 -29 -12) -31]
Test Case: 993 | Input/Output: [(7 58 24 32) 7]
Test Case: 994 | Input/Output: [(-93 45 17 -92) -93]
Test Case: 995 | Input/Output: [(93 -44 81 -36) -44]
Test Case: 996 | Input/Output: [(-46 42 -19 -17) -46]
Test Case: 997 | Input/Output: [(35 8 35 -1) -1]
Test Case: 998 | Input/Output: [(-7 -86 37 -20) -86]
Test Case: 999 | Input/Output: [(96 46 19 95) 19]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = 98 -91 6 21 -20 81 65 -75 6 96 -72 111 106 -29 55 104
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[91 91 91 -90] -90] [[86 44 86 86] 44] [[-68 -68 -68 34] -68] [[-46 -25 -25 -25] -46] [[-54 62 62 62] -54] [[26 26 26 5] 5] [[-13 -8 -8 -8] -13] [[33 57 57 57] 33] [[31 -10 31 31] -10] [[74 -95 -95 -95] -95] [(47 47 47 47) 47] [(26 26 26 26) 26] [(50 50 50 50) 50] [(35 35 35 35) 35] [(-43 -43 -43 -43) -43] [(87 64 23 83) 23] [(29 0 6 83) 0] [(90 73 42 78) 42] [(23 88 50 60) 23] [(31 87 31 97) 31] [(20 48 30 47) 20] [(86 9 67 26) 9] [(33 59 16 78) 16] [(15 57 75 22) 15] [(43 3 2 73) 2] [(46 29 23 95) 23] [(10 16 37 16) 10] [(52 30 1 91) 1] [(34 78 97 97) 34] [(20 41 60 82) 20] [(70 15 9 100) 9] [(42 72 3 78) 3] [(39 28 76 81) 28] [(14 18 42 62) 14] [(46 51 50 47) 46] [(-96 82 50 36) -96] [(-61 -53 93 -25) -61] [(-19 86 -78 -71) -78] [(-19 0 55 -91) -91] [(55 -95 21 34) -95] [(28 -73 -84 -65) -84] [(-51 -71 -66 -50) -71] [(-74 98 40 12) -74] [(-60 10 18 42) -60] [(100 -12 20 -55) -55] [(-42 97 14 -41) -42] [(47 -75 -76 47) -76] [(27 -95 -86 -93) -95] [(87 0 85 -96) -96] [(-43 22 35 -38) -43] [(-45 97 20 98) -45] [(-56 10 16 81) -56] [(-75 -1 30 -46) -75] [(-87 -55 27 -23) -87] [(-81 44 55 41) -81] [(-82 -90 -20 79) -90] [(-64 -19 61 -33) -64] [(-41 -75 -43 -62) -75] [(35 -3 -97 -46) -97] [(59 -47 -41 -54) -54] [(56 3 -95 -10) -95] [(35 -21 -97 52) -97] [(-52 73 -85 -40) -85] [(-81 61 51 77) -81] [(10 -19 65 -19) -19] [(95 24 -58 82) -58] [(29 -46 67 -42) -46] [(-78 96 -15 -42) -78] [(-93 59 56 25) -93] [(18 -8 -35 -62) -62] [(-90 -1 -47 -82) -90] [(85 -70 74 100) -70] [(-9 61 -28 32) -28] [(-20 -82 15 -25) -82] [(74 -5 17 19) -5] [(-45 87 6 68) -45] [(83 -11 -23 -20) -23] [(92 92 -61 -30) -61] [(-26 23 -55 79) -55] [(-4 33 -95 63) -95] [(-82 88 94 -6) -82] [(-65 4 57 7) -65] [(-36 10 23 29) -36] [(60 -4 -53 41) -53] [(79 63 -34 72) -34] [(97 54 -17 86) -17] [(-82 -70 47 75) -82] [(-49 -16 90 -12) -49] [(8 -36 71 -54) -54] [(78 -71 76 -54) -71] [(18 -15 3 36) -15] [(44 55 28 -73) -73] [(-22 38 13 -83) -83] [(13 80 62 -63) -63] [(-53 -87 -9 -33) -87])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 50                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 30                 
Correct output: 9                   | Program output: 67                 
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 75                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 97                 
Correct output: 20                  | Program output: 60                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 76                 
Correct output: 14                  | Program output: 42                 
Correct output: 46                  | Program output: 50                 
Correct output: -96                 | Program output: 50                 
Correct output: -61                 | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: 55                 
Correct output: -95                 | Program output: 21                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: 40                 
Correct output: -60                 | Program output: 18                 
Correct output: -55                 | Program output: 20                 
Correct output: -42                 | Program output: 14                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 85                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 20                 
Correct output: -56                 | Program output: 16                 
Correct output: -75                 | Program output: 30                 
Correct output: -87                 | Program output: 27                 
Correct output: -81                 | Program output: 55                 
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: 61                 
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: 51                 
Correct output: -19                 | Program output: 65                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 67                 
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: 56                 
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: 74                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: 15                 
Correct output: -5                  | Program output: 17                 
Correct output: -45                 | Program output: 6                  
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: 94                 
Correct output: -65                 | Program output: 57                 
Correct output: -36                 | Program output: 23                 
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 47                 
Correct output: -49                 | Program output: 90                 
Correct output: -54                 | Program output: 71                 
Correct output: -71                 | Program output: 76                 
Correct output: -15                 | Program output: 3                  
Correct output: -73                 | Program output: 28                 
Correct output: -83                 | Program output: 13                 
Correct output: -63                 | Program output: 62                 
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction integer_yank} {:close 0, :instruction tagged_715} {:close 0, :instruction print_integer} {:close 1, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction 2} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction -4} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_exec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range})
Lexicase best program: (integer_dec in3 boolean_flush boolean_eq in4 integer_yank tagged_715 print_integer exec_if () (exec_if (exec_dup_items exec_rot (boolean_and boolean_flush 2 boolean_yank exec_shove (integer_rot exec_do*times () exec_dup_times (exec_noop boolean_rot integer_div exec_pop (integer_gte exec_rot (-4 integer_yank exec_empty) (boolean_xor print_exec (exec_y_when_autoconstructing (exec_y (exec_do*range (print_boolean integer_min exec_k (exec_do*range ()) ()))))) ())))) () ()) ()))
Lexicase best errors: [0 1 0 1 0 0 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 60
Percent parens: 0.367
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction integer_yank} {:close 0, :instruction tagged_715} {:close 0, :instruction print_integer} {:close 1, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction 2} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction -4} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_exec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range})
Zero cases best program: (integer_dec in3 boolean_flush boolean_eq in4 integer_yank tagged_715 print_integer exec_if () (exec_if (exec_dup_items exec_rot (boolean_and boolean_flush 2 boolean_yank exec_shove (integer_rot exec_do*times () exec_dup_times (exec_noop boolean_rot integer_div exec_pop (integer_gte exec_rot (-4 integer_yank exec_empty) (boolean_xor print_exec (exec_y_when_autoconstructing (exec_y (exec_do*range (print_boolean integer_min exec_k (exec_do*range ()) ()))))) ())))) () ()) ()))
Zero cases best errors: [0 1 0 1 0 0 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 60
Percent parens: 0.367
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 3 2 2 9 2 2 3 2 2)
Population mean number of elite cases: 0.03
Count of perfect (error zero) individuals by case: (2 3 2 2 9 2 2 3 2 2)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction tag_integer_206} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction tagged_6} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction tagged_214} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_and} {:close 1, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction 85} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_exec_177} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_add} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction in1} {:close 0, :instruction integer_inc})
Best program: (exec_yankdup in2 integer_gte boolean_dup_items integer_pop boolean_frominteger exec_eq exec_empty integer_mod tag_integer_206 exec_rot (in3 exec_shove (integer_swap tagged_6 boolean_invert_first_then_and integer_div tagged_214 integer_add exec_k_when_autoconstructing (boolean_flush exec_y (exec_do*times () exec_if (boolean_and in3) (boolean_rot print_integer in1) boolean_invert_second_then_and integer_shove exec_do*range (integer_inc integer_empty) boolean_rot boolean_yank boolean_swap) integer_sub boolean_rot integer_flush exec_when (integer_max integer_max integer_dup_times boolean_yankdup) boolean_dup 85 boolean_pop integer_mult integer_gte integer_yank tag_exec_177 (integer_mod boolean_not exec_pop (boolean_swap integer_stackdepth exec_dup_items) integer_gt print_newline integer_dup_items integer_swap boolean_xor exec_do*times (boolean_invert_first_then_and exec_y (print_exec () boolean_not integer_flush boolean_stackdepth integer_inc exec_dup () boolean_dup boolean_dup_times) integer_swap integer_add) integer_yankdup exec_yankdup exec_while (exec_stackdepth) exec_pop (print_newline in1 integer_inc))) ())) () ())
Errors: [0 1 0 1 0 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 84
Size: 105
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 9.971
Median total errors in population: 10
Error averages by case: (0.998 0.997 0.998 0.998 0.991 0.998 0.998 0.997 0.998 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.463
Average program size in population (points): 69.207
Average percent parens in population: 0.276
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.29
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 522114
--- Timings ---
Current time: 1559582763152 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  4.3%
Reproduction:         0.8 seconds, 32.4%
Fitness Testing:      1.6 seconds, 63.3%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -13                
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: 74                 
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: 28                 
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: 27                 
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: 35                 
Correct output: -54                 | Program output: 59                 
Correct output: -95                 | Program output: 56                 
Correct output: -97                 | Program output: 35                 
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: 95                 
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: 83                 
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: 60                 
Correct output: -34                 | Program output: 79                 
Correct output: -17                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction -61} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Lexicase best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup integer_flush boolean_and in2 exec_eq) boolean_invert_first_then_and exec_when (integer_yankdup) exec_rot (tag_integer_693 integer_shove integer_dup_times integer_empty integer_sub in1 exec_dup_times (boolean_or) in2 exec_rot (exec_noop integer_yankdup) (integer_fromboolean integer_yank) (integer_add) exec_while (-61 print_exec (exec_dup (integer_max -17 integer_mod integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4 integer_mult) boolean_swap integer_max exec_s (exec_do*range (integer_gt) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_stackdepth boolean_yankdup) (boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth exec_do*while () exec_when (integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (exec_pop ()) integer_inc integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub)) (boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) (boolean_invert_second_then_and exec_shove () boolean_dup integer_pop boolean_empty) integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 boolean_yank boolean_rot print_integer boolean_yankdup boolean_dup)
Lexicase best errors: [0 1 0 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 123
Percent parens: 0.203
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction -61} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Zero cases best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup integer_flush boolean_and in2 exec_eq) boolean_invert_first_then_and exec_when (integer_yankdup) exec_rot (tag_integer_693 integer_shove integer_dup_times integer_empty integer_sub in1 exec_dup_times (boolean_or) in2 exec_rot (exec_noop integer_yankdup) (integer_fromboolean integer_yank) (integer_add) exec_while (-61 print_exec (exec_dup (integer_max -17 integer_mod integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4 integer_mult) boolean_swap integer_max exec_s (exec_do*range (integer_gt) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_stackdepth boolean_yankdup) (boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth exec_do*while () exec_when (integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (exec_pop ()) integer_inc integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub)) (boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) (boolean_invert_second_then_and exec_shove () boolean_dup integer_pop boolean_empty) integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 boolean_yank boolean_rot print_integer boolean_yankdup boolean_dup)
Zero cases best errors: [0 1 0 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 123
Percent parens: 0.203
--- Lexicase Population Statistics ---
Count of elite individuals by case: (28 238 13 14 15 238 238 371 14 238)
Population mean number of elite cases: 1.41
Count of perfect (error zero) individuals by case: (28 238 13 14 15 238 238 371 14 238)
Population mean number of perfect (error zero) cases: 1.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_while} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup integer_flush boolean_and in2 exec_eq) exec_pop (exec_when (integer_yankdup) exec_rot (tag_integer_693 integer_shove integer_dup_times integer_empty integer_sub in1 integer_empty integer_fromboolean print_boolean in1 boolean_shove integer_mult boolean_rot boolean_empty) (integer_stackdepth boolean_invert_second_then_and boolean_shove exec_while () exec_flush boolean_invert_first_then_and integer_stackdepth) (integer_gt exec_flush) integer_max boolean_dup print_boolean) exec_noop exec_do*while (boolean_yank integer_dup_times integer_dup) integer_lte integer_fromboolean integer_max -17 integer_mod integer_dup_items exec_yank boolean_xor boolean_yank boolean_empty in4 integer_mult boolean_swap integer_max exec_s (exec_do*range (integer_gt) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_stackdepth boolean_yankdup) (boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth exec_do*while () exec_when (integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (exec_pop ()) integer_inc integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup boolean_invert_second_then_and exec_shove () boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 boolean_yank boolean_rot print_integer boolean_yankdup boolean_dup)
Errors: [0 1 0 0 0 1 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 112
Size: 133
Percent parens: 0.158
--- Population Statistics ---
Average total errors in population: 8.593
Median total errors in population: 9
Error averages by case: (0.972 0.762 0.987 0.986 0.985 0.762 0.762 0.629 0.986 0.762)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 71.907
Average program size in population (points): 95.823
Average percent parens in population: 0.259
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.501
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 118
Genome diversity (% unique genomes):	 0.669
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 120
Syntactic diversity (% unique Push programs):	 0.663
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1340845
--- Timings ---
Current time: 1559582766330 milliseconds
Total Time:           6.1 seconds
Initialization:       0.1 seconds,  1.8%
Reproduction:         2.4 seconds, 38.4%
Fitness Testing:      2.4 seconds, 39.8%
Report:               1.2 seconds, 20.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 544
Test mean error for best: 0.54400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Lexicase best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup integer_flush boolean_and in2 exec_eq) exec_pop (exec_when (integer_yankdup) exec_rot (tag_integer_693 integer_shove integer_dup_times integer_empty integer_sub in1 integer_empty integer_yankdup) (integer_fromboolean integer_yank) (integer_add) exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_mod integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4 integer_mult) integer_lte integer_max exec_s (exec_do*range (integer_gt) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_stackdepth boolean_yankdup) (boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth exec_do*while () exec_when (integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (exec_pop ()) integer_inc integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub)) boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup boolean_invert_second_then_and exec_shove () boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Lexicase best errors: [0 0 1 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 117
Percent parens: 0.197
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Zero cases best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup integer_flush boolean_and in2 exec_eq) exec_pop (exec_when (integer_yankdup) exec_rot (tag_integer_693 integer_shove integer_dup_times integer_empty integer_sub in1 integer_empty integer_yankdup) (integer_fromboolean integer_yank) (integer_add) exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_mod integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4 integer_mult) integer_lte integer_max exec_s (exec_do*range (integer_gt) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_stackdepth boolean_yankdup) (boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth exec_do*while () exec_when (integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (exec_pop ()) integer_inc integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub)) boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup boolean_invert_second_then_and exec_shove () boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Zero cases best errors: [0 0 1 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 117
Percent parens: 0.197
--- Lexicase Population Statistics ---
Count of elite individuals by case: (83 319 2 677 80 318 319 358 84 320)
Population mean number of elite cases: 2.56
Count of perfect (error zero) individuals by case: (83 319 2 677 80 318 319 358 84 320)
Population mean number of perfect (error zero) cases: 2.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup integer_flush boolean_and in2 exec_eq) exec_pop (exec_when (integer_yankdup) exec_rot (tag_integer_693 integer_shove integer_dup_times integer_empty integer_sub in1 integer_empty integer_yankdup) (integer_fromboolean integer_yank) (integer_add) exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_mod integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4 integer_mult) integer_lte integer_max exec_s (exec_do*range (integer_gt) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_stackdepth boolean_yankdup) (boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth exec_do*while () exec_when (integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (exec_pop ()) integer_inc integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub)) boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup boolean_invert_second_then_and exec_shove () boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Errors: [0 0 1 1 0 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 94
Size: 117
Percent parens: 0.197
--- Population Statistics ---
Average total errors in population: 7.44
Median total errors in population: 7
Error averages by case: (0.917 0.681 0.998 0.323 0.92 0.682 0.681 0.642 0.916 0.68)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 89.092
Average program size in population (points): 115.036
Average percent parens in population: 0.230
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.0125
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 25
Genome diversity (% unique genomes):	 0.822
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.815
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.093
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 2062297
--- Timings ---
Current time: 1559582769886 milliseconds
Total Time:           9.8 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.5 seconds, 46.0%
Fitness Testing:      3.1 seconds, 31.7%
Report:               2.1 seconds, 21.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 544
Test mean error for best: 0.54400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Lexicase best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup integer_flush boolean_and in2 exec_eq) exec_pop (exec_when (integer_yankdup) exec_rot (tag_integer_693 integer_shove integer_dup_times integer_empty integer_sub in1 integer_empty integer_yankdup) (integer_fromboolean integer_yank) (integer_add) exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_mod integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4 integer_mult) integer_lte integer_max exec_s (exec_do*range (integer_gt) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_stackdepth boolean_yankdup) (boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth exec_do*while () exec_when (integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (exec_pop ()) integer_inc integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub)) boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup boolean_invert_second_then_and exec_shove () boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Lexicase best errors: [1 0 0 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 117
Percent parens: 0.197
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Zero cases best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup integer_flush boolean_and in2 exec_eq) exec_pop (exec_when (integer_yankdup) exec_rot (tag_integer_693 integer_shove integer_dup_times integer_empty integer_sub in1 integer_empty integer_yankdup) (integer_fromboolean integer_yank) (integer_add) exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_mod integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4 integer_mult) integer_lte integer_max exec_s (exec_do*range (integer_gt) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_stackdepth boolean_yankdup) (boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth exec_do*while () exec_when (integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (exec_pop ()) integer_inc integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub)) boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup boolean_invert_second_then_and exec_shove () boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Zero cases best errors: [1 0 0 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 117
Percent parens: 0.197
--- Lexicase Population Statistics ---
Count of elite individuals by case: (37 765 294 309 471 197 208 496 317 36)
Population mean number of elite cases: 3.13
Count of perfect (error zero) individuals by case: (37 765 294 309 471 197 208 496 317 36)
Population mean number of perfect (error zero) cases: 3.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup integer_flush boolean_and in2 exec_eq) exec_pop (exec_when (integer_yankdup) exec_rot (tag_integer_693 integer_shove integer_dup_times integer_empty integer_sub in1 integer_empty integer_yankdup) (integer_fromboolean integer_yank) (integer_add) exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_mod integer_dup_items exec_yank) exec_yank) boolean_xor boolean_yank boolean_empty in4 integer_mult) integer_lte integer_max exec_s (exec_do*range (integer_gt) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_stackdepth boolean_yankdup) (boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth exec_do*while () exec_when (integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (exec_pop ()) integer_inc integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub) boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup boolean_invert_second_then_and exec_shove () boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Errors: [1 0 0 0 0 1 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 95
Size: 118
Percent parens: 0.195
--- Population Statistics ---
Average total errors in population: 6.87
Median total errors in population: 7
Error averages by case: (0.963 0.235 0.706 0.691 0.529 0.803 0.792 0.504 0.683 0.964)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 92.978
Average program size in population (points): 117.946
Average percent parens in population: 0.212
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.8365
Median age in population: 4.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 93
Genome diversity (% unique genomes):	 0.831
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 93
Syntactic diversity (% unique Push programs):	 0.83
Total error diversity:				 0.007
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.134
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2841873
--- Timings ---
Current time: 1559582773168 milliseconds
Total Time:          13.1 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.4 seconds, 48.8%
Fitness Testing:      3.8 seconds, 28.7%
Report:               2.8 seconds, 21.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 544
Test mean error for best: 0.54400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_exec} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Lexicase best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup integer_flush boolean_and in2 exec_eq) exec_pop (exec_when (integer_yankdup) exec_rot (tag_integer_693 integer_shove integer_dup_times integer_empty integer_sub in1 integer_empty integer_yankdup) (integer_fromboolean integer_yank) (integer_add) exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_mod integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4 integer_mult) integer_lte integer_max exec_s (exec_do*range (integer_gt) exec_y_when_autoconstructing (integer_pop) integer_stackdepth) (exec_stackdepth boolean_yankdup) (boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth exec_do*while () exec_when (integer_dup exec_yankdup print_exec (boolean_eq)) exec_y_when_autoconstructing (exec_pop ()) integer_inc integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub)) boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup boolean_invert_second_then_and exec_shove () boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Lexicase best errors: [0 0 0 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 117
Percent parens: 0.197
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_exec} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Zero cases best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup integer_flush boolean_and in2 exec_eq) exec_pop (exec_when (integer_yankdup) exec_rot (tag_integer_693 integer_shove integer_dup_times integer_empty integer_sub in1 integer_empty integer_yankdup) (integer_fromboolean integer_yank) (integer_add) exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_mod integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4 integer_mult) integer_lte integer_max exec_s (exec_do*range (integer_gt) exec_y_when_autoconstructing (integer_pop) integer_stackdepth) (exec_stackdepth boolean_yankdup) (boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth exec_do*while () exec_when (integer_dup exec_yankdup print_exec (boolean_eq)) exec_y_when_autoconstructing (exec_pop ()) integer_inc integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub)) boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup boolean_invert_second_then_and exec_shove () boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Zero cases best errors: [0 0 0 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 117
Percent parens: 0.197
--- Lexicase Population Statistics ---
Count of elite individuals by case: (433 568 570 566 53 524 727 578 144 356)
Population mean number of elite cases: 4.52
Count of perfect (error zero) individuals by case: (433 568 570 566 53 524 727 578 144 356)
Population mean number of perfect (error zero) cases: 4.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup exec_eq) exec_pop (exec_when (integer_yankdup) exec_rot (tag_integer_693 integer_shove integer_dup_times integer_empty integer_sub in1 integer_empty integer_yankdup) (integer_fromboolean integer_yank) (integer_add) exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_mod integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4 integer_mult) integer_lte integer_max exec_s (exec_do*range (integer_gt) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_stackdepth boolean_yankdup) (boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth exec_do*while () exec_when (integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (exec_pop ()) integer_inc integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub)) boolean_dup_items boolean_eq boolean_and integer_shove in3 integer_inc integer_yank integer_inc exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup boolean_invert_second_then_and exec_shove () boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Errors: [0 0 0 0 1 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 104
Size: 128
Percent parens: 0.188
--- Population Statistics ---
Average total errors in population: 5.481
Median total errors in population: 4
Error averages by case: (0.567 0.432 0.43 0.434 0.947 0.476 0.273 0.422 0.856 0.644)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 92.796
Average program size in population (points): 115.597
Average percent parens in population: 0.197
Minimum age in population: 4.0
Maximum age in population: 7.875
Average age in population: 6.368625
Median age in population: 6.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 47
Genome diversity (% unique genomes):	 0.884
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.882
Total error diversity:				 0.009
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.123
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3715574
--- Timings ---
Current time: 1559582776460 milliseconds
Total Time:          16.4 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.2 seconds, 50.2%
Fitness Testing:      4.5 seconds, 27.2%
Report:               3.6 seconds, 21.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 544
Test mean error for best: 0.54400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Lexicase best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup integer_flush boolean_and in2 exec_eq) exec_pop (exec_when (integer_yankdup) exec_rot (tag_integer_693 integer_shove integer_dup_times integer_empty integer_sub) (in1 integer_empty integer_yankdup) (integer_fromboolean integer_yank) integer_add) exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_mod integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4 integer_mult) integer_lte integer_max exec_s (exec_do*range (integer_gt) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_stackdepth boolean_yankdup) (exec_eq boolean_invert_second_then_and boolean_stackdepth exec_do*while () exec_when (integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (exec_pop () integer_inc integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub)) boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup boolean_invert_second_then_and exec_shove () boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Lexicase best errors: [1 1 1 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 117
Percent parens: 0.197
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Zero cases best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup integer_flush boolean_and in2 exec_eq) exec_pop (exec_when (integer_yankdup) exec_rot (tag_integer_693 integer_shove integer_dup_times integer_empty integer_sub) (in1 integer_empty integer_yankdup) (integer_fromboolean integer_yank) integer_add) exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_mod integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4 integer_mult) integer_lte integer_max exec_s (exec_do*range (integer_gt) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_stackdepth boolean_yankdup) (exec_eq boolean_invert_second_then_and boolean_stackdepth exec_do*while () exec_when (integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (exec_pop () integer_inc integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub)) boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup boolean_invert_second_then_and exec_shove () boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Zero cases best errors: [1 1 1 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 117
Percent parens: 0.197
--- Lexicase Population Statistics ---
Count of elite individuals by case: (150 81 3 539 639 539 639 778 75 484)
Population mean number of elite cases: 3.93
Count of perfect (error zero) individuals by case: (150 81 3 539 639 539 639 778 75 484)
Population mean number of perfect (error zero) cases: 3.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Best program: (exec_dup (boolean_yankdup boolean_dup exec_s_when_autoconstructing (exec_y_when_autoconstructing (exec_pop (exec_if (integer_shove integer_dup_times exec_noop exec_do*times (boolean_empty exec_do*range (in4 integer_flush boolean_stackdepth integer_gt) integer_flush integer_dup_times boolean_dup_times) integer_empty integer_fromboolean print_boolean in1) (boolean_shove integer_mult boolean_rot boolean_empty) integer_stackdepth boolean_invert_second_then_and boolean_shove exec_s_when_autoconstructing () (exec_flush boolean_invert_first_then_and integer_stackdepth) (integer_gt exec_flush) integer_max boolean_dup print_boolean) integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4 integer_mult) (integer_lte integer_max exec_s (exec_do*range (integer_gt) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_stackdepth boolean_yankdup) (boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth exec_do*while () exec_when (integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (exec_pop ()) integer_inc integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub) () boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) boolean_invert_second_then_and exec_shove () boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Errors: [1 1 1 0 0 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 100
Size: 127
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 6.073
Median total errors in population: 5
Error averages by case: (0.85 0.919 0.997 0.461 0.361 0.461 0.361 0.222 0.925 0.516)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 93.271
Average program size in population (points): 116.486
Average percent parens in population: 0.199
Minimum age in population: 5.75
Maximum age in population: 9.5
Average age in population: 7.7619375
Median age in population: 7.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 22
Genome diversity (% unique genomes):	 0.91
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.907
Total error diversity:				 0.007
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.123
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 4735328
--- Timings ---
Current time: 1559582780179 milliseconds
Total Time:          19.7 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.0 seconds, 50.8%
Fitness Testing:      5.3 seconds, 26.7%
Report:               4.3 seconds, 21.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 544
Test mean error for best: 0.54400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Lexicase best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup integer_flush boolean_and in2 exec_eq) exec_pop (exec_when (integer_yankdup) exec_rot (tag_integer_693 integer_shove integer_dup_times integer_empty integer_sub in1 integer_empty integer_yankdup) (integer_fromboolean integer_yank) (integer_add) boolean_flush boolean_dup_times print_exec (exec_dup (integer_max -17 integer_mod integer_dup_items exec_yank) boolean_xor boolean_yank exec_dup_times (in4 integer_mult) integer_lte integer_max exec_s (exec_do*range (integer_gt) exec_y_when_autoconstructing (boolean_and) integer_inc) (exec_stackdepth boolean_yankdup) (boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth exec_do*while () exec_when (integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (exec_pop ()) integer_inc integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub)) boolean_dup_items boolean_eq boolean_and integer_rot in3 -58 integer_gt boolean_dup boolean_invert_second_then_and exec_shove () boolean_dup integer_pop boolean_empty exec_do*while (tag_boolean_742 exec_dup_items boolean_empty in1) in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Lexicase best errors: [1 0 1 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 118
Percent parens: 0.203
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Zero cases best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup integer_flush boolean_and in2 exec_eq) exec_pop (exec_when (integer_yankdup) exec_rot (tag_integer_693 integer_shove integer_dup_times integer_empty integer_sub in1 integer_empty integer_yankdup) (integer_fromboolean integer_yank) (integer_add) boolean_flush boolean_dup_times print_exec (exec_dup (integer_max -17 integer_mod integer_dup_items exec_yank) boolean_xor boolean_yank exec_dup_times (in4 integer_mult) integer_lte integer_max exec_s (exec_do*range (integer_gt) exec_y_when_autoconstructing (boolean_and) integer_inc) (exec_stackdepth boolean_yankdup) (boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth exec_do*while () exec_when (integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (exec_pop ()) integer_inc integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub)) boolean_dup_items boolean_eq boolean_and integer_rot in3 -58 integer_gt boolean_dup boolean_invert_second_then_and exec_shove () boolean_dup integer_pop boolean_empty exec_do*while (tag_boolean_742 exec_dup_items boolean_empty in1) in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Zero cases best errors: [1 0 1 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 118
Percent parens: 0.203
--- Lexicase Population Statistics ---
Count of elite individuals by case: (46 496 46 443 121 496 494 496 34 730)
Population mean number of elite cases: 3.40
Count of perfect (error zero) individuals by case: (46 496 46 443 121 496 494 496 34 730)
Population mean number of perfect (error zero) cases: 3.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction 70} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Best program: (boolean_frominteger integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup integer_flush boolean_and in2 exec_eq) exec_pop (exec_when (integer_yankdup) exec_rot (tag_integer_693 integer_shove integer_dup_times integer_empty integer_sub in1 integer_empty integer_yankdup) (integer_fromboolean integer_yank) (integer_add) exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 70 integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4 integer_dup) integer_lte integer_max exec_s (exec_do*range (integer_gt) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_stackdepth boolean_yankdup) (boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth exec_do*while () exec_when (integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (exec_yank)) integer_inc integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub) boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup boolean_invert_second_then_and exec_shove () boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Errors: [1 0 1 0 1 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 94
Size: 116
Percent parens: 0.190
--- Population Statistics ---
Average total errors in population: 6.598
Median total errors in population: 6
Error averages by case: (0.954 0.504 0.954 0.557 0.879 0.504 0.506 0.504 0.966 0.27)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 91.802
Average program size in population (points): 114.438
Average percent parens in population: 0.197
Minimum age in population: 6.75
Maximum age in population: 10.9375
Average age in population: 9.33225
Median age in population: 9.4375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 17
Genome diversity (% unique genomes):	 0.916
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.912
Total error diversity:				 0.007
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.094
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 5587295
--- Timings ---
Current time: 1559582783420 milliseconds
Total Time:          23.3 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.9 seconds, 50.8%
Fitness Testing:      5.9 seconds, 25.4%
Report:               5.4 seconds, 23.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -13                
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: 74                 
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: 28                 
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: 27                 
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: 35                 
Correct output: -54                 | Program output: 59                 
Correct output: -95                 | Program output: 56                 
Correct output: -97                 | Program output: 35                 
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: 95                 
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: 83                 
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: 60                 
Correct output: -34                 | Program output: 79                 
Correct output: -17                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_while} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Lexicase best program: (exec_eq integer_dup_items integer_yankdup exec_eq exec_do*times (exec_yank integer_yankdup) exec_rot (tag_integer_693 boolean_xor integer_dup_times integer_empty integer_sub integer_inc exec_dup_times (boolean_or) in2 exec_rot (exec_noop integer_yankdup) (integer_fromboolean integer_yank) (integer_add) exec_while (boolean_dup_times print_exec (exec_dup (exec_while () exec_flush exec_dup_items integer_mult) integer_gt exec_flush) integer_max boolean_dup exec_noop) exec_noop exec_do*while (boolean_yank integer_dup_times exec_do*range (integer_gt) exec_y_when_autoconstructing (integer_empty) integer_stackdepth) exec_stackdepth boolean_yankdup) (boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth exec_do*while () exec_when (integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) boolean_invert_second_then_and exec_shove () boolean_dup integer_pop integer_stackdepth) (integer_dup tag_boolean_742 exec_dup_items integer_fromboolean in1) boolean_eq boolean_yank in1 in3 boolean_yank boolean_rot print_integer boolean_yankdup boolean_dup)
Lexicase best errors: [1 0 0 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 105
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_while} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Zero cases best program: (exec_eq integer_dup_items integer_yankdup exec_eq exec_do*times (exec_yank integer_yankdup) exec_rot (tag_integer_693 boolean_xor integer_dup_times integer_empty integer_sub integer_inc exec_dup_times (boolean_or) in2 exec_rot (exec_noop integer_yankdup) (integer_fromboolean integer_yank) (integer_add) exec_while (boolean_dup_times print_exec (exec_dup (exec_while () exec_flush exec_dup_items integer_mult) integer_gt exec_flush) integer_max boolean_dup exec_noop) exec_noop exec_do*while (boolean_yank integer_dup_times exec_do*range (integer_gt) exec_y_when_autoconstructing (integer_empty) integer_stackdepth) exec_stackdepth boolean_yankdup) (boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth exec_do*while () exec_when (integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) boolean_invert_second_then_and exec_shove () boolean_dup integer_pop integer_stackdepth) (integer_dup tag_boolean_742 exec_dup_items integer_fromboolean in1) boolean_eq boolean_yank in1 in3 boolean_yank boolean_rot print_integer boolean_yankdup boolean_dup)
Zero cases best errors: [1 0 0 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 105
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (92 447 18 446 21 191 93 191 446 444)
Population mean number of elite cases: 2.39
Count of perfect (error zero) individuals by case: (92 447 18 446 21 191 93 191 446 444)
Population mean number of perfect (error zero) cases: 2.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Best program: (exec_eq integer_dup_items exec_dup_times (exec_empty integer_yankdup integer_flush boolean_and in2 exec_eq) exec_do*times (in2 exec_eq) exec_pop (exec_when (integer_yankdup) exec_rot (tag_integer_693 integer_shove integer_dup_times integer_empty integer_sub in1 integer_empty integer_yankdup) (integer_fromboolean integer_yank) (integer_add) exec_while (boolean_dup_times print_exec (exec_dup (exec_yank) boolean_xor integer_mod integer_dup_items exec_yank) boolean_xor boolean_yank) boolean_empty in4) integer_mult integer_lte integer_max exec_s (exec_do*range (integer_gt) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_stackdepth boolean_yankdup) (boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth boolean_invert_second_then_and boolean_stackdepth exec_do*while () exec_when (integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) integer_mod exec_shove () boolean_dup integer_pop integer_stackdepth) integer_dup tag_boolean_742 exec_dup_items integer_fromboolean in1 boolean_eq boolean_yank in1 in3 boolean_yank boolean_rot print_integer boolean_yankdup boolean_dup)
Errors: [1 0 0 0 1 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 90
Size: 111
Percent parens: 0.189
--- Population Statistics ---
Average total errors in population: 7.611
Median total errors in population: 8
Error averages by case: (0.908 0.553 0.982 0.554 0.979 0.809 0.907 0.809 0.554 0.556)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 92.318
Average program size in population (points): 115.035
Average percent parens in population: 0.197
Minimum age in population: 7.75
Maximum age in population: 12.71875
Average age in population: 10.72778125
Median age in population: 10.78125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 34
Genome diversity (% unique genomes):	 0.905
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.903
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 6520412
--- Timings ---
Current time: 1559582786793 milliseconds
Total Time:          26.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.8 seconds, 51.5%
Fitness Testing:      6.7 seconds, 24.9%
Report:               6.2 seconds, 23.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 544
Test mean error for best: 0.54400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -16} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Lexicase best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup integer_flush boolean_and in2 exec_eq exec_pop (exec_when (boolean_and in2 exec_eq) exec_pop (exec_when (integer_yankdup) exec_rot (tag_integer_693 integer_shove integer_dup_times integer_empty integer_sub in1 integer_empty integer_yankdup) (integer_fromboolean integer_yank) (integer_add) exec_while (boolean_dup_times print_exec (exec_dup (integer_max -16 integer_mod integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4 integer_mult) integer_lte integer_max exec_s (integer_dec integer_gt) (exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_stackdepth boolean_yankdup) boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth exec_do*while (integer_gte integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (exec_pop ()) exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub)) boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) boolean_invert_second_then_and exec_shove () boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in1) in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Lexicase best errors: [0 0 0 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 123
Percent parens: 0.195
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -16} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Zero cases best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup integer_flush boolean_and in2 exec_eq exec_pop (exec_when (boolean_and in2 exec_eq) exec_pop (exec_when (integer_yankdup) exec_rot (tag_integer_693 integer_shove integer_dup_times integer_empty integer_sub in1 integer_empty integer_yankdup) (integer_fromboolean integer_yank) (integer_add) exec_while (boolean_dup_times print_exec (exec_dup (integer_max -16 integer_mod integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4 integer_mult) integer_lte integer_max exec_s (integer_dec integer_gt) (exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_stackdepth boolean_yankdup) boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth exec_do*while (integer_gte integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (exec_pop ()) exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub)) boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) boolean_invert_second_then_and exec_shove () boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in1) in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Zero cases best errors: [0 0 0 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 123
Percent parens: 0.195
--- Lexicase Population Statistics ---
Count of elite individuals by case: (217 299 173 208 136 142 417 116 299 611)
Population mean number of elite cases: 2.62
Count of perfect (error zero) individuals by case: (217 299 173 208 136 142 417 116 299 611)
Population mean number of perfect (error zero) cases: 2.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup integer_flush boolean_and in2 exec_eq) exec_pop (exec_when (integer_yankdup) exec_rot (tag_integer_693 integer_shove integer_dup_times integer_empty integer_sub in1 integer_empty integer_yankdup integer_fromboolean integer_yank) (integer_add) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_mod integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4 exec_do*while (boolean_yank integer_dup_times exec_do*range (integer_gt) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) exec_stackdepth boolean_yankdup) boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth exec_do*while () exec_when (integer_dup exec_yankdup exec_when (boolean_eq)) integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (exec_pop ()) integer_inc integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub) boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup boolean_invert_second_then_and exec_shove () boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer) boolean_yankdup boolean_dup)
Errors: [0 0 0 0 1 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 97
Size: 119
Percent parens: 0.185
--- Population Statistics ---
Average total errors in population: 7.382
Median total errors in population: 7
Error averages by case: (0.783 0.701 0.827 0.792 0.864 0.858 0.583 0.884 0.701 0.389)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 89.948
Average program size in population (points): 111.839
Average percent parens in population: 0.195
Minimum age in population: 9.625
Maximum age in population: 13.9296875
Average age in population: 12.494203125
Median age in population: 12.578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 13
Genome diversity (% unique genomes):	 0.842
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.84
Total error diversity:				 0.008
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.08
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 6951563
--- Timings ---
Current time: 1559582789864 milliseconds
Total Time:          29.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.8 seconds, 52.8%
Fitness Testing:      7.0 seconds, 23.6%
Report:               6.9 seconds, 23.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 544
Test mean error for best: 0.54400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_add} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Lexicase best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty) integer_yankdup integer_flush boolean_and in2 exec_eq exec_pop (exec_when (integer_yankdup) exec_rot (tag_integer_693 integer_shove integer_dup_times integer_empty integer_sub in1 integer_empty integer_yankdup exec_shove (integer_yank) integer_add) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max integer_add) -17 integer_mod integer_dup_items exec_yank) integer_yankdup boolean_yank boolean_empty in4 integer_flush) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_stackdepth boolean_yankdup) integer_stackdepth boolean_invert_second_then_and boolean_stackdepth exec_do*while () exec_when (print_exec (boolean_stackdepth exec_do*while ()) exec_when (integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (exec_pop ()) integer_inc integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub) boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup boolean_invert_second_then_and exec_shove () boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_noop boolean_empty in1 in3 exec_do*times (boolean_rot print_integer) boolean_yankdup boolean_dup)
Lexicase best errors: [0 0 0 0 0 1 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 117
Percent parens: 0.197
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_add} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Zero cases best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty) integer_yankdup integer_flush boolean_and in2 exec_eq exec_pop (exec_when (integer_yankdup) exec_rot (tag_integer_693 integer_shove integer_dup_times integer_empty integer_sub in1 integer_empty integer_yankdup exec_shove (integer_yank) integer_add) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max integer_add) -17 integer_mod integer_dup_items exec_yank) integer_yankdup boolean_yank boolean_empty in4 integer_flush) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_stackdepth boolean_yankdup) integer_stackdepth boolean_invert_second_then_and boolean_stackdepth exec_do*while () exec_when (print_exec (boolean_stackdepth exec_do*while ()) exec_when (integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (exec_pop ()) integer_inc integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub) boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup boolean_invert_second_then_and exec_shove () boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_noop boolean_empty in1 in3 exec_do*times (boolean_rot print_integer) boolean_yankdup boolean_dup)
Zero cases best errors: [0 0 0 0 0 1 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 117
Percent parens: 0.197
--- Lexicase Population Statistics ---
Count of elite individuals by case: (785 357 355 354 719 85 118 558 120 365)
Population mean number of elite cases: 3.82
Count of perfect (error zero) individuals by case: (785 357 355 354 719 85 118 558 120 365)
Population mean number of perfect (error zero) cases: 3.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup integer_flush boolean_and in2 exec_eq) exec_pop (exec_when (integer_yankdup) exec_rot (tag_integer_693 integer_shove integer_dup_times integer_empty integer_sub in1 integer_empty integer_yankdup integer_fromboolean integer_yank) (integer_add) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_mod integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4 exec_do*while (boolean_yank integer_dup_times exec_do*range (integer_gt) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) exec_stackdepth boolean_yankdup) boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth exec_do*while () exec_when (integer_dup exec_yankdup exec_when (boolean_eq)) integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (exec_pop ()) integer_inc integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub) boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup boolean_invert_second_then_and exec_shove () boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer) boolean_yankdup boolean_dup)
Errors: [0 0 0 0 0 1 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 97
Size: 119
Percent parens: 0.185
--- Population Statistics ---
Average total errors in population: 6.184
Median total errors in population: 7
Error averages by case: (0.215 0.643 0.645 0.646 0.281 0.915 0.882 0.442 0.88 0.635)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 93.201
Average program size in population (points): 116.427
Average percent parens in population: 0.199
Minimum age in population: 10.625
Maximum age in population: 15.390625
Average age in population: 13.68512890625
Median age in population: 13.8125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 32
Genome diversity (% unique genomes):	 0.851
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.851
Total error diversity:				 0.008
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.111
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 7858369
--- Timings ---
Current time: 1559582793124 milliseconds
Total Time:          33.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.6 seconds, 53.2%
Fitness Testing:      7.7 seconds, 23.4%
Report:               7.6 seconds, 23.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 546
Test mean error for best: 0.54600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 44                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 64                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 73                 
Correct output: 23                  | Program output: 88                 
Correct output: 31                  | Program output: 87                 
Correct output: 20                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 59                 
Correct output: 15                  | Program output: 57                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 29                 
Correct output: 10                  | Program output: 16                 
Correct output: 1                   | Program output: 30                 
Correct output: 34                  | Program output: 78                 
Correct output: 20                  | Program output: 41                 
Correct output: 9                   | Program output: 15                 
Correct output: 3                   | Program output: 72                 
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 18                 
Correct output: 46                  | Program output: 51                 
Correct output: -96                 | Program output: 82                 
Correct output: -61                 | Program output: -53                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: 98                 
Correct output: -60                 | Program output: 10                 
Correct output: -55                 | Program output: -12                
Correct output: -42                 | Program output: 97                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 0                  
Correct output: -43                 | Program output: 22                 
Correct output: -45                 | Program output: 97                 
Correct output: -56                 | Program output: 10                 
Correct output: -75                 | Program output: -1                 
Correct output: -87                 | Program output: -55                
Correct output: -81                 | Program output: 44                 
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: -19                
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: 61                 
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: 59                 
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: 87                 
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: 88                 
Correct output: -65                 | Program output: 4                  
Correct output: -36                 | Program output: 10                 
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -70                
Correct output: -49                 | Program output: -16                
Correct output: -54                 | Program output: -36                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: 55                 
Correct output: -83                 | Program output: 38                 
Correct output: -63                 | Program output: 80                 
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -16} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Lexicase best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty) integer_yankdup integer_flush boolean_and in2 exec_eq exec_pop (exec_when (integer_yankdup) boolean_empty exec_do*range (in4 integer_flush boolean_stackdepth integer_gt) integer_yankdup) exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean integer_yank) (integer_add) exec_while (boolean_dup_times print_exec (exec_dup (integer_max -16 integer_mod integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4 integer_mult) integer_lte integer_max exec_s (exec_do*range (integer_gt) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_stackdepth boolean_yankdup) (boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth exec_do*while (integer_gte boolean_invert_second_then_and exec_yankdup exec_when (boolean_eq)) integer_rot exec_pop ()) exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub) boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup boolean_invert_second_then_and integer_min boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Lexicase best errors: [0 0 1 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 119
Percent parens: 0.185
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -16} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Zero cases best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty) integer_yankdup integer_flush boolean_and in2 exec_eq exec_pop (exec_when (integer_yankdup) boolean_empty exec_do*range (in4 integer_flush boolean_stackdepth integer_gt) integer_yankdup) exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean integer_yank) (integer_add) exec_while (boolean_dup_times print_exec (exec_dup (integer_max -16 integer_mod integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4 integer_mult) integer_lte integer_max exec_s (exec_do*range (integer_gt) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_stackdepth boolean_yankdup) (boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth exec_do*while (integer_gte boolean_invert_second_then_and exec_yankdup exec_when (boolean_eq)) integer_rot exec_pop ()) exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub) boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup boolean_invert_second_then_and integer_min boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Zero cases best errors: [0 0 1 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 119
Percent parens: 0.185
--- Lexicase Population Statistics ---
Count of elite individuals by case: (764 489 2 2 782 159 765 782 820 819)
Population mean number of elite cases: 5.38
Count of perfect (error zero) individuals by case: (764 489 2 2 782 159 765 782 820 819)
Population mean number of perfect (error zero) cases: 5.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_while} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup integer_flush boolean_and in2 exec_eq) exec_do*times (exec_when (integer_yankdup) exec_rot (tag_integer_693 integer_shove integer_dup_times integer_empty integer_sub in1 exec_dup_times (boolean_or) in2 exec_rot (exec_noop integer_yankdup) (integer_fromboolean integer_yank) (integer_add) exec_while (boolean_dup_times print_exec (exec_dup (exec_while () exec_flush exec_flush boolean_invert_first_then_and integer_mult) integer_gt exec_flush) integer_max boolean_dup exec_noop) exec_noop exec_do*while (exec_do*range (integer_gt exec_y_when_autoconstructing (boolean_and) integer_stackdepth exec_stackdepth boolean_yankdup boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth exec_do*while ()) exec_when (integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (exec_pop ()) integer_inc integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub) () (boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) boolean_invert_second_then_and exec_shove () boolean_dup exec_do*range (boolean_empty) integer_dup tag_boolean_742 exec_dup_items boolean_empty in1) in3 exec_do*times (boolean_rot print_integer) boolean_yankdup boolean_dup)
Errors: [0 1 1 1 0 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 102
Size: 129
Percent parens: 0.209
--- Population Statistics ---
Average total errors in population: 4.616
Median total errors in population: 3
Error averages by case: (0.236 0.511 0.998 0.998 0.218 0.841 0.235 0.218 0.18 0.181)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 95.828
Average program size in population (points): 119.296
Average percent parens in population: 0.197
Minimum age in population: 11.828125
Maximum age in population: 16.927734375
Average age in population: 15.138966796875
Median age in population: 15.3427734375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 27
Genome diversity (% unique genomes):	 0.906
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.904
Total error diversity:				 0.008
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 8643553
--- Timings ---
Current time: 1559582796203 milliseconds
Total Time:          36.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.4 seconds, 53.6%
Fitness Testing:      8.3 seconds, 23.0%
Report:               8.3 seconds, 23.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: 34                 
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 83                 
Correct output: 0                   | Program output: 83                 
Correct output: 42                  | Program output: 78                 
Correct output: 23                  | Program output: 60                 
Correct output: 31                  | Program output: 97                 
Correct output: 20                  | Program output: 47                 
Correct output: 9                   | Program output: 26                 
Correct output: 16                  | Program output: 78                 
Correct output: 15                  | Program output: 22                 
Correct output: 2                   | Program output: 73                 
Correct output: 23                  | Program output: 95                 
Correct output: 10                  | Program output: 16                 
Correct output: 1                   | Program output: 91                 
Correct output: 34                  | Program output: 97                 
Correct output: 20                  | Program output: 82                 
Correct output: 9                   | Program output: 100                
Correct output: 3                   | Program output: 78                 
Correct output: 28                  | Program output: 81                 
Correct output: 14                  | Program output: 62                 
Correct output: 46                  | Program output: 47                 
Correct output: -96                 | Program output: 36                 
Correct output: -61                 | Program output: -25                
Correct output: -78                 | Program output: -71                
Correct output: -91                 | Program output: -91                
Correct output: -95                 | Program output: 34                 
Correct output: -84                 | Program output: -65                
Correct output: -71                 | Program output: -50                
Correct output: -74                 | Program output: 12                 
Correct output: -60                 | Program output: 42                 
Correct output: -55                 | Program output: -55                
Correct output: -42                 | Program output: -41                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: -93                
Correct output: -96                 | Program output: -96                
Correct output: -43                 | Program output: -38                
Correct output: -45                 | Program output: 98                 
Correct output: -56                 | Program output: 81                 
Correct output: -75                 | Program output: -46                
Correct output: -87                 | Program output: -23                
Correct output: -81                 | Program output: 41                 
Correct output: -90                 | Program output: 79                 
Correct output: -64                 | Program output: -33                
Correct output: -75                 | Program output: -62                
Correct output: -97                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: -95                 | Program output: -10                
Correct output: -97                 | Program output: 52                 
Correct output: -85                 | Program output: -40                
Correct output: -81                 | Program output: 77                 
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: 82                 
Correct output: -46                 | Program output: -42                
Correct output: -78                 | Program output: -42                
Correct output: -93                 | Program output: 25                 
Correct output: -62                 | Program output: -62                
Correct output: -90                 | Program output: -82                
Correct output: -70                 | Program output: 100                
Correct output: -28                 | Program output: 32                 
Correct output: -82                 | Program output: -25                
Correct output: -5                  | Program output: 19                 
Correct output: -45                 | Program output: 68                 
Correct output: -23                 | Program output: -20                
Correct output: -61                 | Program output: -30                
Correct output: -55                 | Program output: 79                 
Correct output: -95                 | Program output: 63                 
Correct output: -82                 | Program output: -6                 
Correct output: -65                 | Program output: 7                  
Correct output: -36                 | Program output: 29                 
Correct output: -53                 | Program output: 41                 
Correct output: -34                 | Program output: 72                 
Correct output: -17                 | Program output: 86                 
Correct output: -82                 | Program output: 75                 
Correct output: -49                 | Program output: -12                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -54                
Correct output: -15                 | Program output: 36                 
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -63                 | Program output: -63                
Correct output: -87                 | Program output: -33                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times})
Lexicase best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup integer_flush boolean_and in2 exec_eq) exec_pop (exec_when (integer_yankdup) exec_rot (tag_integer_693 boolean_or integer_dup_times integer_empty integer_sub in1 integer_empty integer_yankdup) (integer_fromboolean integer_yank) (integer_add) exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_mod integer_dup_items exec_yank) boolean_xor boolean_yank boolean_invert_second_then_and in4 integer_mult) integer_lte integer_max exec_s (exec_do*range (integer_gt) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_stackdepth boolean_yankdup) (exec_when (boolean_invert_second_then_and boolean_dup_times boolean_stackdepth exec_do*while (integer_gte boolean_invert_second_then_and boolean_eq)) integer_rot exec_pop ()) exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub)) boolean_dup_items boolean_eq boolean_and boolean_eq integer_sub boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup boolean_invert_second_then_and integer_min boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4 in3 exec_do*times (integer_swap print_integer boolean_yankdup integer_dup_times))
Lexicase best errors: [1 1 0 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 119
Percent parens: 0.176
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times})
Zero cases best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup integer_flush boolean_and in2 exec_eq) exec_pop (exec_when (integer_yankdup) exec_rot (tag_integer_693 boolean_or integer_dup_times integer_empty integer_sub in1 integer_empty integer_yankdup) (integer_fromboolean integer_yank) (integer_add) exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_mod integer_dup_items exec_yank) boolean_xor boolean_yank boolean_invert_second_then_and in4 integer_mult) integer_lte integer_max exec_s (exec_do*range (integer_gt) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_stackdepth boolean_yankdup) (exec_when (boolean_invert_second_then_and boolean_dup_times boolean_stackdepth exec_do*while (integer_gte boolean_invert_second_then_and boolean_eq)) integer_rot exec_pop ()) exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub)) boolean_dup_items boolean_eq boolean_and boolean_eq integer_sub boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup boolean_invert_second_then_and integer_min boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4 in3 exec_do*times (integer_swap print_integer boolean_yankdup integer_dup_times))
Zero cases best errors: [1 1 0 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 119
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (154 309 107 671 299 107 171 107 102 792)
Population mean number of elite cases: 2.82
Count of perfect (error zero) individuals by case: (154 309 107 671 299 107 171 107 102 792)
Population mean number of perfect (error zero) cases: 2.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times})
Best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_yankdup exec_empty integer_yankdup integer_flush boolean_and in2 exec_eq exec_pop (exec_when (integer_yankdup) exec_rot (tag_integer_693 integer_shove integer_dup_times integer_empty integer_sub in1 integer_empty integer_yankdup integer_fromboolean integer_yank integer_add) (exec_while (boolean_dup_times) print_exec (exec_dup (integer_max -17 integer_mod integer_dup_items exec_yank) boolean_empty in4 integer_mult) integer_lte integer_max exec_s (exec_do*range (integer_gt) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_stackdepth boolean_yankdup) (boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth boolean_stackdepth exec_do*while (integer_gte boolean_invert_second_then_and integer_inc exec_when (boolean_eq)) integer_rot exec_pop ()) exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub) () boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) boolean_invert_second_then_and integer_min boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4 in3 exec_do*times (integer_swap print_integer boolean_yankdup integer_dup_times))
Errors: [1 1 0 1 1 0 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 92
Size: 112
Percent parens: 0.179
--- Population Statistics ---
Average total errors in population: 7.181
Median total errors in population: 7
Error averages by case: (0.846 0.691 0.893 0.329 0.701 0.893 0.829 0.893 0.898 0.208)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 94.639
Average program size in population (points): 118.355
Average percent parens in population: 0.200
Minimum age in population: 12.828125
Maximum age in population: 18.6689453125
Average age in population: 16.8319697265625
Median age in population: 16.8828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 41
Genome diversity (% unique genomes):	 0.877
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.875
Total error diversity:				 0.006
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.076
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 9664803
--- Timings ---
Current time: 1559582799507 milliseconds
Total Time:          39.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.3 seconds, 53.8%
Fitness Testing:      9.1 seconds, 23.1%
Report:               9.0 seconds, 22.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 544
Test mean error for best: 0.54400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 3, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 3, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Lexicase best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup integer_flush boolean_and in2 exec_eq) exec_pop (exec_when (integer_yankdup) exec_rot (tag_integer_693 integer_shove integer_dup_times) (integer_empty integer_sub in1 integer_empty integer_yankdup integer_fromboolean integer_yank) (integer_add) exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_mod integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4 exec_do*while (boolean_yank integer_dup_times exec_do*range (integer_gt) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) exec_stackdepth boolean_yankdup) boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth exec_do*while () exec_when (integer_dup exec_yankdup exec_when (boolean_eq))) integer_dup exec_yankdup exec_when (integer_lt)) exec_y_when_autoconstructing (exec_pop ()) integer_inc integer_yank exec_dup () exec_pop (boolean_invert_second_then_and exec_pop (boolean_eq) integer_sub) boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup boolean_invert_second_then_and exec_shove () boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer) boolean_yankdup boolean_dup)
Lexicase best errors: [0 1 1 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 121
Percent parens: 0.198
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 3, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 3, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Zero cases best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup integer_flush boolean_and in2 exec_eq) exec_pop (exec_when (integer_yankdup) exec_rot (tag_integer_693 integer_shove integer_dup_times) (integer_empty integer_sub in1 integer_empty integer_yankdup integer_fromboolean integer_yank) (integer_add) exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_mod integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4 exec_do*while (boolean_yank integer_dup_times exec_do*range (integer_gt) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) exec_stackdepth boolean_yankdup) boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth exec_do*while () exec_when (integer_dup exec_yankdup exec_when (boolean_eq))) integer_dup exec_yankdup exec_when (integer_lt)) exec_y_when_autoconstructing (exec_pop ()) integer_inc integer_yank exec_dup () exec_pop (boolean_invert_second_then_and exec_pop (boolean_eq) integer_sub) boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup boolean_invert_second_then_and exec_shove () boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer) boolean_yankdup boolean_dup)
Zero cases best errors: [0 1 1 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 121
Percent parens: 0.198
--- Lexicase Population Statistics ---
Count of elite individuals by case: (539 99 80 207 7 208 572 735 302 207)
Population mean number of elite cases: 2.96
Count of perfect (error zero) individuals by case: (539 99 80 207 7 208 572 735 302 207)
Population mean number of perfect (error zero) cases: 2.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Best program: (exec_eq integer_dup_items integer_dup_items integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup integer_flush) boolean_and integer_flush boolean_and in2 exec_eq exec_pop (exec_when (integer_yankdup) exec_rot (tag_integer_693 integer_shove integer_dup_times integer_empty integer_sub in1 integer_empty integer_yankdup integer_fromboolean integer_yank exec_do*times () boolean_invert_first_then_and boolean_dup_times print_exec (exec_dup (integer_max -17 integer_mod integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4 integer_mult) integer_lte integer_max exec_s () (exec_do*range (integer_gt) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_stackdepth boolean_yankdup) boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth exec_do*while () exec_when () integer_dup exec_yankdup exec_when (boolean_eq)) (exec_y_when_autoconstructing (boolean_shove)) (integer_inc exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub)) boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup boolean_invert_second_then_and exec_shove (boolean_dup integer_pop boolean_empty) integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer) boolean_yankdup boolean_dup)
Errors: [0 1 1 0 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 94
Size: 116
Percent parens: 0.190
--- Population Statistics ---
Average total errors in population: 7.044
Median total errors in population: 7
Error averages by case: (0.461 0.901 0.92 0.793 0.993 0.792 0.428 0.265 0.698 0.793)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 95.103
Average program size in population (points): 117.531
Average percent parens in population: 0.190
Minimum age in population: 14.4375
Maximum age in population: 20.26611328125
Average age in population: 18.4011630859375
Median age in population: 18.5361328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 29
Genome diversity (% unique genomes):	 0.889
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.888
Total error diversity:				 0.008
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.102
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 10764862
--- Timings ---
Current time: 1559582802842 milliseconds
Total Time:          42.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.1 seconds, 53.9%
Fitness Testing:      9.9 seconds, 23.2%
Report:               9.7 seconds, 22.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 544
Test mean error for best: 0.54400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_stackdepth} {:close 2, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Lexicase best program: (boolean_dup_items exec_eq integer_dup_items exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup integer_flush boolean_and in2 exec_eq) exec_pop (exec_when (integer_yankdup) exec_rot (tag_integer_693 integer_add) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_mod integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4 exec_do*while (boolean_yank integer_dup_times exec_do*range (integer_gt) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) exec_stackdepth boolean_yankdup) boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth exec_do*while () exec_when (integer_dup exec_yankdup exec_when (boolean_eq)) integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (exec_pop ()) integer_inc integer_yank integer_inc) (exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_stackdepth) integer_sub)) in4 boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup boolean_yank exec_shove () boolean_dup integer_dup boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer) boolean_yankdup boolean_dup)
Lexicase best errors: [0 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 120
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_stackdepth} {:close 2, :instruction integer_sub} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Zero cases best program: (boolean_dup_items exec_eq integer_dup_items exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup integer_flush boolean_and in2 exec_eq) exec_pop (exec_when (integer_yankdup) exec_rot (tag_integer_693 integer_add) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_mod integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4 exec_do*while (boolean_yank integer_dup_times exec_do*range (integer_gt) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) exec_stackdepth boolean_yankdup) boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth exec_do*while () exec_when (integer_dup exec_yankdup exec_when (boolean_eq)) integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (exec_pop ()) integer_inc integer_yank integer_inc) (exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_stackdepth) integer_sub)) in4 boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup boolean_yank exec_shove () boolean_dup integer_dup boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer) boolean_yankdup boolean_dup)
Zero cases best errors: [0 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 120
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (701 824 771 461 839 128 710 734 607 458)
Population mean number of elite cases: 6.23
Count of perfect (error zero) individuals by case: (701 824 771 461 839 128 710 734 607 458)
Population mean number of perfect (error zero) cases: 6.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty boolean_not integer_flush boolean_pop in2 exec_eq) exec_pop (exec_when (integer_yankdup) exec_rot (tag_integer_693 integer_shove integer_dup_times integer_empty integer_sub in1 integer_empty integer_yankdup) (integer_fromboolean integer_yank) (exec_do*count (integer_yankdup) integer_fromboolean integer_yank) integer_add) exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 boolean_empty in4 exec_do*while (boolean_yankdup) in2 boolean_invert_second_then_and boolean_stackdepth exec_do*while () integer_gt) exec_y_when_autoconstructing (integer_empty) integer_stackdepth) exec_stackdepth boolean_yankdup boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth integer_dup exec_yankdup exec_when (boolean_eq) exec_y_when_autoconstructing (exec_pop ()) integer_shove integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup boolean_invert_second_then_and exec_shove () boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items integer_fromboolean boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 97
Size: 117
Percent parens: 0.171
--- Population Statistics ---
Average total errors in population: 3.767
Median total errors in population: 3
Error averages by case: (0.299 0.176 0.229 0.539 0.161 0.872 0.29 0.266 0.393 0.542)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 94.649
Average program size in population (points): 117.675
Average percent parens in population: 0.195
Minimum age in population: 15.4375
Maximum age in population: 21.69677734375
Average age in population: 19.8218740234375
Median age in population: 19.866943359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 6
Genome diversity (% unique genomes):	 0.914
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.911
Total error diversity:				 0.01
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.077
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 11607317
--- Timings ---
Current time: 1559582806003 milliseconds
Total Time:          45.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.8 seconds, 54.1%
Fitness Testing:     10.6 seconds, 23.0%
Report:              10.4 seconds, 22.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 544
Test mean error for best: 0.54400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -16} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 2, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Lexicase best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup integer_flush boolean_and in2 exec_eq exec_pop (exec_when (boolean_and in2 exec_eq) exec_pop (exec_when (integer_yankdup) exec_rot (tag_integer_693 integer_shove integer_dup_times integer_empty integer_sub in1 integer_empty integer_yankdup) (exec_do*times (integer_yank) integer_add) (exec_while (boolean_dup_times exec_noop exec_dup (integer_max -16 integer_mod integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4 integer_mult)) integer_lte integer_max exec_s (integer_dec) (integer_gt) (exec_y_when_autoconstructing (boolean_and) integer_stackdepth) exec_stackdepth boolean_yankdup) boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth exec_do*while (integer_gte integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (exec_pop ()) exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub)) boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup boolean_xor exec_shove () boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer boolean_yankdup) boolean_dup)
Lexicase best errors: [0 1 1 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 123
Percent parens: 0.195
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -16} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 2, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Zero cases best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup integer_flush boolean_and in2 exec_eq exec_pop (exec_when (boolean_and in2 exec_eq) exec_pop (exec_when (integer_yankdup) exec_rot (tag_integer_693 integer_shove integer_dup_times integer_empty integer_sub in1 integer_empty integer_yankdup) (exec_do*times (integer_yank) integer_add) (exec_while (boolean_dup_times exec_noop exec_dup (integer_max -16 integer_mod integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4 integer_mult)) integer_lte integer_max exec_s (integer_dec) (integer_gt) (exec_y_when_autoconstructing (boolean_and) integer_stackdepth) exec_stackdepth boolean_yankdup) boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth exec_do*while (integer_gte integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (exec_pop ()) exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub)) boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup boolean_xor exec_shove () boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer boolean_yankdup) boolean_dup)
Zero cases best errors: [0 1 1 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 123
Percent parens: 0.195
--- Lexicase Population Statistics ---
Count of elite individuals by case: (762 2 2 1000 619 816 125 612 618 811)
Population mean number of elite cases: 5.37
Count of perfect (error zero) individuals by case: (762 2 2 0 619 816 125 612 618 811)
Population mean number of perfect (error zero) cases: 4.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_integer_693} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -16} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dec})
Best program: (exec_k_when_autoconstructing () (tag_integer_693 in1 exec_rot (tag_integer_693 in1 integer_empty integer_yankdup integer_fromboolean integer_yank) (integer_add) (exec_while (exec_noop print_exec (exec_dup (integer_max -16 integer_mod integer_dup_items exec_yank) boolean_xor integer_dup_times boolean_empty in4 integer_mult) integer_lte integer_max exec_s (exec_do*range (integer_gt) exec_swap (boolean_and) (integer_stackdepth) exec_stackdepth boolean_yankdup) (boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth exec_do*while (integer_gte boolean_invert_second_then_and exec_yankdup exec_when (boolean_eq)) integer_rot exec_pop ()) (exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq)) integer_sub)) boolean_dup_items boolean_eq boolean_and integer_shove in3 exec_do*while (integer_gte boolean_invert_second_then_and exec_yankdup exec_yankdup) exec_when (boolean_eq)) exec_y_when_autoconstructing (exec_pop ()) integer_inc integer_yank integer_inc exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub boolean_dup_items boolean_eq boolean_and integer_shove integer_dup boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer) boolean_yankdup integer_dec)
Errors: [0 1 1 1 0 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 93
Size: 119
Percent parens: 0.218
--- Population Statistics ---
Average total errors in population: 5.633
Median total errors in population: 4
Error averages by case: (0.238 0.998 0.998 1.0 0.381 0.184 0.875 0.388 0.382 0.189)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 95.544
Average program size in population (points): 118.806
Average percent parens in population: 0.195
Minimum age in population: 17.689453125
Maximum age in population: 23.2906494140625
Average age in population: 21.15619299316406
Median age in population: 21.21875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 5
Genome diversity (% unique genomes):	 0.94
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.939
Total error diversity:				 0.007
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.072
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 12566282
--- Timings ---
Current time: 1559582809276 milliseconds
Total Time:          49.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.6 seconds, 54.1%
Fitness Testing:     11.3 seconds, 23.0%
Report:              11.2 seconds, 22.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 544
Test mean error for best: 0.54400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_while} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Lexicase best program: (exec_eq boolean_dup integer_yankdup integer_dup_items integer_mult exec_dup_times (integer_yankdup integer_dup_items integer_mult) boolean_and exec_empty integer_yankdup integer_flush boolean_and in2 exec_eq exec_pop (exec_when (integer_yankdup) exec_dup_times (boolean_or) in2 exec_rot (exec_noop integer_yankdup) (integer_fromboolean integer_yank) (integer_add) exec_while (boolean_dup_times print_exec (exec_dup (exec_while () exec_yank) boolean_xor boolean_yank boolean_empty in4 integer_mult) integer_lte integer_max exec_s (exec_do*range (integer_gt) exec_y_when_autoconstructing (integer_gt) integer_stackdepth) (exec_stackdepth boolean_yankdup) (boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth boolean_stackdepth exec_do*while (boolean_yankdup boolean_invert_second_then_and integer_inc exec_when (boolean_eq)) integer_rot exec_pop ()) exec_do*count (exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (exec_pop ()) integer_inc integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub) boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup boolean_invert_second_then_and in1 in3 exec_do*times (boolean_rot print_integer) boolean_yankdup boolean_dup)
Lexicase best errors: [0 0 0 0 1 0 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 117
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_while} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Zero cases best program: (exec_eq boolean_dup integer_yankdup integer_dup_items integer_mult exec_dup_times (integer_yankdup integer_dup_items integer_mult) boolean_and exec_empty integer_yankdup integer_flush boolean_and in2 exec_eq exec_pop (exec_when (integer_yankdup) exec_dup_times (boolean_or) in2 exec_rot (exec_noop integer_yankdup) (integer_fromboolean integer_yank) (integer_add) exec_while (boolean_dup_times print_exec (exec_dup (exec_while () exec_yank) boolean_xor boolean_yank boolean_empty in4 integer_mult) integer_lte integer_max exec_s (exec_do*range (integer_gt) exec_y_when_autoconstructing (integer_gt) integer_stackdepth) (exec_stackdepth boolean_yankdup) (boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth boolean_stackdepth exec_do*while (boolean_yankdup boolean_invert_second_then_and integer_inc exec_when (boolean_eq)) integer_rot exec_pop ()) exec_do*count (exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (exec_pop ()) integer_inc integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub) boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup boolean_invert_second_then_and in1 in3 exec_do*times (boolean_rot print_integer) boolean_yankdup boolean_dup)
Zero cases best errors: [0 0 0 0 1 0 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 117
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (796 424 414 414 254 800 399 9 92 245)
Population mean number of elite cases: 3.85
Count of perfect (error zero) individuals by case: (796 424 414 414 254 800 399 9 92 245)
Population mean number of perfect (error zero) cases: 3.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -16} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items boolean_stackdepth integer_gt integer_yankdup exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean integer_yank integer_add) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -16 integer_mod integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4 integer_mult) integer_lte integer_max exec_s (integer_mod integer_dup_items exec_yank) (boolean_xor boolean_yank boolean_empty in4 integer_mult) (integer_lte integer_max integer_stackdepth exec_do*range (integer_gt) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) exec_stackdepth boolean_yankdup)) boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth exec_pop () integer_shove integer_yank integer_inc exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup boolean_invert_second_then_and exec_shove () boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items integer_fromboolean boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Errors: [0 0 0 0 1 0 0 1 1 1]
Total: 4
Mean: 0.4
Genome size: 91
Size: 107
Percent parens: 0.150
--- Population Statistics ---
Average total errors in population: 6.153
Median total errors in population: 6
Error averages by case: (0.204 0.576 0.586 0.586 0.746 0.2 0.601 0.991 0.908 0.755)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 96.187
Average program size in population (points): 119.358
Average percent parens in population: 0.194
Minimum age in population: 18.689453125
Maximum age in population: 24.6954345703125
Average age in population: 22.79079730224609
Median age in population: 22.774658203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 39
Genome diversity (% unique genomes):	 0.913
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.911
Total error diversity:				 0.007
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.087
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 13620651
--- Timings ---
Current time: 1559582812698 milliseconds
Total Time:          52.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.4 seconds, 54.0%
Fitness Testing:     12.1 seconds, 23.0%
Report:              12.0 seconds, 22.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 544
Test mean error for best: 0.54400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -16} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_while} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Lexicase best program: (exec_k_when_autoconstructing () (exec_yank boolean_yankdup boolean_dup in3 exec_y_when_autoconstructing (exec_pop (exec_if (boolean_stackdepth integer_gt) (integer_yankdup) exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean integer_yank integer_add) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -16 integer_mod integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4 integer_mult) print_exec (exec_dup (exec_while () exec_flush exec_flush boolean_invert_first_then_and integer_mult) integer_gt exec_flush) integer_max boolean_dup exec_noop) exec_noop exec_do*while (exec_yank) boolean_xor boolean_yank boolean_empty in4 integer_mult) integer_lte integer_max exec_s (exec_do*range (integer_gt) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_stackdepth boolean_yankdup) () boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth exec_do*while (integer_gte boolean_invert_second_then_and exec_yankdup exec_when (boolean_eq) integer_rot exec_pop () exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub)) boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) boolean_invert_second_then_and integer_min) boolean_dup integer_pop boolean_xor integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Lexicase best errors: [1 1 0 1 1 0 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 134
Percent parens: 0.209
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -16} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_while} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Zero cases best program: (exec_k_when_autoconstructing () (exec_yank boolean_yankdup boolean_dup in3 exec_y_when_autoconstructing (exec_pop (exec_if (boolean_stackdepth integer_gt) (integer_yankdup) exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean integer_yank integer_add) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -16 integer_mod integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4 integer_mult) print_exec (exec_dup (exec_while () exec_flush exec_flush boolean_invert_first_then_and integer_mult) integer_gt exec_flush) integer_max boolean_dup exec_noop) exec_noop exec_do*while (exec_yank) boolean_xor boolean_yank boolean_empty in4 integer_mult) integer_lte integer_max exec_s (exec_do*range (integer_gt) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_stackdepth boolean_yankdup) () boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth exec_do*while (integer_gte boolean_invert_second_then_and exec_yankdup exec_when (boolean_eq) integer_rot exec_pop () exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub)) boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) boolean_invert_second_then_and integer_min) boolean_dup integer_pop boolean_xor integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Zero cases best errors: [1 1 0 1 1 0 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 134
Percent parens: 0.209
--- Lexicase Population Statistics ---
Count of elite individuals by case: (211 12 496 211 73 623 520 73 502 12)
Population mean number of elite cases: 2.73
Count of perfect (error zero) individuals by case: (211 12 496 211 73 623 520 73 502 12)
Population mean number of perfect (error zero) cases: 2.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_mod} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty) integer_yankdup integer_flush boolean_and in2 exec_eq exec_pop (exec_when (integer_yankdup) exec_rot (tag_integer_693 integer_shove integer_dup_times integer_empty boolean_or in1 integer_empty integer_yankdup integer_fromboolean integer_lt) (exec_yankdup) (exec_while (boolean_dup_times print_exec (integer_lt integer_max -17 integer_mod integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4 integer_mult integer_lte in4 exec_do*while (boolean_yank integer_dup_times exec_do*range (integer_gt) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) exec_stackdepth exec_k_when_autoconstructing () (boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth exec_do*while () exec_when (integer_dup exec_yankdup exec_when (boolean_eq)) integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (exec_pop ()) integer_inc integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times integer_mod) integer_sub)) boolean_dup_items boolean_eq boolean_and integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Errors: [1 1 0 1 1 0 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 90
Size: 112
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 7.267
Median total errors in population: 7
Error averages by case: (0.789 0.988 0.504 0.789 0.927 0.377 0.48 0.927 0.498 0.988)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 97.762
Average program size in population (points): 121.667
Average percent parens in population: 0.196
Minimum age in population: 19.689453125
Maximum age in population: 26.17636108398438
Average age in population: 24.46145062255859
Median age in population: 24.59445190429688
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 20
Genome diversity (% unique genomes):	 0.91
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.91
Total error diversity:				 0.005
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.102
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 14596319
--- Timings ---
Current time: 1559582815995 milliseconds
Total Time:          55.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.2 seconds, 54.0%
Fitness Testing:     12.8 seconds, 22.9%
Report:              12.8 seconds, 22.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 549
Test mean error for best: 0.54900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output:                    
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_boolean_798} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Lexicase best program: (boolean_dup_items exec_eq integer_dup_items exec_eq integer_dup_items integer_inc integer_dup_items integer_mult exec_dup_times (boolean_dup_items integer_yankdup integer_flush boolean_and in2 exec_eq) exec_pop (exec_when (integer_yankdup) exec_rot (tag_integer_693 integer_add) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_mod integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4 exec_do*while (boolean_yank integer_dup_times exec_do*range (integer_gt) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) exec_stackdepth boolean_yankdup) boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth exec_do*while () exec_when (integer_dup exec_yankdup exec_when (boolean_eq)) exec_do*count (exec_yankdup exec_when (boolean_eq)) boolean_stackdepth exec_do*while (integer_gte boolean_invert_second_then_and exec_yankdup exec_when (boolean_eq) print_integer exec_pop () exec_do*count (integer_yank integer_inc) exec_pop (boolean_eq boolean_dup_times boolean_eq) integer_sub)) boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) (boolean_invert_second_then_and integer_gt boolean_dup) boolean_invert_second_then_and integer_min) boolean_dup integer_pop boolean_empty integer_dup_items tag_boolean_798 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Lexicase best errors: [0 1 0 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 125
Percent parens: 0.192
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_boolean_798} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Zero cases best program: (boolean_dup_items exec_eq integer_dup_items exec_eq integer_dup_items integer_inc integer_dup_items integer_mult exec_dup_times (boolean_dup_items integer_yankdup integer_flush boolean_and in2 exec_eq) exec_pop (exec_when (integer_yankdup) exec_rot (tag_integer_693 integer_add) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_mod integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4 exec_do*while (boolean_yank integer_dup_times exec_do*range (integer_gt) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) exec_stackdepth boolean_yankdup) boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth exec_do*while () exec_when (integer_dup exec_yankdup exec_when (boolean_eq)) exec_do*count (exec_yankdup exec_when (boolean_eq)) boolean_stackdepth exec_do*while (integer_gte boolean_invert_second_then_and exec_yankdup exec_when (boolean_eq) print_integer exec_pop () exec_do*count (integer_yank integer_inc) exec_pop (boolean_eq boolean_dup_times boolean_eq) integer_sub)) boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) (boolean_invert_second_then_and integer_gt boolean_dup) boolean_invert_second_then_and integer_min) boolean_dup integer_pop boolean_empty integer_dup_items tag_boolean_798 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Zero cases best errors: [0 1 0 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 125
Percent parens: 0.192
--- Lexicase Population Statistics ---
Count of elite individuals by case: (762 2 319 116 314 119 304 130 322 307)
Population mean number of elite cases: 2.69
Count of perfect (error zero) individuals by case: (762 2 319 116 314 119 304 130 322 307)
Population mean number of perfect (error zero) cases: 2.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Best program: (exec_k_when_autoconstructing () (exec_yank boolean_yankdup boolean_dup in3 exec_y_when_autoconstructing (exec_pop (exec_if (boolean_stackdepth boolean_dup_times) (integer_yankdup) exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean boolean_dup_times integer_mult) (integer_add) exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_sub integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4 integer_mult integer_lte integer_mult) integer_lte integer_max exec_s (exec_do*range (in4) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_stackdepth boolean_yankdup) (boolean_invert_second_then_and boolean_invert_second_then_and integer_min exec_do*while () exec_when (integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (exec_pop ()) integer_sub integer_yank exec_do*times () exec_pop (integer_lte boolean_dup_times boolean_eq) integer_sub)) boolean_dup_items boolean_invert_first_then_and boolean_and integer_shove in3 -58 integer_gt boolean_dup) boolean_invert_second_then_and exec_shove (boolean_dup integer_pop boolean_empty) integer_dup tag_boolean_742 exec_dup_items boolean_empty in1) in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup)))
Errors: [0 1 0 1 0 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 89
Size: 116
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 7.305
Median total errors in population: 9
Error averages by case: (0.238 0.998 0.681 0.884 0.686 0.881 0.696 0.87 0.678 0.693)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 97.059
Average program size in population (points): 120.545
Average percent parens in population: 0.194
Minimum age in population: 22.690673828125
Maximum age in population: 27.85943603515625
Average age in population: 25.91324287414551
Median age in population: 25.99436950683594
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.935
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.934
Total error diversity:				 0.007
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 15678463
--- Timings ---
Current time: 1559582819287 milliseconds
Total Time:          59.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.0 seconds, 54.0%
Fitness Testing:     13.6 seconds, 23.0%
Report:              13.5 seconds, 22.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 542
Test mean error for best: 0.54200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 83                 
Correct output: 0                   | Program output: 83                 
Correct output: 42                  | Program output: 78                 
Correct output: 23                  | Program output: 60                 
Correct output: 31                  | Program output: 97                 
Correct output: 20                  | Program output: 47                 
Correct output: 9                   | Program output: 26                 
Correct output: 16                  | Program output: 78                 
Correct output: 15                  | Program output: 22                 
Correct output: 2                   | Program output: 73                 
Correct output: 23                  | Program output: 95                 
Correct output: 10                  | Program output: 16                 
Correct output: 1                   | Program output: 91                 
Correct output: 34                  | Program output: 97                 
Correct output: 20                  | Program output: 82                 
Correct output: 9                   | Program output: 100                
Correct output: 3                   | Program output: 78                 
Correct output: 28                  | Program output: 81                 
Correct output: 14                  | Program output: 62                 
Correct output: 46                  | Program output: 47                 
Correct output: -96                 | Program output: 36                 
Correct output: -61                 | Program output: -25                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -95                 | Program output: 34                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: 12                 
Correct output: -60                 | Program output: 42                 
Correct output: -55                 | Program output: -55                
Correct output: -42                 | Program output: -41                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -43                 | Program output: -38                
Correct output: -45                 | Program output: 98                 
Correct output: -56                 | Program output: 81                 
Correct output: -75                 | Program output: -46                
Correct output: -87                 | Program output: -23                
Correct output: -81                 | Program output: 41                 
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: -33                
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: 77                 
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: -42                
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: 25                 
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: 100                
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -25                
Correct output: -5                  | Program output: 19                 
Correct output: -45                 | Program output: 68                 
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -6                 
Correct output: -65                 | Program output: 7                  
Correct output: -36                 | Program output: 29                 
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 75                 
Correct output: -49                 | Program output: -12                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -54                
Correct output: -15                 | Program output: 36                 
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -63                 | Program output: -63                
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_602} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mult} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Lexicase best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup integer_flush) boolean_and integer_flush boolean_and in2 exec_eq exec_pop (tagged_602 integer_yankdup) exec_rot (exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean integer_yank integer_add) (exec_while (boolean_dup_times print_newline exec_dup (integer_empty integer_yankdup integer_fromboolean integer_mult) in4) exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_sub integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4 integer_mult integer_lte integer_mult) integer_lte integer_max exec_s (exec_do*range (in4) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_stackdepth boolean_yankdup) (boolean_invert_second_then_and boolean_invert_second_then_and integer_min exec_do*while () exec_when (exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub)) boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) boolean_invert_second_then_and integer_min) boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4) (in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup)) ())
Lexicase best errors: [0 0 0 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 122
Percent parens: 0.197
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_602} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mult} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Zero cases best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup integer_flush) boolean_and integer_flush boolean_and in2 exec_eq exec_pop (tagged_602 integer_yankdup) exec_rot (exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean integer_yank integer_add) (exec_while (boolean_dup_times print_newline exec_dup (integer_empty integer_yankdup integer_fromboolean integer_mult) in4) exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_sub integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4 integer_mult integer_lte integer_mult) integer_lte integer_max exec_s (exec_do*range (in4) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_stackdepth boolean_yankdup) (boolean_invert_second_then_and boolean_invert_second_then_and integer_min exec_do*while () exec_when (exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub)) boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) boolean_invert_second_then_and integer_min) boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4) (in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup)) ())
Zero cases best errors: [0 0 0 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 122
Percent parens: 0.197
--- Lexicase Population Statistics ---
Count of elite individuals by case: (9 749 75 738 755 478 9 473 716 15)
Population mean number of elite cases: 4.02
Count of perfect (error zero) individuals by case: (9 749 75 738 755 478 9 473 716 15)
Population mean number of perfect (error zero) cases: 4.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_integer_693} {:close 0, :instruction tag_exec_493} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -16} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 1, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Best program: (exec_k_when_autoconstructing () (tag_integer_693 tag_exec_493 (exec_rot (tag_integer_693 in1 integer_empty integer_yankdup integer_fromboolean integer_yank) (integer_add) (exec_while (exec_noop print_exec (exec_dup (integer_max -16 integer_mod integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4 integer_mult) integer_lte integer_max print_exec (exec_dup (integer_max -17 integer_mod integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty integer_max exec_s (integer_dec integer_gt) (exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_stackdepth boolean_yankdup boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth exec_do*while (integer_gte integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing () exec_pop ()) exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub) boolean_xor boolean_eq integer_shove in3 -58 integer_gt boolean_dup) boolean_invert_second_then_and) integer_gt boolean_dup) boolean_invert_second_then_and integer_min) boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4 in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Errors: [0 0 0 0 0 1 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 91
Size: 114
Percent parens: 0.202
--- Population Statistics ---
Average total errors in population: 5.983
Median total errors in population: 6
Error averages by case: (0.991 0.251 0.925 0.262 0.245 0.522 0.991 0.527 0.284 0.985)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 97.692
Average program size in population (points): 121.699
Average percent parens in population: 0.197
Minimum age in population: 23.939208984375
Maximum age in population: 29.28709411621094
Average age in population: 27.3653902130127
Median age in population: 27.42760467529297
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.915
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.914
Total error diversity:				 0.008
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.099
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 16516977
--- Timings ---
Current time: 1559582822468 milliseconds
Total Time:          62.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.8 seconds, 54.2%
Fitness Testing:     14.3 seconds, 22.9%
Report:              14.2 seconds, 22.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 544
Test mean error for best: 0.54400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Lexicase best program: (exec_k_when_autoconstructing () (exec_yank boolean_yankdup boolean_dup in3 exec_y_when_autoconstructing (exec_pop (exec_if (boolean_stackdepth boolean_dup_times) (integer_yankdup) exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean boolean_dup_times integer_mult) (integer_add) exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_sub integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4 integer_mult integer_lte integer_mult) integer_lte integer_max exec_s (exec_do*range (in4) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_stackdepth boolean_yankdup) (boolean_invert_second_then_and boolean_invert_second_then_and integer_min exec_do*while () exec_when (integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (exec_pop ()) integer_sub integer_yank exec_do*times () exec_pop (integer_lte boolean_dup_times boolean_eq) integer_sub)) boolean_dup_items boolean_invert_first_then_and boolean_pop)) boolean_dup_items boolean_eq in3 integer_shove in3 -58 integer_gt boolean_dup) integer_inc exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq integer_sub) boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup boolean_invert_second_then_and exec_shove (boolean_dup exec_do*range (exec_shove () integer_dup tag_boolean_742 exec_dup_items integer_fromboolean boolean_empty) integer_dup tag_boolean_742 exec_dup_items integer_rot in1) in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Lexicase best errors: [0 0 1 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 141
Percent parens: 0.213
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Zero cases best program: (exec_k_when_autoconstructing () (exec_yank boolean_yankdup boolean_dup in3 exec_y_when_autoconstructing (exec_pop (exec_if (boolean_stackdepth boolean_dup_times) (integer_yankdup) exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean boolean_dup_times integer_mult) (integer_add) exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_sub integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4 integer_mult integer_lte integer_mult) integer_lte integer_max exec_s (exec_do*range (in4) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_stackdepth boolean_yankdup) (boolean_invert_second_then_and boolean_invert_second_then_and integer_min exec_do*while () exec_when (integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (exec_pop ()) integer_sub integer_yank exec_do*times () exec_pop (integer_lte boolean_dup_times boolean_eq) integer_sub)) boolean_dup_items boolean_invert_first_then_and boolean_pop)) boolean_dup_items boolean_eq in3 integer_shove in3 -58 integer_gt boolean_dup) integer_inc exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq integer_sub) boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup boolean_invert_second_then_and exec_shove (boolean_dup exec_do*range (exec_shove () integer_dup tag_boolean_742 exec_dup_items integer_fromboolean boolean_empty) integer_dup tag_boolean_742 exec_dup_items integer_rot in1) in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Zero cases best errors: [0 0 1 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 141
Percent parens: 0.213
--- Lexicase Population Statistics ---
Count of elite individuals by case: (770 330 28 21 672 672 351 22 3 340)
Population mean number of elite cases: 3.21
Count of perfect (error zero) individuals by case: (770 330 28 21 672 672 351 22 3 340)
Population mean number of perfect (error zero) cases: 3.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty) integer_yankdup integer_flush boolean_and in2 exec_eq exec_pop (exec_when (integer_yankdup) exec_rot (tag_integer_693 integer_shove integer_dup_times integer_empty integer_sub in1 integer_empty integer_yankdup integer_fromboolean integer_yank) (integer_add) (exec_while (boolean_dup_times print_exec (exec_dup (exec_dup (integer_max -17 exec_y_when_autoconstructing (boolean_and) integer_stackdepth) exec_stackdepth boolean_yankdup) boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth exec_do*while () integer_sub boolean_invert_second_then_and exec_yankdup exec_when (boolean_eq)) integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (exec_pop ()) integer_inc integer_yank integer_gte integer_eq exec_y_when_autoconstructing (boolean_dup integer_yank integer_inc) exec_when (boolean_eq) integer_rot exec_pop () exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) boolean_stackdepth)) boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup exec_shove (integer_min) boolean_dup integer_pop boolean_empty integer_dup boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Errors: [0 0 1 1 0 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 100
Size: 124
Percent parens: 0.194
--- Population Statistics ---
Average total errors in population: 6.791
Median total errors in population: 7
Error averages by case: (0.23 0.67 0.972 0.979 0.328 0.328 0.649 0.978 0.997 0.66)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 96.447
Average program size in population (points): 120.236
Average percent parens in population: 0.198
Minimum age in population: 26.4061279296875
Maximum age in population: 30.70055389404297
Average age in population: 28.98321262741089
Median age in population: 29.01559066772461
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 21
Genome diversity (% unique genomes):	 0.839
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.838
Total error diversity:				 0.007
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.121
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 17512189
--- Timings ---
Current time: 1559582825819 milliseconds
Total Time:          65.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.6 seconds, 54.2%
Fitness Testing:     15.0 seconds, 22.9%
Report:              14.9 seconds, 22.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 534
Test mean error for best: 0.53400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -53                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 0                  
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -1                 
Correct output: -87                 | Program output: -55                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -3                 
Correct output: -54                 | Program output: -47                
Correct output: -95                 | Program output: 56                 
Correct output: -97                 | Program output: -21                
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: 95                 
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -8                 
Correct output: -90                 | Program output: -1                 
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -11                
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -4                 
Correct output: -34                 | Program output: 79                 
Correct output: -17                 | Program output: 97                 
Correct output: -82                 | Program output: -70                
Correct output: -49                 | Program output: -16                
Correct output: -54                 | Program output: -36                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_and} {:close 2, :instruction integer_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 2, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Lexicase best program: (boolean_dup_items exec_eq integer_dup_items exec_eq integer_dup_items integer_sub integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup exec_when (boolean_and in2 exec_eq) exec_pop (exec_when (integer_yankdup) exec_rot (tag_integer_693 integer_add) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 exec_noop integer_dup_items exec_yank) boolean_xor integer_swap boolean_empty in4 exec_do*while (boolean_yank integer_dup_times exec_do*range (integer_gt exec_y_when_autoconstructing (boolean_and integer_stackdepth) exec_stackdepth boolean_and) integer_stackdepth)) exec_stackdepth) boolean_yankdup boolean_invert_second_then_and boolean_invert_second_then_and in1 exec_do*while ()) (exec_when (integer_dup exec_yankdup exec_when (boolean_eq) exec_y_when_autoconstructing (exec_pop ()) in2 integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times) boolean_eq) integer_sub)) boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_sub boolean_dup boolean_invert_second_then_and exec_shove () boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in2 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Lexicase best errors: [0 0 1 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 117
Percent parens: 0.188
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_and} {:close 2, :instruction integer_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 2, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Zero cases best program: (boolean_dup_items exec_eq integer_dup_items exec_eq integer_dup_items integer_sub integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup exec_when (boolean_and in2 exec_eq) exec_pop (exec_when (integer_yankdup) exec_rot (tag_integer_693 integer_add) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 exec_noop integer_dup_items exec_yank) boolean_xor integer_swap boolean_empty in4 exec_do*while (boolean_yank integer_dup_times exec_do*range (integer_gt exec_y_when_autoconstructing (boolean_and integer_stackdepth) exec_stackdepth boolean_and) integer_stackdepth)) exec_stackdepth) boolean_yankdup boolean_invert_second_then_and boolean_invert_second_then_and in1 exec_do*while ()) (exec_when (integer_dup exec_yankdup exec_when (boolean_eq) exec_y_when_autoconstructing (exec_pop ()) in2 integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times) boolean_eq) integer_sub)) boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_sub boolean_dup boolean_invert_second_then_and exec_shove () boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in2 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Zero cases best errors: [0 0 1 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 117
Percent parens: 0.188
--- Lexicase Population Statistics ---
Count of elite individuals by case: (189 398 663 388 39 662 384 122 147 68)
Population mean number of elite cases: 3.06
Count of perfect (error zero) individuals by case: (189 398 663 388 39 662 384 122 147 68)
Population mean number of perfect (error zero) cases: 3.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_and} {:close 2, :instruction integer_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 2, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Best program: (boolean_dup_items exec_eq integer_dup_items exec_eq integer_dup_items integer_sub integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup exec_when (boolean_and in2 exec_eq) exec_pop (exec_when (integer_yankdup) exec_rot (tag_integer_693 integer_add) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 exec_noop integer_dup_items exec_yank) boolean_xor integer_swap boolean_empty in4 exec_do*while (boolean_yank integer_dup_times exec_do*range (integer_gt exec_y_when_autoconstructing (boolean_and integer_stackdepth) exec_stackdepth boolean_and) integer_stackdepth)) exec_stackdepth) boolean_yankdup boolean_invert_second_then_and boolean_invert_second_then_and in1 exec_do*while ()) (exec_when (integer_dup exec_yankdup exec_when (boolean_eq) exec_y_when_autoconstructing (exec_pop ()) in2 integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times) boolean_eq) integer_sub)) boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_sub boolean_dup boolean_invert_second_then_and exec_shove () boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in2 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Errors: [0 0 1 0 0 1 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 95
Size: 117
Percent parens: 0.188
--- Population Statistics ---
Average total errors in population: 6.94
Median total errors in population: 7
Error averages by case: (0.811 0.602 0.337 0.612 0.961 0.338 0.616 0.878 0.853 0.932)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 97.838
Average program size in population (points): 122.367
Average percent parens in population: 0.200
Minimum age in population: 27.4061279296875
Maximum age in population: 32.13428497314453
Average age in population: 30.53784727668762
Median age in population: 30.60366058349609
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 30
Genome diversity (% unique genomes):	 0.876
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.874
Total error diversity:				 0.007
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.087
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 18402292
--- Timings ---
Current time: 1559582829121 milliseconds
Total Time:          69.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.5 seconds, 54.3%
Fitness Testing:     15.7 seconds, 22.8%
Report:              15.7 seconds, 22.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 544
Test mean error for best: 0.54400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 2, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 2, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_shove} {:close 1, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Lexicase best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty exec_empty integer_yankdup integer_flush boolean_and in2 exec_eq exec_pop (exec_when (integer_empty integer_sub in1) integer_empty integer_yankdup integer_fromboolean integer_yank) integer_add) exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_mod integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4 integer_mult integer_lte integer_max exec_s (exec_do*range (integer_gt exec_y_when_autoconstructing (boolean_and) integer_stackdepth)) (exec_stackdepth boolean_yankdup boolean_invert_second_then_and boolean_invert_second_then_and in1 exec_do*while ()) (exec_when (integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (exec_pop () in2 integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times) boolean_eq) integer_sub)) boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup boolean_invert_second_then_and exec_shove () boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer) boolean_yankdup boolean_dup)
Lexicase best errors: [0 0 1 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 110
Percent parens: 0.182
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 2, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 2, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_shove} {:close 1, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Zero cases best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty exec_empty integer_yankdup integer_flush boolean_and in2 exec_eq exec_pop (exec_when (integer_empty integer_sub in1) integer_empty integer_yankdup integer_fromboolean integer_yank) integer_add) exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_mod integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4 integer_mult integer_lte integer_max exec_s (exec_do*range (integer_gt exec_y_when_autoconstructing (boolean_and) integer_stackdepth)) (exec_stackdepth boolean_yankdup boolean_invert_second_then_and boolean_invert_second_then_and in1 exec_do*while ()) (exec_when (integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (exec_pop () in2 integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times) boolean_eq) integer_sub)) boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup boolean_invert_second_then_and exec_shove () boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer) boolean_yankdup boolean_dup)
Zero cases best errors: [0 0 1 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 110
Percent parens: 0.182
--- Lexicase Population Statistics ---
Count of elite individuals by case: (485 493 149 4 493 439 150 164 492 494)
Population mean number of elite cases: 3.36
Count of perfect (error zero) individuals by case: (485 493 149 4 493 439 150 164 492 494)
Population mean number of perfect (error zero) cases: 3.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -16} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yankdup})
Best program: (exec_k_when_autoconstructing () (exec_yank boolean_yankdup boolean_dup in3 exec_y_when_autoconstructing (exec_pop (exec_if (boolean_stackdepth integer_gt) (integer_yankdup) exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean integer_yank integer_add) (exec_while (boolean_dup_times) print_exec (exec_dup (integer_max -16 integer_mod integer_dup_items exec_yank boolean_xor boolean_yank boolean_empty in4 integer_mult) integer_lte integer_max exec_s (integer_mod integer_dup_items exec_yank) (boolean_xor boolean_yank) (boolean_empty in4 integer_mult) integer_lte integer_max boolean_invert_second_then_and boolean_invert_second_then_and exec_do*while (exec_when (integer_dup exec_yankdup exec_when (boolean_eq)) integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (exec_pop ()) integer_inc integer_yank integer_inc) exec_pop (integer_dup_items boolean_dup_times) boolean_eq) integer_sub)) boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) boolean_invert_second_then_and exec_shove () boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer) boolean_yankdup)
Errors: [0 0 1 1 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 91
Size: 116
Percent parens: 0.216
--- Population Statistics ---
Average total errors in population: 6.637
Median total errors in population: 7
Error averages by case: (0.515 0.507 0.851 0.996 0.507 0.561 0.85 0.836 0.508 0.506)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 95.876
Average program size in population (points): 119.211
Average percent parens in population: 0.195
Minimum age in population: 29.12889099121094
Maximum age in population: 33.54507446289062
Average age in population: 32.20652900600433
Median age in population: 32.07475566864014
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 103
Genome diversity (% unique genomes):	 0.866
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 104
Syntactic diversity (% unique Push programs):	 0.863
Total error diversity:				 0.008
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.097
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 19464047
--- Timings ---
Current time: 1559582832486 milliseconds
Total Time:          72.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.3 seconds, 54.3%
Fitness Testing:     16.5 seconds, 22.8%
Report:              16.5 seconds, 22.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 544
Test mean error for best: 0.54400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -16} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup exec_shove (boolean_rot in2 exec_eq exec_pop (exec_when (integer_yank integer_add exec_while (boolean_dup_times print_exec (exec_dup (integer_max -16 integer_mod integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4) integer_mult) integer_lte integer_max exec_s (integer_mod integer_dup_items exec_yank) (boolean_xor boolean_yank boolean_empty integer_stackdepth) (exec_stackdepth boolean_yank boolean_empty integer_dec integer_gt) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) exec_stackdepth boolean_yankdup boolean_invert_second_then_and boolean_invert_second_then_and integer_dup exec_yankdup exec_when (boolean_eq)) integer_dup exec_yankdup exec_when () boolean_eq)) exec_y_when_autoconstructing (exec_pop ()) integer_inc integer_yank integer_inc exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup boolean_invert_second_then_and exec_shove () boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer) boolean_yankdup)
Lexicase best errors: [0 0 1 1 1 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 112
Percent parens: 0.170
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -16} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup exec_shove (boolean_rot in2 exec_eq exec_pop (exec_when (integer_yank integer_add exec_while (boolean_dup_times print_exec (exec_dup (integer_max -16 integer_mod integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4) integer_mult) integer_lte integer_max exec_s (integer_mod integer_dup_items exec_yank) (boolean_xor boolean_yank boolean_empty integer_stackdepth) (exec_stackdepth boolean_yank boolean_empty integer_dec integer_gt) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) exec_stackdepth boolean_yankdup boolean_invert_second_then_and boolean_invert_second_then_and integer_dup exec_yankdup exec_when (boolean_eq)) integer_dup exec_yankdup exec_when () boolean_eq)) exec_y_when_autoconstructing (exec_pop ()) integer_inc integer_yank integer_inc exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup boolean_invert_second_then_and exec_shove () boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer) boolean_yankdup)
Zero cases best errors: [0 0 1 1 1 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 112
Percent parens: 0.170
--- Lexicase Population Statistics ---
Count of elite individuals by case: (529 661 7 16 9 539 541 249 639 542)
Population mean number of elite cases: 3.73
Count of perfect (error zero) individuals by case: (529 661 7 16 9 539 541 249 639 542)
Population mean number of perfect (error zero) cases: 3.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -16} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Best program: (exec_k_when_autoconstructing () (exec_yank boolean_yankdup boolean_dup in3 exec_y_when_autoconstructing (exec_pop (exec_if (boolean_stackdepth integer_gt) (integer_yankdup) exec_rot (tag_integer_693 in1 boolean_pop integer_yankdup) (boolean_yank integer_yank integer_add) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -16 integer_mod integer_dup_items boolean_dup_times print_exec (exec_dup (integer_max -17 integer_mod integer_dup_items exec_yank) boolean_xor boolean_yank in4 boolean_empty in4 integer_sub exec_dup_items exec_s (integer_dec integer_gt) (exec_when (boolean_eq)) (integer_stackdepth) exec_when (integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (exec_pop ()) integer_inc exec_while (integer_inc) integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub)) boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) boolean_invert_second_then_and integer_min) boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty integer_min) boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_invert_second_then_and in1) in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup)))
Errors: [0 0 1 1 1 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 96
Size: 122
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 6.268
Median total errors in population: 4
Error averages by case: (0.471 0.339 0.993 0.984 0.991 0.461 0.459 0.751 0.361 0.458)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 97.048
Average program size in population (points): 119.515
Average percent parens in population: 0.187
Minimum age in population: 30.20975494384766
Maximum age in population: 35.23329734802246
Average age in population: 33.454298828125
Median age in population: 33.57837700843811
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 21
Genome diversity (% unique genomes):	 0.894
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.89
Total error diversity:				 0.007
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 20624480
--- Timings ---
Current time: 1559582835858 milliseconds
Total Time:          75.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        41.1 seconds, 54.2%
Fitness Testing:     17.4 seconds, 22.9%
Report:              17.2 seconds, 22.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 544
Test mean error for best: 0.54400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 2, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 3, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Lexicase best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup integer_flush boolean_and in2 exec_eq) exec_pop (integer_dup_times exec_eq) exec_pop (exec_when (integer_yankdup) exec_rot (tag_integer_693 integer_shove integer_dup_times integer_empty integer_sub in1 integer_empty integer_yankdup) (integer_fromboolean integer_yank) (integer_add) integer_dup_items exec_yank) boolean_xor boolean_yank integer_mult integer_lte integer_mult integer_inc integer_max exec_s (exec_do*range (in4) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_stackdepth boolean_yankdup) (boolean_invert_second_then_and boolean_invert_second_then_and integer_min exec_do*while ()) exec_when (integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (exec_pop ()) integer_sub integer_yank exec_do*times () exec_pop (integer_lte boolean_dup_times boolean_eq) integer_sub boolean_dup_items boolean_invert_first_then_and boolean_and integer_shove in3 -58 integer_gt boolean_dup boolean_invert_second_then_and exec_shove (boolean_dup integer_pop boolean_empty) integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Lexicase best errors: [0 1 0 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 115
Percent parens: 0.191
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 2, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 3, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Zero cases best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup integer_flush boolean_and in2 exec_eq) exec_pop (integer_dup_times exec_eq) exec_pop (exec_when (integer_yankdup) exec_rot (tag_integer_693 integer_shove integer_dup_times integer_empty integer_sub in1 integer_empty integer_yankdup) (integer_fromboolean integer_yank) (integer_add) integer_dup_items exec_yank) boolean_xor boolean_yank integer_mult integer_lte integer_mult integer_inc integer_max exec_s (exec_do*range (in4) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_stackdepth boolean_yankdup) (boolean_invert_second_then_and boolean_invert_second_then_and integer_min exec_do*while ()) exec_when (integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (exec_pop ()) integer_sub integer_yank exec_do*times () exec_pop (integer_lte boolean_dup_times boolean_eq) integer_sub boolean_dup_items boolean_invert_first_then_and boolean_and integer_shove in3 -58 integer_gt boolean_dup boolean_invert_second_then_and exec_shove (boolean_dup integer_pop boolean_empty) integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Zero cases best errors: [0 1 0 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 115
Percent parens: 0.191
--- Lexicase Population Statistics ---
Count of elite individuals by case: (418 143 411 433 418 429 11 417 119 119)
Population mean number of elite cases: 2.92
Count of perfect (error zero) individuals by case: (418 143 411 433 418 429 11 417 119 119)
Population mean number of perfect (error zero) cases: 2.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_exec} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Best program: (exec_eq integer_dup_items integer_yankdup boolean_yankdup boolean_dup integer_dup_items exec_eq exec_pop () exec_when (integer_yankdup exec_rot (exec_flush integer_shove integer_swap integer_empty integer_sub in1 integer_empty integer_yankdup) (integer_fromboolean boolean_yank print_exec (integer_empty print_integer) integer_fromboolean integer_yank) (integer_add) exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_mod integer_empty exec_yank) exec_stackdepth boolean_yankdup) boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth) exec_do*while () exec_when (integer_dup exec_when (boolean_eq)) boolean_invert_second_then_and boolean_stackdepth exec_eq) exec_yankdup exec_when (boolean_eq) boolean_invert_second_then_and boolean_stackdepth exec_do*while () exec_when () integer_dup exec_yankdup boolean_or boolean_eq exec_y_when_autoconstructing (boolean_yankdup) integer_inc integer_yank integer_inc exec_pop (boolean_invert_second_then_and boolean_eq) integer_sub boolean_dup_items boolean_flush boolean_and integer_dup_times boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup boolean_invert_second_then_and exec_shove () boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer) boolean_yankdup boolean_dup)
Errors: [0 1 0 0 0 0 1 0 1 1]
Total: 4
Mean: 0.4
Genome size: 96
Size: 116
Percent parens: 0.172
--- Population Statistics ---
Average total errors in population: 7.082
Median total errors in population: 8
Error averages by case: (0.582 0.857 0.589 0.567 0.582 0.571 0.989 0.583 0.881 0.881)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 96.313
Average program size in population (points): 119.412
Average percent parens in population: 0.193
Minimum age in population: 31.46186065673828
Maximum age in population: 36.79750275611877
Average age in population: 34.77883215022087
Median age in population: 34.85173380374908
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.895
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.892
Total error diversity:				 0.007
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.091
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 21865568
--- Timings ---
Current time: 1559582839401 milliseconds
Total Time:          79.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        42.9 seconds, 54.2%
Fitness Testing:     18.3 seconds, 23.1%
Report:              17.9 seconds, 22.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 44                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 64                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 73                 
Correct output: 23                  | Program output: 88                 
Correct output: 31                  | Program output: 87                 
Correct output: 20                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 59                 
Correct output: 15                  | Program output: 57                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 29                 
Correct output: 10                  | Program output: 16                 
Correct output: 1                   | Program output: 30                 
Correct output: 34                  | Program output: 78                 
Correct output: 20                  | Program output: 41                 
Correct output: 9                   | Program output: 15                 
Correct output: 3                   | Program output: 72                 
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 18                 
Correct output: 46                  | Program output: 51                 
Correct output: -96                 | Program output: 82                 
Correct output: -61                 | Program output: -53                
Correct output: -78                 | Program output: 86                 
Correct output: -91                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: 98                 
Correct output: -60                 | Program output: 10                 
Correct output: -55                 | Program output: -12                
Correct output: -42                 | Program output: 97                 
Correct output: -76                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 0                  
Correct output: -43                 | Program output: 22                 
Correct output: -45                 | Program output: 97                 
Correct output: -56                 | Program output: 10                 
Correct output: -75                 | Program output: -1                 
Correct output: -87                 | Program output: -55                
Correct output: -81                 | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -3                 
Correct output: -54                 | Program output: -47                
Correct output: -95                 | Program output: 3                  
Correct output: -97                 | Program output: -21                
Correct output: -85                 | Program output: 73                 
Correct output: -81                 | Program output: 61                 
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: 24                 
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: 96                 
Correct output: -93                 | Program output: 59                 
Correct output: -62                 | Program output: -8                 
Correct output: -90                 | Program output: -1                 
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: 61                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: 87                 
Correct output: -23                 | Program output: -11                
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: 23                 
Correct output: -95                 | Program output: 33                 
Correct output: -82                 | Program output: 88                 
Correct output: -65                 | Program output: 4                  
Correct output: -36                 | Program output: 10                 
Correct output: -53                 | Program output: -4                 
Correct output: -34                 | Program output: 63                 
Correct output: -17                 | Program output: 54                 
Correct output: -82                 | Program output: -70                
Correct output: -49                 | Program output: -16                
Correct output: -54                 | Program output: -36                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: 55                 
Correct output: -83                 | Program output: 38                 
Correct output: -63                 | Program output: 80                 
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_exec} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Lexicase best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup exec_shove (boolean_rot in2 exec_eq exec_pop (exec_when (integer_yank integer_add exec_while (boolean_dup_times integer_add) exec_while (boolean_dup_times print_newline exec_dup (integer_empty integer_yankdup integer_fromboolean print_exec () in4) exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_sub integer_dup_items exec_dup (integer_max -17 integer_mod integer_add) exec_while (boolean_dup_times print_exec (exec_dup (boolean_eq)) integer_dup exec_yankdup exec_when (boolean_eq)) integer_min exec_pop ()) integer_inc integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times integer_sub)) exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (exec_pop ()) integer_inc integer_yank boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth exec_do*while (boolean_dup) boolean_invert_second_then_and exec_shove () boolean_dup integer_pop boolean_empty) integer_dup tag_boolean_742 exec_dup_items exec_shove (in1) in3 boolean_empty integer_dup tag_boolean_742 exec_swap (boolean_empty boolean_dup) (boolean_invert_second_then_and exec_shove () boolean_dup integer_pop boolean_empty) integer_dup tag_boolean_742 exec_dup_items boolean_empty in1) in3 exec_do*times (boolean_rot print_integer) boolean_yankdup boolean_dup)))
Lexicase best errors: [1 1 0 1 0 0 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 133
Percent parens: 0.218
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_exec} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Zero cases best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup exec_shove (boolean_rot in2 exec_eq exec_pop (exec_when (integer_yank integer_add exec_while (boolean_dup_times integer_add) exec_while (boolean_dup_times print_newline exec_dup (integer_empty integer_yankdup integer_fromboolean print_exec () in4) exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_sub integer_dup_items exec_dup (integer_max -17 integer_mod integer_add) exec_while (boolean_dup_times print_exec (exec_dup (boolean_eq)) integer_dup exec_yankdup exec_when (boolean_eq)) integer_min exec_pop ()) integer_inc integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times integer_sub)) exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (exec_pop ()) integer_inc integer_yank boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth exec_do*while (boolean_dup) boolean_invert_second_then_and exec_shove () boolean_dup integer_pop boolean_empty) integer_dup tag_boolean_742 exec_dup_items exec_shove (in1) in3 boolean_empty integer_dup tag_boolean_742 exec_swap (boolean_empty boolean_dup) (boolean_invert_second_then_and exec_shove () boolean_dup integer_pop boolean_empty) integer_dup tag_boolean_742 exec_dup_items boolean_empty in1) in3 exec_do*times (boolean_rot print_integer) boolean_yankdup boolean_dup)))
Zero cases best errors: [1 1 0 1 0 0 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 133
Percent parens: 0.218
--- Lexicase Population Statistics ---
Count of elite individuals by case: (456 553 109 14 663 109 127 10 715 20)
Population mean number of elite cases: 2.78
Count of perfect (error zero) individuals by case: (456 553 109 14 663 109 127 10 715 20)
Population mean number of perfect (error zero) cases: 2.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_602} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mult} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup integer_flush) boolean_and integer_flush boolean_and in2 exec_eq exec_pop (tagged_602 integer_yankdup) exec_when (exec_rot (tag_integer_693 integer_min integer_empty integer_yankdup) (integer_fromboolean integer_yank integer_add) (exec_while (exec_stackdepth print_newline exec_dup (integer_empty integer_yankdup integer_fromboolean integer_mult) in4) exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_sub integer_dup_items exec_yank) boolean_xor exec_when (boolean_empty in4 integer_mult exec_empty integer_mult) integer_lte integer_max exec_s (exec_do*range (in4) exec_y_when_autoconstructing (boolean_and) boolean_eq) (integer_sub) (boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) boolean_invert_second_then_and) integer_gt boolean_dup) boolean_invert_second_then_and integer_min) boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4) integer_mod boolean_pop boolean_rot print_integer boolean_yankdup boolean_dup)
Errors: [1 1 0 1 1 0 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 87
Size: 105
Percent parens: 0.171
--- Population Statistics ---
Average total errors in population: 7.224
Median total errors in population: 6
Error averages by case: (0.544 0.447 0.891 0.986 0.337 0.891 0.873 0.99 0.285 0.98)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 96.187
Average program size in population (points): 119.572
Average percent parens in population: 0.195
Minimum age in population: 32.46186065673828
Maximum age in population: 38.29826486110687
Average age in population: 36.07719239854813
Median age in population: 36.09894120693207
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 43
Genome diversity (% unique genomes):	 0.912
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.909
Total error diversity:				 0.006
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.107
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 22726179
--- Timings ---
Current time: 1559582842435 milliseconds
Total Time:          82.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        44.9 seconds, 54.3%
Fitness Testing:     19.0 seconds, 22.9%
Report:              18.7 seconds, 22.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 544
Test mean error for best: 0.54400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction exec_while} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 2, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_stackdepth} {:close 2, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*range})
Lexicase best program: (boolean_dup_items boolean_dup_items exec_eq boolean_dup_items exec_eq integer_dup_items exec_eq in4 integer_add integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup) integer_flush boolean_and in2 exec_eq exec_pop (exec_when (integer_yankdup) exec_rot (tag_integer_693 integer_add exec_while (boolean_dup_times print_exec (exec_stackdepth integer_fromboolean integer_lte exec_do*times () boolean_invert_first_then_and boolean_dup_times print_exec (exec_dup (integer_max -17 integer_mod integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4 integer_mult) integer_lte integer_max exec_s () (exec_while (integer_gt) integer_empty boolean_and) (integer_dup_times) exec_stackdepth boolean_yankdup)) boolean_invert_second_then_and exec_yank boolean_invert_second_then_and boolean_stackdepth exec_do*while (integer_gte integer_lt exec_yankdup exec_when (boolean_eq)) integer_rot exec_pop ()) (exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub) () boolean_dup_items integer_rot exec_pop ()) boolean_invert_second_then_and integer_gt boolean_stackdepth exec_do*while () exec_when (integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (exec_pop ()) integer_inc integer_yank integer_inc exec_pop (boolean_invert_second_then_and boolean_dup_times) boolean_eq integer_sub exec_do*while (boolean_eq boolean_and) integer_shove in3 -58 integer_gt integer_pop boolean_invert_second_then_and exec_shove () boolean_dup integer_dup boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer boolean_yankdup exec_do*range ()))
Lexicase best errors: [0 0 0 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 153
Percent parens: 0.209
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 0, :instruction exec_while} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 2, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_stackdepth} {:close 2, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*range})
Zero cases best program: (boolean_dup_items boolean_dup_items exec_eq boolean_dup_items exec_eq integer_dup_items exec_eq in4 integer_add integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup) integer_flush boolean_and in2 exec_eq exec_pop (exec_when (integer_yankdup) exec_rot (tag_integer_693 integer_add exec_while (boolean_dup_times print_exec (exec_stackdepth integer_fromboolean integer_lte exec_do*times () boolean_invert_first_then_and boolean_dup_times print_exec (exec_dup (integer_max -17 integer_mod integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4 integer_mult) integer_lte integer_max exec_s () (exec_while (integer_gt) integer_empty boolean_and) (integer_dup_times) exec_stackdepth boolean_yankdup)) boolean_invert_second_then_and exec_yank boolean_invert_second_then_and boolean_stackdepth exec_do*while (integer_gte integer_lt exec_yankdup exec_when (boolean_eq)) integer_rot exec_pop ()) (exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub) () boolean_dup_items integer_rot exec_pop ()) boolean_invert_second_then_and integer_gt boolean_stackdepth exec_do*while () exec_when (integer_dup exec_yankdup exec_when (boolean_eq)) exec_y_when_autoconstructing (exec_pop ()) integer_inc integer_yank integer_inc exec_pop (boolean_invert_second_then_and boolean_dup_times) boolean_eq integer_sub exec_do*while (boolean_eq boolean_and) integer_shove in3 -58 integer_gt integer_pop boolean_invert_second_then_and exec_shove () boolean_dup integer_dup boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer boolean_yankdup exec_do*range ()))
Zero cases best errors: [0 0 0 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 153
Percent parens: 0.209
--- Lexicase Population Statistics ---
Count of elite individuals by case: (237 641 466 152 12 474 72 238 164 448)
Population mean number of elite cases: 2.90
Count of perfect (error zero) individuals by case: (237 641 466 152 12 474 72 238 164 448)
Population mean number of perfect (error zero) cases: 2.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 2, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gt} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mult} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_boolean_271} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_pop} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Best program: (exec_dup_times () exec_yank boolean_yankdup boolean_dup in3 exec_y_when_autoconstructing (exec_pop (exec_if (boolean_stackdepth exec_dup_items integer_yankdup) (exec_rot (exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean integer_yank integer_add) () exec_while (integer_gt print_newline exec_dup (integer_empty integer_yankdup integer_fromboolean integer_mult) in4) exec_while (boolean_dup_times exec_yank) boolean_xor exec_if (in4 boolean_empty in4 integer_mult) (integer_lte exec_do*while (exec_k_when_autoconstructing (exec_do*range (integer_gt) exec_y_when_autoconstructing (boolean_and) integer_lte exec_shove () exec_s (exec_do*range (in4 exec_y_when_autoconstructing (boolean_and)) boolean_eq) (boolean_invert_second_then_and tag_boolean_271 boolean_eq) (integer_sub)) (boolean_dup_items boolean_eq boolean_and boolean_dup_items boolean_eq boolean_and integer_shove integer_yank -58 integer_gt boolean_dup) boolean_invert_second_then_and integer_min) boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items integer_dup boolean_empty) integer_dup tag_boolean_742 exec_dup_items boolean_empty in1) (in3 boolean_eq boolean_and integer_shove in3 exec_yankdup exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub) () boolean_dup_items exec_pop (boolean_invert_second_then_and boolean_dup_times exec_pop () integer_sub)) boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) boolean_invert_second_then_and exec_shove () boolean_dup integer_dup integer_shove) integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer) boolean_yankdup boolean_dup)
Errors: [0 0 0 1 1 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 124
Size: 157
Percent parens: 0.210
--- Population Statistics ---
Average total errors in population: 7.096
Median total errors in population: 7
Error averages by case: (0.763 0.359 0.534 0.848 0.988 0.526 0.928 0.762 0.836 0.552)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 94.584
Average program size in population (points): 117.225
Average percent parens in population: 0.192
Minimum age in population: 33.46186065673828
Maximum age in population: 39.54514718055725
Average age in population: 37.66793716144562
Median age in population: 37.76863658428192
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 57
Genome diversity (% unique genomes):	 0.854
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.854
Total error diversity:				 0.007
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.095
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 23345889
--- Timings ---
Current time: 1559582845340 milliseconds
Total Time:          85.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        46.7 seconds, 54.7%
Fitness Testing:     19.5 seconds, 22.8%
Report:              19.1 seconds, 22.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 544
Test mean error for best: 0.54400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_602} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mult} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 2, :instruction in1} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Lexicase best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup integer_flush) boolean_and integer_flush boolean_and in2 exec_eq exec_pop (tagged_602 integer_yankdup) exec_rot (exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean integer_yank integer_add) (exec_while (boolean_dup_times print_newline exec_dup (integer_empty integer_yankdup integer_fromboolean integer_mult) in4) exec_while (boolean_dup_times print_exec (boolean_flush integer_max -17 integer_sub integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4 boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth boolean_stackdepth exec_do*while (integer_gte boolean_invert_second_then_and exec_y_when_autoconstructing (exec_do*count (exec_when (exec_when (in1)) exec_y_when_autoconstructing (exec_pop ()) boolean_dup integer_yank integer_inc) boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub) boolean_dup_items boolean_and boolean_and integer_shove in3 -58 integer_gt boolean_dup) boolean_invert_second_then_and) integer_gt boolean_dup) (boolean_invert_second_then_and integer_min) (boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4) in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Lexicase best errors: [0 0 0 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 117
Percent parens: 0.179
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_602} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mult} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 2, :instruction in1} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Zero cases best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup integer_flush) boolean_and integer_flush boolean_and in2 exec_eq exec_pop (tagged_602 integer_yankdup) exec_rot (exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean integer_yank integer_add) (exec_while (boolean_dup_times print_newline exec_dup (integer_empty integer_yankdup integer_fromboolean integer_mult) in4) exec_while (boolean_dup_times print_exec (boolean_flush integer_max -17 integer_sub integer_dup_items exec_yank) boolean_xor boolean_yank boolean_empty in4 boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth boolean_stackdepth exec_do*while (integer_gte boolean_invert_second_then_and exec_y_when_autoconstructing (exec_do*count (exec_when (exec_when (in1)) exec_y_when_autoconstructing (exec_pop ()) boolean_dup integer_yank integer_inc) boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub) boolean_dup_items boolean_and boolean_and integer_shove in3 -58 integer_gt boolean_dup) boolean_invert_second_then_and) integer_gt boolean_dup) (boolean_invert_second_then_and integer_min) (boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4) in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Zero cases best errors: [0 0 0 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 117
Percent parens: 0.179
--- Lexicase Population Statistics ---
Count of elite individuals by case: (425 705 429 96 101 228 435 447 438 82)
Population mean number of elite cases: 3.39
Count of perfect (error zero) individuals by case: (425 705 429 96 101 228 435 447 438 82)
Population mean number of perfect (error zero) cases: 3.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 3, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_sub} {:close 0, :instruction in2} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult boolean_empty integer_add integer_yankdup integer_flush boolean_and in2 exec_eq exec_pop () in2 exec_dup (integer_max) -17 integer_mod integer_dup_items exec_yank boolean_xor boolean_yank boolean_empty boolean_yankdup integer_mult integer_lte integer_max exec_s (exec_do*range (boolean_dup_items) exec_y_when_autoconstructing () boolean_and) (integer_stackdepth) (exec_stackdepth boolean_yankdup) boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth exec_do*while () boolean_yankdup boolean_invert_second_then_and boolean_invert_second_then_and boolean_stackdepth boolean_stackdepth exec_do*while (integer_gte boolean_invert_second_then_and integer_inc exec_when (boolean_eq integer_sub)) boolean_dup_items boolean_eq boolean_and integer_shove boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt exec_pop (boolean_invert_second_then_and integer_sub) in2 boolean_yankdup exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup boolean_invert_second_then_and integer_min boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Errors: [0 0 0 1 1 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 96
Size: 110
Percent parens: 0.127
--- Population Statistics ---
Average total errors in population: 6.614
Median total errors in population: 6
Error averages by case: (0.575 0.295 0.571 0.904 0.899 0.772 0.565 0.553 0.562 0.918)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 95.18
Average program size in population (points): 118.241
Average percent parens in population: 0.195
Minimum age in population: 34.46186065673828
Maximum age in population: 41.08703768253326
Average age in population: 39.14037156912684
Median age in population: 39.22323863208294
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.916
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.913
Total error diversity:				 0.007
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.097
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 24041034
--- Timings ---
Current time: 1559582848571 milliseconds
Total Time:          88.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.5 seconds, 54.9%
Fitness Testing:     20.0 seconds, 22.7%
Report:              19.7 seconds, 22.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 544
Test mean error for best: 0.54400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_exec} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup_times} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (exec_k_when_autoconstructing () (exec_yank boolean_yankdup boolean_dup in3 exec_y_when_autoconstructing (exec_pop (exec_if (boolean_stackdepth boolean_dup_times) (integer_yankdup) exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean integer_yank integer_add) (exec_while (integer_add) exec_while (boolean_dup_times print_newline exec_dup (integer_empty integer_yankdup integer_fromboolean print_exec () in4) exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_sub integer_dup_items exec_dup (integer_max -17 integer_mod integer_add) exec_while (boolean_dup_times print_exec (exec_dup (boolean_eq)) integer_dup exec_yankdup exec_when (boolean_eq)) integer_min exec_pop ()) integer_inc integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times integer_yank exec_do*times () exec_pop (integer_lte) boolean_dup_times integer_dup_times) integer_sub)) boolean_dup_items boolean_invert_first_then_and boolean_and integer_shove in3 -58 integer_gt boolean_dup) boolean_invert_second_then_and exec_shove (boolean_dup_items boolean_eq boolean_and integer_shove in3) -58 integer_gt boolean_dup) boolean_invert_second_then_and integer_min) boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4) in3 exec_do*times (boolean_rot print_integer boolean_yankdup))
Lexicase best errors: [1 1 1 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 128
Percent parens: 0.219
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_exec} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup_times} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 1, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (exec_k_when_autoconstructing () (exec_yank boolean_yankdup boolean_dup in3 exec_y_when_autoconstructing (exec_pop (exec_if (boolean_stackdepth boolean_dup_times) (integer_yankdup) exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean integer_yank integer_add) (exec_while (integer_add) exec_while (boolean_dup_times print_newline exec_dup (integer_empty integer_yankdup integer_fromboolean print_exec () in4) exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_sub integer_dup_items exec_dup (integer_max -17 integer_mod integer_add) exec_while (boolean_dup_times print_exec (exec_dup (boolean_eq)) integer_dup exec_yankdup exec_when (boolean_eq)) integer_min exec_pop ()) integer_inc integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times integer_yank exec_do*times () exec_pop (integer_lte) boolean_dup_times integer_dup_times) integer_sub)) boolean_dup_items boolean_invert_first_then_and boolean_and integer_shove in3 -58 integer_gt boolean_dup) boolean_invert_second_then_and exec_shove (boolean_dup_items boolean_eq boolean_and integer_shove in3) -58 integer_gt boolean_dup) boolean_invert_second_then_and integer_min) boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4) in3 exec_do*times (boolean_rot print_integer boolean_yankdup))
Zero cases best errors: [1 1 1 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 128
Percent parens: 0.219
--- Lexicase Population Statistics ---
Count of elite individuals by case: (49 13 341 12 543 480 400 468 489 343)
Population mean number of elite cases: 3.14
Count of perfect (error zero) individuals by case: (49 13 341 12 543 480 400 468 489 343)
Population mean number of perfect (error zero) cases: 3.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yankdup})
Best program: (exec_k_when_autoconstructing () (exec_yank boolean_yankdup boolean_dup exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult) exec_dup_times (exec_empty integer_yankdup) integer_flush exec_y_when_autoconstructing (in2 exec_eq) exec_pop (exec_when (boolean_yank) exec_rot (tag_integer_693 integer_shove integer_dup_times integer_empty) (integer_sub in1 integer_empty integer_yankdup integer_fromboolean integer_fromboolean) (integer_add) exec_while (boolean_flush print_exec (exec_dup (integer_max -17 integer_mod integer_dup_items exec_yank exec_yankdup boolean_yank exec_yankdup exec_when (boolean_eq)) integer_dup exec_yankdup exec_when () boolean_eq)) exec_y_when_autoconstructing (exec_pop ()) integer_inc integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) integer_sub boolean_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup boolean_empty exec_shove () boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in1 in3 exec_do*times (boolean_rot print_integer) boolean_yankdup)
Errors: [1 1 0 1 1 0 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 82
Size: 102
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 6.862
Median total errors in population: 6
Error averages by case: (0.951 0.987 0.659 0.988 0.457 0.52 0.6 0.532 0.511 0.657)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 92.368
Average program size in population (points): 114.723
Average percent parens in population: 0.194
Minimum age in population: 35.46186065673828
Maximum age in population: 42.70451779663563
Average age in population: 40.84491104248166
Median age in population: 40.93866296112537
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 27
Genome diversity (% unique genomes):	 0.831
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.829
Total error diversity:				 0.006
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.114
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 24744953
--- Timings ---
Current time: 1559582851625 milliseconds
Total Time:          91.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.3 seconds, 54.9%
Fitness Testing:     20.6 seconds, 22.5%
Report:              20.6 seconds, 22.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 534
Test mean error for best: 0.53400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -53                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 0                  
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -1                 
Correct output: -87                 | Program output: -55                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -3                 
Correct output: -54                 | Program output: -47                
Correct output: -95                 | Program output: 56                 
Correct output: -97                 | Program output: -21                
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: 95                 
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -8                 
Correct output: -90                 | Program output: -1                 
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -11                
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -4                 
Correct output: -34                 | Program output: 79                 
Correct output: -17                 | Program output: 97                 
Correct output: -82                 | Program output: -70                
Correct output: -49                 | Program output: -16                
Correct output: -54                 | Program output: -36                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_602} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_and} {:close 2, :instruction integer_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup})
Lexicase best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup integer_flush) boolean_and integer_flush boolean_and in2 exec_eq exec_pop (tagged_602 integer_yankdup) integer_empty integer_sub integer_shove integer_empty integer_yankdup integer_fromboolean integer_yank integer_add exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_mod integer_dup_items exec_pop () boolean_xor boolean_yank boolean_empty in4 exec_do*while (boolean_yank integer_dup_times exec_do*range (integer_gt) exec_y_when_autoconstructing (exec_y_when_autoconstructing (boolean_and integer_stackdepth) exec_stackdepth boolean_and) integer_stackdepth)) exec_stackdepth) integer_fromboolean exec_dup (integer_max -17 integer_sub integer_dup_items boolean_yankdup in3 boolean_eq) integer_sub) exec_pop (exec_when () integer_dup exec_yankdup exec_when (boolean_eq)) boolean_dup boolean_dup_times boolean_eq integer_sub boolean_dup_items boolean_eq boolean_and integer_shove boolean_dup -58 integer_gt boolean_dup exec_dup_items boolean_yank in1 in2 exec_do*times (exec_empty print_integer) exec_y (boolean_dup))
Lexicase best errors: [0 0 1 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 105
Percent parens: 0.162
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_602} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_and} {:close 2, :instruction integer_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup})
Zero cases best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup integer_flush) boolean_and integer_flush boolean_and in2 exec_eq exec_pop (tagged_602 integer_yankdup) integer_empty integer_sub integer_shove integer_empty integer_yankdup integer_fromboolean integer_yank integer_add exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_mod integer_dup_items exec_pop () boolean_xor boolean_yank boolean_empty in4 exec_do*while (boolean_yank integer_dup_times exec_do*range (integer_gt) exec_y_when_autoconstructing (exec_y_when_autoconstructing (boolean_and integer_stackdepth) exec_stackdepth boolean_and) integer_stackdepth)) exec_stackdepth) integer_fromboolean exec_dup (integer_max -17 integer_sub integer_dup_items boolean_yankdup in3 boolean_eq) integer_sub) exec_pop (exec_when () integer_dup exec_yankdup exec_when (boolean_eq)) boolean_dup boolean_dup_times boolean_eq integer_sub boolean_dup_items boolean_eq boolean_and integer_shove boolean_dup -58 integer_gt boolean_dup exec_dup_items boolean_yank in1 in2 exec_do*times (exec_empty print_integer) exec_y (boolean_dup))
Zero cases best errors: [0 0 1 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 105
Percent parens: 0.162
--- Lexicase Population Statistics ---
Count of elite individuals by case: (363 356 556 364 364 20 140 507 20 138)
Population mean number of elite cases: 2.83
Count of perfect (error zero) individuals by case: (363 356 556 364 364 20 140 507 20 138)
Population mean number of perfect (error zero) cases: 2.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_602} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_and} {:close 2, :instruction integer_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 1, :instruction boolean_eq} {:close 2, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_yankdup} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup})
Best program: (exec_eq integer_dup_items integer_yankdup integer_dup_items integer_mult exec_dup_times (exec_empty integer_yankdup integer_flush) boolean_and in2 exec_eq exec_pop (tagged_602 integer_yankdup) integer_empty integer_sub integer_shove integer_empty integer_yankdup integer_fromboolean integer_yank integer_add exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_mod integer_dup_items exec_pop () boolean_xor boolean_yank boolean_empty in4 exec_do*while (boolean_yank integer_dup_times exec_do*range (integer_gt) exec_y_when_autoconstructing (exec_y_when_autoconstructing (boolean_and integer_stackdepth) exec_stackdepth boolean_and) integer_stackdepth)) exec_stackdepth) integer_fromboolean exec_dup (integer_max -17 integer_sub integer_dup_items boolean_yankdup in3 boolean_eq) integer_sub) exec_pop (exec_when () integer_dup exec_yankdup exec_when (boolean_eq)) boolean_dup boolean_dup_times boolean_yankdup integer_sub boolean_dup_items boolean_eq boolean_and integer_shove boolean_dup -58 integer_gt boolean_dup exec_dup_items boolean_yank in1 in2 exec_do*times (exec_empty print_integer) exec_y (boolean_dup))
Errors: [0 0 1 0 0 1 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 86
Size: 103
Percent parens: 0.165
--- Population Statistics ---
Average total errors in population: 7.172
Median total errors in population: 8
Error averages by case: (0.637 0.644 0.444 0.636 0.636 0.98 0.86 0.493 0.98 0.862)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 93.429
Average program size in population (points): 116.202
Average percent parens in population: 0.195
Minimum age in population: 39.14289379119873
Maximum age in population: 44.39501731097698
Average age in population: 42.52533769371361
Median age in population: 42.64195386692882
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 35
Genome diversity (% unique genomes):	 0.859
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.855
Total error diversity:				 0.008
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.097
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 25855501
--- Timings ---
Current time: 1559582855123 milliseconds
Total Time:          94.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.1 seconds, 54.9%
Fitness Testing:     21.4 seconds, 22.6%
Report:              21.3 seconds, 22.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 379
Test mean error for best: 0.37900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 83                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 78                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 26                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -95                 | Program output: 34                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: -55                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: -42                
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -25                
Correct output: -5                  | Program output: 19                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -54                
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -63                 | Program output: -63                
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_602} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 1, :instruction integer_mult} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Lexicase best program: (exec_eq exec_yank boolean_yankdup boolean_dup in3 boolean_yankdup print_integer exec_if (boolean_stackdepth integer_gt) (integer_yankdup) integer_flush boolean_and integer_flush boolean_and in2 exec_eq exec_pop (tagged_602 integer_yankdup) exec_rot (exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean boolean_flush integer_add) (integer_mult) in4) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_rot integer_dup_items exec_yank) boolean_xor exec_when (boolean_empty in4 integer_mult in4 integer_mult integer_lte integer_mult) integer_lte integer_max exec_s (exec_do*range (in4) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) exec_noop) (exec_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) integer_eq) integer_gt boolean_dup) boolean_invert_second_then_and integer_min) (boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4) in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Lexicase best errors: [0 0 1 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 114
Percent parens: 0.193
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_602} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 1, :instruction integer_mult} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Zero cases best program: (exec_eq exec_yank boolean_yankdup boolean_dup in3 boolean_yankdup print_integer exec_if (boolean_stackdepth integer_gt) (integer_yankdup) integer_flush boolean_and integer_flush boolean_and in2 exec_eq exec_pop (tagged_602 integer_yankdup) exec_rot (exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean boolean_flush integer_add) (integer_mult) in4) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_rot integer_dup_items exec_yank) boolean_xor exec_when (boolean_empty in4 integer_mult in4 integer_mult integer_lte integer_mult) integer_lte integer_max exec_s (exec_do*range (in4) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) exec_noop) (exec_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) integer_eq) integer_gt boolean_dup) boolean_invert_second_then_and integer_min) (boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4) in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Zero cases best errors: [0 0 1 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 114
Percent parens: 0.193
--- Lexicase Population Statistics ---
Count of elite individuals by case: (186 825 415 774 396 395 570 575 40 572)
Population mean number of elite cases: 4.75
Count of perfect (error zero) individuals by case: (186 825 415 774 396 395 570 575 40 572)
Population mean number of perfect (error zero) cases: 4.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_602} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 1, :instruction integer_mult} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Best program: (exec_eq exec_yank boolean_yankdup boolean_dup in3 boolean_yankdup print_integer exec_if (boolean_stackdepth integer_gt) (integer_yankdup) integer_flush boolean_and integer_flush boolean_and in2 exec_eq exec_pop (tagged_602 integer_yankdup) exec_rot (exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean boolean_flush integer_add) (integer_mult) in4) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_rot integer_dup_items exec_yank) boolean_xor exec_when (boolean_empty in4 integer_mult in4 integer_mult integer_lte integer_mult) integer_lte integer_max exec_s (exec_do*range (in4) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) exec_noop) (exec_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) integer_eq) integer_gt boolean_dup) boolean_invert_second_then_and integer_min) (boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4) in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Errors: [0 0 1 0 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 92
Size: 114
Percent parens: 0.193
--- Population Statistics ---
Average total errors in population: 5.252
Median total errors in population: 4
Error averages by case: (0.814 0.175 0.585 0.226 0.604 0.605 0.43 0.425 0.96 0.428)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 90.724
Average program size in population (points): 111.208
Average percent parens in population: 0.183
Minimum age in population: 41.01323369145393
Maximum age in population: 46.21597854793072
Average age in population: 44.45862076793611
Median age in population: 44.46797792613506
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 27
Genome diversity (% unique genomes):	 0.836
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.829
Total error diversity:				 0.009
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.084
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 26875247
--- Timings ---
Current time: 1559582858569 milliseconds
Total Time:          98.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.0 seconds, 54.8%
Fitness Testing:     22.2 seconds, 22.6%
Report:              22.2 seconds, 22.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 379
Test mean error for best: 0.37900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 83                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 78                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 26                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -95                 | Program output: 34                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: -55                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: -42                
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -25                
Correct output: -5                  | Program output: 19                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -54                
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -63                 | Program output: -63                
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_602} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 1, :instruction integer_mult} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Lexicase best program: (exec_eq exec_yank boolean_yankdup boolean_dup in3 boolean_yankdup print_integer exec_if (boolean_stackdepth integer_gt) (integer_yankdup integer_flush) boolean_and integer_flush boolean_and in2 exec_eq exec_pop (tagged_602 integer_yankdup) exec_rot (exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean boolean_flush integer_add) (integer_mult) in4) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_rot integer_dup_items exec_yank) boolean_xor exec_when (boolean_empty in4 integer_mult in4 integer_mult integer_lte integer_mult) integer_lte integer_max exec_s (exec_do*range (in4) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) exec_noop) (exec_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) integer_eq) integer_gt boolean_dup) boolean_invert_second_then_and integer_min) (boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4) in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Lexicase best errors: [1 0 0 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 114
Percent parens: 0.193
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_602} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 1, :instruction integer_mult} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Zero cases best program: (exec_eq exec_yank boolean_yankdup boolean_dup in3 boolean_yankdup print_integer exec_if (boolean_stackdepth integer_gt) (integer_yankdup integer_flush) boolean_and integer_flush boolean_and in2 exec_eq exec_pop (tagged_602 integer_yankdup) exec_rot (exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean boolean_flush integer_add) (integer_mult) in4) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_rot integer_dup_items exec_yank) boolean_xor exec_when (boolean_empty in4 integer_mult in4 integer_mult integer_lte integer_mult) integer_lte integer_max exec_s (exec_do*range (in4) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) exec_noop) (exec_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) integer_eq) integer_gt boolean_dup) boolean_invert_second_then_and integer_min) (boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4) in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Zero cases best errors: [1 0 0 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 114
Percent parens: 0.193
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 544 543 269 116 420 542 788 540 572)
Population mean number of elite cases: 4.34
Count of perfect (error zero) individuals by case: (1 544 543 269 116 420 542 788 540 572)
Population mean number of perfect (error zero) cases: 4.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_602} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 1, :instruction integer_mult} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Best program: (exec_eq exec_yank boolean_yankdup boolean_dup in3 boolean_yankdup print_integer exec_if (boolean_stackdepth integer_gt) (integer_yankdup) integer_flush boolean_and integer_flush boolean_and in2 exec_eq exec_pop (tagged_602 integer_yankdup) exec_rot (exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean boolean_flush integer_add) (integer_mult) in4) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_rot integer_dup_items exec_yank) boolean_xor exec_when (boolean_empty in4 integer_mult in4 integer_mult integer_lte integer_mult) integer_lte integer_max exec_s (exec_do*range (in4) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) exec_noop) (exec_dup_items boolean_eq boolean_stackdepth integer_shove in3 -58 integer_gt boolean_dup) integer_eq) integer_gt boolean_dup) boolean_invert_second_then_and integer_min) (boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4) in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Errors: [1 0 0 1 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 92
Size: 114
Percent parens: 0.193
--- Population Statistics ---
Average total errors in population: 5.665
Median total errors in population: 4
Error averages by case: (0.999 0.456 0.457 0.731 0.884 0.58 0.458 0.212 0.46 0.428)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 90.759
Average program size in population (points): 111.778
Average percent parens in population: 0.188
Minimum age in population: 43.77426611632109
Maximum age in population: 47.565085882321
Average age in population: 46.42987664295174
Median age in population: 46.33901185076684
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 140
Genome diversity (% unique genomes):	 0.837
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 143
Syntactic diversity (% unique Push programs):	 0.832
Total error diversity:				 0.008
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.103
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 28160961
--- Timings ---
Current time: 1559582862033 milliseconds
Total Time:         102.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.8 seconds, 54.7%
Fitness Testing:     23.2 seconds, 22.7%
Report:              22.9 seconds, 22.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 379
Test mean error for best: 0.37900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 83                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 78                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 26                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -95                 | Program output: 34                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: -55                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: -42                
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -25                
Correct output: -5                  | Program output: 19                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -54                
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -63                 | Program output: -63                
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_602} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 1, :instruction integer_mult} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Lexicase best program: (exec_eq exec_yank boolean_yankdup boolean_dup in3 boolean_yankdup print_integer exec_if (boolean_stackdepth integer_gt) (integer_yankdup) integer_flush boolean_and integer_flush boolean_and in2 exec_eq exec_pop (tagged_602 integer_yankdup) exec_rot (exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean boolean_flush integer_add) (integer_mult) in4) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_rot integer_dup_items exec_yank) boolean_xor exec_when (boolean_empty in4 integer_mult in4 integer_mult integer_lte integer_mult) integer_lte integer_max exec_s (exec_do*range (in4) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) exec_noop) (exec_dup_items boolean_eq boolean_stackdepth integer_shove in3 -58 integer_gt boolean_dup) integer_eq) integer_gt boolean_dup) boolean_invert_second_then_and integer_min) (boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4) in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 114
Percent parens: 0.193
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_602} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 1, :instruction integer_mult} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Zero cases best program: (exec_eq exec_yank boolean_yankdup boolean_dup in3 boolean_yankdup print_integer exec_if (boolean_stackdepth integer_gt) (integer_yankdup) integer_flush boolean_and integer_flush boolean_and in2 exec_eq exec_pop (tagged_602 integer_yankdup) exec_rot (exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean boolean_flush integer_add) (integer_mult) in4) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_rot integer_dup_items exec_yank) boolean_xor exec_when (boolean_empty in4 integer_mult in4 integer_mult integer_lte integer_mult) integer_lte integer_max exec_s (exec_do*range (in4) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) exec_noop) (exec_dup_items boolean_eq boolean_stackdepth integer_shove in3 -58 integer_gt boolean_dup) integer_eq) integer_gt boolean_dup) boolean_invert_second_then_and integer_min) (boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4) in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 114
Percent parens: 0.193
--- Lexicase Population Statistics ---
Count of elite individuals by case: (328 391 345 722 397 394 724 442 20 393)
Population mean number of elite cases: 4.16
Count of perfect (error zero) individuals by case: (328 391 345 722 397 394 724 442 20 393)
Population mean number of perfect (error zero) cases: 4.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_602} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 1, :instruction integer_mult} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Best program: (exec_eq exec_yank boolean_yankdup boolean_dup in3 boolean_yankdup print_integer exec_if (exec_stackdepth integer_gt) (integer_yankdup) integer_flush boolean_and integer_flush boolean_and in2 exec_eq exec_pop (tagged_602 integer_yankdup) exec_rot (exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean boolean_flush integer_add) (integer_mult) in4) (exec_while (boolean_dup_times print_exec (exec_dup () integer_max -17 integer_rot integer_dup_items exec_yank) boolean_xor exec_when (boolean_empty in4 integer_mult in4 integer_mult integer_lte integer_mult) integer_lte integer_max exec_s (exec_do*range (in4 exec_y_when_autoconstructing (boolean_and) integer_stackdepth) exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) exec_noop) (exec_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) (integer_eq) integer_gt boolean_dup) boolean_invert_second_then_and integer_min) (boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4) in3 exec_do*times (boolean_rot print_integer boolean_yankdup boolean_dup))
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 92
Size: 114
Percent parens: 0.193
--- Population Statistics ---
Average total errors in population: 5.844
Median total errors in population: 6
Error averages by case: (0.672 0.609 0.655 0.278 0.603 0.606 0.276 0.558 0.98 0.607)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 90.232
Average program size in population (points): 112.031
Average percent parens in population: 0.194
Minimum age in population: 44.77426611632109
Maximum age in population: 49.31451937928796
Average age in population: 48.03493084953632
Median age in population: 48.1052550971508
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 57
Genome diversity (% unique genomes):	 0.872
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.868
Total error diversity:				 0.01
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.136
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 29477491
--- Timings ---
Current time: 1559582865419 milliseconds
Total Time:         105.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.6 seconds, 54.6%
Fitness Testing:     24.1 seconds, 22.9%
Report:              23.6 seconds, 22.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 269
Test mean error for best: 0.26900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -13                
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 83                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 78                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 26                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -95                 | Program output: 34                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: -55                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -93                
Correct output: -96                 | Program output: -96                
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -62                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -54                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: -42                
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -25                
Correct output: -5                  | Program output: 19                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -54                
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -63                 | Program output: -63                
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_602} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 1, :instruction integer_mult} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Lexicase best program: (exec_eq exec_yank boolean_yankdup boolean_dup in3 boolean_yankdup print_integer exec_if (boolean_stackdepth integer_gt) (integer_yankdup) integer_flush boolean_and integer_flush boolean_and in2 exec_eq exec_pop (tagged_602 integer_yankdup) exec_rot (exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean boolean_flush integer_add) (integer_mult) in4) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_rot integer_dup_items exec_yank) boolean_xor exec_when (boolean_empty in4 integer_mult in4 integer_mult integer_lte integer_mult) integer_lte integer_max exec_s (exec_do*range (in4) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) exec_noop) (exec_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) integer_eq) integer_gt integer_mod) boolean_invert_second_then_and integer_min) (boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4) in3 exec_do*times (integer_min print_integer boolean_yankdup boolean_dup))
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 114
Percent parens: 0.193
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_602} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 1, :instruction integer_mult} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Zero cases best program: (exec_eq exec_yank boolean_yankdup boolean_dup in3 boolean_yankdup print_integer exec_if (boolean_stackdepth integer_gt) (integer_yankdup) integer_flush boolean_and integer_flush boolean_and in2 exec_eq exec_pop (tagged_602 integer_yankdup) exec_rot (exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean boolean_flush integer_add) (integer_mult) in4) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_rot integer_dup_items exec_yank) boolean_xor exec_when (boolean_empty in4 integer_mult in4 integer_mult integer_lte integer_mult) integer_lte integer_max exec_s (exec_do*range (in4) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) exec_noop) (exec_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) integer_eq) integer_gt integer_mod) boolean_invert_second_then_and integer_min) (boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4) in3 exec_do*times (integer_min print_integer boolean_yankdup boolean_dup))
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 114
Percent parens: 0.193
--- Lexicase Population Statistics ---
Count of elite individuals by case: (8 73 580 816 814 442 446 580 446 446)
Population mean number of elite cases: 4.65
Count of perfect (error zero) individuals by case: (8 73 580 816 814 442 446 580 446 446)
Population mean number of perfect (error zero) cases: 4.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_602} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 1, :instruction integer_mult} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 1, :instruction integer_mult} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Best program: (exec_eq boolean_xor boolean_yankdup boolean_dup in3 boolean_yankdup print_integer exec_if (boolean_stackdepth integer_gt) (integer_yankdup) integer_flush boolean_yank integer_flush boolean_and in2 exec_eq exec_pop (tagged_602 integer_yankdup) exec_rot (exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean boolean_flush integer_add) (integer_mult) in4) (exec_while (boolean_dup_times print_exec (exec_dup (boolean_flush integer_add) integer_mult) in4) exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_rot integer_dup_items exec_yank) boolean_xor exec_when (boolean_empty in4 integer_mult in4 integer_mult integer_lte integer_mult) integer_lte integer_max exec_s (exec_do*range (in4) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) exec_noop) (exec_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) integer_eq) integer_gt integer_mod) boolean_invert_second_then_and integer_min) (boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4) in3 exec_do*times (integer_min print_integer boolean_yankdup boolean_dup))
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 100
Size: 125
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 5.349
Median total errors in population: 6
Error averages by case: (0.992 0.927 0.42 0.184 0.186 0.558 0.554 0.42 0.554 0.554)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 92.124
Average program size in population (points): 114.693
Average percent parens in population: 0.197
Minimum age in population: 47.75013620406389
Maximum age in population: 51.10577345639467
Average age in population: 49.51713592549926
Median age in population: 49.6052550971508
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 72
Genome diversity (% unique genomes):	 0.829
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 77
Syntactic diversity (% unique Push programs):	 0.827
Total error diversity:				 0.01
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 30584090
--- Timings ---
Current time: 1559582868783 milliseconds
Total Time:         108.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.5 seconds, 54.7%
Fitness Testing:     24.9 seconds, 22.9%
Report:              24.3 seconds, 22.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 215
Test mean error for best: 0.21500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -13                
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 26                 
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -95                 | Program output: 21                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: -55                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -93                
Correct output: -96                 | Program output: -96                
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -62                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -54                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: -42                
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 74                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -25                
Correct output: -5                  | Program output: 17                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -54                
Correct output: -15                 | Program output: 3                  
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -63                 | Program output: -63                
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_602} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 1, :instruction integer_mult} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Lexicase best program: (exec_eq exec_yank boolean_yankdup boolean_dup in3 boolean_yankdup print_integer exec_if (boolean_stackdepth integer_gt) (integer_yankdup) integer_flush boolean_and integer_flush boolean_and in2 exec_eq exec_pop (tagged_602 integer_yankdup) exec_rot (exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean boolean_flush integer_add) (integer_mult) in4) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_rot integer_dup_items exec_yank) boolean_xor exec_when (boolean_empty in4 integer_mult in4 integer_mult integer_lte integer_mult) integer_lte integer_max exec_s (exec_do*range (in4) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) exec_noop) (exec_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) integer_eq) integer_gt integer_mod) boolean_invert_second_then_and integer_min) (boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4) in3 boolean_yank integer_min print_integer boolean_yankdup boolean_dup)
Lexicase best errors: [1 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 113
Percent parens: 0.186
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_602} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 1, :instruction integer_mult} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Zero cases best program: (exec_eq exec_yank boolean_yankdup boolean_dup in3 boolean_yankdup print_integer exec_if (boolean_stackdepth integer_gt) (integer_yankdup) integer_flush boolean_and integer_flush boolean_and in2 exec_eq exec_pop (tagged_602 integer_yankdup) exec_rot (exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean boolean_flush integer_add) (integer_mult) in4) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_rot integer_dup_items exec_yank) boolean_xor exec_when (boolean_empty in4 integer_mult in4 integer_mult integer_lte integer_mult) integer_lte integer_max exec_s (exec_do*range (in4) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) exec_noop) (exec_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) integer_eq) integer_gt integer_mod) boolean_invert_second_then_and integer_min) (boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4) in3 boolean_yank integer_min print_integer boolean_yankdup boolean_dup)
Zero cases best errors: [1 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 113
Percent parens: 0.186
--- Lexicase Population Statistics ---
Count of elite individuals by case: (146 825 494 494 87 810 8 6 8 519)
Population mean number of elite cases: 3.40
Count of perfect (error zero) individuals by case: (146 825 494 494 87 810 8 6 8 519)
Population mean number of perfect (error zero) cases: 3.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_602} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 1, :instruction integer_mult} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Best program: (exec_eq exec_yank boolean_yankdup boolean_dup in3 boolean_yankdup print_integer exec_if (boolean_stackdepth integer_gt) (integer_yankdup) integer_flush boolean_and integer_flush boolean_and in2 exec_eq exec_pop (tagged_602 integer_yankdup) exec_rot (exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean boolean_flush integer_add) (integer_mult) in4) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_rot integer_dup_items exec_yank) boolean_xor exec_when (boolean_empty in4 integer_mult in4 integer_mult integer_lte integer_mult) integer_lte integer_max exec_s (exec_do*range (in4) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) exec_noop) (exec_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) integer_eq) integer_gt integer_mod) boolean_invert_second_then_and integer_min) (boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4) in3 boolean_yank integer_min print_integer boolean_yankdup boolean_dup)
Errors: [1 0 0 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 92
Size: 113
Percent parens: 0.186
--- Population Statistics ---
Average total errors in population: 6.603
Median total errors in population: 6
Error averages by case: (0.854 0.175 0.506 0.506 0.913 0.19 0.992 0.994 0.992 0.481)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 93.569
Average program size in population (points): 116.483
Average percent parens in population: 0.197
Minimum age in population: 48.80800404306501
Maximum age in population: 52.46448792866431
Average age in population: 51.13222180230496
Median age in population: 50.94005047436804
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 176
Genome diversity (% unique genomes):	 0.776
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 176
Syntactic diversity (% unique Push programs):	 0.774
Total error diversity:				 0.008
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.122
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 31705761
--- Timings ---
Current time: 1559582871911 milliseconds
Total Time:         112.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.3 seconds, 54.7%
Fitness Testing:     25.7 seconds, 23.0%
Report:              24.9 seconds, 22.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 215
Test mean error for best: 0.21500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -13                
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 26                 
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -95                 | Program output: 21                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: -55                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -93                
Correct output: -96                 | Program output: -96                
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -62                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -54                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: -42                
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 74                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -25                
Correct output: -5                  | Program output: 17                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -54                
Correct output: -15                 | Program output: 3                  
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -63                 | Program output: -63                
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_602} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 1, :instruction integer_mult} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Lexicase best program: (exec_eq exec_yank boolean_yankdup exec_noop in3 boolean_yankdup print_integer exec_if (boolean_stackdepth integer_gt) (integer_yankdup) integer_flush boolean_and integer_flush boolean_and in2 exec_eq exec_pop (tagged_602 integer_yankdup) exec_rot (exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean boolean_flush integer_add) (integer_mult) in4) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_rot integer_dup_items exec_yank) boolean_xor exec_when (boolean_empty in4 integer_mult in4 integer_mult integer_lte integer_mult) integer_lte integer_max exec_s (exec_do*range (in4) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) exec_noop) (exec_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) integer_eq) integer_gt integer_mod) boolean_invert_second_then_and integer_min) (boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4) in3 boolean_yank integer_min print_integer boolean_yankdup boolean_dup)
Lexicase best errors: [0 0 1 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 113
Percent parens: 0.186
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_602} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 1, :instruction integer_mult} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Zero cases best program: (exec_eq exec_yank boolean_yankdup exec_noop in3 boolean_yankdup print_integer exec_if (boolean_stackdepth integer_gt) (integer_yankdup) integer_flush boolean_and integer_flush boolean_and in2 exec_eq exec_pop (tagged_602 integer_yankdup) exec_rot (exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean boolean_flush integer_add) (integer_mult) in4) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_rot integer_dup_items exec_yank) boolean_xor exec_when (boolean_empty in4 integer_mult in4 integer_mult integer_lte integer_mult) integer_lte integer_max exec_s (exec_do*range (in4) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) exec_noop) (exec_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) integer_eq) integer_gt integer_mod) boolean_invert_second_then_and integer_min) (boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4) in3 boolean_yank integer_min print_integer boolean_yankdup boolean_dup)
Zero cases best errors: [0 0 1 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 113
Percent parens: 0.186
--- Lexicase Population Statistics ---
Count of elite individuals by case: (401 435 196 428 496 553 435 339 553 501)
Population mean number of elite cases: 4.34
Count of perfect (error zero) individuals by case: (401 435 196 428 496 553 435 339 553 501)
Population mean number of perfect (error zero) cases: 4.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_602} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_804} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 1, :instruction integer_mult} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Best program: (exec_eq exec_yank boolean_xor boolean_dup in3 boolean_yankdup print_integer exec_if (boolean_stackdepth integer_gt) (integer_yankdup) integer_flush boolean_and integer_flush boolean_and in2 exec_eq exec_pop (tagged_602 integer_yankdup) exec_rot (exec_rot (tag_integer_804 in1 integer_empty integer_yankdup) (integer_fromboolean boolean_flush integer_add) (integer_mult) in4) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_rot integer_dup_items exec_yank) boolean_xor exec_when (boolean_empty in4 integer_mult in4 integer_mult integer_lte integer_mult) integer_lte integer_max exec_s (exec_do*range (in4) exec_y_when_autoconstructing (integer_eq) integer_stackdepth) (exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) exec_noop) (exec_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) integer_eq) integer_gt integer_mod) boolean_invert_second_then_and integer_min) (boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4) in3 boolean_yank integer_min print_integer boolean_yankdup boolean_dup)
Errors: [0 0 1 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 92
Size: 113
Percent parens: 0.186
--- Population Statistics ---
Average total errors in population: 5.663
Median total errors in population: 5
Error averages by case: (0.599 0.565 0.804 0.572 0.504 0.447 0.565 0.661 0.447 0.499)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 91.924
Average program size in population (points): 113.566
Average percent parens in population: 0.190
Minimum age in population: 50.94005047436804
Maximum age in population: 53.87664043938275
Average age in population: 52.48918429580773
Median age in population: 52.43582300143316
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 134
Genome diversity (% unique genomes):	 0.776
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 137
Syntactic diversity (% unique Push programs):	 0.772
Total error diversity:				 0.009
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.114
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 32457994
--- Timings ---
Current time: 1559582874739 milliseconds
Total Time:         114.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.1 seconds, 54.9%
Fitness Testing:     26.3 seconds, 22.9%
Report:              25.4 seconds, 22.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 248
Test mean error for best: 0.24800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -13                
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 83                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 78                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 26                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -71                
Correct output: -91                 | Program output: -91                
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: -55                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: -95                 | Program output: -10                
Correct output: -97                 | Program output: -21                
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: 82                 
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -20                
Correct output: -61                 | Program output: -30                
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -4                 
Correct output: -34                 | Program output: 72                 
Correct output: -17                 | Program output: 86                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -63                 | Program output: -63                
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_602} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 1, :instruction integer_mult} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Lexicase best program: (exec_eq exec_yank boolean_yankdup boolean_dup in3 boolean_yankdup print_integer exec_if (boolean_stackdepth integer_gt) (integer_yankdup) integer_flush boolean_and integer_flush boolean_and in2 exec_eq exec_pop (tagged_602 integer_yankdup) exec_rot (exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean boolean_flush integer_add) (integer_mult) in4) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_rot integer_dup_items exec_yank) boolean_xor exec_when (boolean_empty integer_mult in4 integer_mult integer_lte integer_mult) integer_lte integer_max exec_s (exec_do*range (in4) exec_y_when_autoconstructing (boolean_invert_second_then_and) integer_stackdepth) (exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) exec_noop) (exec_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) integer_eq) integer_gt integer_mod) boolean_invert_second_then_and integer_min) (boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4) in2 exec_do*times (integer_min print_integer boolean_yankdup boolean_dup))
Lexicase best errors: [0 1 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 113
Percent parens: 0.195
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_602} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 1, :instruction integer_mult} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Zero cases best program: (exec_eq exec_yank boolean_yankdup boolean_dup in3 boolean_yankdup print_integer exec_if (boolean_stackdepth integer_gt) (integer_yankdup) integer_flush boolean_and integer_flush boolean_and in2 exec_eq exec_pop (tagged_602 integer_yankdup) exec_rot (exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean boolean_flush integer_add) (integer_mult) in4) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_rot integer_dup_items exec_yank) boolean_xor exec_when (boolean_empty integer_mult in4 integer_mult integer_lte integer_mult) integer_lte integer_max exec_s (exec_do*range (in4) exec_y_when_autoconstructing (boolean_invert_second_then_and) integer_stackdepth) (exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) exec_noop) (exec_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) integer_eq) integer_gt integer_mod) boolean_invert_second_then_and integer_min) (boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4) in2 exec_do*times (integer_min print_integer boolean_yankdup boolean_dup))
Zero cases best errors: [0 1 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 113
Percent parens: 0.195
--- Lexicase Population Statistics ---
Count of elite individuals by case: (389 448 519 234 786 560 369 229 485 504)
Population mean number of elite cases: 4.52
Count of perfect (error zero) individuals by case: (389 448 519 234 786 560 369 229 485 504)
Population mean number of perfect (error zero) cases: 4.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_602} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 1, :instruction integer_mult} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Best program: (exec_eq exec_yank boolean_yankdup boolean_dup in3 boolean_yankdup print_integer exec_if (boolean_stackdepth integer_gt) (integer_yankdup) integer_flush boolean_and integer_flush boolean_and in2 exec_eq exec_pop (tagged_602 integer_yankdup) exec_rot (exec_rot (tag_integer_693 integer_yankdup) (exec_rot (exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean boolean_flush integer_add) (integer_mult) in4) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_rot integer_dup_items exec_yank) boolean_xor exec_when (boolean_empty in4 integer_mult in4 integer_mult integer_lte integer_mult) integer_lte integer_max exec_s (exec_do*range (in4) exec_y_when_autoconstructing (boolean_invert_second_then_and) integer_stackdepth) (exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) exec_noop) (exec_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) integer_eq) integer_gt integer_mod) boolean_invert_second_then_and integer_min) (boolean_dup integer_pop boolean_empty integer_dup boolean_yank exec_dup_items boolean_empty in4) in2 exec_do*times (integer_min print_integer boolean_yankdup boolean_dup)) ()) () ())
Errors: [0 1 0 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 96
Size: 124
Percent parens: 0.226
--- Population Statistics ---
Average total errors in population: 5.477
Median total errors in population: 6
Error averages by case: (0.611 0.552 0.481 0.766 0.214 0.44 0.631 0.771 0.515 0.496)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 91.966
Average program size in population (points): 113.616
Average percent parens in population: 0.190
Minimum age in population: 51.94005047436804
Maximum age in population: 55.43582300143316
Average age in population: 53.90660786168696
Median age in population: 53.93582300143316
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 66
Genome diversity (% unique genomes):	 0.854
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 69
Syntactic diversity (% unique Push programs):	 0.85
Total error diversity:				 0.009
Error (vector) diversity:			 0.04
Behavioral diversity:				 0.123
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 33065494
--- Timings ---
Current time: 1559582877810 milliseconds
Total Time:         117.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.0 seconds, 55.1%
Fitness Testing:     26.9 seconds, 22.8%
Report:              25.9 seconds, 21.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 215
Test mean error for best: 0.21500
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 1
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 1
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 1
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 1
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 1
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 1
Test Case  801 | Error: 1
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 1
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 1
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -13                
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 26                 
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -95                 | Program output: 21                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: -55                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -93                
Correct output: -96                 | Program output: -96                
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -62                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -54                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: -42                
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 74                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -25                
Correct output: -5                  | Program output: 17                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -54                
Correct output: -15                 | Program output: 3                  
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -63                 | Program output: -63                
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_602} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 1, :instruction integer_mult} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Lexicase best program: (exec_eq exec_yank boolean_yankdup boolean_dup in3 boolean_yankdup print_integer exec_if (boolean_stackdepth integer_gt) (integer_yankdup) integer_flush boolean_and integer_flush boolean_and in2 exec_eq exec_pop (tagged_602 integer_yankdup) exec_rot (exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean boolean_flush integer_add) (integer_mult) in4) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_rot integer_dup_items exec_yank) boolean_xor exec_when (boolean_empty in4 integer_mult in4 integer_mult integer_lte integer_mult) integer_lte integer_max exec_s (exec_do*range (in4) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) exec_noop) (exec_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) integer_eq) integer_gt integer_mod) boolean_invert_second_then_and integer_min) (boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4) in3 boolean_yank integer_min print_integer boolean_yankdup boolean_dup)
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 113
Percent parens: 0.186
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_602} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 1, :instruction integer_mult} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Zero cases best program: (exec_eq exec_yank boolean_yankdup boolean_dup in3 boolean_yankdup print_integer exec_if (boolean_stackdepth integer_gt) (integer_yankdup) integer_flush boolean_and integer_flush boolean_and in2 exec_eq exec_pop (tagged_602 integer_yankdup) exec_rot (exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean boolean_flush integer_add) (integer_mult) in4) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_rot integer_dup_items exec_yank) boolean_xor exec_when (boolean_empty in4 integer_mult in4 integer_mult integer_lte integer_mult) integer_lte integer_max exec_s (exec_do*range (in4) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) exec_noop) (exec_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) integer_eq) integer_gt integer_mod) boolean_invert_second_then_and integer_min) (boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4) in3 boolean_yank integer_min print_integer boolean_yankdup boolean_dup)
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 113
Percent parens: 0.186
--- Lexicase Population Statistics ---
Count of elite individuals by case: (444 444 741 453 309 817 418 455 873 416)
Population mean number of elite cases: 5.37
Count of perfect (error zero) individuals by case: (444 444 741 453 309 817 418 455 873 416)
Population mean number of perfect (error zero) cases: 5.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yankdup} {:close 2, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_602} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_693} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 1, :instruction integer_mult} {:close 1, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction -17} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction -58} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_boolean_742} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup})
Best program: (exec_eq exec_yank boolean_yankdup boolean_dup in3 boolean_yankdup print_integer exec_if (boolean_stackdepth integer_gt) (integer_yankdup) integer_flush boolean_and integer_flush boolean_and in2 exec_eq exec_pop (tagged_602 integer_yankdup) exec_rot (exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean boolean_flush integer_add) (integer_mult) in4) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_rot integer_dup_items exec_yank) boolean_xor exec_when (boolean_empty in4 integer_mult in4 integer_mult integer_lte integer_mult) integer_lte integer_max exec_s (exec_do*range (in4) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) exec_noop) (exec_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) integer_eq) integer_gt integer_mod) boolean_invert_second_then_and integer_min) (boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4) in3 boolean_yank integer_min print_integer boolean_yankdup boolean_dup)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 92
Size: 113
Percent parens: 0.186
--- Population Statistics ---
Average total errors in population: 4.63
Median total errors in population: 5
Error averages by case: (0.556 0.556 0.259 0.547 0.691 0.183 0.582 0.545 0.127 0.584)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 94.765
Average program size in population (points): 116.666
Average percent parens in population: 0.188
Minimum age in population: 52.94005047436804
Maximum age in population: 57.05022357928101
Average age in population: 55.16169871477378
Median age in population: 55.37066546094138
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 63
Genome diversity (% unique genomes):	 0.822
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.821
Total error diversity:				 0.011
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.117
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 34011345
--- Timings ---
Current time: 1559582880768 milliseconds
Total Time:         121.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.7 seconds, 55.2%
Fitness Testing:     27.6 seconds, 22.8%
Report:              26.5 seconds, 21.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 36
Successful program: (exec_eq exec_yank boolean_yankdup boolean_dup in3 boolean_yankdup print_integer exec_if (boolean_stackdepth integer_gt) (integer_yankdup) integer_flush boolean_and integer_flush boolean_and in2 exec_eq exec_pop (tagged_602 integer_yankdup) exec_rot (exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean boolean_flush integer_add) (integer_mult) in4) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_rot integer_dup_items exec_yank) boolean_xor exec_when (boolean_empty in4 integer_mult in4 integer_mult integer_lte integer_mult) integer_lte integer_max exec_s (exec_do*range (in4) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) exec_noop) (exec_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) integer_eq) integer_gt integer_mod) boolean_invert_second_then_and integer_min) (boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4) in3 boolean_yank integer_min print_integer boolean_yankdup boolean_dup)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 113


Auto-simplifying with starting size: 113
step: 0
program: (exec_eq exec_yank boolean_yankdup boolean_dup in3 boolean_yankdup print_integer exec_if (boolean_stackdepth integer_gt) (integer_yankdup) integer_flush boolean_and integer_flush boolean_and in2 exec_eq exec_pop (tagged_602 integer_yankdup) exec_rot (exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean boolean_flush integer_add) (integer_mult) in4) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_rot integer_dup_items exec_yank) boolean_xor exec_when (boolean_empty in4 integer_mult in4 integer_mult integer_lte integer_mult) integer_lte integer_max exec_s (exec_do*range (in4) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) exec_noop) (exec_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) integer_eq) integer_gt integer_mod) boolean_invert_second_then_and integer_min) (boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4) in3 boolean_yank integer_min print_integer boolean_yankdup boolean_dup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 113

step: 500
program: (exec_eq exec_yank boolean_yankdup boolean_dup in3 boolean_yankdup print_integer exec_if (boolean_stackdepth integer_gt) (integer_yankdup) integer_flush boolean_and integer_flush boolean_and in2 exec_eq exec_pop (tagged_602 integer_yankdup) exec_rot (exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean boolean_flush integer_add) (integer_mult) in4) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_rot integer_dup_items exec_yank) boolean_xor exec_when (boolean_empty in4 integer_mult in4 integer_mult integer_lte integer_mult) integer_lte integer_max exec_s (exec_do*range (in4) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) exec_noop) (exec_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) integer_eq) integer_gt integer_mod) boolean_invert_second_then_and integer_min) (boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4) in3 boolean_yank integer_min print_integer boolean_yankdup boolean_dup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 113

step: 1000
program: (exec_eq exec_yank boolean_yankdup boolean_dup in3 boolean_yankdup print_integer exec_if (boolean_stackdepth integer_gt) (integer_yankdup) integer_flush boolean_and integer_flush boolean_and in2 exec_eq exec_pop (tagged_602 integer_yankdup) exec_rot (exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean boolean_flush integer_add) (integer_mult) in4) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_rot integer_dup_items exec_yank) boolean_xor exec_when (boolean_empty in4 integer_mult in4 integer_mult integer_lte integer_mult) integer_lte integer_max exec_s (exec_do*range (in4) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) exec_noop) (exec_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) integer_eq) integer_gt integer_mod) boolean_invert_second_then_and integer_min) (boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4) in3 boolean_yank integer_min print_integer boolean_yankdup boolean_dup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 113

step: 1500
program: (exec_eq exec_yank boolean_yankdup boolean_dup in3 boolean_yankdup print_integer exec_if (boolean_stackdepth integer_gt) (integer_yankdup) integer_flush boolean_and integer_flush boolean_and in2 exec_eq exec_pop (tagged_602 integer_yankdup) exec_rot (exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean boolean_flush integer_add) (integer_mult) in4) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_rot integer_dup_items exec_yank) boolean_xor exec_when (boolean_empty in4 integer_mult in4 integer_mult integer_lte integer_mult) integer_lte integer_max exec_s (exec_do*range (in4) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) exec_noop) (exec_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) integer_eq) integer_gt integer_mod) boolean_invert_second_then_and integer_min) (boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4) in3 boolean_yank integer_min print_integer boolean_yankdup boolean_dup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 113

step: 2000
program: (exec_eq exec_yank boolean_yankdup boolean_dup in3 boolean_yankdup print_integer exec_if (boolean_stackdepth integer_gt) (integer_yankdup) integer_flush boolean_and integer_flush boolean_and in2 exec_eq exec_pop (tagged_602 integer_yankdup) exec_rot (exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean boolean_flush integer_add) (integer_mult) in4) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_rot integer_dup_items exec_yank) boolean_xor exec_when (boolean_empty in4 integer_mult in4 integer_mult integer_lte integer_mult) integer_lte integer_max exec_s (exec_do*range (in4) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) exec_noop) (exec_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) integer_eq) integer_gt integer_mod) boolean_invert_second_then_and integer_min) (boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4) in3 boolean_yank integer_min print_integer boolean_yankdup boolean_dup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 113

step: 2500
program: (exec_eq exec_yank boolean_yankdup boolean_dup in3 boolean_yankdup print_integer exec_if (boolean_stackdepth integer_gt) (integer_yankdup) integer_flush boolean_and integer_flush boolean_and in2 exec_eq exec_pop (tagged_602 integer_yankdup) exec_rot (exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean boolean_flush integer_add) (integer_mult) in4) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_rot integer_dup_items exec_yank) boolean_xor exec_when (boolean_empty in4 integer_mult in4 integer_mult integer_lte integer_mult) integer_lte integer_max exec_s (exec_do*range (in4) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) exec_noop) (exec_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) integer_eq) integer_gt integer_mod) boolean_invert_second_then_and integer_min) (boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4) in3 boolean_yank integer_min print_integer boolean_yankdup boolean_dup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 113

step: 3000
program: (exec_eq exec_yank boolean_yankdup boolean_dup in3 boolean_yankdup print_integer exec_if (boolean_stackdepth integer_gt) (integer_yankdup) integer_flush boolean_and integer_flush boolean_and in2 exec_eq exec_pop (tagged_602 integer_yankdup) exec_rot (exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean boolean_flush integer_add) (integer_mult) in4) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_rot integer_dup_items exec_yank) boolean_xor exec_when (boolean_empty in4 integer_mult in4 integer_mult integer_lte integer_mult) integer_lte integer_max exec_s (exec_do*range (in4) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) exec_noop) (exec_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) integer_eq) integer_gt integer_mod) boolean_invert_second_then_and integer_min) (boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4) in3 boolean_yank integer_min print_integer boolean_yankdup boolean_dup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 113

step: 3500
program: (exec_eq exec_yank boolean_yankdup boolean_dup in3 boolean_yankdup print_integer exec_if (boolean_stackdepth integer_gt) (integer_yankdup) integer_flush boolean_and integer_flush boolean_and in2 exec_eq exec_pop (tagged_602 integer_yankdup) exec_rot (exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean boolean_flush integer_add) (integer_mult) in4) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_rot integer_dup_items exec_yank) boolean_xor exec_when (boolean_empty in4 integer_mult in4 integer_mult integer_lte integer_mult) integer_lte integer_max exec_s (exec_do*range (in4) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) exec_noop) (exec_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) integer_eq) integer_gt integer_mod) boolean_invert_second_then_and integer_min) (boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4) in3 boolean_yank integer_min print_integer boolean_yankdup boolean_dup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 113

step: 4000
program: (exec_eq exec_yank boolean_yankdup boolean_dup in3 boolean_yankdup print_integer exec_if (boolean_stackdepth integer_gt) (integer_yankdup) integer_flush boolean_and integer_flush boolean_and in2 exec_eq exec_pop (tagged_602 integer_yankdup) exec_rot (exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean boolean_flush integer_add) (integer_mult) in4) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_rot integer_dup_items exec_yank) boolean_xor exec_when (boolean_empty in4 integer_mult in4 integer_mult integer_lte integer_mult) integer_lte integer_max exec_s (exec_do*range (in4) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) exec_noop) (exec_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) integer_eq) integer_gt integer_mod) boolean_invert_second_then_and integer_min) (boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4) in3 boolean_yank integer_min print_integer boolean_yankdup boolean_dup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 113

step: 4500
program: (exec_eq exec_yank boolean_yankdup boolean_dup in3 boolean_yankdup print_integer exec_if (boolean_stackdepth integer_gt) (integer_yankdup) integer_flush boolean_and integer_flush boolean_and in2 exec_eq exec_pop (tagged_602 integer_yankdup) exec_rot (exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean boolean_flush integer_add) (integer_mult) in4) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_rot integer_dup_items exec_yank) boolean_xor exec_when (boolean_empty in4 integer_mult in4 integer_mult integer_lte integer_mult) integer_lte integer_max exec_s (exec_do*range (in4) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) exec_noop) (exec_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) integer_eq) integer_gt integer_mod) boolean_invert_second_then_and integer_min) (boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4) in3 boolean_yank integer_min print_integer boolean_yankdup boolean_dup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 113

step: 5000
program: (exec_eq exec_yank boolean_yankdup boolean_dup in3 boolean_yankdup print_integer exec_if (boolean_stackdepth integer_gt) (integer_yankdup) integer_flush boolean_and integer_flush boolean_and in2 exec_eq exec_pop (tagged_602 integer_yankdup) exec_rot (exec_rot (tag_integer_693 in1 integer_empty integer_yankdup) (integer_fromboolean boolean_flush integer_add) (integer_mult) in4) (exec_while (boolean_dup_times print_exec (exec_dup (integer_max -17 integer_rot integer_dup_items exec_yank) boolean_xor exec_when (boolean_empty in4 integer_mult in4 integer_mult integer_lte integer_mult) integer_lte integer_max exec_s (exec_do*range (in4) exec_y_when_autoconstructing (boolean_and) integer_stackdepth) (exec_do*count (integer_yank integer_inc) exec_pop (boolean_invert_second_then_and boolean_dup_times boolean_eq) exec_noop) (exec_dup_items boolean_eq boolean_and integer_shove in3 -58 integer_gt boolean_dup) integer_eq) integer_gt integer_mod) boolean_invert_second_then_and integer_min) (boolean_dup integer_pop boolean_empty integer_dup tag_boolean_742 exec_dup_items boolean_empty in4) in3 boolean_yank integer_min print_integer boolean_yankdup boolean_dup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 113

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 215
Test mean error for best: 0.21500
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 1
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 1
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 1
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 1
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 1
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 1
Test Case  801 | Error: 1
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 1
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 1
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -13                
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 26                 
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -95                 | Program output: 21                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: -55                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -93                
Correct output: -96                 | Program output: -96                
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -62                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -54                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: -42                
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 74                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -25                
Correct output: -5                  | Program output: 17                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -54                
Correct output: -15                 | Program output: 3                  
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -63                 | Program output: -63                
Correct output: -87                 | Program output: -53                
;;******************************
