Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-12 -78 -12 -12] -78] [[81 -20 -20 -20] -20] [[-47 24 24 24] -47] [[-24 -24 -67 -24] -67] [[34 -26 34 34] -26] [[-28 -28 72 -28] -28] [[55 55 -54 55] -54] [[-76 -76 -76 -6] -76] [[9 9 64 9] 9] [[54 54 54 -42] -42] [(96 96 96 96) 96] [(-77 -77 -77 -77) -77] [(50 50 50 50) 50] [(78 78 78 78) 78] [(68 68 68 68) 68] [(32 34 13 85) 13] [(93 25 3 96) 3] [(75 32 1 3) 1] [(96 58 20 39) 20] [(8 94 4 34) 4] [(78 76 29 19) 19] [(29 56 55 15) 15] [(67 99 63 33) 33] [(41 64 42 30) 30] [(96 25 93 14) 14] [(77 73 49 44) 44] [(12 61 86 21) 12] [(30 12 1 56) 1] [(88 9 15 13) 9] [(41 67 77 66) 41] [(69 36 47 0) 0] [(38 94 41 49) 38] [(52 10 66 13) 10] [(32 88 92 17) 17] [(36 75 48 73) 36] [(15 59 73 27) 15] [(87 -57 -1 -34) -57] [(-24 -95 76 -47) -95] [(-38 -72 -53 -73) -73] [(-66 32 40 56) -66] [(-6 88 -11 43) -11] [(-57 -12 49 4) -57] [(86 48 -95 -38) -95] [(-53 75 28 -31) -53] [(-11 -56 40 -3) -56] [(-79 82 -48 -5) -79] [(92 -6 19 92) -6] [(-65 37 25 82) -65] [(-19 -71 -5 -76) -76] [(25 -73 97 -73) -73] [(-70 -60 -28 -46) -70] [(37 -68 -33 -69) -69] [(-19 82 5 49) -19] [(29 95 25 -98) -98] [(59 1 -48 -62) -62] [(-92 11 85 80) -92] [(72 55 -4 -70) -70] [(8 61 -76 -30) -76] [(-67 31 4 -65) -67] [(4 3 -16 -44) -44] [(-45 49 85 20) -45] [(43 20 89 88) 20] [(-48 -89 -24 -27) -89] [(22 -68 18 44) -68] [(-2 -59 99 31) -59] [(-52 34 -96 -45) -96] [(-47 16 -17 -71) -71] [(-18 84 48 0) -18] [(-72 -43 96 72) -72] [(97 -55 92 63) -55] [(-94 85 -42 39) -94] [(20 -19 41 -77) -77] [(78 -81 -43 79) -81] [(-73 -59 -69 -78) -78] [(77 32 -46 30) -46] [(90 60 56 -25) -25] [(-38 52 69 -35) -38] [(-4 -68 8 -85) -85] [(61 -26 99 -66) -66] [(-78 -7 -28 -39) -78] [(60 -56 -48 -32) -56] [(0 -60 15 84) -60] [(81 -61 -34 25) -61] [(-30 41 99 -49) -49] [(-52 -73 -26 -85) -85] [(-59 32 -83 32) -83] [(-72 73 24 95) -72] [(56 9 -14 1) -14] [(-43 97 73 -73) -73] [(-21 -7 62 93) -21] [(-19 -89 19 13) -89] [(-81 2 -91 -47) -91] [(-59 -55 -88 4) -88] [(37 25 36 40) 25] [(25 33 -55 -97) -97])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-12 -78 -12 -12] -78]
Train Case:   6 | Input/Output: [[81 -20 -20 -20] -20]
Train Case:   7 | Input/Output: [[-47 24 24 24] -47]
Train Case:   8 | Input/Output: [[-24 -24 -67 -24] -67]
Train Case:   9 | Input/Output: [[34 -26 34 34] -26]
Train Case:  10 | Input/Output: [[-28 -28 72 -28] -28]
Train Case:  11 | Input/Output: [[55 55 -54 55] -54]
Train Case:  12 | Input/Output: [[-76 -76 -76 -6] -76]
Train Case:  13 | Input/Output: [[9 9 64 9] 9]
Train Case:  14 | Input/Output: [[54 54 54 -42] -42]
Train Case:  15 | Input/Output: [(96 96 96 96) 96]
Train Case:  16 | Input/Output: [(-77 -77 -77 -77) -77]
Train Case:  17 | Input/Output: [(50 50 50 50) 50]
Train Case:  18 | Input/Output: [(78 78 78 78) 78]
Train Case:  19 | Input/Output: [(68 68 68 68) 68]
Train Case:  20 | Input/Output: [(32 34 13 85) 13]
Train Case:  21 | Input/Output: [(93 25 3 96) 3]
Train Case:  22 | Input/Output: [(75 32 1 3) 1]
Train Case:  23 | Input/Output: [(96 58 20 39) 20]
Train Case:  24 | Input/Output: [(8 94 4 34) 4]
Train Case:  25 | Input/Output: [(78 76 29 19) 19]
Train Case:  26 | Input/Output: [(29 56 55 15) 15]
Train Case:  27 | Input/Output: [(67 99 63 33) 33]
Train Case:  28 | Input/Output: [(41 64 42 30) 30]
Train Case:  29 | Input/Output: [(96 25 93 14) 14]
Train Case:  30 | Input/Output: [(77 73 49 44) 44]
Train Case:  31 | Input/Output: [(12 61 86 21) 12]
Train Case:  32 | Input/Output: [(30 12 1 56) 1]
Train Case:  33 | Input/Output: [(88 9 15 13) 9]
Train Case:  34 | Input/Output: [(41 67 77 66) 41]
Train Case:  35 | Input/Output: [(69 36 47 0) 0]
Train Case:  36 | Input/Output: [(38 94 41 49) 38]
Train Case:  37 | Input/Output: [(52 10 66 13) 10]
Train Case:  38 | Input/Output: [(32 88 92 17) 17]
Train Case:  39 | Input/Output: [(36 75 48 73) 36]
Train Case:  40 | Input/Output: [(15 59 73 27) 15]
Train Case:  41 | Input/Output: [(87 -57 -1 -34) -57]
Train Case:  42 | Input/Output: [(-24 -95 76 -47) -95]
Train Case:  43 | Input/Output: [(-38 -72 -53 -73) -73]
Train Case:  44 | Input/Output: [(-66 32 40 56) -66]
Train Case:  45 | Input/Output: [(-6 88 -11 43) -11]
Train Case:  46 | Input/Output: [(-57 -12 49 4) -57]
Train Case:  47 | Input/Output: [(86 48 -95 -38) -95]
Train Case:  48 | Input/Output: [(-53 75 28 -31) -53]
Train Case:  49 | Input/Output: [(-11 -56 40 -3) -56]
Train Case:  50 | Input/Output: [(-79 82 -48 -5) -79]
Train Case:  51 | Input/Output: [(92 -6 19 92) -6]
Train Case:  52 | Input/Output: [(-65 37 25 82) -65]
Train Case:  53 | Input/Output: [(-19 -71 -5 -76) -76]
Train Case:  54 | Input/Output: [(25 -73 97 -73) -73]
Train Case:  55 | Input/Output: [(-70 -60 -28 -46) -70]
Train Case:  56 | Input/Output: [(37 -68 -33 -69) -69]
Train Case:  57 | Input/Output: [(-19 82 5 49) -19]
Train Case:  58 | Input/Output: [(29 95 25 -98) -98]
Train Case:  59 | Input/Output: [(59 1 -48 -62) -62]
Train Case:  60 | Input/Output: [(-92 11 85 80) -92]
Train Case:  61 | Input/Output: [(72 55 -4 -70) -70]
Train Case:  62 | Input/Output: [(8 61 -76 -30) -76]
Train Case:  63 | Input/Output: [(-67 31 4 -65) -67]
Train Case:  64 | Input/Output: [(4 3 -16 -44) -44]
Train Case:  65 | Input/Output: [(-45 49 85 20) -45]
Train Case:  66 | Input/Output: [(43 20 89 88) 20]
Train Case:  67 | Input/Output: [(-48 -89 -24 -27) -89]
Train Case:  68 | Input/Output: [(22 -68 18 44) -68]
Train Case:  69 | Input/Output: [(-2 -59 99 31) -59]
Train Case:  70 | Input/Output: [(-52 34 -96 -45) -96]
Train Case:  71 | Input/Output: [(-47 16 -17 -71) -71]
Train Case:  72 | Input/Output: [(-18 84 48 0) -18]
Train Case:  73 | Input/Output: [(-72 -43 96 72) -72]
Train Case:  74 | Input/Output: [(97 -55 92 63) -55]
Train Case:  75 | Input/Output: [(-94 85 -42 39) -94]
Train Case:  76 | Input/Output: [(20 -19 41 -77) -77]
Train Case:  77 | Input/Output: [(78 -81 -43 79) -81]
Train Case:  78 | Input/Output: [(-73 -59 -69 -78) -78]
Train Case:  79 | Input/Output: [(77 32 -46 30) -46]
Train Case:  80 | Input/Output: [(90 60 56 -25) -25]
Train Case:  81 | Input/Output: [(-38 52 69 -35) -38]
Train Case:  82 | Input/Output: [(-4 -68 8 -85) -85]
Train Case:  83 | Input/Output: [(61 -26 99 -66) -66]
Train Case:  84 | Input/Output: [(-78 -7 -28 -39) -78]
Train Case:  85 | Input/Output: [(60 -56 -48 -32) -56]
Train Case:  86 | Input/Output: [(0 -60 15 84) -60]
Train Case:  87 | Input/Output: [(81 -61 -34 25) -61]
Train Case:  88 | Input/Output: [(-30 41 99 -49) -49]
Train Case:  89 | Input/Output: [(-52 -73 -26 -85) -85]
Train Case:  90 | Input/Output: [(-59 32 -83 32) -83]
Train Case:  91 | Input/Output: [(-72 73 24 95) -72]
Train Case:  92 | Input/Output: [(56 9 -14 1) -14]
Train Case:  93 | Input/Output: [(-43 97 73 -73) -73]
Train Case:  94 | Input/Output: [(-21 -7 62 93) -21]
Train Case:  95 | Input/Output: [(-19 -89 19 13) -89]
Train Case:  96 | Input/Output: [(-81 2 -91 -47) -91]
Train Case:  97 | Input/Output: [(-59 -55 -88 4) -88]
Train Case:  98 | Input/Output: [(37 25 36 40) 25]
Train Case:  99 | Input/Output: [(25 33 -55 -97) -97]
Test Case:   0 | Input/Output: [[-95 -71 -95 -95] -95]
Test Case:   1 | Input/Output: [[-37 -66 -66 -66] -66]
Test Case:   2 | Input/Output: [[52 49 52 52] 49]
Test Case:   3 | Input/Output: [[85 85 -88 85] -88]
Test Case:   4 | Input/Output: [[57 -78 -78 -78] -78]
Test Case:   5 | Input/Output: [[-76 -76 34 -76] -76]
Test Case:   6 | Input/Output: [[-33 -18 -33 -33] -33]
Test Case:   7 | Input/Output: [[99 99 99 -19] -19]
Test Case:   8 | Input/Output: [[-51 -51 -51 -53] -53]
Test Case:   9 | Input/Output: [[-4 -4 -4 -86] -86]
Test Case:  10 | Input/Output: [[69 29 29 29] 29]
Test Case:  11 | Input/Output: [[62 55 62 62] 55]
Test Case:  12 | Input/Output: [[-36 -36 75 -36] -36]
Test Case:  13 | Input/Output: [[39 91 39 39] 39]
Test Case:  14 | Input/Output: [[-75 -75 -75 63] -75]
Test Case:  15 | Input/Output: [[20 66 20 20] 20]
Test Case:  16 | Input/Output: [[64 6 64 64] 6]
Test Case:  17 | Input/Output: [[-34 -78 -34 -34] -78]
Test Case:  18 | Input/Output: [[64 93 93 93] 64]
Test Case:  19 | Input/Output: [[-73 -73 -12 -73] -73]
Test Case:  20 | Input/Output: [[-77 -77 -77 5] -77]
Test Case:  21 | Input/Output: [[-72 98 98 98] -72]
Test Case:  22 | Input/Output: [[20 20 20 58] 20]
Test Case:  23 | Input/Output: [[41 41 41 -58] -58]
Test Case:  24 | Input/Output: [[-28 100 -28 -28] -28]
Test Case:  25 | Input/Output: [[-48 -48 -48 -68] -68]
Test Case:  26 | Input/Output: [[40 -37 -37 -37] -37]
Test Case:  27 | Input/Output: [[-17 -17 -17 -46] -46]
Test Case:  28 | Input/Output: [[-11 -11 -11 81] -11]
Test Case:  29 | Input/Output: [[-71 -71 -71 -80] -80]
Test Case:  30 | Input/Output: [[1 1 1 50] 1]
Test Case:  31 | Input/Output: [[-18 11 11 11] -18]
Test Case:  32 | Input/Output: [[86 -4 86 86] -4]
Test Case:  33 | Input/Output: [[41 -84 41 41] -84]
Test Case:  34 | Input/Output: [[61 61 18 61] 18]
Test Case:  35 | Input/Output: [[-7 42 -7 -7] -7]
Test Case:  36 | Input/Output: [[-1 -1 -49 -1] -49]
Test Case:  37 | Input/Output: [[-39 -39 -39 1] -39]
Test Case:  38 | Input/Output: [[-80 8 -80 -80] -80]
Test Case:  39 | Input/Output: [[-96 -17 -17 -17] -96]
Test Case:  40 | Input/Output: [[-72 -72 -72 46] -72]
Test Case:  41 | Input/Output: [[93 93 -19 93] -19]
Test Case:  42 | Input/Output: [[-61 -74 -74 -74] -74]
Test Case:  43 | Input/Output: [[-83 -83 -14 -83] -83]
Test Case:  44 | Input/Output: [[-65 -65 -65 24] -65]
Test Case:  45 | Input/Output: [[-4 50 50 50] -4]
Test Case:  46 | Input/Output: [[48 14 48 48] 14]
Test Case:  47 | Input/Output: [[-17 -17 -17 -27] -27]
Test Case:  48 | Input/Output: [[-95 3 -95 -95] -95]
Test Case:  49 | Input/Output: [[100 -68 100 100] -68]
Test Case:  50 | Input/Output: [[-95 -95 -95 -16] -95]
Test Case:  51 | Input/Output: [[89 89 89 33] 33]
Test Case:  52 | Input/Output: [[94 -83 -83 -83] -83]
Test Case:  53 | Input/Output: [[37 37 37 32] 32]
Test Case:  54 | Input/Output: [[-14 -66 -66 -66] -66]
Test Case:  55 | Input/Output: [[-36 -4 -36 -36] -36]
Test Case:  56 | Input/Output: [[94 94 81 94] 81]
Test Case:  57 | Input/Output: [[3 -22 3 3] -22]
Test Case:  58 | Input/Output: [[41 -53 41 41] -53]
Test Case:  59 | Input/Output: [[70 32 70 70] 32]
Test Case:  60 | Input/Output: [[-25 -25 -25 73] -25]
Test Case:  61 | Input/Output: [[70 70 60 70] 60]
Test Case:  62 | Input/Output: [[-83 -83 -93 -83] -93]
Test Case:  63 | Input/Output: [[66 19 19 19] 19]
Test Case:  64 | Input/Output: [[-31 -34 -31 -31] -34]
Test Case:  65 | Input/Output: [[16 16 48 16] 16]
Test Case:  66 | Input/Output: [[-1 -1 -34 -1] -34]
Test Case:  67 | Input/Output: [[90 90 90 98] 90]
Test Case:  68 | Input/Output: [[-43 60 -43 -43] -43]
Test Case:  69 | Input/Output: [[-68 37 -68 -68] -68]
Test Case:  70 | Input/Output: [[67 56 56 56] 56]
Test Case:  71 | Input/Output: [[-32 86 86 86] -32]
Test Case:  72 | Input/Output: [[-15 -15 -2 -15] -15]
Test Case:  73 | Input/Output: [[-80 30 30 30] -80]
Test Case:  74 | Input/Output: [[47 58 47 47] 47]
Test Case:  75 | Input/Output: [[2 2 2 -88] -88]
Test Case:  76 | Input/Output: [[-32 0 0 0] -32]
Test Case:  77 | Input/Output: [[-36 -36 -50 -36] -50]
Test Case:  78 | Input/Output: [[40 40 58 40] 40]
Test Case:  79 | Input/Output: [[77 39 77 77] 39]
Test Case:  80 | Input/Output: [[97 -53 -53 -53] -53]
Test Case:  81 | Input/Output: [[-83 -41 -83 -83] -83]
Test Case:  82 | Input/Output: [[-61 -61 -61 -75] -75]
Test Case:  83 | Input/Output: [[38 69 69 69] 38]
Test Case:  84 | Input/Output: [[-23 -23 88 -23] -23]
Test Case:  85 | Input/Output: [[92 92 78 92] 78]
Test Case:  86 | Input/Output: [[-26 -26 -26 62] -26]
Test Case:  87 | Input/Output: [[-74 31 -74 -74] -74]
Test Case:  88 | Input/Output: [[-31 -31 -80 -31] -80]
Test Case:  89 | Input/Output: [[68 68 35 68] 35]
Test Case:  90 | Input/Output: [[89 89 -89 89] -89]
Test Case:  91 | Input/Output: [[-37 3 -37 -37] -37]
Test Case:  92 | Input/Output: [[-31 87 -31 -31] -31]
Test Case:  93 | Input/Output: [[95 95 -86 95] -86]
Test Case:  94 | Input/Output: [[-90 -90 -90 32] -90]
Test Case:  95 | Input/Output: [[-77 93 -77 -77] -77]
Test Case:  96 | Input/Output: [[55 -85 55 55] -85]
Test Case:  97 | Input/Output: [[-3 -3 -3 -99] -99]
Test Case:  98 | Input/Output: [[54 -26 54 54] -26]
Test Case:  99 | Input/Output: [[-16 -16 -6 -16] -16]
Test Case: 100 | Input/Output: [(47 47 47 47) 47]
Test Case: 101 | Input/Output: [(13 13 13 13) 13]
Test Case: 102 | Input/Output: [(95 95 95 95) 95]
Test Case: 103 | Input/Output: [(82 82 82 82) 82]
Test Case: 104 | Input/Output: [(28 28 28 28) 28]
Test Case: 105 | Input/Output: [(76 76 76 76) 76]
Test Case: 106 | Input/Output: [(77 77 77 77) 77]
Test Case: 107 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 108 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 109 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 110 | Input/Output: [(93 93 93 93) 93]
Test Case: 111 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 112 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 113 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 114 | Input/Output: [(65 65 65 65) 65]
Test Case: 115 | Input/Output: [(85 85 85 85) 85]
Test Case: 116 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 117 | Input/Output: [(23 23 23 23) 23]
Test Case: 118 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 119 | Input/Output: [(30 30 30 30) 30]
Test Case: 120 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 121 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 122 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 123 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 124 | Input/Output: [(1 1 1 1) 1]
Test Case: 125 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 126 | Input/Output: [(4 4 4 4) 4]
Test Case: 127 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 128 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 129 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 130 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 131 | Input/Output: [(75 75 75 75) 75]
Test Case: 132 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 133 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 134 | Input/Output: [(77 77 77 77) 77]
Test Case: 135 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 136 | Input/Output: [(4 4 4 4) 4]
Test Case: 137 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 138 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 139 | Input/Output: [(6 6 6 6) 6]
Test Case: 140 | Input/Output: [(87 87 87 87) 87]
Test Case: 141 | Input/Output: [(69 69 69 69) 69]
Test Case: 142 | Input/Output: [(30 30 30 30) 30]
Test Case: 143 | Input/Output: [(87 87 87 87) 87]
Test Case: 144 | Input/Output: [(56 56 56 56) 56]
Test Case: 145 | Input/Output: [(80 80 80 80) 80]
Test Case: 146 | Input/Output: [(85 85 85 85) 85]
Test Case: 147 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 148 | Input/Output: [(24 24 24 24) 24]
Test Case: 149 | Input/Output: [(56 56 56 56) 56]
Test Case: 150 | Input/Output: [(63 63 63 63) 63]
Test Case: 151 | Input/Output: [(51 51 51 51) 51]
Test Case: 152 | Input/Output: [(78 78 78 78) 78]
Test Case: 153 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 154 | Input/Output: [(90 90 90 90) 90]
Test Case: 155 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 156 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 157 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 158 | Input/Output: [(64 64 64 64) 64]
Test Case: 159 | Input/Output: [(5 5 5 5) 5]
Test Case: 160 | Input/Output: [(28 28 28 28) 28]
Test Case: 161 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 162 | Input/Output: [(94 94 94 94) 94]
Test Case: 163 | Input/Output: [(68 68 68 68) 68]
Test Case: 164 | Input/Output: [(25 25 25 25) 25]
Test Case: 165 | Input/Output: [(17 17 17 17) 17]
Test Case: 166 | Input/Output: [(96 96 96 96) 96]
Test Case: 167 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 168 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 169 | Input/Output: [(79 79 79 79) 79]
Test Case: 170 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 171 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 172 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 173 | Input/Output: [(66 66 66 66) 66]
Test Case: 174 | Input/Output: [(19 19 19 19) 19]
Test Case: 175 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 176 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 177 | Input/Output: [(68 68 68 68) 68]
Test Case: 178 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 179 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 180 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 181 | Input/Output: [(0 0 0 0) 0]
Test Case: 182 | Input/Output: [(16 16 16 16) 16]
Test Case: 183 | Input/Output: [(78 78 78 78) 78]
Test Case: 184 | Input/Output: [(39 39 39 39) 39]
Test Case: 185 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 186 | Input/Output: [(78 78 78 78) 78]
Test Case: 187 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 188 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 189 | Input/Output: [(9 9 9 9) 9]
Test Case: 190 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 191 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 192 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 193 | Input/Output: [(80 80 80 80) 80]
Test Case: 194 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 195 | Input/Output: [(62 62 62 62) 62]
Test Case: 196 | Input/Output: [(61 61 61 61) 61]
Test Case: 197 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 198 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 199 | Input/Output: [(32 32 32 32) 32]
Test Case: 200 | Input/Output: [(21 41 65 86) 21]
Test Case: 201 | Input/Output: [(99 39 40 43) 39]
Test Case: 202 | Input/Output: [(61 67 100 63) 61]
Test Case: 203 | Input/Output: [(79 81 30 25) 25]
Test Case: 204 | Input/Output: [(32 74 68 68) 32]
Test Case: 205 | Input/Output: [(69 70 43 2) 2]
Test Case: 206 | Input/Output: [(21 47 86 86) 21]
Test Case: 207 | Input/Output: [(21 73 50 100) 21]
Test Case: 208 | Input/Output: [(80 7 23 34) 7]
Test Case: 209 | Input/Output: [(37 7 58 57) 7]
Test Case: 210 | Input/Output: [(26 54 75 87) 26]
Test Case: 211 | Input/Output: [(67 16 19 0) 0]
Test Case: 212 | Input/Output: [(97 48 31 45) 31]
Test Case: 213 | Input/Output: [(46 33 35 98) 33]
Test Case: 214 | Input/Output: [(5 41 49 39) 5]
Test Case: 215 | Input/Output: [(47 70 2 71) 2]
Test Case: 216 | Input/Output: [(70 47 42 22) 22]
Test Case: 217 | Input/Output: [(63 8 85 83) 8]
Test Case: 218 | Input/Output: [(31 12 66 3) 3]
Test Case: 219 | Input/Output: [(49 87 35 24) 24]
Test Case: 220 | Input/Output: [(12 67 6 79) 6]
Test Case: 221 | Input/Output: [(6 32 50 39) 6]
Test Case: 222 | Input/Output: [(96 75 31 69) 31]
Test Case: 223 | Input/Output: [(72 95 3 52) 3]
Test Case: 224 | Input/Output: [(5 56 100 46) 5]
Test Case: 225 | Input/Output: [(17 23 42 34) 17]
Test Case: 226 | Input/Output: [(49 16 88 76) 16]
Test Case: 227 | Input/Output: [(41 46 68 9) 9]
Test Case: 228 | Input/Output: [(58 45 12 13) 12]
Test Case: 229 | Input/Output: [(12 53 80 7) 7]
Test Case: 230 | Input/Output: [(38 26 69 49) 26]
Test Case: 231 | Input/Output: [(19 9 79 41) 9]
Test Case: 232 | Input/Output: [(0 33 6 32) 0]
Test Case: 233 | Input/Output: [(89 77 72 25) 25]
Test Case: 234 | Input/Output: [(42 38 5 59) 5]
Test Case: 235 | Input/Output: [(92 87 11 57) 11]
Test Case: 236 | Input/Output: [(7 26 47 35) 7]
Test Case: 237 | Input/Output: [(93 96 22 100) 22]
Test Case: 238 | Input/Output: [(50 62 37 16) 16]
Test Case: 239 | Input/Output: [(66 3 93 15) 3]
Test Case: 240 | Input/Output: [(36 80 61 2) 2]
Test Case: 241 | Input/Output: [(17 35 76 50) 17]
Test Case: 242 | Input/Output: [(3 38 58 60) 3]
Test Case: 243 | Input/Output: [(58 60 68 97) 58]
Test Case: 244 | Input/Output: [(5 75 54 99) 5]
Test Case: 245 | Input/Output: [(26 42 45 6) 6]
Test Case: 246 | Input/Output: [(34 99 54 40) 34]
Test Case: 247 | Input/Output: [(24 16 26 55) 16]
Test Case: 248 | Input/Output: [(98 8 28 84) 8]
Test Case: 249 | Input/Output: [(41 68 13 56) 13]
Test Case: 250 | Input/Output: [(47 92 61 37) 37]
Test Case: 251 | Input/Output: [(81 69 8 66) 8]
Test Case: 252 | Input/Output: [(52 80 98 40) 40]
Test Case: 253 | Input/Output: [(67 34 6 33) 6]
Test Case: 254 | Input/Output: [(27 28 94 64) 27]
Test Case: 255 | Input/Output: [(50 10 75 39) 10]
Test Case: 256 | Input/Output: [(46 74 38 63) 38]
Test Case: 257 | Input/Output: [(3 51 24 74) 3]
Test Case: 258 | Input/Output: [(39 61 98 15) 15]
Test Case: 259 | Input/Output: [(36 40 60 5) 5]
Test Case: 260 | Input/Output: [(49 12 58 5) 5]
Test Case: 261 | Input/Output: [(74 99 58 37) 37]
Test Case: 262 | Input/Output: [(42 47 20 45) 20]
Test Case: 263 | Input/Output: [(69 45 2 54) 2]
Test Case: 264 | Input/Output: [(7 79 58 73) 7]
Test Case: 265 | Input/Output: [(79 97 29 97) 29]
Test Case: 266 | Input/Output: [(97 35 37 72) 35]
Test Case: 267 | Input/Output: [(40 64 87 20) 20]
Test Case: 268 | Input/Output: [(5 40 99 0) 0]
Test Case: 269 | Input/Output: [(77 50 41 90) 41]
Test Case: 270 | Input/Output: [(90 54 75 4) 4]
Test Case: 271 | Input/Output: [(51 47 100 48) 47]
Test Case: 272 | Input/Output: [(42 67 22 11) 11]
Test Case: 273 | Input/Output: [(34 80 68 54) 34]
Test Case: 274 | Input/Output: [(1 82 29 2) 1]
Test Case: 275 | Input/Output: [(22 67 85 88) 22]
Test Case: 276 | Input/Output: [(56 19 93 39) 19]
Test Case: 277 | Input/Output: [(60 13 95 66) 13]
Test Case: 278 | Input/Output: [(29 12 46 49) 12]
Test Case: 279 | Input/Output: [(34 74 71 40) 34]
Test Case: 280 | Input/Output: [(47 32 87 50) 32]
Test Case: 281 | Input/Output: [(18 31 16 89) 16]
Test Case: 282 | Input/Output: [(33 15 76 7) 7]
Test Case: 283 | Input/Output: [(51 37 24 36) 24]
Test Case: 284 | Input/Output: [(38 58 53 49) 38]
Test Case: 285 | Input/Output: [(5 18 98 59) 5]
Test Case: 286 | Input/Output: [(21 3 5 28) 3]
Test Case: 287 | Input/Output: [(4 74 13 16) 4]
Test Case: 288 | Input/Output: [(65 3 61 52) 3]
Test Case: 289 | Input/Output: [(85 0 97 69) 0]
Test Case: 290 | Input/Output: [(53 90 15 10) 10]
Test Case: 291 | Input/Output: [(49 8 23 83) 8]
Test Case: 292 | Input/Output: [(65 16 68 89) 16]
Test Case: 293 | Input/Output: [(94 34 13 36) 13]
Test Case: 294 | Input/Output: [(42 10 24 15) 10]
Test Case: 295 | Input/Output: [(23 66 63 42) 23]
Test Case: 296 | Input/Output: [(46 97 11 89) 11]
Test Case: 297 | Input/Output: [(99 91 54 49) 49]
Test Case: 298 | Input/Output: [(51 33 52 4) 4]
Test Case: 299 | Input/Output: [(18 71 98 23) 18]
Test Case: 300 | Input/Output: [(23 25 4 5) 4]
Test Case: 301 | Input/Output: [(77 14 37 42) 14]
Test Case: 302 | Input/Output: [(90 65 36 22) 22]
Test Case: 303 | Input/Output: [(66 42 44 73) 42]
Test Case: 304 | Input/Output: [(83 65 59 55) 55]
Test Case: 305 | Input/Output: [(88 89 27 87) 27]
Test Case: 306 | Input/Output: [(7 16 0 60) 0]
Test Case: 307 | Input/Output: [(37 30 25 12) 12]
Test Case: 308 | Input/Output: [(68 15 23 23) 15]
Test Case: 309 | Input/Output: [(22 53 99 65) 22]
Test Case: 310 | Input/Output: [(96 23 16 5) 5]
Test Case: 311 | Input/Output: [(48 39 10 18) 10]
Test Case: 312 | Input/Output: [(41 82 70 30) 30]
Test Case: 313 | Input/Output: [(42 33 20 17) 17]
Test Case: 314 | Input/Output: [(54 49 60 62) 49]
Test Case: 315 | Input/Output: [(96 27 63 51) 27]
Test Case: 316 | Input/Output: [(7 4 7 23) 4]
Test Case: 317 | Input/Output: [(66 29 58 13) 13]
Test Case: 318 | Input/Output: [(55 76 18 51) 18]
Test Case: 319 | Input/Output: [(74 81 34 62) 34]
Test Case: 320 | Input/Output: [(30 53 5 96) 5]
Test Case: 321 | Input/Output: [(68 19 40 71) 19]
Test Case: 322 | Input/Output: [(39 67 10 23) 10]
Test Case: 323 | Input/Output: [(88 72 22 97) 22]
Test Case: 324 | Input/Output: [(56 50 30 47) 30]
Test Case: 325 | Input/Output: [(79 82 56 31) 31]
Test Case: 326 | Input/Output: [(2 8 30 58) 2]
Test Case: 327 | Input/Output: [(86 48 66 40) 40]
Test Case: 328 | Input/Output: [(46 4 99 77) 4]
Test Case: 329 | Input/Output: [(44 48 95 100) 44]
Test Case: 330 | Input/Output: [(60 30 26 81) 26]
Test Case: 331 | Input/Output: [(70 59 44 62) 44]
Test Case: 332 | Input/Output: [(32 76 57 6) 6]
Test Case: 333 | Input/Output: [(72 87 53 35) 35]
Test Case: 334 | Input/Output: [(1 0 28 43) 0]
Test Case: 335 | Input/Output: [(57 31 24 12) 12]
Test Case: 336 | Input/Output: [(86 74 5 22) 5]
Test Case: 337 | Input/Output: [(54 51 80 94) 51]
Test Case: 338 | Input/Output: [(5 49 12 75) 5]
Test Case: 339 | Input/Output: [(47 59 11 8) 8]
Test Case: 340 | Input/Output: [(3 62 27 11) 3]
Test Case: 341 | Input/Output: [(67 22 70 18) 18]
Test Case: 342 | Input/Output: [(83 23 17 96) 17]
Test Case: 343 | Input/Output: [(5 25 25 12) 5]
Test Case: 344 | Input/Output: [(76 47 27 69) 27]
Test Case: 345 | Input/Output: [(82 12 22 96) 12]
Test Case: 346 | Input/Output: [(2 35 96 99) 2]
Test Case: 347 | Input/Output: [(22 86 29 34) 22]
Test Case: 348 | Input/Output: [(84 92 40 90) 40]
Test Case: 349 | Input/Output: [(98 82 30 11) 11]
Test Case: 350 | Input/Output: [(98 46 13 40) 13]
Test Case: 351 | Input/Output: [(22 82 60 11) 11]
Test Case: 352 | Input/Output: [(63 100 57 49) 49]
Test Case: 353 | Input/Output: [(48 41 60 57) 41]
Test Case: 354 | Input/Output: [(75 68 51 21) 21]
Test Case: 355 | Input/Output: [(11 42 72 63) 11]
Test Case: 356 | Input/Output: [(1 38 97 18) 1]
Test Case: 357 | Input/Output: [(19 22 87 81) 19]
Test Case: 358 | Input/Output: [(70 14 10 42) 10]
Test Case: 359 | Input/Output: [(10 53 70 75) 10]
Test Case: 360 | Input/Output: [(17 49 72 11) 11]
Test Case: 361 | Input/Output: [(42 68 58 14) 14]
Test Case: 362 | Input/Output: [(32 68 49 92) 32]
Test Case: 363 | Input/Output: [(67 97 30 84) 30]
Test Case: 364 | Input/Output: [(69 31 30 17) 17]
Test Case: 365 | Input/Output: [(72 36 80 89) 36]
Test Case: 366 | Input/Output: [(95 76 68 84) 68]
Test Case: 367 | Input/Output: [(7 63 46 61) 7]
Test Case: 368 | Input/Output: [(47 11 94 71) 11]
Test Case: 369 | Input/Output: [(58 41 20 49) 20]
Test Case: 370 | Input/Output: [(61 89 53 11) 11]
Test Case: 371 | Input/Output: [(50 65 36 30) 30]
Test Case: 372 | Input/Output: [(43 55 1 96) 1]
Test Case: 373 | Input/Output: [(60 16 44 82) 16]
Test Case: 374 | Input/Output: [(87 86 4 100) 4]
Test Case: 375 | Input/Output: [(97 95 0 85) 0]
Test Case: 376 | Input/Output: [(88 89 19 58) 19]
Test Case: 377 | Input/Output: [(17 6 23 59) 6]
Test Case: 378 | Input/Output: [(1 36 41 99) 1]
Test Case: 379 | Input/Output: [(77 17 64 95) 17]
Test Case: 380 | Input/Output: [(53 54 54 7) 7]
Test Case: 381 | Input/Output: [(61 51 30 95) 30]
Test Case: 382 | Input/Output: [(40 0 60 93) 0]
Test Case: 383 | Input/Output: [(89 96 56 40) 40]
Test Case: 384 | Input/Output: [(22 18 82 30) 18]
Test Case: 385 | Input/Output: [(11 88 84 77) 11]
Test Case: 386 | Input/Output: [(14 5 31 10) 5]
Test Case: 387 | Input/Output: [(64 47 55 64) 47]
Test Case: 388 | Input/Output: [(82 57 34 89) 34]
Test Case: 389 | Input/Output: [(70 81 13 95) 13]
Test Case: 390 | Input/Output: [(32 91 55 70) 32]
Test Case: 391 | Input/Output: [(11 70 24 90) 11]
Test Case: 392 | Input/Output: [(4 12 65 52) 4]
Test Case: 393 | Input/Output: [(90 91 87 40) 40]
Test Case: 394 | Input/Output: [(10 27 37 52) 10]
Test Case: 395 | Input/Output: [(1 32 42 54) 1]
Test Case: 396 | Input/Output: [(71 65 26 27) 26]
Test Case: 397 | Input/Output: [(59 7 26 26) 7]
Test Case: 398 | Input/Output: [(15 36 29 88) 15]
Test Case: 399 | Input/Output: [(43 97 11 18) 11]
Test Case: 400 | Input/Output: [(84 76 62 -24) -24]
Test Case: 401 | Input/Output: [(-67 2 -56 53) -67]
Test Case: 402 | Input/Output: [(-49 94 3 64) -49]
Test Case: 403 | Input/Output: [(34 -75 98 -66) -75]
Test Case: 404 | Input/Output: [(65 -52 -88 -21) -88]
Test Case: 405 | Input/Output: [(-85 95 -80 89) -85]
Test Case: 406 | Input/Output: [(-4 54 4 21) -4]
Test Case: 407 | Input/Output: [(28 6 34 92) 6]
Test Case: 408 | Input/Output: [(50 -24 27 -50) -50]
Test Case: 409 | Input/Output: [(65 -27 71 54) -27]
Test Case: 410 | Input/Output: [(-39 -43 -89 19) -89]
Test Case: 411 | Input/Output: [(69 86 21 56) 21]
Test Case: 412 | Input/Output: [(72 15 -16 5) -16]
Test Case: 413 | Input/Output: [(-82 95 -58 45) -82]
Test Case: 414 | Input/Output: [(-68 35 -70 31) -70]
Test Case: 415 | Input/Output: [(-74 74 -45 -30) -74]
Test Case: 416 | Input/Output: [(53 25 -60 -20) -60]
Test Case: 417 | Input/Output: [(78 -95 -31 52) -95]
Test Case: 418 | Input/Output: [(21 84 -21 -44) -44]
Test Case: 419 | Input/Output: [(10 -80 7 71) -80]
Test Case: 420 | Input/Output: [(-61 -64 26 25) -64]
Test Case: 421 | Input/Output: [(6 87 -75 -97) -97]
Test Case: 422 | Input/Output: [(6 90 -51 32) -51]
Test Case: 423 | Input/Output: [(-47 69 76 59) -47]
Test Case: 424 | Input/Output: [(6 -85 95 -98) -98]
Test Case: 425 | Input/Output: [(-55 -41 -84 51) -84]
Test Case: 426 | Input/Output: [(47 -38 26 -35) -38]
Test Case: 427 | Input/Output: [(-67 64 9 36) -67]
Test Case: 428 | Input/Output: [(31 62 -78 -90) -90]
Test Case: 429 | Input/Output: [(34 74 -44 -99) -99]
Test Case: 430 | Input/Output: [(-66 83 -76 -50) -76]
Test Case: 431 | Input/Output: [(64 17 -74 28) -74]
Test Case: 432 | Input/Output: [(-79 41 12 -92) -92]
Test Case: 433 | Input/Output: [(-72 -15 -63 98) -72]
Test Case: 434 | Input/Output: [(-86 -22 -91 81) -91]
Test Case: 435 | Input/Output: [(-16 -73 -81 40) -81]
Test Case: 436 | Input/Output: [(24 32 -19 -76) -76]
Test Case: 437 | Input/Output: [(54 49 57 6) 6]
Test Case: 438 | Input/Output: [(2 22 37 -6) -6]
Test Case: 439 | Input/Output: [(46 98 -1 -91) -91]
Test Case: 440 | Input/Output: [(63 -4 -67 -4) -67]
Test Case: 441 | Input/Output: [(4 -42 34 -46) -46]
Test Case: 442 | Input/Output: [(-62 -91 -4 -19) -91]
Test Case: 443 | Input/Output: [(86 0 -3 76) -3]
Test Case: 444 | Input/Output: [(-68 58 2 43) -68]
Test Case: 445 | Input/Output: [(94 -26 98 51) -26]
Test Case: 446 | Input/Output: [(6 84 85 -90) -90]
Test Case: 447 | Input/Output: [(84 -10 -46 78) -46]
Test Case: 448 | Input/Output: [(23 60 95 29) 23]
Test Case: 449 | Input/Output: [(0 36 10 -98) -98]
Test Case: 450 | Input/Output: [(-76 18 -6 70) -76]
Test Case: 451 | Input/Output: [(-52 -81 -23 85) -81]
Test Case: 452 | Input/Output: [(83 40 59 -65) -65]
Test Case: 453 | Input/Output: [(62 -16 -4 92) -16]
Test Case: 454 | Input/Output: [(-98 84 18 56) -98]
Test Case: 455 | Input/Output: [(34 63 10 58) 10]
Test Case: 456 | Input/Output: [(82 -15 87 59) -15]
Test Case: 457 | Input/Output: [(91 -57 58 87) -57]
Test Case: 458 | Input/Output: [(-5 10 56 15) -5]
Test Case: 459 | Input/Output: [(73 -33 -69 28) -69]
Test Case: 460 | Input/Output: [(31 0 13 -41) -41]
Test Case: 461 | Input/Output: [(10 -79 36 45) -79]
Test Case: 462 | Input/Output: [(93 69 -88 43) -88]
Test Case: 463 | Input/Output: [(-76 -27 9 21) -76]
Test Case: 464 | Input/Output: [(95 71 -100 23) -100]
Test Case: 465 | Input/Output: [(50 -48 -81 -87) -87]
Test Case: 466 | Input/Output: [(68 -65 46 74) -65]
Test Case: 467 | Input/Output: [(73 -35 -84 -10) -84]
Test Case: 468 | Input/Output: [(-36 55 -47 -89) -89]
Test Case: 469 | Input/Output: [(32 77 21 -34) -34]
Test Case: 470 | Input/Output: [(-98 -22 -89 -31) -98]
Test Case: 471 | Input/Output: [(-88 82 -55 -83) -88]
Test Case: 472 | Input/Output: [(-2 -28 -77 -84) -84]
Test Case: 473 | Input/Output: [(-84 58 47 27) -84]
Test Case: 474 | Input/Output: [(-30 37 -54 92) -54]
Test Case: 475 | Input/Output: [(74 -49 -23 77) -49]
Test Case: 476 | Input/Output: [(32 -84 -15 69) -84]
Test Case: 477 | Input/Output: [(66 -74 76 47) -74]
Test Case: 478 | Input/Output: [(-27 10 32 14) -27]
Test Case: 479 | Input/Output: [(88 65 26 96) 26]
Test Case: 480 | Input/Output: [(-9 4 89 62) -9]
Test Case: 481 | Input/Output: [(-50 -68 43 29) -68]
Test Case: 482 | Input/Output: [(-78 88 -67 -39) -78]
Test Case: 483 | Input/Output: [(-36 -99 95 19) -99]
Test Case: 484 | Input/Output: [(56 -96 87 -87) -96]
Test Case: 485 | Input/Output: [(-66 -75 82 45) -75]
Test Case: 486 | Input/Output: [(-47 -25 25 89) -47]
Test Case: 487 | Input/Output: [(13 12 40 -92) -92]
Test Case: 488 | Input/Output: [(62 -7 -72 -4) -72]
Test Case: 489 | Input/Output: [(80 65 52 -52) -52]
Test Case: 490 | Input/Output: [(-78 -39 52 84) -78]
Test Case: 491 | Input/Output: [(65 83 67 -22) -22]
Test Case: 492 | Input/Output: [(-47 39 38 42) -47]
Test Case: 493 | Input/Output: [(-44 -58 36 81) -58]
Test Case: 494 | Input/Output: [(70 85 -52 58) -52]
Test Case: 495 | Input/Output: [(39 -93 -77 25) -93]
Test Case: 496 | Input/Output: [(-70 47 -28 13) -70]
Test Case: 497 | Input/Output: [(98 -72 -44 -99) -99]
Test Case: 498 | Input/Output: [(-32 46 81 -85) -85]
Test Case: 499 | Input/Output: [(-68 73 84 81) -68]
Test Case: 500 | Input/Output: [(17 63 69 -59) -59]
Test Case: 501 | Input/Output: [(-70 2 -16 -57) -70]
Test Case: 502 | Input/Output: [(58 26 40 -72) -72]
Test Case: 503 | Input/Output: [(-7 -94 42 -14) -94]
Test Case: 504 | Input/Output: [(22 -32 -80 59) -80]
Test Case: 505 | Input/Output: [(79 -6 -94 -8) -94]
Test Case: 506 | Input/Output: [(68 -34 -83 38) -83]
Test Case: 507 | Input/Output: [(-37 -70 21 39) -70]
Test Case: 508 | Input/Output: [(34 2 54 -18) -18]
Test Case: 509 | Input/Output: [(2 23 -99 -93) -99]
Test Case: 510 | Input/Output: [(-25 46 -18 69) -25]
Test Case: 511 | Input/Output: [(16 83 26 69) 16]
Test Case: 512 | Input/Output: [(-96 10 28 -94) -96]
Test Case: 513 | Input/Output: [(6 12 -26 -81) -81]
Test Case: 514 | Input/Output: [(3 43 -51 -26) -51]
Test Case: 515 | Input/Output: [(-82 82 4 95) -82]
Test Case: 516 | Input/Output: [(-21 -53 -55 -70) -70]
Test Case: 517 | Input/Output: [(-70 -8 95 32) -70]
Test Case: 518 | Input/Output: [(44 22 -37 21) -37]
Test Case: 519 | Input/Output: [(-10 66 -63 23) -63]
Test Case: 520 | Input/Output: [(25 -53 -38 96) -53]
Test Case: 521 | Input/Output: [(40 -41 84 16) -41]
Test Case: 522 | Input/Output: [(50 -30 -70 37) -70]
Test Case: 523 | Input/Output: [(-35 63 -76 -44) -76]
Test Case: 524 | Input/Output: [(84 -56 49 22) -56]
Test Case: 525 | Input/Output: [(95 -63 -78 1) -78]
Test Case: 526 | Input/Output: [(55 42 42 -51) -51]
Test Case: 527 | Input/Output: [(100 -93 -75 -85) -93]
Test Case: 528 | Input/Output: [(-41 85 -71 -98) -98]
Test Case: 529 | Input/Output: [(94 -13 3 -88) -88]
Test Case: 530 | Input/Output: [(73 71 66 78) 66]
Test Case: 531 | Input/Output: [(-61 -39 -58 73) -61]
Test Case: 532 | Input/Output: [(-10 21 13 70) -10]
Test Case: 533 | Input/Output: [(80 96 -73 99) -73]
Test Case: 534 | Input/Output: [(83 -26 84 -8) -26]
Test Case: 535 | Input/Output: [(-58 12 32 -52) -58]
Test Case: 536 | Input/Output: [(-95 -73 88 34) -95]
Test Case: 537 | Input/Output: [(13 -40 26 41) -40]
Test Case: 538 | Input/Output: [(-28 25 3 37) -28]
Test Case: 539 | Input/Output: [(-41 89 88 -45) -45]
Test Case: 540 | Input/Output: [(48 -89 -13 -87) -89]
Test Case: 541 | Input/Output: [(-51 95 24 18) -51]
Test Case: 542 | Input/Output: [(54 38 29 -80) -80]
Test Case: 543 | Input/Output: [(93 29 92 -43) -43]
Test Case: 544 | Input/Output: [(70 -75 50 21) -75]
Test Case: 545 | Input/Output: [(-42 -83 -96 27) -96]
Test Case: 546 | Input/Output: [(-60 87 39 -17) -60]
Test Case: 547 | Input/Output: [(-43 54 17 -52) -52]
Test Case: 548 | Input/Output: [(-85 -52 11 -8) -85]
Test Case: 549 | Input/Output: [(13 7 -69 -61) -69]
Test Case: 550 | Input/Output: [(64 49 32 100) 32]
Test Case: 551 | Input/Output: [(59 56 -26 2) -26]
Test Case: 552 | Input/Output: [(-83 79 -18 19) -83]
Test Case: 553 | Input/Output: [(5 23 18 81) 5]
Test Case: 554 | Input/Output: [(-13 -38 -1 -38) -38]
Test Case: 555 | Input/Output: [(44 -30 -38 -23) -38]
Test Case: 556 | Input/Output: [(-63 9 -65 79) -65]
Test Case: 557 | Input/Output: [(17 -29 28 -99) -99]
Test Case: 558 | Input/Output: [(-61 -76 -32 -48) -76]
Test Case: 559 | Input/Output: [(53 73 26 -20) -20]
Test Case: 560 | Input/Output: [(74 88 -3 -85) -85]
Test Case: 561 | Input/Output: [(8 63 97 54) 8]
Test Case: 562 | Input/Output: [(6 -87 42 51) -87]
Test Case: 563 | Input/Output: [(-13 23 -73 -51) -73]
Test Case: 564 | Input/Output: [(-55 94 -73 42) -73]
Test Case: 565 | Input/Output: [(34 -69 -22 37) -69]
Test Case: 566 | Input/Output: [(3 -40 -16 -27) -40]
Test Case: 567 | Input/Output: [(-76 35 -8 44) -76]
Test Case: 568 | Input/Output: [(-72 23 91 -74) -74]
Test Case: 569 | Input/Output: [(28 -15 80 85) -15]
Test Case: 570 | Input/Output: [(-88 51 71 76) -88]
Test Case: 571 | Input/Output: [(-13 6 -60 -25) -60]
Test Case: 572 | Input/Output: [(-2 -100 -86 -29) -100]
Test Case: 573 | Input/Output: [(-29 69 12 37) -29]
Test Case: 574 | Input/Output: [(-62 -82 -59 -57) -82]
Test Case: 575 | Input/Output: [(-100 -54 18 55) -100]
Test Case: 576 | Input/Output: [(-14 42 65 17) -14]
Test Case: 577 | Input/Output: [(-68 -39 -99 31) -99]
Test Case: 578 | Input/Output: [(62 -34 -57 -27) -57]
Test Case: 579 | Input/Output: [(-71 24 -69 -95) -95]
Test Case: 580 | Input/Output: [(-68 -63 39 -45) -68]
Test Case: 581 | Input/Output: [(-39 -62 77 -2) -62]
Test Case: 582 | Input/Output: [(-52 -73 -21 -18) -73]
Test Case: 583 | Input/Output: [(-72 -2 -58 -67) -72]
Test Case: 584 | Input/Output: [(39 -81 67 6) -81]
Test Case: 585 | Input/Output: [(-48 48 -16 -93) -93]
Test Case: 586 | Input/Output: [(37 -54 -50 83) -54]
Test Case: 587 | Input/Output: [(37 45 7 76) 7]
Test Case: 588 | Input/Output: [(-41 -41 -41 -13) -41]
Test Case: 589 | Input/Output: [(-80 -92 79 -79) -92]
Test Case: 590 | Input/Output: [(34 52 -75 -95) -95]
Test Case: 591 | Input/Output: [(-20 93 -75 -32) -75]
Test Case: 592 | Input/Output: [(27 61 -29 -95) -95]
Test Case: 593 | Input/Output: [(70 -55 35 30) -55]
Test Case: 594 | Input/Output: [(19 71 -96 5) -96]
Test Case: 595 | Input/Output: [(-6 -30 -5 -12) -30]
Test Case: 596 | Input/Output: [(30 69 83 -92) -92]
Test Case: 597 | Input/Output: [(22 49 -43 -96) -96]
Test Case: 598 | Input/Output: [(59 67 -26 -72) -72]
Test Case: 599 | Input/Output: [(83 67 -65 -53) -65]
Test Case: 600 | Input/Output: [(18 -79 34 -42) -79]
Test Case: 601 | Input/Output: [(21 32 28 84) 21]
Test Case: 602 | Input/Output: [(-64 -28 79 59) -64]
Test Case: 603 | Input/Output: [(-97 35 -46 -71) -97]
Test Case: 604 | Input/Output: [(-65 -49 -36 -98) -98]
Test Case: 605 | Input/Output: [(85 -5 37 -91) -91]
Test Case: 606 | Input/Output: [(60 6 45 100) 6]
Test Case: 607 | Input/Output: [(-64 -41 60 87) -64]
Test Case: 608 | Input/Output: [(-91 62 -93 -67) -93]
Test Case: 609 | Input/Output: [(16 -60 81 32) -60]
Test Case: 610 | Input/Output: [(-56 -41 79 -62) -62]
Test Case: 611 | Input/Output: [(-18 -25 64 -67) -67]
Test Case: 612 | Input/Output: [(-24 -27 26 -56) -56]
Test Case: 613 | Input/Output: [(-14 58 -67 42) -67]
Test Case: 614 | Input/Output: [(42 -36 22 -38) -38]
Test Case: 615 | Input/Output: [(11 -87 60 8) -87]
Test Case: 616 | Input/Output: [(-52 4 -60 82) -60]
Test Case: 617 | Input/Output: [(8 -30 -67 -80) -80]
Test Case: 618 | Input/Output: [(-64 2 58 42) -64]
Test Case: 619 | Input/Output: [(-85 -52 56 49) -85]
Test Case: 620 | Input/Output: [(35 -81 78 29) -81]
Test Case: 621 | Input/Output: [(-40 -64 90 82) -64]
Test Case: 622 | Input/Output: [(30 22 80 31) 22]
Test Case: 623 | Input/Output: [(-34 -2 -91 -63) -91]
Test Case: 624 | Input/Output: [(93 77 96 -94) -94]
Test Case: 625 | Input/Output: [(21 -78 10 -92) -92]
Test Case: 626 | Input/Output: [(-80 1 -33 31) -80]
Test Case: 627 | Input/Output: [(96 -88 30 -19) -88]
Test Case: 628 | Input/Output: [(19 -71 25 -54) -71]
Test Case: 629 | Input/Output: [(23 16 68 81) 16]
Test Case: 630 | Input/Output: [(-28 -33 95 48) -33]
Test Case: 631 | Input/Output: [(-23 -63 -94 -35) -94]
Test Case: 632 | Input/Output: [(41 18 -9 -51) -51]
Test Case: 633 | Input/Output: [(52 49 -41 49) -41]
Test Case: 634 | Input/Output: [(-53 22 68 -72) -72]
Test Case: 635 | Input/Output: [(-45 -23 -78 2) -78]
Test Case: 636 | Input/Output: [(-41 -29 -93 13) -93]
Test Case: 637 | Input/Output: [(-90 65 77 83) -90]
Test Case: 638 | Input/Output: [(32 25 -33 48) -33]
Test Case: 639 | Input/Output: [(-6 -70 -37 -68) -70]
Test Case: 640 | Input/Output: [(51 -48 90 -64) -64]
Test Case: 641 | Input/Output: [(-50 -62 -29 30) -62]
Test Case: 642 | Input/Output: [(-15 36 -67 72) -67]
Test Case: 643 | Input/Output: [(20 60 -5 90) -5]
Test Case: 644 | Input/Output: [(20 -76 97 -73) -76]
Test Case: 645 | Input/Output: [(7 -13 90 -15) -15]
Test Case: 646 | Input/Output: [(-55 -70 -66 0) -70]
Test Case: 647 | Input/Output: [(-88 -30 91 5) -88]
Test Case: 648 | Input/Output: [(-30 48 -38 -10) -38]
Test Case: 649 | Input/Output: [(10 26 -18 -33) -33]
Test Case: 650 | Input/Output: [(-81 62 -39 23) -81]
Test Case: 651 | Input/Output: [(71 39 -24 97) -24]
Test Case: 652 | Input/Output: [(90 26 39 -99) -99]
Test Case: 653 | Input/Output: [(-37 98 -11 -80) -80]
Test Case: 654 | Input/Output: [(83 57 42 68) 42]
Test Case: 655 | Input/Output: [(-79 51 74 88) -79]
Test Case: 656 | Input/Output: [(-76 -47 40 67) -76]
Test Case: 657 | Input/Output: [(27 -15 59 -100) -100]
Test Case: 658 | Input/Output: [(52 73 48 -40) -40]
Test Case: 659 | Input/Output: [(-77 39 -89 -92) -92]
Test Case: 660 | Input/Output: [(-12 -38 93 -92) -92]
Test Case: 661 | Input/Output: [(-91 67 49 52) -91]
Test Case: 662 | Input/Output: [(-36 -58 -68 -20) -68]
Test Case: 663 | Input/Output: [(-91 10 -49 -78) -91]
Test Case: 664 | Input/Output: [(-55 75 -31 68) -55]
Test Case: 665 | Input/Output: [(51 -46 -88 63) -88]
Test Case: 666 | Input/Output: [(-22 -70 39 1) -70]
Test Case: 667 | Input/Output: [(54 -29 -67 -44) -67]
Test Case: 668 | Input/Output: [(20 -44 28 -20) -44]
Test Case: 669 | Input/Output: [(22 -32 3 -100) -100]
Test Case: 670 | Input/Output: [(68 -67 -43 43) -67]
Test Case: 671 | Input/Output: [(-33 -18 -70 -95) -95]
Test Case: 672 | Input/Output: [(-64 56 -96 -68) -96]
Test Case: 673 | Input/Output: [(-18 3 58 -62) -62]
Test Case: 674 | Input/Output: [(25 46 -12 26) -12]
Test Case: 675 | Input/Output: [(44 -91 11 3) -91]
Test Case: 676 | Input/Output: [(-14 71 -36 -66) -66]
Test Case: 677 | Input/Output: [(-75 -88 -94 -100) -100]
Test Case: 678 | Input/Output: [(-40 -69 -52 34) -69]
Test Case: 679 | Input/Output: [(-12 61 45 -57) -57]
Test Case: 680 | Input/Output: [(-90 -9 67 88) -90]
Test Case: 681 | Input/Output: [(-64 -15 71 -44) -64]
Test Case: 682 | Input/Output: [(81 35 -37 43) -37]
Test Case: 683 | Input/Output: [(9 -92 -59 -16) -92]
Test Case: 684 | Input/Output: [(21 -52 -10 7) -52]
Test Case: 685 | Input/Output: [(-29 -61 -94 98) -94]
Test Case: 686 | Input/Output: [(-26 -95 37 -32) -95]
Test Case: 687 | Input/Output: [(44 -3 -82 -73) -82]
Test Case: 688 | Input/Output: [(79 85 16 -14) -14]
Test Case: 689 | Input/Output: [(38 17 90 -14) -14]
Test Case: 690 | Input/Output: [(-99 55 -39 4) -99]
Test Case: 691 | Input/Output: [(-60 -46 -22 73) -60]
Test Case: 692 | Input/Output: [(55 44 -78 63) -78]
Test Case: 693 | Input/Output: [(88 -23 -100 70) -100]
Test Case: 694 | Input/Output: [(-59 -15 -11 -95) -95]
Test Case: 695 | Input/Output: [(74 27 48 7) 7]
Test Case: 696 | Input/Output: [(-69 -27 -17 -3) -69]
Test Case: 697 | Input/Output: [(-70 82 27 -3) -70]
Test Case: 698 | Input/Output: [(-8 -50 36 -22) -50]
Test Case: 699 | Input/Output: [(-18 -93 -10 77) -93]
Test Case: 700 | Input/Output: [(-17 -3 44 -23) -23]
Test Case: 701 | Input/Output: [(52 11 86 -67) -67]
Test Case: 702 | Input/Output: [(-17 -85 99 46) -85]
Test Case: 703 | Input/Output: [(7 -96 -83 83) -96]
Test Case: 704 | Input/Output: [(-69 62 -45 31) -69]
Test Case: 705 | Input/Output: [(-78 -83 83 -81) -83]
Test Case: 706 | Input/Output: [(45 -73 66 -79) -79]
Test Case: 707 | Input/Output: [(-74 -95 30 32) -95]
Test Case: 708 | Input/Output: [(51 40 94 -8) -8]
Test Case: 709 | Input/Output: [(98 -72 -64 81) -72]
Test Case: 710 | Input/Output: [(76 -41 -18 12) -41]
Test Case: 711 | Input/Output: [(-57 -66 -46 -21) -66]
Test Case: 712 | Input/Output: [(-9 -24 57 -48) -48]
Test Case: 713 | Input/Output: [(94 84 -80 -51) -80]
Test Case: 714 | Input/Output: [(-49 -12 -37 28) -49]
Test Case: 715 | Input/Output: [(-87 -88 66 -31) -88]
Test Case: 716 | Input/Output: [(87 -73 67 -82) -82]
Test Case: 717 | Input/Output: [(64 -23 -15 -52) -52]
Test Case: 718 | Input/Output: [(-20 -48 66 57) -48]
Test Case: 719 | Input/Output: [(14 20 -27 0) -27]
Test Case: 720 | Input/Output: [(-24 -37 -21 -15) -37]
Test Case: 721 | Input/Output: [(24 23 0 94) 0]
Test Case: 722 | Input/Output: [(92 29 94 -13) -13]
Test Case: 723 | Input/Output: [(-87 -50 16 5) -87]
Test Case: 724 | Input/Output: [(72 87 -99 88) -99]
Test Case: 725 | Input/Output: [(19 32 33 -55) -55]
Test Case: 726 | Input/Output: [(79 -90 -54 81) -90]
Test Case: 727 | Input/Output: [(71 -61 66 55) -61]
Test Case: 728 | Input/Output: [(43 -68 8 -29) -68]
Test Case: 729 | Input/Output: [(68 62 -43 -42) -43]
Test Case: 730 | Input/Output: [(-11 -91 -28 20) -91]
Test Case: 731 | Input/Output: [(-10 47 -7 1) -10]
Test Case: 732 | Input/Output: [(17 19 80 4) 4]
Test Case: 733 | Input/Output: [(58 83 -94 -31) -94]
Test Case: 734 | Input/Output: [(-95 -43 17 30) -95]
Test Case: 735 | Input/Output: [(6 17 64 -71) -71]
Test Case: 736 | Input/Output: [(-34 71 -34 93) -34]
Test Case: 737 | Input/Output: [(47 60 -52 49) -52]
Test Case: 738 | Input/Output: [(12 -98 -2 71) -98]
Test Case: 739 | Input/Output: [(-28 44 90 -3) -28]
Test Case: 740 | Input/Output: [(-56 73 12 35) -56]
Test Case: 741 | Input/Output: [(99 -37 82 8) -37]
Test Case: 742 | Input/Output: [(-10 -11 -99 -29) -99]
Test Case: 743 | Input/Output: [(-100 -23 -40 -34) -100]
Test Case: 744 | Input/Output: [(41 99 -1 -60) -60]
Test Case: 745 | Input/Output: [(-13 39 -85 100) -85]
Test Case: 746 | Input/Output: [(15 24 79 -79) -79]
Test Case: 747 | Input/Output: [(-95 22 91 -96) -96]
Test Case: 748 | Input/Output: [(-61 -26 93 -74) -74]
Test Case: 749 | Input/Output: [(-38 74 -78 50) -78]
Test Case: 750 | Input/Output: [(100 58 -100 49) -100]
Test Case: 751 | Input/Output: [(3 -20 74 -72) -72]
Test Case: 752 | Input/Output: [(55 -33 2 -96) -96]
Test Case: 753 | Input/Output: [(83 58 48 65) 48]
Test Case: 754 | Input/Output: [(21 59 49 31) 21]
Test Case: 755 | Input/Output: [(-28 -45 34 -52) -52]
Test Case: 756 | Input/Output: [(-60 87 69 -4) -60]
Test Case: 757 | Input/Output: [(-48 51 41 -32) -48]
Test Case: 758 | Input/Output: [(-2 -39 -56 -70) -70]
Test Case: 759 | Input/Output: [(74 -91 39 67) -91]
Test Case: 760 | Input/Output: [(32 8 -30 31) -30]
Test Case: 761 | Input/Output: [(-67 -77 -83 -38) -83]
Test Case: 762 | Input/Output: [(48 57 61 93) 48]
Test Case: 763 | Input/Output: [(-23 27 28 20) -23]
Test Case: 764 | Input/Output: [(-39 -52 82 89) -52]
Test Case: 765 | Input/Output: [(3 -96 -39 -13) -96]
Test Case: 766 | Input/Output: [(-61 -17 58 50) -61]
Test Case: 767 | Input/Output: [(74 -74 -36 90) -74]
Test Case: 768 | Input/Output: [(-60 -25 94 -33) -60]
Test Case: 769 | Input/Output: [(-27 49 -20 46) -27]
Test Case: 770 | Input/Output: [(74 -49 41 77) -49]
Test Case: 771 | Input/Output: [(29 -11 85 -28) -28]
Test Case: 772 | Input/Output: [(99 -36 -50 12) -50]
Test Case: 773 | Input/Output: [(81 46 -70 -77) -77]
Test Case: 774 | Input/Output: [(98 89 -12 -15) -15]
Test Case: 775 | Input/Output: [(38 -6 -16 86) -16]
Test Case: 776 | Input/Output: [(-89 -35 51 4) -89]
Test Case: 777 | Input/Output: [(-77 -19 -72 61) -77]
Test Case: 778 | Input/Output: [(-22 92 52 -83) -83]
Test Case: 779 | Input/Output: [(-17 7 86 78) -17]
Test Case: 780 | Input/Output: [(-45 -65 12 4) -65]
Test Case: 781 | Input/Output: [(-91 -92 94 -85) -92]
Test Case: 782 | Input/Output: [(-96 -82 -79 99) -96]
Test Case: 783 | Input/Output: [(-80 45 45 -77) -80]
Test Case: 784 | Input/Output: [(-76 -18 17 45) -76]
Test Case: 785 | Input/Output: [(67 100 -90 90) -90]
Test Case: 786 | Input/Output: [(-4 25 -9 -14) -14]
Test Case: 787 | Input/Output: [(-43 -4 88 11) -43]
Test Case: 788 | Input/Output: [(-22 2 -3 48) -22]
Test Case: 789 | Input/Output: [(32 -69 81 -72) -72]
Test Case: 790 | Input/Output: [(100 64 48 82) 48]
Test Case: 791 | Input/Output: [(-92 -47 -77 68) -92]
Test Case: 792 | Input/Output: [(-90 55 14 99) -90]
Test Case: 793 | Input/Output: [(-23 -86 27 99) -86]
Test Case: 794 | Input/Output: [(2 -24 -90 -80) -90]
Test Case: 795 | Input/Output: [(-69 96 72 -49) -69]
Test Case: 796 | Input/Output: [(-31 86 -15 -15) -31]
Test Case: 797 | Input/Output: [(-62 55 -95 13) -95]
Test Case: 798 | Input/Output: [(-51 61 57 -31) -51]
Test Case: 799 | Input/Output: [(-4 -66 76 37) -66]
Test Case: 800 | Input/Output: [(14 -99 37 29) -99]
Test Case: 801 | Input/Output: [(-19 85 -28 -65) -65]
Test Case: 802 | Input/Output: [(70 15 78 -13) -13]
Test Case: 803 | Input/Output: [(59 -23 93 -3) -23]
Test Case: 804 | Input/Output: [(10 14 -5 -25) -25]
Test Case: 805 | Input/Output: [(17 -83 21 -83) -83]
Test Case: 806 | Input/Output: [(-55 -13 84 -17) -55]
Test Case: 807 | Input/Output: [(-56 -70 -96 -93) -96]
Test Case: 808 | Input/Output: [(-36 -59 -71 9) -71]
Test Case: 809 | Input/Output: [(-61 -53 82 -54) -61]
Test Case: 810 | Input/Output: [(92 -6 -7 -74) -74]
Test Case: 811 | Input/Output: [(-25 98 9 -26) -26]
Test Case: 812 | Input/Output: [(19 88 76 23) 19]
Test Case: 813 | Input/Output: [(-63 24 -65 -72) -72]
Test Case: 814 | Input/Output: [(65 -37 33 68) -37]
Test Case: 815 | Input/Output: [(49 97 -28 -45) -45]
Test Case: 816 | Input/Output: [(9 98 34 27) 9]
Test Case: 817 | Input/Output: [(-36 96 34 21) -36]
Test Case: 818 | Input/Output: [(-72 -50 62 -29) -72]
Test Case: 819 | Input/Output: [(25 -14 -64 -8) -64]
Test Case: 820 | Input/Output: [(40 74 -34 -68) -68]
Test Case: 821 | Input/Output: [(-44 33 -82 50) -82]
Test Case: 822 | Input/Output: [(83 -91 13 67) -91]
Test Case: 823 | Input/Output: [(-76 -90 63 2) -90]
Test Case: 824 | Input/Output: [(-74 11 -52 27) -74]
Test Case: 825 | Input/Output: [(15 77 75 62) 15]
Test Case: 826 | Input/Output: [(-11 -14 6 58) -14]
Test Case: 827 | Input/Output: [(-100 -66 -58 -74) -100]
Test Case: 828 | Input/Output: [(-82 -60 -91 -88) -91]
Test Case: 829 | Input/Output: [(-43 55 91 -70) -70]
Test Case: 830 | Input/Output: [(78 -62 28 25) -62]
Test Case: 831 | Input/Output: [(-34 1 -93 39) -93]
Test Case: 832 | Input/Output: [(-18 -76 72 -65) -76]
Test Case: 833 | Input/Output: [(-44 -37 -84 -43) -84]
Test Case: 834 | Input/Output: [(-24 52 -22 -38) -38]
Test Case: 835 | Input/Output: [(-97 -74 -48 -87) -97]
Test Case: 836 | Input/Output: [(-52 73 30 83) -52]
Test Case: 837 | Input/Output: [(22 90 -55 -40) -55]
Test Case: 838 | Input/Output: [(-80 -53 68 -10) -80]
Test Case: 839 | Input/Output: [(52 53 -36 20) -36]
Test Case: 840 | Input/Output: [(-42 74 29 -70) -70]
Test Case: 841 | Input/Output: [(8 -89 -23 60) -89]
Test Case: 842 | Input/Output: [(56 27 -9 56) -9]
Test Case: 843 | Input/Output: [(48 91 -42 -54) -54]
Test Case: 844 | Input/Output: [(-41 -12 28 26) -41]
Test Case: 845 | Input/Output: [(4 86 45 -7) -7]
Test Case: 846 | Input/Output: [(54 -74 -46 24) -74]
Test Case: 847 | Input/Output: [(-20 -86 -13 37) -86]
Test Case: 848 | Input/Output: [(-77 -54 -98 2) -98]
Test Case: 849 | Input/Output: [(-95 -54 57 35) -95]
Test Case: 850 | Input/Output: [(85 -22 82 30) -22]
Test Case: 851 | Input/Output: [(-74 11 -12 -17) -74]
Test Case: 852 | Input/Output: [(26 74 23 -34) -34]
Test Case: 853 | Input/Output: [(2 15 -75 -60) -75]
Test Case: 854 | Input/Output: [(37 -79 52 64) -79]
Test Case: 855 | Input/Output: [(-65 -52 5 80) -65]
Test Case: 856 | Input/Output: [(-69 12 3 34) -69]
Test Case: 857 | Input/Output: [(-14 -80 40 -15) -80]
Test Case: 858 | Input/Output: [(-43 -23 -68 -13) -68]
Test Case: 859 | Input/Output: [(2 26 30 -23) -23]
Test Case: 860 | Input/Output: [(-89 -13 -9 -17) -89]
Test Case: 861 | Input/Output: [(-19 36 92 3) -19]
Test Case: 862 | Input/Output: [(46 37 -76 57) -76]
Test Case: 863 | Input/Output: [(85 7 -40 25) -40]
Test Case: 864 | Input/Output: [(-97 18 82 79) -97]
Test Case: 865 | Input/Output: [(-62 -46 -62 49) -62]
Test Case: 866 | Input/Output: [(73 4 -22 -27) -27]
Test Case: 867 | Input/Output: [(-55 15 71 -100) -100]
Test Case: 868 | Input/Output: [(32 -33 35 60) -33]
Test Case: 869 | Input/Output: [(-78 55 -11 68) -78]
Test Case: 870 | Input/Output: [(-7 28 21 -44) -44]
Test Case: 871 | Input/Output: [(-27 55 3 80) -27]
Test Case: 872 | Input/Output: [(-60 87 -69 -87) -87]
Test Case: 873 | Input/Output: [(-62 -37 -28 30) -62]
Test Case: 874 | Input/Output: [(96 96 -94 34) -94]
Test Case: 875 | Input/Output: [(84 -2 26 -67) -67]
Test Case: 876 | Input/Output: [(65 13 -89 0) -89]
Test Case: 877 | Input/Output: [(-31 11 61 -25) -31]
Test Case: 878 | Input/Output: [(30 56 59 24) 24]
Test Case: 879 | Input/Output: [(-51 -67 61 -99) -99]
Test Case: 880 | Input/Output: [(-56 69 26 80) -56]
Test Case: 881 | Input/Output: [(60 -36 52 -96) -96]
Test Case: 882 | Input/Output: [(-44 37 44 99) -44]
Test Case: 883 | Input/Output: [(84 22 -36 -89) -89]
Test Case: 884 | Input/Output: [(98 -48 -58 -55) -58]
Test Case: 885 | Input/Output: [(72 -63 26 -94) -94]
Test Case: 886 | Input/Output: [(0 55 -29 8) -29]
Test Case: 887 | Input/Output: [(-55 -75 50 3) -75]
Test Case: 888 | Input/Output: [(15 -67 -84 -36) -84]
Test Case: 889 | Input/Output: [(13 93 23 -75) -75]
Test Case: 890 | Input/Output: [(-60 57 75 48) -60]
Test Case: 891 | Input/Output: [(78 -18 -67 9) -67]
Test Case: 892 | Input/Output: [(-30 50 -59 -82) -82]
Test Case: 893 | Input/Output: [(-72 -82 4 -22) -82]
Test Case: 894 | Input/Output: [(-68 -3 -93 41) -93]
Test Case: 895 | Input/Output: [(-25 -89 -2 -52) -89]
Test Case: 896 | Input/Output: [(-51 -71 -37 -35) -71]
Test Case: 897 | Input/Output: [(93 22 4 -28) -28]
Test Case: 898 | Input/Output: [(74 -55 -59 11) -59]
Test Case: 899 | Input/Output: [(68 30 10 -83) -83]
Test Case: 900 | Input/Output: [(-13 -17 -17 -89) -89]
Test Case: 901 | Input/Output: [(1 6 87 58) 1]
Test Case: 902 | Input/Output: [(77 -4 -98 56) -98]
Test Case: 903 | Input/Output: [(19 -25 -6 -91) -91]
Test Case: 904 | Input/Output: [(-47 47 73 -66) -66]
Test Case: 905 | Input/Output: [(27 -45 -53 -43) -53]
Test Case: 906 | Input/Output: [(-78 33 -90 8) -90]
Test Case: 907 | Input/Output: [(-26 37 12 -67) -67]
Test Case: 908 | Input/Output: [(27 -70 -35 53) -70]
Test Case: 909 | Input/Output: [(-68 78 -98 4) -98]
Test Case: 910 | Input/Output: [(-37 63 80 -70) -70]
Test Case: 911 | Input/Output: [(74 70 -32 19) -32]
Test Case: 912 | Input/Output: [(-26 95 -70 -39) -70]
Test Case: 913 | Input/Output: [(-38 37 42 85) -38]
Test Case: 914 | Input/Output: [(89 -51 -97 -57) -97]
Test Case: 915 | Input/Output: [(-55 23 -12 53) -55]
Test Case: 916 | Input/Output: [(-13 -2 40 -34) -34]
Test Case: 917 | Input/Output: [(-22 -10 -6 100) -22]
Test Case: 918 | Input/Output: [(-81 84 -49 8) -81]
Test Case: 919 | Input/Output: [(73 31 42 -73) -73]
Test Case: 920 | Input/Output: [(94 -29 22 -94) -94]
Test Case: 921 | Input/Output: [(-86 23 21 65) -86]
Test Case: 922 | Input/Output: [(-76 92 24 4) -76]
Test Case: 923 | Input/Output: [(-55 54 -24 -18) -55]
Test Case: 924 | Input/Output: [(-2 -19 79 60) -19]
Test Case: 925 | Input/Output: [(-17 48 60 -90) -90]
Test Case: 926 | Input/Output: [(66 42 -31 17) -31]
Test Case: 927 | Input/Output: [(-15 -56 -45 11) -56]
Test Case: 928 | Input/Output: [(12 -62 -23 -40) -62]
Test Case: 929 | Input/Output: [(35 39 -47 -7) -47]
Test Case: 930 | Input/Output: [(-8 30 -85 49) -85]
Test Case: 931 | Input/Output: [(100 -8 41 37) -8]
Test Case: 932 | Input/Output: [(61 38 25 -2) -2]
Test Case: 933 | Input/Output: [(64 43 -95 25) -95]
Test Case: 934 | Input/Output: [(56 -34 -5 35) -34]
Test Case: 935 | Input/Output: [(-81 -21 -37 67) -81]
Test Case: 936 | Input/Output: [(-86 -56 -12 30) -86]
Test Case: 937 | Input/Output: [(-97 21 19 -91) -97]
Test Case: 938 | Input/Output: [(0 -7 -89 38) -89]
Test Case: 939 | Input/Output: [(-54 34 82 96) -54]
Test Case: 940 | Input/Output: [(9 -76 6 -55) -76]
Test Case: 941 | Input/Output: [(-4 7 -29 29) -29]
Test Case: 942 | Input/Output: [(-27 39 -62 56) -62]
Test Case: 943 | Input/Output: [(-88 -49 -79 51) -88]
Test Case: 944 | Input/Output: [(44 -48 78 -51) -51]
Test Case: 945 | Input/Output: [(7 -75 -60 -32) -75]
Test Case: 946 | Input/Output: [(31 31 -70 75) -70]
Test Case: 947 | Input/Output: [(-45 21 -10 -15) -45]
Test Case: 948 | Input/Output: [(27 22 -83 51) -83]
Test Case: 949 | Input/Output: [(58 25 99 -27) -27]
Test Case: 950 | Input/Output: [(-92 87 56 30) -92]
Test Case: 951 | Input/Output: [(-37 -20 -8 -7) -37]
Test Case: 952 | Input/Output: [(-84 -32 10 -15) -84]
Test Case: 953 | Input/Output: [(44 48 -48 65) -48]
Test Case: 954 | Input/Output: [(42 32 28 -89) -89]
Test Case: 955 | Input/Output: [(-57 -35 -75 -85) -85]
Test Case: 956 | Input/Output: [(-21 46 100 -67) -67]
Test Case: 957 | Input/Output: [(-77 5 80 16) -77]
Test Case: 958 | Input/Output: [(-36 -2 5 -10) -36]
Test Case: 959 | Input/Output: [(14 50 55 -97) -97]
Test Case: 960 | Input/Output: [(57 -44 89 -15) -44]
Test Case: 961 | Input/Output: [(26 78 -71 4) -71]
Test Case: 962 | Input/Output: [(63 28 45 47) 28]
Test Case: 963 | Input/Output: [(5 76 50 -9) -9]
Test Case: 964 | Input/Output: [(15 85 13 -72) -72]
Test Case: 965 | Input/Output: [(-34 -7 37 -62) -62]
Test Case: 966 | Input/Output: [(-19 66 50 -1) -19]
Test Case: 967 | Input/Output: [(-93 10 89 29) -93]
Test Case: 968 | Input/Output: [(25 37 68 39) 25]
Test Case: 969 | Input/Output: [(-30 -59 -100 55) -100]
Test Case: 970 | Input/Output: [(-85 93 -53 48) -85]
Test Case: 971 | Input/Output: [(12 59 60 3) 3]
Test Case: 972 | Input/Output: [(-13 -32 -10 78) -32]
Test Case: 973 | Input/Output: [(100 -92 3 86) -92]
Test Case: 974 | Input/Output: [(-54 84 -11 87) -54]
Test Case: 975 | Input/Output: [(53 -98 -25 -75) -98]
Test Case: 976 | Input/Output: [(-32 -3 -58 81) -58]
Test Case: 977 | Input/Output: [(-59 61 51 -35) -59]
Test Case: 978 | Input/Output: [(35 64 -34 78) -34]
Test Case: 979 | Input/Output: [(-31 -45 -21 75) -45]
Test Case: 980 | Input/Output: [(-33 22 -23 -91) -91]
Test Case: 981 | Input/Output: [(-58 86 -14 -13) -58]
Test Case: 982 | Input/Output: [(-83 -37 -80 7) -83]
Test Case: 983 | Input/Output: [(-86 68 68 9) -86]
Test Case: 984 | Input/Output: [(-14 77 0 -14) -14]
Test Case: 985 | Input/Output: [(-70 -79 -55 -85) -85]
Test Case: 986 | Input/Output: [(63 46 -8 0) -8]
Test Case: 987 | Input/Output: [(-26 91 65 92) -26]
Test Case: 988 | Input/Output: [(91 44 37 51) 37]
Test Case: 989 | Input/Output: [(-80 8 -67 -1) -80]
Test Case: 990 | Input/Output: [(-38 2 37 -15) -38]
Test Case: 991 | Input/Output: [(-74 75 -40 66) -74]
Test Case: 992 | Input/Output: [(-96 -87 -48 82) -96]
Test Case: 993 | Input/Output: [(11 26 -55 98) -55]
Test Case: 994 | Input/Output: [(55 81 -7 97) -7]
Test Case: 995 | Input/Output: [(3 -12 72 -52) -52]
Test Case: 996 | Input/Output: [(-83 32 -59 15) -83]
Test Case: 997 | Input/Output: [(68 25 -73 25) -73]
Test Case: 998 | Input/Output: [(-85 -43 -80 -100) -100]
Test Case: 999 | Input/Output: [(-57 35 0 74) -57]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 2 105 -46 61 -60 40 59 80 111 46 90 -42 107 66 -7 32
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-12 -78 -12 -12] -78] [[81 -20 -20 -20] -20] [[-47 24 24 24] -47] [[-24 -24 -67 -24] -67] [[34 -26 34 34] -26] [[-28 -28 72 -28] -28] [[55 55 -54 55] -54] [[-76 -76 -76 -6] -76] [[9 9 64 9] 9] [[54 54 54 -42] -42] [(96 96 96 96) 96] [(-77 -77 -77 -77) -77] [(50 50 50 50) 50] [(78 78 78 78) 78] [(68 68 68 68) 68] [(32 34 13 85) 13] [(93 25 3 96) 3] [(75 32 1 3) 1] [(96 58 20 39) 20] [(8 94 4 34) 4] [(78 76 29 19) 19] [(29 56 55 15) 15] [(67 99 63 33) 33] [(41 64 42 30) 30] [(96 25 93 14) 14] [(77 73 49 44) 44] [(12 61 86 21) 12] [(30 12 1 56) 1] [(88 9 15 13) 9] [(41 67 77 66) 41] [(69 36 47 0) 0] [(38 94 41 49) 38] [(52 10 66 13) 10] [(32 88 92 17) 17] [(36 75 48 73) 36] [(15 59 73 27) 15] [(87 -57 -1 -34) -57] [(-24 -95 76 -47) -95] [(-38 -72 -53 -73) -73] [(-66 32 40 56) -66] [(-6 88 -11 43) -11] [(-57 -12 49 4) -57] [(86 48 -95 -38) -95] [(-53 75 28 -31) -53] [(-11 -56 40 -3) -56] [(-79 82 -48 -5) -79] [(92 -6 19 92) -6] [(-65 37 25 82) -65] [(-19 -71 -5 -76) -76] [(25 -73 97 -73) -73] [(-70 -60 -28 -46) -70] [(37 -68 -33 -69) -69] [(-19 82 5 49) -19] [(29 95 25 -98) -98] [(59 1 -48 -62) -62] [(-92 11 85 80) -92] [(72 55 -4 -70) -70] [(8 61 -76 -30) -76] [(-67 31 4 -65) -67] [(4 3 -16 -44) -44] [(-45 49 85 20) -45] [(43 20 89 88) 20] [(-48 -89 -24 -27) -89] [(22 -68 18 44) -68] [(-2 -59 99 31) -59] [(-52 34 -96 -45) -96] [(-47 16 -17 -71) -71] [(-18 84 48 0) -18] [(-72 -43 96 72) -72] [(97 -55 92 63) -55] [(-94 85 -42 39) -94] [(20 -19 41 -77) -77] [(78 -81 -43 79) -81] [(-73 -59 -69 -78) -78] [(77 32 -46 30) -46] [(90 60 56 -25) -25] [(-38 52 69 -35) -38] [(-4 -68 8 -85) -85] [(61 -26 99 -66) -66] [(-78 -7 -28 -39) -78] [(60 -56 -48 -32) -56] [(0 -60 15 84) -60] [(81 -61 -34 25) -61] [(-30 41 99 -49) -49] [(-52 -73 -26 -85) -85] [(-59 32 -83 32) -83] [(-72 73 24 95) -72] [(56 9 -14 1) -14] [(-43 97 73 -73) -73] [(-21 -7 62 93) -21] [(-19 -89 19 13) -89] [(-81 2 -91 -47) -91] [(-59 -55 -88 4) -88] [(37 25 36 40) 25] [(25 33 -55 -97) -97])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: 72                 
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 64                 
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 29                 
Correct output: 15                  | Program output: 55                 
Correct output: 33                  | Program output: 63                 
Correct output: 30                  | Program output: 42                 
Correct output: 14                  | Program output: 93                 
Correct output: 44                  | Program output: 49                 
Correct output: 12                  | Program output: 86                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 15                 
Correct output: 41                  | Program output: 77                 
Correct output: 0                   | Program output: 47                 
Correct output: 38                  | Program output: 41                 
Correct output: 10                  | Program output: 66                 
Correct output: 17                  | Program output: 92                 
Correct output: 36                  | Program output: 48                 
Correct output: 15                  | Program output: 73                 
Correct output: -57                 | Program output: -1                 
Correct output: -95                 | Program output: 76                 
Correct output: -73                 | Program output: -53                
Correct output: -66                 | Program output: 40                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: 49                 
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: 28                 
Correct output: -56                 | Program output: 40                 
Correct output: -79                 | Program output: -48                
Correct output: -6                  | Program output: 19                 
Correct output: -65                 | Program output: 25                 
Correct output: -76                 | Program output: -5                 
Correct output: -73                 | Program output: 97                 
Correct output: -70                 | Program output: -28                
Correct output: -69                 | Program output: -33                
Correct output: -19                 | Program output: 5                  
Correct output: -98                 | Program output: 25                 
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: 85                 
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: 4                  
Correct output: -44                 | Program output: -16                
Correct output: -45                 | Program output: 85                 
Correct output: 20                  | Program output: 89                 
Correct output: -89                 | Program output: -24                
Correct output: -68                 | Program output: 18                 
Correct output: -59                 | Program output: 99                 
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -17                
Correct output: -18                 | Program output: 48                 
Correct output: -72                 | Program output: 96                 
Correct output: -55                 | Program output: 92                 
Correct output: -94                 | Program output: -42                
Correct output: -77                 | Program output: 41                 
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 56                 
Correct output: -38                 | Program output: 69                 
Correct output: -85                 | Program output: 8                  
Correct output: -66                 | Program output: 99                 
Correct output: -78                 | Program output: -28                
Correct output: -56                 | Program output: -48                
Correct output: -60                 | Program output: 15                 
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: 99                 
Correct output: -85                 | Program output: -26                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: 24                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: 73                 
Correct output: -21                 | Program output: 62                 
Correct output: -89                 | Program output: 19                 
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 36                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 1, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 0, :instruction tag_exec_20} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 1, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction print_exec} {:close 0, :instruction 59} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*count})
Lexicase best program: (exec_when (print_boolean) in4 exec_stackdepth integer_swap in3 print_integer integer_fromboolean exec_y_when_autoconstructing (exec_swap (integer_lt exec_flush integer_stackdepth exec_y (integer_empty tag_exec_20 (integer_gt integer_min integer_empty in3) print_integer boolean_pop boolean_frominteger) integer_swap integer_yankdup integer_add integer_gt integer_eq integer_yankdup exec_eq) (exec_yankdup integer_dup exec_swap (integer_mult integer_fromboolean integer_max exec_y () boolean_swap boolean_frominteger boolean_or print_exec () exec_do*times (exec_stackdepth boolean_swap exec_k (boolean_and boolean_or) (integer_eq integer_yank exec_shove (boolean_yankdup exec_empty in3) print_exec (59 exec_k_when_autoconstructing (integer_yankdup boolean_flush boolean_dup_items) (integer_empty boolean_eq exec_y (integer_shove integer_lte in1) integer_lte) integer_shove) exec_do*count ()))) ())))
Lexicase best errors: [1 1 1 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 88
Percent parens: 0.227
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 1, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 0, :instruction tag_exec_20} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 1, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction print_exec} {:close 0, :instruction 59} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*count})
Zero cases best program: (exec_when (print_boolean) in4 exec_stackdepth integer_swap in3 print_integer integer_fromboolean exec_y_when_autoconstructing (exec_swap (integer_lt exec_flush integer_stackdepth exec_y (integer_empty tag_exec_20 (integer_gt integer_min integer_empty in3) print_integer boolean_pop boolean_frominteger) integer_swap integer_yankdup integer_add integer_gt integer_eq integer_yankdup exec_eq) (exec_yankdup integer_dup exec_swap (integer_mult integer_fromboolean integer_max exec_y () boolean_swap boolean_frominteger boolean_or print_exec () exec_do*times (exec_stackdepth boolean_swap exec_k (boolean_and boolean_or) (integer_eq integer_yank exec_shove (boolean_yankdup exec_empty in3) print_exec (59 exec_k_when_autoconstructing (integer_yankdup boolean_flush boolean_dup_items) (integer_empty boolean_eq exec_y (integer_shove integer_lte in1) integer_lte) integer_shove) exec_do*count ()))) ())))
Zero cases best errors: [1 1 1 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 88
Percent parens: 0.227
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 2 3 2 5 2 12 3 2 3)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (2 2 3 2 5 2 12 3 2 3)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 1, :instruction exec_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_if})
Best program: (exec_yankdup in1 integer_dup_items integer_fromboolean in3 integer_dup_times boolean_dup integer_lt print_integer exec_swap (exec_dup_times (integer_dup_items) exec_eq integer_fromboolean) (boolean_eq exec_do*while (integer_dup_times) exec_s (integer_lt exec_y_when_autoconstructing (exec_s (integer_lt integer_yank exec_do*times (exec_y (exec_flush) print_newline boolean_yank integer_eq boolean_and exec_while (boolean_yank integer_div integer_empty) exec_eq integer_lt integer_pop integer_rot integer_yankdup integer_fromboolean boolean_empty) integer_mult exec_shove () integer_flush exec_dup_items boolean_yankdup integer_yankdup boolean_invert_first_then_and exec_k (in2 integer_sub exec_if () ()) ()) () ())) () ()))
Errors: [1 1 1 0 0 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 52
Size: 72
Percent parens: 0.278
--- Population Statistics ---
Average total errors in population: 9.964
Median total errors in population: 10
Error averages by case: (0.998 0.998 0.997 0.998 0.995 0.998 0.988 0.997 0.998 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.601
Average program size in population (points): 69.423
Average percent parens in population: 0.276
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.276
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 459128
--- Timings ---
Current time: 1559583803602 milliseconds
Total Time:           2.8 seconds
Initialization:       0.1 seconds,  3.6%
Reproduction:         0.8 seconds, 27.9%
Fitness Testing:      1.9 seconds, 68.5%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: 81                 
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 69                 
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: 87                 
Correct output: -95                 | Program output: -24                
Correct output: -73                 | Program output: -38                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: 86                 
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -19                
Correct output: -73                 | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: 37                 
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 29                 
Correct output: -62                 | Program output: 59                 
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 72                 
Correct output: -76                 | Program output: 8                  
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: 4                  
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: 22                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -52                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 97                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: 20                 
Correct output: -81                 | Program output: 78                 
Correct output: -78                 | Program output: -73                
Correct output: -46                 | Program output: 77                 
Correct output: -25                 | Program output: 90                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -4                 
Correct output: -66                 | Program output: 61                 
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: 60                 
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: 81                 
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -52                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 56                 
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -81                
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: 25                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_171} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction exec_y} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_exec_84} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lte})
Lexicase best program: (exec_k (integer_yankdup) (tagged_171 in1 boolean_rot in3 exec_do*count (integer_shove) integer_lt exec_flush) exec_when (exec_do*range (exec_s_when_autoconstructing (exec_k () (boolean_dup integer_flush boolean_not boolean_pop boolean_dup_items) integer_fromboolean) () (in1 in1 integer_swap print_integer tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_fromboolean integer_max integer_shove exec_do*times ()) (integer_eq integer_yankdup integer_mod exec_do*count (integer_dup print_newline boolean_or integer_flush exec_do*while (boolean_shove) in3 integer_add boolean_shove boolean_stackdepth integer_pop integer_add in2)) (exec_y (exec_eq integer_gte integer_shove integer_empty boolean_dup) exec_s (integer_fromboolean print_exec (exec_dup_times (integer_dup tag_exec_84 (boolean_and exec_y (integer_shove boolean_eq integer_empty integer_pop boolean_eq boolean_stackdepth) in2) boolean_empty exec_yank integer_lte))) () ())))))
Lexicase best errors: [1 0 0 1 1 0 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 99
Percent parens: 0.253
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_171} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction exec_y} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_exec_84} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lte})
Zero cases best program: (exec_k (integer_yankdup) (tagged_171 in1 boolean_rot in3 exec_do*count (integer_shove) integer_lt exec_flush) exec_when (exec_do*range (exec_s_when_autoconstructing (exec_k () (boolean_dup integer_flush boolean_not boolean_pop boolean_dup_items) integer_fromboolean) () (in1 in1 integer_swap print_integer tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_fromboolean integer_max integer_shove exec_do*times ()) (integer_eq integer_yankdup integer_mod exec_do*count (integer_dup print_newline boolean_or integer_flush exec_do*while (boolean_shove) in3 integer_add boolean_shove boolean_stackdepth integer_pop integer_add in2)) (exec_y (exec_eq integer_gte integer_shove integer_empty boolean_dup) exec_s (integer_fromboolean print_exec (exec_dup_times (integer_dup tag_exec_84 (boolean_and exec_y (integer_shove boolean_eq integer_empty integer_pop boolean_eq boolean_stackdepth) in2) boolean_empty exec_yank integer_lte))) () ())))))
Zero cases best errors: [1 0 0 1 1 0 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 99
Percent parens: 0.253
--- Lexicase Population Statistics ---
Count of elite individuals by case: (175 293 891 1 175 288 291 292 422 425)
Population mean number of elite cases: 3.25
Count of perfect (error zero) individuals by case: (175 293 891 1 175 288 291 292 422 425)
Population mean number of perfect (error zero) cases: 3.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_171} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction exec_y} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lte})
Best program: (exec_k (integer_yankdup) (tagged_171 in1 boolean_rot in3 exec_do*count (integer_shove) integer_lt exec_flush) exec_when (exec_do*range (exec_s_when_autoconstructing (exec_k () (boolean_dup integer_flush boolean_not boolean_pop boolean_dup_items) integer_fromboolean) () (in1 in1 integer_swap print_integer tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_fromboolean integer_max integer_shove exec_do*times ()) (integer_eq integer_yankdup integer_mod exec_do*count (integer_dup print_boolean boolean_or integer_flush exec_do*while (boolean_shove) in3 integer_add boolean_shove boolean_stackdepth integer_pop integer_add in2)) (exec_y (exec_eq integer_gte integer_shove integer_empty boolean_dup) exec_s (integer_fromboolean print_exec (integer_shove boolean_eq integer_empty integer_pop boolean_eq boolean_stackdepth) in2) (boolean_empty exec_yank integer_lte) ())))))
Errors: [1 0 0 1 1 0 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 69
Size: 91
Percent parens: 0.242
--- Population Statistics ---
Average total errors in population: 6.747
Median total errors in population: 7
Error averages by case: (0.825 0.707 0.109 0.999 0.825 0.712 0.709 0.708 0.578 0.575)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.065
Average program size in population (points): 69.446
Average percent parens in population: 0.247
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.5
Median age in population: 1.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 106
Genome diversity (% unique genomes):	 0.566
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 109
Syntactic diversity (% unique Push programs):	 0.554
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 957001
--- Timings ---
Current time: 1559583806741 milliseconds
Total Time:           5.5 seconds
Initialization:       0.1 seconds,  1.8%
Reproduction:         2.4 seconds, 43.6%
Fitness Testing:      2.7 seconds, 47.9%
Report:               0.4 seconds,  6.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: 81                 
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 69                 
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: 87                 
Correct output: -95                 | Program output: -24                
Correct output: -73                 | Program output: -38                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: 86                 
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -19                
Correct output: -73                 | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: 37                 
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 29                 
Correct output: -62                 | Program output: 59                 
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 72                 
Correct output: -76                 | Program output: 8                  
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: 4                  
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: 22                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -52                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 97                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: 20                 
Correct output: -81                 | Program output: 78                 
Correct output: -78                 | Program output: -73                
Correct output: -46                 | Program output: 77                 
Correct output: -25                 | Program output: 90                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -4                 
Correct output: -66                 | Program output: 61                 
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: 60                 
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: 81                 
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -52                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 56                 
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -81                
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: 25                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_171} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction exec_y} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_exec_84} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lte})
Lexicase best program: (exec_k (integer_yankdup) (tagged_171 in1 boolean_rot in3 exec_do*count (integer_shove) integer_lt exec_flush) exec_when (exec_do*range (exec_s_when_autoconstructing (exec_k () (boolean_dup integer_flush boolean_not boolean_pop boolean_dup_items) integer_fromboolean) () (in1 in1 integer_swap print_integer tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_fromboolean integer_max integer_shove exec_do*times ()) (integer_eq integer_yankdup integer_mod exec_do*count (integer_dup boolean_stackdepth integer_pop integer_add in2)) (exec_y (exec_eq integer_gte integer_shove integer_empty boolean_dup) exec_s (integer_fromboolean print_exec (exec_dup_times (integer_dup tag_exec_84 (boolean_and exec_y (integer_shove boolean_eq integer_empty integer_pop boolean_eq boolean_stackdepth) in2) boolean_empty exec_yank integer_lte))) () ())))))
Lexicase best errors: [1 0 0 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 90
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_171} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction exec_y} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_exec_84} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lte})
Zero cases best program: (exec_k (integer_yankdup) (tagged_171 in1 boolean_rot in3 exec_do*count (integer_shove) integer_lt exec_flush) exec_when (exec_do*range (exec_s_when_autoconstructing (exec_k () (boolean_dup integer_flush boolean_not boolean_pop boolean_dup_items) integer_fromboolean) () (in1 in1 integer_swap print_integer tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_fromboolean integer_max integer_shove exec_do*times ()) (integer_eq integer_yankdup integer_mod exec_do*count (integer_dup boolean_stackdepth integer_pop integer_add in2)) (exec_y (exec_eq integer_gte integer_shove integer_empty boolean_dup) exec_s (integer_fromboolean print_exec (exec_dup_times (integer_dup tag_exec_84 (boolean_and exec_y (integer_shove boolean_eq integer_empty integer_pop boolean_eq boolean_stackdepth) in2) boolean_empty exec_yank integer_lte))) () ())))))
Zero cases best errors: [1 0 0 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 90
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (103 386 386 219 219 383 218 384 593 913)
Population mean number of elite cases: 3.80
Count of perfect (error zero) individuals by case: (103 386 386 219 219 383 218 384 593 913)
Population mean number of perfect (error zero) cases: 3.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_171} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction exec_y} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_exec_84} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lte})
Best program: (exec_k (integer_yankdup) (tagged_171 in1 boolean_rot in3 exec_do*count (integer_shove) integer_lt exec_flush) exec_when (exec_do*range (exec_s_when_autoconstructing (exec_k () (boolean_dup integer_flush boolean_not boolean_pop boolean_dup_items) integer_fromboolean) () (in1 in1 integer_swap print_integer tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_fromboolean integer_max integer_shove exec_do*times ()) (integer_eq integer_yankdup integer_mod exec_do*count (integer_dup print_boolean boolean_or integer_flush exec_do*while (boolean_shove) in3 integer_add boolean_shove boolean_stackdepth integer_pop integer_add in2)) (exec_y (exec_eq integer_gte integer_shove integer_empty boolean_dup) exec_s (integer_eq print_exec (exec_dup_times (integer_dup tag_exec_84 (boolean_and exec_y (integer_shove boolean_eq integer_empty integer_pop boolean_eq boolean_stackdepth) in2) boolean_empty exec_yank integer_lte))) () ())))))
Errors: [1 0 0 1 1 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 74
Size: 99
Percent parens: 0.253
--- Population Statistics ---
Average total errors in population: 6.196
Median total errors in population: 6
Error averages by case: (0.897 0.614 0.614 0.781 0.781 0.617 0.782 0.616 0.407 0.087)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.939
Average program size in population (points): 63.359
Average percent parens in population: 0.237
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.962
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 63
Genome diversity (% unique genomes):	 0.683
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 69
Syntactic diversity (% unique Push programs):	 0.663
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1579666
--- Timings ---
Current time: 1559583810228 milliseconds
Total Time:           9.0 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.4 seconds, 48.7%
Fitness Testing:      3.4 seconds, 37.5%
Report:               1.1 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 85                 
Correct output: 3                   | Program output: 96                 
Correct output: 1                   | Program output: 3                  
Correct output: 20                  | Program output: 39                 
Correct output: 4                   | Program output: 34                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 21                 
Correct output: 1                   | Program output: 56                 
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 66                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 49                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 73                 
Correct output: 15                  | Program output: 27                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: 56                 
Correct output: -11                 | Program output: 43                 
Correct output: -57                 | Program output: 4                  
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: 82                 
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: 49                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 80                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: 20                 
Correct output: 20                  | Program output: 88                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: 44                 
Correct output: -59                 | Program output: 31                 
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: 72                 
Correct output: -55                 | Program output: 63                 
Correct output: -94                 | Program output: 39                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 79                 
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 30                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: 84                 
Correct output: -61                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 32                 
Correct output: -72                 | Program output: 95                 
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: 93                 
Correct output: -89                 | Program output: 13                 
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: 4                  
Correct output: 25                  | Program output: 40                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 1, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction -97} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 2, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 2, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_flush} {:close 2, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_add} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 1, :instruction integer_max} {:close 0, :instruction exec_yankdup})
Lexicase best program: (exec_when (print_boolean) in4 print_integer boolean_yankdup boolean_invert_second_then_and in3 -97 integer_gt exec_pop (integer_gte in3 integer_shove) exec_k_when_autoconstructing (exec_noop exec_s () () (integer_dup_items) exec_dup_times (exec_flush print_integer)) (exec_dup () integer_shove exec_rot () (boolean_dup exec_eq exec_rot (exec_flush integer_add) (exec_flush boolean_shove exec_y (exec_rot (in4 integer_max) (exec_yankdup) ())) ()) ()))
Lexicase best errors: [0 1 0 1 1 0 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 55
Percent parens: 0.364
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 1, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction -97} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 2, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 2, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_flush} {:close 2, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_add} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 1, :instruction integer_max} {:close 0, :instruction exec_yankdup})
Zero cases best program: (exec_when (print_boolean) in4 print_integer boolean_yankdup boolean_invert_second_then_and in3 -97 integer_gt exec_pop (integer_gte in3 integer_shove) exec_k_when_autoconstructing (exec_noop exec_s () () (integer_dup_items) exec_dup_times (exec_flush print_integer)) (exec_dup () integer_shove exec_rot () (boolean_dup exec_eq exec_rot (exec_flush integer_add) (exec_flush boolean_shove exec_y (exec_rot (in4 integer_max) (exec_yankdup) ())) ()) ()))
Zero cases best errors: [0 1 0 1 1 0 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 55
Percent parens: 0.364
--- Lexicase Population Statistics ---
Count of elite individuals by case: (287 491 289 108 2 288 494 285 493 3)
Population mean number of elite cases: 2.74
Count of perfect (error zero) individuals by case: (287 491 289 108 2 288 494 285 493 3)
Population mean number of perfect (error zero) cases: 2.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction -39} {:close 0, :instruction in3} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_integer_238} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing})
Best program: (boolean_invert_first_then_and integer_sub boolean_stackdepth exec_swap () (boolean_dup_items in4 integer_inc -39 in3 integer_pop) boolean_xor integer_eq boolean_dup_times boolean_invert_first_then_and boolean_eq tag_integer_238 boolean_yankdup integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in4 boolean_invert_first_then_and print_integer boolean_dup_items exec_do*count () integer_min exec_do*count (exec_k (boolean_not) (integer_mult integer_inc integer_lte integer_dup_times integer_dec integer_yank exec_shove (integer_lte exec_k_when_autoconstructing () ()))))
Errors: [0 1 0 1 1 0 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 40
Size: 50
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 7.26
Median total errors in population: 7
Error averages by case: (0.713 0.509 0.711 0.892 0.998 0.712 0.506 0.715 0.507 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.7
Average program size in population (points): 59.036
Average percent parens in population: 0.236
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.44625
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.744
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 62
Syntactic diversity (% unique Push programs):	 0.716
Total error diversity:				 0.005
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2229295
--- Timings ---
Current time: 1559583813256 milliseconds
Total Time:          12.6 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.4 seconds, 51.2%
Fitness Testing:      4.1 seconds, 32.8%
Report:               1.9 seconds, 15.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 527
Test mean error for best: 0.52700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output: 64                 
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 29                 
Correct output: 15                  | Program output: 55                 
Correct output: 33                  | Program output: 63                 
Correct output: 30                  | Program output: 42                 
Correct output: 14                  | Program output: 93                 
Correct output: 44                  | Program output: 49                 
Correct output: 12                  | Program output: 86                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 15                 
Correct output: 41                  | Program output: 77                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 41                 
Correct output: 10                  | Program output: 66                 
Correct output: 17                  | Program output: 92                 
Correct output: 36                  | Program output: 48                 
Correct output: 15                  | Program output: 73                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: 40                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: 49                 
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: 19                 
Correct output: -65                 | Program output: 25                 
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: 5                  
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 85                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: 85                 
Correct output: 20                  | Program output: 89                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: 18                 
Correct output: -59                 | Program output: 99                 
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: 96                 
Correct output: -55                 | Program output: 92                 
Correct output: -94                 | Program output: -42                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: 15                 
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: 24                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: 62                 
Correct output: -89                 | Program output: 19                 
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 36                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction -39} {:close 0, :instruction in3} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_integer_238} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (boolean_invert_first_then_and integer_sub integer_mult exec_swap () (integer_rot in4 integer_inc -39 in3 integer_pop) boolean_xor integer_eq boolean_dup_times boolean_invert_first_then_and boolean_eq tag_integer_238 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in4 exec_do*times (print_integer) boolean_dup_items exec_do*count () integer_min exec_do*count (exec_k (boolean_not) (integer_mult integer_inc integer_lte integer_dup_times integer_dec integer_yank exec_shove (integer_lte exec_k_when_autoconstructing () ()))))
Lexicase best errors: [1 0 0 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 51
Percent parens: 0.216
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction -39} {:close 0, :instruction in3} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_integer_238} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (boolean_invert_first_then_and integer_sub integer_mult exec_swap () (integer_rot in4 integer_inc -39 in3 integer_pop) boolean_xor integer_eq boolean_dup_times boolean_invert_first_then_and boolean_eq tag_integer_238 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in4 exec_do*times (print_integer) boolean_dup_items exec_do*count () integer_min exec_do*count (exec_k (boolean_not) (integer_mult integer_inc integer_lte integer_dup_times integer_dec integer_yank exec_shove (integer_lte exec_k_when_autoconstructing () ()))))
Zero cases best errors: [1 0 0 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 51
Percent parens: 0.216
--- Lexicase Population Statistics ---
Count of elite individuals by case: (95 439 244 245 271 92 439 244 95 439)
Population mean number of elite cases: 2.60
Count of perfect (error zero) individuals by case: (95 439 244 245 271 92 439 244 95 439)
Population mean number of perfect (error zero) cases: 2.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction -39} {:close 0, :instruction in3} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_integer_238} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing})
Best program: (boolean_invert_first_then_and integer_sub integer_mult exec_swap () (integer_rot in4 integer_inc -39 in3 integer_pop) boolean_xor integer_eq boolean_dup_times boolean_invert_first_then_and boolean_eq tag_integer_238 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in4 exec_do*times (print_integer) boolean_dup_items exec_do*count () integer_min exec_do*count (exec_k (boolean_not) (integer_mult integer_inc integer_lte integer_dup_times integer_dec integer_yank exec_shove (integer_lte exec_k_when_autoconstructing () ()))))
Errors: [1 0 0 1 1 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 40
Size: 51
Percent parens: 0.216
--- Population Statistics ---
Average total errors in population: 7.397
Median total errors in population: 7
Error averages by case: (0.905 0.561 0.756 0.755 0.729 0.908 0.561 0.756 0.905 0.561)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.261
Average program size in population (points): 55.021
Average percent parens in population: 0.227
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 5.871125
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 104
Genome diversity (% unique genomes):	 0.723
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 106
Syntactic diversity (% unique Push programs):	 0.696
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2899399
--- Timings ---
Current time: 1559583816235 milliseconds
Total Time:          15.3 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.3 seconds, 54.1%
Fitness Testing:      4.8 seconds, 31.1%
Report:               2.2 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: 72                 
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 64                 
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 29                 
Correct output: 15                  | Program output: 55                 
Correct output: 33                  | Program output: 63                 
Correct output: 30                  | Program output: 42                 
Correct output: 14                  | Program output: 93                 
Correct output: 44                  | Program output: 49                 
Correct output: 12                  | Program output: 86                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 15                 
Correct output: 41                  | Program output: 77                 
Correct output: 0                   | Program output: 47                 
Correct output: 38                  | Program output: 41                 
Correct output: 10                  | Program output: 66                 
Correct output: 17                  | Program output: 92                 
Correct output: 36                  | Program output: 48                 
Correct output: 15                  | Program output: 73                 
Correct output: -57                 | Program output: -1                 
Correct output: -95                 | Program output: 76                 
Correct output: -73                 | Program output: -53                
Correct output: -66                 | Program output: 40                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: 49                 
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: 28                 
Correct output: -56                 | Program output: 40                 
Correct output: -79                 | Program output: -48                
Correct output: -6                  | Program output: 19                 
Correct output: -65                 | Program output: 25                 
Correct output: -76                 | Program output: -5                 
Correct output: -73                 | Program output: 97                 
Correct output: -70                 | Program output: -28                
Correct output: -69                 | Program output: -33                
Correct output: -19                 | Program output: 5                  
Correct output: -98                 | Program output: 25                 
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: 85                 
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: 4                  
Correct output: -44                 | Program output: -16                
Correct output: -45                 | Program output: 85                 
Correct output: 20                  | Program output: 89                 
Correct output: -89                 | Program output: -24                
Correct output: -68                 | Program output: 18                 
Correct output: -59                 | Program output: 99                 
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -17                
Correct output: -18                 | Program output: 48                 
Correct output: -72                 | Program output: 96                 
Correct output: -55                 | Program output: 92                 
Correct output: -94                 | Program output: -42                
Correct output: -77                 | Program output: 41                 
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 56                 
Correct output: -38                 | Program output: 69                 
Correct output: -85                 | Program output: 8                  
Correct output: -66                 | Program output: 99                 
Correct output: -78                 | Program output: -28                
Correct output: -56                 | Program output: -48                
Correct output: -60                 | Program output: 15                 
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: 99                 
Correct output: -85                 | Program output: -26                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: 24                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: 73                 
Correct output: -21                 | Program output: 62                 
Correct output: -89                 | Program output: 19                 
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 36                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction -39} {:close 0, :instruction in3} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_integer_238} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction exec_y} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_s} {:close 0, :instruction 91} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_exec_84} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_invert_first_then_and integer_sub integer_mult exec_swap () (integer_rot in4 integer_inc -39 in3 integer_pop) boolean_xor integer_eq boolean_dup_times boolean_invert_first_then_and boolean_eq tag_integer_238 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 integer_swap in1 boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max integer_shove exec_do*times ()) (integer_flush integer_yankdup integer_mod exec_do*count (integer_dup print_boolean boolean_or integer_flush boolean_stackdepth integer_pop integer_add in2)) (exec_y (exec_eq integer_gte integer_shove integer_empty boolean_dup) exec_s (91 print_exec (exec_dup_times (integer_dup tag_exec_84 (boolean_and exec_y (integer_shove boolean_eq integer_empty integer_pop boolean_eq boolean_stackdepth) in2) boolean_empty exec_yank integer_lte))) () ()))
Lexicase best errors: [0 0 0 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 89
Percent parens: 0.180
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction -39} {:close 0, :instruction in3} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_integer_238} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction exec_y} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_s} {:close 0, :instruction 91} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_exec_84} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lte})
Zero cases best program: (boolean_invert_first_then_and integer_sub integer_mult exec_swap () (integer_rot in4 integer_inc -39 in3 integer_pop) boolean_xor integer_eq boolean_dup_times boolean_invert_first_then_and boolean_eq tag_integer_238 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 integer_swap in1 boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max integer_shove exec_do*times ()) (integer_flush integer_yankdup integer_mod exec_do*count (integer_dup print_boolean boolean_or integer_flush boolean_stackdepth integer_pop integer_add in2)) (exec_y (exec_eq integer_gte integer_shove integer_empty boolean_dup) exec_s (91 print_exec (exec_dup_times (integer_dup tag_exec_84 (boolean_and exec_y (integer_shove boolean_eq integer_empty integer_pop boolean_eq boolean_stackdepth) in2) boolean_empty exec_yank integer_lte))) () ()))
Zero cases best errors: [0 0 0 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 89
Percent parens: 0.180
--- Lexicase Population Statistics ---
Count of elite individuals by case: (391 5 393 947 275 393 276 932 847 5)
Population mean number of elite cases: 4.46
Count of perfect (error zero) individuals by case: (391 5 393 947 275 393 276 932 847 5)
Population mean number of perfect (error zero) cases: 4.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction -39} {:close 0, :instruction in3} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing})
Best program: (boolean_invert_first_then_and integer_sub boolean_stackdepth exec_swap () (boolean_dup_times in4 integer_inc -39 in3 integer_pop) boolean_xor integer_eq boolean_dup_times boolean_invert_first_then_and boolean_eq exec_k_when_autoconstructing (boolean_yank) () integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in4 integer_pop print_integer boolean_dup_items exec_do*count () integer_min exec_do*count (exec_k (boolean_not) (integer_mult integer_inc integer_lte integer_dup_times integer_dec integer_yank exec_shove (integer_lte exec_k_when_autoconstructing () ()))))
Errors: [0 0 0 0 1 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 40
Size: 52
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 5.536
Median total errors in population: 5
Error averages by case: (0.609 0.995 0.607 0.053 0.725 0.607 0.724 0.068 0.153 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.252
Average program size in population (points): 52.77
Average percent parens in population: 0.216
Minimum age in population: 5.0
Maximum age in population: 9.25
Average age in population: 7.2399375
Median age in population: 7.3125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 123
Genome diversity (% unique genomes):	 0.709
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 130
Syntactic diversity (% unique Push programs):	 0.683
Total error diversity:				 0.008
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3648948
--- Timings ---
Current time: 1559583819000 milliseconds
Total Time:          18.3 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.1 seconds, 55.3%
Fitness Testing:      5.5 seconds, 29.8%
Report:               2.6 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 673
Test mean error for best: 0.67300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 34                 
Correct output: 3                   | Program output: 25                 
Correct output: 1                   | Program output: 32                 
Correct output: 20                  | Program output: 58                 
Correct output: 4                   | Program output: 94                 
Correct output: 19                  | Program output: 76                 
Correct output: 15                  | Program output: 56                 
Correct output: 33                  | Program output: 99                 
Correct output: 30                  | Program output: 64                 
Correct output: 14                  | Program output: 25                 
Correct output: 44                  | Program output: 73                 
Correct output: 12                  | Program output: 61                 
Correct output: 1                   | Program output: 12                 
Correct output: 9                   | Program output: 9                  
Correct output: 41                  | Program output: 67                 
Correct output: 0                   | Program output: 36                 
Correct output: 38                  | Program output: 94                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 88                 
Correct output: 36                  | Program output: 75                 
Correct output: 15                  | Program output: 59                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -72                
Correct output: -66                 | Program output: 32                 
Correct output: -11                 | Program output: 88                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: 48                 
Correct output: -53                 | Program output: 75                 
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: 82                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: 37                 
Correct output: -76                 | Program output: -71                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -60                
Correct output: -69                 | Program output: -68                
Correct output: -19                 | Program output: 82                 
Correct output: -98                 | Program output: 95                 
Correct output: -62                 | Program output: 1                  
Correct output: -92                 | Program output: 11                 
Correct output: -70                 | Program output: 55                 
Correct output: -76                 | Program output: 61                 
Correct output: -67                 | Program output: 31                 
Correct output: -44                 | Program output: 3                  
Correct output: -45                 | Program output: 49                 
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: 34                 
Correct output: -71                 | Program output: 16                 
Correct output: -18                 | Program output: 84                 
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: 85                 
Correct output: -77                 | Program output: -19                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -59                
Correct output: -46                 | Program output: 32                 
Correct output: -25                 | Program output: 60                 
Correct output: -38                 | Program output: 52                 
Correct output: -85                 | Program output: -68                
Correct output: -66                 | Program output: -26                
Correct output: -78                 | Program output: -7                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: 41                 
Correct output: -85                 | Program output: -73                
Correct output: -83                 | Program output: 32                 
Correct output: -72                 | Program output: 73                 
Correct output: -14                 | Program output: 9                  
Correct output: -73                 | Program output: 97                 
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: 2                  
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction -39} {:close 0, :instruction in3} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_integer_238} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (boolean_invert_first_then_and integer_sub integer_mult exec_swap () (integer_rot in4 integer_inc -39 in3 integer_pop) boolean_xor integer_eq boolean_dup_times boolean_invert_first_then_and boolean_eq tag_integer_238 boolean_yank integer_pop integer_rot tag_boolean_662 integer_dup_items in3 in4 exec_do*times (print_integer) boolean_dup_items exec_do*count () integer_min exec_do*count (exec_k (boolean_not) (integer_mult integer_inc integer_lte integer_dup_times integer_dec integer_yank exec_shove (integer_lte exec_k_when_autoconstructing () ()))))
Lexicase best errors: [1 0 1 0 0 1 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 51
Percent parens: 0.216
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction -39} {:close 0, :instruction in3} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_integer_238} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (boolean_invert_first_then_and integer_sub integer_mult exec_swap () (integer_rot in4 integer_inc -39 in3 integer_pop) boolean_xor integer_eq boolean_dup_times boolean_invert_first_then_and boolean_eq tag_integer_238 boolean_yank integer_pop integer_rot tag_boolean_662 integer_dup_items in3 in4 exec_do*times (print_integer) boolean_dup_items exec_do*count () integer_min exec_do*count (exec_k (boolean_not) (integer_mult integer_inc integer_lte integer_dup_times integer_dec integer_yank exec_shove (integer_lte exec_k_when_autoconstructing () ()))))
Zero cases best errors: [1 0 1 0 0 1 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 51
Percent parens: 0.216
--- Lexicase Population Statistics ---
Count of elite individuals by case: (276 201 271 201 621 3 428 704 276 201)
Population mean number of elite cases: 3.18
Count of perfect (error zero) individuals by case: (276 201 271 201 621 3 428 704 276 201)
Population mean number of perfect (error zero) cases: 3.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_integer_238} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing})
Best program: (boolean_invert_first_then_and integer_dec tag_integer_238 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in4 in2 print_integer boolean_dup_items exec_do*count () exec_dup (exec_do*count (exec_k (boolean_not) (integer_mult integer_inc integer_lte integer_dup_times integer_dec integer_yank exec_shove (integer_lte exec_k_when_autoconstructing () ())))))
Errors: [0 1 0 1 1 1 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 27
Size: 36
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.818
Median total errors in population: 7
Error averages by case: (0.724 0.799 0.729 0.799 0.379 0.997 0.572 0.296 0.724 0.799)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.393
Average program size in population (points): 59.593
Average percent parens in population: 0.208
Minimum age in population: 6.0
Maximum age in population: 10.40625
Average age in population: 9.0023125
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 114
Genome diversity (% unique genomes):	 0.694
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 118
Syntactic diversity (% unique Push programs):	 0.669
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4438719
--- Timings ---
Current time: 1559583822026 milliseconds
Total Time:          21.2 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.0 seconds, 56.6%
Fitness Testing:      6.2 seconds, 29.3%
Report:               2.9 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 527
Test mean error for best: 0.52700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output: 64                 
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 29                 
Correct output: 15                  | Program output: 55                 
Correct output: 33                  | Program output: 63                 
Correct output: 30                  | Program output: 42                 
Correct output: 14                  | Program output: 93                 
Correct output: 44                  | Program output: 49                 
Correct output: 12                  | Program output: 86                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 15                 
Correct output: 41                  | Program output: 77                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 41                 
Correct output: 10                  | Program output: 66                 
Correct output: 17                  | Program output: 92                 
Correct output: 36                  | Program output: 48                 
Correct output: 15                  | Program output: 73                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: 40                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: 49                 
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: 19                 
Correct output: -65                 | Program output: 25                 
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: 5                  
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 85                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: 85                 
Correct output: 20                  | Program output: 89                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: 18                 
Correct output: -59                 | Program output: 99                 
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: 96                 
Correct output: -55                 | Program output: 92                 
Correct output: -94                 | Program output: -42                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: 15                 
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: 24                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: 62                 
Correct output: -89                 | Program output: 19                 
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 36                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction -39} {:close 0, :instruction in3} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction tag_integer_238} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (boolean_invert_first_then_and integer_sub integer_mult exec_swap () () integer_rot in4 integer_inc -39 in3 integer_pop boolean_xor integer_eq boolean_dup_times boolean_invert_first_then_and boolean_eq tag_integer_238 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in4 exec_do*times (print_integer) boolean_dup_items exec_do*count () integer_min exec_do*count (exec_k (boolean_not) (integer_mult integer_inc integer_lte integer_dup_times integer_dec integer_yank exec_shove (integer_lte exec_k_when_autoconstructing () ()))))
Lexicase best errors: [1 0 1 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 51
Percent parens: 0.216
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction -39} {:close 0, :instruction in3} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction tag_integer_238} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (boolean_invert_first_then_and integer_sub integer_mult exec_swap () () integer_rot in4 integer_inc -39 in3 integer_pop boolean_xor integer_eq boolean_dup_times boolean_invert_first_then_and boolean_eq tag_integer_238 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in4 exec_do*times (print_integer) boolean_dup_items exec_do*count () integer_min exec_do*count (exec_k (boolean_not) (integer_mult integer_inc integer_lte integer_dup_times integer_dec integer_yank exec_shove (integer_lte exec_k_when_autoconstructing () ()))))
Zero cases best errors: [1 0 1 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 51
Percent parens: 0.216
--- Lexicase Population Statistics ---
Count of elite individuals by case: (151 334 348 4 92 350 333 91 334 475)
Population mean number of elite cases: 2.51
Count of perfect (error zero) individuals by case: (151 334 348 4 92 350 333 91 334 475)
Population mean number of perfect (error zero) cases: 2.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction -39} {:close 0, :instruction in3} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction tagged_250} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing})
Best program: (boolean_invert_first_then_and integer_sub integer_mult exec_swap () (integer_rot in4 integer_inc -39 in3 integer_pop) boolean_xor integer_eq boolean_dup_times boolean_invert_first_then_and boolean_eq tagged_250 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in4 exec_do*times (print_integer) boolean_dup_items exec_do*count () integer_min exec_do*count (exec_k (boolean_not) (integer_mult integer_inc integer_lte integer_dup_times integer_dec integer_yank exec_shove (integer_lte exec_k_when_autoconstructing () ()))))
Errors: [1 0 1 1 1 1 0 1 0 0]
Total: 6
Mean: 0.6
Genome size: 40
Size: 51
Percent parens: 0.216
--- Population Statistics ---
Average total errors in population: 7.488
Median total errors in population: 8
Error averages by case: (0.849 0.666 0.652 0.996 0.908 0.65 0.667 0.909 0.666 0.525)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.432
Average program size in population (points): 57.263
Average percent parens in population: 0.208
Minimum age in population: 7.0
Maximum age in population: 12.171875
Average age in population: 10.356375
Median age in population: 10.4375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 39
Genome diversity (% unique genomes):	 0.755
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.725
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 5322014
--- Timings ---
Current time: 1559583825172 milliseconds
Total Time:          24.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.9 seconds, 57.1%
Fitness Testing:      7.1 seconds, 29.0%
Report:               3.3 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 85                 
Correct output: 3                   | Program output: 96                 
Correct output: 1                   | Program output: 3                  
Correct output: 20                  | Program output: 39                 
Correct output: 4                   | Program output: 34                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 21                 
Correct output: 1                   | Program output: 56                 
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 66                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 49                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 73                 
Correct output: 15                  | Program output: 27                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: 56                 
Correct output: -11                 | Program output: 43                 
Correct output: -57                 | Program output: 4                  
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: 82                 
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: 49                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 80                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: 20                 
Correct output: 20                  | Program output: 88                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: 44                 
Correct output: -59                 | Program output: 31                 
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: 72                 
Correct output: -55                 | Program output: 63                 
Correct output: -94                 | Program output: 39                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 79                 
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 30                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: 84                 
Correct output: -61                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 32                 
Correct output: -72                 | Program output: 95                 
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: 93                 
Correct output: -89                 | Program output: 13                 
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: 4                  
Correct output: 25                  | Program output: 40                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (boolean_invert_first_then_and integer_sub integer_mult exec_swap () (integer_rot in4 in4 exec_do*times (print_integer) boolean_dup_items exec_do*count () integer_min exec_do*count (exec_k (boolean_not) (integer_mult integer_inc integer_lte integer_dup_times integer_dec integer_yank exec_shove (integer_lte exec_k_when_autoconstructing () ())))))
Lexicase best errors: [1 1 1 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 35
Percent parens: 0.314
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (boolean_invert_first_then_and integer_sub integer_mult exec_swap () (integer_rot in4 in4 exec_do*times (print_integer) boolean_dup_items exec_do*count () integer_min exec_do*count (exec_k (boolean_not) (integer_mult integer_inc integer_lte integer_dup_times integer_dec integer_yank exec_shove (integer_lte exec_k_when_autoconstructing () ())))))
Zero cases best errors: [1 1 1 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 35
Percent parens: 0.314
--- Lexicase Population Statistics ---
Count of elite individuals by case: (192 181 191 440 249 252 440 439 181 283)
Population mean number of elite cases: 2.85
Count of perfect (error zero) individuals by case: (192 181 191 440 249 252 440 439 181 283)
Population mean number of perfect (error zero) cases: 2.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction -39} {:close 0, :instruction in3} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_add} {:close 2, :instruction in2} {:close 0, :instruction exec_y} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_s} {:close 0, :instruction 91} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_exec_84} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lte})
Best program: (boolean_invert_first_then_and integer_sub integer_mult exec_swap () (integer_rot in4 integer_inc -39 in3 integer_pop) boolean_xor integer_eq boolean_dup_times boolean_invert_first_then_and integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in4 exec_when (print_integer) boolean_dup_items exec_do*count () boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max integer_shove exec_do*times ()) (integer_flush integer_yankdup integer_mod exec_do*count (integer_dup print_boolean boolean_or integer_flush boolean_stackdepth integer_pop integer_add in2)) (exec_y (exec_eq integer_gte integer_shove integer_empty boolean_dup) exec_s (91 print_exec (exec_dup_times (integer_dup tag_exec_84 (boolean_and exec_y (integer_shove boolean_eq integer_empty integer_pop boolean_eq boolean_stackdepth) in2) boolean_empty exec_yank integer_lte))) () ()))
Errors: [1 1 1 0 0 0 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 72
Size: 90
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 7.152
Median total errors in population: 8
Error averages by case: (0.808 0.819 0.809 0.56 0.751 0.748 0.56 0.561 0.819 0.717)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.471
Average program size in population (points): 56.872
Average percent parens in population: 0.203
Minimum age in population: 8.75
Maximum age in population: 13.5390625
Average age in population: 11.8940703125
Median age in population: 11.96875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 50
Genome diversity (% unique genomes):	 0.739
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.718
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 6149614
--- Timings ---
Current time: 1559583828766 milliseconds
Total Time:          27.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.9 seconds, 57.7%
Fitness Testing:      7.9 seconds, 28.6%
Report:               3.7 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 549
Test mean error for best: 0.54900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 69                 
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -1                 
Correct output: -95                 | Program output: -24                
Correct output: -73                 | Program output: -53                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -48                
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -5                 
Correct output: -73                 | Program output: 25                 
Correct output: -70                 | Program output: -28                
Correct output: -69                 | Program output: -33                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 29                 
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -16                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -24                
Correct output: -68                 | Program output: 22                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -17                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 97                 
Correct output: -94                 | Program output: -42                
Correct output: -77                 | Program output: 20                 
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 90                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -4                 
Correct output: -66                 | Program output: 61                 
Correct output: -78                 | Program output: -28                
Correct output: -56                 | Program output: -48                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -26                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_integer_238} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_add})
Lexicase best program: (integer_mult integer_dup integer_pop boolean_xor integer_eq boolean_dup_times boolean_invert_first_then_and boolean_eq tag_integer_238 boolean_yank integer_pop integer_rot tag_boolean_662 boolean_invert_second_then_and in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 integer_swap exec_shove (boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max integer_shove exec_do*times ()) (integer_flush integer_yankdup integer_mod exec_do*count (integer_dup print_boolean boolean_or integer_flush boolean_stackdepth integer_pop integer_add)) ()))
Lexicase best errors: [0 0 1 0 0 1 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 55
Percent parens: 0.127
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_integer_238} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_add})
Zero cases best program: (integer_mult integer_dup integer_pop boolean_xor integer_eq boolean_dup_times boolean_invert_first_then_and boolean_eq tag_integer_238 boolean_yank integer_pop integer_rot tag_boolean_662 boolean_invert_second_then_and in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 integer_swap exec_shove (boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max integer_shove exec_do*times ()) (integer_flush integer_yankdup integer_mod exec_do*count (integer_dup print_boolean boolean_or integer_flush boolean_stackdepth integer_pop integer_add)) ()))
Zero cases best errors: [0 0 1 0 0 1 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 55
Percent parens: 0.127
--- Lexicase Population Statistics ---
Count of elite individuals by case: (202 198 11 195 724 522 167 357 166 888)
Population mean number of elite cases: 3.43
Count of perfect (error zero) individuals by case: (202 198 11 195 724 522 167 357 166 888)
Population mean number of perfect (error zero) cases: 3.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_integer_238} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_add})
Best program: (integer_mult integer_dup integer_pop boolean_xor integer_eq boolean_dup_times boolean_invert_first_then_and boolean_eq tag_integer_238 boolean_yank integer_pop integer_rot tag_boolean_662 boolean_invert_second_then_and in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 integer_swap exec_shove (boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max integer_shove exec_do*times ()) (integer_flush integer_yankdup integer_mod exec_do*count (integer_dup print_boolean boolean_or integer_flush boolean_stackdepth integer_pop integer_add)) ()))
Errors: [0 0 1 0 0 1 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 48
Size: 55
Percent parens: 0.127
--- Population Statistics ---
Average total errors in population: 6.57
Median total errors in population: 6
Error averages by case: (0.798 0.802 0.989 0.805 0.276 0.478 0.833 0.643 0.834 0.112)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.261
Average program size in population (points): 49.317
Average percent parens in population: 0.188
Minimum age in population: 10.921875
Maximum age in population: 15.04296875
Average age in population: 13.2625078125
Median age in population: 13.30859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 117
Genome diversity (% unique genomes):	 0.663
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 128
Syntactic diversity (% unique Push programs):	 0.631
Total error diversity:				 0.006
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 6838400
--- Timings ---
Current time: 1559583831757 milliseconds
Total Time:          30.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.8 seconds, 57.7%
Fitness Testing:      8.5 seconds, 27.5%
Report:               4.5 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 548
Test mean error for best: 0.54800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 69                 
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -1                 
Correct output: -95                 | Program output: -24                
Correct output: -73                 | Program output: -53                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -48                
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -5                 
Correct output: -73                 | Program output: 25                 
Correct output: -70                 | Program output: -28                
Correct output: -69                 | Program output: -33                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 29                 
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -16                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -24                
Correct output: -68                 | Program output: 22                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -17                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 97                 
Correct output: -94                 | Program output: -42                
Correct output: -77                 | Program output: 20                 
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 90                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -4                 
Correct output: -66                 | Program output: 61                 
Correct output: -78                 | Program output: -28                
Correct output: -56                 | Program output: -48                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -26                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_integer_238} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_add})
Lexicase best program: (integer_mult integer_dup integer_pop boolean_xor integer_eq boolean_dup_times boolean_invert_first_then_and boolean_eq tag_integer_238 boolean_yank integer_pop integer_rot tag_boolean_662 boolean_invert_second_then_and in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 integer_swap exec_shove (boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max integer_shove exec_do*times ()) (integer_flush integer_yankdup integer_mod exec_do*count (integer_dup print_boolean boolean_or) integer_flush boolean_stackdepth integer_pop integer_add) ()))
Lexicase best errors: [0 1 1 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 55
Percent parens: 0.127
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_integer_238} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_add})
Zero cases best program: (integer_mult integer_dup integer_pop boolean_xor integer_eq boolean_dup_times boolean_invert_first_then_and boolean_eq tag_integer_238 boolean_yank integer_pop integer_rot tag_boolean_662 boolean_invert_second_then_and in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 integer_swap exec_shove (boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max integer_shove exec_do*times ()) (integer_flush integer_yankdup integer_mod exec_do*count (integer_dup print_boolean boolean_or) integer_flush boolean_stackdepth integer_pop integer_add) ()))
Zero cases best errors: [0 1 1 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 55
Percent parens: 0.127
--- Lexicase Population Statistics ---
Count of elite individuals by case: (398 224 220 399 399 224 221 856 219 223)
Population mean number of elite cases: 3.38
Count of perfect (error zero) individuals by case: (398 224 220 399 399 224 221 856 219 223)
Population mean number of perfect (error zero) cases: 3.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_integer_238} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_add})
Best program: (integer_mult integer_dup integer_pop boolean_xor integer_eq boolean_dup_times boolean_invert_first_then_and boolean_eq tag_integer_238 boolean_yank integer_pop integer_rot tag_boolean_662 boolean_invert_second_then_and in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 integer_swap boolean_frominteger boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max integer_shove exec_do*times ()) (integer_flush integer_yankdup integer_mod exec_do*count (integer_dup print_boolean boolean_or integer_flush boolean_stackdepth integer_pop integer_add)) ())
Errors: [0 1 1 0 0 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 48
Size: 54
Percent parens: 0.111
--- Population Statistics ---
Average total errors in population: 6.617
Median total errors in population: 6
Error averages by case: (0.602 0.776 0.78 0.601 0.601 0.776 0.779 0.144 0.781 0.777)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.444
Average program size in population (points): 52.18
Average percent parens in population: 0.171
Minimum age in population: 12.5
Maximum age in population: 16.59375
Average age in population: 14.7065078125
Median age in population: 14.7490234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 70
Genome diversity (% unique genomes):	 0.664
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.637
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 7541700
--- Timings ---
Current time: 1559583834694 milliseconds
Total Time:          33.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.8 seconds, 58.3%
Fitness Testing:      9.2 seconds, 27.0%
Report:               4.9 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 549
Test mean error for best: 0.54900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 69                 
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -1                 
Correct output: -95                 | Program output: -24                
Correct output: -73                 | Program output: -53                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -48                
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -5                 
Correct output: -73                 | Program output: 25                 
Correct output: -70                 | Program output: -28                
Correct output: -69                 | Program output: -33                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 29                 
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -16                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -24                
Correct output: -68                 | Program output: 22                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -17                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 97                 
Correct output: -94                 | Program output: -42                
Correct output: -77                 | Program output: 20                 
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 90                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -4                 
Correct output: -66                 | Program output: 61                 
Correct output: -78                 | Program output: -28                
Correct output: -56                 | Program output: -48                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -26                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_integer_238} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_add})
Lexicase best program: (integer_mult integer_dup integer_pop boolean_xor integer_eq boolean_dup_times boolean_invert_first_then_and boolean_eq tag_integer_238 boolean_yank integer_pop integer_rot tag_boolean_662 boolean_invert_second_then_and in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 integer_swap exec_shove (boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max integer_shove exec_do*times ()) (integer_flush integer_yankdup integer_mod exec_do*count (integer_dup print_boolean boolean_or integer_flush boolean_stackdepth integer_pop integer_add)) ()))
Lexicase best errors: [0 0 1 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 55
Percent parens: 0.127
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_integer_238} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_add})
Zero cases best program: (integer_mult integer_dup integer_pop boolean_xor integer_eq boolean_dup_times boolean_invert_first_then_and boolean_eq tag_integer_238 boolean_yank integer_pop integer_rot tag_boolean_662 boolean_invert_second_then_and in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 integer_swap exec_shove (boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max integer_shove exec_do*times ()) (integer_flush integer_yankdup integer_mod exec_do*count (integer_dup print_boolean boolean_or integer_flush boolean_stackdepth integer_pop integer_add)) ()))
Zero cases best errors: [0 0 1 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 55
Percent parens: 0.127
--- Lexicase Population Statistics ---
Count of elite individuals by case: (416 434 319 322 415 111 861 415 317 434)
Population mean number of elite cases: 4.04
Count of perfect (error zero) individuals by case: (416 434 319 322 415 111 861 415 317 434)
Population mean number of perfect (error zero) cases: 4.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_integer_238} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_add})
Best program: (integer_mult integer_dup integer_pop boolean_xor integer_eq boolean_dup_times boolean_invert_first_then_and boolean_eq tag_integer_238 boolean_yank integer_pop integer_rot tag_boolean_662 boolean_invert_second_then_and in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 integer_swap exec_shove (boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max integer_shove exec_do*times ()) (integer_flush integer_yankdup integer_mod exec_do*count (integer_dup print_boolean boolean_or boolean_and boolean_stackdepth integer_pop integer_add)) ()))
Errors: [0 0 1 1 0 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 48
Size: 55
Percent parens: 0.127
--- Population Statistics ---
Average total errors in population: 5.956
Median total errors in population: 6
Error averages by case: (0.584 0.566 0.681 0.678 0.585 0.889 0.139 0.585 0.683 0.566)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.43
Average program size in population (points): 49.537
Average percent parens in population: 0.168
Minimum age in population: 13.8125
Maximum age in population: 18.0400390625
Average age in population: 16.117892578125
Median age in population: 16.1826171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 103
Genome diversity (% unique genomes):	 0.702
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 123
Syntactic diversity (% unique Push programs):	 0.672
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.072
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 8210962
--- Timings ---
Current time: 1559583837708 milliseconds
Total Time:          36.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.8 seconds, 59.1%
Fitness Testing:      9.8 seconds, 26.5%
Report:               5.2 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 549
Test mean error for best: 0.54900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 69                 
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -1                 
Correct output: -95                 | Program output: -24                
Correct output: -73                 | Program output: -53                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -48                
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -5                 
Correct output: -73                 | Program output: 25                 
Correct output: -70                 | Program output: -28                
Correct output: -69                 | Program output: -33                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 29                 
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -16                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -24                
Correct output: -68                 | Program output: 22                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -17                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 97                 
Correct output: -94                 | Program output: -42                
Correct output: -77                 | Program output: 20                 
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 90                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -4                 
Correct output: -66                 | Program output: 61                 
Correct output: -78                 | Program output: -28                
Correct output: -56                 | Program output: -48                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -26                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_integer_238} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_add})
Lexicase best program: (boolean_invert_first_then_and integer_sub integer_mult exec_swap () (boolean_invert_first_then_and boolean_eq tag_integer_238 boolean_yank) integer_pop integer_rot tag_boolean_662 boolean_invert_second_then_and in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 integer_swap exec_shove (boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap boolean_dup exec_rot (integer_mod integer_max integer_shove exec_do*times ()) (integer_flush integer_yankdup integer_mod exec_do*count (integer_dup print_boolean boolean_or integer_flush boolean_stackdepth integer_pop integer_add)) ()))
Lexicase best errors: [0 1 0 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 55
Percent parens: 0.164
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_integer_238} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_add})
Zero cases best program: (boolean_invert_first_then_and integer_sub integer_mult exec_swap () (boolean_invert_first_then_and boolean_eq tag_integer_238 boolean_yank) integer_pop integer_rot tag_boolean_662 boolean_invert_second_then_and in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 integer_swap exec_shove (boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap boolean_dup exec_rot (integer_mod integer_max integer_shove exec_do*times ()) (integer_flush integer_yankdup integer_mod exec_do*count (integer_dup print_boolean boolean_or integer_flush boolean_stackdepth integer_pop integer_add)) ()))
Zero cases best errors: [0 1 0 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 55
Percent parens: 0.164
--- Lexicase Population Statistics ---
Count of elite individuals by case: (383 99 769 11 11 777 383 777 775 11)
Population mean number of elite cases: 4.00
Count of perfect (error zero) individuals by case: (383 99 769 11 11 777 383 777 775 11)
Population mean number of perfect (error zero) cases: 4.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_integer_238} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction tag_integer_57} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when})
Best program: (integer_mult integer_dup integer_pop boolean_xor integer_eq print_integer boolean_invert_first_then_and boolean_eq tag_integer_238 boolean_yank integer_pop integer_rot tag_boolean_662 tag_integer_57 in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 integer_swap exec_shove (boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max integer_shove exec_do*times ()) (integer_flush integer_yankdup integer_dec integer_yank exec_shove (integer_lte exec_when ())) ()))
Errors: [0 1 0 1 1 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 6.004
Median total errors in population: 6
Error averages by case: (0.617 0.901 0.231 0.989 0.989 0.223 0.617 0.223 0.225 0.989)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.721
Average program size in population (points): 49.995
Average percent parens in population: 0.145
Minimum age in population: 14.875
Maximum age in population: 19.3876953125
Average age in population: 16.98443798828125
Median age in population: 16.9580078125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 231
Genome diversity (% unique genomes):	 0.627
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 247
Syntactic diversity (% unique Push programs):	 0.588
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 8797520
--- Timings ---
Current time: 1559583840387 milliseconds
Total Time:          39.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.6 seconds, 59.6%
Fitness Testing:     10.3 seconds, 26.0%
Report:               5.6 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 85                 
Correct output: 3                   | Program output: 96                 
Correct output: 1                   | Program output: 3                  
Correct output: 20                  | Program output: 39                 
Correct output: 4                   | Program output: 34                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 21                 
Correct output: 1                   | Program output: 56                 
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 66                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 49                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 73                 
Correct output: 15                  | Program output: 27                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: 56                 
Correct output: -11                 | Program output: 43                 
Correct output: -57                 | Program output: 4                  
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: 82                 
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: 49                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 80                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: 20                 
Correct output: 20                  | Program output: 88                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: 44                 
Correct output: -59                 | Program output: 31                 
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: 72                 
Correct output: -55                 | Program output: 63                 
Correct output: -94                 | Program output: 39                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 79                 
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 30                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: 84                 
Correct output: -61                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 32                 
Correct output: -72                 | Program output: 95                 
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: 93                 
Correct output: -89                 | Program output: 13                 
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: 4                  
Correct output: 25                  | Program output: 40                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_integer_238} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Lexicase best program: (integer_mult integer_dup integer_pop boolean_xor integer_eq boolean_dup_times boolean_invert_first_then_and boolean_eq tag_integer_238 boolean_yank integer_pop integer_rot tag_boolean_662 boolean_invert_second_then_and integer_rot in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in4 integer_swap exec_shove (boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max integer_shove exec_do*times ()) (integer_flush integer_yankdup integer_mod exec_do*count ()) ()))
Lexicase best errors: [0 1 0 1 0 0 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 48
Percent parens: 0.146
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_integer_238} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Zero cases best program: (integer_mult integer_dup integer_pop boolean_xor integer_eq boolean_dup_times boolean_invert_first_then_and boolean_eq tag_integer_238 boolean_yank integer_pop integer_rot tag_boolean_662 boolean_invert_second_then_and integer_rot in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in4 integer_swap exec_shove (boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max integer_shove exec_do*times ()) (integer_flush integer_yankdup integer_mod exec_do*count ()) ()))
Zero cases best errors: [0 1 0 1 0 0 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 48
Percent parens: 0.146
--- Lexicase Population Statistics ---
Count of elite individuals by case: (883 522 269 90 268 268 268 908 516 518)
Population mean number of elite cases: 4.51
Count of perfect (error zero) individuals by case: (883 522 269 90 268 268 268 908 516 518)
Population mean number of perfect (error zero) cases: 4.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_integer_238} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Best program: (integer_mult integer_dup integer_pop boolean_xor integer_eq boolean_dup_times boolean_invert_first_then_and boolean_eq tag_integer_238 boolean_yank integer_pop integer_rot tag_boolean_662 boolean_invert_second_then_and in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in4 integer_swap boolean_dup_times boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max integer_shove exec_do*times ()) (integer_flush integer_yankdup integer_mod exec_do*count ()) ())
Errors: [0 1 0 1 0 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 41
Size: 47
Percent parens: 0.128
--- Population Statistics ---
Average total errors in population: 5.49
Median total errors in population: 5
Error averages by case: (0.117 0.478 0.731 0.91 0.732 0.732 0.732 0.092 0.484 0.482)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.446
Average program size in population (points): 49.696
Average percent parens in population: 0.146
Minimum age in population: 16.09375
Maximum age in population: 21.103515625
Average age in population: 18.67414697265625
Median age in population: 18.6939697265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 40
Genome diversity (% unique genomes):	 0.67
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 56
Syntactic diversity (% unique Push programs):	 0.619
Total error diversity:				 0.007
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 9436079
--- Timings ---
Current time: 1559583843389 milliseconds
Total Time:          42.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.6 seconds, 60.1%
Fitness Testing:     10.9 seconds, 25.6%
Report:               6.0 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 605
Test mean error for best: 0.60500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 2423               
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 8512               
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 3919               
Correct output: 4                   | Program output: 343                
Correct output: 19                  | Program output: 1928               
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 21                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 1314               
Correct output: 41                  | Program output: 66                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 49                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 73                 
Correct output: 15                  | Program output: 27                 
Correct output: -57                 | Program output: -1                 
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -53                
Correct output: -66                 | Program output: 56                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: 4                  
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -3127              
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -48                
Correct output: -6                  | Program output: 9218               
Correct output: -65                 | Program output: 8224               
Correct output: -76                 | Program output: -5                 
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -28                
Correct output: -69                 | Program output: -33                
Correct output: -19                 | Program output: 494                
Correct output: -98                 | Program output: -9824              
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: 80                 
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -653               
Correct output: -44                 | Program output: -16                
Correct output: -45                 | Program output: 20                 
Correct output: 20                  | Program output: 88                 
Correct output: -89                 | Program output: -24                
Correct output: -68                 | Program output: 4417               
Correct output: -59                 | Program output: 31                 
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -17                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: 72                 
Correct output: -55                 | Program output: 63                 
Correct output: -94                 | Program output: -42                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -857               
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -28                
Correct output: -56                 | Program output: -48                
Correct output: -60                 | Program output: 8414               
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -26                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: 9523               
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: 93                 
Correct output: -89                 | Program output: 1318               
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 40                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_integer_238} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y})
Lexicase best program: (integer_mult integer_dup integer_pop boolean_xor integer_eq boolean_dup_times boolean_invert_first_then_and boolean_eq tag_integer_238 boolean_yank integer_pop integer_rot tag_boolean_662 boolean_invert_second_then_and in3 in4 boolean_yank print_integer tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max integer_shove exec_do*times ()) (integer_flush integer_yankdup integer_mod exec_y ()) ())
Lexicase best errors: [0 1 0 1 1 0 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 37
Percent parens: 0.162
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_integer_238} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y})
Zero cases best program: (integer_mult integer_dup integer_pop boolean_xor integer_eq boolean_dup_times boolean_invert_first_then_and boolean_eq tag_integer_238 boolean_yank integer_pop integer_rot tag_boolean_662 boolean_invert_second_then_and in3 in4 boolean_yank print_integer tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max integer_shove exec_do*times ()) (integer_flush integer_yankdup integer_mod exec_y ()) ())
Zero cases best errors: [0 1 0 1 1 0 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 37
Percent parens: 0.162
--- Lexicase Population Statistics ---
Count of elite individuals by case: (625 117 443 309 120 275 437 11 119 282)
Population mean number of elite cases: 2.74
Count of perfect (error zero) individuals by case: (625 117 443 309 120 275 437 11 119 282)
Population mean number of perfect (error zero) cases: 2.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_integer_238} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count})
Best program: (integer_mult integer_dup integer_pop boolean_xor integer_eq boolean_dup_times boolean_invert_first_then_and boolean_eq tag_integer_238 boolean_yank integer_pop integer_rot tag_boolean_662 boolean_invert_second_then_and in3 in4 boolean_yank integer_pop in4 tag_boolean_662 boolean_invert_second_then_and in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 integer_swap exec_shove (boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap exec_do*count ()))
Errors: [0 1 0 1 1 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 39
Size: 42
Percent parens: 0.071
--- Population Statistics ---
Average total errors in population: 7.262
Median total errors in population: 7
Error averages by case: (0.375 0.883 0.557 0.691 0.88 0.725 0.563 0.989 0.881 0.718)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.298
Average program size in population (points): 50.472
Average percent parens in population: 0.161
Minimum age in population: 17.09375
Maximum age in population: 22.78515625
Average age in population: 19.87094995117188
Median age in population: 19.9117431640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 117
Genome diversity (% unique genomes):	 0.671
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 126
Syntactic diversity (% unique Push programs):	 0.618
Total error diversity:				 0.005
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.096
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 10216143
--- Timings ---
Current time: 1559583846348 milliseconds
Total Time:          45.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.4 seconds, 60.2%
Fitness Testing:     11.6 seconds, 25.4%
Report:               6.4 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 562
Test mean error for best: 0.56200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 96                 
Correct output: 1                   | Program output: 3                  
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 34                 
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 56                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: 43                 
Correct output: -57                 | Program output: 4                  
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: 49                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: 22                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 97                 
Correct output: -94                 | Program output: 39                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 79                 
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 30                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: 4                  
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Lexicase best program: (boolean_pop integer_sub integer_rot tag_boolean_662 boolean_invert_second_then_and in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 integer_swap exec_shove (boolean_not integer_swap integer_yank tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max in4 integer_swap exec_shove (boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max integer_shove exec_do*times ()) (integer_flush integer_yankdup integer_mod exec_do*count ()) ())) () ()))
Lexicase best errors: [1 0 1 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 56
Percent parens: 0.196
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Zero cases best program: (boolean_pop integer_sub integer_rot tag_boolean_662 boolean_invert_second_then_and in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 integer_swap exec_shove (boolean_not integer_swap integer_yank tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max in4 integer_swap exec_shove (boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max integer_shove exec_do*times ()) (integer_flush integer_yankdup integer_mod exec_do*count ()) ())) () ()))
Zero cases best errors: [1 0 1 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 56
Percent parens: 0.196
--- Lexicase Population Statistics ---
Count of elite individuals by case: (22 493 174 260 172 172 302 259 493 302)
Population mean number of elite cases: 2.65
Count of perfect (error zero) individuals by case: (22 493 174 260 172 172 302 259 493 302)
Population mean number of perfect (error zero) cases: 2.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Best program: (boolean_pop integer_sub integer_rot tag_boolean_662 boolean_invert_second_then_and in3 exec_yankdup boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max in4 integer_swap exec_shove (boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max integer_shove exec_do*times ()) (integer_flush integer_yankdup integer_mod exec_do*count ()) ())) () ())))
Errors: [1 0 1 0 1 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 45
Size: 57
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 7.351
Median total errors in population: 8
Error averages by case: (0.978 0.507 0.826 0.74 0.828 0.828 0.698 0.741 0.507 0.698)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.826
Average program size in population (points): 50.142
Average percent parens in population: 0.164
Minimum age in population: 18.09375
Maximum age in population: 23.7257080078125
Average age in population: 21.42173541259766
Median age in population: 21.408447265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 67
Genome diversity (% unique genomes):	 0.672
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 71
Syntactic diversity (% unique Push programs):	 0.622
Total error diversity:				 0.007
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.09
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 10900785
--- Timings ---
Current time: 1559583849134 milliseconds
Total Time:          48.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.2 seconds, 60.4%
Fitness Testing:     12.2 seconds, 25.2%
Report:               6.8 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 562
Test mean error for best: 0.56200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 96                 
Correct output: 1                   | Program output: 3                  
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 34                 
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 56                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: 43                 
Correct output: -57                 | Program output: 4                  
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: 49                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: 22                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 97                 
Correct output: -94                 | Program output: 39                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 79                 
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 30                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: 4                  
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction tag_integer_474} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Lexicase best program: (boolean_pop integer_sub integer_rot tag_boolean_662 boolean_invert_second_then_and in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 integer_swap exec_shove (boolean_not integer_swap integer_yank tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max in4 integer_swap exec_shove (boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max integer_shove exec_do*times ()) (tag_integer_474 integer_yankdup integer_mod exec_do*count ()) ())) () ()))
Lexicase best errors: [0 0 0 1 1 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 56
Percent parens: 0.196
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction tag_integer_474} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Zero cases best program: (boolean_pop integer_sub integer_rot tag_boolean_662 boolean_invert_second_then_and in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 integer_swap exec_shove (boolean_not integer_swap integer_yank tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max in4 integer_swap exec_shove (boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max integer_shove exec_do*times ()) (tag_integer_474 integer_yankdup integer_mod exec_do*count ()) ())) () ()))
Zero cases best errors: [0 0 0 1 1 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 56
Percent parens: 0.196
--- Lexicase Population Statistics ---
Count of elite individuals by case: (893 379 893 171 274 401 275 544 377 274)
Population mean number of elite cases: 4.48
Count of perfect (error zero) individuals by case: (893 379 893 171 274 401 275 544 377 274)
Population mean number of perfect (error zero) cases: 4.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Best program: (boolean_pop integer_sub integer_rot tag_boolean_662 boolean_invert_second_then_and in3 exec_yankdup boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max in4 integer_swap exec_shove (boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max integer_shove exec_do*times ()) (integer_flush integer_yankdup integer_mod exec_do*count ()) ())) () ())))
Errors: [0 0 0 1 1 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 45
Size: 57
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 5.519
Median total errors in population: 5
Error averages by case: (0.107 0.621 0.107 0.829 0.726 0.599 0.725 0.456 0.623 0.726)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.309
Average program size in population (points): 52.766
Average percent parens in population: 0.196
Minimum age in population: 20.6947021484375
Maximum age in population: 24.91448974609375
Average age in population: 23.14794937133789
Median age in population: 23.206787109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 92
Genome diversity (% unique genomes):	 0.601
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 96
Syntactic diversity (% unique Push programs):	 0.576
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 11765284
--- Timings ---
Current time: 1559583852064 milliseconds
Total Time:          51.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.0 seconds, 60.4%
Fitness Testing:     13.0 seconds, 25.3%
Report:               7.2 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 562
Test mean error for best: 0.56200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 96                 
Correct output: 1                   | Program output: 3                  
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 34                 
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 56                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: 43                 
Correct output: -57                 | Program output: 4                  
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: 49                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: 22                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 97                 
Correct output: -94                 | Program output: 39                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 79                 
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 30                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: 4                  
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Lexicase best program: (boolean_pop integer_sub integer_rot tag_boolean_662 boolean_invert_second_then_and in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 integer_swap exec_shove (boolean_not integer_swap integer_yank tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max in4 integer_swap exec_shove (boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max integer_shove exec_do*times ()) (integer_flush integer_yankdup integer_mod exec_do*count ()) ())) () ()))
Lexicase best errors: [0 0 1 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 56
Percent parens: 0.196
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Zero cases best program: (boolean_pop integer_sub integer_rot tag_boolean_662 boolean_invert_second_then_and in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 integer_swap exec_shove (boolean_not integer_swap integer_yank tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max in4 integer_swap exec_shove (boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max integer_shove exec_do*times ()) (integer_flush integer_yankdup integer_mod exec_do*count ()) ())) () ()))
Zero cases best errors: [0 0 1 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 56
Percent parens: 0.196
--- Lexicase Population Statistics ---
Count of elite individuals by case: (868 564 6 903 903 564 543 402 6 326)
Population mean number of elite cases: 5.09
Count of perfect (error zero) individuals by case: (868 564 6 903 903 564 543 402 6 326)
Population mean number of perfect (error zero) cases: 5.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Best program: (boolean_pop integer_sub integer_rot tag_boolean_662 boolean_invert_second_then_and in3 exec_yankdup boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max in4 integer_swap exec_shove (boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max integer_shove exec_do*times ()) (integer_flush integer_yankdup integer_mod exec_do*count ()) ())) () ())))
Errors: [0 0 1 0 0 0 0 0 1 1]
Total: 3
Mean: 0.3
Genome size: 45
Size: 57
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 4.915
Median total errors in population: 4
Error averages by case: (0.132 0.436 0.994 0.097 0.097 0.436 0.457 0.598 0.994 0.674)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.758
Average program size in population (points): 53.793
Average percent parens in population: 0.206
Minimum age in population: 21.8990478515625
Maximum age in population: 26.39694213867188
Average age in population: 24.61111181640625
Median age in population: 24.65589904785156
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 73
Genome diversity (% unique genomes):	 0.688
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 83
Syntactic diversity (% unique Push programs):	 0.647
Total error diversity:				 0.008
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 12401477
--- Timings ---
Current time: 1559583854979 milliseconds
Total Time:          54.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.9 seconds, 60.8%
Fitness Testing:     13.6 seconds, 25.1%
Report:               7.6 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 556
Test mean error for best: 0.55600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 96                 
Correct output: 1                   | Program output: 3                  
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 34                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 56                 
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 92                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: 43                 
Correct output: -57                 | Program output: 4                  
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: 49                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: 22                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 97                 
Correct output: -94                 | Program output: 39                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 79                 
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 30                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: 13                 
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: 4                  
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Lexicase best program: (boolean_pop integer_sub integer_rot tag_boolean_662 boolean_invert_second_then_and in3 exec_yankdup boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop integer_swap boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max in4 integer_swap exec_shove (boolean_not integer_swap print_integer tagged_299 integer_max in4 integer_swap boolean_frominteger boolean_not integer_swap) print_integer tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max integer_shove exec_do*times () integer_flush integer_yankdup integer_mod exec_do*count ()) () ()) () ())))
Lexicase best errors: [0 1 0 0 0 1 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 67
Percent parens: 0.179
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Zero cases best program: (boolean_pop integer_sub integer_rot tag_boolean_662 boolean_invert_second_then_and in3 exec_yankdup boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop integer_swap boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max in4 integer_swap exec_shove (boolean_not integer_swap print_integer tagged_299 integer_max in4 integer_swap boolean_frominteger boolean_not integer_swap) print_integer tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max integer_shove exec_do*times () integer_flush integer_yankdup integer_mod exec_do*count ()) () ()) () ())))
Zero cases best errors: [0 1 0 0 0 1 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 67
Percent parens: 0.179
--- Lexicase Population Statistics ---
Count of elite individuals by case: (398 154 690 689 566 140 35 35 139 139)
Population mean number of elite cases: 2.98
Count of perfect (error zero) individuals by case: (398 154 690 689 566 140 35 35 139 139)
Population mean number of perfect (error zero) cases: 2.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Best program: (boolean_pop integer_sub integer_rot tag_boolean_662 boolean_invert_second_then_and in3 exec_yankdup boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop integer_swap boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max in4 integer_swap exec_shove (boolean_not integer_swap print_integer tagged_299 integer_max in4 integer_swap boolean_frominteger boolean_not integer_swap) print_integer tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max integer_shove exec_do*times () integer_flush integer_yankdup integer_mod exec_do*count ()) () ()) () ())))
Errors: [0 1 0 0 0 1 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 55
Size: 67
Percent parens: 0.179
--- Population Statistics ---
Average total errors in population: 7.015
Median total errors in population: 7
Error averages by case: (0.602 0.846 0.31 0.311 0.434 0.86 0.965 0.965 0.861 0.861)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.62
Average program size in population (points): 55.161
Average percent parens in population: 0.209
Minimum age in population: 23.18994140625
Maximum age in population: 27.79318237304688
Average age in population: 25.98469046020508
Median age in population: 25.96873474121094
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 105
Genome diversity (% unique genomes):	 0.645
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 109
Syntactic diversity (% unique Push programs):	 0.62
Total error diversity:				 0.006
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.101
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 13133249
--- Timings ---
Current time: 1559583857877 milliseconds
Total Time:          57.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.7 seconds, 60.9%
Fitness Testing:     14.3 seconds, 25.0%
Report:               7.9 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 557
Test mean error for best: 0.55700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 96                 
Correct output: 1                   | Program output: 3                  
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 34                 
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 56                 
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 92                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: 43                 
Correct output: -57                 | Program output: 4                  
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: 49                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: 20                 
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: 22                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 97                 
Correct output: -94                 | Program output: 39                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 79                 
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 30                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: 13                 
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: 4                  
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Lexicase best program: (boolean_pop integer_sub integer_rot tag_boolean_662 boolean_invert_second_then_and in3 exec_yankdup boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 integer_swap exec_shove (boolean_not integer_rot tag_boolean_662 exec_yankdup) in3 in1 integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop integer_swap boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max in4 integer_swap exec_shove (boolean_not integer_swap print_integer tagged_299 integer_max in4 integer_swap boolean_frominteger boolean_not integer_swap) print_integer tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max integer_shove exec_do*times () integer_flush integer_yankdup integer_mod exec_do*count ()) () ()) () ())))
Lexicase best errors: [1 0 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 76
Percent parens: 0.171
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Zero cases best program: (boolean_pop integer_sub integer_rot tag_boolean_662 boolean_invert_second_then_and in3 exec_yankdup boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 integer_swap exec_shove (boolean_not integer_rot tag_boolean_662 exec_yankdup) in3 in1 integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop integer_swap boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max in4 integer_swap exec_shove (boolean_not integer_swap print_integer tagged_299 integer_max in4 integer_swap boolean_frominteger boolean_not integer_swap) print_integer tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max integer_shove exec_do*times () integer_flush integer_yankdup integer_mod exec_do*count ()) () ()) () ())))
Zero cases best errors: [1 0 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 76
Percent parens: 0.171
--- Lexicase Population Statistics ---
Count of elite individuals by case: (251 432 483 482 868 431 482 247 17 386)
Population mean number of elite cases: 4.08
Count of perfect (error zero) individuals by case: (251 432 483 482 868 431 482 247 17 386)
Population mean number of perfect (error zero) cases: 4.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Best program: (boolean_pop integer_sub integer_rot tag_boolean_662 boolean_invert_second_then_and in3 exec_yankdup exec_do*times () integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop integer_swap boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max in4 integer_swap exec_shove (boolean_not integer_swap print_integer tagged_299 integer_max in4 integer_swap boolean_frominteger boolean_not integer_swap) print_integer tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max integer_shove exec_do*times () integer_flush integer_yankdup integer_mod exec_do*count ()) () ()) () ())))
Errors: [1 0 0 0 0 0 0 1 1 0]
Total: 3
Mean: 0.3
Genome size: 55
Size: 68
Percent parens: 0.191
--- Population Statistics ---
Average total errors in population: 5.921
Median total errors in population: 7
Error averages by case: (0.749 0.568 0.517 0.518 0.132 0.569 0.518 0.753 0.983 0.614)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.862
Average program size in population (points): 58.306
Average percent parens in population: 0.198
Minimum age in population: 25.13916015625
Maximum age in population: 29.34523773193359
Average age in population: 27.88341738891602
Median age in population: 27.896484375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 111
Genome diversity (% unique genomes):	 0.671
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 116
Syntactic diversity (% unique Push programs):	 0.652
Total error diversity:				 0.008
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.098
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 13930860
--- Timings ---
Current time: 1559583860897 milliseconds
Total Time:          60.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.5 seconds, 60.9%
Fitness Testing:     15.0 seconds, 25.0%
Report:               8.4 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 556
Test mean error for best: 0.55600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 96                 
Correct output: 1                   | Program output: 3                  
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 34                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 56                 
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 92                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: 43                 
Correct output: -57                 | Program output: 4                  
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: 49                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: 22                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 97                 
Correct output: -94                 | Program output: 39                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 79                 
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 30                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: 13                 
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: 4                  
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Lexicase best program: (boolean_pop integer_sub integer_rot tag_boolean_662 boolean_invert_second_then_and in3 exec_yankdup boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop integer_swap boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max in4 integer_swap exec_shove (boolean_not integer_swap print_integer tagged_299 integer_max in4 integer_swap boolean_frominteger boolean_not integer_swap) print_integer tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max integer_shove exec_do*times () integer_flush integer_yankdup integer_mod exec_do*count ()) () ()) () ())))
Lexicase best errors: [0 1 1 1 0 1 1 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 67
Percent parens: 0.179
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Zero cases best program: (boolean_pop integer_sub integer_rot tag_boolean_662 boolean_invert_second_then_and in3 exec_yankdup boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop integer_swap boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max in4 integer_swap exec_shove (boolean_not integer_swap print_integer tagged_299 integer_max in4 integer_swap boolean_frominteger boolean_not integer_swap) print_integer tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max integer_shove exec_do*times () integer_flush integer_yankdup integer_mod exec_do*count ()) () ()) () ())))
Zero cases best errors: [0 1 1 1 0 1 1 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 67
Percent parens: 0.179
--- Lexicase Population Statistics ---
Count of elite individuals by case: (535 2 2 251 525 82 302 2 516 575)
Population mean number of elite cases: 2.79
Count of perfect (error zero) individuals by case: (535 2 2 251 525 82 302 2 516 575)
Population mean number of perfect (error zero) cases: 2.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_rot})
Best program: (boolean_pop integer_sub integer_rot tag_boolean_662 boolean_invert_second_then_and in3 exec_yankdup boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop integer_swap boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max in4 integer_swap exec_shove (boolean_not integer_swap print_integer tagged_299 integer_max in4 integer_swap boolean_frominteger boolean_not integer_swap) print_integer tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max integer_shove exec_do*times () integer_flush integer_yankdup integer_mod exec_rot () () ()) () ()) () ())))
Errors: [0 1 1 1 0 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 55
Size: 69
Percent parens: 0.203
--- Population Statistics ---
Average total errors in population: 7.208
Median total errors in population: 7
Error averages by case: (0.465 0.998 0.998 0.749 0.475 0.918 0.698 0.998 0.484 0.425)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.635
Average program size in population (points): 62.326
Average percent parens in population: 0.170
Minimum age in population: 27.89859771728516
Maximum age in population: 30.98293876647949
Average age in population: 29.43676710891724
Median age in population: 29.47280788421631
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 127
Genome diversity (% unique genomes):	 0.656
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 141
Syntactic diversity (% unique Push programs):	 0.617
Total error diversity:				 0.005
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.116
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 14686000
--- Timings ---
Current time: 1559583863881 milliseconds
Total Time:          63.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.4 seconds, 60.9%
Fitness Testing:     15.7 seconds, 24.9%
Report:               8.8 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 556
Test mean error for best: 0.55600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 96                 
Correct output: 1                   | Program output: 3                  
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 34                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 56                 
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 92                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: 43                 
Correct output: -57                 | Program output: 4                  
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: 49                 
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: 22                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 97                 
Correct output: -94                 | Program output: 39                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 79                 
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 30                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: 13                 
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: 4                  
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_while} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*count})
Lexicase best program: (boolean_pop integer_sub boolean_pop integer_sub integer_rot tag_boolean_662 boolean_invert_second_then_and in3 exec_yankdup boolean_yank integer_pop exec_while (tag_boolean_662 boolean_yankdup) in3 in1 integer_swap exec_shove (boolean_not integer_swap exec_do*range (boolean_pop integer_swap boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max in4 integer_swap exec_shove (boolean_not integer_swap print_integer tagged_299 integer_max in4 integer_swap boolean_frominteger boolean_not integer_swap) print_integer tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max integer_shove exec_do*times () integer_flush integer_yankdup exec_shove (exec_do*count ())) () ()) () ())))
Lexicase best errors: [0 1 0 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 70
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_while} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*count})
Zero cases best program: (boolean_pop integer_sub boolean_pop integer_sub integer_rot tag_boolean_662 boolean_invert_second_then_and in3 exec_yankdup boolean_yank integer_pop exec_while (tag_boolean_662 boolean_yankdup) in3 in1 integer_swap exec_shove (boolean_not integer_swap exec_do*range (boolean_pop integer_swap boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max in4 integer_swap exec_shove (boolean_not integer_swap print_integer tagged_299 integer_max in4 integer_swap boolean_frominteger boolean_not integer_swap) print_integer tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max integer_shove exec_do*times () integer_flush integer_yankdup exec_shove (exec_do*count ())) () ()) () ())))
Zero cases best errors: [0 1 0 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 70
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (350 115 219 113 276 219 265 882 292 292)
Population mean number of elite cases: 3.02
Count of perfect (error zero) individuals by case: (350 115 219 113 276 219 265 882 292 292)
Population mean number of perfect (error zero) cases: 3.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Best program: (boolean_pop integer_sub integer_rot tag_boolean_662 boolean_invert_second_then_and in3 exec_yankdup boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop integer_swap boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max in4 integer_swap exec_shove (boolean_not integer_swap print_integer tagged_299 boolean_rot in4 integer_swap boolean_frominteger boolean_not integer_swap) print_integer tagged_299 boolean_pop integer_swap integer_lt exec_rot (integer_mod integer_max integer_shove exec_do*times () integer_flush integer_yankdup integer_mod exec_do*count ()) () ()) () ())))
Errors: [0 1 0 1 1 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 55
Size: 67
Percent parens: 0.179
--- Population Statistics ---
Average total errors in population: 6.977
Median total errors in population: 7
Error averages by case: (0.65 0.885 0.781 0.887 0.724 0.781 0.735 0.118 0.708 0.708)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.153
Average program size in population (points): 64.73
Average percent parens in population: 0.179
Minimum age in population: 29.39470672607422
Maximum age in population: 32.82531356811523
Average age in population: 31.17903424453735
Median age in population: 31.2524528503418
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 90
Genome diversity (% unique genomes):	 0.658
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 94
Syntactic diversity (% unique Push programs):	 0.637
Total error diversity:				 0.007
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.107
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 15552884
--- Timings ---
Current time: 1559583866943 milliseconds
Total Time:          66.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        40.2 seconds, 60.8%
Fitness Testing:     16.5 seconds, 24.9%
Report:               9.3 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 559
Test mean error for best: 0.55900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 8634               
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 69                 
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -1                 
Correct output: -95                 | Program output: -24                
Correct output: -73                 | Program output: -53                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -48                
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -5                 
Correct output: -73                 | Program output: 25                 
Correct output: -70                 | Program output: -28                
Correct output: -69                 | Program output: -33                
Correct output: -19                 | Program output: -19-1949           
Correct output: -98                 | Program output: 29                 
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -16                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -24                
Correct output: -68                 | Program output: 22                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -17                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 97                 
Correct output: -94                 | Program output: -42                
Correct output: -77                 | Program output: 20                 
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 90                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -4-4-4             
Correct output: -66                 | Program output: 61                 
Correct output: -78                 | Program output: -28                
Correct output: -56                 | Program output: -48                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -26                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Lexicase best program: (boolean_pop integer_sub integer_rot tag_boolean_662 boolean_invert_second_then_and in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 in3 in1 integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop integer_swap) integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer tagged_299 integer_max in4 integer_swap boolean_frominteger boolean_not integer_swap) print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times () integer_flush integer_yankdup integer_mod exec_do*count ()) () ())
Lexicase best errors: [1 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 70
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Zero cases best program: (boolean_pop integer_sub integer_rot tag_boolean_662 boolean_invert_second_then_and in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 in3 in1 integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop integer_swap) integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer tagged_299 integer_max in4 integer_swap boolean_frominteger boolean_not integer_swap) print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times () integer_flush integer_yankdup integer_mod exec_do*count ()) () ())
Zero cases best errors: [1 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 70
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (212 101 463 101 102 464 428 101 784 855)
Population mean number of elite cases: 3.61
Count of perfect (error zero) individuals by case: (212 101 463 101 102 464 428 101 784 855)
Population mean number of perfect (error zero) cases: 3.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Best program: (boolean_pop integer_sub integer_rot tag_boolean_662 boolean_invert_second_then_and in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 in3 in1 integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop integer_swap) integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer tagged_299 integer_max in4 integer_swap boolean_frominteger boolean_not integer_swap) print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times () integer_flush integer_yankdup integer_mod exec_do*count ()) () ())
Errors: [1 0 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 60
Size: 70
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 6.389
Median total errors in population: 6
Error averages by case: (0.788 0.899 0.537 0.899 0.898 0.536 0.572 0.899 0.216 0.145)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.033
Average program size in population (points): 63.549
Average percent parens in population: 0.165
Minimum age in population: 30.4422607421875
Maximum age in population: 34.77623176574707
Average age in population: 32.68093172550201
Median age in population: 32.71483302116394
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 60
Genome diversity (% unique genomes):	 0.754
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.723
Total error diversity:				 0.008
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.136
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 16462214
--- Timings ---
Current time: 1559583870112 milliseconds
Total Time:          69.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        42.0 seconds, 60.7%
Fitness Testing:     17.3 seconds, 25.0%
Report:               9.8 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 00                 
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99-33             
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 75                 
Correct output: 20                  | Program output: 96                 
Correct output: 4                   | Program output: 834                
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 67                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 96                 
Correct output: 44                  | Program output: 77                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 88                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 69                 
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -24                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: 43                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: 25                 
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19-1949           
Correct output: -98                 | Program output: 29                 
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: 22                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 97                 
Correct output: -94                 | Program output: 39                 
Correct output: -77                 | Program output: 20                 
Correct output: -81                 | Program output: 79                 
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 30                 
Correct output: -25                 | Program output: 90                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -4-4-4-4           
Correct output: -66                 | Program output: 61                 
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: 25                 
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: 4                  
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 1, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Lexicase best program: (boolean_pop integer_sub integer_rot tag_boolean_662 boolean_invert_second_then_and in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 in3 in1 integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop integer_swap) integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove (boolean_not) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer tagged_299 integer_max) in4 integer_swap boolean_frominteger boolean_not integer_swap) print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times () integer_flush integer_yankdup integer_mod exec_do*count ()) () ())
Lexicase best errors: [0 0 0 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 70
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 1, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Zero cases best program: (boolean_pop integer_sub integer_rot tag_boolean_662 boolean_invert_second_then_and in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 in3 in1 integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop integer_swap) integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove (boolean_not) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer tagged_299 integer_max) in4 integer_swap boolean_frominteger boolean_not integer_swap) print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times () integer_flush integer_yankdup integer_mod exec_do*count ()) () ())
Zero cases best errors: [0 0 0 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 70
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (14 653 665 119 37 15 686 675 14 684)
Population mean number of elite cases: 3.56
Count of perfect (error zero) individuals by case: (14 653 665 119 37 15 686 675 14 684)
Population mean number of perfect (error zero) cases: 3.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Best program: (boolean_pop integer_sub integer_rot tag_boolean_662 boolean_invert_second_then_and in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 in3 in1 integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop integer_mod integer_max in4 integer_swap exec_shove () boolean_not) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer tagged_299 integer_max in4 integer_swap boolean_frominteger boolean_not integer_swap print_integer tagged_299 integer_max in4 integer_swap boolean_frominteger boolean_not integer_swap) print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times () integer_flush integer_yankdup integer_mod exec_do*count ()) () ())
Errors: [0 0 0 1 1 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 65
Size: 74
Percent parens: 0.122
--- Population Statistics ---
Average total errors in population: 6.438
Median total errors in population: 5
Error averages by case: (0.986 0.347 0.335 0.881 0.963 0.985 0.314 0.325 0.986 0.316)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.137
Average program size in population (points): 67.932
Average percent parens in population: 0.144
Minimum age in population: 31.4422607421875
Maximum age in population: 35.54010820388794
Average age in population: 33.97960333204269
Median age in population: 34.24745845794678
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 372
Genome diversity (% unique genomes):	 0.595
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 387
Syntactic diversity (% unique Push programs):	 0.566
Total error diversity:				 0.007
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.138
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 17398864
--- Timings ---
Current time: 1559583873349 milliseconds
Total Time:          72.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        43.8 seconds, 60.5%
Fitness Testing:     18.2 seconds, 25.1%
Report:              10.3 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 674
Test mean error for best: 0.67400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 34                 
Correct output: 3                   | Program output: 25                 
Correct output: 1                   | Program output: 32                 
Correct output: 20                  | Program output: 58                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 76                 
Correct output: 15                  | Program output: 56                 
Correct output: 33                  | Program output: 99                 
Correct output: 30                  | Program output: 64                 
Correct output: 14                  | Program output: 25                 
Correct output: 44                  | Program output: 73                 
Correct output: 12                  | Program output: 61                 
Correct output: 1                   | Program output: 12                 
Correct output: 9                   | Program output: 9                  
Correct output: 41                  | Program output: 67                 
Correct output: 0                   | Program output: 36                 
Correct output: 38                  | Program output: 94                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 88                 
Correct output: 36                  | Program output: 75                 
Correct output: 15                  | Program output: 59                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -72                
Correct output: -66                 | Program output: 32                 
Correct output: -11                 | Program output: 88                 
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: 48                 
Correct output: -53                 | Program output: 75                 
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: 82                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: 37                 
Correct output: -76                 | Program output: -71                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -60                
Correct output: -69                 | Program output: -68                
Correct output: -19                 | Program output: 82                 
Correct output: -98                 | Program output: 95                 
Correct output: -62                 | Program output: 1                  
Correct output: -92                 | Program output: 11                 
Correct output: -70                 | Program output: 55                 
Correct output: -76                 | Program output: 61                 
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: 3                  
Correct output: -45                 | Program output: 49                 
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: 34                 
Correct output: -71                 | Program output: 16                 
Correct output: -18                 | Program output: 84                 
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: 85                 
Correct output: -77                 | Program output: -19                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -59                
Correct output: -46                 | Program output: 32                 
Correct output: -25                 | Program output: 60                 
Correct output: -38                 | Program output: 52                 
Correct output: -85                 | Program output: -68                
Correct output: -66                 | Program output: -26                
Correct output: -78                 | Program output: -7                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: 41                 
Correct output: -85                 | Program output: -73                
Correct output: -83                 | Program output: 32                 
Correct output: -72                 | Program output: 73                 
Correct output: -14                 | Program output: 9                  
Correct output: -73                 | Program output: 97                 
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: 2                  
Correct output: -88                 | Program output: -55                
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 0, :instruction integer_swap} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Lexicase best program: (boolean_pop integer_sub integer_rot tag_boolean_662 boolean_invert_second_then_and in3 integer_swap boolean_yank integer_pop integer_rot tag_boolean_662 integer_swap integer_yank tagged_299 boolean_pop integer_swap tag_boolean_662 exec_yankdup in3 in4 in2 in2 print_integer boolean_dup_items exec_do*count () integer_min exec_do*count (exec_k (boolean_not) (integer_mult)) integer_inc exec_stackdepth integer_mod integer_max integer_shove exec_do*times () integer_flush integer_yankdup integer_mod exec_do*count ())
Lexicase best errors: [1 0 0 0 0 0 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 47
Percent parens: 0.149
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 0, :instruction integer_swap} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Zero cases best program: (boolean_pop integer_sub integer_rot tag_boolean_662 boolean_invert_second_then_and in3 integer_swap boolean_yank integer_pop integer_rot tag_boolean_662 integer_swap integer_yank tagged_299 boolean_pop integer_swap tag_boolean_662 exec_yankdup in3 in4 in2 in2 print_integer boolean_dup_items exec_do*count () integer_min exec_do*count (exec_k (boolean_not) (integer_mult)) integer_inc exec_stackdepth integer_mod integer_max integer_shove exec_do*times () integer_flush integer_yankdup integer_mod exec_do*count ())
Zero cases best errors: [1 0 0 0 0 0 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 47
Percent parens: 0.149
--- Lexicase Population Statistics ---
Count of elite individuals by case: (365 78 75 72 75 853 596 144 76 366)
Population mean number of elite cases: 2.70
Count of perfect (error zero) individuals by case: (365 78 75 72 75 853 596 144 76 366)
Population mean number of perfect (error zero) cases: 2.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Best program: (boolean_pop integer_sub integer_rot tag_boolean_662 exec_k_when_autoconstructing () (in3 in4 boolean_yank) integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 integer_swap exec_shove (boolean_not integer_swap integer_yank tagged_299 boolean_pop integer_swap tag_boolean_662 exec_yankdup) in3 in4 in2 in2 print_integer boolean_dup_items exec_yankdup integer_min exec_do*count (integer_rot boolean_not) integer_mult integer_inc exec_stackdepth integer_mod integer_max integer_shove exec_do*times () integer_flush integer_yankdup integer_mod exec_do*count ())
Errors: [1 0 0 0 0 0 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 46
Size: 53
Percent parens: 0.132
--- Population Statistics ---
Average total errors in population: 7.3
Median total errors in population: 8
Error averages by case: (0.635 0.922 0.925 0.928 0.925 0.147 0.404 0.856 0.924 0.634)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.146
Average program size in population (points): 68.102
Average percent parens in population: 0.146
Minimum age in population: 33.45313835144043
Maximum age in population: 36.91417896747589
Average age in population: 35.31061874842644
Median age in population: 35.46401596069336
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 159
Genome diversity (% unique genomes):	 0.644
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 166
Syntactic diversity (% unique Push programs):	 0.618
Total error diversity:				 0.007
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.134
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 18214472
--- Timings ---
Current time: 1559583876424 milliseconds
Total Time:          75.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.7 seconds, 60.5%
Fitness Testing:     18.9 seconds, 25.1%
Report:              10.8 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 416
Test mean error for best: 0.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 29                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 63                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 93                 
Correct output: 44                  | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 15                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 47                 
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -1                 
Correct output: -95                 | Program output: -24                
Correct output: -73                 | Program output: -53                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 19                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -19                
Correct output: -73                 | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -33                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 25                 
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -16                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: 18                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 92                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: 20                 
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 56                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -4                 
Correct output: -66                 | Program output: 61                 
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: -48                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -52                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 36                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Lexicase best program: (boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 in3 integer_min integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop integer_swap integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer) tagged_299 integer_max in4 integer_swap boolean_frominteger boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod exec_do*count ())) () ()))
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 70
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Zero cases best program: (boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 in3 integer_min integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop integer_swap integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer) tagged_299 integer_max in4 integer_swap boolean_frominteger boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod exec_do*count ())) () ()))
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 70
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (164 172 534 156 157 14 874 523 158 157)
Population mean number of elite cases: 2.91
Count of perfect (error zero) individuals by case: (164 172 534 156 157 14 874 523 158 157)
Population mean number of perfect (error zero) cases: 2.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Best program: (boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 in3 integer_min integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop integer_swap integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer) tagged_299 integer_max in4 integer_swap boolean_frominteger boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod exec_do*count ())) () ()))
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 60
Size: 70
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 7.091
Median total errors in population: 7
Error averages by case: (0.836 0.828 0.466 0.844 0.843 0.986 0.126 0.477 0.842 0.843)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.935
Average program size in population (points): 61.035
Average percent parens in population: 0.148
Minimum age in population: 34.45313835144043
Maximum age in population: 38.75034314393997
Average age in population: 36.9758306376338
Median age in population: 36.99973458051682
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 21
Genome diversity (% unique genomes):	 0.669
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.639
Total error diversity:				 0.009
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.114
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 19097396
--- Timings ---
Current time: 1559583879411 milliseconds
Total Time:          78.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.4 seconds, 60.4%
Fitness Testing:     19.8 seconds, 25.1%
Report:              11.3 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 416
Test mean error for best: 0.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 29                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 63                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 93                 
Correct output: 44                  | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 15                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 47                 
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -1                 
Correct output: -95                 | Program output: -24                
Correct output: -73                 | Program output: -53                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 19                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -19                
Correct output: -73                 | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -33                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 25                 
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -16                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: 18                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 92                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: 20                 
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 56                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -4                 
Correct output: -66                 | Program output: 61                 
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: -48                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -52                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 36                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Lexicase best program: (boolean_pop integer_sub integer_rot boolean_or exec_empty in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 in3 integer_min integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop integer_swap integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer) tagged_299 integer_max in4 integer_swap boolean_frominteger boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod exec_do*count ())) () ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 70
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Zero cases best program: (boolean_pop integer_sub integer_rot boolean_or exec_empty in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 in3 integer_min integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop integer_swap integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer) tagged_299 integer_max in4 integer_swap boolean_frominteger boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod exec_do*count ())) () ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 70
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (683 645 639 634 742 633 774 726 1000 742)
Population mean number of elite cases: 7.22
Count of perfect (error zero) individuals by case: (683 645 639 634 742 633 774 726 0 742)
Population mean number of perfect (error zero) cases: 6.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count})
Best program: (boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 in3 integer_min integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop integer_swap integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer) tagged_299 integer_max in4 integer_swap boolean_frominteger boolean_not integer_swap print_integer tagged_299 exec_eq integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup exec_do*range (exec_do*count ()))) () ()))
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 60
Size: 71
Percent parens: 0.155
--- Population Statistics ---
Average total errors in population: 3.782
Median total errors in population: 1
Error averages by case: (0.317 0.355 0.361 0.366 0.258 0.367 0.226 0.274 1.0 0.258)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 59.678
Average program size in population (points): 69.595
Average percent parens in population: 0.142
Minimum age in population: 36.46401596069336
Maximum age in population: 39.71401596069336
Average age in population: 37.27559839451313
Median age in population: 37.46401596069336
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 328
Genome diversity (% unique genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 335
Syntactic diversity (% unique Push programs):	 0.575
Total error diversity:				 0.01
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.107
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 19740064
--- Timings ---
Current time: 1559583882290 milliseconds
Total Time:          81.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.3 seconds, 60.5%
Fitness Testing:     20.4 seconds, 25.0%
Report:              11.7 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 416
Test mean error for best: 0.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 29                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 63                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 93                 
Correct output: 44                  | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 15                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 47                 
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -1                 
Correct output: -95                 | Program output: -24                
Correct output: -73                 | Program output: -53                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 19                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -19                
Correct output: -73                 | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -33                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 25                 
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -16                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: 18                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 92                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: 20                 
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 56                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -4                 
Correct output: -66                 | Program output: 61                 
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: -48                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -52                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 36                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Lexicase best program: (boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 in3 integer_min integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop integer_swap integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer) tagged_299 integer_max in4 integer_swap boolean_frominteger boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod exec_do*count ())) () ()))
Lexicase best errors: [0 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 70
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Zero cases best program: (boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 in3 integer_min integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop integer_swap integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer) tagged_299 integer_max in4 integer_swap boolean_frominteger boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod exec_do*count ())) () ()))
Zero cases best errors: [0 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 70
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (883 778 779 812 844 844 1000 781 882 844)
Population mean number of elite cases: 8.45
Count of perfect (error zero) individuals by case: (883 778 779 812 844 844 0 781 882 844)
Population mean number of perfect (error zero) cases: 7.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Best program: (boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 in3 integer_min integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop integer_swap integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer) tagged_299 integer_max in4 integer_swap boolean_frominteger boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod exec_do*count ())) () ()))
Errors: [0 0 0 0 0 0 1 0 0 0]
Total: 1
Mean: 0.1
Genome size: 60
Size: 70
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 2.553
Median total errors in population: 1
Error averages by case: (0.117 0.222 0.221 0.188 0.156 0.156 1.0 0.219 0.118 0.156)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 59.645
Average program size in population (points): 69.726
Average percent parens in population: 0.144
Minimum age in population: 37.46401596069336
Maximum age in population: 40.27651596069336
Average age in population: 38.53521549957991
Median age in population: 38.46401596069336
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 219
Genome diversity (% unique genomes):	 0.719
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 231
Syntactic diversity (% unique Push programs):	 0.697
Total error diversity:				 0.01
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.088
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 20369257
--- Timings ---
Current time: 1559583885140 milliseconds
Total Time:          84.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.2 seconds, 60.7%
Fitness Testing:     21.0 seconds, 24.9%
Report:              12.1 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 416
Test mean error for best: 0.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 29                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 63                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 93                 
Correct output: 44                  | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 15                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 47                 
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -1                 
Correct output: -95                 | Program output: -24                
Correct output: -73                 | Program output: -53                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 19                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -19                
Correct output: -73                 | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -33                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 25                 
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -16                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: 18                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 92                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: 20                 
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 56                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -4                 
Correct output: -66                 | Program output: 61                 
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: -48                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -52                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 36                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Lexicase best program: (boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 in3 integer_min integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop integer_swap integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer) tagged_299 integer_max in4 integer_swap boolean_frominteger boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap exec_k_when_autoconstructing (exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod exec_do*count ())) () ()) ()))
Lexicase best errors: [1 0 1 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 72
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Zero cases best program: (boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 in3 integer_min integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop integer_swap integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer) tagged_299 integer_max in4 integer_swap boolean_frominteger boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap exec_k_when_autoconstructing (exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod exec_do*count ())) () ()) ()))
Zero cases best errors: [1 0 1 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 72
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (70 859 37 834 1 1 758 759 774 774)
Population mean number of elite cases: 4.87
Count of perfect (error zero) individuals by case: (70 859 37 834 1 1 758 759 774 774)
Population mean number of perfect (error zero) cases: 4.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Best program: (boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 in3 integer_min integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop integer_swap integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer) tagged_299 integer_max in4 integer_swap boolean_frominteger integer_swap boolean_frominteger boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod exec_swap (exec_yankdup exec_do*times (integer_mod exec_do*count ())) ()) () ()))
Errors: [1 0 1 0 1 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 60
Size: 72
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 5.133
Median total errors in population: 4
Error averages by case: (0.93 0.141 0.963 0.166 0.999 0.999 0.242 0.241 0.226 0.226)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.599
Average program size in population (points): 69.737
Average percent parens in population: 0.145
Minimum age in population: 38.46401596069336
Maximum age in population: 41.87026596069336
Average age in population: 40.03266140976548
Median age in population: 39.97964096069336
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 116
Genome diversity (% unique genomes):	 0.802
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 130
Syntactic diversity (% unique Push programs):	 0.783
Total error diversity:				 0.007
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.082
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 21018464
--- Timings ---
Current time: 1559583887922 milliseconds
Total Time:          87.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.9 seconds, 60.8%
Fitness Testing:     21.6 seconds, 24.8%
Report:              12.5 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 505
Test mean error for best: 0.50500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output:                    
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 58                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 76                 
Correct output: 15                  | Program output: 56                 
Correct output: 33                  | Program output: 99                 
Correct output: 30                  | Program output: 64                 
Correct output: 14                  | Program output: 25                 
Correct output: 44                  | Program output: 73                 
Correct output: 12                  | Program output: 61                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output:                    
Correct output: 41                  | Program output: 67                 
Correct output: 0                   | Program output: 36                 
Correct output: 38                  | Program output: 94                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 88                 
Correct output: 36                  | Program output: 75                 
Correct output: 15                  | Program output: 59                 
Correct output: -57                 | Program output: -1                 
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -53                
Correct output: -66                 | Program output: 32                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: 75                 
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: 37                 
Correct output: -76                 | Program output: -19                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -33                
Correct output: -19                 | Program output:                    
Correct output: -98                 | Program output: 95                 
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: 11                 
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -16                
Correct output: -45                 | Program output: 49                 
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: 84                 
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -19                
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 60                 
Correct output: -38                 | Program output: 52                 
Correct output: -85                 | Program output:                    
Correct output: -66                 | Program output: -26                
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: -48                
Correct output: -60                 | Program output:                    
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: 41                 
Correct output: -85                 | Program output: -52                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: 73                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: 97                 
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction in2})
Lexicase best program: (boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 in3 integer_min integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer) tagged_299 integer_max boolean_flush integer_swap boolean_frominteger boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod in2)) () ())
Lexicase best errors: [1 0 1 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 69
Percent parens: 0.130
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction in2})
Zero cases best program: (boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 in3 integer_min integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer) tagged_299 integer_max boolean_flush integer_swap boolean_frominteger boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod in2)) () ())
Zero cases best errors: [1 0 1 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 69
Percent parens: 0.130
--- Lexicase Population Statistics ---
Count of elite individuals by case: (395 849 1000 688 250 208 621 849 691 184)
Population mean number of elite cases: 5.74
Count of perfect (error zero) individuals by case: (395 849 0 688 250 208 621 849 691 184)
Population mean number of perfect (error zero) cases: 4.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction in2})
Best program: (boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 in3 integer_min integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer) tagged_299 integer_max boolean_flush integer_swap boolean_frominteger boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod in2)) () ())
Errors: [1 0 1 0 0 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 60
Size: 69
Percent parens: 0.130
--- Population Statistics ---
Average total errors in population: 5.265
Median total errors in population: 4
Error averages by case: (0.605 0.151 1.0 0.312 0.75 0.792 0.379 0.151 0.309 0.816)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 59.313
Average program size in population (points): 68.876
Average percent parens in population: 0.139
Minimum age in population: 39.46401596069336
Maximum age in population: 43.33901596069336
Average age in population: 41.27474866217375
Median age in population: 41.46401596069336
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 145
Genome diversity (% unique genomes):	 0.707
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 154
Syntactic diversity (% unique Push programs):	 0.684
Total error diversity:				 0.007
Error (vector) diversity:			 0.035
Behavioral diversity:				 0.122
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 21677829
--- Timings ---
Current time: 1559583890718 milliseconds
Total Time:          89.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.7 seconds, 60.9%
Fitness Testing:     22.2 seconds, 24.7%
Report:              12.9 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 470
Test mean error for best: 0.47000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 85                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 39                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 21                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 66                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 49                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 73                 
Correct output: 15                  | Program output: 27                 
Correct output: -57                 | Program output: -1                 
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -53                
Correct output: -66                 | Program output: 56                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: 4                  
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: 82                 
Correct output: -76                 | Program output: -19                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -33                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: 80                 
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -16                
Correct output: -45                 | Program output: 20                 
Correct output: 20                  | Program output: 88                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: 44                 
Correct output: -59                 | Program output: 31                 
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: 72                 
Correct output: -55                 | Program output: 63                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: -48                
Correct output: -60                 | Program output: 84                 
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -52                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: 95                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: 93                 
Correct output: -89                 | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 40                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Lexicase best program: (boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank boolean_swap exec_yankdup tag_boolean_662 exec_yankdup in3 in1 in3 integer_min integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop integer_swap integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not) integer_swap print_integer) boolean_frominteger boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max) (integer_shove integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod exec_do*count ())) () ()) ()))
Lexicase best errors: [0 1 0 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 70
Percent parens: 0.186
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Zero cases best program: (boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank boolean_swap exec_yankdup tag_boolean_662 exec_yankdup in3 in1 in3 integer_min integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop integer_swap integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not) integer_swap print_integer) boolean_frominteger boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max) (integer_shove integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod exec_do*count ())) () ()) ()))
Zero cases best errors: [0 1 0 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 70
Percent parens: 0.186
--- Lexicase Population Statistics ---
Count of elite individuals by case: (536 1000 482 189 315 153 662 265 811 538)
Population mean number of elite cases: 4.95
Count of perfect (error zero) individuals by case: (536 0 482 189 315 153 662 265 811 538)
Population mean number of perfect (error zero) cases: 3.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Best program: (boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank boolean_swap exec_yankdup tag_boolean_662 exec_yankdup in3 in1 in3 integer_min integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop integer_swap integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer) tagged_299 integer_max in4 integer_swap boolean_frominteger boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (print_integer tagged_299 exec_when (integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod exec_do*count ())) () ())) () ()))
Errors: [0 1 0 1 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 66
Size: 80
Percent parens: 0.175
--- Population Statistics ---
Average total errors in population: 6.049
Median total errors in population: 7
Error averages by case: (0.464 1.0 0.518 0.811 0.685 0.847 0.338 0.735 0.189 0.462)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.365
Average program size in population (points): 69.305
Average percent parens in population: 0.143
Minimum age in population: 40.46401596069336
Maximum age in population: 44.58901596069336
Average age in population: 42.82758170948923
Median age in population: 42.94839096069336
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 80
Genome diversity (% unique genomes):	 0.706
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.676
Total error diversity:				 0.008
Error (vector) diversity:			 0.041
Behavioral diversity:				 0.138
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 22314287
--- Timings ---
Current time: 1559583893825 milliseconds
Total Time:          92.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.5 seconds, 61.0%
Fitness Testing:     22.8 seconds, 24.6%
Report:              13.3 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 499
Test mean error for best: 0.49900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 34                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 58                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 76                 
Correct output: 15                  | Program output: 56                 
Correct output: 33                  | Program output: 99                 
Correct output: 30                  | Program output: 64                 
Correct output: 14                  | Program output: 25                 
Correct output: 44                  | Program output: 73                 
Correct output: 12                  | Program output: 61                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 41                  | Program output: 67                 
Correct output: 0                   | Program output: 36                 
Correct output: 38                  | Program output: 94                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 88                 
Correct output: 36                  | Program output: 75                 
Correct output: 15                  | Program output: 59                 
Correct output: -57                 | Program output: -1                 
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -53                
Correct output: -66                 | Program output: 32                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: 75                 
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: 37                 
Correct output: -76                 | Program output: -19                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -33                
Correct output: -19                 | Program output:                    
Correct output: -98                 | Program output: 95                 
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: 11                 
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -16                
Correct output: -45                 | Program output: 49                 
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: 84                 
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -19                
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 60                 
Correct output: -38                 | Program output: 52                 
Correct output: -85                 | Program output: -68                
Correct output: -66                 | Program output: -26                
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: -48                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: 41                 
Correct output: -85                 | Program output: -52                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: 73                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: 97                 
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction in2})
Lexicase best program: (boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 in3 integer_min integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer) tagged_299 integer_max boolean_flush integer_swap boolean_frominteger boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove integer_yankdup integer_flush integer_yankdup integer_mod in2) () ())
Lexicase best errors: [0 0 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 68
Percent parens: 0.118
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction in2})
Zero cases best program: (boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 in3 integer_min integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer) tagged_299 integer_max boolean_flush integer_swap boolean_frominteger boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove integer_yankdup integer_flush integer_yankdup integer_mod in2) () ())
Zero cases best errors: [0 0 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 68
Percent parens: 0.118
--- Lexicase Population Statistics ---
Count of elite individuals by case: (167 859 822 804 170 816 169 2 34 825)
Population mean number of elite cases: 4.67
Count of perfect (error zero) individuals by case: (167 859 822 804 170 816 169 2 34 825)
Population mean number of perfect (error zero) cases: 4.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction in2})
Best program: (boolean_pop integer_sub integer_rot exec_empty in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 in3 integer_min integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer) tagged_299 integer_max boolean_flush integer_swap boolean_frominteger boolean_not exec_s_when_autoconstructing (print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod in2)) () ()) () ())
Errors: [0 0 0 0 0 0 0 1 1 0]
Total: 2
Mean: 0.2
Genome size: 59
Size: 71
Percent parens: 0.169
--- Population Statistics ---
Average total errors in population: 5.332
Median total errors in population: 5
Error averages by case: (0.833 0.141 0.178 0.196 0.83 0.184 0.831 0.998 0.966 0.175)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.586
Average program size in population (points): 71.636
Average percent parens in population: 0.154
Minimum age in population: 41.46401596069336
Maximum age in population: 46.17786820605397
Average age in population: 44.33416792590916
Median age in population: 44.35903300158679
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 50
Genome diversity (% unique genomes):	 0.774
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 51
Syntactic diversity (% unique Push programs):	 0.754
Total error diversity:				 0.008
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.092
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 23028065
--- Timings ---
Current time: 1559583896729 milliseconds
Total Time:          95.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.4 seconds, 60.9%
Fitness Testing:     23.5 seconds, 24.5%
Report:              14.0 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 505
Test mean error for best: 0.50500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output:                    
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 58                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 76                 
Correct output: 15                  | Program output: 56                 
Correct output: 33                  | Program output: 99                 
Correct output: 30                  | Program output: 64                 
Correct output: 14                  | Program output: 25                 
Correct output: 44                  | Program output: 73                 
Correct output: 12                  | Program output: 61                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output:                    
Correct output: 41                  | Program output: 67                 
Correct output: 0                   | Program output: 36                 
Correct output: 38                  | Program output: 94                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 88                 
Correct output: 36                  | Program output: 75                 
Correct output: 15                  | Program output: 59                 
Correct output: -57                 | Program output: -1                 
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -53                
Correct output: -66                 | Program output: 32                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: 75                 
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: 37                 
Correct output: -76                 | Program output: -19                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -33                
Correct output: -19                 | Program output:                    
Correct output: -98                 | Program output: 95                 
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: 11                 
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -16                
Correct output: -45                 | Program output: 49                 
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: 84                 
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -19                
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 60                 
Correct output: -38                 | Program output: 52                 
Correct output: -85                 | Program output:                    
Correct output: -66                 | Program output: -26                
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: -48                
Correct output: -60                 | Program output:                    
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: 41                 
Correct output: -85                 | Program output: -52                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: 73                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: 97                 
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction in2})
Lexicase best program: (boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 in3 integer_min integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_max boolean_not integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer) tagged_299 integer_max boolean_flush integer_swap boolean_frominteger boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup) integer_mod in2) () ())
Lexicase best errors: [1 0 1 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 69
Percent parens: 0.130
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction in2})
Zero cases best program: (boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 in3 integer_min integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_max boolean_not integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer) tagged_299 integer_max boolean_flush integer_swap boolean_frominteger boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup) integer_mod in2) () ())
Zero cases best errors: [1 0 1 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 69
Percent parens: 0.130
--- Lexicase Population Statistics ---
Count of elite individuals by case: (115 462 197 482 197 590 525 101 836 118)
Population mean number of elite cases: 3.62
Count of perfect (error zero) individuals by case: (115 462 197 482 197 590 525 101 836 118)
Population mean number of perfect (error zero) cases: 3.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_dup} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction in2})
Best program: (integer_pop integer_sub integer_rot tag_boolean_662 exec_empty exec_dup () in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 in3 integer_min integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer) tagged_299 integer_max boolean_flush integer_swap boolean_frominteger boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_dup integer_yankdup integer_mod in2)) () ())
Errors: [1 0 1 0 1 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 60
Size: 70
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 6.377
Median total errors in population: 6
Error averages by case: (0.885 0.538 0.803 0.518 0.803 0.41 0.475 0.899 0.164 0.882)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.814
Average program size in population (points): 72.022
Average percent parens in population: 0.141
Minimum age in population: 43.46401596069336
Maximum age in population: 47.41714096069336
Average age in population: 45.65365256986767
Median age in population: 45.65151596069336
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 61
Genome diversity (% unique genomes):	 0.719
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 68
Syntactic diversity (% unique Push programs):	 0.695
Total error diversity:				 0.006
Error (vector) diversity:			 0.036
Behavioral diversity:				 0.15
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 23728152
--- Timings ---
Current time: 1559583899595 milliseconds
Total Time:          98.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.2 seconds, 60.9%
Fitness Testing:     24.1 seconds, 24.4%
Report:              14.4 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 401
Test mean error for best: 0.40100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 3                  
Correct output: 20                  | Program output: 39                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: 22                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -52                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 63                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 78                 
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 30                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -81                
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Lexicase best program: (boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot in4 boolean_yank in4 boolean_yank integer_pop integer_rot print_integer exec_yankdup in3 in1 in4 integer_min integer_swap integer_yank boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer tagged_299 boolean_invert_second_then_and tagged_299 integer_max in4 integer_swap boolean_frominteger boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod exec_do*count ())) () ())
Lexicase best errors: [0 0 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 77
Percent parens: 0.117
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Zero cases best program: (boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot in4 boolean_yank in4 boolean_yank integer_pop integer_rot print_integer exec_yankdup in3 in1 in4 integer_min integer_swap integer_yank boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer tagged_299 boolean_invert_second_then_and tagged_299 integer_max in4 integer_swap boolean_frominteger boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod exec_do*count ())) () ())
Zero cases best errors: [0 0 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 77
Percent parens: 0.117
--- Lexicase Population Statistics ---
Count of elite individuals by case: (186 243 186 186 227 175 242 665 176 178)
Population mean number of elite cases: 2.46
Count of perfect (error zero) individuals by case: (186 243 186 186 227 175 242 665 176 178)
Population mean number of perfect (error zero) cases: 2.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 1, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Best program: (boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot print_integer exec_yankdup in3 in1 in4 integer_min integer_swap exec_shove (boolean_not) integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer tagged_299 boolean_invert_second_then_and tagged_299 integer_max in4 integer_swap boolean_frominteger boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod exec_do*count ())) () ())
Errors: [0 0 0 0 0 0 0 1 0 1]
Total: 2
Mean: 0.2
Genome size: 62
Size: 72
Percent parens: 0.139
--- Population Statistics ---
Average total errors in population: 7.536
Median total errors in population: 8
Error averages by case: (0.814 0.757 0.814 0.814 0.773 0.825 0.758 0.335 0.824 0.822)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.823
Average program size in population (points): 73.303
Average percent parens in population: 0.142
Minimum age in population: 44.46401596069336
Maximum age in population: 48.87026596069336
Average age in population: 47.29136161401123
Median age in population: 47.31655502319336
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 61
Genome diversity (% unique genomes):	 0.762
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 67
Syntactic diversity (% unique Push programs):	 0.739
Total error diversity:				 0.008
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.146
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 24455720
--- Timings ---
Current time: 1559583902685 milliseconds
Total Time:         101.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.0 seconds, 61.0%
Fitness Testing:     24.8 seconds, 24.4%
Report:              14.8 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 416
Test mean error for best: 0.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: 54                 
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 29                 
Correct output: 15                  | Program output: 29                 
Correct output: 33                  | Program output: 63                 
Correct output: 30                  | Program output: 41                 
Correct output: 14                  | Program output: 93                 
Correct output: 44                  | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 15                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 47                 
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 52                 
Correct output: 17                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -1                 
Correct output: -95                 | Program output: -24                
Correct output: -73                 | Program output: -53                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 19                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -19                
Correct output: -73                 | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -33                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: 25                 
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -16                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: 18                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -47                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 92                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: 20                 
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -73                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: 56                 
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -4                 
Correct output: -66                 | Program output: 61                 
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: -48                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: -30                
Correct output: -85                 | Program output: -52                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 36                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction in2})
Lexicase best program: (boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 integer_rot tag_boolean_662 boolean_swap in3 in1 in3 integer_min integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer) tagged_299 integer_max print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (boolean_shove integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod in2)) () ()))
Lexicase best errors: [0 0 0 0 0 1 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 54
Percent parens: 0.130
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction in2})
Zero cases best program: (boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 integer_rot tag_boolean_662 boolean_swap in3 in1 in3 integer_min integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer) tagged_299 integer_max print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (boolean_shove integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod in2)) () ()))
Zero cases best errors: [0 0 0 0 0 1 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 54
Percent parens: 0.130
--- Lexicase Population Statistics ---
Count of elite individuals by case: (134 259 612 614 134 553 108 593 106 256)
Population mean number of elite cases: 3.37
Count of perfect (error zero) individuals by case: (134 259 612 614 134 553 108 593 106 256)
Population mean number of perfect (error zero) cases: 3.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Best program: (boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot tag_boolean_662 exec_yankdup in3 in1 in3 integer_min integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove (boolean_not)) integer_swap) print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer tagged_299 integer_max boolean_flush in4 integer_swap boolean_frominteger boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove boolean_not integer_swap) (print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max exec_k (exec_do*times (integer_flush integer_mod integer_yankdup integer_mod exec_do*count ())) ()) () ()) ()))
Errors: [0 0 0 0 0 1 1 1 1 0]
Total: 4
Mean: 0.4
Genome size: 73
Size: 88
Percent parens: 0.170
--- Population Statistics ---
Average total errors in population: 6.631
Median total errors in population: 6
Error averages by case: (0.866 0.741 0.388 0.386 0.866 0.447 0.892 0.407 0.894 0.744)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.314
Average program size in population (points): 72.313
Average percent parens in population: 0.138
Minimum age in population: 46.37026596069336
Maximum age in population: 50.33901596069336
Average age in population: 49.03206648908649
Median age in population: 49.19106674194336
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 57
Genome diversity (% unique genomes):	 0.692
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.655
Total error diversity:				 0.007
Error (vector) diversity:			 0.036
Behavioral diversity:				 0.156
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 25238687
--- Timings ---
Current time: 1559583905678 milliseconds
Total Time:         104.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.9 seconds, 60.9%
Fitness Testing:     25.6 seconds, 24.4%
Report:              15.3 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 511
Test mean error for best: 0.51100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output:                    
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 58                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 76                 
Correct output: 15                  | Program output: 56                 
Correct output: 33                  | Program output: 99                 
Correct output: 30                  | Program output: 64                 
Correct output: 14                  | Program output: 25                 
Correct output: 44                  | Program output: 73                 
Correct output: 12                  | Program output: 61                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 41                  | Program output: 67                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 94                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 88                 
Correct output: 36                  | Program output: 75                 
Correct output: 15                  | Program output: 59                 
Correct output: -57                 | Program output: -1                 
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -53                
Correct output: -66                 | Program output: 32                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -48                
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: 37                 
Correct output: -76                 | Program output: -5                 
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -28                
Correct output: -69                 | Program output: -33                
Correct output: -19                 | Program output:                    
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: 11                 
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: 4                  
Correct output: -44                 | Program output: -16                
Correct output: -45                 | Program output: 49                 
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -24                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -17                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -42                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output:                    
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -28                
Correct output: -56                 | Program output: -48                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -26                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: 73                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction tagged_840} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction in2})
Lexicase best program: (boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_dup_times integer_pop integer_rot tag_boolean_662 exec_yankdup in3 integer_gt in3 exec_dup (integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_yank tagged_840 print_integer) tagged_299 integer_max boolean_flush integer_swap boolean_frominteger boolean_not) integer_swap print_integer tagged_299 boolean_pop integer_swap integer_rot exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod in2)) () ())
Lexicase best errors: [0 1 0 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 70
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction tagged_840} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction in2})
Zero cases best program: (boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_dup_times integer_pop integer_rot tag_boolean_662 exec_yankdup in3 integer_gt in3 exec_dup (integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_yank tagged_840 print_integer) tagged_299 integer_max boolean_flush integer_swap boolean_frominteger boolean_not) integer_swap print_integer tagged_299 boolean_pop integer_swap integer_rot exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod in2)) () ())
Zero cases best errors: [0 1 0 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 70
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (344 1 691 1000 166 220 200 691 831 675)
Population mean number of elite cases: 4.82
Count of perfect (error zero) individuals by case: (344 1 691 0 166 220 200 691 831 675)
Population mean number of perfect (error zero) cases: 3.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 1, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction in2})
Best program: (boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_dup_times integer_pop integer_rot tag_boolean_662 exec_yankdup in3 integer_gt in3 exec_dup (integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_yank integer_swap print_integer) tagged_299 integer_max boolean_flush integer_swap boolean_frominteger boolean_not) integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod in2)) () ())
Errors: [0 1 0 1 1 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 60
Size: 70
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 6.181
Median total errors in population: 6
Error averages by case: (0.656 0.999 0.309 1.0 0.834 0.78 0.8 0.309 0.169 0.325)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 61.899
Average program size in population (points): 72.146
Average percent parens in population: 0.141
Minimum age in population: 47.99526596069336
Maximum age in population: 51.87221908569336
Average age in population: 50.63962238359265
Median age in population: 50.58510971069336
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 80
Genome diversity (% unique genomes):	 0.694
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 86
Syntactic diversity (% unique Push programs):	 0.67
Total error diversity:				 0.007
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.149
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 25953276
--- Timings ---
Current time: 1559583908761 milliseconds
Total Time:         107.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.7 seconds, 61.0%
Fitness Testing:     26.2 seconds, 24.4%
Report:              15.7 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 414
Test mean error for best: 0.41400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 21                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 66                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 41                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 48                 
Correct output: 15                  | Program output: 27                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: 40                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: 4                  
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -48                
Correct output: -6                  | Program output: 19                 
Correct output: -65                 | Program output: 25                 
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: 5                  
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 80                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: 20                 
Correct output: 20                  | Program output: 88                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: 18                 
Correct output: -59                 | Program output: 31                 
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: 72                 
Correct output: -55                 | Program output: 63                 
Correct output: -94                 | Program output: -42                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -48                
Correct output: -60                 | Program output: 15                 
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: 24                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: 62                 
Correct output: -89                 | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 36                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction in4} {:close 2, :instruction exec_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Lexicase best program: (boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot in4 boolean_yank in4 exec_dup () integer_pop integer_rot print_integer exec_yankdup in3 boolean_eq in4 integer_min integer_swap integer_yank boolean_not integer_swap exec_do*range (exec_pop (boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_when () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer) tagged_299 boolean_invert_second_then_and tagged_299 integer_max in4 integer_swap boolean_frominteger boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod exec_do*count ())) () ())
Lexicase best errors: [0 1 0 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 79
Percent parens: 0.139
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction in4} {:close 2, :instruction exec_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Zero cases best program: (boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot in4 boolean_yank in4 exec_dup () integer_pop integer_rot print_integer exec_yankdup in3 boolean_eq in4 integer_min integer_swap integer_yank boolean_not integer_swap exec_do*range (exec_pop (boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_when () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer) tagged_299 boolean_invert_second_then_and tagged_299 integer_max in4 integer_swap boolean_frominteger boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod exec_do*count ())) () ())
Zero cases best errors: [0 1 0 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 79
Percent parens: 0.139
--- Lexicase Population Statistics ---
Count of elite individuals by case: (302 331 135 109 498 498 135 427 431 138)
Population mean number of elite cases: 3.00
Count of perfect (error zero) individuals by case: (302 331 135 109 498 498 135 427 431 138)
Population mean number of perfect (error zero) cases: 3.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction in4} {:close 2, :instruction exec_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Best program: (boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot in4 boolean_yank in4 exec_dup () integer_pop integer_rot print_integer exec_yankdup in3 boolean_eq in4 integer_min integer_swap integer_yank boolean_not integer_swap exec_do*range (exec_pop (boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_when () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer) tagged_299 boolean_invert_second_then_and tagged_299 integer_max in4 integer_swap boolean_frominteger boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod exec_do*count ())) () ())
Errors: [0 1 0 1 0 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 68
Size: 79
Percent parens: 0.139
--- Population Statistics ---
Average total errors in population: 6.996
Median total errors in population: 7
Error averages by case: (0.698 0.669 0.865 0.891 0.502 0.502 0.865 0.573 0.569 0.862)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.238
Average program size in population (points): 69.867
Average percent parens in population: 0.138
Minimum age in population: 50.27651596069336
Maximum age in population: 53.76089096069336
Average age in population: 52.15634133817744
Median age in population: 52.21841049194336
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 175
Genome diversity (% unique genomes):	 0.644
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 200
Syntactic diversity (% unique Push programs):	 0.618
Total error diversity:				 0.008
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.156
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 26777566
--- Timings ---
Current time: 1559583911679 milliseconds
Total Time:         110.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.5 seconds, 60.8%
Fitness Testing:     27.0 seconds, 24.4%
Report:              16.3 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 401
Test mean error for best: 0.40100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 3                  
Correct output: 20                  | Program output: 39                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: 22                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -52                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 63                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 78                 
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 30                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -81                
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_not} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Lexicase best program: (boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot print_integer exec_yankdup in3 in1 in4 integer_min integer_swap exec_shove (boolean_not) integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_lte in4 integer_mod tagged_299 integer_max boolean_flush integer_swap boolean_frominteger boolean_not) tag_exec_731 (integer_mod integer_lte in4 integer_swap exec_shove () boolean_not)) boolean_or print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer tagged_299 boolean_invert_second_then_and tagged_299 integer_max in4 integer_swap boolean_frominteger boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod exec_do*count ())) () ())
Lexicase best errors: [0 0 0 0 0 1 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 84
Percent parens: 0.131
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_not} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Zero cases best program: (boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot print_integer exec_yankdup in3 in1 in4 integer_min integer_swap exec_shove (boolean_not) integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_lte in4 integer_mod tagged_299 integer_max boolean_flush integer_swap boolean_frominteger boolean_not) tag_exec_731 (integer_mod integer_lte in4 integer_swap exec_shove () boolean_not)) boolean_or print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer tagged_299 boolean_invert_second_then_and tagged_299 integer_max in4 integer_swap boolean_frominteger boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod exec_do*count ())) () ())
Zero cases best errors: [0 0 0 0 0 1 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 84
Percent parens: 0.131
--- Lexicase Population Statistics ---
Count of elite individuals by case: (204 200 820 90 90 192 599 199 638 200)
Population mean number of elite cases: 3.23
Count of perfect (error zero) individuals by case: (204 200 820 90 90 192 599 199 638 200)
Population mean number of perfect (error zero) cases: 3.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction in2})
Best program: (boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot in4 boolean_yank in4 boolean_yank integer_pop integer_rot print_integer exec_yankdup boolean_eq in1 in4 integer_min integer_swap integer_yank boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_or integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer tagged_299 boolean_invert_second_then_and tagged_299 integer_max in4 integer_swap boolean_frominteger boolean_not integer_swap integer_dup_times exec_rot (integer_mod boolean_xor integer_shove exec_do*times (integer_flush integer_yankdup integer_mod in2)) () ())
Errors: [0 0 0 0 0 1 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 64
Size: 72
Percent parens: 0.111
--- Population Statistics ---
Average total errors in population: 6.768
Median total errors in population: 7
Error averages by case: (0.796 0.8 0.18 0.91 0.91 0.808 0.401 0.801 0.362 0.8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.903
Average program size in population (points): 74.251
Average percent parens in population: 0.139
Minimum age in population: 51.27651596069336
Maximum age in population: 55.18056869506836
Average age in population: 53.71164187404164
Median age in population: 53.80190658569336
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 143
Genome diversity (% unique genomes):	 0.72
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 165
Syntactic diversity (% unique Push programs):	 0.681
Total error diversity:				 0.008
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.132
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 27543940
--- Timings ---
Current time: 1559583914729 milliseconds
Total Time:         113.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.3 seconds, 60.9%
Fitness Testing:     27.7 seconds, 24.4%
Report:              16.7 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 401
Test mean error for best: 0.40100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 3                  
Correct output: 20                  | Program output: 39                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: 22                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -52                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 63                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 78                 
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 30                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -81                
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Lexicase best program: (boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot print_integer exec_yankdup in3 in1 in4 integer_min integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot) integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer tagged_299 boolean_invert_second_then_and tagged_299 integer_max in4 integer_swap boolean_frominteger boolean_not boolean_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod exec_do*count ())) () ())
Lexicase best errors: [0 0 0 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 72
Percent parens: 0.139
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Zero cases best program: (boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot print_integer exec_yankdup in3 in1 in4 integer_min integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot) integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer tagged_299 boolean_invert_second_then_and tagged_299 integer_max in4 integer_swap boolean_frominteger boolean_not boolean_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod exec_do*count ())) () ())
Zero cases best errors: [0 0 0 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 72
Percent parens: 0.139
--- Lexicase Population Statistics ---
Count of elite individuals by case: (624 366 400 437 627 107 624 388 392 1)
Population mean number of elite cases: 3.97
Count of perfect (error zero) individuals by case: (624 366 400 437 627 107 624 388 392 1)
Population mean number of perfect (error zero) cases: 3.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Best program: (boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot print_integer exec_yankdup in3 in1 in4 integer_min integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot) integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) print_integer tagged_299 boolean_pop boolean_yank integer_swap print_integer tagged_299 integer_max boolean_flush integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod exec_do*count ())) () ())
Errors: [0 0 0 1 0 1 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 56
Size: 66
Percent parens: 0.152
--- Population Statistics ---
Average total errors in population: 6.034
Median total errors in population: 6
Error averages by case: (0.376 0.634 0.6 0.563 0.373 0.893 0.376 0.612 0.608 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.0
Average program size in population (points): 72.083
Average percent parens in population: 0.140
Minimum age in population: 52.27651596069336
Maximum age in population: 56.88784408569336
Average age in population: 55.28339794532757
Median age in population: 55.35427474975586
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 109
Genome diversity (% unique genomes):	 0.729
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 119
Syntactic diversity (% unique Push programs):	 0.701
Total error diversity:				 0.008
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.124
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 28431225
--- Timings ---
Current time: 1559583917814 milliseconds
Total Time:         117.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.2 seconds, 60.8%
Fitness Testing:     28.5 seconds, 24.4%
Report:              17.2 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 414
Test mean error for best: 0.41400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 21                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 66                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 41                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 48                 
Correct output: 15                  | Program output: 27                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: 40                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: 4                  
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -48                
Correct output: -6                  | Program output: 19                 
Correct output: -65                 | Program output: 25                 
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: 5                  
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 80                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: 20                 
Correct output: 20                  | Program output: 88                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: 18                 
Correct output: -59                 | Program output: 31                 
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: 72                 
Correct output: -55                 | Program output: 63                 
Correct output: -94                 | Program output: -42                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -48                
Correct output: -60                 | Program output: 15                 
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: 24                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: 62                 
Correct output: -89                 | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 36                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Lexicase best program: (boolean_pop integer_sub boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot print_integer exec_yankdup in3 in3 in4 integer_min integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot) integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer tagged_299 boolean_invert_second_then_and tagged_299 integer_max in4 integer_swap boolean_frominteger boolean_not boolean_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod exec_do*count ())) () ())
Lexicase best errors: [0 0 0 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 74
Percent parens: 0.135
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Zero cases best program: (boolean_pop integer_sub boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot print_integer exec_yankdup in3 in3 in4 integer_min integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot) integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer tagged_299 boolean_invert_second_then_and tagged_299 integer_max in4 integer_swap boolean_frominteger boolean_not boolean_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod exec_do*count ())) () ())
Zero cases best errors: [0 0 0 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 74
Percent parens: 0.135
--- Lexicase Population Statistics ---
Count of elite individuals by case: (551 190 564 186 73 576 552 586 51 506)
Population mean number of elite cases: 3.84
Count of perfect (error zero) individuals by case: (551 190 564 186 73 576 552 586 51 506)
Population mean number of perfect (error zero) cases: 3.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Best program: (boolean_pop integer_sub boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot print_integer exec_yankdup in3 in3 in4 integer_min integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot) integer_mult tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer tagged_299 boolean_invert_second_then_and tagged_299 integer_max in4 integer_swap boolean_frominteger boolean_not boolean_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod exec_do*count ())) () ())
Errors: [0 0 0 0 1 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 64
Size: 74
Percent parens: 0.135
--- Population Statistics ---
Average total errors in population: 6.165
Median total errors in population: 9/2
Error averages by case: (0.449 0.81 0.436 0.814 0.927 0.424 0.448 0.414 0.949 0.494)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.072
Average program size in population (points): 71.469
Average percent parens in population: 0.131
Minimum age in population: 53.27651596069336
Maximum age in population: 58.57558822631836
Average age in population: 56.69585892883741
Median age in population: 56.71752548217773
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 48
Genome diversity (% unique genomes):	 0.769
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.734
Total error diversity:				 0.008
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.16
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 29225741
--- Timings ---
Current time: 1559583920785 milliseconds
Total Time:         119.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.9 seconds, 60.8%
Fitness Testing:     29.3 seconds, 24.4%
Report:              17.6 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 511
Test mean error for best: 0.51100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output:                    
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 58                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 76                 
Correct output: 15                  | Program output: 56                 
Correct output: 33                  | Program output: 99                 
Correct output: 30                  | Program output: 64                 
Correct output: 14                  | Program output: 25                 
Correct output: 44                  | Program output: 73                 
Correct output: 12                  | Program output: 61                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 41                  | Program output: 67                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 94                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 88                 
Correct output: 36                  | Program output: 75                 
Correct output: 15                  | Program output: 59                 
Correct output: -57                 | Program output: -1                 
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -53                
Correct output: -66                 | Program output: 32                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -48                
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: 37                 
Correct output: -76                 | Program output: -5                 
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -28                
Correct output: -69                 | Program output: -33                
Correct output: -19                 | Program output:                    
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: 11                 
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: 4                  
Correct output: -44                 | Program output: -16                
Correct output: -45                 | Program output: 49                 
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -24                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -17                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -42                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output:                    
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -28                
Correct output: -56                 | Program output: -48                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -26                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: 73                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_pop} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 1, :instruction in4} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 1, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction in2})
Lexicase best program: (boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_dup_times integer_pop integer_rot tag_boolean_662 exec_yankdup in3 integer_gt in3 exec_dup (integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_yank integer_swap print_integer) tagged_299 integer_max boolean_flush integer_swap boolean_frominteger boolean_not) integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod in2)) () ())
Lexicase best errors: [0 0 0 1 1 0 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 70
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_pop} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 1, :instruction in4} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 1, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction in2})
Zero cases best program: (boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_dup_times integer_pop integer_rot tag_boolean_662 exec_yankdup in3 integer_gt in3 exec_dup (integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_yank integer_swap print_integer) tagged_299 integer_max boolean_flush integer_swap boolean_frominteger boolean_not) integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod in2)) () ())
Zero cases best errors: [0 0 0 1 1 0 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 70
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (134 125 135 297 559 133 139 745 297 296)
Population mean number of elite cases: 2.86
Count of perfect (error zero) individuals by case: (134 125 135 297 559 133 139 745 297 296)
Population mean number of perfect (error zero) cases: 2.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction in2})
Best program: (boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_dup_times integer_pop integer_rot tag_boolean_662 exec_yankdup in3 integer_gt in3 exec_dup (integer_swap exec_shove (boolean_not integer_eq exec_do*range (tagged_299 boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_max integer_mod integer_max in4 integer_swap exec_shove () boolean_not) integer_swap print_integer) tagged_299 boolean_pop boolean_yank integer_swap print_integer) tagged_299 integer_max boolean_flush integer_swap boolean_frominteger boolean_not) integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod in2)) () ())
Errors: [0 0 0 1 1 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 62
Size: 72
Percent parens: 0.139
--- Population Statistics ---
Average total errors in population: 7.14
Median total errors in population: 8
Error averages by case: (0.866 0.875 0.865 0.703 0.441 0.867 0.861 0.255 0.703 0.704)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.378
Average program size in population (points): 73.628
Average percent parens in population: 0.139
Minimum age in population: 55.05093002319336
Maximum age in population: 59.85395431518555
Average age in population: 58.22953998320529
Median age in population: 58.31634140014648
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 72
Genome diversity (% unique genomes):	 0.771
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 80
Syntactic diversity (% unique Push programs):	 0.744
Total error diversity:				 0.007
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.123
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 30024942
--- Timings ---
Current time: 1559583923958 milliseconds
Total Time:         122.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.8 seconds, 60.8%
Fitness Testing:     30.0 seconds, 24.4%
Report:              18.0 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Smallest problem report - generation 41
Test total error for best: 561
Test mean error for best: 0.56100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output:                    
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 39                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 21                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 66                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 49                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 73                 
Correct output: 15                  | Program output: 27                 
Correct output: -57                 | Program output: -1                 
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -53                
Correct output: -66                 | Program output: 56                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: 4                  
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -48                
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: 82                 
Correct output: -76                 | Program output: -5                 
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -28                
Correct output: -69                 | Program output: -33                
Correct output: -19                 | Program output:                    
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -48                
Correct output: -92                 | Program output: 80                 
Correct output: -70                 | Program output: -4                 
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: 4                  
Correct output: -44                 | Program output: -16                
Correct output: -45                 | Program output: 20                 
Correct output: 20                  | Program output: 88                 
Correct output: -89                 | Program output: -24                
Correct output: -68                 | Program output: 44                 
Correct output: -59                 | Program output: 31                 
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -17                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: 72                 
Correct output: -55                 | Program output: 63                 
Correct output: -94                 | Program output: -42                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -69                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output:                    
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -28                
Correct output: -56                 | Program output: -48                
Correct output: -60                 | Program output: 84                 
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -26                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: 95                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: 93                 
Correct output: -89                 | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 40                 
Correct output: -97                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction in2})
Lexicase best program: (boolean_pop integer_sub boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty integer_rot in3 integer_gt in3 exec_dup (integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_yank integer_swap print_integer) integer_stackdepth integer_max boolean_flush integer_swap boolean_frominteger integer_dup_items) integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_yankdup integer_mod in2)) () ())
Lexicase best errors: [1 1 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 67
Percent parens: 0.149
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction in2})
Zero cases best program: (boolean_pop integer_sub boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty integer_rot in3 integer_gt in3 exec_dup (integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_yank integer_swap print_integer) integer_stackdepth integer_max boolean_flush integer_swap boolean_frominteger integer_dup_items) integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_yankdup integer_mod in2)) () ())
Zero cases best errors: [1 1 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 67
Percent parens: 0.149
--- Lexicase Population Statistics ---
Count of elite individuals by case: (334 345 463 712 433 459 452 330 353 757)
Population mean number of elite cases: 4.64
Count of perfect (error zero) individuals by case: (334 345 463 712 433 459 452 330 353 757)
Population mean number of perfect (error zero) cases: 4.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_795} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction in2})
Best program: (boolean_pop integer_sub integer_pop integer_rot tag_boolean_662 exec_yankdup in3 integer_gt in3 exec_dup (integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot integer_lt tag_exec_795 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_yank integer_swap print_integer) tagged_299 integer_max boolean_flush integer_swap boolean_frominteger boolean_not) integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (boolean_invert_second_then_and integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod in2)) () ())
Errors: [1 1 0 0 0 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 54
Size: 64
Percent parens: 0.156
--- Population Statistics ---
Average total errors in population: 5.362
Median total errors in population: 4
Error averages by case: (0.666 0.655 0.537 0.288 0.567 0.541 0.548 0.67 0.647 0.243)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.69
Average program size in population (points): 71.957
Average percent parens in population: 0.142
Minimum age in population: 56.05093002319336
Maximum age in population: 61.42183303833008
Average age in population: 59.42177657707501
Median age in population: 59.48566818237305
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 21
Genome diversity (% unique genomes):	 0.77
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.74
Total error diversity:				 0.008
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.15
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 30928149
--- Timings ---
Current time: 1559583927306 milliseconds
Total Time:         126.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        76.6 seconds, 60.7%
Fitness Testing:     30.9 seconds, 24.5%
Report:              18.6 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Smallest problem report - generation 42
Test total error for best: 401
Test mean error for best: 0.40100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 3                  
Correct output: 20                  | Program output: 39                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: 22                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -52                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 63                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 78                 
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 30                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -81                
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 1, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction in1})
Lexicase best program: (boolean_pop exec_empty in3 integer_dup_times boolean_yank integer_pop integer_rot print_integer exec_yankdup in3 in1 in4 integer_min integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot) integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop exec_shove (integer_swap print_integer) tagged_299 boolean_invert_second_then_and tagged_299 integer_max in4 boolean_frominteger boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod in1)) () ())
Lexicase best errors: [0 0 0 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 68
Percent parens: 0.147
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 1, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction in1})
Zero cases best program: (boolean_pop exec_empty in3 integer_dup_times boolean_yank integer_pop integer_rot print_integer exec_yankdup in3 in1 in4 integer_min integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot) integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop exec_shove (integer_swap print_integer) tagged_299 boolean_invert_second_then_and tagged_299 integer_max in4 boolean_frominteger boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod in1)) () ())
Zero cases best errors: [0 0 0 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 68
Percent parens: 0.147
--- Lexicase Population Statistics ---
Count of elite individuals by case: (288 465 508 845 483 369 39 483 36 481)
Population mean number of elite cases: 4.00
Count of perfect (error zero) individuals by case: (288 465 508 845 483 369 39 483 36 481)
Population mean number of perfect (error zero) cases: 4.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction in1})
Best program: (boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in4 boolean_yank integer_pop integer_rot boolean_or exec_yankdup in3 in1 in4 integer_min integer_swap exec_shove (boolean_not) integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_yank integer_swap print_integer tagged_299 integer_max boolean_flush integer_swap boolean_frominteger boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_div in1)) () ())
Errors: [0 0 0 0 0 0 1 0 1 0]
Total: 2
Mean: 0.2
Genome size: 61
Size: 70
Percent parens: 0.129
--- Population Statistics ---
Average total errors in population: 6.003
Median total errors in population: 6
Error averages by case: (0.712 0.535 0.492 0.155 0.517 0.631 0.961 0.517 0.964 0.519)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.006
Average program size in population (points): 74.742
Average percent parens in population: 0.143
Minimum age in population: 58.09841537475586
Maximum age in population: 63.07104110717773
Average age in population: 61.06017198026998
Median age in population: 61.19332504272461
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 85
Genome diversity (% unique genomes):	 0.72
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 94
Syntactic diversity (% unique Push programs):	 0.697
Total error diversity:				 0.009
Error (vector) diversity:			 0.038
Behavioral diversity:				 0.166
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 31905745
--- Timings ---
Current time: 1559583930516 milliseconds
Total Time:         129.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        78.4 seconds, 60.5%
Fitness Testing:     31.8 seconds, 24.5%
Report:              19.3 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Smallest problem report - generation 43
Test total error for best: 401
Test mean error for best: 0.40100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: 34                 
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 93                 
Correct output: 1                   | Program output: 3                  
Correct output: 20                  | Program output: 39                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 13                 
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: 92                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 43                 
Correct output: -89                 | Program output: -48                
Correct output: -68                 | Program output: 22                 
Correct output: -59                 | Program output: -2                 
Correct output: -96                 | Program output: -52                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: 63                 
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 78                 
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 30                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: 0                  
Correct output: -61                 | Program output: 25                 
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -19                
Correct output: -91                 | Program output: -81                
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 37                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_236} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 1, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction in1})
Lexicase best program: (boolean_pop integer_sub tagged_236 tag_boolean_662 exec_empty in3 in4 boolean_dup_times integer_pop integer_rot tag_boolean_662 exec_yankdup boolean_eq in1 in4 integer_min integer_swap integer_yank boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_or integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop exec_s_when_autoconstructing (integer_swap boolean_pop boolean_yank integer_swap print_integer) (tagged_299 integer_max boolean_not) () integer_swap print_integer tagged_299 boolean_pop boolean_shove integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer tagged_299 boolean_invert_second_then_and integer_mod integer_max integer_shove integer_swap integer_dup_times exec_rot (integer_eq integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod in1)) () ())
Lexicase best errors: [0 0 0 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 84
Percent parens: 0.131
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_236} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 1, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction in1})
Zero cases best program: (boolean_pop integer_sub tagged_236 tag_boolean_662 exec_empty in3 in4 boolean_dup_times integer_pop integer_rot tag_boolean_662 exec_yankdup boolean_eq in1 in4 integer_min integer_swap integer_yank boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_or integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop exec_s_when_autoconstructing (integer_swap boolean_pop boolean_yank integer_swap print_integer) (tagged_299 integer_max boolean_not) () integer_swap print_integer tagged_299 boolean_pop boolean_shove integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer tagged_299 boolean_invert_second_then_and integer_mod integer_max integer_shove integer_swap integer_dup_times exec_rot (integer_eq integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod in1)) () ())
Zero cases best errors: [0 0 0 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 84
Percent parens: 0.131
--- Lexicase Population Statistics ---
Count of elite individuals by case: (573 686 573 471 572 322 21 469 707 321)
Population mean number of elite cases: 4.72
Count of perfect (error zero) individuals by case: (573 686 573 471 572 322 21 469 707 321)
Population mean number of perfect (error zero) cases: 4.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_shove} {:close 3, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 1, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*count})
Best program: (boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 integer_pop integer_rot in3 in1 in4 integer_min integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot integer_lt) tag_exec_731 (integer_mod exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer tagged_299 boolean_invert_second_then_and tagged_299 integer_max in4 integer_swap boolean_frominteger boolean_not integer_swap print_integer tagged_299 boolean_pop exec_swap (integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod exec_do*count ())) () ()) ())
Errors: [0 0 0 0 0 1 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 55
Size: 67
Percent parens: 0.179
--- Population Statistics ---
Average total errors in population: 5.285
Median total errors in population: 5
Error averages by case: (0.427 0.314 0.427 0.529 0.428 0.678 0.979 0.531 0.293 0.679)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.301
Average program size in population (points): 67.938
Average percent parens in population: 0.142
Minimum age in population: 59.09841537475586
Maximum age in population: 64.3283658003329
Average age in population: 62.66507881163938
Median age in population: 62.83590316772461
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 143
Genome diversity (% unique genomes):	 0.707
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 155
Syntactic diversity (% unique Push programs):	 0.673
Total error diversity:				 0.008
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.094
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 32667079
--- Timings ---
Current time: 1559583933424 milliseconds
Total Time:         132.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        80.2 seconds, 60.5%
Fitness Testing:     32.5 seconds, 24.5%
Report:              19.8 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Smallest problem report - generation 44
Test total error for best: 492
Test mean error for best: 0.49200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -78                 | Program output: -12                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: 24                 
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -6                 
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output:                    
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 58                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 76                 
Correct output: 15                  | Program output: 56                 
Correct output: 33                  | Program output: 99                 
Correct output: 30                  | Program output: 64                 
Correct output: 14                  | Program output: 25                 
Correct output: 44                  | Program output: 73                 
Correct output: 12                  | Program output: 61                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 41                  | Program output: 67                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 94                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 88                 
Correct output: 36                  | Program output: 75                 
Correct output: 15                  | Program output: 59                 
Correct output: -57                 | Program output: -34                
Correct output: -95                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: 32                 
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -12                
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -31                
Correct output: -56                 | Program output: -3                 
Correct output: -79                 | Program output: -5                 
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: 37                 
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output:                    
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: 11                 
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -65                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: 49                 
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -45                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 0                  
Correct output: -72                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -42                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -43                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -35                
Correct output: -85                 | Program output:                    
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -39                
Correct output: -56                 | Program output: -32                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -34                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: 73                 
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -7                 
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -47                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range})
Lexicase best program: (boolean_pop integer_sub integer_rot boolean_pop integer_sub integer_rot tag_boolean_662 in4 boolean_yank integer_pop integer_rot print_integer exec_yankdup in3 in1 in2 integer_min integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299) boolean_pop boolean_rot integer_lt) tag_exec_731 (integer_mod integer_max exec_dup (integer_swap exec_shove () boolean_not)) boolean_yank integer_swap print_integer tagged_299 integer_max boolean_flush integer_swap boolean_frominteger boolean_not integer_swap print_integer boolean_dup boolean_pop integer_swap integer_dup_times exec_rot (integer_mod boolean_pop exec_do*range ()) () ())
Lexicase best errors: [0 1 0 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 62
Percent parens: 0.161
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range})
Zero cases best program: (boolean_pop integer_sub integer_rot boolean_pop integer_sub integer_rot tag_boolean_662 in4 boolean_yank integer_pop integer_rot print_integer exec_yankdup in3 in1 in2 integer_min integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_299) boolean_pop boolean_rot integer_lt) tag_exec_731 (integer_mod integer_max exec_dup (integer_swap exec_shove () boolean_not)) boolean_yank integer_swap print_integer tagged_299 integer_max boolean_flush integer_swap boolean_frominteger boolean_not integer_swap print_integer boolean_dup boolean_pop integer_swap integer_dup_times exec_rot (integer_mod boolean_pop exec_do*range ()) () ())
Zero cases best errors: [0 1 0 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 62
Percent parens: 0.161
--- Lexicase Population Statistics ---
Count of elite individuals by case: (72 645 276 409 332 331 774 700 482 71)
Population mean number of elite cases: 4.09
Count of perfect (error zero) individuals by case: (72 645 276 409 332 331 774 700 482 71)
Population mean number of perfect (error zero) cases: 4.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_566} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction in2})
Best program: (boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_dup_times integer_pop integer_rot tag_boolean_662 exec_yankdup in3 integer_gt in3 exec_dup (integer_swap exec_shove (boolean_not integer_swap exec_do*range (tagged_566 boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove (boolean_not)) tagged_299 boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer integer_inc boolean_yank exec_dup_times () print_integer) tagged_299 integer_max boolean_flush integer_swap boolean_frominteger boolean_not) integer_swap boolean_pop tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup integer_mod in2)) () ())
Errors: [1 0 0 0 1 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 70
Size: 83
Percent parens: 0.157
--- Population Statistics ---
Average total errors in population: 5.908
Median total errors in population: 5
Error averages by case: (0.928 0.355 0.724 0.591 0.668 0.669 0.226 0.3 0.518 0.929)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.104
Average program size in population (points): 69.968
Average percent parens in population: 0.139
Minimum age in population: 60.09841537475586
Maximum age in population: 65.88021754732108
Average age in population: 64.33824599844374
Median age in population: 64.46382904052734
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 134
Genome diversity (% unique genomes):	 0.707
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 146
Syntactic diversity (% unique Push programs):	 0.682
Total error diversity:				 0.007
Error (vector) diversity:			 0.04
Behavioral diversity:				 0.129
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 33483926
--- Timings ---
Current time: 1559583936623 milliseconds
Total Time:         135.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        82.0 seconds, 60.5%
Fitness Testing:     33.3 seconds, 24.6%
Report:              20.1 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Smallest problem report - generation 45
Test total error for best: 209
Test mean error for best: 0.20900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -24                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 32                 
Correct output: 3                   | Program output: 25                 
Correct output: 1                   | Program output: 3                  
Correct output: 20                  | Program output: 39                 
Correct output: 4                   | Program output: 8                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 12                 
Correct output: 9                   | Program output: 9                  
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -6                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -38                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -30                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -52                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: 30                 
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: 1                  
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -81                
Correct output: -88                 | Program output: -59                
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_344} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup})
Lexicase best program: (boolean_pop integer_sub integer_rot boolean_pop integer_sub integer_rot tag_boolean_662 in4 boolean_yank integer_pop integer_rot print_integer exec_yankdup in3 in1 in2 integer_min in4 integer_min integer_swap integer_yank boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer tagged_299 boolean_invert_second_then_and tagged_299 integer_add boolean_pop boolean_not print_boolean print_integer tagged_344 integer_max boolean_flush integer_swap integer_lt boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup)) () ()) () ())
Lexicase best errors: [0 0 0 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 87
Percent parens: 0.126
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_344} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup})
Zero cases best program: (boolean_pop integer_sub integer_rot boolean_pop integer_sub integer_rot tag_boolean_662 in4 boolean_yank integer_pop integer_rot print_integer exec_yankdup in3 in1 in2 integer_min in4 integer_min integer_swap integer_yank boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer tagged_299 boolean_invert_second_then_and tagged_299 integer_add boolean_pop boolean_not print_boolean print_integer tagged_344 integer_max boolean_flush integer_swap integer_lt boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup)) () ()) () ())
Zero cases best errors: [0 0 0 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 87
Percent parens: 0.126
--- Lexicase Population Statistics ---
Count of elite individuals by case: (547 501 153 105 342 381 103 314 489 543)
Population mean number of elite cases: 3.48
Count of perfect (error zero) individuals by case: (547 501 153 105 342 381 103 314 489 543)
Population mean number of perfect (error zero) cases: 3.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_344} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup})
Best program: (boolean_pop integer_sub integer_rot boolean_pop integer_sub integer_rot tag_boolean_662 in4 boolean_yank integer_pop integer_rot print_integer exec_yankdup in3 in1 in2 integer_min in4 integer_min integer_swap integer_yank boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer tagged_299 boolean_invert_second_then_and tagged_299 integer_add boolean_pop boolean_not print_boolean print_integer tagged_344 integer_max boolean_flush integer_swap integer_lt boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup)) () ()) () ())
Errors: [0 0 0 1 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 76
Size: 87
Percent parens: 0.126
--- Population Statistics ---
Average total errors in population: 6.522
Median total errors in population: 7
Error averages by case: (0.453 0.499 0.847 0.895 0.658 0.619 0.897 0.686 0.511 0.457)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.525
Average program size in population (points): 71.293
Average percent parens in population: 0.150
Minimum age in population: 61.45296859741211
Maximum age in population: 67.56626033782959
Average age in population: 65.8823835325176
Median age in population: 66.01174497117972
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 53
Genome diversity (% unique genomes):	 0.725
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.694
Total error diversity:				 0.008
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.115
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 34330176
--- Timings ---
Current time: 1559583939854 milliseconds
Total Time:         138.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        83.9 seconds, 60.4%
Fitness Testing:     34.1 seconds, 24.6%
Report:              20.7 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Smallest problem report - generation 46
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: -97                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_344} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup})
Lexicase best program: (boolean_pop integer_sub integer_rot boolean_pop integer_sub integer_rot integer_rot print_integer exec_yankdup in3 in1 in2 integer_min in4 integer_min integer_swap integer_min integer_swap integer_yank boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer tagged_299 boolean_invert_second_then_and tagged_299 integer_add boolean_pop boolean_not print_boolean print_integer tagged_344 integer_max boolean_flush integer_swap integer_lt boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup)) () ()) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 85
Percent parens: 0.129
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_344} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup})
Zero cases best program: (boolean_pop integer_sub integer_rot boolean_pop integer_sub integer_rot integer_rot print_integer exec_yankdup in3 in1 in2 integer_min in4 integer_min integer_swap integer_min integer_swap integer_yank boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer tagged_299 boolean_invert_second_then_and tagged_299 integer_add boolean_pop boolean_not print_boolean print_integer tagged_344 integer_max boolean_flush integer_swap integer_lt boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_swap print_integer tagged_299 boolean_pop integer_swap integer_dup_times exec_rot (integer_mod integer_max integer_shove exec_do*times (integer_flush integer_yankdup)) () ()) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 85
Percent parens: 0.129
--- Lexicase Population Statistics ---
Count of elite individuals by case: (701 535 284 704 531 533 704 202 676 287)
Population mean number of elite cases: 5.16
Count of perfect (error zero) individuals by case: (701 535 284 704 531 533 704 202 676 287)
Population mean number of perfect (error zero) cases: 5.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_boolean_662} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_exec_731} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_299} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction tagged_344} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_299} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap})
Best program: (boolean_pop integer_sub boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot print_integer exec_yankdup in3 in1 integer_min in2 integer_min in4 integer_min integer_swap integer_yank boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer tagged_299 boolean_invert_second_then_and tagged_299 integer_add boolean_pop boolean_not print_boolean print_integer tagged_344 integer_max boolean_flush integer_swap integer_lt boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 63
Size: 67
Percent parens: 0.060
--- Population Statistics ---
Average total errors in population: 4.843
Median total errors in population: 3
Error averages by case: (0.299 0.465 0.716 0.296 0.469 0.467 0.296 0.798 0.324 0.713)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 70.252
Average program size in population (points): 80.946
Average percent parens in population: 0.132
Minimum age in population: 65.57180594425154
Maximum age in population: 69.23377907215354
Average age in population: 67.27219528591479
Median age in population: 67.28205394258475
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 203
Genome diversity (% unique genomes):	 0.683
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 239
Syntactic diversity (% unique Push programs):	 0.632
Total error diversity:				 0.01
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 35297493
--- Timings ---
Current time: 1559583943186 milliseconds
Total Time:         142.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        85.7 seconds, 60.3%
Fitness Testing:     35.0 seconds, 24.6%
Report:              21.4 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 46
Successful program: (boolean_pop integer_sub boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot print_integer exec_yankdup in3 in1 integer_min in2 integer_min in4 integer_min integer_swap integer_yank boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer tagged_299 boolean_invert_second_then_and tagged_299 integer_add boolean_pop boolean_not print_boolean print_integer tagged_344 integer_max boolean_flush integer_swap integer_lt boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 67


Auto-simplifying with starting size: 67
step: 0
program: (boolean_pop integer_sub boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot print_integer exec_yankdup in3 in1 integer_min in2 integer_min in4 integer_min integer_swap integer_yank boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer tagged_299 boolean_invert_second_then_and tagged_299 integer_add boolean_pop boolean_not print_boolean print_integer tagged_344 integer_max boolean_flush integer_swap integer_lt boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 500
program: (boolean_pop integer_sub boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot print_integer exec_yankdup in3 in1 integer_min in2 integer_min in4 integer_min integer_swap integer_yank boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer tagged_299 boolean_invert_second_then_and tagged_299 integer_add boolean_pop boolean_not print_boolean print_integer tagged_344 integer_max boolean_flush integer_swap integer_lt boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 1000
program: (boolean_pop integer_sub boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot print_integer exec_yankdup in3 in1 integer_min in2 integer_min in4 integer_min integer_swap integer_yank boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer tagged_299 boolean_invert_second_then_and tagged_299 integer_add boolean_pop boolean_not print_boolean print_integer tagged_344 integer_max boolean_flush integer_swap integer_lt boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 1500
program: (boolean_pop integer_sub boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot print_integer exec_yankdup in3 in1 integer_min in2 integer_min in4 integer_min integer_swap integer_yank boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer tagged_299 boolean_invert_second_then_and tagged_299 integer_add boolean_pop boolean_not print_boolean print_integer tagged_344 integer_max boolean_flush integer_swap integer_lt boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 2000
program: (boolean_pop integer_sub boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot print_integer exec_yankdup in3 in1 integer_min in2 integer_min in4 integer_min integer_swap integer_yank boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer tagged_299 boolean_invert_second_then_and tagged_299 integer_add boolean_pop boolean_not print_boolean print_integer tagged_344 integer_max boolean_flush integer_swap integer_lt boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 2500
program: (boolean_pop integer_sub boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot print_integer exec_yankdup in3 in1 integer_min in2 integer_min in4 integer_min integer_swap integer_yank boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer tagged_299 boolean_invert_second_then_and tagged_299 integer_add boolean_pop boolean_not print_boolean print_integer tagged_344 integer_max boolean_flush integer_swap integer_lt boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 3000
program: (boolean_pop integer_sub boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot print_integer exec_yankdup in3 in1 integer_min in2 integer_min in4 integer_min integer_swap integer_yank boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer tagged_299 boolean_invert_second_then_and tagged_299 integer_add boolean_pop boolean_not print_boolean print_integer tagged_344 integer_max boolean_flush integer_swap integer_lt boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 3500
program: (boolean_pop integer_sub boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot print_integer exec_yankdup in3 in1 integer_min in2 integer_min in4 integer_min integer_swap integer_yank boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer tagged_299 boolean_invert_second_then_and tagged_299 integer_add boolean_pop boolean_not print_boolean print_integer tagged_344 integer_max boolean_flush integer_swap integer_lt boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 4000
program: (boolean_pop integer_sub boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot print_integer exec_yankdup in3 in1 integer_min in2 integer_min in4 integer_min integer_swap integer_yank boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer tagged_299 boolean_invert_second_then_and tagged_299 integer_add boolean_pop boolean_not print_boolean print_integer tagged_344 integer_max boolean_flush integer_swap integer_lt boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 4500
program: (boolean_pop integer_sub boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot print_integer exec_yankdup in3 in1 integer_min in2 integer_min in4 integer_min integer_swap integer_yank boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer tagged_299 boolean_invert_second_then_and tagged_299 integer_add boolean_pop boolean_not print_boolean print_integer tagged_344 integer_max boolean_flush integer_swap integer_lt boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 5000
program: (boolean_pop integer_sub boolean_pop integer_sub integer_rot tag_boolean_662 exec_empty in3 in4 boolean_yank integer_pop integer_rot print_integer exec_yankdup in3 in1 integer_min in2 integer_min in4 integer_min integer_swap integer_yank boolean_not integer_swap exec_do*range (tagged_299 boolean_pop boolean_rot integer_lt tag_exec_731 (integer_mod integer_max in4 integer_swap exec_shove () boolean_not)) integer_swap print_integer tagged_299 boolean_pop boolean_not integer_swap print_integer tagged_299 boolean_invert_second_then_and tagged_299 integer_add boolean_pop boolean_not print_boolean print_integer tagged_344 integer_max boolean_flush integer_swap integer_lt boolean_not integer_swap print_integer tagged_299 boolean_pop integer_swap)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 46
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -26                 | Program output: -26                
Correct output: -28                 | Program output: -28                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: 9                   | Program output: 9                  
Correct output: -42                 | Program output: -42                
Correct output: 96                  | Program output: 96                 
Correct output: -77                 | Program output: -77                
Correct output: 50                  | Program output: 50                 
Correct output: 78                  | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 33                  | Program output: 33                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 44                  | Program output: 44                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 41                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 38                  | Program output: 38                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 17                 
Correct output: 36                  | Program output: 36                 
Correct output: 15                  | Program output: 15                 
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -66                 | Program output: -66                
Correct output: -11                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -95                 | Program output: -95                
Correct output: -53                 | Program output: -53                
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: -79                
Correct output: -6                  | Program output: -6                 
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -70                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -76                
Correct output: -67                 | Program output: -67                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -72                 | Program output: -72                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -78                 | Program output: -78                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -38                 | Program output: -38                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: -78                 | Program output: -78                
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -14                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -21                 | Program output: -21                
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: -97                
;;******************************
