Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-37 61 -37 -37] -37] [[32 -60 -60 -60] -60] [[-18 -26 -26 -26] -26] [[-70 -47 -70 -70] -70] [[15 -54 15 15] -54] [[-79 -79 -29 -79] -79] [[-72 -72 -13 -72] -72] [[22 -76 22 22] -76] [[57 -100 57 57] -100] [[47 47 70 47] 47] [(-23 -23 -23 -23) -23] [(-65 -65 -65 -65) -65] [(90 90 90 90) 90] [(-17 -17 -17 -17) -17] [(97 97 97 97) 97] [(9 29 80 15) 9] [(91 71 21 48) 21] [(48 10 3 9) 3] [(1 55 3 79) 1] [(35 70 7 61) 7] [(79 46 99 70) 46] [(49 63 90 32) 32] [(23 39 75 24) 23] [(17 24 85 87) 17] [(52 81 68 20) 20] [(59 92 42 0) 0] [(36 41 21 42) 21] [(51 10 12 76) 10] [(56 30 28 65) 28] [(13 66 92 38) 13] [(33 49 73 55) 33] [(46 12 47 52) 12] [(6 23 77 51) 6] [(41 26 46 82) 26] [(47 4 29 59) 4] [(17 59 99 -2) -2] [(33 -47 48 -48) -48] [(55 33 65 2) 2] [(-86 99 75 -27) -86] [(90 -41 -19 -67) -67] [(-23 2 -5 54) -23] [(-12 30 -42 -78) -78] [(18 -67 29 30) -67] [(-100 -76 -37 87) -100] [(33 -6 60 -76) -76] [(17 -41 -73 -56) -73] [(-85 -83 -70 -77) -85] [(-38 71 28 97) -38] [(68 -96 38 8) -96] [(-27 37 41 -58) -58] [(9 93 -92 -74) -92] [(-81 69 -4 -63) -81] [(42 -7 -59 -48) -59] [(-70 -90 -70 -71) -90] [(-92 -69 -54 63) -92] [(-45 19 45 -61) -61] [(-85 -28 -25 -40) -85] [(54 -41 -37 64) -41] [(2 -92 9 38) -92] [(-36 45 -15 58) -36] [(-67 -94 87 57) -94] [(20 -64 -64 -47) -64] [(75 57 57 -86) -86] [(15 35 -10 -63) -63] [(-66 -81 -79 75) -81] [(8 14 93 -99) -99] [(-79 -19 -45 -55) -79] [(-93 -66 -99 15) -99] [(-77 76 -90 84) -90] [(-8 92 36 -29) -29] [(52 -33 -49 -61) -61] [(14 30 -79 37) -79] [(-32 -18 -69 80) -69] [(-20 73 -83 69) -83] [(53 -24 64 9) -24] [(41 -66 57 15) -66] [(-3 -18 -91 -95) -95] [(-17 40 -100 94) -100] [(-52 -93 -80 84) -93] [(-71 20 -15 -41) -71] [(75 26 84 -18) -18] [(92 -14 100 12) -14] [(76 -73 -79 14) -79] [(-100 22 -14 -43) -100] [(-39 95 52 -60) -60] [(28 -62 -15 90) -62] [(-46 -23 -70 -7) -70] [(88 74 38 -8) -8] [(59 68 -80 -26) -80] [(-86 -9 4 -19) -86] [(99 87 -96 -25) -96] [(-13 35 53 -97) -97] [(14 -7 -52 -82) -82] [(-44 -48 97 95) -48] [(-91 -29 -10 -51) -91])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-37 61 -37 -37] -37]
Train Case:   6 | Input/Output: [[32 -60 -60 -60] -60]
Train Case:   7 | Input/Output: [[-18 -26 -26 -26] -26]
Train Case:   8 | Input/Output: [[-70 -47 -70 -70] -70]
Train Case:   9 | Input/Output: [[15 -54 15 15] -54]
Train Case:  10 | Input/Output: [[-79 -79 -29 -79] -79]
Train Case:  11 | Input/Output: [[-72 -72 -13 -72] -72]
Train Case:  12 | Input/Output: [[22 -76 22 22] -76]
Train Case:  13 | Input/Output: [[57 -100 57 57] -100]
Train Case:  14 | Input/Output: [[47 47 70 47] 47]
Train Case:  15 | Input/Output: [(-23 -23 -23 -23) -23]
Train Case:  16 | Input/Output: [(-65 -65 -65 -65) -65]
Train Case:  17 | Input/Output: [(90 90 90 90) 90]
Train Case:  18 | Input/Output: [(-17 -17 -17 -17) -17]
Train Case:  19 | Input/Output: [(97 97 97 97) 97]
Train Case:  20 | Input/Output: [(9 29 80 15) 9]
Train Case:  21 | Input/Output: [(91 71 21 48) 21]
Train Case:  22 | Input/Output: [(48 10 3 9) 3]
Train Case:  23 | Input/Output: [(1 55 3 79) 1]
Train Case:  24 | Input/Output: [(35 70 7 61) 7]
Train Case:  25 | Input/Output: [(79 46 99 70) 46]
Train Case:  26 | Input/Output: [(49 63 90 32) 32]
Train Case:  27 | Input/Output: [(23 39 75 24) 23]
Train Case:  28 | Input/Output: [(17 24 85 87) 17]
Train Case:  29 | Input/Output: [(52 81 68 20) 20]
Train Case:  30 | Input/Output: [(59 92 42 0) 0]
Train Case:  31 | Input/Output: [(36 41 21 42) 21]
Train Case:  32 | Input/Output: [(51 10 12 76) 10]
Train Case:  33 | Input/Output: [(56 30 28 65) 28]
Train Case:  34 | Input/Output: [(13 66 92 38) 13]
Train Case:  35 | Input/Output: [(33 49 73 55) 33]
Train Case:  36 | Input/Output: [(46 12 47 52) 12]
Train Case:  37 | Input/Output: [(6 23 77 51) 6]
Train Case:  38 | Input/Output: [(41 26 46 82) 26]
Train Case:  39 | Input/Output: [(47 4 29 59) 4]
Train Case:  40 | Input/Output: [(17 59 99 -2) -2]
Train Case:  41 | Input/Output: [(33 -47 48 -48) -48]
Train Case:  42 | Input/Output: [(55 33 65 2) 2]
Train Case:  43 | Input/Output: [(-86 99 75 -27) -86]
Train Case:  44 | Input/Output: [(90 -41 -19 -67) -67]
Train Case:  45 | Input/Output: [(-23 2 -5 54) -23]
Train Case:  46 | Input/Output: [(-12 30 -42 -78) -78]
Train Case:  47 | Input/Output: [(18 -67 29 30) -67]
Train Case:  48 | Input/Output: [(-100 -76 -37 87) -100]
Train Case:  49 | Input/Output: [(33 -6 60 -76) -76]
Train Case:  50 | Input/Output: [(17 -41 -73 -56) -73]
Train Case:  51 | Input/Output: [(-85 -83 -70 -77) -85]
Train Case:  52 | Input/Output: [(-38 71 28 97) -38]
Train Case:  53 | Input/Output: [(68 -96 38 8) -96]
Train Case:  54 | Input/Output: [(-27 37 41 -58) -58]
Train Case:  55 | Input/Output: [(9 93 -92 -74) -92]
Train Case:  56 | Input/Output: [(-81 69 -4 -63) -81]
Train Case:  57 | Input/Output: [(42 -7 -59 -48) -59]
Train Case:  58 | Input/Output: [(-70 -90 -70 -71) -90]
Train Case:  59 | Input/Output: [(-92 -69 -54 63) -92]
Train Case:  60 | Input/Output: [(-45 19 45 -61) -61]
Train Case:  61 | Input/Output: [(-85 -28 -25 -40) -85]
Train Case:  62 | Input/Output: [(54 -41 -37 64) -41]
Train Case:  63 | Input/Output: [(2 -92 9 38) -92]
Train Case:  64 | Input/Output: [(-36 45 -15 58) -36]
Train Case:  65 | Input/Output: [(-67 -94 87 57) -94]
Train Case:  66 | Input/Output: [(20 -64 -64 -47) -64]
Train Case:  67 | Input/Output: [(75 57 57 -86) -86]
Train Case:  68 | Input/Output: [(15 35 -10 -63) -63]
Train Case:  69 | Input/Output: [(-66 -81 -79 75) -81]
Train Case:  70 | Input/Output: [(8 14 93 -99) -99]
Train Case:  71 | Input/Output: [(-79 -19 -45 -55) -79]
Train Case:  72 | Input/Output: [(-93 -66 -99 15) -99]
Train Case:  73 | Input/Output: [(-77 76 -90 84) -90]
Train Case:  74 | Input/Output: [(-8 92 36 -29) -29]
Train Case:  75 | Input/Output: [(52 -33 -49 -61) -61]
Train Case:  76 | Input/Output: [(14 30 -79 37) -79]
Train Case:  77 | Input/Output: [(-32 -18 -69 80) -69]
Train Case:  78 | Input/Output: [(-20 73 -83 69) -83]
Train Case:  79 | Input/Output: [(53 -24 64 9) -24]
Train Case:  80 | Input/Output: [(41 -66 57 15) -66]
Train Case:  81 | Input/Output: [(-3 -18 -91 -95) -95]
Train Case:  82 | Input/Output: [(-17 40 -100 94) -100]
Train Case:  83 | Input/Output: [(-52 -93 -80 84) -93]
Train Case:  84 | Input/Output: [(-71 20 -15 -41) -71]
Train Case:  85 | Input/Output: [(75 26 84 -18) -18]
Train Case:  86 | Input/Output: [(92 -14 100 12) -14]
Train Case:  87 | Input/Output: [(76 -73 -79 14) -79]
Train Case:  88 | Input/Output: [(-100 22 -14 -43) -100]
Train Case:  89 | Input/Output: [(-39 95 52 -60) -60]
Train Case:  90 | Input/Output: [(28 -62 -15 90) -62]
Train Case:  91 | Input/Output: [(-46 -23 -70 -7) -70]
Train Case:  92 | Input/Output: [(88 74 38 -8) -8]
Train Case:  93 | Input/Output: [(59 68 -80 -26) -80]
Train Case:  94 | Input/Output: [(-86 -9 4 -19) -86]
Train Case:  95 | Input/Output: [(99 87 -96 -25) -96]
Train Case:  96 | Input/Output: [(-13 35 53 -97) -97]
Train Case:  97 | Input/Output: [(14 -7 -52 -82) -82]
Train Case:  98 | Input/Output: [(-44 -48 97 95) -48]
Train Case:  99 | Input/Output: [(-91 -29 -10 -51) -91]
Test Case:   0 | Input/Output: [[100 100 100 -21] -21]
Test Case:   1 | Input/Output: [[-59 -59 -59 -38] -59]
Test Case:   2 | Input/Output: [[-20 -20 -20 -69] -69]
Test Case:   3 | Input/Output: [[54 44 54 54] 44]
Test Case:   4 | Input/Output: [[82 82 82 2] 2]
Test Case:   5 | Input/Output: [[-10 -85 -10 -10] -85]
Test Case:   6 | Input/Output: [[-8 -8 -8 -42] -42]
Test Case:   7 | Input/Output: [[70 70 3 70] 3]
Test Case:   8 | Input/Output: [[-18 -18 -18 90] -18]
Test Case:   9 | Input/Output: [[27 27 27 -45] -45]
Test Case:  10 | Input/Output: [[59 -96 59 59] -96]
Test Case:  11 | Input/Output: [[93 93 93 -9] -9]
Test Case:  12 | Input/Output: [[-75 -75 -75 18] -75]
Test Case:  13 | Input/Output: [[-75 -75 0 -75] -75]
Test Case:  14 | Input/Output: [[55 1 55 55] 1]
Test Case:  15 | Input/Output: [[-43 -30 -30 -30] -43]
Test Case:  16 | Input/Output: [[-45 -45 -45 55] -45]
Test Case:  17 | Input/Output: [[-83 -83 -83 -1] -83]
Test Case:  18 | Input/Output: [[82 17 17 17] 17]
Test Case:  19 | Input/Output: [[-57 -57 -57 -35] -57]
Test Case:  20 | Input/Output: [[-17 95 95 95] -17]
Test Case:  21 | Input/Output: [[19 19 72 19] 19]
Test Case:  22 | Input/Output: [[94 70 70 70] 70]
Test Case:  23 | Input/Output: [[-24 -24 80 -24] -24]
Test Case:  24 | Input/Output: [[32 32 -31 32] -31]
Test Case:  25 | Input/Output: [[-24 -24 84 -24] -24]
Test Case:  26 | Input/Output: [[57 -17 57 57] -17]
Test Case:  27 | Input/Output: [[-75 -16 -16 -16] -75]
Test Case:  28 | Input/Output: [[18 -26 18 18] -26]
Test Case:  29 | Input/Output: [[-16 89 89 89] -16]
Test Case:  30 | Input/Output: [[-84 -84 76 -84] -84]
Test Case:  31 | Input/Output: [[19 19 19 57] 19]
Test Case:  32 | Input/Output: [[4 -81 -81 -81] -81]
Test Case:  33 | Input/Output: [[26 26 26 -24] -24]
Test Case:  34 | Input/Output: [[15 15 -49 15] -49]
Test Case:  35 | Input/Output: [[0 0 0 -72] -72]
Test Case:  36 | Input/Output: [[-42 -42 -42 43] -42]
Test Case:  37 | Input/Output: [[-24 -71 -71 -71] -71]
Test Case:  38 | Input/Output: [[35 35 -78 35] -78]
Test Case:  39 | Input/Output: [[100 100 100 17] 17]
Test Case:  40 | Input/Output: [[25 25 100 25] 25]
Test Case:  41 | Input/Output: [[8 57 8 8] 8]
Test Case:  42 | Input/Output: [[-92 -12 -92 -92] -92]
Test Case:  43 | Input/Output: [[41 41 41 -45] -45]
Test Case:  44 | Input/Output: [[3 3 69 3] 3]
Test Case:  45 | Input/Output: [[81 81 81 6] 6]
Test Case:  46 | Input/Output: [[-41 -41 -77 -41] -77]
Test Case:  47 | Input/Output: [[22 22 22 -35] -35]
Test Case:  48 | Input/Output: [[9 -10 9 9] -10]
Test Case:  49 | Input/Output: [[-27 -27 -44 -27] -44]
Test Case:  50 | Input/Output: [[26 82 26 26] 26]
Test Case:  51 | Input/Output: [[49 49 9 49] 9]
Test Case:  52 | Input/Output: [[-65 -65 -65 -81] -81]
Test Case:  53 | Input/Output: [[-42 45 45 45] -42]
Test Case:  54 | Input/Output: [[98 98 100 98] 98]
Test Case:  55 | Input/Output: [[-94 -94 -51 -94] -94]
Test Case:  56 | Input/Output: [[53 5 53 53] 5]
Test Case:  57 | Input/Output: [[26 26 74 26] 26]
Test Case:  58 | Input/Output: [[29 29 -68 29] -68]
Test Case:  59 | Input/Output: [[-50 -50 -50 50] -50]
Test Case:  60 | Input/Output: [[-74 89 -74 -74] -74]
Test Case:  61 | Input/Output: [[12 47 12 12] 12]
Test Case:  62 | Input/Output: [[-41 -41 -60 -41] -60]
Test Case:  63 | Input/Output: [[-79 69 -79 -79] -79]
Test Case:  64 | Input/Output: [[-17 -2 -17 -17] -17]
Test Case:  65 | Input/Output: [[-37 -97 -97 -97] -97]
Test Case:  66 | Input/Output: [[-94 -94 -90 -94] -94]
Test Case:  67 | Input/Output: [[-61 -28 -61 -61] -61]
Test Case:  68 | Input/Output: [[-93 21 21 21] -93]
Test Case:  69 | Input/Output: [[12 0 0 0] 0]
Test Case:  70 | Input/Output: [[63 63 -21 63] -21]
Test Case:  71 | Input/Output: [[-1 -1 23 -1] -1]
Test Case:  72 | Input/Output: [[59 59 82 59] 59]
Test Case:  73 | Input/Output: [[92 14 14 14] 14]
Test Case:  74 | Input/Output: [[74 74 23 74] 23]
Test Case:  75 | Input/Output: [[-32 -32 -29 -32] -32]
Test Case:  76 | Input/Output: [[-30 43 43 43] -30]
Test Case:  77 | Input/Output: [[-50 -38 -50 -50] -50]
Test Case:  78 | Input/Output: [[3 3 25 3] 3]
Test Case:  79 | Input/Output: [[-20 40 40 40] -20]
Test Case:  80 | Input/Output: [[-89 -50 -50 -50] -89]
Test Case:  81 | Input/Output: [[-5 -5 -5 -10] -10]
Test Case:  82 | Input/Output: [[65 65 65 -93] -93]
Test Case:  83 | Input/Output: [[60 60 60 60] 60]
Test Case:  84 | Input/Output: [[-84 -84 74 -84] -84]
Test Case:  85 | Input/Output: [[35 -2 35 35] -2]
Test Case:  86 | Input/Output: [[-22 45 -22 -22] -22]
Test Case:  87 | Input/Output: [[80 80 80 -11] -11]
Test Case:  88 | Input/Output: [[84 84 84 -67] -67]
Test Case:  89 | Input/Output: [[-99 -88 -88 -88] -99]
Test Case:  90 | Input/Output: [[71 71 71 66] 66]
Test Case:  91 | Input/Output: [[-90 -47 -47 -47] -90]
Test Case:  92 | Input/Output: [[-25 -25 -61 -25] -61]
Test Case:  93 | Input/Output: [[76 76 49 76] 49]
Test Case:  94 | Input/Output: [[7 7 7 25] 7]
Test Case:  95 | Input/Output: [[-100 -100 9 -100] -100]
Test Case:  96 | Input/Output: [[13 22 13 13] 13]
Test Case:  97 | Input/Output: [[48 48 -80 48] -80]
Test Case:  98 | Input/Output: [[84 84 0 84] 0]
Test Case:  99 | Input/Output: [[-42 47 47 47] -42]
Test Case: 100 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 101 | Input/Output: [(57 57 57 57) 57]
Test Case: 102 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 103 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 104 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 105 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 106 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 107 | Input/Output: [(48 48 48 48) 48]
Test Case: 108 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 109 | Input/Output: [(47 47 47 47) 47]
Test Case: 110 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 111 | Input/Output: [(88 88 88 88) 88]
Test Case: 112 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 113 | Input/Output: [(53 53 53 53) 53]
Test Case: 114 | Input/Output: [(32 32 32 32) 32]
Test Case: 115 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 116 | Input/Output: [(31 31 31 31) 31]
Test Case: 117 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 118 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 119 | Input/Output: [(80 80 80 80) 80]
Test Case: 120 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 121 | Input/Output: [(92 92 92 92) 92]
Test Case: 122 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 123 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 124 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 125 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 126 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 127 | Input/Output: [(41 41 41 41) 41]
Test Case: 128 | Input/Output: [(56 56 56 56) 56]
Test Case: 129 | Input/Output: [(46 46 46 46) 46]
Test Case: 130 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 131 | Input/Output: [(35 35 35 35) 35]
Test Case: 132 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 133 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 134 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 135 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 136 | Input/Output: [(1 1 1 1) 1]
Test Case: 137 | Input/Output: [(65 65 65 65) 65]
Test Case: 138 | Input/Output: [(82 82 82 82) 82]
Test Case: 139 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 140 | Input/Output: [(23 23 23 23) 23]
Test Case: 141 | Input/Output: [(56 56 56 56) 56]
Test Case: 142 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 143 | Input/Output: [(3 3 3 3) 3]
Test Case: 144 | Input/Output: [(69 69 69 69) 69]
Test Case: 145 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 146 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 147 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 148 | Input/Output: [(44 44 44 44) 44]
Test Case: 149 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 150 | Input/Output: [(22 22 22 22) 22]
Test Case: 151 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 152 | Input/Output: [(6 6 6 6) 6]
Test Case: 153 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 154 | Input/Output: [(42 42 42 42) 42]
Test Case: 155 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 156 | Input/Output: [(92 92 92 92) 92]
Test Case: 157 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 158 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 159 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 160 | Input/Output: [(83 83 83 83) 83]
Test Case: 161 | Input/Output: [(53 53 53 53) 53]
Test Case: 162 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 163 | Input/Output: [(81 81 81 81) 81]
Test Case: 164 | Input/Output: [(55 55 55 55) 55]
Test Case: 165 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 166 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 167 | Input/Output: [(96 96 96 96) 96]
Test Case: 168 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 169 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 170 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 171 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 172 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 173 | Input/Output: [(37 37 37 37) 37]
Test Case: 174 | Input/Output: [(17 17 17 17) 17]
Test Case: 175 | Input/Output: [(51 51 51 51) 51]
Test Case: 176 | Input/Output: [(65 65 65 65) 65]
Test Case: 177 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 178 | Input/Output: [(13 13 13 13) 13]
Test Case: 179 | Input/Output: [(13 13 13 13) 13]
Test Case: 180 | Input/Output: [(67 67 67 67) 67]
Test Case: 181 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 182 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 183 | Input/Output: [(42 42 42 42) 42]
Test Case: 184 | Input/Output: [(6 6 6 6) 6]
Test Case: 185 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 186 | Input/Output: [(28 28 28 28) 28]
Test Case: 187 | Input/Output: [(98 98 98 98) 98]
Test Case: 188 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 189 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 190 | Input/Output: [(54 54 54 54) 54]
Test Case: 191 | Input/Output: [(47 47 47 47) 47]
Test Case: 192 | Input/Output: [(47 47 47 47) 47]
Test Case: 193 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 194 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 195 | Input/Output: [(36 36 36 36) 36]
Test Case: 196 | Input/Output: [(0 0 0 0) 0]
Test Case: 197 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 198 | Input/Output: [(39 39 39 39) 39]
Test Case: 199 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 200 | Input/Output: [(46 17 51 24) 17]
Test Case: 201 | Input/Output: [(23 9 19 76) 9]
Test Case: 202 | Input/Output: [(53 13 69 79) 13]
Test Case: 203 | Input/Output: [(45 57 53 45) 45]
Test Case: 204 | Input/Output: [(41 0 5 26) 0]
Test Case: 205 | Input/Output: [(36 13 44 12) 12]
Test Case: 206 | Input/Output: [(77 75 18 71) 18]
Test Case: 207 | Input/Output: [(80 64 39 80) 39]
Test Case: 208 | Input/Output: [(20 72 90 56) 20]
Test Case: 209 | Input/Output: [(41 59 59 52) 41]
Test Case: 210 | Input/Output: [(95 57 14 72) 14]
Test Case: 211 | Input/Output: [(32 47 17 34) 17]
Test Case: 212 | Input/Output: [(29 85 5 74) 5]
Test Case: 213 | Input/Output: [(45 29 45 86) 29]
Test Case: 214 | Input/Output: [(1 11 11 64) 1]
Test Case: 215 | Input/Output: [(21 83 49 81) 21]
Test Case: 216 | Input/Output: [(93 18 24 48) 18]
Test Case: 217 | Input/Output: [(7 98 60 77) 7]
Test Case: 218 | Input/Output: [(64 20 97 31) 20]
Test Case: 219 | Input/Output: [(25 41 56 0) 0]
Test Case: 220 | Input/Output: [(8 83 98 4) 4]
Test Case: 221 | Input/Output: [(12 88 44 9) 9]
Test Case: 222 | Input/Output: [(69 79 50 48) 48]
Test Case: 223 | Input/Output: [(98 34 22 89) 22]
Test Case: 224 | Input/Output: [(6 38 66 17) 6]
Test Case: 225 | Input/Output: [(94 93 37 37) 37]
Test Case: 226 | Input/Output: [(77 64 9 32) 9]
Test Case: 227 | Input/Output: [(6 23 10 93) 6]
Test Case: 228 | Input/Output: [(28 1 31 57) 1]
Test Case: 229 | Input/Output: [(96 19 19 2) 2]
Test Case: 230 | Input/Output: [(47 29 3 32) 3]
Test Case: 231 | Input/Output: [(62 18 77 71) 18]
Test Case: 232 | Input/Output: [(97 7 18 29) 7]
Test Case: 233 | Input/Output: [(69 20 91 15) 15]
Test Case: 234 | Input/Output: [(75 81 75 12) 12]
Test Case: 235 | Input/Output: [(57 59 56 6) 6]
Test Case: 236 | Input/Output: [(87 48 90 78) 48]
Test Case: 237 | Input/Output: [(46 54 32 6) 6]
Test Case: 238 | Input/Output: [(27 52 47 24) 24]
Test Case: 239 | Input/Output: [(4 38 57 22) 4]
Test Case: 240 | Input/Output: [(93 31 5 44) 5]
Test Case: 241 | Input/Output: [(20 97 83 71) 20]
Test Case: 242 | Input/Output: [(80 58 45 15) 15]
Test Case: 243 | Input/Output: [(71 7 10 56) 7]
Test Case: 244 | Input/Output: [(8 15 73 57) 8]
Test Case: 245 | Input/Output: [(81 60 46 22) 22]
Test Case: 246 | Input/Output: [(56 92 31 54) 31]
Test Case: 247 | Input/Output: [(43 97 23 70) 23]
Test Case: 248 | Input/Output: [(43 24 21 74) 21]
Test Case: 249 | Input/Output: [(48 58 17 6) 6]
Test Case: 250 | Input/Output: [(69 3 86 98) 3]
Test Case: 251 | Input/Output: [(28 16 9 98) 9]
Test Case: 252 | Input/Output: [(19 27 78 75) 19]
Test Case: 253 | Input/Output: [(60 36 10 52) 10]
Test Case: 254 | Input/Output: [(13 25 0 80) 0]
Test Case: 255 | Input/Output: [(52 75 50 87) 50]
Test Case: 256 | Input/Output: [(39 53 9 99) 9]
Test Case: 257 | Input/Output: [(3 7 73 77) 3]
Test Case: 258 | Input/Output: [(71 38 20 41) 20]
Test Case: 259 | Input/Output: [(58 55 47 49) 47]
Test Case: 260 | Input/Output: [(95 77 81 0) 0]
Test Case: 261 | Input/Output: [(94 28 90 85) 28]
Test Case: 262 | Input/Output: [(37 6 5 77) 5]
Test Case: 263 | Input/Output: [(18 61 100 65) 18]
Test Case: 264 | Input/Output: [(100 38 2 85) 2]
Test Case: 265 | Input/Output: [(85 24 19 11) 11]
Test Case: 266 | Input/Output: [(81 95 95 74) 74]
Test Case: 267 | Input/Output: [(85 10 6 63) 6]
Test Case: 268 | Input/Output: [(48 6 29 52) 6]
Test Case: 269 | Input/Output: [(42 87 12 21) 12]
Test Case: 270 | Input/Output: [(59 77 96 2) 2]
Test Case: 271 | Input/Output: [(68 70 12 78) 12]
Test Case: 272 | Input/Output: [(86 19 9 72) 9]
Test Case: 273 | Input/Output: [(12 20 37 86) 12]
Test Case: 274 | Input/Output: [(35 91 44 71) 35]
Test Case: 275 | Input/Output: [(29 86 68 26) 26]
Test Case: 276 | Input/Output: [(48 37 75 45) 37]
Test Case: 277 | Input/Output: [(13 42 13 63) 13]
Test Case: 278 | Input/Output: [(83 2 20 56) 2]
Test Case: 279 | Input/Output: [(70 87 68 46) 46]
Test Case: 280 | Input/Output: [(81 77 44 6) 6]
Test Case: 281 | Input/Output: [(100 98 51 57) 51]
Test Case: 282 | Input/Output: [(100 47 22 10) 10]
Test Case: 283 | Input/Output: [(9 11 0 46) 0]
Test Case: 284 | Input/Output: [(80 35 67 14) 14]
Test Case: 285 | Input/Output: [(66 70 88 60) 60]
Test Case: 286 | Input/Output: [(26 67 100 40) 26]
Test Case: 287 | Input/Output: [(37 56 63 63) 37]
Test Case: 288 | Input/Output: [(82 38 51 98) 38]
Test Case: 289 | Input/Output: [(59 67 39 23) 23]
Test Case: 290 | Input/Output: [(50 23 18 72) 18]
Test Case: 291 | Input/Output: [(36 30 56 10) 10]
Test Case: 292 | Input/Output: [(26 56 96 11) 11]
Test Case: 293 | Input/Output: [(28 77 93 54) 28]
Test Case: 294 | Input/Output: [(35 50 83 69) 35]
Test Case: 295 | Input/Output: [(31 40 42 54) 31]
Test Case: 296 | Input/Output: [(6 59 29 84) 6]
Test Case: 297 | Input/Output: [(31 38 70 41) 31]
Test Case: 298 | Input/Output: [(44 32 2 94) 2]
Test Case: 299 | Input/Output: [(6 75 34 27) 6]
Test Case: 300 | Input/Output: [(9 12 45 73) 9]
Test Case: 301 | Input/Output: [(96 19 79 61) 19]
Test Case: 302 | Input/Output: [(60 39 64 71) 39]
Test Case: 303 | Input/Output: [(23 87 19 5) 5]
Test Case: 304 | Input/Output: [(92 56 10 18) 10]
Test Case: 305 | Input/Output: [(9 64 68 53) 9]
Test Case: 306 | Input/Output: [(7 75 38 81) 7]
Test Case: 307 | Input/Output: [(3 85 30 62) 3]
Test Case: 308 | Input/Output: [(6 62 41 7) 6]
Test Case: 309 | Input/Output: [(79 3 14 75) 3]
Test Case: 310 | Input/Output: [(96 57 99 78) 57]
Test Case: 311 | Input/Output: [(90 45 24 27) 24]
Test Case: 312 | Input/Output: [(99 82 1 13) 1]
Test Case: 313 | Input/Output: [(41 20 97 88) 20]
Test Case: 314 | Input/Output: [(83 65 18 72) 18]
Test Case: 315 | Input/Output: [(66 8 44 5) 5]
Test Case: 316 | Input/Output: [(27 100 80 90) 27]
Test Case: 317 | Input/Output: [(30 3 27 62) 3]
Test Case: 318 | Input/Output: [(9 61 4 71) 4]
Test Case: 319 | Input/Output: [(41 25 45 76) 25]
Test Case: 320 | Input/Output: [(67 18 83 25) 18]
Test Case: 321 | Input/Output: [(44 81 84 56) 44]
Test Case: 322 | Input/Output: [(38 63 21 87) 21]
Test Case: 323 | Input/Output: [(10 65 79 58) 10]
Test Case: 324 | Input/Output: [(34 59 86 82) 34]
Test Case: 325 | Input/Output: [(3 9 90 97) 3]
Test Case: 326 | Input/Output: [(92 10 15 58) 10]
Test Case: 327 | Input/Output: [(48 41 66 32) 32]
Test Case: 328 | Input/Output: [(41 44 6 4) 4]
Test Case: 329 | Input/Output: [(44 53 7 92) 7]
Test Case: 330 | Input/Output: [(80 30 50 0) 0]
Test Case: 331 | Input/Output: [(56 34 84 20) 20]
Test Case: 332 | Input/Output: [(99 19 8 14) 8]
Test Case: 333 | Input/Output: [(99 83 41 58) 41]
Test Case: 334 | Input/Output: [(45 44 64 30) 30]
Test Case: 335 | Input/Output: [(37 32 68 41) 32]
Test Case: 336 | Input/Output: [(78 75 92 45) 45]
Test Case: 337 | Input/Output: [(91 0 2 100) 0]
Test Case: 338 | Input/Output: [(83 55 14 85) 14]
Test Case: 339 | Input/Output: [(21 75 73 59) 21]
Test Case: 340 | Input/Output: [(8 8 24 10) 8]
Test Case: 341 | Input/Output: [(94 21 58 11) 11]
Test Case: 342 | Input/Output: [(89 25 73 24) 24]
Test Case: 343 | Input/Output: [(67 36 84 96) 36]
Test Case: 344 | Input/Output: [(56 1 93 32) 1]
Test Case: 345 | Input/Output: [(67 98 8 15) 8]
Test Case: 346 | Input/Output: [(3 48 100 2) 2]
Test Case: 347 | Input/Output: [(3 94 61 73) 3]
Test Case: 348 | Input/Output: [(77 57 83 29) 29]
Test Case: 349 | Input/Output: [(84 6 28 69) 6]
Test Case: 350 | Input/Output: [(2 55 20 55) 2]
Test Case: 351 | Input/Output: [(97 13 36 95) 13]
Test Case: 352 | Input/Output: [(22 31 9 5) 5]
Test Case: 353 | Input/Output: [(20 81 60 20) 20]
Test Case: 354 | Input/Output: [(46 58 41 24) 24]
Test Case: 355 | Input/Output: [(84 0 20 83) 0]
Test Case: 356 | Input/Output: [(0 22 100 97) 0]
Test Case: 357 | Input/Output: [(64 40 53 14) 14]
Test Case: 358 | Input/Output: [(74 8 93 80) 8]
Test Case: 359 | Input/Output: [(23 7 99 86) 7]
Test Case: 360 | Input/Output: [(29 74 77 25) 25]
Test Case: 361 | Input/Output: [(40 60 44 92) 40]
Test Case: 362 | Input/Output: [(22 24 53 29) 22]
Test Case: 363 | Input/Output: [(89 99 98 93) 89]
Test Case: 364 | Input/Output: [(50 34 89 47) 34]
Test Case: 365 | Input/Output: [(58 83 68 95) 58]
Test Case: 366 | Input/Output: [(72 14 43 68) 14]
Test Case: 367 | Input/Output: [(28 27 77 17) 17]
Test Case: 368 | Input/Output: [(34 36 23 41) 23]
Test Case: 369 | Input/Output: [(68 63 87 85) 63]
Test Case: 370 | Input/Output: [(79 64 68 17) 17]
Test Case: 371 | Input/Output: [(81 3 1 92) 1]
Test Case: 372 | Input/Output: [(17 81 52 37) 17]
Test Case: 373 | Input/Output: [(66 50 64 38) 38]
Test Case: 374 | Input/Output: [(71 50 15 38) 15]
Test Case: 375 | Input/Output: [(95 13 61 23) 13]
Test Case: 376 | Input/Output: [(99 94 79 94) 79]
Test Case: 377 | Input/Output: [(77 6 85 70) 6]
Test Case: 378 | Input/Output: [(50 65 57 64) 50]
Test Case: 379 | Input/Output: [(44 66 88 48) 44]
Test Case: 380 | Input/Output: [(6 49 57 43) 6]
Test Case: 381 | Input/Output: [(64 83 98 33) 33]
Test Case: 382 | Input/Output: [(32 59 62 95) 32]
Test Case: 383 | Input/Output: [(13 7 98 16) 7]
Test Case: 384 | Input/Output: [(0 84 89 23) 0]
Test Case: 385 | Input/Output: [(35 25 32 8) 8]
Test Case: 386 | Input/Output: [(62 60 9 65) 9]
Test Case: 387 | Input/Output: [(60 7 11 69) 7]
Test Case: 388 | Input/Output: [(84 7 40 59) 7]
Test Case: 389 | Input/Output: [(93 91 60 67) 60]
Test Case: 390 | Input/Output: [(18 0 42 63) 0]
Test Case: 391 | Input/Output: [(11 54 44 15) 11]
Test Case: 392 | Input/Output: [(76 78 63 68) 63]
Test Case: 393 | Input/Output: [(7 21 18 80) 7]
Test Case: 394 | Input/Output: [(37 28 11 35) 11]
Test Case: 395 | Input/Output: [(10 70 72 74) 10]
Test Case: 396 | Input/Output: [(27 54 45 25) 25]
Test Case: 397 | Input/Output: [(90 54 89 11) 11]
Test Case: 398 | Input/Output: [(74 21 34 4) 4]
Test Case: 399 | Input/Output: [(39 58 18 30) 18]
Test Case: 400 | Input/Output: [(10 -4 -74 -1) -74]
Test Case: 401 | Input/Output: [(-67 97 96 1) -67]
Test Case: 402 | Input/Output: [(-3 -88 79 -70) -88]
Test Case: 403 | Input/Output: [(57 -10 -83 70) -83]
Test Case: 404 | Input/Output: [(65 -61 79 20) -61]
Test Case: 405 | Input/Output: [(8 -30 5 -40) -40]
Test Case: 406 | Input/Output: [(-25 -32 -60 5) -60]
Test Case: 407 | Input/Output: [(58 81 -18 -86) -86]
Test Case: 408 | Input/Output: [(-99 38 51 -64) -99]
Test Case: 409 | Input/Output: [(90 -1 -76 0) -76]
Test Case: 410 | Input/Output: [(-12 97 81 53) -12]
Test Case: 411 | Input/Output: [(-7 7 -97 -29) -97]
Test Case: 412 | Input/Output: [(-44 41 -64 -18) -64]
Test Case: 413 | Input/Output: [(29 -58 23 83) -58]
Test Case: 414 | Input/Output: [(83 -97 -52 -66) -97]
Test Case: 415 | Input/Output: [(52 -47 -61 -28) -61]
Test Case: 416 | Input/Output: [(17 57 3 -1) -1]
Test Case: 417 | Input/Output: [(-50 92 86 82) -50]
Test Case: 418 | Input/Output: [(-22 -10 -92 2) -92]
Test Case: 419 | Input/Output: [(59 -66 15 2) -66]
Test Case: 420 | Input/Output: [(-90 65 4 30) -90]
Test Case: 421 | Input/Output: [(1 -66 -93 75) -93]
Test Case: 422 | Input/Output: [(91 12 18 26) 12]
Test Case: 423 | Input/Output: [(8 57 10 39) 8]
Test Case: 424 | Input/Output: [(-48 -39 -38 99) -48]
Test Case: 425 | Input/Output: [(29 -99 77 -12) -99]
Test Case: 426 | Input/Output: [(50 -94 67 34) -94]
Test Case: 427 | Input/Output: [(41 -41 34 63) -41]
Test Case: 428 | Input/Output: [(-26 38 -50 -98) -98]
Test Case: 429 | Input/Output: [(-33 -9 76 92) -33]
Test Case: 430 | Input/Output: [(-2 -89 -56 -85) -89]
Test Case: 431 | Input/Output: [(43 82 -28 -83) -83]
Test Case: 432 | Input/Output: [(58 77 -14 62) -14]
Test Case: 433 | Input/Output: [(-84 -65 88 73) -84]
Test Case: 434 | Input/Output: [(-48 -95 -94 25) -95]
Test Case: 435 | Input/Output: [(-66 -90 78 -56) -90]
Test Case: 436 | Input/Output: [(93 73 66 -10) -10]
Test Case: 437 | Input/Output: [(-100 -37 80 -74) -100]
Test Case: 438 | Input/Output: [(46 -44 71 57) -44]
Test Case: 439 | Input/Output: [(52 -40 -59 -79) -79]
Test Case: 440 | Input/Output: [(36 79 61 -53) -53]
Test Case: 441 | Input/Output: [(68 50 -19 91) -19]
Test Case: 442 | Input/Output: [(69 -92 72 71) -92]
Test Case: 443 | Input/Output: [(72 -84 -61 -85) -85]
Test Case: 444 | Input/Output: [(-56 21 -27 50) -56]
Test Case: 445 | Input/Output: [(-39 -38 86 -43) -43]
Test Case: 446 | Input/Output: [(-7 -74 94 53) -74]
Test Case: 447 | Input/Output: [(57 49 7 -83) -83]
Test Case: 448 | Input/Output: [(-52 -85 31 -60) -85]
Test Case: 449 | Input/Output: [(-94 84 44 67) -94]
Test Case: 450 | Input/Output: [(33 58 93 100) 33]
Test Case: 451 | Input/Output: [(-85 11 -78 13) -85]
Test Case: 452 | Input/Output: [(-47 68 -57 68) -57]
Test Case: 453 | Input/Output: [(-75 20 -49 -22) -75]
Test Case: 454 | Input/Output: [(22 -100 -34 -59) -100]
Test Case: 455 | Input/Output: [(4 -6 -10 19) -10]
Test Case: 456 | Input/Output: [(85 51 -33 58) -33]
Test Case: 457 | Input/Output: [(19 -82 -99 25) -99]
Test Case: 458 | Input/Output: [(4 88 -54 -47) -54]
Test Case: 459 | Input/Output: [(53 -1 -34 70) -34]
Test Case: 460 | Input/Output: [(13 8 88 -45) -45]
Test Case: 461 | Input/Output: [(63 1 -11 6) -11]
Test Case: 462 | Input/Output: [(-15 -96 -97 42) -97]
Test Case: 463 | Input/Output: [(41 -92 4 21) -92]
Test Case: 464 | Input/Output: [(95 11 -55 74) -55]
Test Case: 465 | Input/Output: [(-46 -64 -88 11) -88]
Test Case: 466 | Input/Output: [(-99 33 39 -48) -99]
Test Case: 467 | Input/Output: [(28 94 -26 -6) -26]
Test Case: 468 | Input/Output: [(13 -25 78 20) -25]
Test Case: 469 | Input/Output: [(-27 -18 46 -59) -59]
Test Case: 470 | Input/Output: [(-53 14 32 98) -53]
Test Case: 471 | Input/Output: [(-54 95 -74 -89) -89]
Test Case: 472 | Input/Output: [(70 71 98 37) 37]
Test Case: 473 | Input/Output: [(-12 71 -54 55) -54]
Test Case: 474 | Input/Output: [(56 12 8 -87) -87]
Test Case: 475 | Input/Output: [(86 -77 19 87) -77]
Test Case: 476 | Input/Output: [(81 3 -28 40) -28]
Test Case: 477 | Input/Output: [(25 56 -34 -12) -34]
Test Case: 478 | Input/Output: [(17 -83 35 -76) -83]
Test Case: 479 | Input/Output: [(51 -26 -41 66) -41]
Test Case: 480 | Input/Output: [(99 4 62 -100) -100]
Test Case: 481 | Input/Output: [(24 71 -96 -17) -96]
Test Case: 482 | Input/Output: [(3 -53 85 84) -53]
Test Case: 483 | Input/Output: [(70 82 72 94) 70]
Test Case: 484 | Input/Output: [(53 -56 78 -48) -56]
Test Case: 485 | Input/Output: [(-83 74 -1 71) -83]
Test Case: 486 | Input/Output: [(33 13 -62 16) -62]
Test Case: 487 | Input/Output: [(-80 -9 -11 93) -80]
Test Case: 488 | Input/Output: [(-33 -61 -74 -34) -74]
Test Case: 489 | Input/Output: [(-12 93 85 100) -12]
Test Case: 490 | Input/Output: [(13 -20 -34 49) -34]
Test Case: 491 | Input/Output: [(98 41 38 15) 15]
Test Case: 492 | Input/Output: [(12 -52 -41 -62) -62]
Test Case: 493 | Input/Output: [(-27 95 -34 -13) -34]
Test Case: 494 | Input/Output: [(-46 -28 62 -49) -49]
Test Case: 495 | Input/Output: [(55 -38 24 -6) -38]
Test Case: 496 | Input/Output: [(-55 -98 21 67) -98]
Test Case: 497 | Input/Output: [(-36 46 -3 53) -36]
Test Case: 498 | Input/Output: [(45 -7 80 -75) -75]
Test Case: 499 | Input/Output: [(70 -99 -52 71) -99]
Test Case: 500 | Input/Output: [(-16 -78 -93 52) -93]
Test Case: 501 | Input/Output: [(53 -74 31 84) -74]
Test Case: 502 | Input/Output: [(30 -5 18 24) -5]
Test Case: 503 | Input/Output: [(-95 -65 -34 40) -95]
Test Case: 504 | Input/Output: [(52 -11 84 8) -11]
Test Case: 505 | Input/Output: [(-86 11 26 -54) -86]
Test Case: 506 | Input/Output: [(-90 -67 88 24) -90]
Test Case: 507 | Input/Output: [(-12 55 29 32) -12]
Test Case: 508 | Input/Output: [(8 22 93 -87) -87]
Test Case: 509 | Input/Output: [(33 58 -3 52) -3]
Test Case: 510 | Input/Output: [(-50 -18 -97 -75) -97]
Test Case: 511 | Input/Output: [(-84 -11 -59 -46) -84]
Test Case: 512 | Input/Output: [(36 -88 -47 93) -88]
Test Case: 513 | Input/Output: [(-17 54 -85 27) -85]
Test Case: 514 | Input/Output: [(-99 53 -80 -77) -99]
Test Case: 515 | Input/Output: [(-9 87 26 -1) -9]
Test Case: 516 | Input/Output: [(56 -63 -73 61) -73]
Test Case: 517 | Input/Output: [(89 -83 56 22) -83]
Test Case: 518 | Input/Output: [(71 56 38 40) 38]
Test Case: 519 | Input/Output: [(35 -66 37 -74) -74]
Test Case: 520 | Input/Output: [(-19 -12 48 11) -19]
Test Case: 521 | Input/Output: [(-30 29 28 87) -30]
Test Case: 522 | Input/Output: [(-78 98 55 70) -78]
Test Case: 523 | Input/Output: [(81 -28 26 16) -28]
Test Case: 524 | Input/Output: [(49 -25 59 66) -25]
Test Case: 525 | Input/Output: [(52 56 89 52) 52]
Test Case: 526 | Input/Output: [(-24 48 86 -26) -26]
Test Case: 527 | Input/Output: [(-81 45 67 -37) -81]
Test Case: 528 | Input/Output: [(63 3 88 8) 3]
Test Case: 529 | Input/Output: [(-47 -34 -55 -14) -55]
Test Case: 530 | Input/Output: [(71 -62 -41 77) -62]
Test Case: 531 | Input/Output: [(78 65 85 85) 65]
Test Case: 532 | Input/Output: [(-38 -54 87 57) -54]
Test Case: 533 | Input/Output: [(100 -94 82 80) -94]
Test Case: 534 | Input/Output: [(67 -93 16 82) -93]
Test Case: 535 | Input/Output: [(-99 -79 -46 -39) -99]
Test Case: 536 | Input/Output: [(-41 -93 84 -45) -93]
Test Case: 537 | Input/Output: [(75 100 -99 -36) -99]
Test Case: 538 | Input/Output: [(-84 99 -71 0) -84]
Test Case: 539 | Input/Output: [(-63 -91 65 -75) -91]
Test Case: 540 | Input/Output: [(-92 -51 19 -31) -92]
Test Case: 541 | Input/Output: [(-10 -50 44 -99) -99]
Test Case: 542 | Input/Output: [(-23 6 -91 94) -91]
Test Case: 543 | Input/Output: [(-38 -11 -28 71) -38]
Test Case: 544 | Input/Output: [(-74 -57 79 -54) -74]
Test Case: 545 | Input/Output: [(8 29 30 44) 8]
Test Case: 546 | Input/Output: [(-42 -40 41 13) -42]
Test Case: 547 | Input/Output: [(-82 1 -8 14) -82]
Test Case: 548 | Input/Output: [(54 -26 -39 50) -39]
Test Case: 549 | Input/Output: [(-52 -96 -33 -89) -96]
Test Case: 550 | Input/Output: [(-83 -77 -23 26) -83]
Test Case: 551 | Input/Output: [(-27 33 -42 -42) -42]
Test Case: 552 | Input/Output: [(31 93 -3 -72) -72]
Test Case: 553 | Input/Output: [(-28 -97 -35 -65) -97]
Test Case: 554 | Input/Output: [(-42 -52 58 -73) -73]
Test Case: 555 | Input/Output: [(23 36 -19 64) -19]
Test Case: 556 | Input/Output: [(-41 72 -35 27) -41]
Test Case: 557 | Input/Output: [(-24 -82 24 70) -82]
Test Case: 558 | Input/Output: [(-58 6 -46 5) -58]
Test Case: 559 | Input/Output: [(-88 54 74 -90) -90]
Test Case: 560 | Input/Output: [(21 -75 -58 87) -75]
Test Case: 561 | Input/Output: [(17 -69 24 15) -69]
Test Case: 562 | Input/Output: [(-100 -69 -1 -49) -100]
Test Case: 563 | Input/Output: [(35 -51 -9 -36) -51]
Test Case: 564 | Input/Output: [(-15 32 -50 -7) -50]
Test Case: 565 | Input/Output: [(-35 32 -59 29) -59]
Test Case: 566 | Input/Output: [(84 59 -8 85) -8]
Test Case: 567 | Input/Output: [(16 2 -81 -29) -81]
Test Case: 568 | Input/Output: [(-44 30 -82 -50) -82]
Test Case: 569 | Input/Output: [(-17 10 -28 -52) -52]
Test Case: 570 | Input/Output: [(50 10 56 37) 10]
Test Case: 571 | Input/Output: [(93 -95 -3 21) -95]
Test Case: 572 | Input/Output: [(-89 -94 -40 23) -94]
Test Case: 573 | Input/Output: [(-42 -41 90 9) -42]
Test Case: 574 | Input/Output: [(59 -86 -24 -40) -86]
Test Case: 575 | Input/Output: [(93 4 77 -72) -72]
Test Case: 576 | Input/Output: [(-10 -8 -26 -65) -65]
Test Case: 577 | Input/Output: [(-99 -34 19 -71) -99]
Test Case: 578 | Input/Output: [(57 74 28 -61) -61]
Test Case: 579 | Input/Output: [(58 48 -8 -57) -57]
Test Case: 580 | Input/Output: [(14 -67 -3 97) -67]
Test Case: 581 | Input/Output: [(-35 6 4 64) -35]
Test Case: 582 | Input/Output: [(-33 -97 -59 -68) -97]
Test Case: 583 | Input/Output: [(-71 54 74 34) -71]
Test Case: 584 | Input/Output: [(95 14 -16 29) -16]
Test Case: 585 | Input/Output: [(87 47 10 95) 10]
Test Case: 586 | Input/Output: [(-84 68 -23 -45) -84]
Test Case: 587 | Input/Output: [(-19 -81 97 8) -81]
Test Case: 588 | Input/Output: [(-12 -5 14 -85) -85]
Test Case: 589 | Input/Output: [(46 -41 -59 46) -59]
Test Case: 590 | Input/Output: [(97 74 61 81) 61]
Test Case: 591 | Input/Output: [(50 19 -3 -68) -68]
Test Case: 592 | Input/Output: [(-65 -52 -18 71) -65]
Test Case: 593 | Input/Output: [(70 92 -32 64) -32]
Test Case: 594 | Input/Output: [(-45 -28 -18 -90) -90]
Test Case: 595 | Input/Output: [(-96 -85 76 68) -96]
Test Case: 596 | Input/Output: [(69 -69 -19 -65) -69]
Test Case: 597 | Input/Output: [(-60 -59 82 71) -60]
Test Case: 598 | Input/Output: [(22 51 99 -8) -8]
Test Case: 599 | Input/Output: [(48 80 -34 -85) -85]
Test Case: 600 | Input/Output: [(93 -3 41 99) -3]
Test Case: 601 | Input/Output: [(2 -46 2 28) -46]
Test Case: 602 | Input/Output: [(70 -9 -78 50) -78]
Test Case: 603 | Input/Output: [(2 41 -63 1) -63]
Test Case: 604 | Input/Output: [(35 9 57 -22) -22]
Test Case: 605 | Input/Output: [(98 43 -63 -81) -81]
Test Case: 606 | Input/Output: [(-66 24 93 -11) -66]
Test Case: 607 | Input/Output: [(32 -52 -42 64) -52]
Test Case: 608 | Input/Output: [(66 -7 -83 -81) -83]
Test Case: 609 | Input/Output: [(25 -9 35 -39) -39]
Test Case: 610 | Input/Output: [(-61 -22 -39 82) -61]
Test Case: 611 | Input/Output: [(-51 28 22 -16) -51]
Test Case: 612 | Input/Output: [(-48 -22 17 -71) -71]
Test Case: 613 | Input/Output: [(-27 59 83 -14) -27]
Test Case: 614 | Input/Output: [(61 -32 -36 -90) -90]
Test Case: 615 | Input/Output: [(51 -12 -24 25) -24]
Test Case: 616 | Input/Output: [(26 -73 -71 -41) -73]
Test Case: 617 | Input/Output: [(80 9 84 -22) -22]
Test Case: 618 | Input/Output: [(-49 85 -90 61) -90]
Test Case: 619 | Input/Output: [(31 -19 -32 -47) -47]
Test Case: 620 | Input/Output: [(85 99 94 41) 41]
Test Case: 621 | Input/Output: [(53 -19 42 -73) -73]
Test Case: 622 | Input/Output: [(72 78 -69 53) -69]
Test Case: 623 | Input/Output: [(-4 20 71 -53) -53]
Test Case: 624 | Input/Output: [(-29 -34 21 86) -34]
Test Case: 625 | Input/Output: [(70 21 -84 95) -84]
Test Case: 626 | Input/Output: [(-94 74 99 -64) -94]
Test Case: 627 | Input/Output: [(-4 89 66 -89) -89]
Test Case: 628 | Input/Output: [(34 29 -52 -39) -52]
Test Case: 629 | Input/Output: [(-33 -28 -40 -55) -55]
Test Case: 630 | Input/Output: [(-19 68 79 -1) -19]
Test Case: 631 | Input/Output: [(22 -65 63 -28) -65]
Test Case: 632 | Input/Output: [(-13 -45 22 59) -45]
Test Case: 633 | Input/Output: [(-16 -58 60 83) -58]
Test Case: 634 | Input/Output: [(89 5 -21 -38) -38]
Test Case: 635 | Input/Output: [(16 96 -41 58) -41]
Test Case: 636 | Input/Output: [(-31 -95 -54 63) -95]
Test Case: 637 | Input/Output: [(-19 24 69 -31) -31]
Test Case: 638 | Input/Output: [(65 77 7 -86) -86]
Test Case: 639 | Input/Output: [(-35 -15 86 -76) -76]
Test Case: 640 | Input/Output: [(51 85 -80 46) -80]
Test Case: 641 | Input/Output: [(74 -25 -69 -80) -80]
Test Case: 642 | Input/Output: [(-41 -33 -39 66) -41]
Test Case: 643 | Input/Output: [(-55 -84 -19 -94) -94]
Test Case: 644 | Input/Output: [(57 -86 54 -61) -86]
Test Case: 645 | Input/Output: [(42 7 -83 -41) -83]
Test Case: 646 | Input/Output: [(-86 76 68 79) -86]
Test Case: 647 | Input/Output: [(55 -71 -84 14) -84]
Test Case: 648 | Input/Output: [(97 42 -94 -85) -94]
Test Case: 649 | Input/Output: [(33 97 -85 47) -85]
Test Case: 650 | Input/Output: [(-71 -46 -64 -59) -71]
Test Case: 651 | Input/Output: [(85 34 94 52) 34]
Test Case: 652 | Input/Output: [(-45 -95 -83 48) -95]
Test Case: 653 | Input/Output: [(-81 -88 48 43) -88]
Test Case: 654 | Input/Output: [(-46 65 -71 1) -71]
Test Case: 655 | Input/Output: [(-71 22 11 -69) -71]
Test Case: 656 | Input/Output: [(-94 42 55 11) -94]
Test Case: 657 | Input/Output: [(-72 76 -64 -64) -72]
Test Case: 658 | Input/Output: [(0 38 31 97) 0]
Test Case: 659 | Input/Output: [(-70 24 51 -26) -70]
Test Case: 660 | Input/Output: [(-54 -3 93 99) -54]
Test Case: 661 | Input/Output: [(-89 -54 66 -94) -94]
Test Case: 662 | Input/Output: [(-75 -72 -81 50) -81]
Test Case: 663 | Input/Output: [(-81 -79 16 -79) -81]
Test Case: 664 | Input/Output: [(-77 -41 2 -62) -77]
Test Case: 665 | Input/Output: [(-12 -73 -4 75) -73]
Test Case: 666 | Input/Output: [(-86 -17 -18 -75) -86]
Test Case: 667 | Input/Output: [(-83 60 2 -9) -83]
Test Case: 668 | Input/Output: [(-5 -62 -18 -60) -62]
Test Case: 669 | Input/Output: [(92 27 18 86) 18]
Test Case: 670 | Input/Output: [(49 -50 40 -15) -50]
Test Case: 671 | Input/Output: [(41 -59 67 15) -59]
Test Case: 672 | Input/Output: [(-95 -55 51 -21) -95]
Test Case: 673 | Input/Output: [(50 -60 -67 -54) -67]
Test Case: 674 | Input/Output: [(-40 77 -87 31) -87]
Test Case: 675 | Input/Output: [(-49 -49 93 -26) -49]
Test Case: 676 | Input/Output: [(67 -39 30 72) -39]
Test Case: 677 | Input/Output: [(-33 92 -35 -47) -47]
Test Case: 678 | Input/Output: [(43 48 86 -72) -72]
Test Case: 679 | Input/Output: [(43 -89 -47 38) -89]
Test Case: 680 | Input/Output: [(95 67 -78 31) -78]
Test Case: 681 | Input/Output: [(-33 82 -23 -96) -96]
Test Case: 682 | Input/Output: [(17 40 15 -67) -67]
Test Case: 683 | Input/Output: [(28 -69 44 -92) -92]
Test Case: 684 | Input/Output: [(-56 -27 -21 -63) -63]
Test Case: 685 | Input/Output: [(14 88 54 26) 14]
Test Case: 686 | Input/Output: [(73 20 -17 28) -17]
Test Case: 687 | Input/Output: [(61 1 65 -89) -89]
Test Case: 688 | Input/Output: [(82 -27 38 -14) -27]
Test Case: 689 | Input/Output: [(89 1 -26 13) -26]
Test Case: 690 | Input/Output: [(-25 -23 -4 -14) -25]
Test Case: 691 | Input/Output: [(-31 82 41 64) -31]
Test Case: 692 | Input/Output: [(-84 74 22 -47) -84]
Test Case: 693 | Input/Output: [(32 -11 -89 -96) -96]
Test Case: 694 | Input/Output: [(13 7 -49 59) -49]
Test Case: 695 | Input/Output: [(30 13 81 -58) -58]
Test Case: 696 | Input/Output: [(-6 99 -70 59) -70]
Test Case: 697 | Input/Output: [(8 6 -55 2) -55]
Test Case: 698 | Input/Output: [(98 39 40 9) 9]
Test Case: 699 | Input/Output: [(-30 -51 -2 -99) -99]
Test Case: 700 | Input/Output: [(-13 42 -50 48) -50]
Test Case: 701 | Input/Output: [(-8 30 66 -100) -100]
Test Case: 702 | Input/Output: [(88 -79 32 -13) -79]
Test Case: 703 | Input/Output: [(-100 -32 -84 8) -100]
Test Case: 704 | Input/Output: [(56 40 -92 -72) -92]
Test Case: 705 | Input/Output: [(-5 -4 12 3) -5]
Test Case: 706 | Input/Output: [(-95 -56 16 -70) -95]
Test Case: 707 | Input/Output: [(40 1 -48 98) -48]
Test Case: 708 | Input/Output: [(-60 70 70 -3) -60]
Test Case: 709 | Input/Output: [(0 -88 -26 -44) -88]
Test Case: 710 | Input/Output: [(94 17 -41 -99) -99]
Test Case: 711 | Input/Output: [(0 -81 61 10) -81]
Test Case: 712 | Input/Output: [(-42 59 -67 -9) -67]
Test Case: 713 | Input/Output: [(47 62 42 -44) -44]
Test Case: 714 | Input/Output: [(-77 -71 60 -9) -77]
Test Case: 715 | Input/Output: [(-85 39 38 -51) -85]
Test Case: 716 | Input/Output: [(81 -5 -8 77) -8]
Test Case: 717 | Input/Output: [(-38 -75 -28 -46) -75]
Test Case: 718 | Input/Output: [(59 69 63 56) 56]
Test Case: 719 | Input/Output: [(-1 -99 -63 -92) -99]
Test Case: 720 | Input/Output: [(-17 -89 -5 -18) -89]
Test Case: 721 | Input/Output: [(-53 42 -58 -77) -77]
Test Case: 722 | Input/Output: [(-23 -21 -67 -86) -86]
Test Case: 723 | Input/Output: [(-78 -29 0 -97) -97]
Test Case: 724 | Input/Output: [(-53 18 45 -31) -53]
Test Case: 725 | Input/Output: [(-52 -82 -9 -31) -82]
Test Case: 726 | Input/Output: [(25 39 95 47) 25]
Test Case: 727 | Input/Output: [(-2 30 92 48) -2]
Test Case: 728 | Input/Output: [(-84 4 8 -21) -84]
Test Case: 729 | Input/Output: [(-21 -65 -20 -61) -65]
Test Case: 730 | Input/Output: [(-14 47 -93 -41) -93]
Test Case: 731 | Input/Output: [(38 97 -35 -27) -35]
Test Case: 732 | Input/Output: [(-4 35 85 33) -4]
Test Case: 733 | Input/Output: [(-35 -64 17 59) -64]
Test Case: 734 | Input/Output: [(-24 30 -13 -24) -24]
Test Case: 735 | Input/Output: [(-46 -2 6 100) -46]
Test Case: 736 | Input/Output: [(28 13 54 65) 13]
Test Case: 737 | Input/Output: [(98 -11 -52 -28) -52]
Test Case: 738 | Input/Output: [(43 -27 15 -52) -52]
Test Case: 739 | Input/Output: [(-5 -14 68 47) -14]
Test Case: 740 | Input/Output: [(24 -94 12 -38) -94]
Test Case: 741 | Input/Output: [(-27 45 -54 -70) -70]
Test Case: 742 | Input/Output: [(-54 56 -37 29) -54]
Test Case: 743 | Input/Output: [(49 -2 77 72) -2]
Test Case: 744 | Input/Output: [(16 -8 87 -87) -87]
Test Case: 745 | Input/Output: [(74 90 -45 -95) -95]
Test Case: 746 | Input/Output: [(-77 -35 59 -16) -77]
Test Case: 747 | Input/Output: [(21 89 -35 43) -35]
Test Case: 748 | Input/Output: [(-99 -3 27 -39) -99]
Test Case: 749 | Input/Output: [(-81 56 -67 8) -81]
Test Case: 750 | Input/Output: [(84 92 -44 -26) -44]
Test Case: 751 | Input/Output: [(-5 -78 81 34) -78]
Test Case: 752 | Input/Output: [(80 -14 2 31) -14]
Test Case: 753 | Input/Output: [(-78 -7 6 25) -78]
Test Case: 754 | Input/Output: [(61 -4 -96 73) -96]
Test Case: 755 | Input/Output: [(79 -36 -49 99) -49]
Test Case: 756 | Input/Output: [(-28 12 -63 0) -63]
Test Case: 757 | Input/Output: [(-10 -99 -50 68) -99]
Test Case: 758 | Input/Output: [(-70 -17 75 -43) -70]
Test Case: 759 | Input/Output: [(-23 1 -50 41) -50]
Test Case: 760 | Input/Output: [(-33 -47 41 59) -47]
Test Case: 761 | Input/Output: [(-12 83 6 -3) -12]
Test Case: 762 | Input/Output: [(38 -27 52 -12) -27]
Test Case: 763 | Input/Output: [(-27 -10 13 96) -27]
Test Case: 764 | Input/Output: [(12 -27 -32 -13) -32]
Test Case: 765 | Input/Output: [(-25 99 93 79) -25]
Test Case: 766 | Input/Output: [(97 59 70 57) 57]
Test Case: 767 | Input/Output: [(79 -18 99 -92) -92]
Test Case: 768 | Input/Output: [(-97 83 -90 -9) -97]
Test Case: 769 | Input/Output: [(13 -44 -75 -52) -75]
Test Case: 770 | Input/Output: [(57 -59 -26 53) -59]
Test Case: 771 | Input/Output: [(20 21 -6 59) -6]
Test Case: 772 | Input/Output: [(-25 82 -9 18) -25]
Test Case: 773 | Input/Output: [(63 -21 -3 -17) -21]
Test Case: 774 | Input/Output: [(77 36 -87 -46) -87]
Test Case: 775 | Input/Output: [(70 60 52 -47) -47]
Test Case: 776 | Input/Output: [(-37 -85 36 88) -85]
Test Case: 777 | Input/Output: [(-15 72 -58 -64) -64]
Test Case: 778 | Input/Output: [(100 53 -84 94) -84]
Test Case: 779 | Input/Output: [(-12 -33 50 -41) -41]
Test Case: 780 | Input/Output: [(-90 53 -86 -90) -90]
Test Case: 781 | Input/Output: [(-36 36 -72 -80) -80]
Test Case: 782 | Input/Output: [(76 -5 -47 4) -47]
Test Case: 783 | Input/Output: [(-2 43 90 -90) -90]
Test Case: 784 | Input/Output: [(-97 54 -30 -64) -97]
Test Case: 785 | Input/Output: [(-35 -41 -20 -45) -45]
Test Case: 786 | Input/Output: [(-97 -89 -30 2) -97]
Test Case: 787 | Input/Output: [(49 61 -66 80) -66]
Test Case: 788 | Input/Output: [(-53 -64 -20 -49) -64]
Test Case: 789 | Input/Output: [(-99 26 -52 42) -99]
Test Case: 790 | Input/Output: [(-53 86 -14 -61) -61]
Test Case: 791 | Input/Output: [(34 92 14 9) 9]
Test Case: 792 | Input/Output: [(51 14 -85 -14) -85]
Test Case: 793 | Input/Output: [(17 2 71 7) 2]
Test Case: 794 | Input/Output: [(75 61 6 6) 6]
Test Case: 795 | Input/Output: [(66 56 -63 49) -63]
Test Case: 796 | Input/Output: [(38 97 -7 61) -7]
Test Case: 797 | Input/Output: [(-83 34 73 -57) -83]
Test Case: 798 | Input/Output: [(2 22 -74 25) -74]
Test Case: 799 | Input/Output: [(-9 -93 73 62) -93]
Test Case: 800 | Input/Output: [(-28 0 -65 53) -65]
Test Case: 801 | Input/Output: [(88 96 -13 -59) -59]
Test Case: 802 | Input/Output: [(41 57 -20 -5) -20]
Test Case: 803 | Input/Output: [(26 39 54 -47) -47]
Test Case: 804 | Input/Output: [(12 -85 12 82) -85]
Test Case: 805 | Input/Output: [(59 65 62 -78) -78]
Test Case: 806 | Input/Output: [(-50 89 -19 35) -50]
Test Case: 807 | Input/Output: [(-77 60 44 -96) -96]
Test Case: 808 | Input/Output: [(-28 -25 69 35) -28]
Test Case: 809 | Input/Output: [(-22 10 71 41) -22]
Test Case: 810 | Input/Output: [(74 57 11 -80) -80]
Test Case: 811 | Input/Output: [(-69 -64 47 68) -69]
Test Case: 812 | Input/Output: [(-27 -98 -12 34) -98]
Test Case: 813 | Input/Output: [(-13 10 -82 -2) -82]
Test Case: 814 | Input/Output: [(62 -66 7 31) -66]
Test Case: 815 | Input/Output: [(49 -53 85 8) -53]
Test Case: 816 | Input/Output: [(11 -27 53 -67) -67]
Test Case: 817 | Input/Output: [(87 -77 98 -32) -77]
Test Case: 818 | Input/Output: [(59 69 -100 19) -100]
Test Case: 819 | Input/Output: [(-70 -73 63 -52) -73]
Test Case: 820 | Input/Output: [(-48 7 -20 6) -48]
Test Case: 821 | Input/Output: [(-3 -74 -56 -41) -74]
Test Case: 822 | Input/Output: [(91 -29 57 92) -29]
Test Case: 823 | Input/Output: [(-1 45 -86 -92) -92]
Test Case: 824 | Input/Output: [(-53 85 -16 53) -53]
Test Case: 825 | Input/Output: [(-38 -81 84 89) -81]
Test Case: 826 | Input/Output: [(64 76 54 16) 16]
Test Case: 827 | Input/Output: [(42 30 25 -58) -58]
Test Case: 828 | Input/Output: [(44 4 78 -96) -96]
Test Case: 829 | Input/Output: [(26 -58 58 37) -58]
Test Case: 830 | Input/Output: [(-21 31 61 16) -21]
Test Case: 831 | Input/Output: [(22 -21 81 -33) -33]
Test Case: 832 | Input/Output: [(-65 -82 62 -35) -82]
Test Case: 833 | Input/Output: [(-23 67 -24 -87) -87]
Test Case: 834 | Input/Output: [(-100 58 13 36) -100]
Test Case: 835 | Input/Output: [(38 75 98 92) 38]
Test Case: 836 | Input/Output: [(85 65 73 -48) -48]
Test Case: 837 | Input/Output: [(38 -23 87 -85) -85]
Test Case: 838 | Input/Output: [(12 -71 -85 -45) -85]
Test Case: 839 | Input/Output: [(62 12 24 -46) -46]
Test Case: 840 | Input/Output: [(-15 -11 43 98) -15]
Test Case: 841 | Input/Output: [(64 43 54 -44) -44]
Test Case: 842 | Input/Output: [(21 89 100 73) 21]
Test Case: 843 | Input/Output: [(-96 42 -96 -37) -96]
Test Case: 844 | Input/Output: [(10 -82 -50 78) -82]
Test Case: 845 | Input/Output: [(56 77 -86 22) -86]
Test Case: 846 | Input/Output: [(-86 -21 48 -40) -86]
Test Case: 847 | Input/Output: [(35 74 -64 -98) -98]
Test Case: 848 | Input/Output: [(-92 95 36 6) -92]
Test Case: 849 | Input/Output: [(-21 -39 36 65) -39]
Test Case: 850 | Input/Output: [(83 48 -35 -32) -35]
Test Case: 851 | Input/Output: [(20 87 88 -58) -58]
Test Case: 852 | Input/Output: [(-81 -18 94 71) -81]
Test Case: 853 | Input/Output: [(75 95 -74 94) -74]
Test Case: 854 | Input/Output: [(-1 39 -78 -94) -94]
Test Case: 855 | Input/Output: [(12 33 -24 -84) -84]
Test Case: 856 | Input/Output: [(26 3 -74 90) -74]
Test Case: 857 | Input/Output: [(5 54 39 58) 5]
Test Case: 858 | Input/Output: [(-87 -90 78 71) -90]
Test Case: 859 | Input/Output: [(28 -25 -44 -43) -44]
Test Case: 860 | Input/Output: [(-97 -44 29 26) -97]
Test Case: 861 | Input/Output: [(-69 -72 47 -83) -83]
Test Case: 862 | Input/Output: [(68 -16 46 -15) -16]
Test Case: 863 | Input/Output: [(4 19 43 -38) -38]
Test Case: 864 | Input/Output: [(15 -37 79 -6) -37]
Test Case: 865 | Input/Output: [(-97 66 -93 78) -97]
Test Case: 866 | Input/Output: [(14 -44 13 -96) -96]
Test Case: 867 | Input/Output: [(-87 74 -59 37) -87]
Test Case: 868 | Input/Output: [(67 24 56 -78) -78]
Test Case: 869 | Input/Output: [(-27 0 92 -99) -99]
Test Case: 870 | Input/Output: [(-53 -21 49 -65) -65]
Test Case: 871 | Input/Output: [(-18 -40 83 51) -40]
Test Case: 872 | Input/Output: [(-43 79 -74 72) -74]
Test Case: 873 | Input/Output: [(-79 72 -94 -28) -94]
Test Case: 874 | Input/Output: [(-65 -18 -86 -34) -86]
Test Case: 875 | Input/Output: [(95 33 -91 92) -91]
Test Case: 876 | Input/Output: [(95 -39 -37 -36) -39]
Test Case: 877 | Input/Output: [(-83 30 91 -55) -83]
Test Case: 878 | Input/Output: [(86 -30 -65 34) -65]
Test Case: 879 | Input/Output: [(63 -59 90 -94) -94]
Test Case: 880 | Input/Output: [(-58 57 34 48) -58]
Test Case: 881 | Input/Output: [(31 -27 -10 -41) -41]
Test Case: 882 | Input/Output: [(32 -67 -22 -51) -67]
Test Case: 883 | Input/Output: [(86 12 -43 22) -43]
Test Case: 884 | Input/Output: [(-99 -69 36 25) -99]
Test Case: 885 | Input/Output: [(14 -92 5 9) -92]
Test Case: 886 | Input/Output: [(-100 -84 -40 -37) -100]
Test Case: 887 | Input/Output: [(-28 -42 71 3) -42]
Test Case: 888 | Input/Output: [(97 -98 5 41) -98]
Test Case: 889 | Input/Output: [(-21 97 -67 65) -67]
Test Case: 890 | Input/Output: [(-38 -11 -3 -37) -38]
Test Case: 891 | Input/Output: [(70 -88 1 13) -88]
Test Case: 892 | Input/Output: [(3 -98 99 61) -98]
Test Case: 893 | Input/Output: [(-12 -34 -65 28) -65]
Test Case: 894 | Input/Output: [(20 60 50 7) 7]
Test Case: 895 | Input/Output: [(93 -77 78 82) -77]
Test Case: 896 | Input/Output: [(33 69 84 -89) -89]
Test Case: 897 | Input/Output: [(-8 -76 37 6) -76]
Test Case: 898 | Input/Output: [(-62 -92 81 10) -92]
Test Case: 899 | Input/Output: [(74 50 -42 -70) -70]
Test Case: 900 | Input/Output: [(-70 -96 -94 100) -96]
Test Case: 901 | Input/Output: [(9 -25 46 -69) -69]
Test Case: 902 | Input/Output: [(89 4 20 -38) -38]
Test Case: 903 | Input/Output: [(0 -28 18 -81) -81]
Test Case: 904 | Input/Output: [(15 94 -26 -38) -38]
Test Case: 905 | Input/Output: [(-8 -95 -18 -22) -95]
Test Case: 906 | Input/Output: [(-38 -42 94 -89) -89]
Test Case: 907 | Input/Output: [(54 99 -100 24) -100]
Test Case: 908 | Input/Output: [(46 -38 77 7) -38]
Test Case: 909 | Input/Output: [(68 29 95 29) 29]
Test Case: 910 | Input/Output: [(61 38 19 -67) -67]
Test Case: 911 | Input/Output: [(53 -14 92 -64) -64]
Test Case: 912 | Input/Output: [(-64 -4 -61 -45) -64]
Test Case: 913 | Input/Output: [(-62 100 52 34) -62]
Test Case: 914 | Input/Output: [(-97 -96 54 37) -97]
Test Case: 915 | Input/Output: [(72 6 34 93) 6]
Test Case: 916 | Input/Output: [(93 9 -36 57) -36]
Test Case: 917 | Input/Output: [(-70 36 16 -57) -70]
Test Case: 918 | Input/Output: [(65 -26 -52 2) -52]
Test Case: 919 | Input/Output: [(-17 -65 56 -31) -65]
Test Case: 920 | Input/Output: [(-35 -35 -85 -70) -85]
Test Case: 921 | Input/Output: [(-21 64 -92 20) -92]
Test Case: 922 | Input/Output: [(8 82 -10 -85) -85]
Test Case: 923 | Input/Output: [(-35 -75 72 26) -75]
Test Case: 924 | Input/Output: [(-17 -30 -56 64) -56]
Test Case: 925 | Input/Output: [(-85 -53 -87 -47) -87]
Test Case: 926 | Input/Output: [(-13 -3 -16 6) -16]
Test Case: 927 | Input/Output: [(11 38 44 -83) -83]
Test Case: 928 | Input/Output: [(87 -75 -50 -8) -75]
Test Case: 929 | Input/Output: [(-63 25 -67 -40) -67]
Test Case: 930 | Input/Output: [(-53 87 -17 -65) -65]
Test Case: 931 | Input/Output: [(36 67 92 -57) -57]
Test Case: 932 | Input/Output: [(77 -98 68 12) -98]
Test Case: 933 | Input/Output: [(46 53 9 -80) -80]
Test Case: 934 | Input/Output: [(26 -80 14 -50) -80]
Test Case: 935 | Input/Output: [(24 25 -48 49) -48]
Test Case: 936 | Input/Output: [(55 -80 45 54) -80]
Test Case: 937 | Input/Output: [(89 -2 51 -74) -74]
Test Case: 938 | Input/Output: [(58 20 -45 -78) -78]
Test Case: 939 | Input/Output: [(90 59 52 88) 52]
Test Case: 940 | Input/Output: [(50 -17 -2 73) -17]
Test Case: 941 | Input/Output: [(-37 -44 94 56) -44]
Test Case: 942 | Input/Output: [(74 -11 77 16) -11]
Test Case: 943 | Input/Output: [(-78 -70 -27 -80) -80]
Test Case: 944 | Input/Output: [(80 -47 43 -17) -47]
Test Case: 945 | Input/Output: [(-29 94 37 -68) -68]
Test Case: 946 | Input/Output: [(20 75 89 81) 20]
Test Case: 947 | Input/Output: [(32 47 -62 -8) -62]
Test Case: 948 | Input/Output: [(-69 36 -93 -52) -93]
Test Case: 949 | Input/Output: [(-24 -81 47 -92) -92]
Test Case: 950 | Input/Output: [(-3 -51 -68 -92) -92]
Test Case: 951 | Input/Output: [(-21 -49 26 -57) -57]
Test Case: 952 | Input/Output: [(36 86 -92 74) -92]
Test Case: 953 | Input/Output: [(-24 71 53 73) -24]
Test Case: 954 | Input/Output: [(54 -67 8 90) -67]
Test Case: 955 | Input/Output: [(55 -49 -5 -74) -74]
Test Case: 956 | Input/Output: [(61 98 17 59) 17]
Test Case: 957 | Input/Output: [(65 -52 11 55) -52]
Test Case: 958 | Input/Output: [(97 82 -82 37) -82]
Test Case: 959 | Input/Output: [(-44 -41 37 88) -44]
Test Case: 960 | Input/Output: [(46 -25 67 35) -25]
Test Case: 961 | Input/Output: [(41 83 -7 7) -7]
Test Case: 962 | Input/Output: [(-59 96 -76 73) -76]
Test Case: 963 | Input/Output: [(-29 -1 -69 9) -69]
Test Case: 964 | Input/Output: [(34 71 -64 2) -64]
Test Case: 965 | Input/Output: [(50 -87 -60 46) -87]
Test Case: 966 | Input/Output: [(-64 6 -22 12) -64]
Test Case: 967 | Input/Output: [(41 40 80 36) 36]
Test Case: 968 | Input/Output: [(-93 62 -71 46) -93]
Test Case: 969 | Input/Output: [(-98 -47 77 82) -98]
Test Case: 970 | Input/Output: [(30 7 -1 3) -1]
Test Case: 971 | Input/Output: [(1 15 79 56) 1]
Test Case: 972 | Input/Output: [(-94 81 -78 14) -94]
Test Case: 973 | Input/Output: [(-23 86 48 52) -23]
Test Case: 974 | Input/Output: [(75 54 30 -22) -22]
Test Case: 975 | Input/Output: [(-38 -97 28 98) -97]
Test Case: 976 | Input/Output: [(-53 -37 -16 9) -53]
Test Case: 977 | Input/Output: [(-59 -65 -27 86) -65]
Test Case: 978 | Input/Output: [(-99 74 -60 -80) -99]
Test Case: 979 | Input/Output: [(65 -68 -96 32) -96]
Test Case: 980 | Input/Output: [(2 -9 -86 -78) -86]
Test Case: 981 | Input/Output: [(59 -62 -69 26) -69]
Test Case: 982 | Input/Output: [(86 53 97 -71) -71]
Test Case: 983 | Input/Output: [(85 -97 -58 -8) -97]
Test Case: 984 | Input/Output: [(91 41 -62 51) -62]
Test Case: 985 | Input/Output: [(96 44 -82 -5) -82]
Test Case: 986 | Input/Output: [(65 97 39 22) 22]
Test Case: 987 | Input/Output: [(-96 33 55 64) -96]
Test Case: 988 | Input/Output: [(1 -80 76 57) -80]
Test Case: 989 | Input/Output: [(65 -4 51 36) -4]
Test Case: 990 | Input/Output: [(45 81 -21 55) -21]
Test Case: 991 | Input/Output: [(-55 9 61 -6) -55]
Test Case: 992 | Input/Output: [(10 -41 100 -79) -79]
Test Case: 993 | Input/Output: [(91 -75 -61 -45) -75]
Test Case: 994 | Input/Output: [(-36 58 78 83) -36]
Test Case: 995 | Input/Output: [(-7 2 94 4) -7]
Test Case: 996 | Input/Output: [(-55 -59 -64 74) -64]
Test Case: 997 | Input/Output: [(71 -34 -3 93) -34]
Test Case: 998 | Input/Output: [(-79 -49 58 93) -79]
Test Case: 999 | Input/Output: [(48 65 -42 41) -42]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -10 12 -84 -99 109 78 -94 88 51 45 -89 96 -120 -53 32 -31
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-37 61 -37 -37] -37] [[32 -60 -60 -60] -60] [[-18 -26 -26 -26] -26] [[-70 -47 -70 -70] -70] [[15 -54 15 15] -54] [[-79 -79 -29 -79] -79] [[-72 -72 -13 -72] -72] [[22 -76 22 22] -76] [[57 -100 57 57] -100] [[47 47 70 47] 47] [(-23 -23 -23 -23) -23] [(-65 -65 -65 -65) -65] [(90 90 90 90) 90] [(-17 -17 -17 -17) -17] [(97 97 97 97) 97] [(9 29 80 15) 9] [(91 71 21 48) 21] [(48 10 3 9) 3] [(1 55 3 79) 1] [(35 70 7 61) 7] [(79 46 99 70) 46] [(49 63 90 32) 32] [(23 39 75 24) 23] [(17 24 85 87) 17] [(52 81 68 20) 20] [(59 92 42 0) 0] [(36 41 21 42) 21] [(51 10 12 76) 10] [(56 30 28 65) 28] [(13 66 92 38) 13] [(33 49 73 55) 33] [(46 12 47 52) 12] [(6 23 77 51) 6] [(41 26 46 82) 26] [(47 4 29 59) 4] [(17 59 99 -2) -2] [(33 -47 48 -48) -48] [(55 33 65 2) 2] [(-86 99 75 -27) -86] [(90 -41 -19 -67) -67] [(-23 2 -5 54) -23] [(-12 30 -42 -78) -78] [(18 -67 29 30) -67] [(-100 -76 -37 87) -100] [(33 -6 60 -76) -76] [(17 -41 -73 -56) -73] [(-85 -83 -70 -77) -85] [(-38 71 28 97) -38] [(68 -96 38 8) -96] [(-27 37 41 -58) -58] [(9 93 -92 -74) -92] [(-81 69 -4 -63) -81] [(42 -7 -59 -48) -59] [(-70 -90 -70 -71) -90] [(-92 -69 -54 63) -92] [(-45 19 45 -61) -61] [(-85 -28 -25 -40) -85] [(54 -41 -37 64) -41] [(2 -92 9 38) -92] [(-36 45 -15 58) -36] [(-67 -94 87 57) -94] [(20 -64 -64 -47) -64] [(75 57 57 -86) -86] [(15 35 -10 -63) -63] [(-66 -81 -79 75) -81] [(8 14 93 -99) -99] [(-79 -19 -45 -55) -79] [(-93 -66 -99 15) -99] [(-77 76 -90 84) -90] [(-8 92 36 -29) -29] [(52 -33 -49 -61) -61] [(14 30 -79 37) -79] [(-32 -18 -69 80) -69] [(-20 73 -83 69) -83] [(53 -24 64 9) -24] [(41 -66 57 15) -66] [(-3 -18 -91 -95) -95] [(-17 40 -100 94) -100] [(-52 -93 -80 84) -93] [(-71 20 -15 -41) -71] [(75 26 84 -18) -18] [(92 -14 100 12) -14] [(76 -73 -79 14) -79] [(-100 22 -14 -43) -100] [(-39 95 52 -60) -60] [(28 -62 -15 90) -62] [(-46 -23 -70 -7) -70] [(88 74 38 -8) -8] [(59 68 -80 -26) -80] [(-86 -9 4 -19) -86] [(99 87 -96 -25) -96] [(-13 35 53 -97) -97] [(14 -7 -52 -82) -82] [(-44 -48 97 95) -48] [(-91 -29 -10 -51) -91])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -37                 | Program output: -37                
Correct output: -60                 | Program output: -60                
Correct output: -26                 | Program output: -26                
Correct output: -70                 | Program output: -70                
Correct output: -54                 | Program output: 15                 
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: -72                
Correct output: -76                 | Program output: 22                 
Correct output: -100                | Program output: 57                 
Correct output: 47                  | Program output: 47                 
Correct output: -23                 | Program output: -23                
Correct output: -65                 | Program output: -65                
Correct output: 90                  | Program output: 90                 
Correct output: -17                 | Program output: -17                
Correct output: 97                  | Program output: 97                 
Correct output: 9                   | Program output: 15                 
Correct output: 21                  | Program output: 48                 
Correct output: 3                   | Program output: 9                  
Correct output: 1                   | Program output: 79                 
Correct output: 7                   | Program output: 61                 
Correct output: 46                  | Program output: 70                 
Correct output: 32                  | Program output: 32                 
Correct output: 23                  | Program output: 24                 
Correct output: 17                  | Program output: 87                 
Correct output: 20                  | Program output: 20                 
Correct output: 0                   | Program output: 0                  
Correct output: 21                  | Program output: 42                 
Correct output: 10                  | Program output: 76                 
Correct output: 28                  | Program output: 65                 
Correct output: 13                  | Program output: 38                 
Correct output: 33                  | Program output: 55                 
Correct output: 12                  | Program output: 52                 
Correct output: 6                   | Program output: 51                 
Correct output: 26                  | Program output: 82                 
Correct output: 4                   | Program output: 59                 
Correct output: -2                  | Program output: -2                 
Correct output: -48                 | Program output: -48                
Correct output: 2                   | Program output: 2                  
Correct output: -86                 | Program output: -27                
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: 54                 
Correct output: -78                 | Program output: -78                
Correct output: -67                 | Program output: 30                 
Correct output: -100                | Program output: 87                 
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -56                
Correct output: -85                 | Program output: -77                
Correct output: -38                 | Program output: 97                 
Correct output: -96                 | Program output: 8                  
Correct output: -58                 | Program output: -58                
Correct output: -92                 | Program output: -74                
Correct output: -81                 | Program output: -63                
Correct output: -59                 | Program output: -48                
Correct output: -90                 | Program output: -71                
Correct output: -92                 | Program output: 63                 
Correct output: -61                 | Program output: -61                
Correct output: -85                 | Program output: -40                
Correct output: -41                 | Program output: 64                 
Correct output: -92                 | Program output: 38                 
Correct output: -36                 | Program output: 58                 
Correct output: -94                 | Program output: 57                 
Correct output: -64                 | Program output: -47                
Correct output: -86                 | Program output: -86                
Correct output: -63                 | Program output: -63                
Correct output: -81                 | Program output: 75                 
Correct output: -99                 | Program output: -99                
Correct output: -79                 | Program output: -55                
Correct output: -99                 | Program output: 15                 
Correct output: -90                 | Program output: 84                 
Correct output: -29                 | Program output: -29                
Correct output: -61                 | Program output: -61                
Correct output: -79                 | Program output: 37                 
Correct output: -69                 | Program output: 80                 
Correct output: -83                 | Program output: 69                 
Correct output: -24                 | Program output: 9                  
Correct output: -66                 | Program output: 15                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 94                 
Correct output: -93                 | Program output: 84                 
Correct output: -71                 | Program output: -41                
Correct output: -18                 | Program output: -18                
Correct output: -14                 | Program output: 12                 
Correct output: -79                 | Program output: 14                 
Correct output: -100                | Program output: -43                
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: 90                 
Correct output: -70                 | Program output: -7                 
Correct output: -8                  | Program output: -8                 
Correct output: -80                 | Program output: -26                
Correct output: -86                 | Program output: -19                
Correct output: -96                 | Program output: -25                
Correct output: -97                 | Program output: -97                
Correct output: -82                 | Program output: -82                
Correct output: -48                 | Program output: 95                 
Correct output: -91                 | Program output: -51                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_381} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction 32} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_699} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_mod} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_swap} {:close 2, :instruction integer_lt} {:close 1, :instruction exec_flush} {:close 1, :instruction tag_boolean_929} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (integer_empty print_integer in4 print_integer boolean_dup_times exec_flush integer_inc integer_dec exec_rot (tag_integer_381 exec_empty exec_do*while (in2 exec_do*while (boolean_or boolean_yankdup) exec_y_when_autoconstructing (boolean_invert_first_then_and integer_dup boolean_invert_second_then_and integer_lt boolean_yankdup) exec_noop) in1 32 exec_k_when_autoconstructing (integer_lte print_integer tagged_699 integer_dec integer_mod) (boolean_xor) exec_swap () (integer_lt)) (exec_flush) (tag_boolean_929) integer_empty integer_dec integer_stackdepth exec_yankdup integer_empty boolean_invert_second_then_and integer_yank exec_s (boolean_dup_times integer_sub boolean_swap boolean_or exec_stackdepth) () ())
Lexicase best errors: [1 0 0 1 0 0 1 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 63
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_381} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction 32} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_699} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_mod} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_swap} {:close 2, :instruction integer_lt} {:close 1, :instruction exec_flush} {:close 1, :instruction tag_boolean_929} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (integer_empty print_integer in4 print_integer boolean_dup_times exec_flush integer_inc integer_dec exec_rot (tag_integer_381 exec_empty exec_do*while (in2 exec_do*while (boolean_or boolean_yankdup) exec_y_when_autoconstructing (boolean_invert_first_then_and integer_dup boolean_invert_second_then_and integer_lt boolean_yankdup) exec_noop) in1 32 exec_k_when_autoconstructing (integer_lte print_integer tagged_699 integer_dec integer_mod) (boolean_xor) exec_swap () (integer_lt)) (exec_flush) (tag_boolean_929) integer_empty integer_dec integer_stackdepth exec_yankdup integer_empty boolean_invert_second_then_and integer_yank exec_s (boolean_dup_times integer_sub boolean_swap boolean_or exec_stackdepth) () ())
Zero cases best errors: [1 0 0 1 0 0 1 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 63
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 6 4 1 4 4 2 1 1 1)
Population mean number of elite cases: 0.03
Count of perfect (error zero) individuals by case: (1 6 4 1 4 4 2 1 1 1)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_integer} {:close 1, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yank} {:close 1, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction exec_empty})
Best program: (print_integer integer_swap in4 integer_dup_times integer_mult exec_do*count (exec_yank) in4 exec_k () (integer_empty in4 boolean_pop) print_integer integer_mult in2 exec_empty)
Errors: [1 0 0 1 0 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 16
Size: 20
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 9.975
Median total errors in population: 10
Error averages by case: (0.999 0.994 0.996 0.999 0.996 0.996 0.998 0.999 0.999 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.712
Average program size in population (points): 69.756
Average percent parens in population: 0.278
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.28
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 489475
--- Timings ---
Current time: 1559583653257 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  3.9%
Reproduction:         0.8 seconds, 29.3%
Fitness Testing:      1.8 seconds, 66.8%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -37                 | Program output: -37                
Correct output: -60                 | Program output: -60                
Correct output: -26                 | Program output: -26                
Correct output: -70                 | Program output: -70                
Correct output: -54                 | Program output: 15                 
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: -72                
Correct output: -76                 | Program output: 22                 
Correct output: -100                | Program output: 57                 
Correct output: 47                  | Program output: 47                 
Correct output: -23                 | Program output: -23                
Correct output: -65                 | Program output: -65                
Correct output: 90                  | Program output: 90                 
Correct output: -17                 | Program output: -17                
Correct output: 97                  | Program output: 97                 
Correct output: 9                   | Program output: 15                 
Correct output: 21                  | Program output: 48                 
Correct output: 3                   | Program output: 9                  
Correct output: 1                   | Program output: 79                 
Correct output: 7                   | Program output: 61                 
Correct output: 46                  | Program output: 70                 
Correct output: 32                  | Program output: 32                 
Correct output: 23                  | Program output: 24                 
Correct output: 17                  | Program output: 87                 
Correct output: 20                  | Program output: 20                 
Correct output: 0                   | Program output: 0                  
Correct output: 21                  | Program output: 42                 
Correct output: 10                  | Program output: 76                 
Correct output: 28                  | Program output: 65                 
Correct output: 13                  | Program output: 38                 
Correct output: 33                  | Program output: 55                 
Correct output: 12                  | Program output: 52                 
Correct output: 6                   | Program output: 51                 
Correct output: 26                  | Program output: 82                 
Correct output: 4                   | Program output: 59                 
Correct output: -2                  | Program output: -2                 
Correct output: -48                 | Program output: -48                
Correct output: 2                   | Program output: 2                  
Correct output: -86                 | Program output: -27                
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: 54                 
Correct output: -78                 | Program output: -78                
Correct output: -67                 | Program output: 30                 
Correct output: -100                | Program output: 87                 
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -56                
Correct output: -85                 | Program output: -77                
Correct output: -38                 | Program output: 97                 
Correct output: -96                 | Program output: 8                  
Correct output: -58                 | Program output: -58                
Correct output: -92                 | Program output: -74                
Correct output: -81                 | Program output: -63                
Correct output: -59                 | Program output: -48                
Correct output: -90                 | Program output: -71                
Correct output: -92                 | Program output: 63                 
Correct output: -61                 | Program output: -61                
Correct output: -85                 | Program output: -40                
Correct output: -41                 | Program output: 64                 
Correct output: -92                 | Program output: 38                 
Correct output: -36                 | Program output: 58                 
Correct output: -94                 | Program output: 57                 
Correct output: -64                 | Program output: -47                
Correct output: -86                 | Program output: -86                
Correct output: -63                 | Program output: -63                
Correct output: -81                 | Program output: 75                 
Correct output: -99                 | Program output: -99                
Correct output: -79                 | Program output: -55                
Correct output: -99                 | Program output: 15                 
Correct output: -90                 | Program output: 84                 
Correct output: -29                 | Program output: -29                
Correct output: -61                 | Program output: -61                
Correct output: -79                 | Program output: 37                 
Correct output: -69                 | Program output: 80                 
Correct output: -83                 | Program output: 69                 
Correct output: -24                 | Program output: 9                  
Correct output: -66                 | Program output: 15                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 94                 
Correct output: -93                 | Program output: 84                 
Correct output: -71                 | Program output: -41                
Correct output: -18                 | Program output: -18                
Correct output: -14                 | Program output: 12                 
Correct output: -79                 | Program output: 14                 
Correct output: -100                | Program output: -43                
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: 90                 
Correct output: -70                 | Program output: -7                 
Correct output: -8                  | Program output: -8                 
Correct output: -80                 | Program output: -26                
Correct output: -86                 | Program output: -19                
Correct output: -96                 | Program output: -25                
Correct output: -97                 | Program output: -97                
Correct output: -82                 | Program output: -82                
Correct output: -48                 | Program output: 95                 
Correct output: -91                 | Program output: -51                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_381} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction 32} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_699} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_mod} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_swap} {:close 2, :instruction integer_lt} {:close 1, :instruction exec_flush} {:close 1, :instruction tag_boolean_929} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (integer_empty print_integer in4 print_integer boolean_dup_times exec_flush integer_inc integer_dec exec_rot (tag_integer_381 exec_empty exec_do*while (in2 exec_do*while (boolean_or boolean_yankdup) exec_y_when_autoconstructing (boolean_invert_first_then_and integer_dup boolean_invert_second_then_and integer_lt boolean_yankdup) exec_noop) in1 32 exec_k_when_autoconstructing (integer_lte print_integer tagged_699 integer_dec integer_mod) (boolean_xor) exec_swap () (integer_lt)) (exec_flush) (tag_boolean_929) integer_empty integer_dec integer_stackdepth exec_yankdup integer_empty boolean_invert_second_then_and integer_yank exec_s (boolean_dup_times integer_sub boolean_swap boolean_or exec_stackdepth) () ())
Lexicase best errors: [0 0 1 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 63
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_381} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction 32} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_699} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_mod} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_swap} {:close 2, :instruction integer_lt} {:close 1, :instruction exec_flush} {:close 1, :instruction tag_boolean_929} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (integer_empty print_integer in4 print_integer boolean_dup_times exec_flush integer_inc integer_dec exec_rot (tag_integer_381 exec_empty exec_do*while (in2 exec_do*while (boolean_or boolean_yankdup) exec_y_when_autoconstructing (boolean_invert_first_then_and integer_dup boolean_invert_second_then_and integer_lt boolean_yankdup) exec_noop) in1 32 exec_k_when_autoconstructing (integer_lte print_integer tagged_699 integer_dec integer_mod) (boolean_xor) exec_swap () (integer_lt)) (exec_flush) (tag_boolean_929) integer_empty integer_dec integer_stackdepth exec_yankdup integer_empty boolean_invert_second_then_and integer_yank exec_s (boolean_dup_times integer_sub boolean_swap boolean_or exec_stackdepth) () ())
Zero cases best errors: [0 0 1 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 63
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (325 328 229 278 832 552 278 326 7 325)
Population mean number of elite cases: 3.48
Count of perfect (error zero) individuals by case: (325 328 229 278 832 552 278 326 7 325)
Population mean number of perfect (error zero) cases: 3.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction -51} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction 32} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_699} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_mod} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_swap} {:close 2, :instruction integer_lt} {:close 1, :instruction exec_flush} {:close 1, :instruction tag_boolean_929} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth})
Best program: (integer_empty print_integer in4 print_integer boolean_dup_times exec_flush integer_inc integer_dec exec_y_when_autoconstructing () integer_flush -51 integer_gte boolean_rot exec_k_when_autoconstructing (integer_fromboolean) (exec_if (integer_dup_items) (exec_dup () exec_yank boolean_not exec_empty exec_do*while (in2 exec_do*while (boolean_or boolean_yankdup) exec_y_when_autoconstructing (boolean_invert_first_then_and integer_dup boolean_invert_second_then_and integer_lt boolean_yankdup) exec_noop) in1 32 exec_k_when_autoconstructing (integer_lte print_integer tagged_699 integer_dec integer_mod) (boolean_xor) exec_swap () (integer_lt)) exec_flush) tag_boolean_929 integer_empty integer_dec integer_stackdepth exec_yankdup integer_empty boolean_invert_second_then_and integer_yank exec_s (boolean_dup_times integer_sub boolean_swap boolean_or exec_stackdepth) () ())
Errors: [0 0 1 1 0 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 59
Size: 76
Percent parens: 0.224
--- Population Statistics ---
Average total errors in population: 6.52
Median total errors in population: 7
Error averages by case: (0.675 0.672 0.771 0.722 0.168 0.448 0.722 0.674 0.993 0.675)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.232
Average program size in population (points): 68.737
Average percent parens in population: 0.244
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.521
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 186
Genome diversity (% unique genomes):	 0.523
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 194
Syntactic diversity (% unique Push programs):	 0.504
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1161870
--- Timings ---
Current time: 1559583655910 milliseconds
Total Time:           5.8 seconds
Initialization:       0.1 seconds,  1.8%
Reproduction:         2.4 seconds, 41.8%
Fitness Testing:      2.7 seconds, 45.9%
Report:               0.6 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -37                 | Program output: -37                
Correct output: -60                 | Program output: -60                
Correct output: -26                 | Program output: -26                
Correct output: -70                 | Program output: -70                
Correct output: -54                 | Program output: 15                 
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: -72                
Correct output: -76                 | Program output: 22                 
Correct output: -100                | Program output: 57                 
Correct output: 47                  | Program output: 47                 
Correct output: -23                 | Program output: -23                
Correct output: -65                 | Program output: -65                
Correct output: 90                  | Program output: 90                 
Correct output: -17                 | Program output: -17                
Correct output: 97                  | Program output: 97                 
Correct output: 9                   | Program output: 15                 
Correct output: 21                  | Program output: 48                 
Correct output: 3                   | Program output: 9                  
Correct output: 1                   | Program output: 79                 
Correct output: 7                   | Program output: 61                 
Correct output: 46                  | Program output: 70                 
Correct output: 32                  | Program output: 32                 
Correct output: 23                  | Program output: 24                 
Correct output: 17                  | Program output: 87                 
Correct output: 20                  | Program output: 20                 
Correct output: 0                   | Program output: 0                  
Correct output: 21                  | Program output: 42                 
Correct output: 10                  | Program output: 76                 
Correct output: 28                  | Program output: 65                 
Correct output: 13                  | Program output: 38                 
Correct output: 33                  | Program output: 55                 
Correct output: 12                  | Program output: 52                 
Correct output: 6                   | Program output: 51                 
Correct output: 26                  | Program output: 82                 
Correct output: 4                   | Program output: 59                 
Correct output: -2                  | Program output: -2                 
Correct output: -48                 | Program output: -48                
Correct output: 2                   | Program output: 2                  
Correct output: -86                 | Program output: -27                
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: 54                 
Correct output: -78                 | Program output: -78                
Correct output: -67                 | Program output: 30                 
Correct output: -100                | Program output: 87                 
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -56                
Correct output: -85                 | Program output: -77                
Correct output: -38                 | Program output: 97                 
Correct output: -96                 | Program output: 8                  
Correct output: -58                 | Program output: -58                
Correct output: -92                 | Program output: -74                
Correct output: -81                 | Program output: -63                
Correct output: -59                 | Program output: -48                
Correct output: -90                 | Program output: -71                
Correct output: -92                 | Program output: 63                 
Correct output: -61                 | Program output: -61                
Correct output: -85                 | Program output: -40                
Correct output: -41                 | Program output: 64                 
Correct output: -92                 | Program output: 38                 
Correct output: -36                 | Program output: 58                 
Correct output: -94                 | Program output: 57                 
Correct output: -64                 | Program output: -47                
Correct output: -86                 | Program output: -86                
Correct output: -63                 | Program output: -63                
Correct output: -81                 | Program output: 75                 
Correct output: -99                 | Program output: -99                
Correct output: -79                 | Program output: -55                
Correct output: -99                 | Program output: 15                 
Correct output: -90                 | Program output: 84                 
Correct output: -29                 | Program output: -29                
Correct output: -61                 | Program output: -61                
Correct output: -79                 | Program output: 37                 
Correct output: -69                 | Program output: 80                 
Correct output: -83                 | Program output: 69                 
Correct output: -24                 | Program output: 9                  
Correct output: -66                 | Program output: 15                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 94                 
Correct output: -93                 | Program output: 84                 
Correct output: -71                 | Program output: -41                
Correct output: -18                 | Program output: -18                
Correct output: -14                 | Program output: 12                 
Correct output: -79                 | Program output: 14                 
Correct output: -100                | Program output: -43                
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: 90                 
Correct output: -70                 | Program output: -7                 
Correct output: -8                  | Program output: -8                 
Correct output: -80                 | Program output: -26                
Correct output: -86                 | Program output: -19                
Correct output: -96                 | Program output: -25                
Correct output: -97                 | Program output: -97                
Correct output: -82                 | Program output: -82                
Correct output: -48                 | Program output: 95                 
Correct output: -91                 | Program output: -51                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 2, :instruction in3} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yank} {:close 1, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction exec_empty})
Lexicase best program: (integer_empty integer_dup_times exec_swap (in3) () exec_do*range (in1) integer_dup_times integer_mult exec_do*count (exec_yank) in4 exec_k () (boolean_flush in4 boolean_pop) print_integer integer_mult in2 exec_empty)
Lexicase best errors: [1 0 1 0 0 1 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 26
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 2, :instruction in3} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yank} {:close 1, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction exec_empty})
Zero cases best program: (integer_empty integer_dup_times exec_swap (in3) () exec_do*range (in1) integer_dup_times integer_mult exec_do*count (exec_yank) in4 exec_k () (boolean_flush in4 boolean_pop) print_integer integer_mult in2 exec_empty)
Zero cases best errors: [1 0 1 0 0 1 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 26
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 647 1000 881 442 205 441 1000 234 442)
Population mean number of elite cases: 6.29
Count of perfect (error zero) individuals by case: (0 647 0 881 442 205 441 0 234 442)
Population mean number of perfect (error zero) cases: 3.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 2, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_yankdup} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_dec} {:close 1, :instruction tag_exec_315} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_rot} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_rot})
Best program: (integer_yank exec_eq exec_dup () exec_do*while (boolean_empty integer_inc boolean_flush integer_pop) in4 boolean_swap integer_lt boolean_flush print_integer boolean_xor integer_yankdup integer_lt integer_eq integer_add boolean_stackdepth exec_eq exec_do*while () integer_lt exec_y (exec_yank integer_yankdup) exec_shove () exec_noop exec_shove (exec_do*times (integer_swap in1 integer_dec tag_exec_315 () exec_dup (exec_rot () (exec_do*count (integer_lt boolean_empty boolean_and in1 exec_pop (boolean_swap) boolean_yank) boolean_empty exec_eq boolean_yank boolean_dup print_boolean) (boolean_swap boolean_swap) integer_gt exec_dup_items boolean_xor) boolean_flush boolean_flush exec_noop boolean_rot)) exec_pop (integer_lt) exec_swap (exec_dup_items exec_eq integer_rot) ())
Errors: [1 0 1 0 0 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 63
Size: 81
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 6.708
Median total errors in population: 7
Error averages by case: (1.0 0.353 1.0 0.119 0.558 0.795 0.559 1.0 0.766 0.558)
Error minima by case: (1 0 1 0 0 0 0 1 0 0)
Average genome size in population (length): 36.563
Average program size in population (points): 47.297
Average percent parens in population: 0.223
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9055
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 88
Genome diversity (% unique genomes):	 0.587
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.554
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1820957
--- Timings ---
Current time: 1559583659396 milliseconds
Total Time:           8.8 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.5 seconds, 50.8%
Fitness Testing:      3.4 seconds, 39.0%
Report:               0.8 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 544
Test mean error for best: 0.54400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -37                 | Program output: -37                
Correct output: -60                 | Program output: -60                
Correct output: -26                 | Program output: -26                
Correct output: -70                 | Program output: -70                
Correct output: -54                 | Program output: -54                
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: -72                
Correct output: -76                 | Program output: -76                
Correct output: -100                | Program output: -100               
Correct output: 47                  | Program output: 47                 
Correct output: -23                 | Program output: -23                
Correct output: -65                 | Program output: -65                
Correct output: 90                  | Program output: 90                 
Correct output: -17                 | Program output: -17                
Correct output: 97                  | Program output: 97                 
Correct output: 9                   | Program output: 29                 
Correct output: 21                  | Program output: 71                 
Correct output: 3                   | Program output: 10                 
Correct output: 1                   | Program output: 55                 
Correct output: 7                   | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: 32                  | Program output: 63                 
Correct output: 23                  | Program output: 39                 
Correct output: 17                  | Program output: 24                 
Correct output: 20                  | Program output: 81                 
Correct output: 0                   | Program output: 0                  
Correct output: 21                  | Program output: 41                 
Correct output: 10                  | Program output: 10                 
Correct output: 28                  | Program output: 30                 
Correct output: 13                  | Program output: 66                 
Correct output: 33                  | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 6                   | Program output: 23                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: -2                  | Program output: -2                 
Correct output: -48                 | Program output: -48                
Correct output: 2                   | Program output: 2                  
Correct output: -86                 | Program output: -27                
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: 2                  
Correct output: -78                 | Program output: -78                
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -76                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -56                
Correct output: -85                 | Program output: -77                
Correct output: -38                 | Program output: 71                 
Correct output: -96                 | Program output: -96                
Correct output: -58                 | Program output: -58                
Correct output: -92                 | Program output: -74                
Correct output: -81                 | Program output: -63                
Correct output: -59                 | Program output: -48                
Correct output: -90                 | Program output: -71                
Correct output: -92                 | Program output: -69                
Correct output: -61                 | Program output: -61                
Correct output: -85                 | Program output: -40                
Correct output: -41                 | Program output: -41                
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: 45                 
Correct output: -94                 | Program output: -94                
Correct output: -64                 | Program output: -47                
Correct output: -86                 | Program output: -86                
Correct output: -63                 | Program output: -63                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -99                
Correct output: -79                 | Program output: -55                
Correct output: -99                 | Program output: -66                
Correct output: -90                 | Program output: 76                 
Correct output: -29                 | Program output: -29                
Correct output: -61                 | Program output: -61                
Correct output: -79                 | Program output: 30                 
Correct output: -69                 | Program output: -18                
Correct output: -83                 | Program output: 73                 
Correct output: -24                 | Program output: -24                
Correct output: -66                 | Program output: -66                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 40                 
Correct output: -93                 | Program output: -93                
Correct output: -71                 | Program output: -41                
Correct output: -18                 | Program output: -18                
Correct output: -14                 | Program output: -14                
Correct output: -79                 | Program output: -73                
Correct output: -100                | Program output: -43                
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: -7                 
Correct output: -8                  | Program output: -8                 
Correct output: -80                 | Program output: -26                
Correct output: -86                 | Program output: -19                
Correct output: -96                 | Program output: -25                
Correct output: -97                 | Program output: -97                
Correct output: -82                 | Program output: -82                
Correct output: -48                 | Program output: -48                
Correct output: -91                 | Program output: -51                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yank} {:close 1, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction exec_empty})
Lexicase best program: (integer_empty print_integer in4 integer_swap in4 integer_dup_times integer_mult exec_do*count (exec_yank) in4 exec_k () (integer_empty in4 boolean_pop) boolean_pop print_integer integer_mult in2 exec_empty)
Lexicase best errors: [1 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 23
Percent parens: 0.174
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yank} {:close 1, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction exec_empty})
Zero cases best program: (integer_empty print_integer in4 integer_swap in4 integer_dup_times integer_mult exec_do*count (exec_yank) in4 exec_k () (integer_empty in4 boolean_pop) boolean_pop print_integer integer_mult in2 exec_empty)
Zero cases best errors: [1 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 23
Percent parens: 0.174
--- Lexicase Population Statistics ---
Count of elite individuals by case: (119 782 592 3 594 592 594 593 112 745)
Population mean number of elite cases: 4.73
Count of perfect (error zero) individuals by case: (119 782 592 3 594 592 594 593 112 745)
Population mean number of perfect (error zero) cases: 4.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_integer} {:close 1, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yank} {:close 1, :instruction in4} {:close 2, :instruction exec_k} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction exec_empty})
Best program: (print_integer integer_swap in4 integer_dup_times integer_mult exec_do*count (exec_yank) in4 exec_k () () integer_empty in4 boolean_pop print_integer integer_mult in2 exec_empty)
Errors: [1 0 0 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 16
Size: 20
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 5.274
Median total errors in population: 3
Error averages by case: (0.881 0.218 0.408 0.997 0.406 0.408 0.406 0.407 0.888 0.255)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.703
Average program size in population (points): 51.18
Average percent parens in population: 0.221
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.578
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 117
Genome diversity (% unique genomes):	 0.661
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 120
Syntactic diversity (% unique Push programs):	 0.635
Total error diversity:				 0.009
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2445342
--- Timings ---
Current time: 1559583662551 milliseconds
Total Time:          12.2 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.6 seconds, 53.9%
Fitness Testing:      4.1 seconds, 33.5%
Report:               1.4 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 548
Test mean error for best: 0.54800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -37                 | Program output: -37                
Correct output: -60                 | Program output: -60                
Correct output: -26                 | Program output: -26                
Correct output: -70                 | Program output: -70                
Correct output: -54                 | Program output: -54                
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: -72                
Correct output: -76                 | Program output: -76                
Correct output: -100                | Program output: -100               
Correct output: 47                  | Program output: 47                 
Correct output: -23                 | Program output: -23                
Correct output: -65                 | Program output: -65                
Correct output: 90                  | Program output: 90                 
Correct output: -17                 | Program output: -17                
Correct output: 97                  | Program output: 97                 
Correct output: 9                   | Program output: 29                 
Correct output: 21                  | Program output: 71                 
Correct output: 3                   | Program output: 10                 
Correct output: 1                   | Program output: 55                 
Correct output: 7                   | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: 32                  | Program output: 63                 
Correct output: 23                  | Program output: 39                 
Correct output: 17                  | Program output: 24                 
Correct output: 20                  | Program output: 81                 
Correct output: 0                   | Program output: 0                  
Correct output: 21                  | Program output: 41                 
Correct output: 10                  | Program output: 10                 
Correct output: 28                  | Program output: 30                 
Correct output: 13                  | Program output: 66                 
Correct output: 33                  | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 6                   | Program output: 23                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: -2                  | Program output: -2                 
Correct output: -48                 | Program output: -48                
Correct output: 2                   | Program output: 2                  
Correct output: -86                 | Program output: -27                
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: 2                  
Correct output: -78                 | Program output: -78                
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -76                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -56                
Correct output: -85                 | Program output: -77                
Correct output: -38                 | Program output: 71                 
Correct output: -96                 | Program output: -96                
Correct output: -58                 | Program output: -58                
Correct output: -92                 | Program output: -74                
Correct output: -81                 | Program output: -63                
Correct output: -59                 | Program output: -48                
Correct output: -90                 | Program output: -71                
Correct output: -92                 | Program output: -69                
Correct output: -61                 | Program output: -61                
Correct output: -85                 | Program output: -40                
Correct output: -41                 | Program output: -41                
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: 45                 
Correct output: -94                 | Program output: -94                
Correct output: -64                 | Program output: -47                
Correct output: -86                 | Program output: -86                
Correct output: -63                 | Program output: -63                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -99                
Correct output: -79                 | Program output: -55                
Correct output: -99                 | Program output: -66                
Correct output: -90                 | Program output: 76                 
Correct output: -29                 | Program output: -29                
Correct output: -61                 | Program output: -61                
Correct output: -79                 | Program output: 30                 
Correct output: -69                 | Program output: -18                
Correct output: -83                 | Program output: 73                 
Correct output: -24                 | Program output: -24                
Correct output: -66                 | Program output: -66                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 40                 
Correct output: -93                 | Program output: -93                
Correct output: -71                 | Program output: -41                
Correct output: -18                 | Program output: -18                
Correct output: -14                 | Program output: -14                
Correct output: -79                 | Program output: -73                
Correct output: -100                | Program output: -43                
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: -7                 
Correct output: -8                  | Program output: -8                 
Correct output: -80                 | Program output: -26                
Correct output: -86                 | Program output: -19                
Correct output: -96                 | Program output: -25                
Correct output: -97                 | Program output: -97                
Correct output: -82                 | Program output: -82                
Correct output: -48                 | Program output: -48                
Correct output: -91                 | Program output: -51                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yank} {:close 1, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction exec_empty})
Lexicase best program: (integer_empty print_integer in4 integer_swap in4 integer_dup_times integer_mult exec_do*count (exec_yank) in4 exec_k () (integer_empty in4 boolean_pop) boolean_pop print_integer integer_mult in2 exec_empty)
Lexicase best errors: [1 1 1 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 23
Percent parens: 0.174
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yank} {:close 1, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction exec_empty})
Zero cases best program: (integer_empty print_integer in4 integer_swap in4 integer_dup_times integer_mult exec_do*count (exec_yank) in4 exec_k () (integer_empty in4 boolean_pop) boolean_pop print_integer integer_mult in2 exec_empty)
Zero cases best errors: [1 1 1 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 23
Percent parens: 0.174
--- Lexicase Population Statistics ---
Count of elite individuals by case: (71 146 12 716 716 69 934 146 715 911)
Population mean number of elite cases: 4.44
Count of perfect (error zero) individuals by case: (71 146 12 716 716 69 934 146 715 911)
Population mean number of perfect (error zero) cases: 4.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yank} {:close 1, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction exec_empty})
Best program: (integer_empty print_integer in4 integer_swap in4 integer_dup_times integer_mult exec_do*count (exec_yank) in4 exec_k () (integer_empty in4 boolean_pop) boolean_pop print_integer integer_mult in2 exec_empty)
Errors: [1 1 1 0 0 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 19
Size: 23
Percent parens: 0.174
--- Population Statistics ---
Average total errors in population: 5.564
Median total errors in population: 5
Error averages by case: (0.929 0.854 0.988 0.284 0.284 0.931 0.066 0.854 0.285 0.089)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.381
Average program size in population (points): 26.765
Average percent parens in population: 0.196
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 6.26125
Median age in population: 6.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 274
Genome diversity (% unique genomes):	 0.347
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 289
Syntactic diversity (% unique Push programs):	 0.313
Total error diversity:				 0.006
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3187967
--- Timings ---
Current time: 1559583665580 milliseconds
Total Time:          15.2 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.5 seconds, 55.9%
Fitness Testing:      4.8 seconds, 31.4%
Report:               1.8 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 548
Test mean error for best: 0.54800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -37                 | Program output: -37                
Correct output: -60                 | Program output: -60                
Correct output: -26                 | Program output: -26                
Correct output: -70                 | Program output: -70                
Correct output: -54                 | Program output: -54                
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: -72                
Correct output: -76                 | Program output: -76                
Correct output: -100                | Program output: -100               
Correct output: 47                  | Program output: 47                 
Correct output: -23                 | Program output: -23                
Correct output: -65                 | Program output: -65                
Correct output: 90                  | Program output: 90                 
Correct output: -17                 | Program output: -17                
Correct output: 97                  | Program output: 97                 
Correct output: 9                   | Program output: 29                 
Correct output: 21                  | Program output: 71                 
Correct output: 3                   | Program output: 10                 
Correct output: 1                   | Program output: 55                 
Correct output: 7                   | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: 32                  | Program output: 63                 
Correct output: 23                  | Program output: 39                 
Correct output: 17                  | Program output: 24                 
Correct output: 20                  | Program output: 81                 
Correct output: 0                   | Program output: 0                  
Correct output: 21                  | Program output: 41                 
Correct output: 10                  | Program output: 10                 
Correct output: 28                  | Program output: 30                 
Correct output: 13                  | Program output: 66                 
Correct output: 33                  | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 6                   | Program output: 23                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: -2                  | Program output: -2                 
Correct output: -48                 | Program output: -48                
Correct output: 2                   | Program output: 2                  
Correct output: -86                 | Program output: -27                
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: 2                  
Correct output: -78                 | Program output: -78                
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -76                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -56                
Correct output: -85                 | Program output: -77                
Correct output: -38                 | Program output: 71                 
Correct output: -96                 | Program output: -96                
Correct output: -58                 | Program output: -58                
Correct output: -92                 | Program output: -74                
Correct output: -81                 | Program output: -63                
Correct output: -59                 | Program output: -48                
Correct output: -90                 | Program output: -71                
Correct output: -92                 | Program output: -69                
Correct output: -61                 | Program output: -61                
Correct output: -85                 | Program output: -40                
Correct output: -41                 | Program output: -41                
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: 45                 
Correct output: -94                 | Program output: -94                
Correct output: -64                 | Program output: -47                
Correct output: -86                 | Program output: -86                
Correct output: -63                 | Program output: -63                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -99                
Correct output: -79                 | Program output: -55                
Correct output: -99                 | Program output: -66                
Correct output: -90                 | Program output: 76                 
Correct output: -29                 | Program output: -29                
Correct output: -61                 | Program output: -61                
Correct output: -79                 | Program output: 30                 
Correct output: -69                 | Program output: -18                
Correct output: -83                 | Program output: 73                 
Correct output: -24                 | Program output: -24                
Correct output: -66                 | Program output: -66                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 40                 
Correct output: -93                 | Program output: -93                
Correct output: -71                 | Program output: -41                
Correct output: -18                 | Program output: -18                
Correct output: -14                 | Program output: -14                
Correct output: -79                 | Program output: -73                
Correct output: -100                | Program output: -43                
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: -7                 
Correct output: -8                  | Program output: -8                 
Correct output: -80                 | Program output: -26                
Correct output: -86                 | Program output: -19                
Correct output: -96                 | Program output: -25                
Correct output: -97                 | Program output: -97                
Correct output: -82                 | Program output: -82                
Correct output: -48                 | Program output: -48                
Correct output: -91                 | Program output: -51                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yank} {:close 1, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction exec_empty})
Lexicase best program: (integer_empty print_integer in4 integer_swap in4 integer_dup_times integer_mult exec_do*count (exec_yank) exec_do*count (exec_yank) in4 exec_k () (integer_empty in4 boolean_pop) boolean_pop print_integer integer_mult in2 exec_empty)
Lexicase best errors: [1 0 0 0 0 0 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 26
Percent parens: 0.192
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yank} {:close 1, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction exec_empty})
Zero cases best program: (integer_empty print_integer in4 integer_swap in4 integer_dup_times integer_mult exec_do*count (exec_yank) exec_do*count (exec_yank) in4 exec_k () (integer_empty in4 boolean_pop) boolean_pop print_integer integer_mult in2 exec_empty)
Zero cases best errors: [1 0 0 0 0 0 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 26
Percent parens: 0.192
--- Lexicase Population Statistics ---
Count of elite individuals by case: (330 379 922 379 306 308 320 72 308 229)
Population mean number of elite cases: 3.55
Count of perfect (error zero) individuals by case: (330 379 922 379 306 308 320 72 308 229)
Population mean number of perfect (error zero) cases: 3.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yank} {:close 1, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction exec_empty})
Best program: (integer_empty print_integer in4 integer_swap in4 integer_dup_times integer_mult exec_do*count (exec_yank) in4 exec_k () (integer_empty in4 boolean_pop) boolean_pop print_integer integer_mult in2 exec_empty)
Errors: [1 0 0 0 0 0 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 19
Size: 23
Percent parens: 0.174
--- Population Statistics ---
Average total errors in population: 6.447
Median total errors in population: 7
Error averages by case: (0.67 0.621 0.078 0.621 0.694 0.692 0.68 0.928 0.692 0.771)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.227
Average program size in population (points): 33.461
Average percent parens in population: 0.212
Minimum age in population: 5.0
Maximum age in population: 9.375
Average age in population: 7.798875
Median age in population: 7.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 122
Genome diversity (% unique genomes):	 0.495
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 131
Syntactic diversity (% unique Push programs):	 0.455
Total error diversity:				 0.007
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 4011429
--- Timings ---
Current time: 1559583668807 milliseconds
Total Time:          18.5 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.5 seconds, 57.1%
Fitness Testing:      5.6 seconds, 30.4%
Report:               2.2 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 559
Test mean error for best: 0.55900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -37                 | Program output: -37                
Correct output: -60                 | Program output: -60                
Correct output: -26                 | Program output: -26                
Correct output: -70                 | Program output: -70                
Correct output: -54                 | Program output: 15                 
Correct output: -79                 | Program output: -29                
Correct output: -72                 | Program output: -13                
Correct output: -76                 | Program output: 22                 
Correct output: -100                | Program output: 57                 
Correct output: 47                  | Program output: 47                 
Correct output: -23                 | Program output: -23                
Correct output: -65                 | Program output: -65                
Correct output: 90                  | Program output: 90                 
Correct output: -17                 | Program output: -17                
Correct output: 97                  | Program output: 97                 
Correct output: 9                   | Program output:                    
Correct output: 21                  | Program output: 91                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 35                 
Correct output: 46                  | Program output: 79                 
Correct output: 32                  | Program output: 49                 
Correct output: 23                  | Program output: 23                 
Correct output: 17                  | Program output: 17                 
Correct output: 20                  | Program output: 52                 
Correct output: 0                   | Program output: 59                 
Correct output: 21                  | Program output: 36                 
Correct output: 10                  | Program output: 51                 
Correct output: 28                  | Program output: 56                 
Correct output: 13                  | Program output:                    
Correct output: 33                  | Program output: 33                 
Correct output: 12                  | Program output: 46                 
Correct output: 6                   | Program output: 6                  
Correct output: 26                  | Program output: 41                 
Correct output: 4                   | Program output: 47                 
Correct output: -2                  | Program output: 17                 
Correct output: -48                 | Program output: 33                 
Correct output: 2                   | Program output: 55                 
Correct output: -86                 | Program output: -86                
Correct output: -67                 | Program output: -19                
Correct output: -23                 | Program output: -5                 
Correct output: -78                 | Program output: -42                
Correct output: -67                 | Program output: 18                 
Correct output: -100                | Program output: -37                
Correct output: -76                 | Program output: 33                 
Correct output: -73                 | Program output: -73                
Correct output: -85                 | Program output: -70                
Correct output: -38                 | Program output: -38                
Correct output: -96                 | Program output: 68                 
Correct output: -58                 | Program output: -27                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -4                 
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -70                
Correct output: -92                 | Program output: -54                
Correct output: -61                 | Program output: -45                
Correct output: -85                 | Program output: -25                
Correct output: -41                 | Program output: -37                
Correct output: -92                 | Program output: 2                  
Correct output: -36                 | Program output: -15                
Correct output: -94                 | Program output: -67                
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: 75                 
Correct output: -63                 | Program output: -10                
Correct output: -81                 | Program output: -79                
Correct output: -99                 | Program output: 8                  
Correct output: -79                 | Program output: -45                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -90                
Correct output: -29                 | Program output: -8                 
Correct output: -61                 | Program output: -49                
Correct output: -79                 | Program output: -79                
Correct output: -69                 | Program output: -69                
Correct output: -83                 | Program output: -83                
Correct output: -24                 | Program output: 53                 
Correct output: -66                 | Program output: 41                 
Correct output: -95                 | Program output: -91                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -80                
Correct output: -71                 | Program output: -15                
Correct output: -18                 | Program output: 75                 
Correct output: -14                 | Program output: 92                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -14                
Correct output: -60                 | Program output: -39                
Correct output: -62                 | Program output: -15                
Correct output: -70                 | Program output: -70                
Correct output: -8                  | Program output: 88                 
Correct output: -80                 | Program output: -80                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -13                
Correct output: -82                 | Program output: -52                
Correct output: -48                 | Program output: -44                
Correct output: -91                 | Program output: -10                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_integer} {:close 1, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yank} {:close 1, :instruction in4} {:close 2, :instruction exec_k} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 1, :instruction in2} {:close 0, :instruction exec_empty})
Lexicase best program: (print_integer integer_swap in4 integer_dup_times integer_mult exec_do*count (exec_yank) in4 exec_k () () integer_empty in4 boolean_pop print_integer integer_mult in2 exec_empty)
Lexicase best errors: [0 1 0 1 0 0 1 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 20
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_integer} {:close 1, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yank} {:close 1, :instruction in4} {:close 2, :instruction exec_k} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 1, :instruction in2} {:close 0, :instruction exec_empty})
Zero cases best program: (print_integer integer_swap in4 integer_dup_times integer_mult exec_do*count (exec_yank) in4 exec_k () () integer_empty in4 boolean_pop print_integer integer_mult in2 exec_empty)
Zero cases best errors: [0 1 0 1 0 0 1 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 20
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (431 185 620 151 620 431 263 151 287 152)
Population mean number of elite cases: 3.29
Count of perfect (error zero) individuals by case: (431 185 620 151 620 431 263 151 287 152)
Population mean number of perfect (error zero) cases: 3.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times})
Best program: (integer_empty integer_dup_times exec_swap (in3) (exec_do*range (in1) integer_empty) integer_dup_times exec_yankdup in3 exec_do*range (integer_yankdup) integer_yankdup boolean_flush boolean_empty print_integer exec_stackdepth integer_mult integer_dup_items integer_gte integer_swap exec_y () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger exec_noop boolean_flush print_newline boolean_dup_times)))
Errors: [1 1 1 0 1 1 0 0 0 1]
Total: 6
Mean: 0.6
Genome size: 32
Size: 41
Percent parens: 0.220
--- Population Statistics ---
Average total errors in population: 6.709
Median total errors in population: 6
Error averages by case: (0.569 0.815 0.38 0.849 0.38 0.569 0.737 0.849 0.713 0.848)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.611
Average program size in population (points): 28.552
Average percent parens in population: 0.203
Minimum age in population: 6.75
Maximum age in population: 11.125
Average age in population: 9.3269375
Median age in population: 9.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 152
Genome diversity (% unique genomes):	 0.528
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 169
Syntactic diversity (% unique Push programs):	 0.474
Total error diversity:				 0.005
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4768622
--- Timings ---
Current time: 1559583671975 milliseconds
Total Time:          21.6 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.5 seconds, 58.0%
Fitness Testing:      6.3 seconds, 29.4%
Report:               2.6 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 643
Test mean error for best: 0.64300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -37                 | Program output: -37                
Correct output: -60                 | Program output: 32                 
Correct output: -26                 | Program output: -18                
Correct output: -70                 | Program output: -70                
Correct output: -54                 | Program output: 15                 
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: -72                
Correct output: -76                 | Program output: 22                 
Correct output: -100                | Program output: 57                 
Correct output: 47                  | Program output: 47                 
Correct output: -23                 | Program output: -23                
Correct output: -65                 | Program output: -65                
Correct output: 90                  | Program output: 90                 
Correct output: -17                 | Program output: -17                
Correct output: 97                  | Program output: 97                 
Correct output: 9                   | Program output: 9                  
Correct output: 21                  | Program output: 91                 
Correct output: 3                   | Program output: 48                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 35                 
Correct output: 46                  | Program output: 79                 
Correct output: 32                  | Program output: 49                 
Correct output: 23                  | Program output: 23                 
Correct output: 17                  | Program output: 17                 
Correct output: 20                  | Program output: 52                 
Correct output: 0                   | Program output: 59                 
Correct output: 21                  | Program output: 36                 
Correct output: 10                  | Program output: 51                 
Correct output: 28                  | Program output: 56                 
Correct output: 13                  | Program output: 13                 
Correct output: 33                  | Program output: 33                 
Correct output: 12                  | Program output: 46                 
Correct output: 6                   | Program output: 6                  
Correct output: 26                  | Program output: 41                 
Correct output: 4                   | Program output: 47                 
Correct output: -2                  | Program output: 17                 
Correct output: -48                 | Program output: 33                 
Correct output: 2                   | Program output: 55                 
Correct output: -86                 | Program output: -86                
Correct output: -67                 | Program output: 90                 
Correct output: -23                 | Program output: -23                
Correct output: -78                 | Program output: -12                
Correct output: -67                 | Program output: 18                 
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: 33                 
Correct output: -73                 | Program output: 17                 
Correct output: -85                 | Program output: -85                
Correct output: -38                 | Program output: -38                
Correct output: -96                 | Program output: 68                 
Correct output: -58                 | Program output: -27                
Correct output: -92                 | Program output: 9                  
Correct output: -81                 | Program output: -81                
Correct output: -59                 | Program output: 42                 
Correct output: -90                 | Program output: -70                
Correct output: -92                 | Program output: -92                
Correct output: -61                 | Program output: -45                
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: 54                 
Correct output: -92                 | Program output: 2                  
Correct output: -36                 | Program output: -36                
Correct output: -94                 | Program output: -67                
Correct output: -64                 | Program output: 20                 
Correct output: -86                 | Program output: 75                 
Correct output: -63                 | Program output: 15                 
Correct output: -81                 | Program output: -66                
Correct output: -99                 | Program output: 8                  
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -93                
Correct output: -90                 | Program output: -77                
Correct output: -29                 | Program output: -8                 
Correct output: -61                 | Program output: 52                 
Correct output: -79                 | Program output: 14                 
Correct output: -69                 | Program output: -32                
Correct output: -83                 | Program output: -20                
Correct output: -24                 | Program output: 53                 
Correct output: -66                 | Program output: 41                 
Correct output: -95                 | Program output: -3                 
Correct output: -100                | Program output: -17                
Correct output: -93                 | Program output: -52                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 75                 
Correct output: -14                 | Program output: 92                 
Correct output: -79                 | Program output: 76                 
Correct output: -100                | Program output: -100               
Correct output: -60                 | Program output: -39                
Correct output: -62                 | Program output: 28                 
Correct output: -70                 | Program output: -46                
Correct output: -8                  | Program output: 88                 
Correct output: -80                 | Program output: 59                 
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: 99                 
Correct output: -97                 | Program output: -13                
Correct output: -82                 | Program output: 14                 
Correct output: -48                 | Program output: -44                
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (integer_empty integer_dup_times exec_swap (in3) (exec_do*range (in1) integer_yankdup boolean_flush) exec_pop () integer_shove boolean_invert_second_then_and integer_eq in1 integer_yankdup boolean_flush exec_pop () integer_shove boolean_invert_second_then_and integer_eq exec_eq exec_yank boolean_empty print_integer integer_add integer_mult integer_dup_items integer_gte integer_swap exec_y () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger exec_when (boolean_flush print_newline boolean_dup_times))))
Lexicase best errors: [1 0 0 1 0 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 50
Percent parens: 0.220
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (integer_empty integer_dup_times exec_swap (in3) (exec_do*range (in1) integer_yankdup boolean_flush) exec_pop () integer_shove boolean_invert_second_then_and integer_eq in1 integer_yankdup boolean_flush exec_pop () integer_shove boolean_invert_second_then_and integer_eq exec_eq exec_yank boolean_empty print_integer integer_add integer_mult integer_dup_items integer_gte integer_swap exec_y () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger exec_when (boolean_flush print_newline boolean_dup_times))))
Zero cases best errors: [1 0 0 1 0 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 50
Percent parens: 0.220
--- Lexicase Population Statistics ---
Count of elite individuals by case: (292 93 130 289 276 131 319 94 407 318)
Population mean number of elite cases: 2.35
Count of perfect (error zero) individuals by case: (292 93 130 289 276 131 319 94 407 318)
Population mean number of perfect (error zero) cases: 2.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times})
Best program: (integer_dup_items integer_dup_times exec_swap (in3) (exec_do*range (in1) integer_yankdup boolean_flush) exec_pop () integer_shove boolean_invert_second_then_and integer_eq exec_eq exec_yank boolean_empty integer_eq exec_eq exec_yank boolean_empty print_integer exec_stackdepth integer_mult integer_dup_items integer_gte integer_swap exec_y () integer_pop exec_dup_times (integer_mod integer_swap exec_yankdup) boolean_frominteger exec_noop boolean_flush print_newline boolean_dup_times)
Errors: [1 0 0 1 0 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 36
Size: 43
Percent parens: 0.163
--- Population Statistics ---
Average total errors in population: 7.651
Median total errors in population: 7
Error averages by case: (0.708 0.907 0.87 0.711 0.724 0.869 0.681 0.906 0.593 0.682)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.263
Average program size in population (points): 30.734
Average percent parens in population: 0.205
Minimum age in population: 8.5
Maximum age in population: 12.59375
Average age in population: 10.856078125
Median age in population: 10.921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 78
Genome diversity (% unique genomes):	 0.548
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.495
Total error diversity:				 0.006
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.079
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 5608397
--- Timings ---
Current time: 1559583675215 milliseconds
Total Time:          24.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.5 seconds, 58.2%
Fitness Testing:      7.2 seconds, 28.9%
Report:               3.1 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 548
Test mean error for best: 0.54800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -37                 | Program output: -37                
Correct output: -60                 | Program output: -60                
Correct output: -26                 | Program output: -26                
Correct output: -70                 | Program output: -70                
Correct output: -54                 | Program output: -54                
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: -72                
Correct output: -76                 | Program output: -76                
Correct output: -100                | Program output: -100               
Correct output: 47                  | Program output: 47                 
Correct output: -23                 | Program output: -23                
Correct output: -65                 | Program output: -65                
Correct output: 90                  | Program output: 90                 
Correct output: -17                 | Program output: -17                
Correct output: 97                  | Program output: 97                 
Correct output: 9                   | Program output: 29                 
Correct output: 21                  | Program output: 71                 
Correct output: 3                   | Program output: 10                 
Correct output: 1                   | Program output: 55                 
Correct output: 7                   | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: 32                  | Program output: 63                 
Correct output: 23                  | Program output: 39                 
Correct output: 17                  | Program output: 24                 
Correct output: 20                  | Program output: 81                 
Correct output: 0                   | Program output: 0                  
Correct output: 21                  | Program output: 41                 
Correct output: 10                  | Program output: 10                 
Correct output: 28                  | Program output: 30                 
Correct output: 13                  | Program output: 66                 
Correct output: 33                  | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 6                   | Program output: 23                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: -2                  | Program output: -2                 
Correct output: -48                 | Program output: -48                
Correct output: 2                   | Program output: 2                  
Correct output: -86                 | Program output: -27                
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: 2                  
Correct output: -78                 | Program output: -78                
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -76                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -56                
Correct output: -85                 | Program output: -77                
Correct output: -38                 | Program output: 71                 
Correct output: -96                 | Program output: -96                
Correct output: -58                 | Program output: -58                
Correct output: -92                 | Program output: -74                
Correct output: -81                 | Program output: -63                
Correct output: -59                 | Program output: -48                
Correct output: -90                 | Program output: -71                
Correct output: -92                 | Program output: -69                
Correct output: -61                 | Program output: -61                
Correct output: -85                 | Program output: -40                
Correct output: -41                 | Program output: -41                
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: 45                 
Correct output: -94                 | Program output: -94                
Correct output: -64                 | Program output: -47                
Correct output: -86                 | Program output: -86                
Correct output: -63                 | Program output: -63                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -99                
Correct output: -79                 | Program output: -55                
Correct output: -99                 | Program output: -66                
Correct output: -90                 | Program output: 76                 
Correct output: -29                 | Program output: -29                
Correct output: -61                 | Program output: -61                
Correct output: -79                 | Program output: 30                 
Correct output: -69                 | Program output: -18                
Correct output: -83                 | Program output: 73                 
Correct output: -24                 | Program output: -24                
Correct output: -66                 | Program output: -66                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 40                 
Correct output: -93                 | Program output: -93                
Correct output: -71                 | Program output: -41                
Correct output: -18                 | Program output: -18                
Correct output: -14                 | Program output: -14                
Correct output: -79                 | Program output: -73                
Correct output: -100                | Program output: -43                
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: -7                 
Correct output: -8                  | Program output: -8                 
Correct output: -80                 | Program output: -26                
Correct output: -86                 | Program output: -19                
Correct output: -96                 | Program output: -25                
Correct output: -97                 | Program output: -97                
Correct output: -82                 | Program output: -82                
Correct output: -48                 | Program output: -48                
Correct output: -91                 | Program output: -51                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yank} {:close 1, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction exec_empty})
Lexicase best program: (integer_empty print_integer in4 integer_swap in4 integer_dup_times integer_mult exec_do*count (exec_yank) in4 exec_k () (integer_empty in4 boolean_pop) boolean_pop print_integer integer_mult in2 exec_empty)
Lexicase best errors: [0 0 0 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 23
Percent parens: 0.174
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yank} {:close 1, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction exec_empty})
Zero cases best program: (integer_empty print_integer in4 integer_swap in4 integer_dup_times integer_mult exec_do*count (exec_yank) in4 exec_k () (integer_empty in4 boolean_pop) boolean_pop print_integer integer_mult in2 exec_empty)
Zero cases best errors: [0 0 0 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 23
Percent parens: 0.174
--- Lexicase Population Statistics ---
Count of elite individuals by case: (325 251 251 629 201 286 476 892 325 897)
Population mean number of elite cases: 4.53
Count of perfect (error zero) individuals by case: (325 251 251 629 201 286 476 892 325 897)
Population mean number of perfect (error zero) cases: 4.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 1, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yank} {:close 1, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction exec_empty})
Best program: (integer_empty exec_do*count (in4 integer_swap) in4 integer_dup_times integer_mult exec_do*count (exec_yank) in4 exec_k () (integer_empty in4 boolean_pop) boolean_pop print_integer integer_mult in2 exec_empty)
Errors: [0 0 0 0 0 1 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 19
Size: 24
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 5.467
Median total errors in population: 6
Error averages by case: (0.675 0.749 0.749 0.371 0.799 0.714 0.524 0.108 0.675 0.103)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.088
Average program size in population (points): 32.994
Average percent parens in population: 0.205
Minimum age in population: 9.5
Maximum age in population: 14.09375
Average age in population: 12.2043046875
Median age in population: 12.28125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 107
Genome diversity (% unique genomes):	 0.508
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 111
Syntactic diversity (% unique Push programs):	 0.46
Total error diversity:				 0.009
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.096
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 6184178
--- Timings ---
Current time: 1559583678168 milliseconds
Total Time:          27.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.4 seconds, 58.9%
Fitness Testing:      7.8 seconds, 28.0%
Report:               3.6 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 544
Test mean error for best: 0.54400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -37                 | Program output: -37                
Correct output: -60                 | Program output: -60                
Correct output: -26                 | Program output: -26                
Correct output: -70                 | Program output: -70                
Correct output: -54                 | Program output: -54                
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: -72                
Correct output: -76                 | Program output: -76                
Correct output: -100                | Program output: -100               
Correct output: 47                  | Program output: 47                 
Correct output: -23                 | Program output: -23                
Correct output: -65                 | Program output: -65                
Correct output: 90                  | Program output: 90                 
Correct output: -17                 | Program output: -17                
Correct output: 97                  | Program output: 97                 
Correct output: 9                   | Program output: 29                 
Correct output: 21                  | Program output: 71                 
Correct output: 3                   | Program output: 10                 
Correct output: 1                   | Program output: 55                 
Correct output: 7                   | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: 32                  | Program output: 63                 
Correct output: 23                  | Program output: 39                 
Correct output: 17                  | Program output: 24                 
Correct output: 20                  | Program output: 81                 
Correct output: 0                   | Program output: 0                  
Correct output: 21                  | Program output: 41                 
Correct output: 10                  | Program output: 10                 
Correct output: 28                  | Program output: 30                 
Correct output: 13                  | Program output: 66                 
Correct output: 33                  | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 6                   | Program output: 23                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: -2                  | Program output: -2                 
Correct output: -48                 | Program output: -48                
Correct output: 2                   | Program output: 2                  
Correct output: -86                 | Program output: -27                
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: 2                  
Correct output: -78                 | Program output: -78                
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -76                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -56                
Correct output: -85                 | Program output: -77                
Correct output: -38                 | Program output: 71                 
Correct output: -96                 | Program output: -96                
Correct output: -58                 | Program output: -58                
Correct output: -92                 | Program output: -74                
Correct output: -81                 | Program output: -63                
Correct output: -59                 | Program output: -48                
Correct output: -90                 | Program output: -71                
Correct output: -92                 | Program output: -69                
Correct output: -61                 | Program output: -61                
Correct output: -85                 | Program output: -40                
Correct output: -41                 | Program output: -41                
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: 45                 
Correct output: -94                 | Program output: -94                
Correct output: -64                 | Program output: -47                
Correct output: -86                 | Program output: -86                
Correct output: -63                 | Program output: -63                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -99                
Correct output: -79                 | Program output: -55                
Correct output: -99                 | Program output: -66                
Correct output: -90                 | Program output: 76                 
Correct output: -29                 | Program output: -29                
Correct output: -61                 | Program output: -61                
Correct output: -79                 | Program output: 30                 
Correct output: -69                 | Program output: -18                
Correct output: -83                 | Program output: 73                 
Correct output: -24                 | Program output: -24                
Correct output: -66                 | Program output: -66                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 40                 
Correct output: -93                 | Program output: -93                
Correct output: -71                 | Program output: -41                
Correct output: -18                 | Program output: -18                
Correct output: -14                 | Program output: -14                
Correct output: -79                 | Program output: -73                
Correct output: -100                | Program output: -43                
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: -7                 
Correct output: -8                  | Program output: -8                 
Correct output: -80                 | Program output: -26                
Correct output: -86                 | Program output: -19                
Correct output: -96                 | Program output: -25                
Correct output: -97                 | Program output: -97                
Correct output: -82                 | Program output: -82                
Correct output: -48                 | Program output: -48                
Correct output: -91                 | Program output: -51                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_integer} {:close 1, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yank} {:close 1, :instruction in4} {:close 2, :instruction exec_k} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction exec_empty})
Lexicase best program: (print_integer integer_swap in4 integer_dup_times integer_mult exec_do*count (exec_yank) in4 exec_k () () integer_empty in4 boolean_pop print_integer integer_mult in2 exec_empty)
Lexicase best errors: [0 1 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 20
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_integer} {:close 1, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yank} {:close 1, :instruction in4} {:close 2, :instruction exec_k} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction exec_empty})
Zero cases best program: (print_integer integer_swap in4 integer_dup_times integer_mult exec_do*count (exec_yank) in4 exec_k () () integer_empty in4 boolean_pop print_integer integer_mult in2 exec_empty)
Zero cases best errors: [0 1 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 20
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (944 192 709 482 711 482 480 215 706 8)
Population mean number of elite cases: 4.93
Count of perfect (error zero) individuals by case: (944 192 709 482 711 482 480 215 706 8)
Population mean number of perfect (error zero) cases: 4.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_integer} {:close 1, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yank} {:close 1, :instruction in4} {:close 2, :instruction exec_k} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction exec_empty})
Best program: (print_integer integer_swap in4 integer_dup_times integer_mult exec_do*count (exec_yank) in4 exec_k () () integer_empty in4 boolean_pop print_integer integer_mult in2 exec_empty)
Errors: [0 1 0 0 0 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 16
Size: 20
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 5.071
Median total errors in population: 4
Error averages by case: (0.056 0.808 0.291 0.518 0.289 0.518 0.52 0.785 0.294 0.992)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.541
Average program size in population (points): 27.05
Average percent parens in population: 0.198
Minimum age in population: 10.5
Maximum age in population: 15.8984375
Average age in population: 13.83211328125
Median age in population: 13.98828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 123
Genome diversity (% unique genomes):	 0.389
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 162
Syntactic diversity (% unique Push programs):	 0.33
Total error diversity:				 0.008
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.087
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 6877514
--- Timings ---
Current time: 1559583681129 milliseconds
Total Time:          30.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.3 seconds, 59.5%
Fitness Testing:      8.5 seconds, 27.4%
Report:               3.9 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -37                 | Program output: -37                
Correct output: -60                 | Program output: -60                
Correct output: -26                 | Program output: -18                
Correct output: -70                 | Program output: -70                
Correct output: -54                 | Program output: -54                
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: -72                
Correct output: -76                 | Program output: -76                
Correct output: -100                | Program output: -100               
Correct output: 47                  | Program output: 47                 
Correct output: -23                 | Program output: -23                
Correct output: -65                 | Program output: -65                
Correct output: 90                  | Program output: 90                 
Correct output: -17                 | Program output: -17                
Correct output: 97                  | Program output: 97                 
Correct output: 9                   | Program output: 80                 
Correct output: 21                  | Program output: 71                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 55                 
Correct output: 7                   | Program output:                    
Correct output: 46                  | Program output: 46                 
Correct output: 32                  | Program output: 63                 
Correct output: 23                  | Program output: 39                 
Correct output: 17                  | Program output: 24                 
Correct output: 20                  | Program output: 81                 
Correct output: 0                   | Program output: 42                 
Correct output: 21                  | Program output: 41                 
Correct output: 10                  | Program output:                    
Correct output: 28                  | Program output: 30                 
Correct output: 13                  | Program output: 66                 
Correct output: 33                  | Program output:                    
Correct output: 12                  | Program output: 12                 
Correct output: 6                   | Program output: 23                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: -2                  | Program output: 99                 
Correct output: -48                 | Program output: 48                 
Correct output: 2                   | Program output:                    
Correct output: -86                 | Program output: 75                 
Correct output: -67                 | Program output: -19                
Correct output: -23                 | Program output: 2                  
Correct output: -78                 | Program output: -12                
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -76                
Correct output: -76                 | Program output: 60                 
Correct output: -73                 | Program output: -73                
Correct output: -85                 | Program output: -85                
Correct output: -38                 | Program output: 71                 
Correct output: -96                 | Program output:                    
Correct output: -58                 | Program output: 41                 
Correct output: -92                 | Program output: 9                  
Correct output: -81                 | Program output: -81                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -70                
Correct output: -92                 | Program output: -69                
Correct output: -61                 | Program output: 45                 
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: -41                
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: 45                 
Correct output: -94                 | Program output: -94                
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: 57                 
Correct output: -63                 | Program output: 15                 
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: 93                 
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: 76                 
Correct output: -29                 | Program output: 36                 
Correct output: -61                 | Program output: -49                
Correct output: -79                 | Program output: 30                 
Correct output: -69                 | Program output: -18                
Correct output: -83                 | Program output: 73                 
Correct output: -24                 | Program output:                    
Correct output: -66                 | Program output: -66                
Correct output: -95                 | Program output: -3                 
Correct output: -100                | Program output: 40                 
Correct output: -93                 | Program output: -93                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 84                 
Correct output: -14                 | Program output:                    
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -100               
Correct output: -60                 | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: -46                
Correct output: -8                  | Program output: 38                 
Correct output: -80                 | Program output: 59                 
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: 99                 
Correct output: -97                 | Program output: 53                 
Correct output: -82                 | Program output: -52                
Correct output: -48                 | Program output: -48                
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (integer_empty integer_dup_times exec_swap (in3 exec_do*range (in1) in4) (integer_dup_times) exec_yankdup in2 exec_do*range (integer_yankdup) integer_yankdup boolean_flush boolean_empty print_integer exec_stackdepth integer_mult integer_dup_items integer_gte integer_swap exec_y () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger exec_noop boolean_flush print_newline boolean_dup_times)))
Lexicase best errors: [1 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 41
Percent parens: 0.220
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (integer_empty integer_dup_times exec_swap (in3 exec_do*range (in1) in4) (integer_dup_times) exec_yankdup in2 exec_do*range (integer_yankdup) integer_yankdup boolean_flush boolean_empty print_integer exec_stackdepth integer_mult integer_dup_items integer_gte integer_swap exec_y () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger exec_noop boolean_flush print_newline boolean_dup_times)))
Zero cases best errors: [1 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 41
Percent parens: 0.220
--- Lexicase Population Statistics ---
Count of elite individuals by case: (368 350 352 308 307 351 158 27 567 573)
Population mean number of elite cases: 3.36
Count of perfect (error zero) individuals by case: (368 350 352 308 307 351 158 27 567 573)
Population mean number of perfect (error zero) cases: 3.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times})
Best program: (integer_empty integer_dup_times exec_swap (in3 exec_do*range (in1) in4) (integer_dup_times) exec_yankdup in2 exec_do*range (integer_yankdup) integer_yankdup boolean_flush boolean_empty print_integer exec_stackdepth integer_mult integer_dup_items integer_gte integer_swap exec_y () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger exec_noop boolean_flush print_newline boolean_dup_times)))
Errors: [1 0 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 32
Size: 41
Percent parens: 0.220
--- Population Statistics ---
Average total errors in population: 6.639
Median total errors in population: 7
Error averages by case: (0.632 0.65 0.648 0.692 0.693 0.649 0.842 0.973 0.433 0.427)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.559
Average program size in population (points): 30.461
Average percent parens in population: 0.191
Minimum age in population: 12.53125
Maximum age in population: 17.314453125
Average age in population: 15.612494140625
Median age in population: 15.7998046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 161
Genome diversity (% unique genomes):	 0.428
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 170
Syntactic diversity (% unique Push programs):	 0.364
Total error diversity:				 0.009
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.102
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 7623631
--- Timings ---
Current time: 1559583684229 milliseconds
Total Time:          33.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.2 seconds, 59.8%
Fitness Testing:      9.2 seconds, 27.2%
Report:               4.3 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -37                 | Program output: -37                
Correct output: -60                 | Program output: -60                
Correct output: -26                 | Program output: -18                
Correct output: -70                 | Program output: -70                
Correct output: -54                 | Program output:                    
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: -72                
Correct output: -76                 | Program output:                    
Correct output: -100                | Program output:                    
Correct output: 47                  | Program output: 47                 
Correct output: -23                 | Program output: -23                
Correct output: -65                 | Program output: -65                
Correct output: 90                  | Program output: 90                 
Correct output: -17                 | Program output: -17                
Correct output: 97                  | Program output: 97                 
Correct output: 9                   | Program output: 15                 
Correct output: 21                  | Program output: 91                 
Correct output: 3                   | Program output: 48                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 35                 
Correct output: 46                  | Program output: 70                 
Correct output: 32                  | Program output:                    
Correct output: 23                  | Program output: 24                 
Correct output: 17                  | Program output:                    
Correct output: 20                  | Program output:                    
Correct output: 0                   | Program output: 59                 
Correct output: 21                  | Program output: 36                 
Correct output: 10                  | Program output:                    
Correct output: 28                  | Program output:                    
Correct output: 13                  | Program output: 38                 
Correct output: 33                  | Program output: 55                 
Correct output: 12                  | Program output:                    
Correct output: 6                   | Program output: 51                 
Correct output: 26                  | Program output:                    
Correct output: 4                   | Program output:                    
Correct output: -2                  | Program output: -2                 
Correct output: -48                 | Program output: -48                
Correct output: 2                   | Program output:                    
Correct output: -86                 | Program output: -27                
Correct output: -67                 | Program output: -41                
Correct output: -23                 | Program output: -23                
Correct output: -78                 | Program output: -12                
Correct output: -67                 | Program output:                    
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -41                
Correct output: -85                 | Program output: -85                
Correct output: -38                 | Program output: -38                
Correct output: -96                 | Program output:                    
Correct output: -58                 | Program output: -58                
Correct output: -92                 | Program output: 93                 
Correct output: -81                 | Program output: -81                
Correct output: -59                 | Program output: -7                 
Correct output: -90                 | Program output: -70                
Correct output: -92                 | Program output: -92                
Correct output: -61                 | Program output: -61                
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: -41                
Correct output: -92                 | Program output:                    
Correct output: -36                 | Program output: -36                
Correct output: -94                 | Program output:                    
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: 75                 
Correct output: -63                 | Program output: 15                 
Correct output: -81                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -93                
Correct output: -90                 | Program output: -77                
Correct output: -29                 | Program output: -29                
Correct output: -61                 | Program output: -33                
Correct output: -79                 | Program output: 14                 
Correct output: -69                 | Program output: -32                
Correct output: -83                 | Program output: -20                
Correct output: -24                 | Program output:                    
Correct output: -66                 | Program output:                    
Correct output: -95                 | Program output: -3                 
Correct output: -100                | Program output: -17                
Correct output: -93                 | Program output: -52                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -14                 | Program output:                    
Correct output: -79                 | Program output: -73                
Correct output: -100                | Program output: -100               
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: -46                
Correct output: -8                  | Program output: 88                 
Correct output: -80                 | Program output: 68                 
Correct output: -86                 | Program output: -19                
Correct output: -96                 | Program output: 87                 
Correct output: -97                 | Program output: -97                
Correct output: -82                 | Program output: 14                 
Correct output: -48                 | Program output:                    
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (integer_empty integer_dup_times exec_swap (in3) (exec_dup (in1) in4) integer_dup_times exec_yankdup in2 exec_do*range (integer_yankdup) integer_yankdup boolean_flush boolean_empty print_integer exec_stackdepth integer_mult integer_dup_items integer_gte integer_swap exec_y () integer_pop boolean_frominteger exec_noop boolean_flush print_newline boolean_dup_times)
Lexicase best errors: [1 1 0 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 34
Percent parens: 0.176
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (integer_empty integer_dup_times exec_swap (in3) (exec_dup (in1) in4) integer_dup_times exec_yankdup in2 exec_do*range (integer_yankdup) integer_yankdup boolean_flush boolean_empty print_integer exec_stackdepth integer_mult integer_dup_items integer_gte integer_swap exec_y () integer_pop boolean_frominteger exec_noop boolean_flush print_newline boolean_dup_times)
Zero cases best errors: [1 1 0 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 34
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (10 38 199 576 939 6 316 758 100 726)
Population mean number of elite cases: 3.67
Count of perfect (error zero) individuals by case: (10 38 199 576 939 6 316 758 100 726)
Population mean number of perfect (error zero) cases: 3.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times})
Best program: (integer_empty integer_dup_times exec_swap (in3) (exec_dup (in1) in4) integer_dup_times exec_yankdup in2 exec_do*range (integer_yankdup) integer_yankdup boolean_flush boolean_empty print_integer exec_stackdepth integer_mult integer_dup_items integer_gte integer_swap exec_y () exec_noop boolean_flush print_newline boolean_dup_times)
Errors: [1 1 0 1 0 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 26
Size: 32
Percent parens: 0.188
--- Population Statistics ---
Average total errors in population: 6.332
Median total errors in population: 6
Error averages by case: (0.99 0.962 0.801 0.424 0.061 0.994 0.684 0.242 0.9 0.274)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.896
Average program size in population (points): 38.047
Average percent parens in population: 0.212
Minimum age in population: 13.53125
Maximum age in population: 18.841796875
Average age in population: 17.40179296875
Median age in population: 17.3720703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 200
Genome diversity (% unique genomes):	 0.439
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 413
Syntactic diversity (% unique Push programs):	 0.385
Total error diversity:				 0.007
Error (vector) diversity:			 0.046
Behavioral diversity:				 0.113
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 8364585
--- Timings ---
Current time: 1559583687469 milliseconds
Total Time:          37.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.1 seconds, 59.8%
Fitness Testing:     10.0 seconds, 27.1%
Report:               4.7 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -37                 | Program output: -37                
Correct output: -60                 | Program output: -60                
Correct output: -26                 | Program output: -18                
Correct output: -70                 | Program output: -70                
Correct output: -54                 | Program output: -54                
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: -72                
Correct output: -76                 | Program output:                    
Correct output: -100                | Program output:                    
Correct output: 47                  | Program output: 47                 
Correct output: -23                 | Program output: -23                
Correct output: -65                 | Program output: -65                
Correct output: 90                  | Program output: 90                 
Correct output: -17                 | Program output: -17                
Correct output: 97                  | Program output: 97                 
Correct output: 9                   | Program output: 15                 
Correct output: 21                  | Program output: 91                 
Correct output: 3                   | Program output: 48                 
Correct output: 1                   | Program output:                    
Correct output: 7                   | Program output: 35                 
Correct output: 46                  | Program output: 70                 
Correct output: 32                  | Program output:                    
Correct output: 23                  | Program output: 24                 
Correct output: 17                  | Program output:                    
Correct output: 20                  | Program output:                    
Correct output: 0                   | Program output: 59                 
Correct output: 21                  | Program output: 36                 
Correct output: 10                  | Program output:                    
Correct output: 28                  | Program output:                    
Correct output: 13                  | Program output: 38                 
Correct output: 33                  | Program output: 55                 
Correct output: 12                  | Program output:                    
Correct output: 6                   | Program output: 51                 
Correct output: 26                  | Program output:                    
Correct output: 4                   | Program output:                    
Correct output: -2                  | Program output: -2                 
Correct output: -48                 | Program output: -48                
Correct output: 2                   | Program output:                    
Correct output: -86                 | Program output: -27                
Correct output: -67                 | Program output: -41                
Correct output: -23                 | Program output: -23                
Correct output: -78                 | Program output: -12                
Correct output: -67                 | Program output:                    
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -41                
Correct output: -85                 | Program output: -85                
Correct output: -38                 | Program output: -38                
Correct output: -96                 | Program output:                    
Correct output: -58                 | Program output: -58                
Correct output: -92                 | Program output: 93                 
Correct output: -81                 | Program output: -81                
Correct output: -59                 | Program output: -7                 
Correct output: -90                 | Program output: -70                
Correct output: -92                 | Program output: -92                
Correct output: -61                 | Program output: -61                
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: -41                
Correct output: -92                 | Program output:                    
Correct output: -36                 | Program output: -36                
Correct output: -94                 | Program output:                    
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: 75                 
Correct output: -63                 | Program output: 35                 
Correct output: -81                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -93                
Correct output: -90                 | Program output: -77                
Correct output: -29                 | Program output: -29                
Correct output: -61                 | Program output: -33                
Correct output: -79                 | Program output: 30                 
Correct output: -69                 | Program output: -32                
Correct output: -83                 | Program output: -20                
Correct output: -24                 | Program output:                    
Correct output: -66                 | Program output: -66                
Correct output: -95                 | Program output: -3                 
Correct output: -100                | Program output: -17                
Correct output: -93                 | Program output: -52                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -14                 | Program output:                    
Correct output: -79                 | Program output: -73                
Correct output: -100                | Program output: -100               
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: -46                
Correct output: -8                  | Program output: 88                 
Correct output: -80                 | Program output: 68                 
Correct output: -86                 | Program output: -19                
Correct output: -96                 | Program output: 87                 
Correct output: -97                 | Program output: -97                
Correct output: -82                 | Program output: -7                 
Correct output: -48                 | Program output:                    
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_swap})
Lexicase best program: (integer_empty integer_dup_times exec_swap (in3) (exec_dup (in1) in4) integer_dup_times exec_yankdup in2 exec_do*range (integer_yankdup) integer_yankdup boolean_flush boolean_empty print_integer exec_stackdepth integer_mult integer_dup_items integer_gte integer_swap exec_y () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (print_integer exec_stackdepth integer_fromboolean integer_dup_items integer_gte) integer_swap))
Lexicase best errors: [0 1 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 42
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_swap})
Zero cases best program: (integer_empty integer_dup_times exec_swap (in3) (exec_dup (in1) in4) integer_dup_times exec_yankdup in2 exec_do*range (integer_yankdup) integer_yankdup boolean_flush boolean_empty print_integer exec_stackdepth integer_mult integer_dup_items integer_gte integer_swap exec_y () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (print_integer exec_stackdepth integer_fromboolean integer_dup_items integer_gte) integer_swap))
Zero cases best errors: [0 1 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 42
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (342 115 341 426 419 68 422 946 481 172)
Population mean number of elite cases: 3.73
Count of perfect (error zero) individuals by case: (342 115 341 426 419 68 422 946 481 172)
Population mean number of perfect (error zero) cases: 3.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_swap})
Best program: (integer_empty integer_dup_times exec_swap (in3) (exec_dup (in1) in4) integer_dup_times exec_yankdup in2 exec_do*range (integer_yankdup) integer_yankdup boolean_flush boolean_empty print_integer exec_stackdepth integer_mult integer_dup_items integer_gte integer_swap exec_y () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (print_integer exec_stackdepth integer_fromboolean integer_dup_items integer_gte) integer_swap))
Errors: [0 1 0 0 0 1 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 33
Size: 42
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 6.268
Median total errors in population: 7
Error averages by case: (0.658 0.885 0.659 0.574 0.581 0.932 0.578 0.054 0.519 0.828)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.375
Average program size in population (points): 38.292
Average percent parens in population: 0.205
Minimum age in population: 17.97265625
Maximum age in population: 20.484375
Average age in population: 19.21459375
Median age in population: 19.228515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 165
Genome diversity (% unique genomes):	 0.424
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 176
Syntactic diversity (% unique Push programs):	 0.384
Total error diversity:				 0.008
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.151
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 9209759
--- Timings ---
Current time: 1559583690833 milliseconds
Total Time:          40.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.1 seconds, 59.6%
Fitness Testing:     10.9 seconds, 27.1%
Report:               5.3 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -37                 | Program output: -37                
Correct output: -60                 | Program output: -60                
Correct output: -26                 | Program output: -18                
Correct output: -70                 | Program output: -70                
Correct output: -54                 | Program output: -54                
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: -72                
Correct output: -76                 | Program output: 22                 
Correct output: -100                | Program output: 57                 
Correct output: 47                  | Program output: 47                 
Correct output: -23                 | Program output: -23                
Correct output: -65                 | Program output: -65                
Correct output: 90                  | Program output: 90                 
Correct output: -17                 | Program output: -17                
Correct output: 97                  | Program output: 97                 
Correct output: 9                   | Program output: 15                 
Correct output: 21                  | Program output: 91                 
Correct output: 3                   | Program output: 48                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 35                 
Correct output: 46                  | Program output: 70                 
Correct output: 32                  | Program output: 32                 
Correct output: 23                  | Program output: 24                 
Correct output: 17                  | Program output: 17                 
Correct output: 20                  | Program output: 20                 
Correct output: 0                   | Program output: 59                 
Correct output: 21                  | Program output: 36                 
Correct output: 10                  | Program output: 51                 
Correct output: 28                  | Program output: 56                 
Correct output: 13                  | Program output: 38                 
Correct output: 33                  | Program output: 55                 
Correct output: 12                  | Program output: 46                 
Correct output: 6                   | Program output: 51                 
Correct output: 26                  | Program output: 41                 
Correct output: 4                   | Program output: 47                 
Correct output: -2                  | Program output: -2                 
Correct output: -48                 | Program output: -48                
Correct output: 2                   | Program output:                    
Correct output: -86                 | Program output: -27                
Correct output: -67                 | Program output: -41                
Correct output: -23                 | Program output: -23                
Correct output: -78                 | Program output: -12                
Correct output: -67                 | Program output: 18                 
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -41                
Correct output: -85                 | Program output: -85                
Correct output: -38                 | Program output: 97                 
Correct output: -96                 | Program output:                    
Correct output: -58                 | Program output: -58                
Correct output: -92                 | Program output: 93                 
Correct output: -81                 | Program output: -81                
Correct output: -59                 | Program output: -7                 
Correct output: -90                 | Program output: -70                
Correct output: -92                 | Program output: -92                
Correct output: -61                 | Program output: -61                
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: -41                
Correct output: -92                 | Program output: 2                  
Correct output: -36                 | Program output: -36                
Correct output: -94                 | Program output: 57                 
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: 75                 
Correct output: -63                 | Program output: 35                 
Correct output: -81                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -93                
Correct output: -90                 | Program output: -77                
Correct output: -29                 | Program output: -29                
Correct output: -61                 | Program output: -33                
Correct output: -79                 | Program output: 30                 
Correct output: -69                 | Program output: -32                
Correct output: -83                 | Program output: -20                
Correct output: -24                 | Program output:                    
Correct output: -66                 | Program output: -66                
Correct output: -95                 | Program output: -3                 
Correct output: -100                | Program output: -17                
Correct output: -93                 | Program output: -52                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -14                 | Program output:                    
Correct output: -79                 | Program output: -73                
Correct output: -100                | Program output: -100               
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: -46                
Correct output: -8                  | Program output: 88                 
Correct output: -80                 | Program output: 68                 
Correct output: -86                 | Program output: -19                
Correct output: -96                 | Program output: 87                 
Correct output: -97                 | Program output: -97                
Correct output: -82                 | Program output: -7                 
Correct output: -48                 | Program output: -44                
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (integer_empty integer_dup_times exec_swap (in3) (exec_dup (in1) in4) integer_dup_times exec_yankdup in2 exec_do*range (integer_yankdup) integer_yankdup boolean_flush boolean_empty print_integer exec_stackdepth integer_mult integer_dup_items integer_gte integer_swap exec_y () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (print_integer exec_stackdepth integer_fromboolean boolean_dup_times)))
Lexicase best errors: [0 0 0 0 1 0 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 40
Percent parens: 0.225
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (integer_empty integer_dup_times exec_swap (in3) (exec_dup (in1) in4) integer_dup_times exec_yankdup in2 exec_do*range (integer_yankdup) integer_yankdup boolean_flush boolean_empty print_integer exec_stackdepth integer_mult integer_dup_items integer_gte integer_swap exec_y () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (print_integer exec_stackdepth integer_fromboolean boolean_dup_times)))
Zero cases best errors: [0 0 0 0 1 0 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 40
Percent parens: 0.225
--- Lexicase Population Statistics ---
Count of elite individuals by case: (950 489 862 490 35 191 230 301 74 665)
Population mean number of elite cases: 4.29
Count of perfect (error zero) individuals by case: (950 489 862 490 35 191 230 301 74 665)
Population mean number of perfect (error zero) cases: 4.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth})
Best program: (integer_empty integer_dup_times exec_swap (in3) (exec_dup (in1) in4) integer_dup_times exec_yankdup in2 exec_do*range (integer_yankdup) integer_yankdup boolean_flush boolean_empty print_integer exec_stackdepth integer_mult integer_dup_items integer_gte integer_swap exec_y () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (print_integer exec_stackdepth)))
Errors: [0 0 0 0 1 0 1 1 1 0]
Total: 4
Mean: 0.4
Genome size: 29
Size: 38
Percent parens: 0.237
--- Population Statistics ---
Average total errors in population: 5.713
Median total errors in population: 5
Error averages by case: (0.05 0.511 0.138 0.51 0.965 0.809 0.77 0.699 0.926 0.335)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.41
Average program size in population (points): 41.486
Average percent parens in population: 0.218
Minimum age in population: 18.97265625
Maximum age in population: 22.3515625
Average age in population: 20.8830595703125
Median age in population: 20.918212890625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 201
Genome diversity (% unique genomes):	 0.48
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 235
Syntactic diversity (% unique Push programs):	 0.444
Total error diversity:				 0.007
Error (vector) diversity:			 0.041
Behavioral diversity:				 0.154
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 10101983
--- Timings ---
Current time: 1559583694226 milliseconds
Total Time:          43.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.0 seconds, 59.5%
Fitness Testing:     11.9 seconds, 27.1%
Report:               5.8 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -37                 | Program output: -37                
Correct output: -60                 | Program output: -60                
Correct output: -26                 | Program output: -18                
Correct output: -70                 | Program output: -70                
Correct output: -54                 | Program output: -54                
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: -72                
Correct output: -76                 | Program output: 22                 
Correct output: -100                | Program output: 57                 
Correct output: 47                  | Program output: 47                 
Correct output: -23                 | Program output: -23                
Correct output: -65                 | Program output: -65                
Correct output: 90                  | Program output: 90                 
Correct output: -17                 | Program output: -17                
Correct output: 97                  | Program output: 97                 
Correct output: 9                   | Program output: 15                 
Correct output: 21                  | Program output: 91                 
Correct output: 3                   | Program output: 48                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 35                 
Correct output: 46                  | Program output: 70                 
Correct output: 32                  | Program output: 32                 
Correct output: 23                  | Program output: 24                 
Correct output: 17                  | Program output: 17                 
Correct output: 20                  | Program output: 20                 
Correct output: 0                   | Program output: 59                 
Correct output: 21                  | Program output: 36                 
Correct output: 10                  | Program output: 51                 
Correct output: 28                  | Program output: 56                 
Correct output: 13                  | Program output: 38                 
Correct output: 33                  | Program output: 55                 
Correct output: 12                  | Program output: 46                 
Correct output: 6                   | Program output: 51                 
Correct output: 26                  | Program output: 41                 
Correct output: 4                   | Program output: 47                 
Correct output: -2                  | Program output: -2                 
Correct output: -48                 | Program output: -48                
Correct output: 2                   | Program output:                    
Correct output: -86                 | Program output: -27                
Correct output: -67                 | Program output: -41                
Correct output: -23                 | Program output: -23                
Correct output: -78                 | Program output: -12                
Correct output: -67                 | Program output: 18                 
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -41                
Correct output: -85                 | Program output: -85                
Correct output: -38                 | Program output: 97                 
Correct output: -96                 | Program output:                    
Correct output: -58                 | Program output: -58                
Correct output: -92                 | Program output: 93                 
Correct output: -81                 | Program output: -81                
Correct output: -59                 | Program output: -7                 
Correct output: -90                 | Program output: -70                
Correct output: -92                 | Program output: -92                
Correct output: -61                 | Program output: -61                
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: -41                
Correct output: -92                 | Program output: 2                  
Correct output: -36                 | Program output: -36                
Correct output: -94                 | Program output: 57                 
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: 75                 
Correct output: -63                 | Program output: 35                 
Correct output: -81                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -93                
Correct output: -90                 | Program output: -77                
Correct output: -29                 | Program output: -29                
Correct output: -61                 | Program output: -33                
Correct output: -79                 | Program output: 30                 
Correct output: -69                 | Program output: -32                
Correct output: -83                 | Program output: -20                
Correct output: -24                 | Program output:                    
Correct output: -66                 | Program output: -66                
Correct output: -95                 | Program output: -3                 
Correct output: -100                | Program output: -17                
Correct output: -93                 | Program output: -52                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -14                 | Program output:                    
Correct output: -79                 | Program output: -73                
Correct output: -100                | Program output: -100               
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: -46                
Correct output: -8                  | Program output: 88                 
Correct output: -80                 | Program output: 68                 
Correct output: -86                 | Program output: -19                
Correct output: -96                 | Program output: 87                 
Correct output: -97                 | Program output: -97                
Correct output: -82                 | Program output: -7                 
Correct output: -48                 | Program output: -44                
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 2, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (integer_empty integer_dup_times exec_swap (in3) (exec_dup (in1) in4) integer_dup_times exec_yankdup in2 exec_do*range (integer_yankdup) integer_yankdup boolean_flush boolean_empty print_integer exec_stackdepth integer_mult integer_dup_items integer_gte integer_swap integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger exec_noop boolean_flush print_newline boolean_dup_times)))
Lexicase best errors: [0 1 1 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 39
Percent parens: 0.205
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 2, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (integer_empty integer_dup_times exec_swap (in3) (exec_dup (in1) in4) integer_dup_times exec_yankdup in2 exec_do*range (integer_yankdup) integer_yankdup boolean_flush boolean_empty print_integer exec_stackdepth integer_mult integer_dup_items integer_gte integer_swap integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger exec_noop boolean_flush print_newline boolean_dup_times)))
Zero cases best errors: [0 1 1 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 39
Percent parens: 0.205
--- Lexicase Population Statistics ---
Count of elite individuals by case: (562 109 8 357 56 684 9 583 365 111)
Population mean number of elite cases: 2.84
Count of perfect (error zero) individuals by case: (562 109 8 357 56 684 9 583 365 111)
Population mean number of perfect (error zero) cases: 2.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_times})
Best program: (integer_empty integer_dup_times exec_swap (in3) (exec_dup (in1) in4) integer_dup_times exec_yankdup in2 exec_do*range (integer_yankdup) integer_yankdup boolean_flush boolean_empty print_integer exec_stackdepth integer_mult integer_dup_items integer_gte integer_swap exec_y () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (print_integer exec_stackdepth integer_fromboolean boolean_dup_times)))
Errors: [0 1 1 0 1 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 31
Size: 40
Percent parens: 0.225
--- Population Statistics ---
Average total errors in population: 7.156
Median total errors in population: 7
Error averages by case: (0.438 0.891 0.992 0.643 0.944 0.316 0.991 0.417 0.635 0.889)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.091
Average program size in population (points): 41.398
Average percent parens in population: 0.224
Minimum age in population: 20.5439453125
Maximum age in population: 23.97607421875
Average age in population: 22.74143249511719
Median age in population: 22.82916259765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 123
Genome diversity (% unique genomes):	 0.517
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 127
Syntactic diversity (% unique Push programs):	 0.479
Total error diversity:				 0.006
Error (vector) diversity:			 0.041
Behavioral diversity:				 0.163
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 10917800
--- Timings ---
Current time: 1559583697583 milliseconds
Total Time:          47.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.0 seconds, 59.3%
Fitness Testing:     12.8 seconds, 27.1%
Report:               6.3 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 510
Test mean error for best: 0.51000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -37                 | Program output: -37                
Correct output: -60                 | Program output: -60                
Correct output: -26                 | Program output: -26                
Correct output: -70                 | Program output: -70                
Correct output: -54                 | Program output: 15                 
Correct output: -79                 | Program output: -29                
Correct output: -72                 | Program output: -13                
Correct output: -76                 | Program output: 22                 
Correct output: -100                | Program output: 57                 
Correct output: 47                  | Program output: 47                 
Correct output: -23                 | Program output: -23                
Correct output: -65                 | Program output: -65                
Correct output: 90                  | Program output: 90                 
Correct output: -17                 | Program output: -17                
Correct output: 97                  | Program output: 97                 
Correct output: 9                   | Program output: 15                 
Correct output: 21                  | Program output: 21                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output:                    
Correct output: 7                   | Program output: 7                  
Correct output: 46                  | Program output: 70                 
Correct output: 32                  | Program output: 32                 
Correct output: 23                  | Program output: 24                 
Correct output: 17                  | Program output: 87                 
Correct output: 20                  | Program output: 20                 
Correct output: 0                   | Program output: 0                  
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output:                    
Correct output: 28                  | Program output: 28                 
Correct output: 13                  | Program output: 38                 
Correct output: 33                  | Program output: 55                 
Correct output: 12                  | Program output: 52                 
Correct output: 6                   | Program output: 51                 
Correct output: 26                  | Program output: 82                 
Correct output: 4                   | Program output: 59                 
Correct output: -2                  | Program output: -2                 
Correct output: -48                 | Program output: -48                
Correct output: 2                   | Program output: 2                  
Correct output: -86                 | Program output: -27                
Correct output: -67                 | Program output: -19                
Correct output: -23                 | Program output: -5                 
Correct output: -78                 | Program output: -42                
Correct output: -67                 | Program output: 30                 
Correct output: -100                | Program output: -37                
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -85                 | Program output: -70                
Correct output: -38                 | Program output: 28                 
Correct output: -96                 | Program output: 8                  
Correct output: -58                 | Program output: -58                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -4                 
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -70                
Correct output: -92                 | Program output: -54                
Correct output: -61                 | Program output: -61                
Correct output: -85                 | Program output: -25                
Correct output: -41                 | Program output: -37                
Correct output: -92                 | Program output:                    
Correct output: -36                 | Program output: -15                
Correct output: -94                 | Program output: 57                 
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -86                
Correct output: -63                 | Program output: -10                
Correct output: -81                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -79                 | Program output: -45                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -90                
Correct output: -29                 | Program output: -29                
Correct output: -61                 | Program output: -49                
Correct output: -79                 | Program output: -79                
Correct output: -69                 | Program output: -69                
Correct output: -83                 | Program output: -83                
Correct output: -24                 | Program output: 9                  
Correct output: -66                 | Program output: 15                 
Correct output: -95                 | Program output: -91                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -80                
Correct output: -71                 | Program output: -15                
Correct output: -18                 | Program output: -18                
Correct output: -14                 | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -14                
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -15                
Correct output: -70                 | Program output: -70                
Correct output: -8                  | Program output: -8                 
Correct output: -80                 | Program output: -80                
Correct output: -86                 | Program output: -19                
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -97                
Correct output: -82                 | Program output: -52                
Correct output: -48                 | Program output: 95                 
Correct output: -91                 | Program output: -10                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction exec_k} {:close 2, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_dup_times})
Lexicase best program: (integer_empty integer_dup_times exec_swap () (in3) exec_dup (integer_empty) integer_dup_times exec_swap (in3) (exec_do*range (in1) in4) integer_dup_times exec_yankdup in2 exec_do*range (integer_min) integer_yankdup boolean_flush boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop exec_dup_times (exec_k () (exec_k (exec_yankdup) () boolean_frominteger exec_noop boolean_flush print_newline boolean_dup_times)))
Lexicase best errors: [0 1 1 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 50
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction exec_k} {:close 2, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_dup_times})
Zero cases best program: (integer_empty integer_dup_times exec_swap () (in3) exec_dup (integer_empty) integer_dup_times exec_swap (in3) (exec_do*range (in1) in4) integer_dup_times exec_yankdup in2 exec_do*range (integer_min) integer_yankdup boolean_flush boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop exec_dup_times (exec_k () (exec_k (exec_yankdup) () boolean_frominteger exec_noop boolean_flush print_newline boolean_dup_times)))
Zero cases best errors: [0 1 1 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 50
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (434 68 96 248 111 144 180 273 70 497)
Population mean number of elite cases: 2.12
Count of perfect (error zero) individuals by case: (434 68 96 248 111 144 180 273 70 497)
Population mean number of perfect (error zero) cases: 2.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times})
Best program: (integer_empty integer_dup_times exec_swap (in3) (exec_swap (in3) (exec_dup (integer_empty) integer_dup_times) exec_swap (in3) (exec_do*range (in1) in4) integer_dup_times) exec_yankdup in2 exec_do*range (integer_min) integer_yankdup boolean_flush boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger exec_noop boolean_flush print_newline boolean_dup_times)))
Errors: [1 0 1 1 0 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 37
Size: 52
Percent parens: 0.288
--- Population Statistics ---
Average total errors in population: 7.879
Median total errors in population: 9
Error averages by case: (0.566 0.932 0.904 0.752 0.889 0.856 0.82 0.727 0.93 0.503)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.022
Average program size in population (points): 41.504
Average percent parens in population: 0.226
Minimum age in population: 22.18994140625
Maximum age in population: 25.7840576171875
Average age in population: 24.26248724365234
Median age in population: 24.3477783203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 58
Genome diversity (% unique genomes):	 0.511
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.484
Total error diversity:				 0.007
Error (vector) diversity:			 0.042
Behavioral diversity:				 0.172
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 11804071
--- Timings ---
Current time: 1559583700984 milliseconds
Total Time:          50.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.9 seconds, 59.2%
Fitness Testing:     13.7 seconds, 27.1%
Report:               6.8 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -37                 | Program output: -37                
Correct output: -60                 | Program output: -60                
Correct output: -26                 | Program output: -26                
Correct output: -70                 | Program output: -70                
Correct output: -54                 | Program output: -54                
Correct output: -79                 | Program output: -29                
Correct output: -72                 | Program output: -13                
Correct output: -76                 | Program output: -76                
Correct output: -100                | Program output: -100               
Correct output: 47                  | Program output: 47                 
Correct output: -23                 | Program output: -23                
Correct output: -65                 | Program output: -65                
Correct output: 90                  | Program output: 90                 
Correct output: -17                 | Program output: -17                
Correct output: 97                  | Program output: 97                 
Correct output: 9                   | Program output:                    
Correct output: 21                  | Program output: 71                 
Correct output: 3                   | Program output:                    
Correct output: 1                   | Program output:                    
Correct output: 7                   | Program output: 70                 
Correct output: 46                  | Program output: 46                 
Correct output: 32                  | Program output: 63                 
Correct output: 23                  | Program output: 39                 
Correct output: 17                  | Program output: 24                 
Correct output: 20                  | Program output: 81                 
Correct output: 0                   | Program output: 42                 
Correct output: 21                  | Program output: 41                 
Correct output: 10                  | Program output: 10                 
Correct output: 28                  | Program output: 30                 
Correct output: 13                  | Program output: 66                 
Correct output: 33                  | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 6                   | Program output: 7723               
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: -2                  | Program output: 99                 
Correct output: -48                 | Program output: 48                 
Correct output: 2                   | Program output: 33                 
Correct output: -86                 | Program output: 75                 
Correct output: -67                 | Program output: -19                
Correct output: -23                 | Program output: -5                 
Correct output: -78                 | Program output: -42                
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -76                
Correct output: -76                 | Program output: 60                 
Correct output: -73                 | Program output: -73                
Correct output: -85                 | Program output: -70                
Correct output: -38                 | Program output: 28                 
Correct output: -96                 | Program output: -96                
Correct output: -58                 | Program output: 41                 
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -4                 
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -70                
Correct output: -92                 | Program output: -69                
Correct output: -61                 | Program output: 45                 
Correct output: -85                 | Program output: -25                
Correct output: -41                 | Program output: -41                
Correct output: -92                 | Program output:                    
Correct output: -36                 | Program output: -15                
Correct output: -94                 | Program output: -94                
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: 57                 
Correct output: -63                 | Program output: -10                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: 93                 
Correct output: -79                 | Program output: -45                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -90                
Correct output: -29                 | Program output: 36                 
Correct output: -61                 | Program output: -49                
Correct output: -79                 | Program output:                    
Correct output: -69                 | Program output: -69                
Correct output: -83                 | Program output: -83                
Correct output: -24                 | Program output:                    
Correct output: -66                 | Program output: -66                
Correct output: -95                 | Program output: -91                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -93                
Correct output: -71                 | Program output: -15                
Correct output: -18                 | Program output: 84                 
Correct output: -14                 | Program output:                    
Correct output: -79                 | Program output: -73                
Correct output: -100                | Program output: -14                
Correct output: -60                 | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: -70                
Correct output: -8                  | Program output: 38                 
Correct output: -80                 | Program output: -80                
Correct output: -86                 | Program output: 4                  
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: 53                 
Correct output: -82                 | Program output: -52                
Correct output: -48                 | Program output: -48                
Correct output: -91                 | Program output: -10                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (integer_empty integer_dup_times exec_swap (in3) (exec_dup (integer_empty) integer_dup_times) exec_swap (in3 exec_do*range (in1) in4) (integer_dup_times) exec_yankdup in2 exec_do*range (integer_min) integer_yankdup boolean_flush boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop exec_dup_times (exec_k (exec_k (exec_yankdup) (boolean_frominteger exec_noop boolean_flush print_newline integer_mod exec_k (exec_yankdup) (boolean_frominteger exec_noop boolean_flush print_newline boolean_dup_times))) ()))
Lexicase best errors: [0 1 0 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 59
Percent parens: 0.288
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (integer_empty integer_dup_times exec_swap (in3) (exec_dup (integer_empty) integer_dup_times) exec_swap (in3 exec_do*range (in1) in4) (integer_dup_times) exec_yankdup in2 exec_do*range (integer_min) integer_yankdup boolean_flush boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop exec_dup_times (exec_k (exec_k (exec_yankdup) (boolean_frominteger exec_noop boolean_flush print_newline integer_mod exec_k (exec_yankdup) (boolean_frominteger exec_noop boolean_flush print_newline boolean_dup_times))) ()))
Zero cases best errors: [0 1 0 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 59
Percent parens: 0.288
--- Lexicase Population Statistics ---
Count of elite individuals by case: (375 133 172 214 4 8 834 479 322 809)
Population mean number of elite cases: 3.35
Count of perfect (error zero) individuals by case: (375 133 172 214 4 8 834 479 322 809)
Population mean number of perfect (error zero) cases: 3.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times})
Best program: (integer_empty integer_dup_times exec_swap (in3) (exec_dup (integer_empty) integer_dup_times) exec_swap (in3 exec_do*range (in1) in4) (integer_dup_times) exec_yankdup in2 exec_do*range (integer_min) integer_yankdup boolean_flush boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop exec_dup_times (exec_k (exec_k (exec_yankdup) (boolean_frominteger exec_noop boolean_flush print_newline boolean_dup_times)) ()))
Errors: [0 1 0 0 1 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 35
Size: 50
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 6.65
Median total errors in population: 7
Error averages by case: (0.625 0.867 0.828 0.786 0.996 0.992 0.166 0.521 0.678 0.191)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.722
Average program size in population (points): 46.15
Average percent parens in population: 0.266
Minimum age in population: 23.7841796875
Maximum age in population: 27.444091796875
Average age in population: 25.4840725402832
Median age in population: 25.517578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 99
Genome diversity (% unique genomes):	 0.507
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 102
Syntactic diversity (% unique Push programs):	 0.478
Total error diversity:				 0.007
Error (vector) diversity:			 0.063
Behavioral diversity:				 0.206
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 12707286
--- Timings ---
Current time: 1559583704393 milliseconds
Total Time:          53.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.9 seconds, 59.1%
Fitness Testing:     14.6 seconds, 27.1%
Report:               7.3 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 680
Test mean error for best: 0.68000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -37                 | Program output: -37                
Correct output: -60                 | Program output: -60                
Correct output: -26                 | Program output: -18                
Correct output: -70                 | Program output: -70                
Correct output: -54                 | Program output: -54                
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: -72                
Correct output: -76                 | Program output:                    
Correct output: -100                | Program output: -100               
Correct output: 47                  | Program output:                    
Correct output: -23                 | Program output: -23                
Correct output: -65                 | Program output: -65                
Correct output: 90                  | Program output: 90                 
Correct output: -17                 | Program output: -17                
Correct output: 97                  | Program output: 97                 
Correct output: 9                   | Program output: 80                 
Correct output: 21                  | Program output: 71                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 55                 
Correct output: 7                   | Program output:                    
Correct output: 46                  | Program output: 46                 
Correct output: 32                  | Program output: 63                 
Correct output: 23                  | Program output: 75                 
Correct output: 17                  | Program output: 24                 
Correct output: 20                  | Program output: 81                 
Correct output: 0                   | Program output: 42                 
Correct output: 21                  | Program output: 41                 
Correct output: 10                  | Program output:                    
Correct output: 28                  | Program output: 30                 
Correct output: 13                  | Program output: 66                 
Correct output: 33                  | Program output: 28                 
Correct output: 12                  | Program output: 12                 
Correct output: 6                   | Program output: 23                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: -2                  | Program output: 99                 
Correct output: -48                 | Program output: 48                 
Correct output: 2                   | Program output:                    
Correct output: -86                 | Program output: 75                 
Correct output: -67                 | Program output: -19                
Correct output: -23                 | Program output: 2                  
Correct output: -78                 | Program output: -12                
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -76                
Correct output: -76                 | Program output: 60                 
Correct output: -73                 | Program output: -73                
Correct output: -85                 | Program output: -85                
Correct output: -38                 | Program output: 71                 
Correct output: -96                 | Program output:                    
Correct output: -58                 | Program output: 41                 
Correct output: -92                 | Program output: 9                  
Correct output: -81                 | Program output: -81                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -70                
Correct output: -92                 | Program output: -69                
Correct output: -61                 | Program output: 45                 
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: -41                
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: 45                 
Correct output: -94                 | Program output: -94                
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: 57                 
Correct output: -63                 | Program output: 15                 
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: 93                 
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: 76                 
Correct output: -29                 | Program output: 36                 
Correct output: -61                 | Program output: -49                
Correct output: -79                 | Program output: 30                 
Correct output: -69                 | Program output: -18                
Correct output: -83                 | Program output: 73                 
Correct output: -24                 | Program output:                    
Correct output: -66                 | Program output: -66                
Correct output: -95                 | Program output: -3                 
Correct output: -100                | Program output: 40                 
Correct output: -93                 | Program output: -93                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 84                 
Correct output: -14                 | Program output:                    
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -100               
Correct output: -60                 | Program output: 52                 
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: -46                
Correct output: -8                  | Program output: 38                 
Correct output: -80                 | Program output: 59                 
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: 99                 
Correct output: -97                 | Program output: 53                 
Correct output: -82                 | Program output: -52                
Correct output: -48                 | Program output: -48                
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 2, :instruction integer_swap} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (integer_empty integer_dup_times exec_swap (in3 exec_do*range (in1) in4) (integer_dup_times) exec_yankdup in2 exec_do*range (integer_yankdup) integer_yankdup boolean_flush boolean_empty print_integer exec_stackdepth integer_mult integer_dup_items integer_gte integer_swap exec_y () integer_pop exec_dup_times (integer_pop) exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger exec_noop boolean_flush print_newline boolean_dup_times)))
Lexicase best errors: [1 0 0 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 44
Percent parens: 0.227
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 2, :instruction integer_swap} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (integer_empty integer_dup_times exec_swap (in3 exec_do*range (in1) in4) (integer_dup_times) exec_yankdup in2 exec_do*range (integer_yankdup) integer_yankdup boolean_flush boolean_empty print_integer exec_stackdepth integer_mult integer_dup_items integer_gte integer_swap exec_y () integer_pop exec_dup_times (integer_pop) exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger exec_noop boolean_flush print_newline boolean_dup_times)))
Zero cases best errors: [1 0 0 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 44
Percent parens: 0.227
--- Lexicase Population Statistics ---
Count of elite individuals by case: (225 934 658 873 934 117 8 450 239 308)
Population mean number of elite cases: 4.75
Count of perfect (error zero) individuals by case: (225 934 658 873 934 117 8 450 239 308)
Population mean number of perfect (error zero) cases: 4.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times})
Best program: (integer_empty integer_dup_times exec_swap (in3 exec_do*range (in1) in4) (integer_dup_times) exec_yankdup in2 exec_do*range (integer_yankdup) integer_yankdup boolean_flush boolean_empty print_integer exec_stackdepth integer_add integer_dup_items integer_gte integer_swap exec_y () integer_pop exec_dup_times (boolean_flush) boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger integer_dup boolean_flush print_newline boolean_dup_times)))
Errors: [1 0 0 0 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 41
Size: 53
Percent parens: 0.226
--- Population Statistics ---
Average total errors in population: 5.254
Median total errors in population: 5
Error averages by case: (0.775 0.066 0.342 0.127 0.066 0.883 0.992 0.55 0.761 0.692)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.092
Average program size in population (points): 44.527
Average percent parens in population: 0.254
Minimum age in population: 25.4072265625
Maximum age in population: 28.62983703613281
Average age in population: 27.21617678833008
Median age in population: 27.33755493164062
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 99
Genome diversity (% unique genomes):	 0.446
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 103
Syntactic diversity (% unique Push programs):	 0.413
Total error diversity:				 0.008
Error (vector) diversity:			 0.054
Behavioral diversity:				 0.177
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 13572806
--- Timings ---
Current time: 1559583707786 milliseconds
Total Time:          57.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.9 seconds, 59.0%
Fitness Testing:     15.6 seconds, 27.2%
Report:               7.8 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output:                    
Correct output: -37                 | Program output: -37                
Correct output: -60                 | Program output: -60                
Correct output: -26                 | Program output: -26                
Correct output: -70                 | Program output: -70                
Correct output: -54                 | Program output: -54                
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: -72                
Correct output: -76                 | Program output: -76                
Correct output: -100                | Program output:                    
Correct output: 47                  | Program output:                    
Correct output: -23                 | Program output: -23                
Correct output: -65                 | Program output: -65                
Correct output: 90                  | Program output:                    
Correct output: -17                 | Program output: -17                
Correct output: 97                  | Program output:                    
Correct output: 9                   | Program output:                    
Correct output: 21                  | Program output: 71                 
Correct output: 3                   | Program output: 48                 
Correct output: 1                   | Program output:                    
Correct output: 7                   | Program output: 70                 
Correct output: 46                  | Program output:                    
Correct output: 32                  | Program output:                    
Correct output: 23                  | Program output:                    
Correct output: 17                  | Program output:                    
Correct output: 20                  | Program output:                    
Correct output: 0                   | Program output: 0                  
Correct output: 21                  | Program output: 41                 
Correct output: 10                  | Program output: 10                 
Correct output: 28                  | Program output:                    
Correct output: 13                  | Program output:                    
Correct output: 33                  | Program output:                    
Correct output: 12                  | Program output:                    
Correct output: 6                   | Program output:                    
Correct output: 26                  | Program output:                    
Correct output: 4                   | Program output:                    
Correct output: -2                  | Program output: -2                 
Correct output: -48                 | Program output: -48                
Correct output: 2                   | Program output:                    
Correct output: -86                 | Program output: -27                
Correct output: -67                 | Program output: -41                
Correct output: -23                 | Program output: -23                
Correct output: -78                 | Program output: -12                
Correct output: -67                 | Program output:                    
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -41                
Correct output: -85                 | Program output: -85                
Correct output: -38                 | Program output: -38                
Correct output: -96                 | Program output:                    
Correct output: -58                 | Program output: -58                
Correct output: -92                 | Program output:                    
Correct output: -81                 | Program output: -81                
Correct output: -59                 | Program output: -7                 
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -92                
Correct output: -61                 | Program output: -61                
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: -41                
Correct output: -92                 | Program output:                    
Correct output: -36                 | Program output: -36                
Correct output: -94                 | Program output:                    
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -86                
Correct output: -63                 | Program output: 35                 
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -99                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -93                
Correct output: -90                 | Program output: -77                
Correct output: -29                 | Program output: -29                
Correct output: -61                 | Program output: -33                
Correct output: -79                 | Program output: 30                 
Correct output: -69                 | Program output: -32                
Correct output: -83                 | Program output: -20                
Correct output: -24                 | Program output:                    
Correct output: -66                 | Program output:                    
Correct output: -95                 | Program output: -18                
Correct output: -100                | Program output: -17                
Correct output: -93                 | Program output: -93                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -14                 | Program output: 12                 
Correct output: -79                 | Program output: -73                
Correct output: -100                | Program output: -100               
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: -46                
Correct output: -8                  | Program output: -8                 
Correct output: -80                 | Program output: 68                 
Correct output: -86                 | Program output: -19                
Correct output: -96                 | Program output: 87                 
Correct output: -97                 | Program output: -97                
Correct output: -82                 | Program output: -7                 
Correct output: -48                 | Program output:                    
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (integer_empty integer_dup_times exec_swap (in3) (exec_dup (in1) in4) integer_dup_times exec_yankdup in2 exec_do*range (integer_min) integer_yankdup boolean_flush boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop exec_dup_times (exec_k (exec_k (exec_yankdup) (boolean_frominteger exec_noop boolean_flush print_newline boolean_dup_times)) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 42
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (integer_empty integer_dup_times exec_swap (in3) (exec_dup (in1) in4) integer_dup_times exec_yankdup in2 exec_do*range (integer_min) integer_yankdup boolean_flush boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop exec_dup_times (exec_k (exec_k (exec_yankdup) (boolean_frominteger exec_noop boolean_flush print_newline boolean_dup_times)) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 42
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (126 557 334 838 399 380 227 129 17 933)
Population mean number of elite cases: 3.94
Count of perfect (error zero) individuals by case: (126 557 334 838 399 380 227 129 17 933)
Population mean number of perfect (error zero) cases: 3.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction integer_add})
Best program: (integer_empty integer_dup_times exec_swap (in3) (exec_dup (in1) in4) integer_dup_times exec_yankdup in2 exec_do*range (integer_min) integer_yankdup boolean_flush boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop exec_dup_times (exec_k (exec_k (exec_yankdup) (boolean_frominteger exec_noop boolean_flush print_newline integer_add)) ()))
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 30
Size: 42
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 6.06
Median total errors in population: 7
Error averages by case: (0.874 0.443 0.666 0.162 0.601 0.62 0.773 0.871 0.983 0.067)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.76
Average program size in population (points): 44.357
Average percent parens in population: 0.259
Minimum age in population: 27.65435791015625
Maximum age in population: 30.40980529785156
Average age in population: 28.92167308044434
Median age in population: 29.03708267211914
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 100
Genome diversity (% unique genomes):	 0.448
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 101
Syntactic diversity (% unique Push programs):	 0.424
Total error diversity:				 0.01
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.174
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 14337411
--- Timings ---
Current time: 1559583711144 milliseconds
Total Time:          60.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.8 seconds, 59.1%
Fitness Testing:     16.4 seconds, 27.1%
Report:               8.3 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -37                 | Program output: -37                
Correct output: -60                 | Program output: -60                
Correct output: -26                 | Program output: -26                
Correct output: -70                 | Program output: -70                
Correct output: -54                 | Program output: 15                 
Correct output: -79                 | Program output: -29                
Correct output: -72                 | Program output: -13                
Correct output: -76                 | Program output: 22                 
Correct output: -100                | Program output: 57                 
Correct output: 47                  | Program output: 70                 
Correct output: -23                 | Program output: -23                
Correct output: -65                 | Program output: -65                
Correct output: 90                  | Program output: 90                 
Correct output: -17                 | Program output: -17                
Correct output: 97                  | Program output: 97                 
Correct output: 9                   | Program output: 80                 
Correct output: 21                  | Program output: 21                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 3                  
Correct output: 7                   | Program output: 7                  
Correct output: 46                  | Program output: 99                 
Correct output: 32                  | Program output: 90                 
Correct output: 23                  | Program output: 75                 
Correct output: 17                  | Program output: 85                 
Correct output: 20                  | Program output: 68                 
Correct output: 0                   | Program output: 42                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 12                 
Correct output: 28                  | Program output: 28                 
Correct output: 13                  | Program output: 92                 
Correct output: 33                  | Program output: 73                 
Correct output: 12                  | Program output: 47                 
Correct output: 6                   | Program output: 77                 
Correct output: 26                  | Program output: 46                 
Correct output: 4                   | Program output: 29                 
Correct output: -2                  | Program output: 99                 
Correct output: -48                 | Program output: 48                 
Correct output: 2                   | Program output: 65                 
Correct output: -86                 | Program output: 75                 
Correct output: -67                 | Program output: -19                
Correct output: -23                 | Program output: -5                 
Correct output: -78                 | Program output: -42                
Correct output: -67                 | Program output: 29                 
Correct output: -100                | Program output: -37                
Correct output: -76                 | Program output: 60                 
Correct output: -73                 | Program output: -73                
Correct output: -85                 | Program output: -70                
Correct output: -38                 | Program output: 28                 
Correct output: -96                 | Program output: 38                 
Correct output: -58                 | Program output: 41                 
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -4                 
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -70                
Correct output: -92                 | Program output: -54                
Correct output: -61                 | Program output: 45                 
Correct output: -85                 | Program output: -25                
Correct output: -41                 | Program output: -37                
Correct output: -92                 | Program output: 9                  
Correct output: -36                 | Program output: -15                
Correct output: -94                 | Program output: 87                 
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: 57                 
Correct output: -63                 | Program output: -10                
Correct output: -81                 | Program output: -79                
Correct output: -99                 | Program output: 93                 
Correct output: -79                 | Program output: -45                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -90                
Correct output: -29                 | Program output: 36                 
Correct output: -61                 | Program output: -49                
Correct output: -79                 | Program output: -79                
Correct output: -69                 | Program output: -69                
Correct output: -83                 | Program output: -83                
Correct output: -24                 | Program output: 64                 
Correct output: -66                 | Program output: 57                 
Correct output: -95                 | Program output: -91                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -80                
Correct output: -71                 | Program output: -15                
Correct output: -18                 | Program output: 84                 
Correct output: -14                 | Program output: 100                
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -14                
Correct output: -60                 | Program output: 52                 
Correct output: -62                 | Program output: -15                
Correct output: -70                 | Program output: -70                
Correct output: -8                  | Program output: 38                 
Correct output: -80                 | Program output: -80                
Correct output: -86                 | Program output: 4                  
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: 53                 
Correct output: -82                 | Program output: -52                
Correct output: -48                 | Program output: 97                 
Correct output: -91                 | Program output: -10                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (integer_empty integer_dup_times exec_swap (in3) (exec_dup (in1) in4) integer_dup_times exec_yankdup in2 exec_do*range (integer_min) integer_yankdup boolean_flush boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop integer_dup_items integer_gte in4 exec_when () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger integer_dup boolean_flush print_newline boolean_dup_times)))
Lexicase best errors: [1 0 0 1 0 0 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 46
Percent parens: 0.239
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (integer_empty integer_dup_times exec_swap (in3) (exec_dup (in1) in4) integer_dup_times exec_yankdup in2 exec_do*range (integer_min) integer_yankdup boolean_flush boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop integer_dup_items integer_gte in4 exec_when () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger integer_dup boolean_flush print_newline boolean_dup_times)))
Zero cases best errors: [1 0 0 1 0 0 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 46
Percent parens: 0.239
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 541 169 1 361 893 951 23 703 1)
Population mean number of elite cases: 3.65
Count of perfect (error zero) individuals by case: (4 541 169 1 361 893 951 23 703 1)
Population mean number of perfect (error zero) cases: 3.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction 12} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times})
Best program: (integer_empty integer_dup_times exec_k (in3) (exec_dup (exec_swap (in3) (exec_dup (in1) in4) integer_dup_times) exec_yankdup in2) exec_do*range (12) integer_yankdup boolean_flush boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop exec_dup_times (exec_k (exec_k (exec_yankdup) (boolean_frominteger exec_noop boolean_flush print_newline boolean_dup_times)) ()))
Errors: [0 0 1 0 1 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 33
Size: 48
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 6.353
Median total errors in population: 6
Error averages by case: (0.996 0.459 0.831 0.999 0.639 0.107 0.049 0.977 0.297 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.074
Average program size in population (points): 41.728
Average percent parens in population: 0.255
Minimum age in population: 28.65435791015625
Maximum age in population: 31.3670768737793
Average age in population: 30.14511289215088
Median age in population: 30.1774787902832
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 202
Genome diversity (% unique genomes):	 0.402
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 230
Syntactic diversity (% unique Push programs):	 0.364
Total error diversity:				 0.007
Error (vector) diversity:			 0.04
Behavioral diversity:				 0.147
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 15243307
--- Timings ---
Current time: 1559583714573 milliseconds
Total Time:          64.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.8 seconds, 58.9%
Fitness Testing:     17.4 seconds, 27.1%
Report:               8.8 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 473
Test mean error for best: 0.47300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -37                 | Program output: -37                
Correct output: -60                 | Program output: -60                
Correct output: -26                 | Program output: -26                
Correct output: -70                 | Program output: -70                
Correct output: -54                 | Program output:                    
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: -72                
Correct output: -76                 | Program output: -76                
Correct output: -100                | Program output: -100               
Correct output: 47                  | Program output: 47                 
Correct output: -23                 | Program output: -23                
Correct output: -65                 | Program output: -65                
Correct output: 90                  | Program output: 90                 
Correct output: -17                 | Program output: -17                
Correct output: 97                  | Program output: 97                 
Correct output: 9                   | Program output: 15                 
Correct output: 21                  | Program output: 48                 
Correct output: 3                   | Program output: 9                  
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 61                 
Correct output: 46                  | Program output: 46                 
Correct output: 32                  | Program output: 32                 
Correct output: 23                  | Program output: 24                 
Correct output: 17                  | Program output: 24                 
Correct output: 20                  | Program output: 81                 
Correct output: 0                   | Program output: 0                  
Correct output: 21                  | Program output: 41                 
Correct output: 10                  | Program output: 10                 
Correct output: 28                  | Program output: 30                 
Correct output: 13                  | Program output: 38                 
Correct output: 33                  | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 6                   | Program output: 23                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: -2                  | Program output: -2                 
Correct output: -48                 | Program output: -48                
Correct output: 2                   | Program output:                    
Correct output: -86                 | Program output: -27                
Correct output: -67                 | Program output: -41                
Correct output: -23                 | Program output: -23                
Correct output: -78                 | Program output: -12                
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output:                    
Correct output: -85                 | Program output: -85                
Correct output: -38                 | Program output: 71                 
Correct output: -96                 | Program output:                    
Correct output: -58                 | Program output: -58                
Correct output: -92                 | Program output:                    
Correct output: -81                 | Program output: -81                
Correct output: -59                 | Program output: -7                 
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -92                
Correct output: -61                 | Program output: -61                
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: -41                
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -94                 | Program output: -94                
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -86                
Correct output: -63                 | Program output: 15                 
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -99                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -93                
Correct output: -90                 | Program output: -77                
Correct output: -29                 | Program output: -29                
Correct output: -61                 | Program output: -33                
Correct output: -79                 | Program output: 30                 
Correct output: -69                 | Program output: -32                
Correct output: -83                 | Program output: -20                
Correct output: -24                 | Program output:                    
Correct output: -66                 | Program output:                    
Correct output: -95                 | Program output: -18                
Correct output: -100                | Program output: -17                
Correct output: -93                 | Program output: -93                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -14                 | Program output: -14                
Correct output: -79                 | Program output: -73                
Correct output: -100                | Program output: -100               
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: -46                
Correct output: -8                  | Program output: -8                 
Correct output: -80                 | Program output: 68                 
Correct output: -86                 | Program output: -19                
Correct output: -96                 | Program output: 87                 
Correct output: -97                 | Program output: -97                
Correct output: -82                 | Program output: -7                 
Correct output: -48                 | Program output: -48                
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (integer_empty integer_dup_times exec_swap (exec_swap (in3) (exec_dup (in1) in4) integer_dup_times) (exec_yankdup in2) exec_do*range (integer_min) integer_yankdup boolean_flush boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop integer_dup_items integer_gte in4 exec_when () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger integer_dup boolean_flush print_newline boolean_dup_times)))
Lexicase best errors: [0 0 1 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 49
Percent parens: 0.265
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (integer_empty integer_dup_times exec_swap (exec_swap (in3) (exec_dup (in1) in4) integer_dup_times) (exec_yankdup in2) exec_do*range (integer_min) integer_yankdup boolean_flush boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop integer_dup_items integer_gte in4 exec_when () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger integer_dup boolean_flush print_newline boolean_dup_times)))
Zero cases best errors: [0 0 1 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 49
Percent parens: 0.265
--- Lexicase Population Statistics ---
Count of elite individuals by case: (941 244 347 38 1000 405 583 34 322 488)
Population mean number of elite cases: 4.40
Count of perfect (error zero) individuals by case: (941 244 347 38 0 405 583 34 322 488)
Population mean number of perfect (error zero) cases: 3.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times})
Best program: (integer_empty integer_dup_times exec_swap (in3) (exec_dup (in1) in4) integer_dup_times exec_yankdup in2 exec_do*range (integer_min) exec_while (boolean_flush) boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop integer_dup_items integer_gte in4 exec_when () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger integer_dup boolean_flush print_newline boolean_dup_times)))
Errors: [0 0 1 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 35
Size: 47
Percent parens: 0.255
--- Population Statistics ---
Average total errors in population: 6.598
Median total errors in population: 7
Error averages by case: (0.059 0.756 0.653 0.962 1.0 0.595 0.417 0.966 0.678 0.512)
Error minima by case: (0 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 32.59
Average program size in population (points): 45.441
Average percent parens in population: 0.282
Minimum age in population: 29.75698852539062
Maximum age in population: 32.56755447387695
Average age in population: 31.68722884368896
Median age in population: 31.56755447387695
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 201
Genome diversity (% unique genomes):	 0.456
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 205
Syntactic diversity (% unique Push programs):	 0.431
Total error diversity:				 0.009
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.124
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 16057657
--- Timings ---
Current time: 1559583717938 milliseconds
Total Time:          67.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.8 seconds, 59.0%
Fitness Testing:     18.3 seconds, 27.1%
Report:               9.3 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 473
Test mean error for best: 0.47300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -37                 | Program output: -37                
Correct output: -60                 | Program output: -60                
Correct output: -26                 | Program output: -26                
Correct output: -70                 | Program output: -70                
Correct output: -54                 | Program output:                    
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: -72                
Correct output: -76                 | Program output: -76                
Correct output: -100                | Program output: -100               
Correct output: 47                  | Program output: 47                 
Correct output: -23                 | Program output: -23                
Correct output: -65                 | Program output: -65                
Correct output: 90                  | Program output: 90                 
Correct output: -17                 | Program output: -17                
Correct output: 97                  | Program output: 97                 
Correct output: 9                   | Program output: 15                 
Correct output: 21                  | Program output: 48                 
Correct output: 3                   | Program output: 9                  
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 61                 
Correct output: 46                  | Program output: 46                 
Correct output: 32                  | Program output: 32                 
Correct output: 23                  | Program output: 24                 
Correct output: 17                  | Program output: 24                 
Correct output: 20                  | Program output: 81                 
Correct output: 0                   | Program output: 0                  
Correct output: 21                  | Program output: 41                 
Correct output: 10                  | Program output: 10                 
Correct output: 28                  | Program output: 30                 
Correct output: 13                  | Program output: 38                 
Correct output: 33                  | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 6                   | Program output: 23                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: -2                  | Program output: -2                 
Correct output: -48                 | Program output: -48                
Correct output: 2                   | Program output:                    
Correct output: -86                 | Program output: -27                
Correct output: -67                 | Program output: -41                
Correct output: -23                 | Program output: -23                
Correct output: -78                 | Program output: -12                
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output:                    
Correct output: -85                 | Program output: -85                
Correct output: -38                 | Program output: 71                 
Correct output: -96                 | Program output:                    
Correct output: -58                 | Program output: -58                
Correct output: -92                 | Program output:                    
Correct output: -81                 | Program output: -81                
Correct output: -59                 | Program output: -7                 
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -92                
Correct output: -61                 | Program output: -61                
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: -41                
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -94                 | Program output: -94                
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -86                
Correct output: -63                 | Program output: 15                 
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -99                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -93                
Correct output: -90                 | Program output: -77                
Correct output: -29                 | Program output: -29                
Correct output: -61                 | Program output: -33                
Correct output: -79                 | Program output: 30                 
Correct output: -69                 | Program output: -32                
Correct output: -83                 | Program output: -20                
Correct output: -24                 | Program output:                    
Correct output: -66                 | Program output:                    
Correct output: -95                 | Program output: -18                
Correct output: -100                | Program output: -17                
Correct output: -93                 | Program output: -93                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -14                 | Program output: -14                
Correct output: -79                 | Program output: -73                
Correct output: -100                | Program output: -100               
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: -46                
Correct output: -8                  | Program output: -8                 
Correct output: -80                 | Program output: 68                 
Correct output: -86                 | Program output: -19                
Correct output: -96                 | Program output: 87                 
Correct output: -97                 | Program output: -97                
Correct output: -82                 | Program output: -7                 
Correct output: -48                 | Program output: -48                
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (integer_empty integer_dup_times exec_swap (in3) (exec_dup (in1) in4) integer_dup_times exec_yankdup in2 exec_do*range (integer_min) exec_while (boolean_flush) boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop integer_dup_items integer_gte in4 exec_when () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger integer_dup boolean_flush print_newline boolean_dup_times)))
Lexicase best errors: [0 0 0 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 47
Percent parens: 0.255
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (integer_empty integer_dup_times exec_swap (in3) (exec_dup (in1) in4) integer_dup_times exec_yankdup in2 exec_do*range (integer_min) exec_while (boolean_flush) boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop integer_dup_items integer_gte in4 exec_when () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger integer_dup boolean_flush print_newline boolean_dup_times)))
Zero cases best errors: [0 0 0 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 47
Percent parens: 0.255
--- Lexicase Population Statistics ---
Count of elite individuals by case: (657 842 448 785 690 835 727 120 102 56)
Population mean number of elite cases: 5.26
Count of perfect (error zero) individuals by case: (657 842 448 785 690 835 727 120 102 56)
Population mean number of perfect (error zero) cases: 5.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times})
Best program: (integer_empty integer_dup_times exec_swap (in3) (exec_dup (in1) in4) integer_dup_times exec_yankdup in2 exec_do*range (integer_min) exec_while (boolean_flush) boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop integer_dup_items integer_gte in4 exec_when () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger integer_dup boolean_flush print_newline boolean_dup_times)))
Errors: [0 0 0 0 0 0 0 1 1 1]
Total: 3
Mean: 0.3
Genome size: 35
Size: 47
Percent parens: 0.255
--- Population Statistics ---
Average total errors in population: 4.738
Median total errors in population: 4
Error averages by case: (0.343 0.158 0.552 0.215 0.31 0.165 0.273 0.88 0.898 0.944)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.711
Average program size in population (points): 46.976
Average percent parens in population: 0.261
Minimum age in population: 31.70567321777344
Maximum age in population: 34.5532054901123
Average age in population: 33.6209334192276
Median age in population: 33.5532054901123
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 235
Genome diversity (% unique genomes):	 0.459
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 241
Syntactic diversity (% unique Push programs):	 0.42
Total error diversity:				 0.008
Error (vector) diversity:			 0.07
Behavioral diversity:				 0.154
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 16877024
--- Timings ---
Current time: 1559583721311 milliseconds
Total Time:          70.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        41.7 seconds, 58.9%
Fitness Testing:     19.2 seconds, 27.1%
Report:               9.8 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 390
Test mean error for best: 0.39000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -37                 | Program output: -37                
Correct output: -60                 | Program output: -60                
Correct output: -26                 | Program output: -26                
Correct output: -70                 | Program output: -70                
Correct output: -54                 | Program output:                    
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: -72                
Correct output: -76                 | Program output: -76                
Correct output: -100                | Program output: -100               
Correct output: 47                  | Program output: 47                 
Correct output: -23                 | Program output: -23                
Correct output: -65                 | Program output: -65                
Correct output: 90                  | Program output: 90                 
Correct output: -17                 | Program output: -17                
Correct output: 97                  | Program output: 97                 
Correct output: 9                   | Program output: 9                  
Correct output: 21                  | Program output: 71                 
Correct output: 3                   | Program output: 10                 
Correct output: 1                   | Program output:                    
Correct output: 7                   | Program output: 35                 
Correct output: 46                  | Program output: 46                 
Correct output: 32                  | Program output: 49                 
Correct output: 23                  | Program output: 23                 
Correct output: 17                  | Program output: 17                 
Correct output: 20                  | Program output: 52                 
Correct output: 0                   | Program output: 0                  
Correct output: 21                  | Program output: 36                 
Correct output: 10                  | Program output: 10                 
Correct output: 28                  | Program output: 30                 
Correct output: 13                  | Program output:                    
Correct output: 33                  | Program output: 33                 
Correct output: 12                  | Program output: 12                 
Correct output: 6                   | Program output: 66                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: -2                  | Program output: -2                 
Correct output: -48                 | Program output: -48                
Correct output: 2                   | Program output: 2                  
Correct output: -86                 | Program output: -27                
Correct output: -67                 | Program output: -41                
Correct output: -23                 | Program output: -23                
Correct output: -78                 | Program output: -12                
Correct output: -67                 | Program output:                    
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -85                 | Program output: -85                
Correct output: -38                 | Program output: -38                
Correct output: -96                 | Program output: -96                
Correct output: -58                 | Program output: -58                
Correct output: -92                 | Program output:                    
Correct output: -81                 | Program output: -81                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -92                
Correct output: -61                 | Program output: -61                
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: -41                
Correct output: -92                 | Program output:                    
Correct output: -36                 | Program output: -36                
Correct output: -94                 | Program output: -94                
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -86                
Correct output: -63                 | Program output:                    
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output:                    
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -93                
Correct output: -90                 | Program output: -77                
Correct output: -29                 | Program output: -29                
Correct output: -61                 | Program output: -49                
Correct output: -79                 | Program output: 14                 
Correct output: -69                 | Program output: -32                
Correct output: -83                 | Program output: -20                
Correct output: -24                 | Program output: -24                
Correct output: -66                 | Program output: -66                
Correct output: -95                 | Program output: -18                
Correct output: -100                | Program output: -17                
Correct output: -93                 | Program output: -93                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -14                 | Program output: -14                
Correct output: -79                 | Program output: -73                
Correct output: -100                | Program output: -100               
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: -46                
Correct output: -8                  | Program output: -8                 
Correct output: -80                 | Program output: -80                
Correct output: -86                 | Program output: -19                
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -97                
Correct output: -82                 | Program output: -52                
Correct output: -48                 | Program output: -48                
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 2, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (integer_empty integer_dup_times exec_swap (in3) (exec_dup (in1)) in4 integer_dup_times exec_yankdup in2 exec_do*range (integer_min) exec_while (boolean_flush) boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop integer_dup_items integer_gte in4 exec_when () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger integer_dup boolean_flush print_newline boolean_dup_times)))
Lexicase best errors: [1 0 0 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 47
Percent parens: 0.255
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 2, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (integer_empty integer_dup_times exec_swap (in3) (exec_dup (in1)) in4 integer_dup_times exec_yankdup in2 exec_do*range (integer_min) exec_while (boolean_flush) boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop integer_dup_items integer_gte in4 exec_when () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger integer_dup boolean_flush print_newline boolean_dup_times)))
Zero cases best errors: [1 0 0 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 47
Percent parens: 0.255
--- Lexicase Population Statistics ---
Count of elite individuals by case: (38 255 447 191 242 627 444 446 506 928)
Population mean number of elite cases: 4.12
Count of perfect (error zero) individuals by case: (38 255 447 191 242 627 444 446 506 928)
Population mean number of perfect (error zero) cases: 4.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times})
Best program: (integer_empty integer_dup_times exec_swap (exec_swap (in3) (exec_dup (integer_empty) integer_dup_times) exec_swap (in3) (exec_dup (in1) in4) integer_dup_times) (in3) exec_dup (in1) in4 integer_dup_times exec_yankdup in2 exec_do*range (integer_min) exec_while (boolean_flush) boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop integer_dup_items integer_gte in4 exec_when () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger integer_dup boolean_flush print_newline boolean_dup_times)))
Errors: [0 0 1 1 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 46
Size: 64
Percent parens: 0.281
--- Population Statistics ---
Average total errors in population: 5.876
Median total errors in population: 6
Error averages by case: (0.962 0.745 0.553 0.809 0.758 0.373 0.556 0.554 0.494 0.072)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.314
Average program size in population (points): 49.892
Average percent parens in population: 0.269
Minimum age in population: 33.12226486206055
Maximum age in population: 36.5532054901123
Average age in population: 35.02139074230194
Median age in population: 35.09132242202759
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 146
Genome diversity (% unique genomes):	 0.498
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 149
Syntactic diversity (% unique Push programs):	 0.463
Total error diversity:				 0.008
Error (vector) diversity:			 0.07
Behavioral diversity:				 0.166
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 17678602
--- Timings ---
Current time: 1559583724700 milliseconds
Total Time:          74.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        43.7 seconds, 58.9%
Fitness Testing:     20.1 seconds, 27.1%
Report:              10.3 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 471
Test mean error for best: 0.47100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -37                 | Program output: -37                
Correct output: -60                 | Program output: -60                
Correct output: -26                 | Program output: -26                
Correct output: -70                 | Program output: -70                
Correct output: -54                 | Program output:                    
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: -72                
Correct output: -76                 | Program output: -76                
Correct output: -100                | Program output: -100               
Correct output: 47                  | Program output: 47                 
Correct output: -23                 | Program output: -23                
Correct output: -65                 | Program output: -65                
Correct output: 90                  | Program output: 90                 
Correct output: -17                 | Program output: -17                
Correct output: 97                  | Program output: 97                 
Correct output: 9                   | Program output: 29                 
Correct output: 21                  | Program output: 21                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output:                    
Correct output: 7                   | Program output:                    
Correct output: 46                  | Program output: 46                 
Correct output: 32                  | Program output: 63                 
Correct output: 23                  | Program output: 39                 
Correct output: 17                  | Program output: 24                 
Correct output: 20                  | Program output: 68                 
Correct output: 0                   | Program output: 92                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 10                 
Correct output: 28                  | Program output: 28                 
Correct output: 13                  | Program output: 66                 
Correct output: 33                  | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 6                   | Program output: 23                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: -2                  | Program output:                    
Correct output: -48                 | Program output: -47                
Correct output: 2                   | Program output: 33                 
Correct output: -86                 | Program output: -86                
Correct output: -67                 | Program output: -41                
Correct output: -23                 | Program output: -5                 
Correct output: -78                 | Program output: -12                
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -76                
Correct output: -76                 | Program output: -6                 
Correct output: -73                 | Program output:                    
Correct output: -85                 | Program output: -85                
Correct output: -38                 | Program output: 28                 
Correct output: -96                 | Program output: -96                
Correct output: -58                 | Program output: -27                
Correct output: -92                 | Program output:                    
Correct output: -81                 | Program output: -81                
Correct output: -59                 | Program output: -7                 
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -69                
Correct output: -61                 | Program output: -45                
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: -41                
Correct output: -92                 | Program output:                    
Correct output: -36                 | Program output: -15                
Correct output: -94                 | Program output: -94                
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: 57                 
Correct output: -63                 | Program output: 15                 
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: 8                  
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -90                
Correct output: -29                 | Program output: -8                 
Correct output: -61                 | Program output: -33                
Correct output: -79                 | Program output: -79                
Correct output: -69                 | Program output: -69                
Correct output: -83                 | Program output: -83                
Correct output: -24                 | Program output: -24                
Correct output: -66                 | Program output: -66                
Correct output: -95                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -93                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: 26                 
Correct output: -14                 | Program output: -14                
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -100               
Correct output: -60                 | Program output: -39                
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: -46                
Correct output: -8                  | Program output: 74                 
Correct output: -80                 | Program output: 68                 
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: 87                 
Correct output: -97                 | Program output: -13                
Correct output: -82                 | Program output: -7                 
Correct output: -48                 | Program output: -48                
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 2, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (integer_empty integer_dup_times exec_swap (in3) (exec_dup (in1)) in4 integer_dup_times exec_yankdup in2 exec_do*range (integer_min) exec_while (boolean_flush) boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop integer_dup_items integer_gte in4 exec_when () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger integer_dup boolean_flush print_newline boolean_dup_times)))
Lexicase best errors: [1 1 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 47
Percent parens: 0.255
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 2, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (integer_empty integer_dup_times exec_swap (in3) (exec_dup (in1)) in4 integer_dup_times exec_yankdup in2 exec_do*range (integer_min) exec_while (boolean_flush) boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop integer_dup_items integer_gte in4 exec_when () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger integer_dup boolean_flush print_newline boolean_dup_times)))
Zero cases best errors: [1 1 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 47
Percent parens: 0.255
--- Lexicase Population Statistics ---
Count of elite individuals by case: (214 185 321 930 442 443 501 634 448 455)
Population mean number of elite cases: 4.57
Count of perfect (error zero) individuals by case: (214 185 321 930 442 443 501 634 448 455)
Population mean number of perfect (error zero) cases: 4.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 2, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times})
Best program: (integer_empty integer_dup_times exec_swap (in3) (exec_dup (in1)) in4 integer_dup_times exec_yankdup in2 exec_do*range (integer_min) exec_while (boolean_flush) boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop integer_dup_items integer_gte in4 exec_when () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger integer_dup boolean_flush print_newline boolean_dup_times)))
Errors: [1 1 0 0 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 35
Size: 47
Percent parens: 0.255
--- Population Statistics ---
Average total errors in population: 5.427
Median total errors in population: 5
Error averages by case: (0.786 0.815 0.679 0.07 0.558 0.557 0.499 0.366 0.552 0.545)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.622
Average program size in population (points): 53.164
Average percent parens in population: 0.270
Minimum age in population: 34.62943935394287
Maximum age in population: 38.08773517608643
Average age in population: 36.45705219268799
Median age in population: 36.3916027545929
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 126
Genome diversity (% unique genomes):	 0.502
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 135
Syntactic diversity (% unique Push programs):	 0.48
Total error diversity:				 0.008
Error (vector) diversity:			 0.058
Behavioral diversity:				 0.194
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 18544662
--- Timings ---
Current time: 1559583728152 milliseconds
Total Time:          77.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.7 seconds, 58.9%
Fitness Testing:     21.0 seconds, 27.0%
Report:              10.8 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 478
Test mean error for best: 0.47800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -37                 | Program output: -37                
Correct output: -60                 | Program output: -60                
Correct output: -26                 | Program output: -26                
Correct output: -70                 | Program output: -70                
Correct output: -54                 | Program output: 15                 
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: -72                
Correct output: -76                 | Program output: 22                 
Correct output: -100                | Program output: 57                 
Correct output: 47                  | Program output: 47                 
Correct output: -23                 | Program output: -23                
Correct output: -65                 | Program output: -65                
Correct output: 90                  | Program output: 90                 
Correct output: -17                 | Program output: -17                
Correct output: 97                  | Program output: 97                 
Correct output: 9                   | Program output: 15                 
Correct output: 21                  | Program output: 48                 
Correct output: 3                   | Program output: 9                  
Correct output: 1                   | Program output: 79                 
Correct output: 7                   | Program output: 61                 
Correct output: 46                  | Program output: 70                 
Correct output: 32                  | Program output: 32                 
Correct output: 23                  | Program output: 24                 
Correct output: 17                  | Program output: 87                 
Correct output: 20                  | Program output: 20                 
Correct output: 0                   | Program output: 0                  
Correct output: 21                  | Program output: 42                 
Correct output: 10                  | Program output: 76                 
Correct output: 28                  | Program output: 65                 
Correct output: 13                  | Program output: 38                 
Correct output: 33                  | Program output: 55                 
Correct output: 12                  | Program output: 52                 
Correct output: 6                   | Program output: 51                 
Correct output: 26                  | Program output: 82                 
Correct output: 4                   | Program output: 59                 
Correct output: -2                  | Program output: -2                 
Correct output: -48                 | Program output: -48                
Correct output: 2                   | Program output: 2                  
Correct output: -86                 | Program output: -27                
Correct output: -67                 | Program output: -19                
Correct output: -23                 | Program output: -23                
Correct output: -78                 | Program output: -42                
Correct output: -67                 | Program output: 30                 
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -85                 | Program output: -85                
Correct output: -38                 | Program output: 97                 
Correct output: -96                 | Program output: 8                  
Correct output: -58                 | Program output: -58                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -81                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -70                
Correct output: -92                 | Program output: -92                
Correct output: -61                 | Program output: -61                
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: -37                
Correct output: -92                 | Program output: 38                 
Correct output: -36                 | Program output: -36                
Correct output: -94                 | Program output: 57                 
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -86                
Correct output: -63                 | Program output: -10                
Correct output: -81                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -90                
Correct output: -29                 | Program output: -29                
Correct output: -61                 | Program output: -49                
Correct output: -79                 | Program output: -79                
Correct output: -69                 | Program output: -69                
Correct output: -83                 | Program output: -83                
Correct output: -24                 | Program output: 9                  
Correct output: -66                 | Program output: 15                 
Correct output: -95                 | Program output: -91                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -80                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -14                 | Program output: 12                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -100               
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -15                
Correct output: -70                 | Program output: -70                
Correct output: -8                  | Program output: -8                 
Correct output: -80                 | Program output: -80                
Correct output: -86                 | Program output: -19                
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -97                
Correct output: -82                 | Program output: -52                
Correct output: -48                 | Program output: 95                 
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in2} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 2, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (in2 integer_dup_times exec_swap (in3) (exec_dup (in1)) in4 integer_yankdup exec_yankdup in2 exec_do*range (integer_min) exec_while (boolean_flush) boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop integer_dup_items integer_gte in4 exec_when () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger integer_dup boolean_flush print_newline boolean_dup_times)))
Lexicase best errors: [0 0 1 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 47
Percent parens: 0.255
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in2} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 2, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (in2 integer_dup_times exec_swap (in3) (exec_dup (in1)) in4 integer_yankdup exec_yankdup in2 exec_do*range (integer_min) exec_while (boolean_flush) boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop integer_dup_items integer_gte in4 exec_when () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger integer_dup boolean_flush print_newline boolean_dup_times)))
Zero cases best errors: [0 0 1 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 47
Percent parens: 0.255
--- Lexicase Population Statistics ---
Count of elite individuals by case: (487 375 248 158 298 544 857 169 291 904)
Population mean number of elite cases: 4.33
Count of perfect (error zero) individuals by case: (487 375 248 158 298 544 857 169 291 904)
Population mean number of perfect (error zero) cases: 4.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_newline})
Best program: (integer_empty integer_dup_times exec_swap (exec_swap (in3) (exec_dup (integer_empty) integer_dup_times) exec_swap (in3) (exec_dup (in1) in4) integer_dup_times) (in2) exec_do*range (integer_min) exec_while (boolean_flush) boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop integer_dup_items integer_gte in4 exec_when () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger integer_dup integer_stackdepth print_newline)))
Errors: [0 0 0 1 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 39
Size: 56
Percent parens: 0.304
--- Population Statistics ---
Average total errors in population: 5.669
Median total errors in population: 5
Error averages by case: (0.513 0.625 0.752 0.842 0.702 0.456 0.143 0.831 0.709 0.096)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.177
Average program size in population (points): 50.723
Average percent parens in population: 0.264
Minimum age in population: 35.62943935394287
Maximum age in population: 39.6416027545929
Average age in population: 37.81319407773018
Median age in population: 37.94547033309937
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 93
Genome diversity (% unique genomes):	 0.529
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 100
Syntactic diversity (% unique Push programs):	 0.496
Total error diversity:				 0.009
Error (vector) diversity:			 0.071
Behavioral diversity:				 0.18
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 19386746
--- Timings ---
Current time: 1559583731534 milliseconds
Total Time:          81.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.7 seconds, 58.8%
Fitness Testing:     21.9 seconds, 27.0%
Report:              11.4 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 379
Test mean error for best: 0.37900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -37                 | Program output: -37                
Correct output: -60                 | Program output: -60                
Correct output: -26                 | Program output: -26                
Correct output: -70                 | Program output: -70                
Correct output: -54                 | Program output: -54                
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: -72                
Correct output: -76                 | Program output: -76                
Correct output: -100                | Program output: -100               
Correct output: 47                  | Program output: 47                 
Correct output: -23                 | Program output: -23                
Correct output: -65                 | Program output: -65                
Correct output: 90                  | Program output: 90                 
Correct output: -17                 | Program output: -17                
Correct output: 97                  | Program output: 97                 
Correct output: 9                   | Program output: 15                 
Correct output: 21                  | Program output: 48                 
Correct output: 3                   | Program output: 9                  
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 61                 
Correct output: 46                  | Program output: 46                 
Correct output: 32                  | Program output: 32                 
Correct output: 23                  | Program output: 24                 
Correct output: 17                  | Program output: 24                 
Correct output: 20                  | Program output: 81                 
Correct output: 0                   | Program output: 0                  
Correct output: 21                  | Program output: 41                 
Correct output: 10                  | Program output: 10                 
Correct output: 28                  | Program output: 30                 
Correct output: 13                  | Program output: 38                 
Correct output: 33                  | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 6                   | Program output: 23                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: -2                  | Program output: -2                 
Correct output: -48                 | Program output: -48                
Correct output: 2                   | Program output: 2                  
Correct output: -86                 | Program output: -27                
Correct output: -67                 | Program output: -41                
Correct output: -23                 | Program output: -23                
Correct output: -78                 | Program output: -42                
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -85                 | Program output: -85                
Correct output: -38                 | Program output: 71                 
Correct output: -96                 | Program output: -96                
Correct output: -58                 | Program output: -58                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -81                
Correct output: -59                 | Program output: -7                 
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -92                
Correct output: -61                 | Program output: -61                
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: -41                
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -94                 | Program output: -94                
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -86                
Correct output: -63                 | Program output: 35                 
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -99                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -90                
Correct output: -29                 | Program output: -29                
Correct output: -61                 | Program output: -33                
Correct output: -79                 | Program output: -79                
Correct output: -69                 | Program output: -69                
Correct output: -83                 | Program output: -83                
Correct output: -24                 | Program output: -24                
Correct output: -66                 | Program output: -66                
Correct output: -95                 | Program output: -91                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -93                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -14                 | Program output: -14                
Correct output: -79                 | Program output: -73                
Correct output: -100                | Program output: -100               
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: -70                
Correct output: -8                  | Program output: -8                 
Correct output: -80                 | Program output: 68                 
Correct output: -86                 | Program output: -19                
Correct output: -96                 | Program output: 87                 
Correct output: -97                 | Program output: -97                
Correct output: -82                 | Program output: -52                
Correct output: -48                 | Program output: -48                
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in2} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 1, :instruction exec_dup} {:close 2, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (in2 integer_dup_times exec_swap (in3 exec_dup () in1) () in4 integer_yankdup exec_yankdup in2 exec_do*range (integer_min) exec_while (boolean_flush) boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop integer_dup_items integer_gte in4 exec_when () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger integer_dup) boolean_flush) print_newline boolean_dup_times)
Lexicase best errors: [0 0 1 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 47
Percent parens: 0.255
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in2} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 1, :instruction exec_dup} {:close 2, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (in2 integer_dup_times exec_swap (in3 exec_dup () in1) () in4 integer_yankdup exec_yankdup in2 exec_do*range (integer_min) exec_while (boolean_flush) boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop integer_dup_items integer_gte in4 exec_when () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger integer_dup) boolean_flush) print_newline boolean_dup_times)
Zero cases best errors: [0 0 1 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 47
Percent parens: 0.255
--- Lexicase Population Statistics ---
Count of elite individuals by case: (519 687 510 642 255 79 233 923 323 626)
Population mean number of elite cases: 4.80
Count of perfect (error zero) individuals by case: (519 687 510 642 255 79 233 923 323 626)
Population mean number of perfect (error zero) cases: 4.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_while} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times})
Best program: (integer_empty integer_dup_times exec_swap (exec_swap (in3) (exec_dup (integer_empty) integer_dup_times) exec_swap (in3) (exec_dup (in1) in4) integer_dup_times) (integer_dup_times) exec_yankdup in2 exec_while (integer_min) exec_while (boolean_flush) boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop integer_dup_items integer_gte in4 exec_when () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger integer_dup boolean_flush print_newline boolean_dup_times)))
Errors: [0 0 0 0 0 1 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 42
Size: 59
Percent parens: 0.288
--- Population Statistics ---
Average total errors in population: 5.203
Median total errors in population: 5
Error averages by case: (0.481 0.313 0.49 0.358 0.745 0.921 0.767 0.077 0.677 0.374)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.134
Average program size in population (points): 52.666
Average percent parens in population: 0.274
Minimum age in population: 37.5532054901123
Maximum age in population: 40.65023517608643
Average age in population: 38.81870731675625
Median age in population: 38.94547033309937
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 182
Genome diversity (% unique genomes):	 0.472
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 196
Syntactic diversity (% unique Push programs):	 0.441
Total error diversity:				 0.009
Error (vector) diversity:			 0.071
Behavioral diversity:				 0.174
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 20253991
--- Timings ---
Current time: 1559583734969 milliseconds
Total Time:          84.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.7 seconds, 58.8%
Fitness Testing:     22.9 seconds, 27.0%
Report:              11.9 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 591
Test mean error for best: 0.59100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -37                 | Program output: -37                
Correct output: -60                 | Program output: -60                
Correct output: -26                 | Program output: -26                
Correct output: -70                 | Program output: -70                
Correct output: -54                 | Program output: -54                
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: -72                
Correct output: -76                 | Program output: -76                
Correct output: -100                | Program output: -100               
Correct output: 47                  | Program output: 47                 
Correct output: -23                 | Program output: -23                
Correct output: -65                 | Program output: -65                
Correct output: 90                  | Program output: 90                 
Correct output: -17                 | Program output: -17                
Correct output: 97                  | Program output: 97                 
Correct output: 9                   | Program output: 9                  
Correct output: 21                  | Program output: 71                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output:                    
Correct output: 7                   | Program output:                    
Correct output: 46                  | Program output:                    
Correct output: 32                  | Program output: 49                 
Correct output: 23                  | Program output: 23                 
Correct output: 17                  | Program output:                    
Correct output: 20                  | Program output: 52                 
Correct output: 0                   | Program output:                    
Correct output: 21                  | Program output: 36                 
Correct output: 10                  | Program output: 10                 
Correct output: 28                  | Program output: 30                 
Correct output: 13                  | Program output:                    
Correct output: 33                  | Program output: 33                 
Correct output: 12                  | Program output:                    
Correct output: 6                   | Program output:                    
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: -2                  | Program output:                    
Correct output: -48                 | Program output:                    
Correct output: 2                   | Program output: 33                 
Correct output: -86                 | Program output:                    
Correct output: -67                 | Program output: -41                
Correct output: -23                 | Program output: -23                
Correct output: -78                 | Program output: -42                
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -76                
Correct output: -76                 | Program output:                    
Correct output: -73                 | Program output: -73                
Correct output: -85                 | Program output: -83                
Correct output: -38                 | Program output:                    
Correct output: -96                 | Program output: -96                
Correct output: -58                 | Program output:                    
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -4                 
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -69                
Correct output: -61                 | Program output:                    
Correct output: -85                 | Program output: -28                
Correct output: -41                 | Program output: -41                
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output:                    
Correct output: -94                 | Program output: -94                
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: 57                 
Correct output: -63                 | Program output: -10                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: 8                  
Correct output: -79                 | Program output: -45                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output:                    
Correct output: -29                 | Program output:                    
Correct output: -61                 | Program output: -49                
Correct output: -79                 | Program output: 14                 
Correct output: -69                 | Program output: -69                
Correct output: -83                 | Program output:                    
Correct output: -24                 | Program output: -24                
Correct output: -66                 | Program output: -66                
Correct output: -95                 | Program output: -91                
Correct output: -100                | Program output:                    
Correct output: -93                 | Program output: -93                
Correct output: -71                 | Program output: -15                
Correct output: -18                 | Program output:                    
Correct output: -14                 | Program output: -14                
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -14                
Correct output: -60                 | Program output:                    
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: -70                
Correct output: -8                  | Program output: 74                 
Correct output: -80                 | Program output: -80                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output:                    
Correct output: -82                 | Program output: -52                
Correct output: -48                 | Program output: -48                
Correct output: -91                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in2} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 2, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (in2 integer_dup_times exec_swap (in3) (exec_dup (in1)) in4 integer_yankdup exec_yankdup in2 exec_do*range (integer_min) exec_while (boolean_flush) boolean_eq print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger integer_dup_items integer_gte) in4) exec_when () integer_pop exec_dup_times (integer_mod exec_k () (exec_yankdup) boolean_frominteger integer_dup boolean_flush integer_yank boolean_dup_times))
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 55
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in2} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 2, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (in2 integer_dup_times exec_swap (in3) (exec_dup (in1)) in4 integer_yankdup exec_yankdup in2 exec_do*range (integer_min) exec_while (boolean_flush) boolean_eq print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger integer_dup_items integer_gte) in4) exec_when () integer_pop exec_dup_times (integer_mod exec_k () (exec_yankdup) boolean_frominteger integer_dup boolean_flush integer_yank boolean_dup_times))
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 55
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (423 348 364 673 825 346 899 348 324 814)
Population mean number of elite cases: 5.36
Count of perfect (error zero) individuals by case: (423 348 364 673 825 346 899 348 324 814)
Population mean number of perfect (error zero) cases: 5.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in2} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 2, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items})
Best program: (in2 integer_dup_times exec_swap (in3) (exec_dup (in1)) in4 integer_yankdup exec_yankdup in2 exec_do*range (integer_min) exec_while (boolean_flush) boolean_eq print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop integer_dup_items boolean_swap integer_min exec_while (boolean_flush boolean_empty) print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop integer_dup_items)
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 34
Size: 45
Percent parens: 0.244
--- Population Statistics ---
Average total errors in population: 4.636
Median total errors in population: 4
Error averages by case: (0.577 0.652 0.636 0.327 0.175 0.654 0.101 0.652 0.676 0.186)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.958
Average program size in population (points): 56.21
Average percent parens in population: 0.270
Minimum age in population: 38.5532054901123
Maximum age in population: 41.9608362019062
Average age in population: 40.23384321776032
Median age in population: 40.40127170085907
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 161
Genome diversity (% unique genomes):	 0.511
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 170
Syntactic diversity (% unique Push programs):	 0.486
Total error diversity:				 0.01
Error (vector) diversity:			 0.072
Behavioral diversity:				 0.188
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 21145570
--- Timings ---
Current time: 1559583738418 milliseconds
Total Time:          87.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.6 seconds, 58.7%
Fitness Testing:     23.8 seconds, 27.1%
Report:              12.4 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -37                 | Program output: -37                
Correct output: -60                 | Program output: -60                
Correct output: -26                 | Program output: -26                
Correct output: -70                 | Program output: -70                
Correct output: -54                 | Program output: -54                
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: -72                
Correct output: -76                 | Program output: -76                
Correct output: -100                | Program output: -100               
Correct output: 47                  | Program output: 47                 
Correct output: -23                 | Program output: -23                
Correct output: -65                 | Program output: -65                
Correct output: 90                  | Program output: 90                 
Correct output: -17                 | Program output: -17                
Correct output: 97                  | Program output: 97                 
Correct output: 9                   | Program output: 9                  
Correct output: 21                  | Program output: 21                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 7                  
Correct output: 46                  | Program output: 46                 
Correct output: 32                  | Program output: 32                 
Correct output: 23                  | Program output: 23                 
Correct output: 17                  | Program output: 17                 
Correct output: 20                  | Program output: 20                 
Correct output: 0                   | Program output: 0                  
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 10                 
Correct output: 28                  | Program output: 28                 
Correct output: 13                  | Program output: 13                 
Correct output: 33                  | Program output: 33                 
Correct output: 12                  | Program output: 12                 
Correct output: 6                   | Program output: 6                  
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: -2                  | Program output: -2                 
Correct output: -48                 | Program output: -48                
Correct output: 2                   | Program output: 2                  
Correct output: -86                 | Program output: -86                
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: -23                
Correct output: -78                 | Program output: -78                
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -85                 | Program output: -85                
Correct output: -38                 | Program output: -38                
Correct output: -96                 | Program output: -96                
Correct output: -58                 | Program output: -58                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -81                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -92                
Correct output: -61                 | Program output: -61                
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: -41                
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -94                 | Program output: -94                
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -86                
Correct output: -63                 | Program output: -63                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -99                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -90                
Correct output: -29                 | Program output: -29                
Correct output: -61                 | Program output: -61                
Correct output: -79                 | Program output: -79                
Correct output: -69                 | Program output: -69                
Correct output: -83                 | Program output: -83                
Correct output: -24                 | Program output: -24                
Correct output: -66                 | Program output: -66                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -93                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -14                 | Program output: -14                
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -100               
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: -70                
Correct output: -8                  | Program output: -8                 
Correct output: -80                 | Program output: -80                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -97                
Correct output: -82                 | Program output: -82                
Correct output: -48                 | Program output: -48                
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction exec_while} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*times})
Lexicase best program: (integer_empty integer_dup_times boolean_rot exec_swap (in3) (exec_dup (integer_empty) integer_dup_times) exec_swap (in3) (exec_dup (in1) in4) in2 exec_while (integer_min) exec_while (boolean_flush) boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop integer_dup_items integer_gte in4 exec_when () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger integer_dup boolean_flush print_newline exec_do*times ())))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 55
Percent parens: 0.291
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction exec_while} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*times})
Zero cases best program: (integer_empty integer_dup_times boolean_rot exec_swap (in3) (exec_dup (integer_empty) integer_dup_times) exec_swap (in3) (exec_dup (in1) in4) in2 exec_while (integer_min) exec_while (boolean_flush) boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop integer_dup_items integer_gte in4 exec_when () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger integer_dup boolean_flush print_newline exec_do*times ())))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 55
Percent parens: 0.291
--- Lexicase Population Statistics ---
Count of elite individuals by case: (564 574 466 307 316 871 847 306 16 700)
Population mean number of elite cases: 4.97
Count of perfect (error zero) individuals by case: (564 574 466 307 316 871 847 306 16 700)
Population mean number of perfect (error zero) cases: 4.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction exec_while} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*times})
Best program: (integer_empty integer_dup_times boolean_rot exec_swap (in3) (exec_dup (integer_empty) integer_dup_times) exec_swap (in3) (exec_dup (in1) in4) in2 exec_while (integer_min) exec_while (boolean_flush) boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop integer_dup_items integer_gte in4 exec_when () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger integer_dup boolean_flush print_newline exec_do*times ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 39
Size: 55
Percent parens: 0.291
--- Population Statistics ---
Average total errors in population: 5.033
Median total errors in population: 4
Error averages by case: (0.436 0.426 0.534 0.693 0.684 0.129 0.153 0.694 0.984 0.3)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.594
Average program size in population (points): 57.779
Average percent parens in population: 0.262
Minimum age in population: 39.74933791160583
Maximum age in population: 43.63391982018948
Average age in population: 41.96685329724848
Median age in population: 41.97274930030107
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 102
Genome diversity (% unique genomes):	 0.569
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 107
Syntactic diversity (% unique Push programs):	 0.547
Total error diversity:				 0.01
Error (vector) diversity:			 0.065
Behavioral diversity:				 0.208
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 22070272
--- Timings ---
Current time: 1559583741945 milliseconds
Total Time:          91.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.6 seconds, 58.6%
Fitness Testing:     24.8 seconds, 27.1%
Report:              12.9 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 27
Successful program: (integer_empty integer_dup_times boolean_rot exec_swap (in3) (exec_dup (integer_empty) integer_dup_times) exec_swap (in3) (exec_dup (in1) in4) in2 exec_while (integer_min) exec_while (boolean_flush) boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop integer_dup_items integer_gte in4 exec_when () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger integer_dup boolean_flush print_newline exec_do*times ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 55


Auto-simplifying with starting size: 55
step: 0
program: (integer_empty integer_dup_times boolean_rot exec_swap (in3) (exec_dup (integer_empty) integer_dup_times) exec_swap (in3) (exec_dup (in1) in4) in2 exec_while (integer_min) exec_while (boolean_flush) boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop integer_dup_items integer_gte in4 exec_when () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger integer_dup boolean_flush print_newline exec_do*times ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 55

step: 500
program: (integer_empty integer_dup_times boolean_rot exec_swap (in3) (exec_dup (integer_empty) integer_dup_times) exec_swap (in3) (exec_dup (in1) in4) in2 exec_while (integer_min) exec_while (boolean_flush) boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop integer_dup_items integer_gte in4 exec_when () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger integer_dup boolean_flush print_newline exec_do*times ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 55

step: 1000
program: (integer_empty integer_dup_times boolean_rot exec_swap (in3) (exec_dup (integer_empty) integer_dup_times) exec_swap (in3) (exec_dup (in1) in4) in2 exec_while (integer_min) exec_while (boolean_flush) boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop integer_dup_items integer_gte in4 exec_when () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger integer_dup boolean_flush print_newline exec_do*times ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 55

step: 1500
program: (integer_empty integer_dup_times boolean_rot exec_swap (in3) (exec_dup (integer_empty) integer_dup_times) exec_swap (in3) (exec_dup (in1) in4) in2 exec_while (integer_min) exec_while (boolean_flush) boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop integer_dup_items integer_gte in4 exec_when () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger integer_dup boolean_flush print_newline exec_do*times ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 55

step: 2000
program: (integer_empty integer_dup_times boolean_rot exec_swap (in3) (exec_dup (integer_empty) integer_dup_times) exec_swap (in3) (exec_dup (in1) in4) in2 exec_while (integer_min) exec_while (boolean_flush) boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop integer_dup_items integer_gte in4 exec_when () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger integer_dup boolean_flush print_newline exec_do*times ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 55

step: 2500
program: (integer_empty integer_dup_times boolean_rot exec_swap (in3) (exec_dup (integer_empty) integer_dup_times) exec_swap (in3) (exec_dup (in1) in4) in2 exec_while (integer_min) exec_while (boolean_flush) boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop integer_dup_items integer_gte in4 exec_when () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger integer_dup boolean_flush print_newline exec_do*times ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 55

step: 3000
program: (integer_empty integer_dup_times boolean_rot exec_swap (in3) (exec_dup (integer_empty) integer_dup_times) exec_swap (in3) (exec_dup (in1) in4) in2 exec_while (integer_min) exec_while (boolean_flush) boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop integer_dup_items integer_gte in4 exec_when () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger integer_dup boolean_flush print_newline exec_do*times ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 55

step: 3500
program: (integer_empty integer_dup_times boolean_rot exec_swap (in3) (exec_dup (integer_empty) integer_dup_times) exec_swap (in3) (exec_dup (in1) in4) in2 exec_while (integer_min) exec_while (boolean_flush) boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop integer_dup_items integer_gte in4 exec_when () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger integer_dup boolean_flush print_newline exec_do*times ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 55

step: 4000
program: (integer_empty integer_dup_times boolean_rot exec_swap (in3) (exec_dup (integer_empty) integer_dup_times) exec_swap (in3) (exec_dup (in1) in4) in2 exec_while (integer_min) exec_while (boolean_flush) boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop integer_dup_items integer_gte in4 exec_when () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger integer_dup boolean_flush print_newline exec_do*times ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 55

step: 4500
program: (integer_empty integer_dup_times boolean_rot exec_swap (in3) (exec_dup (integer_empty) integer_dup_times) exec_swap (in3) (exec_dup (in1) in4) in2 exec_while (integer_min) exec_while (boolean_flush) boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop integer_dup_items integer_gte in4 exec_when () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger integer_dup boolean_flush print_newline exec_do*times ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 55

step: 5000
program: (integer_empty integer_dup_times boolean_rot exec_swap (in3) (exec_dup (integer_empty) integer_dup_times) exec_swap (in3) (exec_dup (in1) in4) in2 exec_while (integer_min) exec_while (boolean_flush) boolean_empty print_integer integer_dup_items integer_gte exec_y_when_autoconstructing () exec_y () integer_pop integer_dup_items integer_gte in4 exec_when () integer_pop exec_dup_times (integer_mod exec_k (exec_yankdup) (boolean_frominteger integer_dup boolean_flush print_newline exec_do*times ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 55

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -37                 | Program output: -37                
Correct output: -60                 | Program output: -60                
Correct output: -26                 | Program output: -26                
Correct output: -70                 | Program output: -70                
Correct output: -54                 | Program output: -54                
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: -72                
Correct output: -76                 | Program output: -76                
Correct output: -100                | Program output: -100               
Correct output: 47                  | Program output: 47                 
Correct output: -23                 | Program output: -23                
Correct output: -65                 | Program output: -65                
Correct output: 90                  | Program output: 90                 
Correct output: -17                 | Program output: -17                
Correct output: 97                  | Program output: 97                 
Correct output: 9                   | Program output: 9                  
Correct output: 21                  | Program output: 21                 
Correct output: 3                   | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 7                  
Correct output: 46                  | Program output: 46                 
Correct output: 32                  | Program output: 32                 
Correct output: 23                  | Program output: 23                 
Correct output: 17                  | Program output: 17                 
Correct output: 20                  | Program output: 20                 
Correct output: 0                   | Program output: 0                  
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 10                 
Correct output: 28                  | Program output: 28                 
Correct output: 13                  | Program output: 13                 
Correct output: 33                  | Program output: 33                 
Correct output: 12                  | Program output: 12                 
Correct output: 6                   | Program output: 6                  
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: -2                  | Program output: -2                 
Correct output: -48                 | Program output: -48                
Correct output: 2                   | Program output: 2                  
Correct output: -86                 | Program output: -86                
Correct output: -67                 | Program output: -67                
Correct output: -23                 | Program output: -23                
Correct output: -78                 | Program output: -78                
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -85                 | Program output: -85                
Correct output: -38                 | Program output: -38                
Correct output: -96                 | Program output: -96                
Correct output: -58                 | Program output: -58                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -81                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -92                
Correct output: -61                 | Program output: -61                
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: -41                
Correct output: -92                 | Program output: -92                
Correct output: -36                 | Program output: -36                
Correct output: -94                 | Program output: -94                
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -86                
Correct output: -63                 | Program output: -63                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -99                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -90                
Correct output: -29                 | Program output: -29                
Correct output: -61                 | Program output: -61                
Correct output: -79                 | Program output: -79                
Correct output: -69                 | Program output: -69                
Correct output: -83                 | Program output: -83                
Correct output: -24                 | Program output: -24                
Correct output: -66                 | Program output: -66                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -93                
Correct output: -71                 | Program output: -71                
Correct output: -18                 | Program output: -18                
Correct output: -14                 | Program output: -14                
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -100               
Correct output: -60                 | Program output: -60                
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: -70                
Correct output: -8                  | Program output: -8                 
Correct output: -80                 | Program output: -80                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -97                
Correct output: -82                 | Program output: -82                
Correct output: -48                 | Program output: -48                
Correct output: -91                 | Program output: -91                
;;******************************
