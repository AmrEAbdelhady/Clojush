Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[75 75 75 81] 75] [[-24 -3 -3 -3] -24] [[-80 13 -80 -80] -80] [[-3 14 14 14] -3] [[83 83 83 40] 40] [[-80 -90 -80 -80] -90] [[85 -62 85 85] -62] [[73 -34 -34 -34] -34] [[90 90 -84 90] -84] [[38 75 75 75] 38] [(-9 -9 -9 -9) -9] [(-97 -97 -97 -97) -97] [(93 93 93 93) 93] [(-78 -78 -78 -78) -78] [(73 73 73 73) 73] [(43 76 94 87) 43] [(69 60 45 65) 45] [(54 4 47 62) 4] [(37 100 83 95) 37] [(98 32 65 8) 8] [(96 91 41 37) 37] [(62 48 94 92) 48] [(73 19 26 13) 13] [(71 20 77 88) 20] [(47 69 87 25) 25] [(25 66 95 98) 25] [(41 44 19 72) 19] [(45 31 81 59) 31] [(35 74 72 56) 35] [(74 12 24 0) 0] [(51 18 7 11) 7] [(18 50 20 33) 18] [(15 12 92 33) 12] [(91 91 36 94) 36] [(52 45 32 9) 9] [(-49 -29 -13 -32) -49] [(5 60 -76 -56) -76] [(-91 63 -2 -41) -91] [(-60 -76 -76 26) -76] [(-74 22 22 -95) -95] [(95 84 -64 68) -64] [(77 1 -89 -1) -89] [(19 34 -90 99) -90] [(88 -19 -91 21) -91] [(-11 79 75 -56) -56] [(-21 26 67 52) -21] [(-82 2 -67 -38) -82] [(71 -96 42 74) -96] [(9 -13 59 -89) -89] [(-34 56 -7 -89) -89] [(67 8 60 90) 8] [(-95 62 -30 35) -95] [(30 -48 -17 5) -48] [(8 -51 -49 38) -51] [(9 -72 64 23) -72] [(47 -71 5 32) -71] [(86 -54 -94 61) -94] [(-57 16 65 -80) -80] [(-38 55 40 -63) -63] [(-3 8 -67 -17) -67] [(-95 92 43 30) -95] [(47 71 47 3) 3] [(-51 45 -16 -3) -51] [(1 44 74 -23) -23] [(2 94 -89 12) -89] [(-17 -72 23 -2) -72] [(-32 -67 20 23) -67] [(-97 98 -2 25) -97] [(87 -57 -29 45) -57] [(-86 22 4 93) -86] [(-40 -43 -13 48) -43] [(-41 56 59 -48) -48] [(-89 -15 -84 15) -89] [(-56 -81 95 -28) -81] [(-61 10 -24 100) -61] [(-62 2 33 9) -62] [(-57 -85 75 70) -85] [(49 95 -100 31) -100] [(-70 -18 -27 -11) -70] [(75 31 -60 -82) -82] [(-74 53 78 9) -74] [(-100 88 13 -32) -100] [(15 51 -84 35) -84] [(-35 -19 -27 26) -35] [(-17 4 -41 20) -41] [(53 -89 -4 61) -89] [(-61 87 53 1) -61] [(65 -100 22 50) -100] [(35 4 -75 -48) -75] [(-73 49 87 46) -73] [(19 69 8 -96) -96] [(-48 100 -43 2) -48] [(88 75 27 73) 27] [(-4 63 -46 -78) -78] [(-33 54 -35 -34) -35])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[75 75 75 81] 75]
Train Case:   6 | Input/Output: [[-24 -3 -3 -3] -24]
Train Case:   7 | Input/Output: [[-80 13 -80 -80] -80]
Train Case:   8 | Input/Output: [[-3 14 14 14] -3]
Train Case:   9 | Input/Output: [[83 83 83 40] 40]
Train Case:  10 | Input/Output: [[-80 -90 -80 -80] -90]
Train Case:  11 | Input/Output: [[85 -62 85 85] -62]
Train Case:  12 | Input/Output: [[73 -34 -34 -34] -34]
Train Case:  13 | Input/Output: [[90 90 -84 90] -84]
Train Case:  14 | Input/Output: [[38 75 75 75] 38]
Train Case:  15 | Input/Output: [(-9 -9 -9 -9) -9]
Train Case:  16 | Input/Output: [(-97 -97 -97 -97) -97]
Train Case:  17 | Input/Output: [(93 93 93 93) 93]
Train Case:  18 | Input/Output: [(-78 -78 -78 -78) -78]
Train Case:  19 | Input/Output: [(73 73 73 73) 73]
Train Case:  20 | Input/Output: [(43 76 94 87) 43]
Train Case:  21 | Input/Output: [(69 60 45 65) 45]
Train Case:  22 | Input/Output: [(54 4 47 62) 4]
Train Case:  23 | Input/Output: [(37 100 83 95) 37]
Train Case:  24 | Input/Output: [(98 32 65 8) 8]
Train Case:  25 | Input/Output: [(96 91 41 37) 37]
Train Case:  26 | Input/Output: [(62 48 94 92) 48]
Train Case:  27 | Input/Output: [(73 19 26 13) 13]
Train Case:  28 | Input/Output: [(71 20 77 88) 20]
Train Case:  29 | Input/Output: [(47 69 87 25) 25]
Train Case:  30 | Input/Output: [(25 66 95 98) 25]
Train Case:  31 | Input/Output: [(41 44 19 72) 19]
Train Case:  32 | Input/Output: [(45 31 81 59) 31]
Train Case:  33 | Input/Output: [(35 74 72 56) 35]
Train Case:  34 | Input/Output: [(74 12 24 0) 0]
Train Case:  35 | Input/Output: [(51 18 7 11) 7]
Train Case:  36 | Input/Output: [(18 50 20 33) 18]
Train Case:  37 | Input/Output: [(15 12 92 33) 12]
Train Case:  38 | Input/Output: [(91 91 36 94) 36]
Train Case:  39 | Input/Output: [(52 45 32 9) 9]
Train Case:  40 | Input/Output: [(-49 -29 -13 -32) -49]
Train Case:  41 | Input/Output: [(5 60 -76 -56) -76]
Train Case:  42 | Input/Output: [(-91 63 -2 -41) -91]
Train Case:  43 | Input/Output: [(-60 -76 -76 26) -76]
Train Case:  44 | Input/Output: [(-74 22 22 -95) -95]
Train Case:  45 | Input/Output: [(95 84 -64 68) -64]
Train Case:  46 | Input/Output: [(77 1 -89 -1) -89]
Train Case:  47 | Input/Output: [(19 34 -90 99) -90]
Train Case:  48 | Input/Output: [(88 -19 -91 21) -91]
Train Case:  49 | Input/Output: [(-11 79 75 -56) -56]
Train Case:  50 | Input/Output: [(-21 26 67 52) -21]
Train Case:  51 | Input/Output: [(-82 2 -67 -38) -82]
Train Case:  52 | Input/Output: [(71 -96 42 74) -96]
Train Case:  53 | Input/Output: [(9 -13 59 -89) -89]
Train Case:  54 | Input/Output: [(-34 56 -7 -89) -89]
Train Case:  55 | Input/Output: [(67 8 60 90) 8]
Train Case:  56 | Input/Output: [(-95 62 -30 35) -95]
Train Case:  57 | Input/Output: [(30 -48 -17 5) -48]
Train Case:  58 | Input/Output: [(8 -51 -49 38) -51]
Train Case:  59 | Input/Output: [(9 -72 64 23) -72]
Train Case:  60 | Input/Output: [(47 -71 5 32) -71]
Train Case:  61 | Input/Output: [(86 -54 -94 61) -94]
Train Case:  62 | Input/Output: [(-57 16 65 -80) -80]
Train Case:  63 | Input/Output: [(-38 55 40 -63) -63]
Train Case:  64 | Input/Output: [(-3 8 -67 -17) -67]
Train Case:  65 | Input/Output: [(-95 92 43 30) -95]
Train Case:  66 | Input/Output: [(47 71 47 3) 3]
Train Case:  67 | Input/Output: [(-51 45 -16 -3) -51]
Train Case:  68 | Input/Output: [(1 44 74 -23) -23]
Train Case:  69 | Input/Output: [(2 94 -89 12) -89]
Train Case:  70 | Input/Output: [(-17 -72 23 -2) -72]
Train Case:  71 | Input/Output: [(-32 -67 20 23) -67]
Train Case:  72 | Input/Output: [(-97 98 -2 25) -97]
Train Case:  73 | Input/Output: [(87 -57 -29 45) -57]
Train Case:  74 | Input/Output: [(-86 22 4 93) -86]
Train Case:  75 | Input/Output: [(-40 -43 -13 48) -43]
Train Case:  76 | Input/Output: [(-41 56 59 -48) -48]
Train Case:  77 | Input/Output: [(-89 -15 -84 15) -89]
Train Case:  78 | Input/Output: [(-56 -81 95 -28) -81]
Train Case:  79 | Input/Output: [(-61 10 -24 100) -61]
Train Case:  80 | Input/Output: [(-62 2 33 9) -62]
Train Case:  81 | Input/Output: [(-57 -85 75 70) -85]
Train Case:  82 | Input/Output: [(49 95 -100 31) -100]
Train Case:  83 | Input/Output: [(-70 -18 -27 -11) -70]
Train Case:  84 | Input/Output: [(75 31 -60 -82) -82]
Train Case:  85 | Input/Output: [(-74 53 78 9) -74]
Train Case:  86 | Input/Output: [(-100 88 13 -32) -100]
Train Case:  87 | Input/Output: [(15 51 -84 35) -84]
Train Case:  88 | Input/Output: [(-35 -19 -27 26) -35]
Train Case:  89 | Input/Output: [(-17 4 -41 20) -41]
Train Case:  90 | Input/Output: [(53 -89 -4 61) -89]
Train Case:  91 | Input/Output: [(-61 87 53 1) -61]
Train Case:  92 | Input/Output: [(65 -100 22 50) -100]
Train Case:  93 | Input/Output: [(35 4 -75 -48) -75]
Train Case:  94 | Input/Output: [(-73 49 87 46) -73]
Train Case:  95 | Input/Output: [(19 69 8 -96) -96]
Train Case:  96 | Input/Output: [(-48 100 -43 2) -48]
Train Case:  97 | Input/Output: [(88 75 27 73) 27]
Train Case:  98 | Input/Output: [(-4 63 -46 -78) -78]
Train Case:  99 | Input/Output: [(-33 54 -35 -34) -35]
Test Case:   0 | Input/Output: [[98 98 98 -3] -3]
Test Case:   1 | Input/Output: [[-35 57 57 57] -35]
Test Case:   2 | Input/Output: [[-52 -81 -81 -81] -81]
Test Case:   3 | Input/Output: [[-51 95 95 95] -51]
Test Case:   4 | Input/Output: [[-72 -77 -77 -77] -77]
Test Case:   5 | Input/Output: [[-81 -81 -21 -81] -81]
Test Case:   6 | Input/Output: [[-95 -74 -74 -74] -95]
Test Case:   7 | Input/Output: [[19 19 19 -73] -73]
Test Case:   8 | Input/Output: [[-89 82 82 82] -89]
Test Case:   9 | Input/Output: [[34 34 -41 34] -41]
Test Case:  10 | Input/Output: [[-48 -48 15 -48] -48]
Test Case:  11 | Input/Output: [[9 9 9 23] 9]
Test Case:  12 | Input/Output: [[-4 -4 -4 -99] -99]
Test Case:  13 | Input/Output: [[-22 -60 -22 -22] -60]
Test Case:  14 | Input/Output: [[-49 61 61 61] -49]
Test Case:  15 | Input/Output: [[14 1 14 14] 1]
Test Case:  16 | Input/Output: [[-36 6 6 6] -36]
Test Case:  17 | Input/Output: [[-78 -30 -78 -78] -78]
Test Case:  18 | Input/Output: [[36 -43 -43 -43] -43]
Test Case:  19 | Input/Output: [[86 86 86 -93] -93]
Test Case:  20 | Input/Output: [[90 12 90 90] 12]
Test Case:  21 | Input/Output: [[18 18 18 61] 18]
Test Case:  22 | Input/Output: [[-56 -56 -14 -56] -56]
Test Case:  23 | Input/Output: [[-57 -57 84 -57] -57]
Test Case:  24 | Input/Output: [[99 -13 -13 -13] -13]
Test Case:  25 | Input/Output: [[-70 -70 -35 -70] -70]
Test Case:  26 | Input/Output: [[-23 -23 8 -23] -23]
Test Case:  27 | Input/Output: [[79 89 89 89] 79]
Test Case:  28 | Input/Output: [[-10 -10 30 -10] -10]
Test Case:  29 | Input/Output: [[-98 -98 75 -98] -98]
Test Case:  30 | Input/Output: [[-15 -15 -15 23] -15]
Test Case:  31 | Input/Output: [[7 50 7 7] 7]
Test Case:  32 | Input/Output: [[61 50 61 61] 50]
Test Case:  33 | Input/Output: [[-29 -29 90 -29] -29]
Test Case:  34 | Input/Output: [[-31 -31 -31 -57] -57]
Test Case:  35 | Input/Output: [[-68 53 -68 -68] -68]
Test Case:  36 | Input/Output: [[-17 -84 -17 -17] -84]
Test Case:  37 | Input/Output: [[-66 -66 -66 -14] -66]
Test Case:  38 | Input/Output: [[50 38 50 50] 38]
Test Case:  39 | Input/Output: [[-40 34 -40 -40] -40]
Test Case:  40 | Input/Output: [[47 23 23 23] 23]
Test Case:  41 | Input/Output: [[81 81 81 -89] -89]
Test Case:  42 | Input/Output: [[-59 -59 -59 -33] -59]
Test Case:  43 | Input/Output: [[81 -54 81 81] -54]
Test Case:  44 | Input/Output: [[-100 -100 -100 72] -100]
Test Case:  45 | Input/Output: [[-48 -89 -89 -89] -89]
Test Case:  46 | Input/Output: [[-36 69 -36 -36] -36]
Test Case:  47 | Input/Output: [[-37 34 34 34] -37]
Test Case:  48 | Input/Output: [[-34 -2 -2 -2] -34]
Test Case:  49 | Input/Output: [[80 81 81 81] 80]
Test Case:  50 | Input/Output: [[14 14 30 14] 14]
Test Case:  51 | Input/Output: [[-97 -97 -97 -97] -97]
Test Case:  52 | Input/Output: [[-73 -73 -73 3] -73]
Test Case:  53 | Input/Output: [[43 43 -82 43] -82]
Test Case:  54 | Input/Output: [[29 29 -86 29] -86]
Test Case:  55 | Input/Output: [[49 49 49 39] 39]
Test Case:  56 | Input/Output: [[-68 -68 -21 -68] -68]
Test Case:  57 | Input/Output: [[-56 52 -56 -56] -56]
Test Case:  58 | Input/Output: [[-88 -88 -88 -60] -88]
Test Case:  59 | Input/Output: [[68 68 29 68] 29]
Test Case:  60 | Input/Output: [[18 -100 -100 -100] -100]
Test Case:  61 | Input/Output: [[-47 54 -47 -47] -47]
Test Case:  62 | Input/Output: [[-40 -40 -85 -40] -85]
Test Case:  63 | Input/Output: [[97 60 97 97] 60]
Test Case:  64 | Input/Output: [[75 75 -37 75] -37]
Test Case:  65 | Input/Output: [[-18 -35 -35 -35] -35]
Test Case:  66 | Input/Output: [[-98 -98 -35 -98] -98]
Test Case:  67 | Input/Output: [[-63 91 91 91] -63]
Test Case:  68 | Input/Output: [[65 77 77 77] 65]
Test Case:  69 | Input/Output: [[-60 78 78 78] -60]
Test Case:  70 | Input/Output: [[-78 -78 22 -78] -78]
Test Case:  71 | Input/Output: [[-27 -27 -27 -21] -27]
Test Case:  72 | Input/Output: [[-10 -73 -73 -73] -73]
Test Case:  73 | Input/Output: [[-50 -50 43 -50] -50]
Test Case:  74 | Input/Output: [[-69 -69 -69 -95] -95]
Test Case:  75 | Input/Output: [[39 39 -65 39] -65]
Test Case:  76 | Input/Output: [[69 -74 -74 -74] -74]
Test Case:  77 | Input/Output: [[33 33 33 -6] -6]
Test Case:  78 | Input/Output: [[-85 52 52 52] -85]
Test Case:  79 | Input/Output: [[40 40 40 75] 40]
Test Case:  80 | Input/Output: [[54 -54 -54 -54] -54]
Test Case:  81 | Input/Output: [[89 90 90 90] 89]
Test Case:  82 | Input/Output: [[54 54 54 -20] -20]
Test Case:  83 | Input/Output: [[-83 -34 -34 -34] -83]
Test Case:  84 | Input/Output: [[-76 -76 69 -76] -76]
Test Case:  85 | Input/Output: [[-77 -69 -69 -69] -77]
Test Case:  86 | Input/Output: [[-59 -59 94 -59] -59]
Test Case:  87 | Input/Output: [[0 63 0 0] 0]
Test Case:  88 | Input/Output: [[-65 -65 -47 -65] -65]
Test Case:  89 | Input/Output: [[-41 39 39 39] -41]
Test Case:  90 | Input/Output: [[24 24 43 24] 24]
Test Case:  91 | Input/Output: [[42 85 85 85] 42]
Test Case:  92 | Input/Output: [[52 52 -26 52] -26]
Test Case:  93 | Input/Output: [[-57 39 -57 -57] -57]
Test Case:  94 | Input/Output: [[-60 -60 85 -60] -60]
Test Case:  95 | Input/Output: [[18 18 18 16] 16]
Test Case:  96 | Input/Output: [[69 -51 69 69] -51]
Test Case:  97 | Input/Output: [[37 37 37 -92] -92]
Test Case:  98 | Input/Output: [[52 52 52 45] 45]
Test Case:  99 | Input/Output: [[85 -54 85 85] -54]
Test Case: 100 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 101 | Input/Output: [(63 63 63 63) 63]
Test Case: 102 | Input/Output: [(74 74 74 74) 74]
Test Case: 103 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 104 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 105 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 106 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 107 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 108 | Input/Output: [(88 88 88 88) 88]
Test Case: 109 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 110 | Input/Output: [(92 92 92 92) 92]
Test Case: 111 | Input/Output: [(20 20 20 20) 20]
Test Case: 112 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 113 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 114 | Input/Output: [(37 37 37 37) 37]
Test Case: 115 | Input/Output: [(4 4 4 4) 4]
Test Case: 116 | Input/Output: [(39 39 39 39) 39]
Test Case: 117 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 118 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 119 | Input/Output: [(2 2 2 2) 2]
Test Case: 120 | Input/Output: [(67 67 67 67) 67]
Test Case: 121 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 122 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 123 | Input/Output: [(82 82 82 82) 82]
Test Case: 124 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 125 | Input/Output: [(75 75 75 75) 75]
Test Case: 126 | Input/Output: [(93 93 93 93) 93]
Test Case: 127 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 128 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 129 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 130 | Input/Output: [(95 95 95 95) 95]
Test Case: 131 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 132 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 133 | Input/Output: [(42 42 42 42) 42]
Test Case: 134 | Input/Output: [(87 87 87 87) 87]
Test Case: 135 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 136 | Input/Output: [(49 49 49 49) 49]
Test Case: 137 | Input/Output: [(42 42 42 42) 42]
Test Case: 138 | Input/Output: [(35 35 35 35) 35]
Test Case: 139 | Input/Output: [(82 82 82 82) 82]
Test Case: 140 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 141 | Input/Output: [(49 49 49 49) 49]
Test Case: 142 | Input/Output: [(31 31 31 31) 31]
Test Case: 143 | Input/Output: [(85 85 85 85) 85]
Test Case: 144 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 145 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 146 | Input/Output: [(51 51 51 51) 51]
Test Case: 147 | Input/Output: [(58 58 58 58) 58]
Test Case: 148 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 149 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 150 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 151 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 152 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 153 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 154 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 155 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 156 | Input/Output: [(36 36 36 36) 36]
Test Case: 157 | Input/Output: [(28 28 28 28) 28]
Test Case: 158 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 159 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 160 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 161 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 162 | Input/Output: [(82 82 82 82) 82]
Test Case: 163 | Input/Output: [(85 85 85 85) 85]
Test Case: 164 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 165 | Input/Output: [(67 67 67 67) 67]
Test Case: 166 | Input/Output: [(57 57 57 57) 57]
Test Case: 167 | Input/Output: [(42 42 42 42) 42]
Test Case: 168 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 169 | Input/Output: [(100 100 100 100) 100]
Test Case: 170 | Input/Output: [(0 0 0 0) 0]
Test Case: 171 | Input/Output: [(18 18 18 18) 18]
Test Case: 172 | Input/Output: [(33 33 33 33) 33]
Test Case: 173 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 174 | Input/Output: [(39 39 39 39) 39]
Test Case: 175 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 176 | Input/Output: [(29 29 29 29) 29]
Test Case: 177 | Input/Output: [(14 14 14 14) 14]
Test Case: 178 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 179 | Input/Output: [(27 27 27 27) 27]
Test Case: 180 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 181 | Input/Output: [(21 21 21 21) 21]
Test Case: 182 | Input/Output: [(26 26 26 26) 26]
Test Case: 183 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 184 | Input/Output: [(18 18 18 18) 18]
Test Case: 185 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 186 | Input/Output: [(32 32 32 32) 32]
Test Case: 187 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 188 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 189 | Input/Output: [(90 90 90 90) 90]
Test Case: 190 | Input/Output: [(94 94 94 94) 94]
Test Case: 191 | Input/Output: [(79 79 79 79) 79]
Test Case: 192 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 193 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 194 | Input/Output: [(22 22 22 22) 22]
Test Case: 195 | Input/Output: [(24 24 24 24) 24]
Test Case: 196 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 197 | Input/Output: [(91 91 91 91) 91]
Test Case: 198 | Input/Output: [(52 52 52 52) 52]
Test Case: 199 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 200 | Input/Output: [(75 54 75 8) 8]
Test Case: 201 | Input/Output: [(12 28 15 52) 12]
Test Case: 202 | Input/Output: [(47 88 46 85) 46]
Test Case: 203 | Input/Output: [(17 30 48 100) 17]
Test Case: 204 | Input/Output: [(36 7 16 83) 7]
Test Case: 205 | Input/Output: [(2 47 38 65) 2]
Test Case: 206 | Input/Output: [(83 96 38 49) 38]
Test Case: 207 | Input/Output: [(69 67 40 40) 40]
Test Case: 208 | Input/Output: [(84 36 44 75) 36]
Test Case: 209 | Input/Output: [(65 23 69 34) 23]
Test Case: 210 | Input/Output: [(23 35 10 16) 10]
Test Case: 211 | Input/Output: [(0 27 38 34) 0]
Test Case: 212 | Input/Output: [(18 39 29 0) 0]
Test Case: 213 | Input/Output: [(68 51 44 70) 44]
Test Case: 214 | Input/Output: [(91 82 0 42) 0]
Test Case: 215 | Input/Output: [(35 96 17 16) 16]
Test Case: 216 | Input/Output: [(59 12 32 92) 12]
Test Case: 217 | Input/Output: [(62 8 7 34) 7]
Test Case: 218 | Input/Output: [(8 27 94 71) 8]
Test Case: 219 | Input/Output: [(88 21 33 10) 10]
Test Case: 220 | Input/Output: [(57 47 44 70) 44]
Test Case: 221 | Input/Output: [(43 98 28 0) 0]
Test Case: 222 | Input/Output: [(50 95 73 72) 50]
Test Case: 223 | Input/Output: [(73 67 88 16) 16]
Test Case: 224 | Input/Output: [(34 26 74 69) 26]
Test Case: 225 | Input/Output: [(68 61 4 28) 4]
Test Case: 226 | Input/Output: [(6 15 68 7) 6]
Test Case: 227 | Input/Output: [(10 29 80 78) 10]
Test Case: 228 | Input/Output: [(18 28 7 24) 7]
Test Case: 229 | Input/Output: [(32 22 5 63) 5]
Test Case: 230 | Input/Output: [(34 38 81 7) 7]
Test Case: 231 | Input/Output: [(58 84 6 70) 6]
Test Case: 232 | Input/Output: [(24 96 85 54) 24]
Test Case: 233 | Input/Output: [(39 38 41 82) 38]
Test Case: 234 | Input/Output: [(73 21 37 73) 21]
Test Case: 235 | Input/Output: [(69 66 10 52) 10]
Test Case: 236 | Input/Output: [(25 86 11 3) 3]
Test Case: 237 | Input/Output: [(86 51 11 38) 11]
Test Case: 238 | Input/Output: [(7 11 56 29) 7]
Test Case: 239 | Input/Output: [(8 86 80 14) 8]
Test Case: 240 | Input/Output: [(37 53 33 7) 7]
Test Case: 241 | Input/Output: [(42 55 13 87) 13]
Test Case: 242 | Input/Output: [(14 61 13 75) 13]
Test Case: 243 | Input/Output: [(87 23 86 93) 23]
Test Case: 244 | Input/Output: [(22 60 66 28) 22]
Test Case: 245 | Input/Output: [(22 43 24 5) 5]
Test Case: 246 | Input/Output: [(80 86 33 65) 33]
Test Case: 247 | Input/Output: [(4 75 19 13) 4]
Test Case: 248 | Input/Output: [(18 90 20 20) 18]
Test Case: 249 | Input/Output: [(37 0 54 81) 0]
Test Case: 250 | Input/Output: [(31 32 24 69) 24]
Test Case: 251 | Input/Output: [(21 85 24 47) 21]
Test Case: 252 | Input/Output: [(18 41 6 4) 4]
Test Case: 253 | Input/Output: [(45 35 11 29) 11]
Test Case: 254 | Input/Output: [(59 43 32 28) 28]
Test Case: 255 | Input/Output: [(48 20 63 90) 20]
Test Case: 256 | Input/Output: [(65 57 59 3) 3]
Test Case: 257 | Input/Output: [(83 96 15 97) 15]
Test Case: 258 | Input/Output: [(69 7 62 3) 3]
Test Case: 259 | Input/Output: [(51 42 93 67) 42]
Test Case: 260 | Input/Output: [(4 44 88 7) 4]
Test Case: 261 | Input/Output: [(12 64 82 99) 12]
Test Case: 262 | Input/Output: [(14 74 28 100) 14]
Test Case: 263 | Input/Output: [(32 26 1 65) 1]
Test Case: 264 | Input/Output: [(55 7 4 5) 4]
Test Case: 265 | Input/Output: [(18 18 50 1) 1]
Test Case: 266 | Input/Output: [(25 69 46 71) 25]
Test Case: 267 | Input/Output: [(37 87 26 38) 26]
Test Case: 268 | Input/Output: [(39 87 21 8) 8]
Test Case: 269 | Input/Output: [(63 45 19 81) 19]
Test Case: 270 | Input/Output: [(84 66 78 95) 66]
Test Case: 271 | Input/Output: [(54 81 21 55) 21]
Test Case: 272 | Input/Output: [(32 79 12 78) 12]
Test Case: 273 | Input/Output: [(60 78 84 56) 56]
Test Case: 274 | Input/Output: [(84 89 97 80) 80]
Test Case: 275 | Input/Output: [(44 91 39 77) 39]
Test Case: 276 | Input/Output: [(53 22 71 43) 22]
Test Case: 277 | Input/Output: [(96 15 73 39) 15]
Test Case: 278 | Input/Output: [(56 8 93 85) 8]
Test Case: 279 | Input/Output: [(98 46 12 48) 12]
Test Case: 280 | Input/Output: [(67 52 10 1) 1]
Test Case: 281 | Input/Output: [(96 45 72 1) 1]
Test Case: 282 | Input/Output: [(23 60 11 68) 11]
Test Case: 283 | Input/Output: [(74 74 15 94) 15]
Test Case: 284 | Input/Output: [(26 60 59 15) 15]
Test Case: 285 | Input/Output: [(92 14 94 63) 14]
Test Case: 286 | Input/Output: [(79 43 63 86) 43]
Test Case: 287 | Input/Output: [(19 86 23 27) 19]
Test Case: 288 | Input/Output: [(26 41 36 76) 26]
Test Case: 289 | Input/Output: [(21 69 86 71) 21]
Test Case: 290 | Input/Output: [(29 3 18 6) 3]
Test Case: 291 | Input/Output: [(17 68 64 24) 17]
Test Case: 292 | Input/Output: [(21 82 64 3) 3]
Test Case: 293 | Input/Output: [(28 24 51 8) 8]
Test Case: 294 | Input/Output: [(17 0 58 67) 0]
Test Case: 295 | Input/Output: [(87 71 46 71) 46]
Test Case: 296 | Input/Output: [(66 15 97 44) 15]
Test Case: 297 | Input/Output: [(62 7 43 55) 7]
Test Case: 298 | Input/Output: [(36 34 48 58) 34]
Test Case: 299 | Input/Output: [(5 78 17 22) 5]
Test Case: 300 | Input/Output: [(72 41 18 26) 18]
Test Case: 301 | Input/Output: [(52 18 80 47) 18]
Test Case: 302 | Input/Output: [(14 0 13 7) 0]
Test Case: 303 | Input/Output: [(17 95 9 68) 9]
Test Case: 304 | Input/Output: [(23 22 7 28) 7]
Test Case: 305 | Input/Output: [(79 66 14 25) 14]
Test Case: 306 | Input/Output: [(74 21 95 10) 10]
Test Case: 307 | Input/Output: [(50 93 11 68) 11]
Test Case: 308 | Input/Output: [(8 6 52 4) 4]
Test Case: 309 | Input/Output: [(0 20 96 16) 0]
Test Case: 310 | Input/Output: [(30 52 79 0) 0]
Test Case: 311 | Input/Output: [(90 77 20 95) 20]
Test Case: 312 | Input/Output: [(58 66 75 47) 47]
Test Case: 313 | Input/Output: [(22 40 86 65) 22]
Test Case: 314 | Input/Output: [(2 77 97 51) 2]
Test Case: 315 | Input/Output: [(59 91 25 64) 25]
Test Case: 316 | Input/Output: [(47 76 56 79) 47]
Test Case: 317 | Input/Output: [(87 56 35 52) 35]
Test Case: 318 | Input/Output: [(22 64 40 53) 22]
Test Case: 319 | Input/Output: [(7 61 75 0) 0]
Test Case: 320 | Input/Output: [(73 69 4 44) 4]
Test Case: 321 | Input/Output: [(98 55 67 18) 18]
Test Case: 322 | Input/Output: [(84 25 53 76) 25]
Test Case: 323 | Input/Output: [(31 85 50 38) 31]
Test Case: 324 | Input/Output: [(73 90 38 83) 38]
Test Case: 325 | Input/Output: [(66 32 97 92) 32]
Test Case: 326 | Input/Output: [(24 54 62 93) 24]
Test Case: 327 | Input/Output: [(21 0 90 89) 0]
Test Case: 328 | Input/Output: [(49 18 70 62) 18]
Test Case: 329 | Input/Output: [(15 41 88 17) 15]
Test Case: 330 | Input/Output: [(40 63 65 49) 40]
Test Case: 331 | Input/Output: [(32 62 47 38) 32]
Test Case: 332 | Input/Output: [(28 91 15 59) 15]
Test Case: 333 | Input/Output: [(37 88 8 87) 8]
Test Case: 334 | Input/Output: [(72 12 52 26) 12]
Test Case: 335 | Input/Output: [(89 82 11 44) 11]
Test Case: 336 | Input/Output: [(32 68 38 72) 32]
Test Case: 337 | Input/Output: [(68 15 45 90) 15]
Test Case: 338 | Input/Output: [(75 61 5 58) 5]
Test Case: 339 | Input/Output: [(54 100 60 74) 54]
Test Case: 340 | Input/Output: [(23 23 63 52) 23]
Test Case: 341 | Input/Output: [(23 57 16 75) 16]
Test Case: 342 | Input/Output: [(12 73 32 71) 12]
Test Case: 343 | Input/Output: [(44 18 63 84) 18]
Test Case: 344 | Input/Output: [(33 48 54 35) 33]
Test Case: 345 | Input/Output: [(52 78 88 1) 1]
Test Case: 346 | Input/Output: [(14 57 50 36) 14]
Test Case: 347 | Input/Output: [(49 91 23 53) 23]
Test Case: 348 | Input/Output: [(26 2 38 31) 2]
Test Case: 349 | Input/Output: [(96 90 51 30) 30]
Test Case: 350 | Input/Output: [(20 54 91 89) 20]
Test Case: 351 | Input/Output: [(41 98 76 85) 41]
Test Case: 352 | Input/Output: [(77 37 5 6) 5]
Test Case: 353 | Input/Output: [(86 43 82 47) 43]
Test Case: 354 | Input/Output: [(43 97 42 42) 42]
Test Case: 355 | Input/Output: [(79 83 3 92) 3]
Test Case: 356 | Input/Output: [(72 23 11 9) 9]
Test Case: 357 | Input/Output: [(41 7 65 65) 7]
Test Case: 358 | Input/Output: [(90 63 77 1) 1]
Test Case: 359 | Input/Output: [(75 81 4 4) 4]
Test Case: 360 | Input/Output: [(50 71 9 79) 9]
Test Case: 361 | Input/Output: [(99 97 78 71) 71]
Test Case: 362 | Input/Output: [(25 35 55 6) 6]
Test Case: 363 | Input/Output: [(12 31 20 60) 12]
Test Case: 364 | Input/Output: [(13 73 42 17) 13]
Test Case: 365 | Input/Output: [(21 83 5 41) 5]
Test Case: 366 | Input/Output: [(37 79 62 30) 30]
Test Case: 367 | Input/Output: [(46 21 67 0) 0]
Test Case: 368 | Input/Output: [(46 26 39 56) 26]
Test Case: 369 | Input/Output: [(73 70 26 76) 26]
Test Case: 370 | Input/Output: [(29 12 18 62) 12]
Test Case: 371 | Input/Output: [(32 35 11 71) 11]
Test Case: 372 | Input/Output: [(65 93 85 41) 41]
Test Case: 373 | Input/Output: [(56 22 76 18) 18]
Test Case: 374 | Input/Output: [(50 51 12 3) 3]
Test Case: 375 | Input/Output: [(56 77 63 76) 56]
Test Case: 376 | Input/Output: [(99 34 1 21) 1]
Test Case: 377 | Input/Output: [(20 41 30 45) 20]
Test Case: 378 | Input/Output: [(0 7 96 17) 0]
Test Case: 379 | Input/Output: [(65 65 95 15) 15]
Test Case: 380 | Input/Output: [(33 4 94 99) 4]
Test Case: 381 | Input/Output: [(21 80 41 29) 21]
Test Case: 382 | Input/Output: [(33 89 36 58) 33]
Test Case: 383 | Input/Output: [(89 37 100 81) 37]
Test Case: 384 | Input/Output: [(88 36 56 26) 26]
Test Case: 385 | Input/Output: [(76 39 51 78) 39]
Test Case: 386 | Input/Output: [(79 45 51 35) 35]
Test Case: 387 | Input/Output: [(20 5 73 13) 5]
Test Case: 388 | Input/Output: [(17 31 61 24) 17]
Test Case: 389 | Input/Output: [(74 87 5 64) 5]
Test Case: 390 | Input/Output: [(82 32 26 30) 26]
Test Case: 391 | Input/Output: [(36 32 2 57) 2]
Test Case: 392 | Input/Output: [(73 81 77 38) 38]
Test Case: 393 | Input/Output: [(41 44 46 71) 41]
Test Case: 394 | Input/Output: [(21 92 91 4) 4]
Test Case: 395 | Input/Output: [(62 83 17 35) 17]
Test Case: 396 | Input/Output: [(85 21 56 99) 21]
Test Case: 397 | Input/Output: [(52 73 32 65) 32]
Test Case: 398 | Input/Output: [(52 29 55 7) 7]
Test Case: 399 | Input/Output: [(99 86 11 92) 11]
Test Case: 400 | Input/Output: [(21 72 -60 5) -60]
Test Case: 401 | Input/Output: [(33 -81 10 -79) -81]
Test Case: 402 | Input/Output: [(-70 -27 -18 59) -70]
Test Case: 403 | Input/Output: [(16 -82 95 -77) -82]
Test Case: 404 | Input/Output: [(59 83 -60 -6) -60]
Test Case: 405 | Input/Output: [(13 -91 76 -25) -91]
Test Case: 406 | Input/Output: [(-99 -29 16 54) -99]
Test Case: 407 | Input/Output: [(37 96 16 -97) -97]
Test Case: 408 | Input/Output: [(-98 -40 -72 23) -98]
Test Case: 409 | Input/Output: [(5 17 7 5) 5]
Test Case: 410 | Input/Output: [(-54 -22 20 46) -54]
Test Case: 411 | Input/Output: [(21 32 -32 -30) -32]
Test Case: 412 | Input/Output: [(33 56 -70 -50) -70]
Test Case: 413 | Input/Output: [(-92 -21 86 89) -92]
Test Case: 414 | Input/Output: [(-76 45 83 -35) -76]
Test Case: 415 | Input/Output: [(-46 87 29 45) -46]
Test Case: 416 | Input/Output: [(74 -10 -8 73) -10]
Test Case: 417 | Input/Output: [(43 -67 -77 28) -77]
Test Case: 418 | Input/Output: [(-31 14 -60 74) -60]
Test Case: 419 | Input/Output: [(-61 -4 -88 -47) -88]
Test Case: 420 | Input/Output: [(20 -71 8 90) -71]
Test Case: 421 | Input/Output: [(-100 -24 -79 41) -100]
Test Case: 422 | Input/Output: [(-80 7 -18 5) -80]
Test Case: 423 | Input/Output: [(73 -49 -20 5) -49]
Test Case: 424 | Input/Output: [(-20 -80 -79 75) -80]
Test Case: 425 | Input/Output: [(-71 97 10 -29) -71]
Test Case: 426 | Input/Output: [(18 -59 95 19) -59]
Test Case: 427 | Input/Output: [(-5 93 76 45) -5]
Test Case: 428 | Input/Output: [(-78 96 15 -8) -78]
Test Case: 429 | Input/Output: [(-63 -5 5 64) -63]
Test Case: 430 | Input/Output: [(59 1 45 23) 1]
Test Case: 431 | Input/Output: [(-94 -15 24 -9) -94]
Test Case: 432 | Input/Output: [(-60 18 46 11) -60]
Test Case: 433 | Input/Output: [(68 49 86 -44) -44]
Test Case: 434 | Input/Output: [(-80 -73 -44 -9) -80]
Test Case: 435 | Input/Output: [(82 -88 -91 33) -91]
Test Case: 436 | Input/Output: [(61 35 -83 36) -83]
Test Case: 437 | Input/Output: [(-74 42 31 -21) -74]
Test Case: 438 | Input/Output: [(9 39 10 -46) -46]
Test Case: 439 | Input/Output: [(5 -7 -88 -59) -88]
Test Case: 440 | Input/Output: [(-89 83 -25 -83) -89]
Test Case: 441 | Input/Output: [(63 -9 -90 -51) -90]
Test Case: 442 | Input/Output: [(-91 -41 -41 -61) -91]
Test Case: 443 | Input/Output: [(15 77 -4 -53) -53]
Test Case: 444 | Input/Output: [(-16 34 80 -84) -84]
Test Case: 445 | Input/Output: [(7 48 -80 -19) -80]
Test Case: 446 | Input/Output: [(94 27 -55 -91) -91]
Test Case: 447 | Input/Output: [(29 -51 51 43) -51]
Test Case: 448 | Input/Output: [(-85 43 -99 -13) -99]
Test Case: 449 | Input/Output: [(83 47 -63 72) -63]
Test Case: 450 | Input/Output: [(98 76 -69 -49) -69]
Test Case: 451 | Input/Output: [(11 -40 56 22) -40]
Test Case: 452 | Input/Output: [(65 99 -99 25) -99]
Test Case: 453 | Input/Output: [(-76 72 -58 -23) -76]
Test Case: 454 | Input/Output: [(-92 75 -21 99) -92]
Test Case: 455 | Input/Output: [(-79 46 97 97) -79]
Test Case: 456 | Input/Output: [(-34 12 -61 3) -61]
Test Case: 457 | Input/Output: [(-88 19 74 -85) -88]
Test Case: 458 | Input/Output: [(-83 -93 48 94) -93]
Test Case: 459 | Input/Output: [(-74 -84 5 -84) -84]
Test Case: 460 | Input/Output: [(-53 77 -12 -100) -100]
Test Case: 461 | Input/Output: [(-98 64 55 43) -98]
Test Case: 462 | Input/Output: [(-8 -63 -40 -36) -63]
Test Case: 463 | Input/Output: [(65 -98 -88 36) -98]
Test Case: 464 | Input/Output: [(56 46 17 97) 17]
Test Case: 465 | Input/Output: [(46 -43 69 -65) -65]
Test Case: 466 | Input/Output: [(72 -12 -10 -53) -53]
Test Case: 467 | Input/Output: [(-48 -27 -2 -36) -48]
Test Case: 468 | Input/Output: [(67 38 6 -33) -33]
Test Case: 469 | Input/Output: [(14 40 -51 -19) -51]
Test Case: 470 | Input/Output: [(-76 -94 -57 93) -94]
Test Case: 471 | Input/Output: [(14 -38 74 8) -38]
Test Case: 472 | Input/Output: [(68 44 20 -18) -18]
Test Case: 473 | Input/Output: [(-75 97 -97 -55) -97]
Test Case: 474 | Input/Output: [(-55 18 -62 -100) -100]
Test Case: 475 | Input/Output: [(-4 -75 27 47) -75]
Test Case: 476 | Input/Output: [(-29 -14 89 -58) -58]
Test Case: 477 | Input/Output: [(-81 -8 -90 77) -90]
Test Case: 478 | Input/Output: [(-69 88 -48 -76) -76]
Test Case: 479 | Input/Output: [(2 95 61 73) 2]
Test Case: 480 | Input/Output: [(61 82 -76 -44) -76]
Test Case: 481 | Input/Output: [(-33 -28 -26 98) -33]
Test Case: 482 | Input/Output: [(-43 -52 11 17) -52]
Test Case: 483 | Input/Output: [(68 -62 54 25) -62]
Test Case: 484 | Input/Output: [(-79 90 -73 -61) -79]
Test Case: 485 | Input/Output: [(38 57 59 97) 38]
Test Case: 486 | Input/Output: [(-60 -83 7 15) -83]
Test Case: 487 | Input/Output: [(-9 80 -28 -61) -61]
Test Case: 488 | Input/Output: [(-37 -31 100 37) -37]
Test Case: 489 | Input/Output: [(1 -13 22 50) -13]
Test Case: 490 | Input/Output: [(-63 -7 -50 60) -63]
Test Case: 491 | Input/Output: [(-3 -69 31 -79) -79]
Test Case: 492 | Input/Output: [(-8 9 -25 -30) -30]
Test Case: 493 | Input/Output: [(-44 -43 95 -20) -44]
Test Case: 494 | Input/Output: [(45 -92 -12 20) -92]
Test Case: 495 | Input/Output: [(-9 -72 -61 -13) -72]
Test Case: 496 | Input/Output: [(84 30 3 -36) -36]
Test Case: 497 | Input/Output: [(-77 -34 -36 -47) -77]
Test Case: 498 | Input/Output: [(-53 -85 1 39) -85]
Test Case: 499 | Input/Output: [(55 19 83 60) 19]
Test Case: 500 | Input/Output: [(-57 94 -26 -52) -57]
Test Case: 501 | Input/Output: [(-15 87 43 -42) -42]
Test Case: 502 | Input/Output: [(-43 -42 -89 -97) -97]
Test Case: 503 | Input/Output: [(5 83 28 -85) -85]
Test Case: 504 | Input/Output: [(-17 -18 85 70) -18]
Test Case: 505 | Input/Output: [(-75 73 90 6) -75]
Test Case: 506 | Input/Output: [(-52 32 -90 32) -90]
Test Case: 507 | Input/Output: [(-68 1 2 -82) -82]
Test Case: 508 | Input/Output: [(-34 -53 24 30) -53]
Test Case: 509 | Input/Output: [(0 -21 -77 -71) -77]
Test Case: 510 | Input/Output: [(54 -33 -4 -62) -62]
Test Case: 511 | Input/Output: [(2 72 -41 37) -41]
Test Case: 512 | Input/Output: [(-69 -42 50 28) -69]
Test Case: 513 | Input/Output: [(-13 -55 66 28) -55]
Test Case: 514 | Input/Output: [(81 39 53 -9) -9]
Test Case: 515 | Input/Output: [(-27 -28 51 -53) -53]
Test Case: 516 | Input/Output: [(43 -75 3 8) -75]
Test Case: 517 | Input/Output: [(-23 -30 25 -25) -30]
Test Case: 518 | Input/Output: [(-49 32 -89 -1) -89]
Test Case: 519 | Input/Output: [(85 -65 30 -91) -91]
Test Case: 520 | Input/Output: [(100 26 4 -54) -54]
Test Case: 521 | Input/Output: [(-77 -40 86 57) -77]
Test Case: 522 | Input/Output: [(-79 52 -38 -6) -79]
Test Case: 523 | Input/Output: [(29 37 -37 92) -37]
Test Case: 524 | Input/Output: [(-77 -12 -14 74) -77]
Test Case: 525 | Input/Output: [(-99 -73 18 -2) -99]
Test Case: 526 | Input/Output: [(-17 38 69 0) -17]
Test Case: 527 | Input/Output: [(-47 -99 -62 -16) -99]
Test Case: 528 | Input/Output: [(39 93 14 46) 14]
Test Case: 529 | Input/Output: [(-17 -35 -88 -64) -88]
Test Case: 530 | Input/Output: [(-70 -87 -19 73) -87]
Test Case: 531 | Input/Output: [(-49 79 27 56) -49]
Test Case: 532 | Input/Output: [(-48 2 -12 -45) -48]
Test Case: 533 | Input/Output: [(-22 -34 18 43) -34]
Test Case: 534 | Input/Output: [(60 31 95 -59) -59]
Test Case: 535 | Input/Output: [(56 -48 43 100) -48]
Test Case: 536 | Input/Output: [(-6 63 28 43) -6]
Test Case: 537 | Input/Output: [(53 -96 -27 -20) -96]
Test Case: 538 | Input/Output: [(-73 -48 23 56) -73]
Test Case: 539 | Input/Output: [(34 55 -79 92) -79]
Test Case: 540 | Input/Output: [(11 -2 -88 -96) -96]
Test Case: 541 | Input/Output: [(52 45 36 20) 20]
Test Case: 542 | Input/Output: [(-5 46 -63 -27) -63]
Test Case: 543 | Input/Output: [(-77 45 -35 -42) -77]
Test Case: 544 | Input/Output: [(12 72 -71 -89) -89]
Test Case: 545 | Input/Output: [(-86 67 -91 -32) -91]
Test Case: 546 | Input/Output: [(-80 75 86 -92) -92]
Test Case: 547 | Input/Output: [(27 63 -64 -75) -75]
Test Case: 548 | Input/Output: [(71 19 -10 -38) -38]
Test Case: 549 | Input/Output: [(96 16 35 41) 16]
Test Case: 550 | Input/Output: [(76 60 -5 53) -5]
Test Case: 551 | Input/Output: [(61 -57 8 -60) -60]
Test Case: 552 | Input/Output: [(21 23 -37 -97) -97]
Test Case: 553 | Input/Output: [(94 -58 79 72) -58]
Test Case: 554 | Input/Output: [(-28 -10 -78 84) -78]
Test Case: 555 | Input/Output: [(64 55 -57 -33) -57]
Test Case: 556 | Input/Output: [(-72 -80 26 41) -80]
Test Case: 557 | Input/Output: [(35 -63 -46 21) -63]
Test Case: 558 | Input/Output: [(58 60 -54 95) -54]
Test Case: 559 | Input/Output: [(60 -72 84 -86) -86]
Test Case: 560 | Input/Output: [(-24 51 14 -86) -86]
Test Case: 561 | Input/Output: [(77 -2 -22 34) -22]
Test Case: 562 | Input/Output: [(71 -87 -87 93) -87]
Test Case: 563 | Input/Output: [(35 -27 -76 37) -76]
Test Case: 564 | Input/Output: [(18 73 95 98) 18]
Test Case: 565 | Input/Output: [(57 -5 -53 -44) -53]
Test Case: 566 | Input/Output: [(-60 62 -50 70) -60]
Test Case: 567 | Input/Output: [(4 46 -58 66) -58]
Test Case: 568 | Input/Output: [(29 -9 18 -30) -30]
Test Case: 569 | Input/Output: [(26 -99 67 14) -99]
Test Case: 570 | Input/Output: [(-97 83 34 57) -97]
Test Case: 571 | Input/Output: [(-49 44 -64 75) -64]
Test Case: 572 | Input/Output: [(24 -59 -35 41) -59]
Test Case: 573 | Input/Output: [(-3 -51 73 88) -51]
Test Case: 574 | Input/Output: [(-76 -83 -30 -21) -83]
Test Case: 575 | Input/Output: [(-22 52 -70 94) -70]
Test Case: 576 | Input/Output: [(-5 84 -42 -95) -95]
Test Case: 577 | Input/Output: [(95 51 33 33) 33]
Test Case: 578 | Input/Output: [(-87 13 11 17) -87]
Test Case: 579 | Input/Output: [(-5 89 -83 -32) -83]
Test Case: 580 | Input/Output: [(18 24 48 34) 18]
Test Case: 581 | Input/Output: [(-52 -44 28 -55) -55]
Test Case: 582 | Input/Output: [(-21 -37 79 70) -37]
Test Case: 583 | Input/Output: [(33 -31 16 92) -31]
Test Case: 584 | Input/Output: [(99 33 -94 13) -94]
Test Case: 585 | Input/Output: [(-80 27 85 1) -80]
Test Case: 586 | Input/Output: [(-49 -24 48 11) -49]
Test Case: 587 | Input/Output: [(-100 38 -78 -45) -100]
Test Case: 588 | Input/Output: [(39 77 26 -46) -46]
Test Case: 589 | Input/Output: [(-72 92 77 86) -72]
Test Case: 590 | Input/Output: [(59 90 6 -12) -12]
Test Case: 591 | Input/Output: [(-74 -83 72 -25) -83]
Test Case: 592 | Input/Output: [(-51 34 30 -33) -51]
Test Case: 593 | Input/Output: [(31 63 -79 34) -79]
Test Case: 594 | Input/Output: [(55 7 -65 1) -65]
Test Case: 595 | Input/Output: [(-8 49 98 54) -8]
Test Case: 596 | Input/Output: [(72 -59 69 -12) -59]
Test Case: 597 | Input/Output: [(-21 -40 24 -16) -40]
Test Case: 598 | Input/Output: [(3 15 -17 -43) -43]
Test Case: 599 | Input/Output: [(-10 -74 13 63) -74]
Test Case: 600 | Input/Output: [(67 -47 -3 39) -47]
Test Case: 601 | Input/Output: [(79 -6 33 -88) -88]
Test Case: 602 | Input/Output: [(22 18 47 -88) -88]
Test Case: 603 | Input/Output: [(-91 -42 66 46) -91]
Test Case: 604 | Input/Output: [(37 -3 -19 24) -19]
Test Case: 605 | Input/Output: [(-12 -95 -36 50) -95]
Test Case: 606 | Input/Output: [(-8 -82 32 86) -82]
Test Case: 607 | Input/Output: [(52 -67 -15 -31) -67]
Test Case: 608 | Input/Output: [(64 -39 -12 12) -39]
Test Case: 609 | Input/Output: [(13 -69 29 74) -69]
Test Case: 610 | Input/Output: [(68 -70 0 28) -70]
Test Case: 611 | Input/Output: [(92 22 -60 -40) -60]
Test Case: 612 | Input/Output: [(95 -79 -23 97) -79]
Test Case: 613 | Input/Output: [(-77 48 70 9) -77]
Test Case: 614 | Input/Output: [(-24 74 69 63) -24]
Test Case: 615 | Input/Output: [(-75 -18 75 38) -75]
Test Case: 616 | Input/Output: [(14 32 -96 -14) -96]
Test Case: 617 | Input/Output: [(61 -46 34 -32) -46]
Test Case: 618 | Input/Output: [(40 -5 0 41) -5]
Test Case: 619 | Input/Output: [(65 -15 -51 34) -51]
Test Case: 620 | Input/Output: [(-25 62 -51 -83) -83]
Test Case: 621 | Input/Output: [(-28 -2 45 -94) -94]
Test Case: 622 | Input/Output: [(18 -37 59 -85) -85]
Test Case: 623 | Input/Output: [(-57 -63 60 27) -63]
Test Case: 624 | Input/Output: [(54 -26 -41 50) -41]
Test Case: 625 | Input/Output: [(-85 -65 48 -62) -85]
Test Case: 626 | Input/Output: [(-36 39 80 -96) -96]
Test Case: 627 | Input/Output: [(93 -68 100 77) -68]
Test Case: 628 | Input/Output: [(-95 -90 -17 -92) -95]
Test Case: 629 | Input/Output: [(1 69 9 -35) -35]
Test Case: 630 | Input/Output: [(-67 -65 -33 -41) -67]
Test Case: 631 | Input/Output: [(18 50 93 68) 18]
Test Case: 632 | Input/Output: [(-57 34 -72 81) -72]
Test Case: 633 | Input/Output: [(-3 -95 21 87) -95]
Test Case: 634 | Input/Output: [(9 -74 89 -50) -74]
Test Case: 635 | Input/Output: [(32 8 45 -14) -14]
Test Case: 636 | Input/Output: [(-33 78 27 20) -33]
Test Case: 637 | Input/Output: [(64 -24 -78 50) -78]
Test Case: 638 | Input/Output: [(5 22 93 65) 5]
Test Case: 639 | Input/Output: [(-46 -64 -90 -54) -90]
Test Case: 640 | Input/Output: [(50 -59 -59 -99) -99]
Test Case: 641 | Input/Output: [(-61 15 -28 -69) -69]
Test Case: 642 | Input/Output: [(-42 15 -68 -9) -68]
Test Case: 643 | Input/Output: [(-13 -98 -18 -31) -98]
Test Case: 644 | Input/Output: [(25 40 -37 96) -37]
Test Case: 645 | Input/Output: [(23 8 18 98) 8]
Test Case: 646 | Input/Output: [(-76 -34 21 30) -76]
Test Case: 647 | Input/Output: [(58 6 24 -14) -14]
Test Case: 648 | Input/Output: [(92 19 -24 -52) -52]
Test Case: 649 | Input/Output: [(61 -76 38 -96) -96]
Test Case: 650 | Input/Output: [(-35 99 9 -49) -49]
Test Case: 651 | Input/Output: [(57 -42 -44 -78) -78]
Test Case: 652 | Input/Output: [(20 81 -69 11) -69]
Test Case: 653 | Input/Output: [(1 48 68 -10) -10]
Test Case: 654 | Input/Output: [(-45 -25 4 -97) -97]
Test Case: 655 | Input/Output: [(69 59 38 71) 38]
Test Case: 656 | Input/Output: [(100 7 45 -43) -43]
Test Case: 657 | Input/Output: [(44 -61 91 -94) -94]
Test Case: 658 | Input/Output: [(33 66 -68 -69) -69]
Test Case: 659 | Input/Output: [(44 -89 -93 -36) -93]
Test Case: 660 | Input/Output: [(5 -56 -47 3) -56]
Test Case: 661 | Input/Output: [(13 27 7 -10) -10]
Test Case: 662 | Input/Output: [(-76 73 67 -74) -76]
Test Case: 663 | Input/Output: [(-38 -80 -100 24) -100]
Test Case: 664 | Input/Output: [(-6 41 10 83) -6]
Test Case: 665 | Input/Output: [(-68 -32 63 98) -68]
Test Case: 666 | Input/Output: [(13 75 -35 76) -35]
Test Case: 667 | Input/Output: [(20 -57 38 -65) -65]
Test Case: 668 | Input/Output: [(3 46 -60 36) -60]
Test Case: 669 | Input/Output: [(-29 43 -93 -92) -93]
Test Case: 670 | Input/Output: [(-32 -99 0 -60) -99]
Test Case: 671 | Input/Output: [(5 64 52 18) 5]
Test Case: 672 | Input/Output: [(70 35 -80 48) -80]
Test Case: 673 | Input/Output: [(89 59 52 98) 52]
Test Case: 674 | Input/Output: [(83 -84 -28 -80) -84]
Test Case: 675 | Input/Output: [(82 -89 45 33) -89]
Test Case: 676 | Input/Output: [(6 82 89 -39) -39]
Test Case: 677 | Input/Output: [(-77 11 99 -53) -77]
Test Case: 678 | Input/Output: [(-46 -38 -45 15) -46]
Test Case: 679 | Input/Output: [(18 3 21 46) 3]
Test Case: 680 | Input/Output: [(-78 -14 45 -30) -78]
Test Case: 681 | Input/Output: [(3 89 38 -69) -69]
Test Case: 682 | Input/Output: [(-32 4 58 13) -32]
Test Case: 683 | Input/Output: [(-21 -67 1 -39) -67]
Test Case: 684 | Input/Output: [(41 -20 22 45) -20]
Test Case: 685 | Input/Output: [(81 34 46 -58) -58]
Test Case: 686 | Input/Output: [(-67 -95 -24 -64) -95]
Test Case: 687 | Input/Output: [(63 15 -34 31) -34]
Test Case: 688 | Input/Output: [(76 26 -5 37) -5]
Test Case: 689 | Input/Output: [(39 40 92 23) 23]
Test Case: 690 | Input/Output: [(70 80 3 92) 3]
Test Case: 691 | Input/Output: [(-47 85 -65 -3) -65]
Test Case: 692 | Input/Output: [(-14 70 93 62) -14]
Test Case: 693 | Input/Output: [(27 -73 -92 -61) -92]
Test Case: 694 | Input/Output: [(-21 93 11 76) -21]
Test Case: 695 | Input/Output: [(41 -73 26 16) -73]
Test Case: 696 | Input/Output: [(-62 25 90 -93) -93]
Test Case: 697 | Input/Output: [(-50 41 30 27) -50]
Test Case: 698 | Input/Output: [(68 -95 -76 17) -95]
Test Case: 699 | Input/Output: [(7 -83 -67 82) -83]
Test Case: 700 | Input/Output: [(70 -13 96 -49) -49]
Test Case: 701 | Input/Output: [(-83 96 34 38) -83]
Test Case: 702 | Input/Output: [(-63 -46 59 -3) -63]
Test Case: 703 | Input/Output: [(-1 -26 49 -3) -26]
Test Case: 704 | Input/Output: [(30 -30 -26 -16) -30]
Test Case: 705 | Input/Output: [(42 90 5 -59) -59]
Test Case: 706 | Input/Output: [(-18 -54 -26 82) -54]
Test Case: 707 | Input/Output: [(3 -80 96 -70) -80]
Test Case: 708 | Input/Output: [(81 -2 -23 30) -23]
Test Case: 709 | Input/Output: [(-65 12 -98 0) -98]
Test Case: 710 | Input/Output: [(-29 50 -36 11) -36]
Test Case: 711 | Input/Output: [(84 96 -10 -86) -86]
Test Case: 712 | Input/Output: [(-84 -69 -15 27) -84]
Test Case: 713 | Input/Output: [(-31 -70 -10 59) -70]
Test Case: 714 | Input/Output: [(95 -61 100 -95) -95]
Test Case: 715 | Input/Output: [(-15 7 57 82) -15]
Test Case: 716 | Input/Output: [(-65 5 -67 -77) -77]
Test Case: 717 | Input/Output: [(-69 94 -56 -44) -69]
Test Case: 718 | Input/Output: [(72 -1 -91 -95) -95]
Test Case: 719 | Input/Output: [(25 -38 18 35) -38]
Test Case: 720 | Input/Output: [(-60 -65 17 67) -65]
Test Case: 721 | Input/Output: [(-13 37 -13 -66) -66]
Test Case: 722 | Input/Output: [(-88 0 2 -100) -100]
Test Case: 723 | Input/Output: [(50 87 -63 -96) -96]
Test Case: 724 | Input/Output: [(-74 -57 -73 72) -74]
Test Case: 725 | Input/Output: [(32 -3 52 42) -3]
Test Case: 726 | Input/Output: [(19 66 19 33) 19]
Test Case: 727 | Input/Output: [(14 -18 -72 -63) -72]
Test Case: 728 | Input/Output: [(18 -37 -20 -40) -40]
Test Case: 729 | Input/Output: [(-53 24 -89 75) -89]
Test Case: 730 | Input/Output: [(-44 -11 55 -16) -44]
Test Case: 731 | Input/Output: [(49 -88 98 -53) -88]
Test Case: 732 | Input/Output: [(-42 -12 -73 -15) -73]
Test Case: 733 | Input/Output: [(62 27 -84 -76) -84]
Test Case: 734 | Input/Output: [(3 -65 -18 -71) -71]
Test Case: 735 | Input/Output: [(-58 -14 93 -58) -58]
Test Case: 736 | Input/Output: [(-14 -65 25 -43) -65]
Test Case: 737 | Input/Output: [(-66 66 -24 100) -66]
Test Case: 738 | Input/Output: [(-73 -48 -45 6) -73]
Test Case: 739 | Input/Output: [(-71 100 19 -43) -71]
Test Case: 740 | Input/Output: [(-17 22 -53 -88) -88]
Test Case: 741 | Input/Output: [(-8 -50 -5 69) -50]
Test Case: 742 | Input/Output: [(2 25 -84 -11) -84]
Test Case: 743 | Input/Output: [(27 4 -45 99) -45]
Test Case: 744 | Input/Output: [(40 5 91 -14) -14]
Test Case: 745 | Input/Output: [(87 36 70 -37) -37]
Test Case: 746 | Input/Output: [(-86 -96 -99 -25) -99]
Test Case: 747 | Input/Output: [(-68 79 -74 -47) -74]
Test Case: 748 | Input/Output: [(84 54 88 58) 54]
Test Case: 749 | Input/Output: [(56 -10 92 -49) -49]
Test Case: 750 | Input/Output: [(-89 -8 -56 22) -89]
Test Case: 751 | Input/Output: [(-86 -70 42 76) -86]
Test Case: 752 | Input/Output: [(-42 -34 -62 4) -62]
Test Case: 753 | Input/Output: [(63 0 85 -5) -5]
Test Case: 754 | Input/Output: [(-49 -8 -23 -68) -68]
Test Case: 755 | Input/Output: [(84 -54 35 71) -54]
Test Case: 756 | Input/Output: [(-53 1 -49 43) -53]
Test Case: 757 | Input/Output: [(75 25 8 91) 8]
Test Case: 758 | Input/Output: [(-22 -81 -60 -68) -81]
Test Case: 759 | Input/Output: [(-43 -16 -11 81) -43]
Test Case: 760 | Input/Output: [(-21 -8 5 -54) -54]
Test Case: 761 | Input/Output: [(-76 44 -98 -23) -98]
Test Case: 762 | Input/Output: [(-17 62 18 37) -17]
Test Case: 763 | Input/Output: [(-16 19 -74 -98) -98]
Test Case: 764 | Input/Output: [(-54 -66 43 57) -66]
Test Case: 765 | Input/Output: [(29 -90 -46 -5) -90]
Test Case: 766 | Input/Output: [(-50 -14 -59 -25) -59]
Test Case: 767 | Input/Output: [(-79 38 -52 1) -79]
Test Case: 768 | Input/Output: [(-63 -17 66 -57) -63]
Test Case: 769 | Input/Output: [(-51 44 66 81) -51]
Test Case: 770 | Input/Output: [(69 -9 13 -60) -60]
Test Case: 771 | Input/Output: [(-51 -4 -100 -52) -100]
Test Case: 772 | Input/Output: [(89 -52 -87 95) -87]
Test Case: 773 | Input/Output: [(69 21 -20 -44) -44]
Test Case: 774 | Input/Output: [(49 -15 57 -78) -78]
Test Case: 775 | Input/Output: [(58 -29 91 1) -29]
Test Case: 776 | Input/Output: [(51 50 60 -86) -86]
Test Case: 777 | Input/Output: [(89 19 86 10) 10]
Test Case: 778 | Input/Output: [(-98 -30 -3 60) -98]
Test Case: 779 | Input/Output: [(99 -25 -80 93) -80]
Test Case: 780 | Input/Output: [(64 40 -25 42) -25]
Test Case: 781 | Input/Output: [(-5 98 51 19) -5]
Test Case: 782 | Input/Output: [(74 57 -89 -83) -89]
Test Case: 783 | Input/Output: [(50 -65 -70 1) -70]
Test Case: 784 | Input/Output: [(96 78 -14 93) -14]
Test Case: 785 | Input/Output: [(-54 -50 -30 -18) -54]
Test Case: 786 | Input/Output: [(-72 -64 94 62) -72]
Test Case: 787 | Input/Output: [(80 51 -13 -60) -60]
Test Case: 788 | Input/Output: [(-72 10 35 9) -72]
Test Case: 789 | Input/Output: [(17 45 10 -88) -88]
Test Case: 790 | Input/Output: [(2 19 66 61) 2]
Test Case: 791 | Input/Output: [(-37 -17 70 -2) -37]
Test Case: 792 | Input/Output: [(-38 38 -36 -54) -54]
Test Case: 793 | Input/Output: [(-76 83 -70 34) -76]
Test Case: 794 | Input/Output: [(-91 45 -69 83) -91]
Test Case: 795 | Input/Output: [(-21 -84 21 52) -84]
Test Case: 796 | Input/Output: [(65 -20 -22 -45) -45]
Test Case: 797 | Input/Output: [(3 68 -94 -60) -94]
Test Case: 798 | Input/Output: [(67 -92 -78 43) -92]
Test Case: 799 | Input/Output: [(-64 -95 54 18) -95]
Test Case: 800 | Input/Output: [(6 -60 -17 -44) -60]
Test Case: 801 | Input/Output: [(28 -84 91 24) -84]
Test Case: 802 | Input/Output: [(-54 -19 -74 43) -74]
Test Case: 803 | Input/Output: [(-44 -81 -76 2) -81]
Test Case: 804 | Input/Output: [(74 -72 -37 38) -72]
Test Case: 805 | Input/Output: [(20 -44 92 -72) -72]
Test Case: 806 | Input/Output: [(-19 -76 70 12) -76]
Test Case: 807 | Input/Output: [(-9 97 53 -20) -20]
Test Case: 808 | Input/Output: [(-47 -27 90 -60) -60]
Test Case: 809 | Input/Output: [(11 -38 -8 53) -38]
Test Case: 810 | Input/Output: [(71 19 -92 -88) -92]
Test Case: 811 | Input/Output: [(60 33 -100 43) -100]
Test Case: 812 | Input/Output: [(-31 -37 -44 -51) -51]
Test Case: 813 | Input/Output: [(46 -56 -69 98) -69]
Test Case: 814 | Input/Output: [(-12 -55 -89 61) -89]
Test Case: 815 | Input/Output: [(37 30 -83 66) -83]
Test Case: 816 | Input/Output: [(-35 84 77 56) -35]
Test Case: 817 | Input/Output: [(-63 66 25 -8) -63]
Test Case: 818 | Input/Output: [(1 -85 82 96) -85]
Test Case: 819 | Input/Output: [(-74 -25 -3 -70) -74]
Test Case: 820 | Input/Output: [(-66 60 81 -97) -97]
Test Case: 821 | Input/Output: [(-36 16 20 85) -36]
Test Case: 822 | Input/Output: [(16 -40 -62 -22) -62]
Test Case: 823 | Input/Output: [(-34 41 -99 -23) -99]
Test Case: 824 | Input/Output: [(-12 18 -62 33) -62]
Test Case: 825 | Input/Output: [(38 -89 23 -4) -89]
Test Case: 826 | Input/Output: [(73 31 -23 -20) -23]
Test Case: 827 | Input/Output: [(83 43 -48 -71) -71]
Test Case: 828 | Input/Output: [(1 14 -51 -73) -73]
Test Case: 829 | Input/Output: [(37 99 -72 -53) -72]
Test Case: 830 | Input/Output: [(56 22 30 -35) -35]
Test Case: 831 | Input/Output: [(24 47 87 84) 24]
Test Case: 832 | Input/Output: [(68 -21 8 -47) -47]
Test Case: 833 | Input/Output: [(86 34 15 97) 15]
Test Case: 834 | Input/Output: [(100 98 81 -21) -21]
Test Case: 835 | Input/Output: [(27 -7 -42 -73) -73]
Test Case: 836 | Input/Output: [(59 93 -19 -21) -21]
Test Case: 837 | Input/Output: [(92 55 48 -28) -28]
Test Case: 838 | Input/Output: [(35 53 -67 -82) -82]
Test Case: 839 | Input/Output: [(10 68 -35 74) -35]
Test Case: 840 | Input/Output: [(-27 16 64 -32) -32]
Test Case: 841 | Input/Output: [(10 75 79 -21) -21]
Test Case: 842 | Input/Output: [(-60 81 91 -32) -60]
Test Case: 843 | Input/Output: [(-93 -8 -18 6) -93]
Test Case: 844 | Input/Output: [(-53 54 68 44) -53]
Test Case: 845 | Input/Output: [(-5 -39 -32 97) -39]
Test Case: 846 | Input/Output: [(-55 3 -100 64) -100]
Test Case: 847 | Input/Output: [(88 52 -47 66) -47]
Test Case: 848 | Input/Output: [(-15 -100 73 74) -100]
Test Case: 849 | Input/Output: [(-1 60 -52 -8) -52]
Test Case: 850 | Input/Output: [(96 -10 -65 90) -65]
Test Case: 851 | Input/Output: [(-47 37 80 -92) -92]
Test Case: 852 | Input/Output: [(62 6 22 -4) -4]
Test Case: 853 | Input/Output: [(38 -67 33 45) -67]
Test Case: 854 | Input/Output: [(-30 84 -33 30) -33]
Test Case: 855 | Input/Output: [(-67 -20 -79 -49) -79]
Test Case: 856 | Input/Output: [(-73 -27 -35 -69) -73]
Test Case: 857 | Input/Output: [(-25 2 34 -15) -25]
Test Case: 858 | Input/Output: [(54 -17 -56 32) -56]
Test Case: 859 | Input/Output: [(-51 97 -19 -38) -51]
Test Case: 860 | Input/Output: [(26 70 63 -40) -40]
Test Case: 861 | Input/Output: [(70 -18 69 99) -18]
Test Case: 862 | Input/Output: [(72 -51 97 -31) -51]
Test Case: 863 | Input/Output: [(15 81 -22 85) -22]
Test Case: 864 | Input/Output: [(63 21 -56 89) -56]
Test Case: 865 | Input/Output: [(-21 -20 -87 -45) -87]
Test Case: 866 | Input/Output: [(-54 -69 39 86) -69]
Test Case: 867 | Input/Output: [(-87 -67 49 60) -87]
Test Case: 868 | Input/Output: [(18 16 92 -47) -47]
Test Case: 869 | Input/Output: [(52 -46 83 -15) -46]
Test Case: 870 | Input/Output: [(94 8 -27 66) -27]
Test Case: 871 | Input/Output: [(52 1 96 -14) -14]
Test Case: 872 | Input/Output: [(83 -51 -34 82) -51]
Test Case: 873 | Input/Output: [(-67 77 94 58) -67]
Test Case: 874 | Input/Output: [(-25 -15 -56 -41) -56]
Test Case: 875 | Input/Output: [(-23 -38 -6 -44) -44]
Test Case: 876 | Input/Output: [(-94 -43 -4 66) -94]
Test Case: 877 | Input/Output: [(84 28 1 50) 1]
Test Case: 878 | Input/Output: [(-96 -51 -22 70) -96]
Test Case: 879 | Input/Output: [(82 88 -5 -100) -100]
Test Case: 880 | Input/Output: [(-86 53 -69 92) -86]
Test Case: 881 | Input/Output: [(69 26 -48 32) -48]
Test Case: 882 | Input/Output: [(51 30 -70 0) -70]
Test Case: 883 | Input/Output: [(-80 4 -19 -78) -80]
Test Case: 884 | Input/Output: [(-15 -9 91 -76) -76]
Test Case: 885 | Input/Output: [(-42 77 72 69) -42]
Test Case: 886 | Input/Output: [(-2 79 -29 43) -29]
Test Case: 887 | Input/Output: [(29 87 87 37) 29]
Test Case: 888 | Input/Output: [(-24 13 -58 58) -58]
Test Case: 889 | Input/Output: [(-69 88 23 -40) -69]
Test Case: 890 | Input/Output: [(90 -93 59 -93) -93]
Test Case: 891 | Input/Output: [(-100 20 76 83) -100]
Test Case: 892 | Input/Output: [(62 -49 -38 -48) -49]
Test Case: 893 | Input/Output: [(-62 22 -72 21) -72]
Test Case: 894 | Input/Output: [(47 20 30 59) 20]
Test Case: 895 | Input/Output: [(47 26 -38 -48) -48]
Test Case: 896 | Input/Output: [(28 13 83 -98) -98]
Test Case: 897 | Input/Output: [(-45 46 -16 26) -45]
Test Case: 898 | Input/Output: [(15 -89 52 -24) -89]
Test Case: 899 | Input/Output: [(5 -66 14 -1) -66]
Test Case: 900 | Input/Output: [(91 54 -83 -24) -83]
Test Case: 901 | Input/Output: [(-52 2 -33 -52) -52]
Test Case: 902 | Input/Output: [(-79 22 14 25) -79]
Test Case: 903 | Input/Output: [(-32 35 -23 41) -32]
Test Case: 904 | Input/Output: [(27 -90 0 -3) -90]
Test Case: 905 | Input/Output: [(16 4 -74 73) -74]
Test Case: 906 | Input/Output: [(-63 19 -87 -97) -97]
Test Case: 907 | Input/Output: [(58 14 63 -67) -67]
Test Case: 908 | Input/Output: [(90 32 57 26) 26]
Test Case: 909 | Input/Output: [(-24 -13 -32 66) -32]
Test Case: 910 | Input/Output: [(-81 29 49 -77) -81]
Test Case: 911 | Input/Output: [(9 -79 42 27) -79]
Test Case: 912 | Input/Output: [(68 -38 -56 30) -56]
Test Case: 913 | Input/Output: [(-41 10 96 -40) -41]
Test Case: 914 | Input/Output: [(70 -2 5 74) -2]
Test Case: 915 | Input/Output: [(8 -99 66 -28) -99]
Test Case: 916 | Input/Output: [(-2 75 23 12) -2]
Test Case: 917 | Input/Output: [(-71 91 -30 -28) -71]
Test Case: 918 | Input/Output: [(-26 59 -58 90) -58]
Test Case: 919 | Input/Output: [(93 20 82 -44) -44]
Test Case: 920 | Input/Output: [(-17 -36 5 34) -36]
Test Case: 921 | Input/Output: [(13 68 -47 -56) -56]
Test Case: 922 | Input/Output: [(-66 40 -80 80) -80]
Test Case: 923 | Input/Output: [(-23 32 12 -53) -53]
Test Case: 924 | Input/Output: [(14 -38 -44 -37) -44]
Test Case: 925 | Input/Output: [(36 58 22 56) 22]
Test Case: 926 | Input/Output: [(67 97 1 98) 1]
Test Case: 927 | Input/Output: [(78 -94 57 -32) -94]
Test Case: 928 | Input/Output: [(96 19 24 40) 19]
Test Case: 929 | Input/Output: [(95 24 88 -83) -83]
Test Case: 930 | Input/Output: [(99 4 -10 -45) -45]
Test Case: 931 | Input/Output: [(-7 -47 57 -31) -47]
Test Case: 932 | Input/Output: [(-63 16 58 -74) -74]
Test Case: 933 | Input/Output: [(-59 66 -9 -79) -79]
Test Case: 934 | Input/Output: [(-43 -55 -74 -28) -74]
Test Case: 935 | Input/Output: [(-19 99 13 87) -19]
Test Case: 936 | Input/Output: [(-45 -75 65 -43) -75]
Test Case: 937 | Input/Output: [(43 55 30 -25) -25]
Test Case: 938 | Input/Output: [(5 38 89 20) 5]
Test Case: 939 | Input/Output: [(-13 -28 52 -43) -43]
Test Case: 940 | Input/Output: [(-44 -1 -33 -74) -74]
Test Case: 941 | Input/Output: [(46 75 -14 -69) -69]
Test Case: 942 | Input/Output: [(-2 82 -88 -17) -88]
Test Case: 943 | Input/Output: [(77 14 -86 31) -86]
Test Case: 944 | Input/Output: [(-98 -53 98 -28) -98]
Test Case: 945 | Input/Output: [(49 92 99 52) 49]
Test Case: 946 | Input/Output: [(-48 49 100 -44) -48]
Test Case: 947 | Input/Output: [(-20 55 23 -43) -43]
Test Case: 948 | Input/Output: [(-22 -43 -33 -73) -73]
Test Case: 949 | Input/Output: [(-38 79 76 81) -38]
Test Case: 950 | Input/Output: [(-73 32 74 23) -73]
Test Case: 951 | Input/Output: [(83 -67 -65 -12) -67]
Test Case: 952 | Input/Output: [(35 14 -28 50) -28]
Test Case: 953 | Input/Output: [(-22 -31 41 63) -31]
Test Case: 954 | Input/Output: [(-8 -92 -66 95) -92]
Test Case: 955 | Input/Output: [(7 28 65 -84) -84]
Test Case: 956 | Input/Output: [(-33 6 -30 14) -33]
Test Case: 957 | Input/Output: [(-88 57 -8 -44) -88]
Test Case: 958 | Input/Output: [(4 12 8 86) 4]
Test Case: 959 | Input/Output: [(-51 72 80 -18) -51]
Test Case: 960 | Input/Output: [(9 -96 -92 -35) -96]
Test Case: 961 | Input/Output: [(-11 40 25 -2) -11]
Test Case: 962 | Input/Output: [(64 40 -41 47) -41]
Test Case: 963 | Input/Output: [(4 16 -94 24) -94]
Test Case: 964 | Input/Output: [(46 29 -34 -47) -47]
Test Case: 965 | Input/Output: [(-32 66 -70 -37) -70]
Test Case: 966 | Input/Output: [(99 87 54 -14) -14]
Test Case: 967 | Input/Output: [(92 -26 4 12) -26]
Test Case: 968 | Input/Output: [(-99 -97 92 53) -99]
Test Case: 969 | Input/Output: [(1 -30 86 7) -30]
Test Case: 970 | Input/Output: [(-95 -99 -45 22) -99]
Test Case: 971 | Input/Output: [(44 -87 -67 37) -87]
Test Case: 972 | Input/Output: [(60 75 -78 13) -78]
Test Case: 973 | Input/Output: [(62 -84 37 -71) -84]
Test Case: 974 | Input/Output: [(-97 -96 -26 33) -97]
Test Case: 975 | Input/Output: [(-36 9 -95 6) -95]
Test Case: 976 | Input/Output: [(-12 60 65 -97) -97]
Test Case: 977 | Input/Output: [(26 -64 5 -69) -69]
Test Case: 978 | Input/Output: [(-42 -70 53 -40) -70]
Test Case: 979 | Input/Output: [(62 -69 -46 62) -69]
Test Case: 980 | Input/Output: [(-90 -63 -92 9) -92]
Test Case: 981 | Input/Output: [(89 -89 98 86) -89]
Test Case: 982 | Input/Output: [(70 -30 90 43) -30]
Test Case: 983 | Input/Output: [(6 16 97 17) 6]
Test Case: 984 | Input/Output: [(12 17 24 29) 12]
Test Case: 985 | Input/Output: [(66 -9 9 96) -9]
Test Case: 986 | Input/Output: [(73 -57 100 -65) -65]
Test Case: 987 | Input/Output: [(82 -22 -60 94) -60]
Test Case: 988 | Input/Output: [(63 -85 -38 6) -85]
Test Case: 989 | Input/Output: [(59 79 43 11) 11]
Test Case: 990 | Input/Output: [(-73 79 14 -75) -75]
Test Case: 991 | Input/Output: [(-30 65 33 -77) -77]
Test Case: 992 | Input/Output: [(76 41 99 39) 39]
Test Case: 993 | Input/Output: [(59 -81 35 -71) -81]
Test Case: 994 | Input/Output: [(31 23 99 30) 23]
Test Case: 995 | Input/Output: [(-29 15 -58 -2) -58]
Test Case: 996 | Input/Output: [(-18 27 -45 59) -45]
Test Case: 997 | Input/Output: [(-93 -61 -45 -91) -93]
Test Case: 998 | Input/Output: [(67 -99 100 -74) -99]
Test Case: 999 | Input/Output: [(-56 86 57 37) -56]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -6 55 -104 5 -110 99 33 53 -5 63 2 98 -56 -104 -39 -36
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[75 75 75 81] 75] [[-24 -3 -3 -3] -24] [[-80 13 -80 -80] -80] [[-3 14 14 14] -3] [[83 83 83 40] 40] [[-80 -90 -80 -80] -90] [[85 -62 85 85] -62] [[73 -34 -34 -34] -34] [[90 90 -84 90] -84] [[38 75 75 75] 38] [(-9 -9 -9 -9) -9] [(-97 -97 -97 -97) -97] [(93 93 93 93) 93] [(-78 -78 -78 -78) -78] [(73 73 73 73) 73] [(43 76 94 87) 43] [(69 60 45 65) 45] [(54 4 47 62) 4] [(37 100 83 95) 37] [(98 32 65 8) 8] [(96 91 41 37) 37] [(62 48 94 92) 48] [(73 19 26 13) 13] [(71 20 77 88) 20] [(47 69 87 25) 25] [(25 66 95 98) 25] [(41 44 19 72) 19] [(45 31 81 59) 31] [(35 74 72 56) 35] [(74 12 24 0) 0] [(51 18 7 11) 7] [(18 50 20 33) 18] [(15 12 92 33) 12] [(91 91 36 94) 36] [(52 45 32 9) 9] [(-49 -29 -13 -32) -49] [(5 60 -76 -56) -76] [(-91 63 -2 -41) -91] [(-60 -76 -76 26) -76] [(-74 22 22 -95) -95] [(95 84 -64 68) -64] [(77 1 -89 -1) -89] [(19 34 -90 99) -90] [(88 -19 -91 21) -91] [(-11 79 75 -56) -56] [(-21 26 67 52) -21] [(-82 2 -67 -38) -82] [(71 -96 42 74) -96] [(9 -13 59 -89) -89] [(-34 56 -7 -89) -89] [(67 8 60 90) 8] [(-95 62 -30 35) -95] [(30 -48 -17 5) -48] [(8 -51 -49 38) -51] [(9 -72 64 23) -72] [(47 -71 5 32) -71] [(86 -54 -94 61) -94] [(-57 16 65 -80) -80] [(-38 55 40 -63) -63] [(-3 8 -67 -17) -67] [(-95 92 43 30) -95] [(47 71 47 3) 3] [(-51 45 -16 -3) -51] [(1 44 74 -23) -23] [(2 94 -89 12) -89] [(-17 -72 23 -2) -72] [(-32 -67 20 23) -67] [(-97 98 -2 25) -97] [(87 -57 -29 45) -57] [(-86 22 4 93) -86] [(-40 -43 -13 48) -43] [(-41 56 59 -48) -48] [(-89 -15 -84 15) -89] [(-56 -81 95 -28) -81] [(-61 10 -24 100) -61] [(-62 2 33 9) -62] [(-57 -85 75 70) -85] [(49 95 -100 31) -100] [(-70 -18 -27 -11) -70] [(75 31 -60 -82) -82] [(-74 53 78 9) -74] [(-100 88 13 -32) -100] [(15 51 -84 35) -84] [(-35 -19 -27 26) -35] [(-17 4 -41 20) -41] [(53 -89 -4 61) -89] [(-61 87 53 1) -61] [(65 -100 22 50) -100] [(35 4 -75 -48) -75] [(-73 49 87 46) -73] [(19 69 8 -96) -96] [(-48 100 -43 2) -48] [(88 75 27 73) 27] [(-4 63 -46 -78) -78] [(-33 54 -35 -34) -35])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 75                  | Program output: 81                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 40                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 87                 
Correct output: 45                  | Program output: 65                 
Correct output: 4                   | Program output: 62                 
Correct output: 37                  | Program output: 95                 
Correct output: 8                   | Program output: 8                  
Correct output: 37                  | Program output: 37                 
Correct output: 48                  | Program output: 92                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 88                 
Correct output: 25                  | Program output: 25                 
Correct output: 25                  | Program output: 98                 
Correct output: 19                  | Program output: 72                 
Correct output: 31                  | Program output: 59                 
Correct output: 35                  | Program output: 56                 
Correct output: 0                   | Program output: 0                  
Correct output: 7                   | Program output: 11                 
Correct output: 18                  | Program output: 33                 
Correct output: 12                  | Program output: 33                 
Correct output: 36                  | Program output: 94                 
Correct output: 9                   | Program output: 9                  
Correct output: -49                 | Program output: -32                
Correct output: -76                 | Program output: -56                
Correct output: -91                 | Program output: -41                
Correct output: -76                 | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: -64                 | Program output: 68                 
Correct output: -89                 | Program output: -1                 
Correct output: -90                 | Program output: 99                 
Correct output: -91                 | Program output: 21                 
Correct output: -56                 | Program output: -56                
Correct output: -21                 | Program output: 52                 
Correct output: -82                 | Program output: -38                
Correct output: -96                 | Program output: 74                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -89                
Correct output: 8                   | Program output: 90                 
Correct output: -95                 | Program output: 35                 
Correct output: -48                 | Program output: 5                  
Correct output: -51                 | Program output: 38                 
Correct output: -72                 | Program output: 23                 
Correct output: -71                 | Program output: 32                 
Correct output: -94                 | Program output: 61                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -63                
Correct output: -67                 | Program output: -17                
Correct output: -95                 | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -3                 
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: 12                 
Correct output: -72                 | Program output: -2                 
Correct output: -67                 | Program output: 23                 
Correct output: -97                 | Program output: 25                 
Correct output: -57                 | Program output: 45                 
Correct output: -86                 | Program output: 93                 
Correct output: -43                 | Program output: 48                 
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: 15                 
Correct output: -81                 | Program output: -28                
Correct output: -61                 | Program output: 100                
Correct output: -62                 | Program output: 9                  
Correct output: -85                 | Program output: 70                 
Correct output: -100                | Program output: 31                 
Correct output: -70                 | Program output: -11                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: 9                  
Correct output: -100                | Program output: -32                
Correct output: -84                 | Program output: 35                 
Correct output: -35                 | Program output: 26                 
Correct output: -41                 | Program output: 20                 
Correct output: -89                 | Program output: 61                 
Correct output: -61                 | Program output: 1                  
Correct output: -100                | Program output: 50                 
Correct output: -75                 | Program output: -48                
Correct output: -73                 | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: 2                  
Correct output: 27                  | Program output: 73                 
Correct output: -78                 | Program output: -78                
Correct output: -35                 | Program output: -34                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush})
Lexicase best program: (exec_y_when_autoconstructing (integer_lt boolean_empty boolean_rot integer_shove) boolean_xor integer_dup in4 exec_empty print_integer boolean_frominteger exec_dup_times (exec_when (exec_flush)))
Lexicase best errors: [1 0 1 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 18
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush})
Zero cases best program: (exec_y_when_autoconstructing (integer_lt boolean_empty boolean_rot integer_shove) boolean_xor integer_dup in4 exec_empty print_integer boolean_frominteger exec_dup_times (exec_when (exec_flush)))
Zero cases best errors: [1 0 1 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 18
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 10 3 3 10 2 1000 1000 3 1000)
Population mean number of elite cases: 4.03
Count of perfect (error zero) individuals by case: (0 10 3 3 10 2 0 0 3 0)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_pop} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 0, :instruction integer_gt})
Best program: (integer_yankdup exec_rot (boolean_swap integer_pop) (boolean_empty) () boolean_dup exec_dup_times () exec_dup (integer_dup boolean_flush integer_lt boolean_not print_integer integer_eq in4 boolean_stackdepth) in1 exec_empty integer_dup_times integer_lte integer_mult integer_inc boolean_stackdepth boolean_rot exec_when () integer_gt)
Errors: [1 0 1 0 0 1 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 26
Size: 33
Percent parens: 0.212
--- Population Statistics ---
Average total errors in population: 9.969
Median total errors in population: 10
Error averages by case: (1.0 0.99 0.997 0.997 0.99 0.998 1.0 1.0 0.997 1.0)
Error minima by case: (1 0 0 0 0 0 1 1 0 1)
Average genome size in population (length): 48.327
Average program size in population (points): 66.806
Average percent parens in population: 0.284
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.249
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 474540
--- Timings ---
Current time: 1559582645944 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.9%
Reproduction:         0.7 seconds, 27.4%
Fitness Testing:      1.8 seconds, 68.7%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 83                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 94                 
Correct output: 45                  | Program output: 45                 
Correct output: 4                   | Program output: 47                 
Correct output: 37                  | Program output: 83                 
Correct output: 8                   | Program output: 65                 
Correct output: 37                  | Program output: 41                 
Correct output: 48                  | Program output: 94                 
Correct output: 13                  | Program output: 26                 
Correct output: 20                  | Program output: 77                 
Correct output: 25                  | Program output: 87                 
Correct output: 25                  | Program output: 95                 
Correct output: 19                  | Program output: 19                 
Correct output: 31                  | Program output: 81                 
Correct output: 35                  | Program output: 72                 
Correct output: 0                   | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 20                 
Correct output: 12                  | Program output: 92                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 32                 
Correct output: -49                 | Program output: -13                
Correct output: -76                 | Program output: -76                
Correct output: -91                 | Program output: -2                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: 22                 
Correct output: -64                 | Program output: -64                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: 75                 
Correct output: -21                 | Program output: 67                 
Correct output: -82                 | Program output: -67                
Correct output: -96                 | Program output: 42                 
Correct output: -89                 | Program output: 59                 
Correct output: -89                 | Program output: -7                 
Correct output: 8                   | Program output: 60                 
Correct output: -95                 | Program output: -30                
Correct output: -48                 | Program output: -17                
Correct output: -51                 | Program output: -49                
Correct output: -72                 | Program output: 64                 
Correct output: -71                 | Program output: 5                  
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: 65                 
Correct output: -63                 | Program output: 40                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: 43                 
Correct output: 3                   | Program output: 47                 
Correct output: -51                 | Program output: -16                
Correct output: -23                 | Program output: 74                 
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: 23                 
Correct output: -67                 | Program output: 20                 
Correct output: -97                 | Program output: -2                 
Correct output: -57                 | Program output: -29                
Correct output: -86                 | Program output: 4                  
Correct output: -43                 | Program output: -13                
Correct output: -48                 | Program output: 59                 
Correct output: -89                 | Program output: -84                
Correct output: -81                 | Program output: 95                 
Correct output: -61                 | Program output: -24                
Correct output: -62                 | Program output: 33                 
Correct output: -85                 | Program output: 75                 
Correct output: -100                | Program output: -100               
Correct output: -70                 | Program output: -27                
Correct output: -82                 | Program output: -60                
Correct output: -74                 | Program output: 78                 
Correct output: -100                | Program output: 13                 
Correct output: -84                 | Program output: -84                
Correct output: -35                 | Program output: -27                
Correct output: -41                 | Program output: -41                
Correct output: -89                 | Program output: -4                 
Correct output: -61                 | Program output: 53                 
Correct output: -100                | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: 87                 
Correct output: -96                 | Program output: 8                  
Correct output: -48                 | Program output: -43                
Correct output: 27                  | Program output: 27                 
Correct output: -78                 | Program output: -46                
Correct output: -35                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 2, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*count})
Lexicase best program: (boolean_invert_second_then_and integer_empty integer_yankdup tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank in3 print_integer boolean_stackdepth exec_eq integer_lte exec_do*while (boolean_empty) boolean_pop integer_dup_times exec_flush integer_shove) () (boolean_and integer_mult exec_do*range () boolean_frominteger exec_when (integer_eq exec_do*times (integer_stackdepth exec_eq boolean_eq exec_do*count ()))))
Lexicase best errors: [0 0 0 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 39
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 2, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*count})
Zero cases best program: (boolean_invert_second_then_and integer_empty integer_yankdup tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank in3 print_integer boolean_stackdepth exec_eq integer_lte exec_do*while (boolean_empty) boolean_pop integer_dup_times exec_flush integer_shove) () (boolean_and integer_mult exec_do*range () boolean_frominteger exec_when (integer_eq exec_do*times (integer_stackdepth exec_eq boolean_eq exec_do*count ()))))
Zero cases best errors: [0 0 0 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 39
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (903 220 217 213 217 686 213 217 899 468)
Population mean number of elite cases: 4.25
Count of perfect (error zero) individuals by case: (903 220 217 213 217 686 213 217 899 468)
Population mean number of perfect (error zero) cases: 4.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_gte} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_empty} {:close 0, :instruction tag_boolean_619} {:close 0, :instruction print_exec} {:close 0, :instruction exec_pop} {:close 0, :instruction in4})
Best program: (exec_rot (boolean_rot boolean_or integer_pop exec_do*count () exec_noop) (exec_stackdepth) (in3 print_integer integer_min in4 exec_swap () (exec_do*times (exec_while () integer_dup_items exec_stackdepth integer_gte in3 integer_gte) boolean_empty) exec_if (integer_fromboolean exec_rot (exec_do*count (boolean_and exec_yank exec_yank boolean_frominteger exec_stackdepth integer_yank exec_noop boolean_or print_integer integer_mod) exec_when (boolean_frominteger) integer_add boolean_invert_second_then_and integer_eq print_integer in3) (boolean_dup_items boolean_invert_first_then_and boolean_flush exec_flush integer_empty exec_yankdup integer_gt exec_do*count () print_boolean) (integer_dup_times boolean_dup_times exec_dup_times (boolean_xor integer_min integer_flush exec_dup (exec_dup (boolean_shove boolean_frominteger) integer_inc integer_shove exec_empty integer_min boolean_xor boolean_xor) boolean_empty tag_boolean_619 print_exec (exec_pop (in4))))) ()))
Errors: [0 0 0 1 0 0 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 71
Size: 93
Percent parens: 0.237
--- Population Statistics ---
Average total errors in population: 5.747
Median total errors in population: 6
Error averages by case: (0.097 0.78 0.783 0.787 0.783 0.314 0.787 0.783 0.101 0.532)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.61
Average program size in population (points): 67.905
Average percent parens in population: 0.261
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.494
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 151
Genome diversity (% unique genomes):	 0.494
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 154
Syntactic diversity (% unique Push programs):	 0.482
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 906775
--- Timings ---
Current time: 1559582648758 milliseconds
Total Time:           5.4 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         2.4 seconds, 45.2%
Fitness Testing:      2.4 seconds, 45.0%
Report:               0.4 seconds,  7.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -24                
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: -3                 
Correct output: 40                  | Program output: 83                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: 73                 
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 38                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 43                 
Correct output: 45                  | Program output: 69                 
Correct output: 4                   | Program output: 54                 
Correct output: 37                  | Program output: 37                 
Correct output: 8                   | Program output: 98                 
Correct output: 37                  | Program output: 96                 
Correct output: 48                  | Program output: 62                 
Correct output: 13                  | Program output: 73                 
Correct output: 20                  | Program output: 71                 
Correct output: 25                  | Program output: 47                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 41                 
Correct output: 31                  | Program output: 45                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 74                 
Correct output: 7                   | Program output: 51                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 15                 
Correct output: 36                  | Program output: 91                 
Correct output: 9                   | Program output: 52                 
Correct output: -49                 | Program output: -49                
Correct output: -76                 | Program output: 5                  
Correct output: -91                 | Program output: -91                
Correct output: -76                 | Program output: -60                
Correct output: -95                 | Program output: -74                
Correct output: -64                 | Program output: 95                 
Correct output: -89                 | Program output: 77                 
Correct output: -90                 | Program output: 19                 
Correct output: -91                 | Program output: 88                 
Correct output: -56                 | Program output: -11                
Correct output: -21                 | Program output: -21                
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: 71                 
Correct output: -89                 | Program output: 9                  
Correct output: -89                 | Program output: -34                
Correct output: 8                   | Program output: 67                 
Correct output: -95                 | Program output: -95                
Correct output: -48                 | Program output: 30                 
Correct output: -51                 | Program output: 8                  
Correct output: -72                 | Program output: 9                  
Correct output: -71                 | Program output: 47                 
Correct output: -94                 | Program output: 86                 
Correct output: -80                 | Program output: -57                
Correct output: -63                 | Program output: -38                
Correct output: -67                 | Program output: -3                 
Correct output: -95                 | Program output: -95                
Correct output: 3                   | Program output: 47                 
Correct output: -51                 | Program output: -51                
Correct output: -23                 | Program output: 1                  
Correct output: -89                 | Program output: 2                  
Correct output: -72                 | Program output: -17                
Correct output: -67                 | Program output: -32                
Correct output: -97                 | Program output: -97                
Correct output: -57                 | Program output: 87                 
Correct output: -86                 | Program output: -86                
Correct output: -43                 | Program output: -40                
Correct output: -48                 | Program output: -41                
Correct output: -89                 | Program output: -89                
Correct output: -81                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -85                 | Program output: -57                
Correct output: -100                | Program output: 49                 
Correct output: -70                 | Program output: -70                
Correct output: -82                 | Program output: 75                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: 15                 
Correct output: -35                 | Program output: -35                
Correct output: -41                 | Program output: -17                
Correct output: -89                 | Program output: 53                 
Correct output: -61                 | Program output: -61                
Correct output: -100                | Program output: 65                 
Correct output: -75                 | Program output: 35                 
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: 19                 
Correct output: -48                 | Program output: -48                
Correct output: 27                  | Program output: 88                 
Correct output: -78                 | Program output: -4                 
Correct output: -35                 | Program output: -33                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_or} {:close 0, :instruction 19} {:close 0, :instruction 21} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction 52} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 3, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction print_boolean} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_dup_items} {:close 1, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_items} {:close 2, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_619} {:close 0, :instruction print_exec} {:close 0, :instruction exec_pop} {:close 0, :instruction in4})
Lexicase best program: (exec_rot (boolean_rot boolean_or integer_pop exec_s_when_autoconstructing (exec_yankdup boolean_and integer_swap exec_if () (exec_k (boolean_or 19 21 boolean_stackdepth integer_add boolean_yankdup) (boolean_dup_items boolean_rot 52 integer_shove boolean_and exec_y (exec_y_when_autoconstructing (integer_max integer_rot integer_stackdepth integer_stackdepth print_newline integer_gt integer_dup_times))) integer_stackdepth boolean_dup_times boolean_and integer_dup_times) exec_noop print_boolean print_boolean) (integer_min boolean_or in1 exec_when () boolean_dup boolean_pop print_integer integer_stackdepth exec_while (boolean_shove boolean_dup_items boolean_shove integer_add exec_y (integer_min integer_gte boolean_yankdup exec_do*while () integer_dup_items print_newline) integer_lt boolean_invert_first_then_and boolean_invert_second_then_and exec_rot (exec_do*while (exec_dup_items boolean_shove)) (boolean_yankdup exec_shove (exec_do*range (boolean_yankdup boolean_and tag_boolean_619 print_exec (exec_pop (in4))))) ())) ()) () ())
Lexicase best errors: [1 0 1 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 98
Percent parens: 0.255
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_or} {:close 0, :instruction 19} {:close 0, :instruction 21} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction 52} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 3, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction print_boolean} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_dup_items} {:close 1, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_items} {:close 2, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_619} {:close 0, :instruction print_exec} {:close 0, :instruction exec_pop} {:close 0, :instruction in4})
Zero cases best program: (exec_rot (boolean_rot boolean_or integer_pop exec_s_when_autoconstructing (exec_yankdup boolean_and integer_swap exec_if () (exec_k (boolean_or 19 21 boolean_stackdepth integer_add boolean_yankdup) (boolean_dup_items boolean_rot 52 integer_shove boolean_and exec_y (exec_y_when_autoconstructing (integer_max integer_rot integer_stackdepth integer_stackdepth print_newline integer_gt integer_dup_times))) integer_stackdepth boolean_dup_times boolean_and integer_dup_times) exec_noop print_boolean print_boolean) (integer_min boolean_or in1 exec_when () boolean_dup boolean_pop print_integer integer_stackdepth exec_while (boolean_shove boolean_dup_items boolean_shove integer_add exec_y (integer_min integer_gte boolean_yankdup exec_do*while () integer_dup_items print_newline) integer_lt boolean_invert_first_then_and boolean_invert_second_then_and exec_rot (exec_do*while (exec_dup_items boolean_shove)) (boolean_yankdup exec_shove (exec_do*range (boolean_yankdup boolean_and tag_boolean_619 print_exec (exec_pop (in4))))) ())) ()) () ())
Zero cases best errors: [1 0 1 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 98
Percent parens: 0.255
--- Lexicase Population Statistics ---
Count of elite individuals by case: (131 184 1000 131 573 573 184 184 184 131)
Population mean number of elite cases: 3.28
Count of perfect (error zero) individuals by case: (131 184 0 131 573 573 184 184 184 131)
Population mean number of perfect (error zero) cases: 2.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_eq} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction 48} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction 96} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction 32} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_integer_125} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and})
Best program: (integer_lte boolean_not integer_div exec_noop exec_dup_times (boolean_invert_second_then_and integer_shove integer_dup_times boolean_swap integer_gte integer_eq) in1 print_integer exec_s (exec_noop exec_rot (integer_swap) (integer_stackdepth exec_shove (boolean_dup_items 48)) (integer_mult exec_dup (exec_empty integer_yank integer_swap exec_k (integer_eq) (integer_flush) exec_rot (integer_rot integer_yank boolean_frominteger integer_dup_items integer_gt boolean_or exec_empty boolean_dup_times integer_swap integer_gte boolean_shove exec_yankdup exec_k_when_autoconstructing (boolean_flush 96 exec_dup (exec_s (integer_rot 32 in3 integer_div integer_dup boolean_dup_items tag_integer_125 exec_do*count (exec_when () integer_mult exec_do*while (integer_inc in4 boolean_yankdup exec_rot (exec_s_when_autoconstructing (exec_y_when_autoconstructing (boolean_dup_items boolean_and)) () ()) () ()))) () ())) ()) () ()))) () ())
Errors: [1 0 1 1 1 1 0 0 0 1]
Total: 6
Mean: 0.6
Genome size: 66
Size: 97
Percent parens: 0.320
--- Population Statistics ---
Average total errors in population: 7.725
Median total errors in population: 8
Error averages by case: (0.869 0.816 1.0 0.869 0.427 0.427 0.816 0.816 0.816 0.869)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 46.96
Average program size in population (points): 63.999
Average percent parens in population: 0.256
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9915
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 82
Genome diversity (% unique genomes):	 0.644
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 86
Syntactic diversity (% unique Push programs):	 0.626
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1391509
--- Timings ---
Current time: 1559582652148 milliseconds
Total Time:           8.6 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.5 seconds, 53.0%
Fitness Testing:      3.0 seconds, 34.8%
Report:               0.9 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 75                  | Program output: 81                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 40                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 87                 
Correct output: 45                  | Program output: 65                 
Correct output: 4                   | Program output: 62                 
Correct output: 37                  | Program output: 95                 
Correct output: 8                   | Program output: 8                  
Correct output: 37                  | Program output: 37                 
Correct output: 48                  | Program output: 92                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 88                 
Correct output: 25                  | Program output: 25                 
Correct output: 25                  | Program output: 98                 
Correct output: 19                  | Program output: 72                 
Correct output: 31                  | Program output: 59                 
Correct output: 35                  | Program output: 56                 
Correct output: 0                   | Program output: 0                  
Correct output: 7                   | Program output: 11                 
Correct output: 18                  | Program output: 33                 
Correct output: 12                  | Program output: 33                 
Correct output: 36                  | Program output: 94                 
Correct output: 9                   | Program output: 9                  
Correct output: -49                 | Program output: -32                
Correct output: -76                 | Program output: -56                
Correct output: -91                 | Program output: -41                
Correct output: -76                 | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: -64                 | Program output: 68                 
Correct output: -89                 | Program output: -1                 
Correct output: -90                 | Program output: 99                 
Correct output: -91                 | Program output: 21                 
Correct output: -56                 | Program output: -56                
Correct output: -21                 | Program output: 52                 
Correct output: -82                 | Program output: -38                
Correct output: -96                 | Program output: 74                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -89                
Correct output: 8                   | Program output: 90                 
Correct output: -95                 | Program output: 35                 
Correct output: -48                 | Program output: 5                  
Correct output: -51                 | Program output: 38                 
Correct output: -72                 | Program output: 23                 
Correct output: -71                 | Program output: 32                 
Correct output: -94                 | Program output: 61                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -63                
Correct output: -67                 | Program output: -17                
Correct output: -95                 | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -3                 
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: 12                 
Correct output: -72                 | Program output: -2                 
Correct output: -67                 | Program output: 23                 
Correct output: -97                 | Program output: 25                 
Correct output: -57                 | Program output: 45                 
Correct output: -86                 | Program output: 93                 
Correct output: -43                 | Program output: 48                 
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: 15                 
Correct output: -81                 | Program output: -28                
Correct output: -61                 | Program output: 100                
Correct output: -62                 | Program output: 9                  
Correct output: -85                 | Program output: 70                 
Correct output: -100                | Program output: 31                 
Correct output: -70                 | Program output: -11                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: 9                  
Correct output: -100                | Program output: -32                
Correct output: -84                 | Program output: 35                 
Correct output: -35                 | Program output: 26                 
Correct output: -41                 | Program output: 20                 
Correct output: -89                 | Program output: 61                 
Correct output: -61                 | Program output: 1                  
Correct output: -100                | Program output: 50                 
Correct output: -75                 | Program output: -48                
Correct output: -73                 | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: 2                  
Correct output: 27                  | Program output: 73                 
Correct output: -78                 | Program output: -78                
Correct output: -35                 | Program output: -34                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_or} {:close 0, :instruction 19} {:close 0, :instruction 21} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction 52} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 3, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction print_boolean} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_dup_items} {:close 1, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_items} {:close 2, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y} {:close 2, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dec})
Lexicase best program: (exec_s_when_autoconstructing (exec_yankdup boolean_and integer_swap exec_if () (exec_k (boolean_or 19 21 boolean_stackdepth integer_add boolean_yankdup) (boolean_dup_items integer_yankdup 52 integer_shove boolean_and exec_y (exec_k (in4 integer_rot integer_stackdepth integer_stackdepth print_newline integer_gt integer_dup_times) ()) integer_stackdepth boolean_dup_times boolean_and integer_dup_times) exec_noop print_boolean print_boolean) integer_min boolean_or in1 exec_when () boolean_dup boolean_pop print_integer integer_stackdepth exec_while (boolean_shove boolean_dup_items boolean_shove integer_add exec_y (integer_min integer_gte boolean_yankdup exec_do*while () integer_dup_items print_newline) integer_lt boolean_invert_first_then_and boolean_invert_second_then_and exec_rot (exec_do*while () exec_dup_items boolean_shove) () (boolean_yankdup exec_shove (exec_do*range (boolean_yankdup boolean_and exec_k_when_autoconstructing (integer_pop exec_eq) (integer_dup exec_y (exec_do*count ()) integer_dup_items boolean_pop integer_div integer_fromboolean exec_do*count (exec_if (integer_min exec_rot (exec_s_when_autoconstructing (exec_do*times (boolean_rot exec_empty) exec_rot (integer_gte integer_pop boolean_xor integer_dec) () ()) () ()) () ()) ()))))))) () ())
Lexicase best errors: [1 1 0 0 1 1 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 126
Percent parens: 0.302
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_if} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_or} {:close 0, :instruction 19} {:close 0, :instruction 21} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction 52} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 3, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction print_boolean} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_dup_items} {:close 1, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_items} {:close 2, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y} {:close 2, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dec})
Zero cases best program: (exec_s_when_autoconstructing (exec_yankdup boolean_and integer_swap exec_if () (exec_k (boolean_or 19 21 boolean_stackdepth integer_add boolean_yankdup) (boolean_dup_items integer_yankdup 52 integer_shove boolean_and exec_y (exec_k (in4 integer_rot integer_stackdepth integer_stackdepth print_newline integer_gt integer_dup_times) ()) integer_stackdepth boolean_dup_times boolean_and integer_dup_times) exec_noop print_boolean print_boolean) integer_min boolean_or in1 exec_when () boolean_dup boolean_pop print_integer integer_stackdepth exec_while (boolean_shove boolean_dup_items boolean_shove integer_add exec_y (integer_min integer_gte boolean_yankdup exec_do*while () integer_dup_items print_newline) integer_lt boolean_invert_first_then_and boolean_invert_second_then_and exec_rot (exec_do*while () exec_dup_items boolean_shove) () (boolean_yankdup exec_shove (exec_do*range (boolean_yankdup boolean_and exec_k_when_autoconstructing (integer_pop exec_eq) (integer_dup exec_y (exec_do*count ()) integer_dup_items boolean_pop integer_div integer_fromboolean exec_do*count (exec_if (integer_min exec_rot (exec_s_when_autoconstructing (exec_do*times (boolean_rot exec_empty) exec_rot (integer_gte integer_pop boolean_xor integer_dec) () ()) () ()) () ()) ()))))))) () ())
Zero cases best errors: [1 1 0 0 1 1 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 126
Percent parens: 0.302
--- Lexicase Population Statistics ---
Count of elite individuals by case: (228 1000 357 357 228 280 280 279 357 228)
Population mean number of elite cases: 3.59
Count of perfect (error zero) individuals by case: (228 0 357 357 228 280 280 279 357 228)
Population mean number of perfect (error zero) cases: 2.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_pop} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 0, :instruction integer_gt})
Best program: (integer_yankdup exec_rot (boolean_swap integer_pop) (boolean_empty) () boolean_dup exec_dup_times () exec_dup (integer_dup boolean_flush integer_lt boolean_not print_integer integer_eq in4 boolean_stackdepth) in1 exec_empty integer_dup_times integer_lte integer_mult integer_inc boolean_stackdepth boolean_rot exec_when () integer_gt)
Errors: [1 1 1 1 1 0 0 0 1 1]
Total: 7
Mean: 0.7
Genome size: 26
Size: 33
Percent parens: 0.212
--- Population Statistics ---
Average total errors in population: 7.406
Median total errors in population: 7
Error averages by case: (0.772 1.0 0.643 0.643 0.772 0.72 0.72 0.721 0.643 0.772)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.246
Average program size in population (points): 68.898
Average percent parens in population: 0.270
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.41425
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 59
Genome diversity (% unique genomes):	 0.732
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 62
Syntactic diversity (% unique Push programs):	 0.712
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1889704
--- Timings ---
Current time: 1559582655365 milliseconds
Total Time:          12.2 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.9 seconds, 56.7%
Fitness Testing:      3.6 seconds, 29.1%
Report:               1.6 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -24                
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: -3                 
Correct output: 40                  | Program output: 83                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: 73                 
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 38                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 43                 
Correct output: 45                  | Program output: 69                 
Correct output: 4                   | Program output: 54                 
Correct output: 37                  | Program output: 37                 
Correct output: 8                   | Program output: 98                 
Correct output: 37                  | Program output: 96                 
Correct output: 48                  | Program output: 62                 
Correct output: 13                  | Program output: 73                 
Correct output: 20                  | Program output: 71                 
Correct output: 25                  | Program output: 47                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 41                 
Correct output: 31                  | Program output: 45                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 74                 
Correct output: 7                   | Program output: 51                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 15                 
Correct output: 36                  | Program output: 91                 
Correct output: 9                   | Program output: 52                 
Correct output: -49                 | Program output: -49                
Correct output: -76                 | Program output: 5                  
Correct output: -91                 | Program output: -91                
Correct output: -76                 | Program output: -60                
Correct output: -95                 | Program output: -74                
Correct output: -64                 | Program output: 95                 
Correct output: -89                 | Program output: 77                 
Correct output: -90                 | Program output: 19                 
Correct output: -91                 | Program output: 88                 
Correct output: -56                 | Program output: -11                
Correct output: -21                 | Program output: -21                
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: 71                 
Correct output: -89                 | Program output: 9                  
Correct output: -89                 | Program output: -34                
Correct output: 8                   | Program output: 67                 
Correct output: -95                 | Program output: -95                
Correct output: -48                 | Program output: 30                 
Correct output: -51                 | Program output: 8                  
Correct output: -72                 | Program output: 9                  
Correct output: -71                 | Program output: 47                 
Correct output: -94                 | Program output: 86                 
Correct output: -80                 | Program output: -57                
Correct output: -63                 | Program output: -38                
Correct output: -67                 | Program output: -3                 
Correct output: -95                 | Program output: -95                
Correct output: 3                   | Program output: 47                 
Correct output: -51                 | Program output: -51                
Correct output: -23                 | Program output: 1                  
Correct output: -89                 | Program output: 2                  
Correct output: -72                 | Program output: -17                
Correct output: -67                 | Program output: -32                
Correct output: -97                 | Program output: -97                
Correct output: -57                 | Program output: 87                 
Correct output: -86                 | Program output: -86                
Correct output: -43                 | Program output: -40                
Correct output: -48                 | Program output: -41                
Correct output: -89                 | Program output: -89                
Correct output: -81                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -85                 | Program output: -57                
Correct output: -100                | Program output: 49                 
Correct output: -70                 | Program output: -70                
Correct output: -82                 | Program output: 75                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: 15                 
Correct output: -35                 | Program output: -35                
Correct output: -41                 | Program output: -17                
Correct output: -89                 | Program output: 53                 
Correct output: -61                 | Program output: -61                
Correct output: -100                | Program output: 65                 
Correct output: -75                 | Program output: 35                 
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: 19                 
Correct output: -48                 | Program output: -48                
Correct output: 27                  | Program output: 88                 
Correct output: -78                 | Program output: -4                 
Correct output: -35                 | Program output: -33                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction 19} {:close 0, :instruction 21} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction 52} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 3, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction print_boolean} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_items} {:close 2, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y} {:close 2, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dec})
Lexicase best program: (exec_s_when_autoconstructing (exec_yankdup boolean_and integer_swap exec_dup_items) (exec_k (boolean_pop 19 21 boolean_stackdepth integer_add boolean_yankdup) (boolean_dup_items boolean_rot 52 integer_shove boolean_and exec_y (exec_y_when_autoconstructing (in4 integer_rot integer_stackdepth integer_stackdepth print_newline integer_gt exec_noop))) integer_stackdepth boolean_dup_times boolean_and integer_dup_times) (exec_noop print_boolean print_boolean) integer_min boolean_or in1 exec_when () boolean_dup boolean_pop print_integer integer_stackdepth exec_while (boolean_shove boolean_dup_items boolean_shove integer_add exec_y (integer_min integer_stackdepth exec_while (boolean_shove boolean_dup_items boolean_shove integer_add exec_y (integer_min integer_gte boolean_yankdup exec_do*while () exec_s_when_autoconstructing () (print_newline) (integer_lt boolean_invert_first_then_and boolean_invert_second_then_and exec_rot (exec_do*while (exec_dup_items boolean_shove)) (boolean_yankdup exec_shove (exec_do*range (boolean_yankdup boolean_and exec_k_when_autoconstructing (integer_pop exec_eq) (integer_dup exec_y (exec_do*count ()) integer_dup_items boolean_pop integer_div boolean_rot exec_empty) exec_rot (integer_gte integer_pop boolean_xor integer_dec) () ()))) ()))))))
Lexicase best errors: [0 1 1 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 119
Percent parens: 0.252
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction 19} {:close 0, :instruction 21} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction 52} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 3, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction print_boolean} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_items} {:close 2, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y} {:close 2, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dec})
Zero cases best program: (exec_s_when_autoconstructing (exec_yankdup boolean_and integer_swap exec_dup_items) (exec_k (boolean_pop 19 21 boolean_stackdepth integer_add boolean_yankdup) (boolean_dup_items boolean_rot 52 integer_shove boolean_and exec_y (exec_y_when_autoconstructing (in4 integer_rot integer_stackdepth integer_stackdepth print_newline integer_gt exec_noop))) integer_stackdepth boolean_dup_times boolean_and integer_dup_times) (exec_noop print_boolean print_boolean) integer_min boolean_or in1 exec_when () boolean_dup boolean_pop print_integer integer_stackdepth exec_while (boolean_shove boolean_dup_items boolean_shove integer_add exec_y (integer_min integer_stackdepth exec_while (boolean_shove boolean_dup_items boolean_shove integer_add exec_y (integer_min integer_gte boolean_yankdup exec_do*while () exec_s_when_autoconstructing () (print_newline) (integer_lt boolean_invert_first_then_and boolean_invert_second_then_and exec_rot (exec_do*while (exec_dup_items boolean_shove)) (boolean_yankdup exec_shove (exec_do*range (boolean_yankdup boolean_and exec_k_when_autoconstructing (integer_pop exec_eq) (integer_dup exec_y (exec_do*count ()) integer_dup_items boolean_pop integer_div boolean_rot exec_empty) exec_rot (integer_gte integer_pop boolean_xor integer_dec) () ()))) ()))))))
Zero cases best errors: [0 1 1 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 119
Percent parens: 0.252
--- Lexicase Population Statistics ---
Count of elite individuals by case: (279 1000 1000 571 301 278 279 291 279 300)
Population mean number of elite cases: 4.58
Count of perfect (error zero) individuals by case: (279 0 0 571 301 278 279 291 279 300)
Population mean number of perfect (error zero) cases: 2.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction 48} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yankdup})
Best program: (integer_lte boolean_not integer_div exec_noop exec_dup_times (boolean_invert_second_then_and integer_shove integer_dup_times boolean_swap integer_gte integer_eq) in1 print_integer exec_s (exec_noop exec_rot (integer_swap) (integer_stackdepth exec_shove (boolean_dup_items 48)) (integer_mult exec_dup (exec_empty integer_yank integer_swap exec_k (integer_eq) (integer_flush) exec_rot (integer_rot integer_yank boolean_frominteger boolean_shove integer_add exec_y (integer_min integer_gte boolean_yankdup)) () ()))) () ())
Errors: [0 1 1 0 1 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 39
Size: 55
Percent parens: 0.291
--- Population Statistics ---
Average total errors in population: 7.422
Median total errors in population: 8
Error averages by case: (0.721 1.0 1.0 0.429 0.699 0.722 0.721 0.709 0.721 0.7)
Error minima by case: (0 1 1 0 0 0 0 0 0 0)
Average genome size in population (length): 44.939
Average program size in population (points): 62.723
Average percent parens in population: 0.268
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 5.883625
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 57
Genome diversity (% unique genomes):	 0.757
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.734
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2352104
--- Timings ---
Current time: 1559582658782 milliseconds
Total Time:          15.2 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         9.2 seconds, 60.2%
Fitness Testing:      4.0 seconds, 26.5%
Report:               1.9 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 83                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 94                 
Correct output: 45                  | Program output: 45                 
Correct output: 4                   | Program output: 47                 
Correct output: 37                  | Program output: 83                 
Correct output: 8                   | Program output: 65                 
Correct output: 37                  | Program output: 41                 
Correct output: 48                  | Program output: 94                 
Correct output: 13                  | Program output: 26                 
Correct output: 20                  | Program output: 77                 
Correct output: 25                  | Program output: 87                 
Correct output: 25                  | Program output: 95                 
Correct output: 19                  | Program output: 19                 
Correct output: 31                  | Program output: 81                 
Correct output: 35                  | Program output: 72                 
Correct output: 0                   | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 20                 
Correct output: 12                  | Program output: 92                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 32                 
Correct output: -49                 | Program output: -13                
Correct output: -76                 | Program output: -76                
Correct output: -91                 | Program output: -2                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: 22                 
Correct output: -64                 | Program output: -64                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: 75                 
Correct output: -21                 | Program output: 67                 
Correct output: -82                 | Program output: -67                
Correct output: -96                 | Program output: 42                 
Correct output: -89                 | Program output: 59                 
Correct output: -89                 | Program output: -7                 
Correct output: 8                   | Program output: 60                 
Correct output: -95                 | Program output: -30                
Correct output: -48                 | Program output: -17                
Correct output: -51                 | Program output: -49                
Correct output: -72                 | Program output: 64                 
Correct output: -71                 | Program output: 5                  
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: 65                 
Correct output: -63                 | Program output: 40                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: 43                 
Correct output: 3                   | Program output: 47                 
Correct output: -51                 | Program output: -16                
Correct output: -23                 | Program output: 74                 
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: 23                 
Correct output: -67                 | Program output: 20                 
Correct output: -97                 | Program output: -2                 
Correct output: -57                 | Program output: -29                
Correct output: -86                 | Program output: 4                  
Correct output: -43                 | Program output: -13                
Correct output: -48                 | Program output: 59                 
Correct output: -89                 | Program output: -84                
Correct output: -81                 | Program output: 95                 
Correct output: -61                 | Program output: -24                
Correct output: -62                 | Program output: 33                 
Correct output: -85                 | Program output: 75                 
Correct output: -100                | Program output: -100               
Correct output: -70                 | Program output: -27                
Correct output: -82                 | Program output: -60                
Correct output: -74                 | Program output: 78                 
Correct output: -100                | Program output: 13                 
Correct output: -84                 | Program output: -84                
Correct output: -35                 | Program output: -27                
Correct output: -41                 | Program output: -41                
Correct output: -89                 | Program output: -4                 
Correct output: -61                 | Program output: 53                 
Correct output: -100                | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: 87                 
Correct output: -96                 | Program output: 8                  
Correct output: -48                 | Program output: -43                
Correct output: 27                  | Program output: 27                 
Correct output: -78                 | Program output: -46                
Correct output: -35                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 1, :instruction tag_exec_270} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction tag_exec_805} {:close 0, :instruction exec_flush} {:close 3, :instruction integer_shove} {:close 0, :instruction boolean_and})
Lexicase best program: (boolean_invert_second_then_and integer_empty integer_yankdup tag_exec_270 () integer_dup_times exec_s_when_autoconstructing () (boolean_not integer_yank in3 print_integer boolean_stackdepth exec_eq integer_lte integer_eq boolean_empty) (boolean_pop tag_exec_805 (exec_flush integer_shove)) boolean_and)
Lexicase best errors: [0 1 0 0 1 0 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 26
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 1, :instruction tag_exec_270} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction tag_exec_805} {:close 0, :instruction exec_flush} {:close 3, :instruction integer_shove} {:close 0, :instruction boolean_and})
Zero cases best program: (boolean_invert_second_then_and integer_empty integer_yankdup tag_exec_270 () integer_dup_times exec_s_when_autoconstructing () (boolean_not integer_yank in3 print_integer boolean_stackdepth exec_eq integer_lte integer_eq boolean_empty) (boolean_pop tag_exec_805 (exec_flush integer_shove)) boolean_and)
Zero cases best errors: [0 1 0 0 1 0 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 26
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (124 506 124 124 503 124 1000 216 505 124)
Population mean number of elite cases: 3.35
Count of perfect (error zero) individuals by case: (124 506 124 124 503 124 0 216 505 124)
Population mean number of perfect (error zero) cases: 2.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_gte} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove})
Best program: (exec_rot (boolean_rot boolean_or integer_pop exec_do*count () exec_noop) (exec_stackdepth) (in3 print_integer integer_min in4 boolean_dup_times) exec_do*times (exec_while () integer_dup_items exec_stackdepth integer_gte in3 integer_gte) boolean_empty exec_if (integer_fromboolean exec_rot (exec_do*count (boolean_and exec_yank exec_yank boolean_frominteger exec_stackdepth integer_yank exec_noop boolean_or print_integer integer_mod) exec_when (boolean_frominteger) integer_add boolean_invert_second_then_and integer_eq print_integer in3) (boolean_dup_items boolean_invert_first_then_and boolean_flush exec_flush integer_empty exec_yankdup integer_gt exec_do*count () print_boolean) (integer_dup_times boolean_dup_times exec_dup_times (boolean_empty exec_if (integer_lt) () integer_div exec_k_when_autoconstructing (integer_lte) (exec_dup_times () boolean_yankdup) print_newline boolean_shove) boolean_yankdup exec_empty exec_rot (boolean_dup_times) (boolean_eq boolean_shove) ())) ())
Errors: [0 1 0 0 1 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 69
Size: 93
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 7.65
Median total errors in population: 7
Error averages by case: (0.876 0.494 0.876 0.876 0.497 0.876 1.0 0.784 0.495 0.876)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 48.405
Average program size in population (points): 68.312
Average percent parens in population: 0.280
Minimum age in population: 5.0
Maximum age in population: 9.3125
Average age in population: 7.360125
Median age in population: 7.4375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 35
Genome diversity (% unique genomes):	 0.812
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.798
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2877232
--- Timings ---
Current time: 1559582661923 milliseconds
Total Time:          18.6 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.4 seconds, 61.0%
Fitness Testing:      4.6 seconds, 24.5%
Report:               2.6 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -24                
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: -3                 
Correct output: 40                  | Program output: 83                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: 73                 
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 38                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 43                 
Correct output: 45                  | Program output: 69                 
Correct output: 4                   | Program output: 54                 
Correct output: 37                  | Program output: 37                 
Correct output: 8                   | Program output: 98                 
Correct output: 37                  | Program output: 96                 
Correct output: 48                  | Program output: 62                 
Correct output: 13                  | Program output: 73                 
Correct output: 20                  | Program output: 71                 
Correct output: 25                  | Program output: 47                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 41                 
Correct output: 31                  | Program output: 45                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 74                 
Correct output: 7                   | Program output: 51                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 15                 
Correct output: 36                  | Program output: 91                 
Correct output: 9                   | Program output: 52                 
Correct output: -49                 | Program output: -49                
Correct output: -76                 | Program output: 5                  
Correct output: -91                 | Program output: -91                
Correct output: -76                 | Program output: -60                
Correct output: -95                 | Program output: -74                
Correct output: -64                 | Program output: 95                 
Correct output: -89                 | Program output: 77                 
Correct output: -90                 | Program output: 19                 
Correct output: -91                 | Program output: 88                 
Correct output: -56                 | Program output: -11                
Correct output: -21                 | Program output: -21                
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: 71                 
Correct output: -89                 | Program output: 9                  
Correct output: -89                 | Program output: -34                
Correct output: 8                   | Program output: 67                 
Correct output: -95                 | Program output: -95                
Correct output: -48                 | Program output: 30                 
Correct output: -51                 | Program output: 8                  
Correct output: -72                 | Program output: 9                  
Correct output: -71                 | Program output: 47                 
Correct output: -94                 | Program output: 86                 
Correct output: -80                 | Program output: -57                
Correct output: -63                 | Program output: -38                
Correct output: -67                 | Program output: -3                 
Correct output: -95                 | Program output: -95                
Correct output: 3                   | Program output: 47                 
Correct output: -51                 | Program output: -51                
Correct output: -23                 | Program output: 1                  
Correct output: -89                 | Program output: 2                  
Correct output: -72                 | Program output: -17                
Correct output: -67                 | Program output: -32                
Correct output: -97                 | Program output: -97                
Correct output: -57                 | Program output: 87                 
Correct output: -86                 | Program output: -86                
Correct output: -43                 | Program output: -40                
Correct output: -48                 | Program output: -41                
Correct output: -89                 | Program output: -89                
Correct output: -81                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -85                 | Program output: -57                
Correct output: -100                | Program output: 49                 
Correct output: -70                 | Program output: -70                
Correct output: -82                 | Program output: 75                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: 15                 
Correct output: -35                 | Program output: -35                
Correct output: -41                 | Program output: -17                
Correct output: -89                 | Program output: 53                 
Correct output: -61                 | Program output: -61                
Correct output: -100                | Program output: 65                 
Correct output: -75                 | Program output: 35                 
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: 19                 
Correct output: -48                 | Program output: -48                
Correct output: 27                  | Program output: 88                 
Correct output: -78                 | Program output: -4                 
Correct output: -35                 | Program output: -33                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 1, :instruction tagged_418} {:close 1, :instruction integer_eq} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction 48} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction 96} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction 32} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_integer_125} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and})
Lexicase best program: (boolean_invert_second_then_and integer_empty integer_yankdup tagged_418 integer_eq in1 print_integer exec_s (exec_noop exec_rot (integer_swap) (integer_stackdepth exec_shove (boolean_dup_items 48)) (integer_mult exec_dup (exec_empty integer_yank integer_swap exec_k (integer_eq) (integer_flush) exec_rot (integer_rot integer_yank boolean_frominteger integer_dup_items integer_gt boolean_or exec_empty boolean_dup_times integer_swap integer_gte boolean_shove exec_yankdup exec_k_when_autoconstructing (boolean_flush 96 exec_dup (exec_s (integer_rot 32 in3 integer_div integer_dup boolean_dup_items tag_integer_125 boolean_invert_second_then_and exec_when () exec_k_when_autoconstructing (exec_do*while (integer_inc in4 boolean_yankdup integer_eq exec_s_when_autoconstructing (exec_y_when_autoconstructing (boolean_dup_items boolean_and)) () ())) ()) () ())) ()) () ()))) () ())
Lexicase best errors: [0 1 0 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 88
Percent parens: 0.318
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 1, :instruction tagged_418} {:close 1, :instruction integer_eq} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction 48} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction 96} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction 32} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_integer_125} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and})
Zero cases best program: (boolean_invert_second_then_and integer_empty integer_yankdup tagged_418 integer_eq in1 print_integer exec_s (exec_noop exec_rot (integer_swap) (integer_stackdepth exec_shove (boolean_dup_items 48)) (integer_mult exec_dup (exec_empty integer_yank integer_swap exec_k (integer_eq) (integer_flush) exec_rot (integer_rot integer_yank boolean_frominteger integer_dup_items integer_gt boolean_or exec_empty boolean_dup_times integer_swap integer_gte boolean_shove exec_yankdup exec_k_when_autoconstructing (boolean_flush 96 exec_dup (exec_s (integer_rot 32 in3 integer_div integer_dup boolean_dup_items tag_integer_125 boolean_invert_second_then_and exec_when () exec_k_when_autoconstructing (exec_do*while (integer_inc in4 boolean_yankdup integer_eq exec_s_when_autoconstructing (exec_y_when_autoconstructing (boolean_dup_items boolean_and)) () ())) ()) () ())) ()) () ()))) () ())
Zero cases best errors: [0 1 0 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 88
Percent parens: 0.318
--- Lexicase Population Statistics ---
Count of elite individuals by case: (292 1000 292 895 90 895 1000 292 517 899)
Population mean number of elite cases: 6.17
Count of perfect (error zero) individuals by case: (292 0 292 895 90 895 0 292 517 899)
Population mean number of perfect (error zero) cases: 4.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_eq} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction exec_s} {:close 1, :instruction print_integer} {:close 2, :instruction 48} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yankdup})
Best program: (integer_lte boolean_not integer_div exec_noop exec_dup_times (boolean_invert_second_then_and integer_shove integer_dup_times boolean_swap integer_gte integer_eq) in1 print_integer exec_s (print_integer) (48) () integer_mult exec_dup (exec_empty integer_yank integer_swap exec_k (integer_eq) (integer_flush) exec_rot (integer_rot integer_yank boolean_frominteger integer_dup_items integer_gt boolean_or exec_empty boolean_dup_times integer_swap integer_gte boolean_shove exec_yankdup exec_k_when_autoconstructing (boolean_dup_items boolean_invert_first_then_and boolean_flush exec_flush integer_empty exec_yankdup) ()) () ()))
Errors: [0 1 0 0 1 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 44
Size: 57
Percent parens: 0.228
--- Population Statistics ---
Average total errors in population: 5.828
Median total errors in population: 6
Error averages by case: (0.708 1.0 0.708 0.105 0.91 0.105 1.0 0.708 0.483 0.101)
Error minima by case: (0 1 0 0 0 0 1 0 0 0)
Average genome size in population (length): 40.577
Average program size in population (points): 56.136
Average percent parens in population: 0.269
Minimum age in population: 6.0
Maximum age in population: 10.8125
Average age in population: 8.88646875
Median age in population: 8.984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 14
Genome diversity (% unique genomes):	 0.71
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.693
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3359727
--- Timings ---
Current time: 1559582664861 milliseconds
Total Time:          21.7 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.5 seconds, 62.3%
Fitness Testing:      5.0 seconds, 23.2%
Report:               3.0 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 83                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 94                 
Correct output: 45                  | Program output: 45                 
Correct output: 4                   | Program output: 47                 
Correct output: 37                  | Program output: 83                 
Correct output: 8                   | Program output: 65                 
Correct output: 37                  | Program output: 41                 
Correct output: 48                  | Program output: 94                 
Correct output: 13                  | Program output: 26                 
Correct output: 20                  | Program output: 77                 
Correct output: 25                  | Program output: 87                 
Correct output: 25                  | Program output: 95                 
Correct output: 19                  | Program output: 19                 
Correct output: 31                  | Program output: 81                 
Correct output: 35                  | Program output: 72                 
Correct output: 0                   | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 20                 
Correct output: 12                  | Program output: 92                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 32                 
Correct output: -49                 | Program output: -13                
Correct output: -76                 | Program output: -76                
Correct output: -91                 | Program output: -2                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: 22                 
Correct output: -64                 | Program output: -64                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: 75                 
Correct output: -21                 | Program output: 67                 
Correct output: -82                 | Program output: -67                
Correct output: -96                 | Program output: 42                 
Correct output: -89                 | Program output: 59                 
Correct output: -89                 | Program output: -7                 
Correct output: 8                   | Program output: 60                 
Correct output: -95                 | Program output: -30                
Correct output: -48                 | Program output: -17                
Correct output: -51                 | Program output: -49                
Correct output: -72                 | Program output: 64                 
Correct output: -71                 | Program output: 5                  
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: 65                 
Correct output: -63                 | Program output: 40                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: 43                 
Correct output: 3                   | Program output: 47                 
Correct output: -51                 | Program output: -16                
Correct output: -23                 | Program output: 74                 
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: 23                 
Correct output: -67                 | Program output: 20                 
Correct output: -97                 | Program output: -2                 
Correct output: -57                 | Program output: -29                
Correct output: -86                 | Program output: 4                  
Correct output: -43                 | Program output: -13                
Correct output: -48                 | Program output: 59                 
Correct output: -89                 | Program output: -84                
Correct output: -81                 | Program output: 95                 
Correct output: -61                 | Program output: -24                
Correct output: -62                 | Program output: 33                 
Correct output: -85                 | Program output: 75                 
Correct output: -100                | Program output: -100               
Correct output: -70                 | Program output: -27                
Correct output: -82                 | Program output: -60                
Correct output: -74                 | Program output: 78                 
Correct output: -100                | Program output: 13                 
Correct output: -84                 | Program output: -84                
Correct output: -35                 | Program output: -27                
Correct output: -41                 | Program output: -41                
Correct output: -89                 | Program output: -4                 
Correct output: -61                 | Program output: 53                 
Correct output: -100                | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: 87                 
Correct output: -96                 | Program output: 8                  
Correct output: -48                 | Program output: -43                
Correct output: 27                  | Program output: 27                 
Correct output: -78                 | Program output: -46                
Correct output: -35                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*times} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction 48} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (integer_rot exec_do*times (in3) exec_dup (print_integer boolean_frominteger) exec_when (integer_mod) integer_yankdup print_boolean boolean_swap boolean_invert_second_then_and exec_yankdup boolean_frominteger integer_swap integer_stackdepth exec_shove (boolean_dup_items 48) integer_mult exec_dup (exec_empty integer_yank integer_swap exec_k (integer_eq) (integer_flush) exec_rot (integer_rot boolean_frominteger integer_dup_items integer_gt boolean_or exec_empty boolean_dup_times integer_gte boolean_shove exec_s (exec_k_when_autoconstructing () ()) () ()) () ()))
Lexicase best errors: [0 0 1 1 0 1 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 55
Percent parens: 0.291
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*times} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction 48} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (integer_rot exec_do*times (in3) exec_dup (print_integer boolean_frominteger) exec_when (integer_mod) integer_yankdup print_boolean boolean_swap boolean_invert_second_then_and exec_yankdup boolean_frominteger integer_swap integer_stackdepth exec_shove (boolean_dup_items 48) integer_mult exec_dup (exec_empty integer_yank integer_swap exec_k (integer_eq) (integer_flush) exec_rot (integer_rot boolean_frominteger integer_dup_items integer_gt boolean_or exec_empty boolean_dup_times integer_gte boolean_shove exec_s (exec_k_when_autoconstructing () ()) () ()) () ()))
Zero cases best errors: [0 0 1 1 0 1 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 55
Percent parens: 0.291
--- Lexicase Population Statistics ---
Count of elite individuals by case: (894 169 198 198 170 1000 200 169 169 1000)
Population mean number of elite cases: 4.17
Count of perfect (error zero) individuals by case: (894 169 198 198 170 0 200 169 169 0)
Population mean number of perfect (error zero) cases: 2.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 2, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_do*count})
Best program: (boolean_invert_second_then_and integer_empty integer_yankdup tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not) (integer_yank in3 print_integer boolean_stackdepth exec_eq integer_lte exec_do*while (boolean_empty) boolean_pop integer_dup_times exec_flush integer_shove) () boolean_and integer_mult exec_do*range (boolean_frominteger exec_when (integer_eq exec_do*times (integer_stackdepth) exec_eq exec_noop exec_do*count ())))
Errors: [0 0 1 1 0 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 30
Size: 39
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 7.833
Median total errors in population: 9
Error averages by case: (0.106 0.831 0.802 0.802 0.83 1.0 0.8 0.831 0.831 1.0)
Error minima by case: (0 0 0 0 0 1 0 0 0 1)
Average genome size in population (length): 42.883
Average program size in population (points): 60.138
Average percent parens in population: 0.276
Minimum age in population: 7.0
Maximum age in population: 12.21875
Average age in population: 10.3894375
Median age in population: 10.4375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 38
Genome diversity (% unique genomes):	 0.76
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.745
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3856012
--- Timings ---
Current time: 1559582667444 milliseconds
Total Time:          24.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.4 seconds, 63.3%
Fitness Testing:      5.5 seconds, 22.7%
Report:               3.3 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 75                  | Program output: 81                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 40                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 87                 
Correct output: 45                  | Program output: 65                 
Correct output: 4                   | Program output: 62                 
Correct output: 37                  | Program output: 95                 
Correct output: 8                   | Program output: 8                  
Correct output: 37                  | Program output: 37                 
Correct output: 48                  | Program output: 92                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 88                 
Correct output: 25                  | Program output: 25                 
Correct output: 25                  | Program output: 98                 
Correct output: 19                  | Program output: 72                 
Correct output: 31                  | Program output: 59                 
Correct output: 35                  | Program output: 56                 
Correct output: 0                   | Program output: 0                  
Correct output: 7                   | Program output: 11                 
Correct output: 18                  | Program output: 33                 
Correct output: 12                  | Program output: 33                 
Correct output: 36                  | Program output: 94                 
Correct output: 9                   | Program output: 9                  
Correct output: -49                 | Program output: -32                
Correct output: -76                 | Program output: -56                
Correct output: -91                 | Program output: -41                
Correct output: -76                 | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: -64                 | Program output: 68                 
Correct output: -89                 | Program output: -1                 
Correct output: -90                 | Program output: 99                 
Correct output: -91                 | Program output: 21                 
Correct output: -56                 | Program output: -56                
Correct output: -21                 | Program output: 52                 
Correct output: -82                 | Program output: -38                
Correct output: -96                 | Program output: 74                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -89                
Correct output: 8                   | Program output: 90                 
Correct output: -95                 | Program output: 35                 
Correct output: -48                 | Program output: 5                  
Correct output: -51                 | Program output: 38                 
Correct output: -72                 | Program output: 23                 
Correct output: -71                 | Program output: 32                 
Correct output: -94                 | Program output: 61                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -63                
Correct output: -67                 | Program output: -17                
Correct output: -95                 | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -3                 
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: 12                 
Correct output: -72                 | Program output: -2                 
Correct output: -67                 | Program output: 23                 
Correct output: -97                 | Program output: 25                 
Correct output: -57                 | Program output: 45                 
Correct output: -86                 | Program output: 93                 
Correct output: -43                 | Program output: 48                 
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: 15                 
Correct output: -81                 | Program output: -28                
Correct output: -61                 | Program output: 100                
Correct output: -62                 | Program output: 9                  
Correct output: -85                 | Program output: 70                 
Correct output: -100                | Program output: 31                 
Correct output: -70                 | Program output: -11                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: 9                  
Correct output: -100                | Program output: -32                
Correct output: -84                 | Program output: 35                 
Correct output: -35                 | Program output: 26                 
Correct output: -41                 | Program output: 20                 
Correct output: -89                 | Program output: 61                 
Correct output: -61                 | Program output: 1                  
Correct output: -100                | Program output: 50                 
Correct output: -75                 | Program output: -48                
Correct output: -73                 | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: 2                  
Correct output: 27                  | Program output: 73                 
Correct output: -78                 | Program output: -78                
Correct output: -35                 | Program output: -34                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush})
Lexicase best program: (integer_lte boolean_not integer_div exec_noop exec_dup_times (integer_mod integer_lt boolean_empty boolean_rot integer_shove) boolean_xor integer_dup in4 exec_empty print_integer boolean_frominteger exec_dup_times (exec_when (exec_flush)))
Lexicase best errors: [1 1 1 1 0 1 1 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 23
Percent parens: 0.174
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush})
Zero cases best program: (integer_lte boolean_not integer_div exec_noop exec_dup_times (integer_mod integer_lt boolean_empty boolean_rot integer_shove) boolean_xor integer_dup in4 exec_empty print_integer boolean_frominteger exec_dup_times (exec_when (exec_flush)))
Zero cases best errors: [1 1 1 1 0 1 1 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 23
Percent parens: 0.174
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 545 1000 1000 920 1000 1000 375 1000 375)
Population mean number of elite cases: 8.22
Count of perfect (error zero) individuals by case: (0 545 0 0 920 0 0 375 0 375)
Population mean number of perfect (error zero) cases: 2.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_swap} {:close 2, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_div} {:close 0, :instruction 53} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction tagged_912} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 1, :instruction in1} {:close 0, :instruction tag_boolean_362} {:close 0, :instruction print_newline} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger})
Best program: (exec_s_when_autoconstructing (integer_dup_items) (in4 boolean_yankdup integer_swap exec_shove ()) (boolean_pop integer_dec exec_s () (boolean_invert_first_then_and) (boolean_dup_times integer_gt) integer_div) 53 boolean_eq in4 tagged_912 exec_y_when_autoconstructing (print_integer exec_when (exec_k (exec_eq) (boolean_xor) exec_dup_times () exec_rot () (exec_if (in1 exec_k (in2 exec_noop in1) (tag_boolean_362 print_newline boolean_not)) (boolean_and boolean_invert_first_then_and exec_while (exec_pop (integer_swap) exec_dup_times () exec_s (exec_eq) (exec_eq exec_shove () boolean_invert_second_then_and boolean_eq boolean_frominteger) ()))) ())))
Errors: [1 1 1 1 0 1 1 0 1 0]
Total: 7
Mean: 0.7
Genome size: 47
Size: 74
Percent parens: 0.365
--- Population Statistics ---
Average total errors in population: 7.785
Median total errors in population: 8
Error averages by case: (1.0 0.455 1.0 1.0 0.08 1.0 1.0 0.625 1.0 0.625)
Error minima by case: (1 0 1 1 0 1 1 0 1 0)
Average genome size in population (length): 30.876
Average program size in population (points): 41.925
Average percent parens in population: 0.253
Minimum age in population: 9.25
Maximum age in population: 13.78125
Average age in population: 11.9468359375
Median age in population: 12.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 58
Genome diversity (% unique genomes):	 0.571
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.553
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4248586
--- Timings ---
Current time: 1559582670148 milliseconds
Total Time:          27.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.5 seconds, 64.8%
Fitness Testing:      5.9 seconds, 21.8%
Report:               3.5 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 75                  | Program output: 81                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 40                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 87                 
Correct output: 45                  | Program output: 65                 
Correct output: 4                   | Program output: 62                 
Correct output: 37                  | Program output: 95                 
Correct output: 8                   | Program output: 8                  
Correct output: 37                  | Program output: 37                 
Correct output: 48                  | Program output: 92                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 88                 
Correct output: 25                  | Program output: 25                 
Correct output: 25                  | Program output: 98                 
Correct output: 19                  | Program output: 72                 
Correct output: 31                  | Program output: 59                 
Correct output: 35                  | Program output: 56                 
Correct output: 0                   | Program output: 0                  
Correct output: 7                   | Program output: 11                 
Correct output: 18                  | Program output: 33                 
Correct output: 12                  | Program output: 33                 
Correct output: 36                  | Program output: 94                 
Correct output: 9                   | Program output: 9                  
Correct output: -49                 | Program output: -32                
Correct output: -76                 | Program output: -56                
Correct output: -91                 | Program output: -41                
Correct output: -76                 | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: -64                 | Program output: 68                 
Correct output: -89                 | Program output: -1                 
Correct output: -90                 | Program output: 99                 
Correct output: -91                 | Program output: 21                 
Correct output: -56                 | Program output: -56                
Correct output: -21                 | Program output: 52                 
Correct output: -82                 | Program output: -38                
Correct output: -96                 | Program output: 74                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -89                
Correct output: 8                   | Program output: 90                 
Correct output: -95                 | Program output: 35                 
Correct output: -48                 | Program output: 5                  
Correct output: -51                 | Program output: 38                 
Correct output: -72                 | Program output: 23                 
Correct output: -71                 | Program output: 32                 
Correct output: -94                 | Program output: 61                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -63                
Correct output: -67                 | Program output: -17                
Correct output: -95                 | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -3                 
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: 12                 
Correct output: -72                 | Program output: -2                 
Correct output: -67                 | Program output: 23                 
Correct output: -97                 | Program output: 25                 
Correct output: -57                 | Program output: 45                 
Correct output: -86                 | Program output: 93                 
Correct output: -43                 | Program output: 48                 
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: 15                 
Correct output: -81                 | Program output: -28                
Correct output: -61                 | Program output: 100                
Correct output: -62                 | Program output: 9                  
Correct output: -85                 | Program output: 70                 
Correct output: -100                | Program output: 31                 
Correct output: -70                 | Program output: -11                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: 9                  
Correct output: -100                | Program output: -32                
Correct output: -84                 | Program output: 35                 
Correct output: -35                 | Program output: 26                 
Correct output: -41                 | Program output: 20                 
Correct output: -89                 | Program output: 61                 
Correct output: -61                 | Program output: 1                  
Correct output: -100                | Program output: 50                 
Correct output: -75                 | Program output: -48                
Correct output: -73                 | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: 2                  
Correct output: 27                  | Program output: 73                 
Correct output: -78                 | Program output: -78                
Correct output: -35                 | Program output: -34                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_pop} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 0, :instruction integer_gt})
Lexicase best program: (integer_yankdup exec_rot (boolean_swap integer_pop) (boolean_empty) () boolean_dup exec_dup_times () exec_dup (integer_dup boolean_flush integer_lt boolean_not print_integer integer_eq in4 boolean_stackdepth) in1 exec_empty integer_dup_times integer_lte integer_mult integer_inc boolean_stackdepth boolean_rot exec_when () integer_gt)
Lexicase best errors: [0 1 1 1 1 0 0 1 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 33
Percent parens: 0.212
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_pop} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 0, :instruction integer_gt})
Zero cases best program: (integer_yankdup exec_rot (boolean_swap integer_pop) (boolean_empty) () boolean_dup exec_dup_times () exec_dup (integer_dup boolean_flush integer_lt boolean_not print_integer integer_eq in4 boolean_stackdepth) in1 exec_empty integer_dup_times integer_lte integer_mult integer_inc boolean_stackdepth boolean_rot exec_when () integer_gt)
Zero cases best errors: [0 1 1 1 1 0 0 1 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 33
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (596 1000 1000 1000 329 599 599 1000 328 1000)
Population mean number of elite cases: 7.45
Count of perfect (error zero) individuals by case: (596 0 0 0 329 599 599 0 328 0)
Population mean number of perfect (error zero) cases: 2.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush})
Best program: (exec_y_when_autoconstructing (integer_lt boolean_empty) boolean_rot integer_shove boolean_xor integer_dup in4 exec_do*range (print_integer boolean_frominteger exec_dup_times (exec_when (exec_flush))))
Errors: [0 1 1 1 1 0 0 1 1 1]
Total: 7
Mean: 0.7
Genome size: 14
Size: 19
Percent parens: 0.263
--- Population Statistics ---
Average total errors in population: 7.549
Median total errors in population: 7
Error averages by case: (0.404 1.0 1.0 1.0 0.671 0.401 0.401 1.0 0.672 1.0)
Error minima by case: (0 1 1 1 0 0 0 1 0 1)
Average genome size in population (length): 27.385
Average program size in population (points): 37.364
Average percent parens in population: 0.251
Minimum age in population: 10.6875
Maximum age in population: 15.421875
Average age in population: 13.43628515625
Median age in population: 13.517578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 73
Genome diversity (% unique genomes):	 0.603
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.579
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4596786
--- Timings ---
Current time: 1559582672457 milliseconds
Total Time:          29.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.3 seconds, 65.7%
Fitness Testing:      6.3 seconds, 21.2%
Report:               3.7 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 83                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 94                 
Correct output: 45                  | Program output: 45                 
Correct output: 4                   | Program output: 47                 
Correct output: 37                  | Program output: 83                 
Correct output: 8                   | Program output: 65                 
Correct output: 37                  | Program output: 41                 
Correct output: 48                  | Program output: 94                 
Correct output: 13                  | Program output: 26                 
Correct output: 20                  | Program output: 77                 
Correct output: 25                  | Program output: 87                 
Correct output: 25                  | Program output: 95                 
Correct output: 19                  | Program output: 19                 
Correct output: 31                  | Program output: 81                 
Correct output: 35                  | Program output: 72                 
Correct output: 0                   | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 20                 
Correct output: 12                  | Program output: 92                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 32                 
Correct output: -49                 | Program output: -13                
Correct output: -76                 | Program output: -76                
Correct output: -91                 | Program output: -2                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: 22                 
Correct output: -64                 | Program output: -64                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: 75                 
Correct output: -21                 | Program output: 67                 
Correct output: -82                 | Program output: -67                
Correct output: -96                 | Program output: 42                 
Correct output: -89                 | Program output: 59                 
Correct output: -89                 | Program output: -7                 
Correct output: 8                   | Program output: 60                 
Correct output: -95                 | Program output: -30                
Correct output: -48                 | Program output: -17                
Correct output: -51                 | Program output: -49                
Correct output: -72                 | Program output: 64                 
Correct output: -71                 | Program output: 5                  
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: 65                 
Correct output: -63                 | Program output: 40                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: 43                 
Correct output: 3                   | Program output: 47                 
Correct output: -51                 | Program output: -16                
Correct output: -23                 | Program output: 74                 
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: 23                 
Correct output: -67                 | Program output: 20                 
Correct output: -97                 | Program output: -2                 
Correct output: -57                 | Program output: -29                
Correct output: -86                 | Program output: 4                  
Correct output: -43                 | Program output: -13                
Correct output: -48                 | Program output: 59                 
Correct output: -89                 | Program output: -84                
Correct output: -81                 | Program output: 95                 
Correct output: -61                 | Program output: -24                
Correct output: -62                 | Program output: 33                 
Correct output: -85                 | Program output: 75                 
Correct output: -100                | Program output: -100               
Correct output: -70                 | Program output: -27                
Correct output: -82                 | Program output: -60                
Correct output: -74                 | Program output: 78                 
Correct output: -100                | Program output: 13                 
Correct output: -84                 | Program output: -84                
Correct output: -35                 | Program output: -27                
Correct output: -41                 | Program output: -41                
Correct output: -89                 | Program output: -4                 
Correct output: -61                 | Program output: 53                 
Correct output: -100                | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: 87                 
Correct output: -96                 | Program output: 8                  
Correct output: -48                 | Program output: -43                
Correct output: 27                  | Program output: 27                 
Correct output: -78                 | Program output: -46                
Correct output: -35                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_gte} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and})
Lexicase best program: (exec_rot (boolean_rot boolean_or integer_pop exec_do*count () exec_noop) (exec_stackdepth) (in3 print_integer integer_min in4 boolean_dup_times) exec_do*times (exec_while () integer_dup_items exec_stackdepth integer_gte in3 integer_gte) boolean_empty exec_if (integer_fromboolean exec_rot (exec_do*count (boolean_and exec_yank exec_yank boolean_frominteger exec_stackdepth integer_yank exec_noop boolean_or print_integer) integer_mod) (exec_when (boolean_frominteger) integer_add boolean_invert_second_then_and integer_eq print_integer in3) (boolean_dup_items boolean_invert_first_then_and boolean_flush exec_flush integer_empty exec_yankdup integer_gt exec_do*count () print_boolean) integer_dup_times boolean_dup_times exec_dup_times (boolean_xor integer_min integer_flush exec_dup (exec_dup (boolean_shove boolean_frominteger) integer_inc integer_shove exec_empty integer_min boolean_and))) ())
Lexicase best errors: [1 1 0 0 1 0 0 1 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 83
Percent parens: 0.217
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 1, :instruction integer_gte} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_do*count} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and})
Zero cases best program: (exec_rot (boolean_rot boolean_or integer_pop exec_do*count () exec_noop) (exec_stackdepth) (in3 print_integer integer_min in4 boolean_dup_times) exec_do*times (exec_while () integer_dup_items exec_stackdepth integer_gte in3 integer_gte) boolean_empty exec_if (integer_fromboolean exec_rot (exec_do*count (boolean_and exec_yank exec_yank boolean_frominteger exec_stackdepth integer_yank exec_noop boolean_or print_integer) integer_mod) (exec_when (boolean_frominteger) integer_add boolean_invert_second_then_and integer_eq print_integer in3) (boolean_dup_items boolean_invert_first_then_and boolean_flush exec_flush integer_empty exec_yankdup integer_gt exec_do*count () print_boolean) integer_dup_times boolean_dup_times exec_dup_times (boolean_xor integer_min integer_flush exec_dup (exec_dup (boolean_shove boolean_frominteger) integer_inc integer_shove exec_empty integer_min boolean_and))) ())
Zero cases best errors: [1 1 0 0 1 0 0 1 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 83
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 927 381 1000 930 382 1000 547 381)
Population mean number of elite cases: 7.55
Count of perfect (error zero) individuals by case: (0 0 927 381 0 930 382 0 547 381)
Population mean number of perfect (error zero) cases: 3.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*times} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_add} {:close 0, :instruction -17} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_s_when_autoconstructing})
Best program: (integer_rot exec_do*times (in3) exec_dup (print_integer boolean_frominteger) exec_when (exec_dup () integer_yankdup) print_boolean boolean_swap boolean_invert_second_then_and exec_yankdup boolean_frominteger exec_noop integer_add -17 in2 integer_div exec_do*range (integer_mod integer_dup exec_s_when_autoconstructing () () ()))
Errors: [1 1 0 0 1 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 23
Size: 32
Percent parens: 0.281
--- Population Statistics ---
Average total errors in population: 6.452
Median total errors in population: 7
Error averages by case: (1.0 1.0 0.073 0.619 1.0 0.07 0.618 1.0 0.453 0.619)
Error minima by case: (1 1 0 0 1 0 0 1 0 0)
Average genome size in population (length): 26.396
Average program size in population (points): 36.031
Average percent parens in population: 0.253
Minimum age in population: 11.6875
Maximum age in population: 16.724609375
Average age in population: 14.90066015625
Median age in population: 14.994140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 61
Genome diversity (% unique genomes):	 0.648
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.624
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4943014
--- Timings ---
Current time: 1559582674710 milliseconds
Total Time:          31.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.1 seconds, 66.5%
Fitness Testing:      6.6 seconds, 20.8%
Report:               3.9 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 83                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 94                 
Correct output: 45                  | Program output: 45                 
Correct output: 4                   | Program output: 47                 
Correct output: 37                  | Program output: 83                 
Correct output: 8                   | Program output: 65                 
Correct output: 37                  | Program output: 41                 
Correct output: 48                  | Program output: 94                 
Correct output: 13                  | Program output: 26                 
Correct output: 20                  | Program output: 77                 
Correct output: 25                  | Program output: 87                 
Correct output: 25                  | Program output: 95                 
Correct output: 19                  | Program output: 19                 
Correct output: 31                  | Program output: 81                 
Correct output: 35                  | Program output: 72                 
Correct output: 0                   | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 20                 
Correct output: 12                  | Program output: 92                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 32                 
Correct output: -49                 | Program output: -13                
Correct output: -76                 | Program output: -76                
Correct output: -91                 | Program output: -2                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: 22                 
Correct output: -64                 | Program output: -64                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: 75                 
Correct output: -21                 | Program output: 67                 
Correct output: -82                 | Program output: -67                
Correct output: -96                 | Program output: 42                 
Correct output: -89                 | Program output: 59                 
Correct output: -89                 | Program output: -7                 
Correct output: 8                   | Program output: 60                 
Correct output: -95                 | Program output: -30                
Correct output: -48                 | Program output: -17                
Correct output: -51                 | Program output: -49                
Correct output: -72                 | Program output: 64                 
Correct output: -71                 | Program output: 5                  
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: 65                 
Correct output: -63                 | Program output: 40                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: 43                 
Correct output: 3                   | Program output: 47                 
Correct output: -51                 | Program output: -16                
Correct output: -23                 | Program output: 74                 
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: 23                 
Correct output: -67                 | Program output: 20                 
Correct output: -97                 | Program output: -2                 
Correct output: -57                 | Program output: -29                
Correct output: -86                 | Program output: 4                  
Correct output: -43                 | Program output: -13                
Correct output: -48                 | Program output: 59                 
Correct output: -89                 | Program output: -84                
Correct output: -81                 | Program output: 95                 
Correct output: -61                 | Program output: -24                
Correct output: -62                 | Program output: 33                 
Correct output: -85                 | Program output: 75                 
Correct output: -100                | Program output: -100               
Correct output: -70                 | Program output: -27                
Correct output: -82                 | Program output: -60                
Correct output: -74                 | Program output: 78                 
Correct output: -100                | Program output: 13                 
Correct output: -84                 | Program output: -84                
Correct output: -35                 | Program output: -27                
Correct output: -41                 | Program output: -41                
Correct output: -89                 | Program output: -4                 
Correct output: -61                 | Program output: 53                 
Correct output: -100                | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: 87                 
Correct output: -96                 | Program output: 8                  
Correct output: -48                 | Program output: -43                
Correct output: 27                  | Program output: 27                 
Correct output: -78                 | Program output: -46                
Correct output: -35                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_pop} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 0, :instruction integer_gt})
Lexicase best program: (integer_lte boolean_not integer_yankdup exec_rot (boolean_swap integer_pop) (integer_yank) () boolean_dup exec_dup_times () exec_dup (integer_dup boolean_flush integer_lt boolean_not print_integer integer_eq in4 boolean_stackdepth) in1 exec_empty integer_dup_times integer_lte integer_mult integer_inc boolean_stackdepth boolean_rot exec_when () integer_gt)
Lexicase best errors: [0 1 1 0 1 0 1 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 35
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_pop} {:close 2, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 0, :instruction integer_gt})
Zero cases best program: (integer_lte boolean_not integer_yankdup exec_rot (boolean_swap integer_pop) (integer_yank) () boolean_dup exec_dup_times () exec_dup (integer_dup boolean_flush integer_lt boolean_not print_integer integer_eq in4 boolean_stackdepth) in1 exec_empty integer_dup_times integer_lte integer_mult integer_inc boolean_stackdepth boolean_rot exec_when () integer_gt)
Zero cases best errors: [0 1 1 0 1 0 1 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 35
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (924 687 1000 241 686 239 1000 924 1000 1000)
Population mean number of elite cases: 7.70
Count of perfect (error zero) individuals by case: (924 687 0 241 686 239 0 924 0 0)
Population mean number of perfect (error zero) cases: 3.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*times} {:close 1, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_empty})
Best program: (integer_rot exec_do*times (in3) in3 print_integer boolean_stackdepth exec_eq integer_lte integer_gte boolean_empty)
Errors: [0 0 1 1 0 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 10
Size: 12
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 6.299
Median total errors in population: 6
Error averages by case: (0.076 0.313 1.0 0.759 0.314 0.761 1.0 0.076 1.0 1.0)
Error minima by case: (0 0 1 0 0 0 1 0 1 1)
Average genome size in population (length): 27.218
Average program size in population (points): 37.12
Average percent parens in population: 0.258
Minimum age in population: 13.578125
Maximum age in population: 18.2626953125
Average age in population: 16.3397470703125
Median age in population: 16.4013671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 25
Genome diversity (% unique genomes):	 0.661
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.641
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5339959
--- Timings ---
Current time: 1559582676991 milliseconds
Total Time:          34.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.8 seconds, 67.2%
Fitness Testing:      7.0 seconds, 20.5%
Report:               4.1 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 75                  | Program output: 81                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 40                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 87                 
Correct output: 45                  | Program output: 65                 
Correct output: 4                   | Program output: 62                 
Correct output: 37                  | Program output: 95                 
Correct output: 8                   | Program output: 8                  
Correct output: 37                  | Program output: 37                 
Correct output: 48                  | Program output: 92                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 88                 
Correct output: 25                  | Program output: 25                 
Correct output: 25                  | Program output: 98                 
Correct output: 19                  | Program output: 72                 
Correct output: 31                  | Program output: 59                 
Correct output: 35                  | Program output: 56                 
Correct output: 0                   | Program output: 0                  
Correct output: 7                   | Program output: 11                 
Correct output: 18                  | Program output: 33                 
Correct output: 12                  | Program output: 33                 
Correct output: 36                  | Program output: 94                 
Correct output: 9                   | Program output: 9                  
Correct output: -49                 | Program output: -32                
Correct output: -76                 | Program output: -56                
Correct output: -91                 | Program output: -41                
Correct output: -76                 | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: -64                 | Program output: 68                 
Correct output: -89                 | Program output: -1                 
Correct output: -90                 | Program output: 99                 
Correct output: -91                 | Program output: 21                 
Correct output: -56                 | Program output: -56                
Correct output: -21                 | Program output: 52                 
Correct output: -82                 | Program output: -38                
Correct output: -96                 | Program output: 74                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -89                
Correct output: 8                   | Program output: 90                 
Correct output: -95                 | Program output: 35                 
Correct output: -48                 | Program output: 5                  
Correct output: -51                 | Program output: 38                 
Correct output: -72                 | Program output: 23                 
Correct output: -71                 | Program output: 32                 
Correct output: -94                 | Program output: 61                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -63                
Correct output: -67                 | Program output: -17                
Correct output: -95                 | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -3                 
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: 12                 
Correct output: -72                 | Program output: -2                 
Correct output: -67                 | Program output: 23                 
Correct output: -97                 | Program output: 25                 
Correct output: -57                 | Program output: 45                 
Correct output: -86                 | Program output: 93                 
Correct output: -43                 | Program output: 48                 
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: 15                 
Correct output: -81                 | Program output: -28                
Correct output: -61                 | Program output: 100                
Correct output: -62                 | Program output: 9                  
Correct output: -85                 | Program output: 70                 
Correct output: -100                | Program output: 31                 
Correct output: -70                 | Program output: -11                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: 9                  
Correct output: -100                | Program output: -32                
Correct output: -84                 | Program output: 35                 
Correct output: -35                 | Program output: 26                 
Correct output: -41                 | Program output: 20                 
Correct output: -89                 | Program output: 61                 
Correct output: -61                 | Program output: 1                  
Correct output: -100                | Program output: 50                 
Correct output: -75                 | Program output: -48                
Correct output: -73                 | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: 2                  
Correct output: 27                  | Program output: 73                 
Correct output: -78                 | Program output: -78                
Correct output: -35                 | Program output: -34                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush})
Lexicase best program: (exec_y_when_autoconstructing (integer_lt boolean_empty boolean_rot integer_shove) boolean_xor integer_dup in4 exec_empty print_integer boolean_frominteger exec_dup_times (exec_when (exec_flush)))
Lexicase best errors: [1 0 1 1 0 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 18
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush})
Zero cases best program: (exec_y_when_autoconstructing (integer_lt boolean_empty boolean_rot integer_shove) boolean_xor integer_dup in4 exec_empty print_integer boolean_frominteger exec_dup_times (exec_when (exec_flush)))
Zero cases best errors: [1 0 1 1 0 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 18
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 437 480 479 434 437 437 915 1000 481)
Population mean number of elite cases: 6.10
Count of perfect (error zero) individuals by case: (0 437 480 479 434 437 437 915 0 481)
Population mean number of perfect (error zero) cases: 4.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_swap} {:close 2, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_div} {:close 0, :instruction 53} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction tagged_912} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items})
Best program: (exec_s_when_autoconstructing (integer_dup_items) (in4 boolean_yankdup integer_swap exec_shove ()) (boolean_pop in3 exec_s () (boolean_invert_first_then_and) (boolean_dup_times integer_gt) integer_div) 53 boolean_eq in4 tagged_912 exec_y_when_autoconstructing (print_integer) exec_when (exec_y_when_autoconstructing (exec_eq) boolean_xor) exec_dup_times () integer_mult exec_dup (exec_empty integer_yank boolean_frominteger exec_k (integer_eq) (integer_flush) exec_rot (integer_rot integer_yank boolean_frominteger integer_dup_items) () ()))
Errors: [1 0 1 1 0 0 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 37
Size: 55
Percent parens: 0.327
--- Population Statistics ---
Average total errors in population: 5.9
Median total errors in population: 6
Error averages by case: (1.0 0.563 0.52 0.521 0.566 0.563 0.563 0.085 1.0 0.519)
Error minima by case: (1 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 25.266
Average program size in population (points): 34.622
Average percent parens in population: 0.257
Minimum age in population: 15.28125
Maximum age in population: 19.994140625
Average age in population: 17.8416611328125
Median age in population: 17.888916015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 38
Genome diversity (% unique genomes):	 0.647
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.626
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 5694237
--- Timings ---
Current time: 1559582679511 milliseconds
Total Time:          36.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.7 seconds, 68.0%
Fitness Testing:      7.3 seconds, 20.1%
Report:               4.2 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 75                  | Program output: 81                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 40                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 87                 
Correct output: 45                  | Program output: 65                 
Correct output: 4                   | Program output: 62                 
Correct output: 37                  | Program output: 95                 
Correct output: 8                   | Program output: 8                  
Correct output: 37                  | Program output: 37                 
Correct output: 48                  | Program output: 92                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 88                 
Correct output: 25                  | Program output: 25                 
Correct output: 25                  | Program output: 98                 
Correct output: 19                  | Program output: 72                 
Correct output: 31                  | Program output: 59                 
Correct output: 35                  | Program output: 56                 
Correct output: 0                   | Program output: 0                  
Correct output: 7                   | Program output: 11                 
Correct output: 18                  | Program output: 33                 
Correct output: 12                  | Program output: 33                 
Correct output: 36                  | Program output: 94                 
Correct output: 9                   | Program output: 9                  
Correct output: -49                 | Program output: -32                
Correct output: -76                 | Program output: -56                
Correct output: -91                 | Program output: -41                
Correct output: -76                 | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: -64                 | Program output: 68                 
Correct output: -89                 | Program output: -1                 
Correct output: -90                 | Program output: 99                 
Correct output: -91                 | Program output: 21                 
Correct output: -56                 | Program output: -56                
Correct output: -21                 | Program output: 52                 
Correct output: -82                 | Program output: -38                
Correct output: -96                 | Program output: 74                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -89                
Correct output: 8                   | Program output: 90                 
Correct output: -95                 | Program output: 35                 
Correct output: -48                 | Program output: 5                  
Correct output: -51                 | Program output: 38                 
Correct output: -72                 | Program output: 23                 
Correct output: -71                 | Program output: 32                 
Correct output: -94                 | Program output: 61                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -63                
Correct output: -67                 | Program output: -17                
Correct output: -95                 | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -3                 
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: 12                 
Correct output: -72                 | Program output: -2                 
Correct output: -67                 | Program output: 23                 
Correct output: -97                 | Program output: 25                 
Correct output: -57                 | Program output: 45                 
Correct output: -86                 | Program output: 93                 
Correct output: -43                 | Program output: 48                 
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: 15                 
Correct output: -81                 | Program output: -28                
Correct output: -61                 | Program output: 100                
Correct output: -62                 | Program output: 9                  
Correct output: -85                 | Program output: 70                 
Correct output: -100                | Program output: 31                 
Correct output: -70                 | Program output: -11                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: 9                  
Correct output: -100                | Program output: -32                
Correct output: -84                 | Program output: 35                 
Correct output: -35                 | Program output: 26                 
Correct output: -41                 | Program output: 20                 
Correct output: -89                 | Program output: 61                 
Correct output: -61                 | Program output: 1                  
Correct output: -100                | Program output: 50                 
Correct output: -75                 | Program output: -48                
Correct output: -73                 | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: 2                  
Correct output: 27                  | Program output: 73                 
Correct output: -78                 | Program output: -78                
Correct output: -35                 | Program output: -34                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush})
Lexicase best program: (exec_y_when_autoconstructing (integer_lt exec_y_when_autoconstructing (integer_lt boolean_empty boolean_rot integer_shove)) boolean_xor integer_dup in4 exec_empty print_integer boolean_frominteger exec_dup_times (exec_when (exec_flush)))
Lexicase best errors: [0 1 0 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 21
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush})
Zero cases best program: (exec_y_when_autoconstructing (integer_lt exec_y_when_autoconstructing (integer_lt boolean_empty boolean_rot integer_shove)) boolean_xor integer_dup in4 exec_empty print_integer boolean_frominteger exec_dup_times (exec_when (exec_flush)))
Zero cases best errors: [0 1 0 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 21
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (538 408 538 1000 947 1000 1000 537 537 539)
Population mean number of elite cases: 7.04
Count of perfect (error zero) individuals by case: (538 408 538 0 947 0 0 537 537 539)
Population mean number of perfect (error zero) cases: 4.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_swap} {:close 2, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_pop} {:close 2, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 0, :instruction integer_gte})
Best program: (exec_s_when_autoconstructing (integer_dup_items) (in4 boolean_yankdup integer_swap exec_shove ()) (boolean_pop in3 integer_yankdup exec_rot (boolean_swap integer_pop) (boolean_empty) () boolean_dup exec_dup_times () exec_dup (integer_dup boolean_flush integer_lt boolean_not print_integer integer_eq in4 boolean_stackdepth) in1) exec_empty integer_dup_times integer_lte integer_mult integer_inc boolean_stackdepth boolean_rot exec_when () integer_gte)
Errors: [0 1 0 1 0 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 34
Size: 45
Percent parens: 0.244
--- Population Statistics ---
Average total errors in population: 5.956
Median total errors in population: 4
Error averages by case: (0.462 0.592 0.462 1.0 0.053 1.0 1.0 0.463 0.463 0.461)
Error minima by case: (0 0 0 1 0 1 1 0 0 0)
Average genome size in population (length): 24.445
Average program size in population (points): 33.45
Average percent parens in population: 0.254
Minimum age in population: 16.28125
Maximum age in population: 21.33935546875
Average age in population: 19.379498046875
Median age in population: 19.48291015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 50
Genome diversity (% unique genomes):	 0.647
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.626
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 6000262
--- Timings ---
Current time: 1559582682107 milliseconds
Total Time:          38.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.7 seconds, 68.6%
Fitness Testing:      7.6 seconds, 19.6%
Report:               4.5 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 83                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 94                 
Correct output: 45                  | Program output: 45                 
Correct output: 4                   | Program output: 47                 
Correct output: 37                  | Program output: 83                 
Correct output: 8                   | Program output: 65                 
Correct output: 37                  | Program output: 41                 
Correct output: 48                  | Program output: 94                 
Correct output: 13                  | Program output: 26                 
Correct output: 20                  | Program output: 77                 
Correct output: 25                  | Program output: 87                 
Correct output: 25                  | Program output: 95                 
Correct output: 19                  | Program output: 19                 
Correct output: 31                  | Program output: 81                 
Correct output: 35                  | Program output: 72                 
Correct output: 0                   | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 20                 
Correct output: 12                  | Program output: 92                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 32                 
Correct output: -49                 | Program output: -13                
Correct output: -76                 | Program output: -76                
Correct output: -91                 | Program output: -2                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: 22                 
Correct output: -64                 | Program output: -64                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: 75                 
Correct output: -21                 | Program output: 67                 
Correct output: -82                 | Program output: -67                
Correct output: -96                 | Program output: 42                 
Correct output: -89                 | Program output: 59                 
Correct output: -89                 | Program output: -7                 
Correct output: 8                   | Program output: 60                 
Correct output: -95                 | Program output: -30                
Correct output: -48                 | Program output: -17                
Correct output: -51                 | Program output: -49                
Correct output: -72                 | Program output: 64                 
Correct output: -71                 | Program output: 5                  
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: 65                 
Correct output: -63                 | Program output: 40                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: 43                 
Correct output: 3                   | Program output: 47                 
Correct output: -51                 | Program output: -16                
Correct output: -23                 | Program output: 74                 
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: 23                 
Correct output: -67                 | Program output: 20                 
Correct output: -97                 | Program output: -2                 
Correct output: -57                 | Program output: -29                
Correct output: -86                 | Program output: 4                  
Correct output: -43                 | Program output: -13                
Correct output: -48                 | Program output: 59                 
Correct output: -89                 | Program output: -84                
Correct output: -81                 | Program output: 95                 
Correct output: -61                 | Program output: -24                
Correct output: -62                 | Program output: 33                 
Correct output: -85                 | Program output: 75                 
Correct output: -100                | Program output: -100               
Correct output: -70                 | Program output: -27                
Correct output: -82                 | Program output: -60                
Correct output: -74                 | Program output: 78                 
Correct output: -100                | Program output: 13                 
Correct output: -84                 | Program output: -84                
Correct output: -35                 | Program output: -27                
Correct output: -41                 | Program output: -41                
Correct output: -89                 | Program output: -4                 
Correct output: -61                 | Program output: 53                 
Correct output: -100                | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: 87                 
Correct output: -96                 | Program output: 8                  
Correct output: -48                 | Program output: -43                
Correct output: 27                  | Program output: 27                 
Correct output: -78                 | Program output: -46                
Correct output: -35                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 2, :instruction integer_flush} {:close 0, :instruction 38} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 2, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 0, :instruction tag_integer_205} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*count})
Lexicase best program: (boolean_invert_second_then_and integer_empty integer_flush 38 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank in3 print_integer boolean_stackdepth) (integer_yank integer_lte exec_do*while (boolean_flush) boolean_pop integer_dup_times exec_flush integer_shove) () boolean_and integer_mult exec_do*range (boolean_frominteger exec_when (integer_eq tag_integer_205 integer_lt exec_eq boolean_eq exec_do*count ())))
Lexicase best errors: [1 1 0 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 38
Percent parens: 0.211
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 2, :instruction integer_flush} {:close 0, :instruction 38} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 2, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 0, :instruction tag_integer_205} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*count})
Zero cases best program: (boolean_invert_second_then_and integer_empty integer_flush 38 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank in3 print_integer boolean_stackdepth) (integer_yank integer_lte exec_do*while (boolean_flush) boolean_pop integer_dup_times exec_flush integer_shove) () boolean_and integer_mult exec_do*range (boolean_frominteger exec_when (integer_eq tag_integer_205 integer_lt exec_eq boolean_eq exec_do*count ())))
Zero cases best errors: [1 1 0 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 38
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (761 1000 159 159 159 1000 1000 159 159 761)
Population mean number of elite cases: 5.32
Count of perfect (error zero) individuals by case: (761 0 159 159 159 0 0 159 159 761)
Population mean number of perfect (error zero) cases: 2.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth})
Best program: (boolean_invert_second_then_and integer_empty integer_yankdup tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank in3 print_integer boolean_stackdepth) () ())
Errors: [1 1 0 0 0 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 11
Size: 15
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 7.683
Median total errors in population: 8
Error averages by case: (0.239 1.0 0.841 0.841 0.841 1.0 1.0 0.841 0.841 0.239)
Error minima by case: (0 1 0 0 0 1 1 0 0 0)
Average genome size in population (length): 22.865
Average program size in population (points): 31.303
Average percent parens in population: 0.249
Minimum age in population: 17.28125
Maximum age in population: 22.62158203125
Average age in population: 20.80890612792969
Median age in population: 20.87628173828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 60
Genome diversity (% unique genomes):	 0.583
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 77
Syntactic diversity (% unique Push programs):	 0.563
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 6271918
--- Timings ---
Current time: 1559582684778 milliseconds
Total Time:          41.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.9 seconds, 69.3%
Fitness Testing:      7.9 seconds, 18.9%
Report:               4.8 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 83                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 94                 
Correct output: 45                  | Program output: 45                 
Correct output: 4                   | Program output: 47                 
Correct output: 37                  | Program output: 83                 
Correct output: 8                   | Program output: 65                 
Correct output: 37                  | Program output: 41                 
Correct output: 48                  | Program output: 94                 
Correct output: 13                  | Program output: 26                 
Correct output: 20                  | Program output: 77                 
Correct output: 25                  | Program output: 87                 
Correct output: 25                  | Program output: 95                 
Correct output: 19                  | Program output: 19                 
Correct output: 31                  | Program output: 81                 
Correct output: 35                  | Program output: 72                 
Correct output: 0                   | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 20                 
Correct output: 12                  | Program output: 92                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 32                 
Correct output: -49                 | Program output: -13                
Correct output: -76                 | Program output: -76                
Correct output: -91                 | Program output: -2                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: 22                 
Correct output: -64                 | Program output: -64                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: 75                 
Correct output: -21                 | Program output: 67                 
Correct output: -82                 | Program output: -67                
Correct output: -96                 | Program output: 42                 
Correct output: -89                 | Program output: 59                 
Correct output: -89                 | Program output: -7                 
Correct output: 8                   | Program output: 60                 
Correct output: -95                 | Program output: -30                
Correct output: -48                 | Program output: -17                
Correct output: -51                 | Program output: -49                
Correct output: -72                 | Program output: 64                 
Correct output: -71                 | Program output: 5                  
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: 65                 
Correct output: -63                 | Program output: 40                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: 43                 
Correct output: 3                   | Program output: 47                 
Correct output: -51                 | Program output: -16                
Correct output: -23                 | Program output: 74                 
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: 23                 
Correct output: -67                 | Program output: 20                 
Correct output: -97                 | Program output: -2                 
Correct output: -57                 | Program output: -29                
Correct output: -86                 | Program output: 4                  
Correct output: -43                 | Program output: -13                
Correct output: -48                 | Program output: 59                 
Correct output: -89                 | Program output: -84                
Correct output: -81                 | Program output: 95                 
Correct output: -61                 | Program output: -24                
Correct output: -62                 | Program output: 33                 
Correct output: -85                 | Program output: 75                 
Correct output: -100                | Program output: -100               
Correct output: -70                 | Program output: -27                
Correct output: -82                 | Program output: -60                
Correct output: -74                 | Program output: 78                 
Correct output: -100                | Program output: 13                 
Correct output: -84                 | Program output: -84                
Correct output: -35                 | Program output: -27                
Correct output: -41                 | Program output: -41                
Correct output: -89                 | Program output: -4                 
Correct output: -61                 | Program output: 53                 
Correct output: -100                | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: 87                 
Correct output: -96                 | Program output: 8                  
Correct output: -48                 | Program output: -43                
Correct output: 27                  | Program output: 27                 
Correct output: -78                 | Program output: -46                
Correct output: -35                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 1, :instruction integer_gt})
Lexicase best program: (exec_rot (boolean_rot boolean_or integer_pop exec_do*count (boolean_and) exec_stackdepth) (in3 print_integer integer_min in4 boolean_dup_times) (exec_do*times (exec_while () integer_dup_items boolean_stackdepth boolean_rot exec_when () integer_gt)))
Lexicase best errors: [1 0 1 0 1 1 1 1 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 27
Percent parens: 0.296
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 1, :instruction integer_gt})
Zero cases best program: (exec_rot (boolean_rot boolean_or integer_pop exec_do*count (boolean_and) exec_stackdepth) (in3 print_integer integer_min in4 boolean_dup_times) (exec_do*times (exec_while () integer_dup_items boolean_stackdepth boolean_rot exec_when () integer_gt)))
Zero cases best errors: [1 0 1 0 1 1 1 1 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 27
Percent parens: 0.296
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 672 1000 672 1000 1000 1000 253 1000 672)
Population mean number of elite cases: 8.27
Count of perfect (error zero) individuals by case: (0 672 0 672 0 0 0 253 0 672)
Population mean number of perfect (error zero) cases: 2.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth})
Best program: (boolean_invert_second_then_and integer_empty integer_yankdup tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank in3 print_integer boolean_stackdepth) () ())
Errors: [1 0 1 0 1 1 1 1 1 0]
Total: 7
Mean: 0.7
Genome size: 11
Size: 15
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 7.731
Median total errors in population: 7
Error averages by case: (1.0 0.328 1.0 0.328 1.0 1.0 1.0 0.747 1.0 0.328)
Error minima by case: (1 0 1 0 1 1 1 0 1 0)
Average genome size in population (length): 25.097
Average program size in population (points): 34.652
Average percent parens in population: 0.262
Minimum age in population: 18.4375
Maximum age in population: 24.1734619140625
Average age in population: 22.26471215820312
Median age in population: 22.312744140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 16
Genome diversity (% unique genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.576
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 6647281
--- Timings ---
Current time: 1559582686882 milliseconds
Total Time:          43.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.5 seconds, 69.6%
Fitness Testing:      8.3 seconds, 18.8%
Report:               5.0 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 83                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 94                 
Correct output: 45                  | Program output: 45                 
Correct output: 4                   | Program output: 47                 
Correct output: 37                  | Program output: 83                 
Correct output: 8                   | Program output: 65                 
Correct output: 37                  | Program output: 41                 
Correct output: 48                  | Program output: 94                 
Correct output: 13                  | Program output: 26                 
Correct output: 20                  | Program output: 77                 
Correct output: 25                  | Program output: 87                 
Correct output: 25                  | Program output: 95                 
Correct output: 19                  | Program output: 19                 
Correct output: 31                  | Program output: 81                 
Correct output: 35                  | Program output: 72                 
Correct output: 0                   | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 20                 
Correct output: 12                  | Program output: 92                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 32                 
Correct output: -49                 | Program output: -13                
Correct output: -76                 | Program output: -76                
Correct output: -91                 | Program output: -2                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: 22                 
Correct output: -64                 | Program output: -64                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: 75                 
Correct output: -21                 | Program output: 67                 
Correct output: -82                 | Program output: -67                
Correct output: -96                 | Program output: 42                 
Correct output: -89                 | Program output: 59                 
Correct output: -89                 | Program output: -7                 
Correct output: 8                   | Program output: 60                 
Correct output: -95                 | Program output: -30                
Correct output: -48                 | Program output: -17                
Correct output: -51                 | Program output: -49                
Correct output: -72                 | Program output: 64                 
Correct output: -71                 | Program output: 5                  
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: 65                 
Correct output: -63                 | Program output: 40                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: 43                 
Correct output: 3                   | Program output: 47                 
Correct output: -51                 | Program output: -16                
Correct output: -23                 | Program output: 74                 
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: 23                 
Correct output: -67                 | Program output: 20                 
Correct output: -97                 | Program output: -2                 
Correct output: -57                 | Program output: -29                
Correct output: -86                 | Program output: 4                  
Correct output: -43                 | Program output: -13                
Correct output: -48                 | Program output: 59                 
Correct output: -89                 | Program output: -84                
Correct output: -81                 | Program output: 95                 
Correct output: -61                 | Program output: -24                
Correct output: -62                 | Program output: 33                 
Correct output: -85                 | Program output: 75                 
Correct output: -100                | Program output: -100               
Correct output: -70                 | Program output: -27                
Correct output: -82                 | Program output: -60                
Correct output: -74                 | Program output: 78                 
Correct output: -100                | Program output: 13                 
Correct output: -84                 | Program output: -84                
Correct output: -35                 | Program output: -27                
Correct output: -41                 | Program output: -41                
Correct output: -89                 | Program output: -4                 
Correct output: -61                 | Program output: 53                 
Correct output: -100                | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: 87                 
Correct output: -96                 | Program output: 8                  
Correct output: -48                 | Program output: -43                
Correct output: 27                  | Program output: 27                 
Correct output: -78                 | Program output: -46                
Correct output: -35                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod})
Lexicase best program: (integer_yankdup exec_rot (boolean_swap integer_pop exec_stackdepth) (in3 print_integer integer_min in4 boolean_dup_times) (exec_do*times (exec_while () integer_dup_items exec_stackdepth integer_gte in3 integer_gte boolean_empty) exec_if (integer_fromboolean exec_rot (exec_do*count (integer_gt exec_yank exec_yank boolean_frominteger exec_stackdepth integer_yank exec_noop boolean_or print_integer integer_mod)) () ()) ()))
Lexicase best errors: [1 1 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 44
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod})
Zero cases best program: (integer_yankdup exec_rot (boolean_swap integer_pop exec_stackdepth) (in3 print_integer integer_min in4 boolean_dup_times) (exec_do*times (exec_while () integer_dup_items exec_stackdepth integer_gte in3 integer_gte boolean_empty) exec_if (integer_fromboolean exec_rot (exec_do*count (integer_gt exec_yank exec_yank boolean_frominteger exec_stackdepth integer_yank exec_noop boolean_or print_integer integer_mod)) () ()) ()))
Zero cases best errors: [1 1 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 44
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 733 733 1000 734 732 732 933 932)
Population mean number of elite cases: 8.53
Count of perfect (error zero) individuals by case: (0 0 733 733 0 734 732 732 933 932)
Population mean number of perfect (error zero) cases: 5.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (boolean_invert_second_then_and integer_empty integer_yankdup tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank in3 print_integer exec_y_when_autoconstructing ()) () ())
Errors: [1 1 0 0 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 11
Size: 16
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 4.471
Median total errors in population: 3
Error averages by case: (1.0 1.0 0.267 0.267 1.0 0.266 0.268 0.268 0.067 0.068)
Error minima by case: (1 1 0 0 1 0 0 0 0 0)
Average genome size in population (length): 24.852
Average program size in population (points): 34.283
Average percent parens in population: 0.261
Minimum age in population: 20.8193359375
Maximum age in population: 25.65478515625
Average age in population: 23.70760372924805
Median age in population: 23.79302978515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 14
Genome diversity (% unique genomes):	 0.664
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.642
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 7013426
--- Timings ---
Current time: 1559582689235 milliseconds
Total Time:          46.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.4 seconds, 70.1%
Fitness Testing:      8.6 seconds, 18.6%
Report:               5.1 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 83                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 94                 
Correct output: 45                  | Program output: 45                 
Correct output: 4                   | Program output: 47                 
Correct output: 37                  | Program output: 83                 
Correct output: 8                   | Program output: 65                 
Correct output: 37                  | Program output: 41                 
Correct output: 48                  | Program output: 94                 
Correct output: 13                  | Program output: 26                 
Correct output: 20                  | Program output: 77                 
Correct output: 25                  | Program output: 87                 
Correct output: 25                  | Program output: 95                 
Correct output: 19                  | Program output: 19                 
Correct output: 31                  | Program output: 81                 
Correct output: 35                  | Program output: 72                 
Correct output: 0                   | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 20                 
Correct output: 12                  | Program output: 92                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 32                 
Correct output: -49                 | Program output: -13                
Correct output: -76                 | Program output: -76                
Correct output: -91                 | Program output: -2                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: 22                 
Correct output: -64                 | Program output: -64                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: 75                 
Correct output: -21                 | Program output: 67                 
Correct output: -82                 | Program output: -67                
Correct output: -96                 | Program output: 42                 
Correct output: -89                 | Program output: 59                 
Correct output: -89                 | Program output: -7                 
Correct output: 8                   | Program output: 60                 
Correct output: -95                 | Program output: -30                
Correct output: -48                 | Program output: -17                
Correct output: -51                 | Program output: -49                
Correct output: -72                 | Program output: 64                 
Correct output: -71                 | Program output: 5                  
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: 65                 
Correct output: -63                 | Program output: 40                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: 43                 
Correct output: 3                   | Program output: 47                 
Correct output: -51                 | Program output: -16                
Correct output: -23                 | Program output: 74                 
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: 23                 
Correct output: -67                 | Program output: 20                 
Correct output: -97                 | Program output: -2                 
Correct output: -57                 | Program output: -29                
Correct output: -86                 | Program output: 4                  
Correct output: -43                 | Program output: -13                
Correct output: -48                 | Program output: 59                 
Correct output: -89                 | Program output: -84                
Correct output: -81                 | Program output: 95                 
Correct output: -61                 | Program output: -24                
Correct output: -62                 | Program output: 33                 
Correct output: -85                 | Program output: 75                 
Correct output: -100                | Program output: -100               
Correct output: -70                 | Program output: -27                
Correct output: -82                 | Program output: -60                
Correct output: -74                 | Program output: 78                 
Correct output: -100                | Program output: 13                 
Correct output: -84                 | Program output: -84                
Correct output: -35                 | Program output: -27                
Correct output: -41                 | Program output: -41                
Correct output: -89                 | Program output: -4                 
Correct output: -61                 | Program output: 53                 
Correct output: -100                | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: 87                 
Correct output: -96                 | Program output: 8                  
Correct output: -48                 | Program output: -43                
Correct output: 27                  | Program output: 27                 
Correct output: -78                 | Program output: -46                
Correct output: -35                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_swap} {:close 2, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush})
Lexicase best program: (exec_y_when_autoconstructing (boolean_swap integer_swap exec_shove ()) boolean_pop exec_noop in3 print_integer integer_min in4 integer_sub exec_if (exec_while () integer_dup_items exec_flush) ())
Lexicase best errors: [0 1 1 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 21
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_swap} {:close 2, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush})
Zero cases best program: (exec_y_when_autoconstructing (boolean_swap integer_swap exec_shove ()) boolean_pop exec_noop in3 print_integer integer_min in4 integer_sub exec_if (exec_while () integer_dup_items exec_flush) ())
Zero cases best errors: [0 1 1 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 21
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (925 1000 1000 928 1000 926 1000 1000 927 927)
Population mean number of elite cases: 9.63
Count of perfect (error zero) individuals by case: (925 0 0 928 0 926 0 0 927 927)
Population mean number of perfect (error zero) cases: 4.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 1, :instruction -37} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_while} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction -17} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_stackdepth})
Best program: (exec_rot (boolean_rot boolean_or integer_pop integer_lt) (-37) (exec_stackdepth) in3 print_integer integer_min in4 boolean_dup_times exec_do*times (exec_while () integer_dup_items) integer_add -17 in2 integer_div exec_do*range (integer_mod integer_dup exec_s_when_autoconstructing () (integer_sub boolean_yankdup integer_add boolean_stackdepth) ()))
Errors: [0 1 1 0 1 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 27
Size: 37
Percent parens: 0.270
--- Population Statistics ---
Average total errors in population: 5.367
Median total errors in population: 5
Error averages by case: (0.075 1.0 1.0 0.072 1.0 0.074 1.0 1.0 0.073 0.073)
Error minima by case: (0 1 1 0 1 0 1 1 0 0)
Average genome size in population (length): 24.484
Average program size in population (points): 33.836
Average percent parens in population: 0.266
Minimum age in population: 22.056640625
Maximum age in population: 27.151123046875
Average age in population: 25.22997773742676
Median age in population: 25.33203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 13
Genome diversity (% unique genomes):	 0.648
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.623
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 7423330
--- Timings ---
Current time: 1559582691788 milliseconds
Total Time:          48.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.0 seconds, 70.4%
Fitness Testing:      9.0 seconds, 18.6%
Report:               5.2 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 83                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 94                 
Correct output: 45                  | Program output: 45                 
Correct output: 4                   | Program output: 47                 
Correct output: 37                  | Program output: 83                 
Correct output: 8                   | Program output: 65                 
Correct output: 37                  | Program output: 41                 
Correct output: 48                  | Program output: 94                 
Correct output: 13                  | Program output: 26                 
Correct output: 20                  | Program output: 77                 
Correct output: 25                  | Program output: 87                 
Correct output: 25                  | Program output: 95                 
Correct output: 19                  | Program output: 19                 
Correct output: 31                  | Program output: 81                 
Correct output: 35                  | Program output: 72                 
Correct output: 0                   | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 20                 
Correct output: 12                  | Program output: 92                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 32                 
Correct output: -49                 | Program output: -13                
Correct output: -76                 | Program output: -76                
Correct output: -91                 | Program output: -2                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: 22                 
Correct output: -64                 | Program output: -64                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: 75                 
Correct output: -21                 | Program output: 67                 
Correct output: -82                 | Program output: -67                
Correct output: -96                 | Program output: 42                 
Correct output: -89                 | Program output: 59                 
Correct output: -89                 | Program output: -7                 
Correct output: 8                   | Program output: 60                 
Correct output: -95                 | Program output: -30                
Correct output: -48                 | Program output: -17                
Correct output: -51                 | Program output: -49                
Correct output: -72                 | Program output: 64                 
Correct output: -71                 | Program output: 5                  
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: 65                 
Correct output: -63                 | Program output: 40                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: 43                 
Correct output: 3                   | Program output: 47                 
Correct output: -51                 | Program output: -16                
Correct output: -23                 | Program output: 74                 
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: 23                 
Correct output: -67                 | Program output: 20                 
Correct output: -97                 | Program output: -2                 
Correct output: -57                 | Program output: -29                
Correct output: -86                 | Program output: 4                  
Correct output: -43                 | Program output: -13                
Correct output: -48                 | Program output: 59                 
Correct output: -89                 | Program output: -84                
Correct output: -81                 | Program output: 95                 
Correct output: -61                 | Program output: -24                
Correct output: -62                 | Program output: 33                 
Correct output: -85                 | Program output: 75                 
Correct output: -100                | Program output: -100               
Correct output: -70                 | Program output: -27                
Correct output: -82                 | Program output: -60                
Correct output: -74                 | Program output: 78                 
Correct output: -100                | Program output: 13                 
Correct output: -84                 | Program output: -84                
Correct output: -35                 | Program output: -27                
Correct output: -41                 | Program output: -41                
Correct output: -89                 | Program output: -4                 
Correct output: -61                 | Program output: 53                 
Correct output: -100                | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: 87                 
Correct output: -96                 | Program output: 8                  
Correct output: -48                 | Program output: -43                
Correct output: 27                  | Program output: 27                 
Correct output: -78                 | Program output: -46                
Correct output: -35                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*times} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction exec_k})
Lexicase best program: (integer_rot exec_do*times (in3) exec_dup (print_integer boolean_frominteger) exec_when (exec_dup () integer_yankdup) print_boolean print_integer integer_eq in4 boolean_stackdepth in1 exec_empty integer_dup_times boolean_xor exec_dup_times () exec_rot () (exec_if (in1 exec_k () ()) ()) ())
Lexicase best errors: [1 0 1 1 1 1 1 1 1 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 8
Lexicase best mean error: 0.8
Lexicase best size: 36
Percent parens: 0.361
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*times} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction exec_k})
Zero cases best program: (integer_rot exec_do*times (in3) exec_dup (print_integer boolean_frominteger) exec_when (exec_dup () integer_yankdup) print_boolean print_integer integer_eq in4 boolean_stackdepth in1 exec_empty integer_dup_times boolean_xor exec_dup_times () exec_rot () (exec_if (in1 exec_k () ()) ()) ())
Zero cases best errors: [1 0 1 1 1 1 1 1 1 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 2
Zero cases best total error: 8
Zero cases best mean error: 0.8
Zero cases best size: 36
Percent parens: 0.361
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 943 1000 1000 1000 1000 1000 1000 1000 944)
Population mean number of elite cases: 9.89
Count of perfect (error zero) individuals by case: (0 943 0 0 0 0 0 0 0 944)
Population mean number of perfect (error zero) cases: 1.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_while})
Best program: (exec_rot (boolean_rot boolean_or integer_pop exec_do*count () exec_noop) (exec_stackdepth) (in3 print_integer integer_mod in4 boolean_dup_times) exec_do*times (exec_while ()))
Errors: [1 0 1 1 1 1 1 1 1 0]
Total: 8
Mean: 0.8
Genome size: 14
Size: 21
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 8.113
Median total errors in population: 8
Error averages by case: (1.0 0.057 1.0 1.0 1.0 1.0 1.0 1.0 1.0 0.056)
Error minima by case: (1 0 1 1 1 1 1 1 1 0)
Average genome size in population (length): 24.306
Average program size in population (points): 33.259
Average percent parens in population: 0.261
Minimum age in population: 23.056640625
Maximum age in population: 28.72043609619141
Average age in population: 26.65898418426514
Median age in population: 26.72654342651367
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 13
Genome diversity (% unique genomes):	 0.658
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.638
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 7824938
--- Timings ---
Current time: 1559582693832 milliseconds
Total Time:          50.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.5 seconds, 70.0%
Fitness Testing:      9.4 seconds, 18.4%
Report:               5.8 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 75                  | Program output: 81                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 40                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 87                 
Correct output: 45                  | Program output: 65                 
Correct output: 4                   | Program output: 62                 
Correct output: 37                  | Program output: 95                 
Correct output: 8                   | Program output: 8                  
Correct output: 37                  | Program output: 37                 
Correct output: 48                  | Program output: 92                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 88                 
Correct output: 25                  | Program output: 25                 
Correct output: 25                  | Program output: 98                 
Correct output: 19                  | Program output: 72                 
Correct output: 31                  | Program output: 59                 
Correct output: 35                  | Program output: 56                 
Correct output: 0                   | Program output: 0                  
Correct output: 7                   | Program output: 11                 
Correct output: 18                  | Program output: 33                 
Correct output: 12                  | Program output: 33                 
Correct output: 36                  | Program output: 94                 
Correct output: 9                   | Program output: 9                  
Correct output: -49                 | Program output: -32                
Correct output: -76                 | Program output: -56                
Correct output: -91                 | Program output: -41                
Correct output: -76                 | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: -64                 | Program output: 68                 
Correct output: -89                 | Program output: -1                 
Correct output: -90                 | Program output: 99                 
Correct output: -91                 | Program output: 21                 
Correct output: -56                 | Program output: -56                
Correct output: -21                 | Program output: 52                 
Correct output: -82                 | Program output: -38                
Correct output: -96                 | Program output: 74                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -89                
Correct output: 8                   | Program output: 90                 
Correct output: -95                 | Program output: 35                 
Correct output: -48                 | Program output: 5                  
Correct output: -51                 | Program output: 38                 
Correct output: -72                 | Program output: 23                 
Correct output: -71                 | Program output: 32                 
Correct output: -94                 | Program output: 61                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -63                
Correct output: -67                 | Program output: -17                
Correct output: -95                 | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -3                 
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: 12                 
Correct output: -72                 | Program output: -2                 
Correct output: -67                 | Program output: 23                 
Correct output: -97                 | Program output: 25                 
Correct output: -57                 | Program output: 45                 
Correct output: -86                 | Program output: 93                 
Correct output: -43                 | Program output: 48                 
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: 15                 
Correct output: -81                 | Program output: -28                
Correct output: -61                 | Program output: 100                
Correct output: -62                 | Program output: 9                  
Correct output: -85                 | Program output: 70                 
Correct output: -100                | Program output: 31                 
Correct output: -70                 | Program output: -11                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: 9                  
Correct output: -100                | Program output: -32                
Correct output: -84                 | Program output: 35                 
Correct output: -35                 | Program output: 26                 
Correct output: -41                 | Program output: 20                 
Correct output: -89                 | Program output: 61                 
Correct output: -61                 | Program output: 1                  
Correct output: -100                | Program output: 50                 
Correct output: -75                 | Program output: -48                
Correct output: -73                 | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: 2                  
Correct output: 27                  | Program output: 73                 
Correct output: -78                 | Program output: -78                
Correct output: -35                 | Program output: -34                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction -5} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt})
Lexicase best program: (in4 exec_dup (print_integer boolean_frominteger) exec_when (exec_dup () integer_yankdup) -5 integer_shove integer_swap exec_yankdup boolean_frominteger in4 boolean_stackdepth in1 exec_do*count (integer_dup_times integer_lte) integer_mult integer_inc boolean_stackdepth integer_dup_times exec_when (integer_gt))
Lexicase best errors: [0 1 0 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 30
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction -5} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt})
Zero cases best program: (in4 exec_dup (print_integer boolean_frominteger) exec_when (exec_dup () integer_yankdup) -5 integer_shove integer_swap exec_yankdup boolean_frominteger in4 boolean_stackdepth in1 exec_do*count (integer_dup_times integer_lte) integer_mult integer_inc boolean_stackdepth integer_dup_times exec_when (integer_gt))
Zero cases best errors: [0 1 0 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 30
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 1000 2 1000 944 2 1000 945 944 2)
Population mean number of elite cases: 5.84
Count of perfect (error zero) individuals by case: (2 0 2 0 944 2 0 945 944 2)
Population mean number of perfect (error zero) cases: 2.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup})
Best program: (integer_rot exec_do*times (in4 exec_dup (print_integer exec_empty) exec_when (exec_dup ())))
Errors: [0 1 0 1 0 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 8
Size: 13
Percent parens: 0.385
--- Population Statistics ---
Average total errors in population: 7.159
Median total errors in population: 7
Error averages by case: (0.998 1.0 0.998 1.0 0.056 0.998 1.0 0.055 0.056 0.998)
Error minima by case: (0 1 0 1 0 0 1 0 0 0)
Average genome size in population (length): 24.065
Average program size in population (points): 33.0
Average percent parens in population: 0.264
Minimum age in population: 24.056640625
Maximum age in population: 30.48548889160156
Average age in population: 28.14420914077759
Median age in population: 28.23599243164062
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.69
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.668
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 8232651
--- Timings ---
Current time: 1559582695827 milliseconds
Total Time:          52.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.0 seconds, 70.1%
Fitness Testing:      9.8 seconds, 18.5%
Report:               6.0 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 75                  | Program output: 81                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 40                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 87                 
Correct output: 45                  | Program output: 65                 
Correct output: 4                   | Program output: 62                 
Correct output: 37                  | Program output: 95                 
Correct output: 8                   | Program output: 8                  
Correct output: 37                  | Program output: 37                 
Correct output: 48                  | Program output: 92                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 88                 
Correct output: 25                  | Program output: 25                 
Correct output: 25                  | Program output: 98                 
Correct output: 19                  | Program output: 72                 
Correct output: 31                  | Program output: 59                 
Correct output: 35                  | Program output: 56                 
Correct output: 0                   | Program output: 0                  
Correct output: 7                   | Program output: 11                 
Correct output: 18                  | Program output: 33                 
Correct output: 12                  | Program output: 33                 
Correct output: 36                  | Program output: 94                 
Correct output: 9                   | Program output: 9                  
Correct output: -49                 | Program output: -32                
Correct output: -76                 | Program output: -56                
Correct output: -91                 | Program output: -41                
Correct output: -76                 | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: -64                 | Program output: 68                 
Correct output: -89                 | Program output: -1                 
Correct output: -90                 | Program output: 99                 
Correct output: -91                 | Program output: 21                 
Correct output: -56                 | Program output: -56                
Correct output: -21                 | Program output: 52                 
Correct output: -82                 | Program output: -38                
Correct output: -96                 | Program output: 74                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -89                
Correct output: 8                   | Program output: 90                 
Correct output: -95                 | Program output: 35                 
Correct output: -48                 | Program output: 5                  
Correct output: -51                 | Program output: 38                 
Correct output: -72                 | Program output: 23                 
Correct output: -71                 | Program output: 32                 
Correct output: -94                 | Program output: 61                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -63                
Correct output: -67                 | Program output: -17                
Correct output: -95                 | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -3                 
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: 12                 
Correct output: -72                 | Program output: -2                 
Correct output: -67                 | Program output: 23                 
Correct output: -97                 | Program output: 25                 
Correct output: -57                 | Program output: 45                 
Correct output: -86                 | Program output: 93                 
Correct output: -43                 | Program output: 48                 
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: 15                 
Correct output: -81                 | Program output: -28                
Correct output: -61                 | Program output: 100                
Correct output: -62                 | Program output: 9                  
Correct output: -85                 | Program output: 70                 
Correct output: -100                | Program output: 31                 
Correct output: -70                 | Program output: -11                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: 9                  
Correct output: -100                | Program output: -32                
Correct output: -84                 | Program output: 35                 
Correct output: -35                 | Program output: 26                 
Correct output: -41                 | Program output: 20                 
Correct output: -89                 | Program output: 61                 
Correct output: -61                 | Program output: 1                  
Correct output: -100                | Program output: 50                 
Correct output: -75                 | Program output: -48                
Correct output: -73                 | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: 2                  
Correct output: 27                  | Program output: 73                 
Correct output: -78                 | Program output: -78                
Correct output: -35                 | Program output: -34                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction -5} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt})
Lexicase best program: (in4 exec_dup (print_integer boolean_frominteger) exec_when (exec_dup () integer_yankdup) -5 integer_shove integer_swap exec_yankdup boolean_frominteger in4 boolean_stackdepth in1 exec_do*count (integer_dup_times integer_lte) integer_mult integer_inc boolean_stackdepth integer_dup_times exec_when (integer_gt))
Lexicase best errors: [1 1 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 30
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction -5} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt})
Zero cases best program: (in4 exec_dup (print_integer boolean_frominteger) exec_when (exec_dup () integer_yankdup) -5 integer_shove integer_swap exec_yankdup boolean_frominteger in4 boolean_stackdepth in1 exec_do*count (integer_dup_times integer_lte) integer_mult integer_inc boolean_stackdepth integer_dup_times exec_when (integer_gt))
Zero cases best errors: [1 1 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 30
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1 742 954 742 211 744 744 741 1)
Population mean number of elite cases: 5.88
Count of perfect (error zero) individuals by case: (0 1 742 954 742 211 744 744 741 1)
Population mean number of perfect (error zero) cases: 4.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction -5} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt})
Best program: (in4 exec_dup (print_integer boolean_frominteger) exec_when (exec_dup () integer_yankdup) -5 integer_shove integer_swap exec_yankdup boolean_frominteger in4 boolean_stackdepth in1 exec_do*count (integer_dup_times exec_when () integer_mult integer_inc boolean_stackdepth integer_dup_times exec_when (integer_gt)))
Errors: [1 1 0 0 0 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 24
Size: 31
Percent parens: 0.226
--- Population Statistics ---
Average total errors in population: 5.12
Median total errors in population: 4
Error averages by case: (1.0 0.999 0.258 0.046 0.258 0.789 0.256 0.256 0.259 0.999)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 17.082
Average program size in population (points): 23.216
Average percent parens in population: 0.290
Minimum age in population: 26.72030639648438
Maximum age in population: 31.74873924255371
Average age in population: 29.05675333213806
Median age in population: 28.92639923095703
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 357
Genome diversity (% unique genomes):	 0.359
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 357
Syntactic diversity (% unique Push programs):	 0.337
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 8623527
--- Timings ---
Current time: 1559582698077 milliseconds
Total Time:          54.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.5 seconds, 70.2%
Fitness Testing:     10.1 seconds, 18.5%
Report:               6.1 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: 13                 
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 83                 
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: -62                
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 76                 
Correct output: 45                  | Program output: 60                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 100                
Correct output: 8                   | Program output: 32                 
Correct output: 37                  | Program output: 91                 
Correct output: 48                  | Program output: 48                 
Correct output: 13                  | Program output: 19                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 69                 
Correct output: 25                  | Program output: 66                 
Correct output: 19                  | Program output: 44                 
Correct output: 31                  | Program output: 31                 
Correct output: 35                  | Program output: 74                 
Correct output: 0                   | Program output: 12                 
Correct output: 7                   | Program output: 18                 
Correct output: 18                  | Program output: 50                 
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 91                 
Correct output: 9                   | Program output: 45                 
Correct output: -49                 | Program output: -29                
Correct output: -76                 | Program output: 60                 
Correct output: -91                 | Program output: 63                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: 22                 
Correct output: -64                 | Program output: 84                 
Correct output: -89                 | Program output: 1                  
Correct output: -90                 | Program output: 34                 
Correct output: -91                 | Program output: -19                
Correct output: -56                 | Program output: 79                 
Correct output: -21                 | Program output: 26                 
Correct output: -82                 | Program output: 2                  
Correct output: -96                 | Program output: -96                
Correct output: -89                 | Program output: -13                
Correct output: -89                 | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: -95                 | Program output: 62                 
Correct output: -48                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -72                 | Program output: -72                
Correct output: -71                 | Program output: -71                
Correct output: -94                 | Program output: -54                
Correct output: -80                 | Program output: 16                 
Correct output: -63                 | Program output: 55                 
Correct output: -67                 | Program output: 8                  
Correct output: -95                 | Program output: 92                 
Correct output: 3                   | Program output: 71                 
Correct output: -51                 | Program output: 45                 
Correct output: -23                 | Program output: 44                 
Correct output: -89                 | Program output: 94                 
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: 98                 
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: 22                 
Correct output: -43                 | Program output: -43                
Correct output: -48                 | Program output: 56                 
Correct output: -89                 | Program output: -15                
Correct output: -81                 | Program output: -81                
Correct output: -61                 | Program output: 10                 
Correct output: -62                 | Program output: 2                  
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: 95                 
Correct output: -70                 | Program output: -18                
Correct output: -82                 | Program output: 31                 
Correct output: -74                 | Program output: 53                 
Correct output: -100                | Program output: 88                 
Correct output: -84                 | Program output: 51                 
Correct output: -35                 | Program output: -19                
Correct output: -41                 | Program output: 4                  
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: 87                 
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: 4                  
Correct output: -73                 | Program output: 49                 
Correct output: -96                 | Program output: 69                 
Correct output: -48                 | Program output: 100                
Correct output: 27                  | Program output: 75                 
Correct output: -78                 | Program output: 63                 
Correct output: -35                 | Program output: 54                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Lexicase best program: (boolean_invert_second_then_and integer_empty integer_yankdup tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank in2 print_integer boolean_stackdepth boolean_empty) () ())
Lexicase best errors: [1 1 1 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 16
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Zero cases best program: (boolean_invert_second_then_and integer_empty integer_yankdup tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank in2 print_integer boolean_stackdepth boolean_empty) () ())
Zero cases best errors: [1 1 1 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 16
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (140 140 140 214 140 214 214 601 214 214)
Population mean number of elite cases: 2.23
Count of perfect (error zero) individuals by case: (140 140 140 214 140 214 214 601 214 214)
Population mean number of perfect (error zero) cases: 2.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Best program: (boolean_invert_second_then_and integer_empty integer_yankdup tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank in2 print_integer boolean_stackdepth boolean_empty) () ())
Errors: [1 1 1 0 1 0 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 12
Size: 16
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.769
Median total errors in population: 9
Error averages by case: (0.86 0.86 0.86 0.786 0.86 0.786 0.786 0.399 0.786 0.786)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 15.195
Average program size in population (points): 20.657
Average percent parens in population: 0.286
Minimum age in population: 28.63397598266602
Maximum age in population: 32.71015453338623
Average age in population: 30.54555257320404
Median age in population: 30.56428527832031
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 288
Genome diversity (% unique genomes):	 0.335
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 292
Syntactic diversity (% unique Push programs):	 0.306
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 8965772
--- Timings ---
Current time: 1559582700146 milliseconds
Total Time:          57.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        40.1 seconds, 70.1%
Fitness Testing:     10.5 seconds, 18.4%
Report:               6.5 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 83                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 94                 
Correct output: 45                  | Program output: 45                 
Correct output: 4                   | Program output: 47                 
Correct output: 37                  | Program output: 83                 
Correct output: 8                   | Program output: 65                 
Correct output: 37                  | Program output: 41                 
Correct output: 48                  | Program output: 94                 
Correct output: 13                  | Program output: 26                 
Correct output: 20                  | Program output: 77                 
Correct output: 25                  | Program output: 87                 
Correct output: 25                  | Program output: 95                 
Correct output: 19                  | Program output: 19                 
Correct output: 31                  | Program output: 81                 
Correct output: 35                  | Program output: 72                 
Correct output: 0                   | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 20                 
Correct output: 12                  | Program output: 92                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 32                 
Correct output: -49                 | Program output: -13                
Correct output: -76                 | Program output: -76                
Correct output: -91                 | Program output: -2                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: 22                 
Correct output: -64                 | Program output: -64                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: 75                 
Correct output: -21                 | Program output: 67                 
Correct output: -82                 | Program output: -67                
Correct output: -96                 | Program output: 42                 
Correct output: -89                 | Program output: 59                 
Correct output: -89                 | Program output: -7                 
Correct output: 8                   | Program output: 60                 
Correct output: -95                 | Program output: -30                
Correct output: -48                 | Program output: -17                
Correct output: -51                 | Program output: -49                
Correct output: -72                 | Program output: 64                 
Correct output: -71                 | Program output: 5                  
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: 65                 
Correct output: -63                 | Program output: 40                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: 43                 
Correct output: 3                   | Program output: 47                 
Correct output: -51                 | Program output: -16                
Correct output: -23                 | Program output: 74                 
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: 23                 
Correct output: -67                 | Program output: 20                 
Correct output: -97                 | Program output: -2                 
Correct output: -57                 | Program output: -29                
Correct output: -86                 | Program output: 4                  
Correct output: -43                 | Program output: -13                
Correct output: -48                 | Program output: 59                 
Correct output: -89                 | Program output: -84                
Correct output: -81                 | Program output: 95                 
Correct output: -61                 | Program output: -24                
Correct output: -62                 | Program output: 33                 
Correct output: -85                 | Program output: 75                 
Correct output: -100                | Program output: -100               
Correct output: -70                 | Program output: -27                
Correct output: -82                 | Program output: -60                
Correct output: -74                 | Program output: 78                 
Correct output: -100                | Program output: 13                 
Correct output: -84                 | Program output: -84                
Correct output: -35                 | Program output: -27                
Correct output: -41                 | Program output: -41                
Correct output: -89                 | Program output: -4                 
Correct output: -61                 | Program output: 53                 
Correct output: -100                | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: 87                 
Correct output: -96                 | Program output: 8                  
Correct output: -48                 | Program output: -43                
Correct output: 27                  | Program output: 27                 
Correct output: -78                 | Program output: -46                
Correct output: -35                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_fromboolean} {:close 2, :instruction integer_yankdup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_invert_second_then_and integer_fromboolean integer_yankdup integer_min integer_max exec_s_when_autoconstructing (boolean_not integer_empty in3 print_integer boolean_stackdepth boolean_not integer_min integer_lte) () ())
Lexicase best errors: [1 0 0 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 18
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_fromboolean} {:close 2, :instruction integer_yankdup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte})
Zero cases best program: (boolean_invert_second_then_and integer_fromboolean integer_yankdup integer_min integer_max exec_s_when_autoconstructing (boolean_not integer_empty in3 print_integer boolean_stackdepth boolean_not integer_min integer_lte) () ())
Zero cases best errors: [1 0 0 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 18
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (503 359 359 1000 359 359 360 359 95 359)
Population mean number of elite cases: 4.11
Count of perfect (error zero) individuals by case: (503 359 359 0 359 359 360 359 95 359)
Population mean number of perfect (error zero) cases: 3.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 1, :instruction integer_gt})
Best program: (exec_rot (boolean_rot boolean_eq integer_pop exec_do*count (exec_noop) exec_stackdepth) (in3 print_integer integer_min in4 boolean_dup_times) (exec_do*times (exec_while () integer_dup_items boolean_stackdepth boolean_rot exec_when () integer_gt)))
Errors: [1 0 0 1 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 19
Size: 27
Percent parens: 0.296
--- Population Statistics ---
Average total errors in population: 6.888
Median total errors in population: 9
Error averages by case: (0.497 0.641 0.641 1.0 0.641 0.641 0.64 0.641 0.905 0.641)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 15.82
Average program size in population (points): 21.495
Average percent parens in population: 0.263
Minimum age in population: 29.81970977783203
Maximum age in population: 34.05907726287842
Average age in population: 32.22568651437759
Median age in population: 32.30886077880859
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 373
Genome diversity (% unique genomes):	 0.351
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 397
Syntactic diversity (% unique Push programs):	 0.328
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 9167717
--- Timings ---
Current time: 1559582702336 milliseconds
Total Time:          59.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.9 seconds, 70.6%
Fitness Testing:     10.7 seconds, 18.1%
Report:               6.6 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 75                  | Program output: 81                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 40                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 87                 
Correct output: 45                  | Program output: 65                 
Correct output: 4                   | Program output: 62                 
Correct output: 37                  | Program output: 95                 
Correct output: 8                   | Program output: 8                  
Correct output: 37                  | Program output: 37                 
Correct output: 48                  | Program output: 92                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 88                 
Correct output: 25                  | Program output: 25                 
Correct output: 25                  | Program output: 98                 
Correct output: 19                  | Program output: 72                 
Correct output: 31                  | Program output: 59                 
Correct output: 35                  | Program output: 56                 
Correct output: 0                   | Program output: 0                  
Correct output: 7                   | Program output: 11                 
Correct output: 18                  | Program output: 33                 
Correct output: 12                  | Program output: 33                 
Correct output: 36                  | Program output: 94                 
Correct output: 9                   | Program output: 9                  
Correct output: -49                 | Program output: -32                
Correct output: -76                 | Program output: -56                
Correct output: -91                 | Program output: -41                
Correct output: -76                 | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: -64                 | Program output: 68                 
Correct output: -89                 | Program output: -1                 
Correct output: -90                 | Program output: 99                 
Correct output: -91                 | Program output: 21                 
Correct output: -56                 | Program output: -56                
Correct output: -21                 | Program output: 52                 
Correct output: -82                 | Program output: -38                
Correct output: -96                 | Program output: 74                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -89                
Correct output: 8                   | Program output: 90                 
Correct output: -95                 | Program output: 35                 
Correct output: -48                 | Program output: 5                  
Correct output: -51                 | Program output: 38                 
Correct output: -72                 | Program output: 23                 
Correct output: -71                 | Program output: 32                 
Correct output: -94                 | Program output: 61                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -63                
Correct output: -67                 | Program output: -17                
Correct output: -95                 | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -3                 
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: 12                 
Correct output: -72                 | Program output: -2                 
Correct output: -67                 | Program output: 23                 
Correct output: -97                 | Program output: 25                 
Correct output: -57                 | Program output: 45                 
Correct output: -86                 | Program output: 93                 
Correct output: -43                 | Program output: 48                 
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: 15                 
Correct output: -81                 | Program output: -28                
Correct output: -61                 | Program output: 100                
Correct output: -62                 | Program output: 9                  
Correct output: -85                 | Program output: 70                 
Correct output: -100                | Program output: 31                 
Correct output: -70                 | Program output: -11                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: 9                  
Correct output: -100                | Program output: -32                
Correct output: -84                 | Program output: 35                 
Correct output: -35                 | Program output: 26                 
Correct output: -41                 | Program output: 20                 
Correct output: -89                 | Program output: 61                 
Correct output: -61                 | Program output: 1                  
Correct output: -100                | Program output: 50                 
Correct output: -75                 | Program output: -48                
Correct output: -73                 | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: 2                  
Correct output: 27                  | Program output: 73                 
Correct output: -78                 | Program output: -78                
Correct output: -35                 | Program output: -34                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup})
Lexicase best program: (integer_rot exec_do*times (in4 exec_dup (print_integer exec_empty) exec_when (exec_dup ())))
Lexicase best errors: [1 1 1 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 13
Percent parens: 0.385
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup})
Zero cases best program: (integer_rot exec_do*times (in4 exec_dup (print_integer exec_empty) exec_when (exec_dup ())))
Zero cases best errors: [1 1 1 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 13
Percent parens: 0.385
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 113 725 947 1000 1000 109 947 1000 109)
Population mean number of elite cases: 6.95
Count of perfect (error zero) individuals by case: (0 113 725 947 0 0 109 947 0 109)
Population mean number of perfect (error zero) cases: 2.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_when} {:close 0, :instruction exec_dup})
Best program: (integer_rot exec_do*times (in4 exec_dup (print_integer exec_empty) exec_when () exec_dup ()))
Errors: [1 1 1 0 1 1 0 0 1 0]
Total: 6
Mean: 0.6
Genome size: 8
Size: 13
Percent parens: 0.385
--- Population Statistics ---
Average total errors in population: 7.05
Median total errors in population: 7
Error averages by case: (1.0 0.887 0.275 0.053 1.0 1.0 0.891 0.053 1.0 0.891)
Error minima by case: (1 0 0 0 1 1 0 0 1 0)
Average genome size in population (length): 19.35
Average program size in population (points): 26.482
Average percent parens in population: 0.270
Minimum age in population: 30.81970977783203
Maximum age in population: 35.57785654067993
Average age in population: 33.74732938575745
Median age in population: 33.85119962692261
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 69
Genome diversity (% unique genomes):	 0.474
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 77
Syntactic diversity (% unique Push programs):	 0.449
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 9433383
--- Timings ---
Current time: 1559582704706 milliseconds
Total Time:          61.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.9 seconds, 71.1%
Fitness Testing:     11.0 seconds, 17.8%
Report:               6.7 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: 13                 
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 83                 
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: -62                
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 76                 
Correct output: 45                  | Program output: 60                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 100                
Correct output: 8                   | Program output: 32                 
Correct output: 37                  | Program output: 91                 
Correct output: 48                  | Program output: 48                 
Correct output: 13                  | Program output: 19                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 69                 
Correct output: 25                  | Program output: 66                 
Correct output: 19                  | Program output: 44                 
Correct output: 31                  | Program output: 31                 
Correct output: 35                  | Program output: 74                 
Correct output: 0                   | Program output: 12                 
Correct output: 7                   | Program output: 18                 
Correct output: 18                  | Program output: 50                 
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 91                 
Correct output: 9                   | Program output: 45                 
Correct output: -49                 | Program output: -29                
Correct output: -76                 | Program output: 60                 
Correct output: -91                 | Program output: 63                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: 22                 
Correct output: -64                 | Program output: 84                 
Correct output: -89                 | Program output: 1                  
Correct output: -90                 | Program output: 34                 
Correct output: -91                 | Program output: -19                
Correct output: -56                 | Program output: 79                 
Correct output: -21                 | Program output: 26                 
Correct output: -82                 | Program output: 2                  
Correct output: -96                 | Program output: -96                
Correct output: -89                 | Program output: -13                
Correct output: -89                 | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: -95                 | Program output: 62                 
Correct output: -48                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -72                 | Program output: -72                
Correct output: -71                 | Program output: -71                
Correct output: -94                 | Program output: -54                
Correct output: -80                 | Program output: 16                 
Correct output: -63                 | Program output: 55                 
Correct output: -67                 | Program output: 8                  
Correct output: -95                 | Program output: 92                 
Correct output: 3                   | Program output: 71                 
Correct output: -51                 | Program output: 45                 
Correct output: -23                 | Program output: 44                 
Correct output: -89                 | Program output: 94                 
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: 98                 
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: 22                 
Correct output: -43                 | Program output: -43                
Correct output: -48                 | Program output: 56                 
Correct output: -89                 | Program output: -15                
Correct output: -81                 | Program output: -81                
Correct output: -61                 | Program output: 10                 
Correct output: -62                 | Program output: 2                  
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: 95                 
Correct output: -70                 | Program output: -18                
Correct output: -82                 | Program output: 31                 
Correct output: -74                 | Program output: 53                 
Correct output: -100                | Program output: 88                 
Correct output: -84                 | Program output: 51                 
Correct output: -35                 | Program output: -19                
Correct output: -41                 | Program output: 4                  
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: 87                 
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: 4                  
Correct output: -73                 | Program output: 49                 
Correct output: -96                 | Program output: 69                 
Correct output: -48                 | Program output: 100                
Correct output: 27                  | Program output: 75                 
Correct output: -78                 | Program output: 63                 
Correct output: -35                 | Program output: 54                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Lexicase best program: (boolean_invert_second_then_and integer_empty integer_yankdup tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank in2 print_integer boolean_stackdepth boolean_empty) () ())
Lexicase best errors: [1 1 1 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 16
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Zero cases best program: (boolean_invert_second_then_and integer_empty integer_yankdup tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank in2 print_integer boolean_stackdepth boolean_empty) () ())
Zero cases best errors: [1 1 1 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 16
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 1000 217 949 217 1000 1000 1000 250)
Population mean number of elite cases: 7.63
Count of perfect (error zero) individuals by case: (0 0 0 217 949 217 0 0 0 250)
Population mean number of perfect (error zero) cases: 1.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Best program: (boolean_invert_second_then_and integer_empty integer_yankdup tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank in2 print_integer boolean_stackdepth boolean_empty) () ())
Errors: [1 1 1 0 0 0 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 12
Size: 16
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 8.367
Median total errors in population: 9
Error averages by case: (1.0 1.0 1.0 0.783 0.051 0.783 1.0 1.0 1.0 0.75)
Error minima by case: (1 1 1 0 0 0 1 1 1 0)
Average genome size in population (length): 14.902
Average program size in population (points): 20.551
Average percent parens in population: 0.291
Minimum age in population: 32.08295297622681
Maximum age in population: 37.00481867790222
Average age in population: 35.15856042742729
Median age in population: 35.2276496887207
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 253
Genome diversity (% unique genomes):	 0.383
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 257
Syntactic diversity (% unique Push programs):	 0.359
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 9656496
--- Timings ---
Current time: 1559582706739 milliseconds
Total Time:          63.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.5 seconds, 71.4%
Fitness Testing:     11.2 seconds, 17.6%
Report:               6.9 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: 13                 
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 83                 
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: -62                
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 76                 
Correct output: 45                  | Program output: 60                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 100                
Correct output: 8                   | Program output: 32                 
Correct output: 37                  | Program output: 91                 
Correct output: 48                  | Program output: 48                 
Correct output: 13                  | Program output: 19                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 69                 
Correct output: 25                  | Program output: 66                 
Correct output: 19                  | Program output: 44                 
Correct output: 31                  | Program output: 31                 
Correct output: 35                  | Program output: 74                 
Correct output: 0                   | Program output: 12                 
Correct output: 7                   | Program output: 18                 
Correct output: 18                  | Program output: 50                 
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 91                 
Correct output: 9                   | Program output: 45                 
Correct output: -49                 | Program output: -29                
Correct output: -76                 | Program output: 60                 
Correct output: -91                 | Program output: 63                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: 22                 
Correct output: -64                 | Program output: 84                 
Correct output: -89                 | Program output: 1                  
Correct output: -90                 | Program output: 34                 
Correct output: -91                 | Program output: -19                
Correct output: -56                 | Program output: 79                 
Correct output: -21                 | Program output: 26                 
Correct output: -82                 | Program output: 2                  
Correct output: -96                 | Program output: -96                
Correct output: -89                 | Program output: -13                
Correct output: -89                 | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: -95                 | Program output: 62                 
Correct output: -48                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -72                 | Program output: -72                
Correct output: -71                 | Program output: -71                
Correct output: -94                 | Program output: -54                
Correct output: -80                 | Program output: 16                 
Correct output: -63                 | Program output: 55                 
Correct output: -67                 | Program output: 8                  
Correct output: -95                 | Program output: 92                 
Correct output: 3                   | Program output: 71                 
Correct output: -51                 | Program output: 45                 
Correct output: -23                 | Program output: 44                 
Correct output: -89                 | Program output: 94                 
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: 98                 
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: 22                 
Correct output: -43                 | Program output: -43                
Correct output: -48                 | Program output: 56                 
Correct output: -89                 | Program output: -15                
Correct output: -81                 | Program output: -81                
Correct output: -61                 | Program output: 10                 
Correct output: -62                 | Program output: 2                  
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: 95                 
Correct output: -70                 | Program output: -18                
Correct output: -82                 | Program output: 31                 
Correct output: -74                 | Program output: 53                 
Correct output: -100                | Program output: 88                 
Correct output: -84                 | Program output: 51                 
Correct output: -35                 | Program output: -19                
Correct output: -41                 | Program output: 4                  
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: 87                 
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: 4                  
Correct output: -73                 | Program output: 49                 
Correct output: -96                 | Program output: 69                 
Correct output: -48                 | Program output: 100                
Correct output: 27                  | Program output: 75                 
Correct output: -78                 | Program output: 63                 
Correct output: -35                 | Program output: 54                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 2, :instruction boolean_swap} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Lexicase best program: (boolean_invert_second_then_and integer_empty boolean_swap tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank in2 print_integer boolean_stackdepth boolean_empty) () ())
Lexicase best errors: [1 0 0 0 1 1 0 1 1 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 16
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 2, :instruction boolean_swap} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Zero cases best program: (boolean_invert_second_then_and integer_empty boolean_swap tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank in2 print_integer boolean_stackdepth boolean_empty) () ())
Zero cases best errors: [1 0 0 0 1 1 0 1 1 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 16
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 647 951 952 1000 1000 951 1000 1000 1000)
Population mean number of elite cases: 9.50
Count of perfect (error zero) individuals by case: (0 647 951 952 0 0 951 0 0 0)
Population mean number of perfect (error zero) cases: 3.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Best program: (boolean_invert_second_then_and integer_empty integer_yankdup tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank in2 print_integer boolean_stackdepth boolean_empty) () ())
Errors: [1 0 0 0 1 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 12
Size: 16
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.499
Median total errors in population: 6
Error averages by case: (1.0 0.353 0.049 0.048 1.0 1.0 0.049 1.0 1.0 1.0)
Error minima by case: (1 0 0 0 1 1 0 1 1 1)
Average genome size in population (length): 14.733
Average program size in population (points): 19.838
Average percent parens in population: 0.253
Minimum age in population: 34.25151824951172
Maximum age in population: 38.72676306962967
Average age in population: 36.70334313201904
Median age in population: 36.77574437856674
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 238
Genome diversity (% unique genomes):	 0.411
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 291
Syntactic diversity (% unique Push programs):	 0.377
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.01
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 9820545
--- Timings ---
Current time: 1559582709154 milliseconds
Total Time:          66.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        47.6 seconds, 72.0%
Fitness Testing:     11.4 seconds, 17.3%
Report:               7.0 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: 13                 
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 83                 
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: -62                
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 76                 
Correct output: 45                  | Program output: 60                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 100                
Correct output: 8                   | Program output: 32                 
Correct output: 37                  | Program output: 91                 
Correct output: 48                  | Program output: 48                 
Correct output: 13                  | Program output: 19                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 69                 
Correct output: 25                  | Program output: 66                 
Correct output: 19                  | Program output: 44                 
Correct output: 31                  | Program output: 31                 
Correct output: 35                  | Program output: 74                 
Correct output: 0                   | Program output: 12                 
Correct output: 7                   | Program output: 18                 
Correct output: 18                  | Program output: 50                 
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 91                 
Correct output: 9                   | Program output: 45                 
Correct output: -49                 | Program output: -29                
Correct output: -76                 | Program output: 60                 
Correct output: -91                 | Program output: 63                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: 22                 
Correct output: -64                 | Program output: 84                 
Correct output: -89                 | Program output: 1                  
Correct output: -90                 | Program output: 34                 
Correct output: -91                 | Program output: -19                
Correct output: -56                 | Program output: 79                 
Correct output: -21                 | Program output: 26                 
Correct output: -82                 | Program output: 2                  
Correct output: -96                 | Program output: -96                
Correct output: -89                 | Program output: -13                
Correct output: -89                 | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: -95                 | Program output: 62                 
Correct output: -48                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -72                 | Program output: -72                
Correct output: -71                 | Program output: -71                
Correct output: -94                 | Program output: -54                
Correct output: -80                 | Program output: 16                 
Correct output: -63                 | Program output: 55                 
Correct output: -67                 | Program output: 8                  
Correct output: -95                 | Program output: 92                 
Correct output: 3                   | Program output: 71                 
Correct output: -51                 | Program output: 45                 
Correct output: -23                 | Program output: 44                 
Correct output: -89                 | Program output: 94                 
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: 98                 
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: 22                 
Correct output: -43                 | Program output: -43                
Correct output: -48                 | Program output: 56                 
Correct output: -89                 | Program output: -15                
Correct output: -81                 | Program output: -81                
Correct output: -61                 | Program output: 10                 
Correct output: -62                 | Program output: 2                  
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: 95                 
Correct output: -70                 | Program output: -18                
Correct output: -82                 | Program output: 31                 
Correct output: -74                 | Program output: 53                 
Correct output: -100                | Program output: 88                 
Correct output: -84                 | Program output: 51                 
Correct output: -35                 | Program output: -19                
Correct output: -41                 | Program output: 4                  
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: 87                 
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: 4                  
Correct output: -73                 | Program output: 49                 
Correct output: -96                 | Program output: 69                 
Correct output: -48                 | Program output: 100                
Correct output: 27                  | Program output: 75                 
Correct output: -78                 | Program output: 63                 
Correct output: -35                 | Program output: 54                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Lexicase best program: (boolean_invert_second_then_and integer_empty integer_yankdup tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank in2 print_integer boolean_stackdepth boolean_empty) () ())
Lexicase best errors: [0 1 1 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 16
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Zero cases best program: (boolean_invert_second_then_and integer_empty integer_yankdup tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank in2 print_integer boolean_stackdepth boolean_empty) () ())
Zero cases best errors: [0 1 1 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 16
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (963 1000 1000 963 963 963 1000 963 1000 963)
Population mean number of elite cases: 9.78
Count of perfect (error zero) individuals by case: (963 0 0 963 963 963 0 963 0 963)
Population mean number of perfect (error zero) cases: 5.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty})
Best program: (boolean_invert_second_then_and integer_empty integer_yankdup tagged_418 integer_dup_times exec_s_when_autoconstructing (integer_empty integer_yankdup) () (tagged_418) integer_dup_times exec_s_when_autoconstructing (boolean_invert_first_then_and integer_yank in2 print_integer boolean_stackdepth boolean_empty) () ())
Errors: [0 1 1 0 0 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 17
Size: 24
Percent parens: 0.292
--- Population Statistics ---
Average total errors in population: 4.222
Median total errors in population: 4
Error averages by case: (0.037 1.0 1.0 0.037 0.037 0.037 1.0 0.037 1.0 0.037)
Error minima by case: (0 1 1 0 0 0 1 0 1 0)
Average genome size in population (length): 12.135
Average program size in population (points): 16.221
Average percent parens in population: 0.249
Minimum age in population: 35.70625829696655
Maximum age in population: 40.2096888422966
Average age in population: 38.20926895016432
Median age in population: 38.26889424026012
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 313
Genome diversity (% unique genomes):	 0.299
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 397
Syntactic diversity (% unique Push programs):	 0.262
Total error diversity:				 0.002
Error (vector) diversity:			 0.002
Behavioral diversity:				 0.009
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 9941639
--- Timings ---
Current time: 1559582711227 milliseconds
Total Time:          68.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.4 seconds, 72.4%
Fitness Testing:     11.6 seconds, 17.0%
Report:               7.1 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: 13                 
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 83                 
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: -62                
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 76                 
Correct output: 45                  | Program output: 60                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 100                
Correct output: 8                   | Program output: 32                 
Correct output: 37                  | Program output: 91                 
Correct output: 48                  | Program output: 48                 
Correct output: 13                  | Program output: 19                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 69                 
Correct output: 25                  | Program output: 66                 
Correct output: 19                  | Program output: 44                 
Correct output: 31                  | Program output: 31                 
Correct output: 35                  | Program output: 74                 
Correct output: 0                   | Program output: 12                 
Correct output: 7                   | Program output: 18                 
Correct output: 18                  | Program output: 50                 
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 91                 
Correct output: 9                   | Program output: 45                 
Correct output: -49                 | Program output: -29                
Correct output: -76                 | Program output: 60                 
Correct output: -91                 | Program output: 63                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: 22                 
Correct output: -64                 | Program output: 84                 
Correct output: -89                 | Program output: 1                  
Correct output: -90                 | Program output: 34                 
Correct output: -91                 | Program output: -19                
Correct output: -56                 | Program output: 79                 
Correct output: -21                 | Program output: 26                 
Correct output: -82                 | Program output: 2                  
Correct output: -96                 | Program output: -96                
Correct output: -89                 | Program output: -13                
Correct output: -89                 | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: -95                 | Program output: 62                 
Correct output: -48                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -72                 | Program output: -72                
Correct output: -71                 | Program output: -71                
Correct output: -94                 | Program output: -54                
Correct output: -80                 | Program output: 16                 
Correct output: -63                 | Program output: 55                 
Correct output: -67                 | Program output: 8                  
Correct output: -95                 | Program output: 92                 
Correct output: 3                   | Program output: 71                 
Correct output: -51                 | Program output: 45                 
Correct output: -23                 | Program output: 44                 
Correct output: -89                 | Program output: 94                 
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: 98                 
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: 22                 
Correct output: -43                 | Program output: -43                
Correct output: -48                 | Program output: 56                 
Correct output: -89                 | Program output: -15                
Correct output: -81                 | Program output: -81                
Correct output: -61                 | Program output: 10                 
Correct output: -62                 | Program output: 2                  
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: 95                 
Correct output: -70                 | Program output: -18                
Correct output: -82                 | Program output: 31                 
Correct output: -74                 | Program output: 53                 
Correct output: -100                | Program output: 88                 
Correct output: -84                 | Program output: 51                 
Correct output: -35                 | Program output: -19                
Correct output: -41                 | Program output: 4                  
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: 87                 
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: 4                  
Correct output: -73                 | Program output: 49                 
Correct output: -96                 | Program output: 69                 
Correct output: -48                 | Program output: 100                
Correct output: 27                  | Program output: 75                 
Correct output: -78                 | Program output: 63                 
Correct output: -35                 | Program output: 54                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (boolean_invert_second_then_and integer_empty integer_yankdup tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank in2 print_integer boolean_stackdepth) () ())
Lexicase best errors: [0 0 1 1 0 1 0 1 1 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 15
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (boolean_invert_second_then_and integer_empty integer_yankdup tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank in2 print_integer boolean_stackdepth) () ())
Zero cases best errors: [0 0 1 1 0 1 0 1 1 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 15
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (951 951 1000 1000 951 1000 952 1000 1000 953)
Population mean number of elite cases: 9.76
Count of perfect (error zero) individuals by case: (951 951 0 0 951 0 952 0 0 953)
Population mean number of perfect (error zero) cases: 4.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_empty})
Best program: (boolean_invert_second_then_and integer_empty integer_yankdup tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank in2 print_integer boolean_stackdepth boolean_empty) () ())
Errors: [0 0 1 1 0 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 12
Size: 16
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 5.242
Median total errors in population: 5
Error averages by case: (0.049 0.049 1.0 1.0 0.049 1.0 0.048 1.0 1.0 0.047)
Error minima by case: (0 0 1 1 0 1 0 1 1 0)
Average genome size in population (length): 12.133
Average program size in population (points): 16.268
Average percent parens in population: 0.251
Minimum age in population: 36.70625829696655
Maximum age in population: 41.75710833072662
Average age in population: 39.6930249941051
Median age in population: 39.75445514917374
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 265
Genome diversity (% unique genomes):	 0.367
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 348
Syntactic diversity (% unique Push programs):	 0.318
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.008
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 10063487
--- Timings ---
Current time: 1559582713446 milliseconds
Total Time:          70.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.4 seconds, 72.9%
Fitness Testing:     11.7 seconds, 16.7%
Report:               7.2 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: 13                 
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 83                 
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: -62                
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 76                 
Correct output: 45                  | Program output: 60                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 100                
Correct output: 8                   | Program output: 32                 
Correct output: 37                  | Program output: 91                 
Correct output: 48                  | Program output: 48                 
Correct output: 13                  | Program output: 19                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 69                 
Correct output: 25                  | Program output: 66                 
Correct output: 19                  | Program output: 44                 
Correct output: 31                  | Program output: 31                 
Correct output: 35                  | Program output: 74                 
Correct output: 0                   | Program output: 12                 
Correct output: 7                   | Program output: 18                 
Correct output: 18                  | Program output: 50                 
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 91                 
Correct output: 9                   | Program output: 45                 
Correct output: -49                 | Program output: -29                
Correct output: -76                 | Program output: 60                 
Correct output: -91                 | Program output: 63                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: 22                 
Correct output: -64                 | Program output: 84                 
Correct output: -89                 | Program output: 1                  
Correct output: -90                 | Program output: 34                 
Correct output: -91                 | Program output: -19                
Correct output: -56                 | Program output: 79                 
Correct output: -21                 | Program output: 26                 
Correct output: -82                 | Program output: 2                  
Correct output: -96                 | Program output: -96                
Correct output: -89                 | Program output: -13                
Correct output: -89                 | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: -95                 | Program output: 62                 
Correct output: -48                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -72                 | Program output: -72                
Correct output: -71                 | Program output: -71                
Correct output: -94                 | Program output: -54                
Correct output: -80                 | Program output: 16                 
Correct output: -63                 | Program output: 55                 
Correct output: -67                 | Program output: 8                  
Correct output: -95                 | Program output: 92                 
Correct output: 3                   | Program output: 71                 
Correct output: -51                 | Program output: 45                 
Correct output: -23                 | Program output: 44                 
Correct output: -89                 | Program output: 94                 
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: 98                 
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: 22                 
Correct output: -43                 | Program output: -43                
Correct output: -48                 | Program output: 56                 
Correct output: -89                 | Program output: -15                
Correct output: -81                 | Program output: -81                
Correct output: -61                 | Program output: 10                 
Correct output: -62                 | Program output: 2                  
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: 95                 
Correct output: -70                 | Program output: -18                
Correct output: -82                 | Program output: 31                 
Correct output: -74                 | Program output: 53                 
Correct output: -100                | Program output: 88                 
Correct output: -84                 | Program output: 51                 
Correct output: -35                 | Program output: -19                
Correct output: -41                 | Program output: 4                  
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: 87                 
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: 4                  
Correct output: -73                 | Program output: 49                 
Correct output: -96                 | Program output: 69                 
Correct output: -48                 | Program output: 100                
Correct output: 27                  | Program output: 75                 
Correct output: -78                 | Program output: 63                 
Correct output: -35                 | Program output: 54                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Lexicase best program: (boolean_invert_second_then_and integer_empty integer_yankdup tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank in2 print_integer boolean_stackdepth boolean_empty) () ())
Lexicase best errors: [0 1 1 0 1 0 1 1 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 16
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Zero cases best program: (boolean_invert_second_then_and integer_empty integer_yankdup tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank in2 print_integer boolean_stackdepth boolean_empty) () ())
Zero cases best errors: [0 1 1 0 1 0 1 1 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 16
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (955 1000 1000 955 1000 955 1000 1000 955 1000)
Population mean number of elite cases: 9.82
Count of perfect (error zero) individuals by case: (955 0 0 955 0 955 0 0 955 0)
Population mean number of perfect (error zero) cases: 3.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tag_boolean_574} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Best program: (tag_boolean_574 exec_yank in3 exec_dup (boolean_invert_second_then_and integer_empty) integer_yankdup tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank in2 print_integer boolean_stackdepth boolean_empty) () ())
Errors: [0 1 1 0 1 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 16
Size: 21
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 6.18
Median total errors in population: 6
Error averages by case: (0.045 1.0 1.0 0.045 1.0 0.045 1.0 1.0 0.045 1.0)
Error minima by case: (0 1 1 0 1 0 1 1 0 1)
Average genome size in population (length): 12.023
Average program size in population (points): 16.214
Average percent parens in population: 0.255
Minimum age in population: 37.93425321578979
Maximum age in population: 43.27396985888481
Average age in population: 41.14604635826498
Median age in population: 41.20867766439915
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 199
Genome diversity (% unique genomes):	 0.384
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 273
Syntactic diversity (% unique Push programs):	 0.335
Total error diversity:				 0.002
Error (vector) diversity:			 0.002
Behavioral diversity:				 0.004
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 10183678
--- Timings ---
Current time: 1559582715204 milliseconds
Total Time:          72.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.8 seconds, 73.2%
Fitness Testing:     11.9 seconds, 16.5%
Report:               7.4 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: 13                 
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 83                 
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: -62                
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 76                 
Correct output: 45                  | Program output: 60                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 100                
Correct output: 8                   | Program output: 32                 
Correct output: 37                  | Program output: 91                 
Correct output: 48                  | Program output: 48                 
Correct output: 13                  | Program output: 19                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 69                 
Correct output: 25                  | Program output: 66                 
Correct output: 19                  | Program output: 44                 
Correct output: 31                  | Program output: 31                 
Correct output: 35                  | Program output: 74                 
Correct output: 0                   | Program output: 12                 
Correct output: 7                   | Program output: 18                 
Correct output: 18                  | Program output: 50                 
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 91                 
Correct output: 9                   | Program output: 45                 
Correct output: -49                 | Program output: -29                
Correct output: -76                 | Program output: 60                 
Correct output: -91                 | Program output: 63                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: 22                 
Correct output: -64                 | Program output: 84                 
Correct output: -89                 | Program output: 1                  
Correct output: -90                 | Program output: 34                 
Correct output: -91                 | Program output: -19                
Correct output: -56                 | Program output: 79                 
Correct output: -21                 | Program output: 26                 
Correct output: -82                 | Program output: 2                  
Correct output: -96                 | Program output: -96                
Correct output: -89                 | Program output: -13                
Correct output: -89                 | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: -95                 | Program output: 62                 
Correct output: -48                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -72                 | Program output: -72                
Correct output: -71                 | Program output: -71                
Correct output: -94                 | Program output: -54                
Correct output: -80                 | Program output: 16                 
Correct output: -63                 | Program output: 55                 
Correct output: -67                 | Program output: 8                  
Correct output: -95                 | Program output: 92                 
Correct output: 3                   | Program output: 71                 
Correct output: -51                 | Program output: 45                 
Correct output: -23                 | Program output: 44                 
Correct output: -89                 | Program output: 94                 
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: 98                 
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: 22                 
Correct output: -43                 | Program output: -43                
Correct output: -48                 | Program output: 56                 
Correct output: -89                 | Program output: -15                
Correct output: -81                 | Program output: -81                
Correct output: -61                 | Program output: 10                 
Correct output: -62                 | Program output: 2                  
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: 95                 
Correct output: -70                 | Program output: -18                
Correct output: -82                 | Program output: 31                 
Correct output: -74                 | Program output: 53                 
Correct output: -100                | Program output: 88                 
Correct output: -84                 | Program output: 51                 
Correct output: -35                 | Program output: -19                
Correct output: -41                 | Program output: 4                  
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: 87                 
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: 4                  
Correct output: -73                 | Program output: 49                 
Correct output: -96                 | Program output: 69                 
Correct output: -48                 | Program output: 100                
Correct output: 27                  | Program output: 75                 
Correct output: -78                 | Program output: 63                 
Correct output: -35                 | Program output: 54                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_shove} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Lexicase best program: (boolean_invert_second_then_and integer_empty integer_shove tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank in2 print_integer boolean_stackdepth boolean_empty) () ())
Lexicase best errors: [1 0 1 1 1 1 1 0 1 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 8
Lexicase best mean error: 0.8
Lexicase best size: 16
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_shove} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Zero cases best program: (boolean_invert_second_then_and integer_empty integer_shove tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank in2 print_integer boolean_stackdepth boolean_empty) () ())
Zero cases best errors: [1 0 1 1 1 1 1 0 1 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 2
Zero cases best total error: 8
Zero cases best mean error: 0.8
Zero cases best size: 16
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 954 1000 1000 1000 1000 1000 954 1000 1000)
Population mean number of elite cases: 9.91
Count of perfect (error zero) individuals by case: (0 954 0 0 0 0 0 954 0 0)
Population mean number of perfect (error zero) cases: 1.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_rot} {:close 1, :instruction exec_while} {:close 2, :instruction integer_yankdup} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_and})
Best program: (boolean_rot exec_while () integer_yankdup tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank exec_y_when_autoconstructing (integer_yank in2 print_integer exec_do*times (exec_while () integer_dup_items boolean_stackdepth boolean_rot) exec_when () boolean_and)) () ())
Errors: [1 0 1 1 1 1 1 0 1 1]
Total: 8
Mean: 0.8
Genome size: 19
Size: 28
Percent parens: 0.321
--- Population Statistics ---
Average total errors in population: 8.092
Median total errors in population: 8
Error averages by case: (1.0 0.046 1.0 1.0 1.0 1.0 1.0 0.046 1.0 1.0)
Error minima by case: (1 0 1 1 1 1 1 0 1 1)
Average genome size in population (length): 12.152
Average program size in population (points): 16.435
Average percent parens in population: 0.256
Minimum age in population: 39.65899181365967
Maximum age in population: 44.50640674680471
Average age in population: 42.63368287501857
Median age in population: 42.70234717056155
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 154
Genome diversity (% unique genomes):	 0.431
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 226
Syntactic diversity (% unique Push programs):	 0.362
Total error diversity:				 0.002
Error (vector) diversity:			 0.002
Behavioral diversity:				 0.011
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 10308811
--- Timings ---
Current time: 1559582716939 milliseconds
Total Time:          73.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.3 seconds, 73.4%
Fitness Testing:     12.1 seconds, 16.3%
Report:               7.5 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: 13                 
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 83                 
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: -62                
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 76                 
Correct output: 45                  | Program output: 60                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 100                
Correct output: 8                   | Program output: 32                 
Correct output: 37                  | Program output: 91                 
Correct output: 48                  | Program output: 48                 
Correct output: 13                  | Program output: 19                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 69                 
Correct output: 25                  | Program output: 66                 
Correct output: 19                  | Program output: 44                 
Correct output: 31                  | Program output: 31                 
Correct output: 35                  | Program output: 74                 
Correct output: 0                   | Program output: 12                 
Correct output: 7                   | Program output: 18                 
Correct output: 18                  | Program output: 50                 
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 91                 
Correct output: 9                   | Program output: 45                 
Correct output: -49                 | Program output: -29                
Correct output: -76                 | Program output: 60                 
Correct output: -91                 | Program output: 63                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: 22                 
Correct output: -64                 | Program output: 84                 
Correct output: -89                 | Program output: 1                  
Correct output: -90                 | Program output: 34                 
Correct output: -91                 | Program output: -19                
Correct output: -56                 | Program output: 79                 
Correct output: -21                 | Program output: 26                 
Correct output: -82                 | Program output: 2                  
Correct output: -96                 | Program output: -96                
Correct output: -89                 | Program output: -13                
Correct output: -89                 | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: -95                 | Program output: 62                 
Correct output: -48                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -72                 | Program output: -72                
Correct output: -71                 | Program output: -71                
Correct output: -94                 | Program output: -54                
Correct output: -80                 | Program output: 16                 
Correct output: -63                 | Program output: 55                 
Correct output: -67                 | Program output: 8                  
Correct output: -95                 | Program output: 92                 
Correct output: 3                   | Program output: 71                 
Correct output: -51                 | Program output: 45                 
Correct output: -23                 | Program output: 44                 
Correct output: -89                 | Program output: 94                 
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: 98                 
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: 22                 
Correct output: -43                 | Program output: -43                
Correct output: -48                 | Program output: 56                 
Correct output: -89                 | Program output: -15                
Correct output: -81                 | Program output: -81                
Correct output: -61                 | Program output: 10                 
Correct output: -62                 | Program output: 2                  
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: 95                 
Correct output: -70                 | Program output: -18                
Correct output: -82                 | Program output: 31                 
Correct output: -74                 | Program output: 53                 
Correct output: -100                | Program output: 88                 
Correct output: -84                 | Program output: 51                 
Correct output: -35                 | Program output: -19                
Correct output: -41                 | Program output: 4                  
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: 87                 
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: 4                  
Correct output: -73                 | Program output: 49                 
Correct output: -96                 | Program output: 69                 
Correct output: -48                 | Program output: 100                
Correct output: 27                  | Program output: 75                 
Correct output: -78                 | Program output: 63                 
Correct output: -35                 | Program output: 54                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Lexicase best program: (boolean_invert_second_then_and integer_empty integer_yankdup tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank in2 print_integer boolean_stackdepth boolean_empty) () ())
Lexicase best errors: [1 1 0 1 1 1 1 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 16
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Zero cases best program: (boolean_invert_second_then_and integer_empty integer_yankdup tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank in2 print_integer boolean_stackdepth boolean_empty) () ())
Zero cases best errors: [1 1 0 1 1 1 1 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 16
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1000 964 1000 1000 1000 1 964 965 1000)
Population mean number of elite cases: 7.89
Count of perfect (error zero) individuals by case: (1 0 964 0 0 0 1 964 965 0)
Population mean number of perfect (error zero) cases: 2.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 1, :instruction exec_do*times} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Best program: (integer_rot exec_do*times () tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank in2 print_integer boolean_stackdepth boolean_empty) () ())
Errors: [1 1 0 1 1 1 1 0 0 1]
Total: 7
Mean: 0.7
Genome size: 11
Size: 16
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 7.105
Median total errors in population: 7
Error averages by case: (0.999 1.0 0.036 1.0 1.0 1.0 0.999 0.036 0.035 1.0)
Error minima by case: (0 1 0 1 1 1 0 0 0 1)
Average genome size in population (length): 12.106
Average program size in population (points): 16.368
Average percent parens in population: 0.255
Minimum age in population: 40.65899181365967
Maximum age in population: 46.15612620301545
Average age in population: 44.122433271477
Median age in population: 44.23288258723915
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 135
Genome diversity (% unique genomes):	 0.431
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 216
Syntactic diversity (% unique Push programs):	 0.368
Total error diversity:				 0.002
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.006
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 10430216
--- Timings ---
Current time: 1559582718670 milliseconds
Total Time:          75.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.7 seconds, 73.6%
Fitness Testing:     12.2 seconds, 16.1%
Report:               7.6 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: 13                 
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 83                 
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: -62                
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 76                 
Correct output: 45                  | Program output: 60                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 100                
Correct output: 8                   | Program output: 32                 
Correct output: 37                  | Program output: 91                 
Correct output: 48                  | Program output: 48                 
Correct output: 13                  | Program output: 19                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 69                 
Correct output: 25                  | Program output: 66                 
Correct output: 19                  | Program output: 44                 
Correct output: 31                  | Program output: 31                 
Correct output: 35                  | Program output: 74                 
Correct output: 0                   | Program output: 12                 
Correct output: 7                   | Program output: 18                 
Correct output: 18                  | Program output: 50                 
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 91                 
Correct output: 9                   | Program output: 45                 
Correct output: -49                 | Program output: -29                
Correct output: -76                 | Program output: 60                 
Correct output: -91                 | Program output: 63                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: 22                 
Correct output: -64                 | Program output: 84                 
Correct output: -89                 | Program output: 1                  
Correct output: -90                 | Program output: 34                 
Correct output: -91                 | Program output: -19                
Correct output: -56                 | Program output: 79                 
Correct output: -21                 | Program output: 26                 
Correct output: -82                 | Program output: 2                  
Correct output: -96                 | Program output: -96                
Correct output: -89                 | Program output: -13                
Correct output: -89                 | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: -95                 | Program output: 62                 
Correct output: -48                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -72                 | Program output: -72                
Correct output: -71                 | Program output: -71                
Correct output: -94                 | Program output: -54                
Correct output: -80                 | Program output: 16                 
Correct output: -63                 | Program output: 55                 
Correct output: -67                 | Program output: 8                  
Correct output: -95                 | Program output: 92                 
Correct output: 3                   | Program output: 71                 
Correct output: -51                 | Program output: 45                 
Correct output: -23                 | Program output: 44                 
Correct output: -89                 | Program output: 94                 
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: 98                 
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: 22                 
Correct output: -43                 | Program output: -43                
Correct output: -48                 | Program output: 56                 
Correct output: -89                 | Program output: -15                
Correct output: -81                 | Program output: -81                
Correct output: -61                 | Program output: 10                 
Correct output: -62                 | Program output: 2                  
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: 95                 
Correct output: -70                 | Program output: -18                
Correct output: -82                 | Program output: 31                 
Correct output: -74                 | Program output: 53                 
Correct output: -100                | Program output: 88                 
Correct output: -84                 | Program output: 51                 
Correct output: -35                 | Program output: -19                
Correct output: -41                 | Program output: 4                  
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: 87                 
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: 4                  
Correct output: -73                 | Program output: 49                 
Correct output: -96                 | Program output: 69                 
Correct output: -48                 | Program output: 100                
Correct output: 27                  | Program output: 75                 
Correct output: -78                 | Program output: 63                 
Correct output: -35                 | Program output: 54                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Lexicase best program: (boolean_invert_second_then_and integer_empty integer_yankdup tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank in2 print_integer boolean_stackdepth boolean_empty) () ())
Lexicase best errors: [1 1 1 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 16
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Zero cases best program: (boolean_invert_second_then_and integer_empty integer_yankdup tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank in2 print_integer boolean_stackdepth boolean_empty) () ())
Zero cases best errors: [1 1 1 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 16
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 468 468 955 1000 1000 955 487 487 487)
Population mean number of elite cases: 7.31
Count of perfect (error zero) individuals by case: (0 468 468 955 0 0 955 487 487 487)
Population mean number of perfect (error zero) cases: 4.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Best program: (boolean_invert_second_then_and integer_empty integer_yankdup tagged_418 integer_dup_times exec_s_when_autoconstructing (integer_min integer_yank in2 print_integer boolean_stackdepth boolean_empty) () ())
Errors: [1 1 1 0 1 1 0 0 0 0]
Total: 5
Mean: 0.5
Genome size: 12
Size: 16
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 5.693
Median total errors in population: 6
Error averages by case: (1.0 0.532 0.532 0.045 1.0 1.0 0.045 0.513 0.513 0.513)
Error minima by case: (1 0 0 0 1 1 0 0 0 0)
Average genome size in population (length): 14.58
Average program size in population (points): 20.276
Average percent parens in population: 0.276
Minimum age in population: 41.83622413873672
Maximum age in population: 47.57178113237023
Average age in population: 45.40272571642883
Median age in population: 45.61436774767935
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 380
Genome diversity (% unique genomes):	 0.39
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 390
Syntactic diversity (% unique Push programs):	 0.333
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.012
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 10576856
--- Timings ---
Current time: 1559582720420 milliseconds
Total Time:          77.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.2 seconds, 73.9%
Fitness Testing:     12.4 seconds, 16.0%
Report:               7.7 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 83                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 94                 
Correct output: 45                  | Program output: 45                 
Correct output: 4                   | Program output: 47                 
Correct output: 37                  | Program output: 83                 
Correct output: 8                   | Program output: 65                 
Correct output: 37                  | Program output: 41                 
Correct output: 48                  | Program output: 94                 
Correct output: 13                  | Program output: 26                 
Correct output: 20                  | Program output: 77                 
Correct output: 25                  | Program output: 87                 
Correct output: 25                  | Program output: 95                 
Correct output: 19                  | Program output: 19                 
Correct output: 31                  | Program output: 81                 
Correct output: 35                  | Program output: 72                 
Correct output: 0                   | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 20                 
Correct output: 12                  | Program output: 92                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 32                 
Correct output: -49                 | Program output: -13                
Correct output: -76                 | Program output: -76                
Correct output: -91                 | Program output: -2                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: 22                 
Correct output: -64                 | Program output: -64                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: 75                 
Correct output: -21                 | Program output: 67                 
Correct output: -82                 | Program output: -67                
Correct output: -96                 | Program output: 42                 
Correct output: -89                 | Program output: 59                 
Correct output: -89                 | Program output: -7                 
Correct output: 8                   | Program output: 60                 
Correct output: -95                 | Program output: -30                
Correct output: -48                 | Program output: -17                
Correct output: -51                 | Program output: -49                
Correct output: -72                 | Program output: 64                 
Correct output: -71                 | Program output: 5                  
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: 65                 
Correct output: -63                 | Program output: 40                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: 43                 
Correct output: 3                   | Program output: 47                 
Correct output: -51                 | Program output: -16                
Correct output: -23                 | Program output: 74                 
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: 23                 
Correct output: -67                 | Program output: 20                 
Correct output: -97                 | Program output: -2                 
Correct output: -57                 | Program output: -29                
Correct output: -86                 | Program output: 4                  
Correct output: -43                 | Program output: -13                
Correct output: -48                 | Program output: 59                 
Correct output: -89                 | Program output: -84                
Correct output: -81                 | Program output: 95                 
Correct output: -61                 | Program output: -24                
Correct output: -62                 | Program output: 33                 
Correct output: -85                 | Program output: 75                 
Correct output: -100                | Program output: -100               
Correct output: -70                 | Program output: -27                
Correct output: -82                 | Program output: -60                
Correct output: -74                 | Program output: 78                 
Correct output: -100                | Program output: 13                 
Correct output: -84                 | Program output: -84                
Correct output: -35                 | Program output: -27                
Correct output: -41                 | Program output: -41                
Correct output: -89                 | Program output: -4                 
Correct output: -61                 | Program output: 53                 
Correct output: -100                | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: 87                 
Correct output: -96                 | Program output: 8                  
Correct output: -48                 | Program output: -43                
Correct output: 27                  | Program output: 27                 
Correct output: -78                 | Program output: -46                
Correct output: -35                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction tagged_559} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Lexicase best program: (boolean_invert_second_then_and integer_empty integer_yankdup tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank tagged_559) (integer_dup_times exec_s_when_autoconstructing (exec_yankdup integer_yank in3 print_integer boolean_stackdepth boolean_empty) () ()) ())
Lexicase best errors: [1 1 1 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 24
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction tagged_559} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Zero cases best program: (boolean_invert_second_then_and integer_empty integer_yankdup tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank tagged_559) (integer_dup_times exec_s_when_autoconstructing (exec_yankdup integer_yank in3 print_integer boolean_stackdepth boolean_empty) () ()) ())
Zero cases best errors: [1 1 1 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 24
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 1000 369 954 585 954 585 369 369)
Population mean number of elite cases: 7.18
Count of perfect (error zero) individuals by case: (0 0 0 369 954 585 954 585 369 369)
Population mean number of perfect (error zero) cases: 4.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction tagged_559} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Best program: (boolean_invert_second_then_and integer_empty integer_yankdup tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank tagged_559) (integer_dup_times exec_s_when_autoconstructing (exec_yankdup integer_yank in3 print_integer boolean_stackdepth boolean_empty) () ()) ())
Errors: [1 1 1 0 0 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 17
Size: 24
Percent parens: 0.292
--- Population Statistics ---
Average total errors in population: 5.815
Median total errors in population: 6
Error averages by case: (1.0 1.0 1.0 0.631 0.046 0.415 0.046 0.415 0.631 0.631)
Error minima by case: (1 1 1 0 0 0 0 0 0 0)
Average genome size in population (length): 14.017
Average program size in population (points): 19.469
Average percent parens in population: 0.275
Minimum age in population: 44.1690975278616
Maximum age in population: 48.75793402455747
Average age in population: 46.86554508348182
Median age in population: 46.9342620219104
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 244
Genome diversity (% unique genomes):	 0.418
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 261
Syntactic diversity (% unique Push programs):	 0.355
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 10720924
--- Timings ---
Current time: 1559582722718 milliseconds
Total Time:          79.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.2 seconds, 74.3%
Fitness Testing:     12.6 seconds, 15.7%
Report:               7.9 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 83                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 94                 
Correct output: 45                  | Program output: 45                 
Correct output: 4                   | Program output: 47                 
Correct output: 37                  | Program output: 83                 
Correct output: 8                   | Program output: 65                 
Correct output: 37                  | Program output: 41                 
Correct output: 48                  | Program output: 94                 
Correct output: 13                  | Program output: 26                 
Correct output: 20                  | Program output: 77                 
Correct output: 25                  | Program output: 87                 
Correct output: 25                  | Program output: 95                 
Correct output: 19                  | Program output: 19                 
Correct output: 31                  | Program output: 81                 
Correct output: 35                  | Program output: 72                 
Correct output: 0                   | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 20                 
Correct output: 12                  | Program output: 92                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 32                 
Correct output: -49                 | Program output: -13                
Correct output: -76                 | Program output: -76                
Correct output: -91                 | Program output: -2                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: 22                 
Correct output: -64                 | Program output: -64                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: 75                 
Correct output: -21                 | Program output: 67                 
Correct output: -82                 | Program output: -67                
Correct output: -96                 | Program output: 42                 
Correct output: -89                 | Program output: 59                 
Correct output: -89                 | Program output: -7                 
Correct output: 8                   | Program output: 60                 
Correct output: -95                 | Program output: -30                
Correct output: -48                 | Program output: -17                
Correct output: -51                 | Program output: -49                
Correct output: -72                 | Program output: 64                 
Correct output: -71                 | Program output: 5                  
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: 65                 
Correct output: -63                 | Program output: 40                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: 43                 
Correct output: 3                   | Program output: 47                 
Correct output: -51                 | Program output: -16                
Correct output: -23                 | Program output: 74                 
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: 23                 
Correct output: -67                 | Program output: 20                 
Correct output: -97                 | Program output: -2                 
Correct output: -57                 | Program output: -29                
Correct output: -86                 | Program output: 4                  
Correct output: -43                 | Program output: -13                
Correct output: -48                 | Program output: 59                 
Correct output: -89                 | Program output: -84                
Correct output: -81                 | Program output: 95                 
Correct output: -61                 | Program output: -24                
Correct output: -62                 | Program output: 33                 
Correct output: -85                 | Program output: 75                 
Correct output: -100                | Program output: -100               
Correct output: -70                 | Program output: -27                
Correct output: -82                 | Program output: -60                
Correct output: -74                 | Program output: 78                 
Correct output: -100                | Program output: 13                 
Correct output: -84                 | Program output: -84                
Correct output: -35                 | Program output: -27                
Correct output: -41                 | Program output: -41                
Correct output: -89                 | Program output: -4                 
Correct output: -61                 | Program output: 53                 
Correct output: -100                | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: 87                 
Correct output: -96                 | Program output: 8                  
Correct output: -48                 | Program output: -43                
Correct output: 27                  | Program output: 27                 
Correct output: -78                 | Program output: -46                
Correct output: -35                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction tagged_559} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Lexicase best program: (boolean_invert_second_then_and integer_empty integer_yankdup tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank tagged_559) (integer_dup_times exec_s_when_autoconstructing (exec_yankdup integer_yank in3 print_integer boolean_stackdepth boolean_empty) () ()) ())
Lexicase best errors: [0 1 1 1 1 0 1 1 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 24
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction tagged_559} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Zero cases best program: (boolean_invert_second_then_and integer_empty integer_yankdup tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank tagged_559) (integer_dup_times exec_s_when_autoconstructing (exec_yankdup integer_yank in3 print_integer boolean_stackdepth boolean_empty) () ()) ())
Zero cases best errors: [0 1 1 1 1 0 1 1 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 24
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (559 1000 1000 1000 1000 952 393 1000 1000 952)
Population mean number of elite cases: 8.86
Count of perfect (error zero) individuals by case: (559 0 0 0 0 952 393 0 0 952)
Population mean number of perfect (error zero) cases: 2.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction tagged_419} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Best program: (boolean_invert_second_then_and integer_empty integer_yankdup tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank tagged_419) (integer_dup_times exec_s_when_autoconstructing (exec_yankdup integer_yank in3 print_integer boolean_stackdepth boolean_empty) () ()) ())
Errors: [0 1 1 1 1 0 1 1 1 0]
Total: 7
Mean: 0.7
Genome size: 17
Size: 24
Percent parens: 0.292
--- Population Statistics ---
Average total errors in population: 7.144
Median total errors in population: 7
Error averages by case: (0.441 1.0 1.0 1.0 1.0 0.048 0.607 1.0 1.0 0.048)
Error minima by case: (0 1 1 1 1 0 0 1 1 0)
Average genome size in population (length): 14.979
Average program size in population (points): 20.976
Average percent parens in population: 0.282
Minimum age in population: 45.94019185006618
Maximum age in population: 50.2300882153213
Average age in population: 48.32901434535114
Median age in population: 48.37080592662096
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 282
Genome diversity (% unique genomes):	 0.457
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 319
Syntactic diversity (% unique Push programs):	 0.393
Total error diversity:				 0.002
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.01
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 10870675
--- Timings ---
Current time: 1559582724738 milliseconds
Total Time:          81.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.9 seconds, 74.5%
Fitness Testing:     12.7 seconds, 15.6%
Report:               8.0 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: 13                 
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 83                 
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: -62                
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 76                 
Correct output: 45                  | Program output: 60                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 100                
Correct output: 8                   | Program output: 32                 
Correct output: 37                  | Program output: 91                 
Correct output: 48                  | Program output: 48                 
Correct output: 13                  | Program output: 19                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 69                 
Correct output: 25                  | Program output: 66                 
Correct output: 19                  | Program output: 44                 
Correct output: 31                  | Program output: 31                 
Correct output: 35                  | Program output: 74                 
Correct output: 0                   | Program output: 12                 
Correct output: 7                   | Program output: 18                 
Correct output: 18                  | Program output: 50                 
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 91                 
Correct output: 9                   | Program output: 45                 
Correct output: -49                 | Program output: -29                
Correct output: -76                 | Program output: 60                 
Correct output: -91                 | Program output: 63                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: 22                 
Correct output: -64                 | Program output: 84                 
Correct output: -89                 | Program output: 1                  
Correct output: -90                 | Program output: 34                 
Correct output: -91                 | Program output: -19                
Correct output: -56                 | Program output: 79                 
Correct output: -21                 | Program output: 26                 
Correct output: -82                 | Program output: 2                  
Correct output: -96                 | Program output: -96                
Correct output: -89                 | Program output: -13                
Correct output: -89                 | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: -95                 | Program output: 62                 
Correct output: -48                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -72                 | Program output: -72                
Correct output: -71                 | Program output: -71                
Correct output: -94                 | Program output: -54                
Correct output: -80                 | Program output: 16                 
Correct output: -63                 | Program output: 55                 
Correct output: -67                 | Program output: 8                  
Correct output: -95                 | Program output: 92                 
Correct output: 3                   | Program output: 71                 
Correct output: -51                 | Program output: 45                 
Correct output: -23                 | Program output: 44                 
Correct output: -89                 | Program output: 94                 
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: 98                 
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: 22                 
Correct output: -43                 | Program output: -43                
Correct output: -48                 | Program output: 56                 
Correct output: -89                 | Program output: -15                
Correct output: -81                 | Program output: -81                
Correct output: -61                 | Program output: 10                 
Correct output: -62                 | Program output: 2                  
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: 95                 
Correct output: -70                 | Program output: -18                
Correct output: -82                 | Program output: 31                 
Correct output: -74                 | Program output: 53                 
Correct output: -100                | Program output: 88                 
Correct output: -84                 | Program output: 51                 
Correct output: -35                 | Program output: -19                
Correct output: -41                 | Program output: 4                  
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: 87                 
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: 4                  
Correct output: -73                 | Program output: 49                 
Correct output: -96                 | Program output: 69                 
Correct output: -48                 | Program output: 100                
Correct output: 27                  | Program output: 75                 
Correct output: -78                 | Program output: 63                 
Correct output: -35                 | Program output: 54                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 1, :instruction exec_do*times} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_empty})
Lexicase best program: (integer_rot exec_do*times () tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank in2 print_integer exec_s_when_autoconstructing (boolean_empty) () ()) () ())
Lexicase best errors: [1 0 1 1 1 0 1 0 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 19
Percent parens: 0.421
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 1, :instruction exec_do*times} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_empty})
Zero cases best program: (integer_rot exec_do*times () tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank in2 print_integer exec_s_when_autoconstructing (boolean_empty) () ()) () ())
Zero cases best errors: [1 0 1 1 1 0 1 0 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 19
Percent parens: 0.421
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 952 1000 1000 1000 477 1000 477 475 1000)
Population mean number of elite cases: 8.38
Count of perfect (error zero) individuals by case: (0 952 0 0 0 477 0 477 475 0)
Population mean number of perfect (error zero) cases: 2.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 1, :instruction exec_do*times} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Best program: (integer_rot exec_do*times () tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank in2 print_integer boolean_stackdepth boolean_empty) () ())
Errors: [1 0 1 1 1 0 1 0 1 1]
Total: 7
Mean: 0.7
Genome size: 11
Size: 16
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 7.619
Median total errors in population: 8
Error averages by case: (1.0 0.048 1.0 1.0 1.0 0.523 1.0 0.523 0.525 1.0)
Error minima by case: (1 0 1 1 1 0 1 0 0 1)
Average genome size in population (length): 14.54
Average program size in population (points): 20.284
Average percent parens in population: 0.279
Minimum age in population: 47.0554205160588
Maximum age in population: 52.13654082303401
Average age in population: 49.81567063868733
Median age in population: 49.84546103444882
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 204
Genome diversity (% unique genomes):	 0.474
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 238
Syntactic diversity (% unique Push programs):	 0.409
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.01
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 11017445
--- Timings ---
Current time: 1559582726736 milliseconds
Total Time:          83.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.6 seconds, 74.8%
Fitness Testing:     12.9 seconds, 15.4%
Report:               8.1 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 83                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 94                 
Correct output: 45                  | Program output: 45                 
Correct output: 4                   | Program output: 47                 
Correct output: 37                  | Program output: 83                 
Correct output: 8                   | Program output: 65                 
Correct output: 37                  | Program output: 41                 
Correct output: 48                  | Program output: 94                 
Correct output: 13                  | Program output: 26                 
Correct output: 20                  | Program output: 77                 
Correct output: 25                  | Program output: 87                 
Correct output: 25                  | Program output: 95                 
Correct output: 19                  | Program output: 19                 
Correct output: 31                  | Program output: 81                 
Correct output: 35                  | Program output: 72                 
Correct output: 0                   | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 20                 
Correct output: 12                  | Program output: 92                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 32                 
Correct output: -49                 | Program output: -13                
Correct output: -76                 | Program output: -76                
Correct output: -91                 | Program output: -2                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: 22                 
Correct output: -64                 | Program output: -64                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: 75                 
Correct output: -21                 | Program output: 67                 
Correct output: -82                 | Program output: -67                
Correct output: -96                 | Program output: 42                 
Correct output: -89                 | Program output: 59                 
Correct output: -89                 | Program output: -7                 
Correct output: 8                   | Program output: 60                 
Correct output: -95                 | Program output: -30                
Correct output: -48                 | Program output: -17                
Correct output: -51                 | Program output: -49                
Correct output: -72                 | Program output: 64                 
Correct output: -71                 | Program output: 5                  
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: 65                 
Correct output: -63                 | Program output: 40                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: 43                 
Correct output: 3                   | Program output: 47                 
Correct output: -51                 | Program output: -16                
Correct output: -23                 | Program output: 74                 
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: 23                 
Correct output: -67                 | Program output: 20                 
Correct output: -97                 | Program output: -2                 
Correct output: -57                 | Program output: -29                
Correct output: -86                 | Program output: 4                  
Correct output: -43                 | Program output: -13                
Correct output: -48                 | Program output: 59                 
Correct output: -89                 | Program output: -84                
Correct output: -81                 | Program output: 95                 
Correct output: -61                 | Program output: -24                
Correct output: -62                 | Program output: 33                 
Correct output: -85                 | Program output: 75                 
Correct output: -100                | Program output: -100               
Correct output: -70                 | Program output: -27                
Correct output: -82                 | Program output: -60                
Correct output: -74                 | Program output: 78                 
Correct output: -100                | Program output: 13                 
Correct output: -84                 | Program output: -84                
Correct output: -35                 | Program output: -27                
Correct output: -41                 | Program output: -41                
Correct output: -89                 | Program output: -4                 
Correct output: -61                 | Program output: 53                 
Correct output: -100                | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: 87                 
Correct output: -96                 | Program output: 8                  
Correct output: -48                 | Program output: -43                
Correct output: 27                  | Program output: 27                 
Correct output: -78                 | Program output: -46                
Correct output: -35                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 1, :instruction tagged_418} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_flush} {:close 1, :instruction tagged_559} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Lexicase best program: (boolean_invert_second_then_and integer_empty integer_yankdup tagged_418 exec_s (exec_s_when_autoconstructing (boolean_not integer_flush tagged_559) (integer_dup_times exec_s_when_autoconstructing (exec_yankdup integer_yank in3 print_integer boolean_stackdepth boolean_empty) () ()) ()) () ())
Lexicase best errors: [0 0 0 1 0 0 1 1 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 27
Percent parens: 0.370
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 1, :instruction tagged_418} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_flush} {:close 1, :instruction tagged_559} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Zero cases best program: (boolean_invert_second_then_and integer_empty integer_yankdup tagged_418 exec_s (exec_s_when_autoconstructing (boolean_not integer_flush tagged_559) (integer_dup_times exec_s_when_autoconstructing (exec_yankdup integer_yank in3 print_integer boolean_stackdepth boolean_empty) () ()) ()) () ())
Zero cases best errors: [0 0 0 1 0 0 1 1 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 27
Percent parens: 0.370
--- Lexicase Population Statistics ---
Count of elite individuals by case: (955 305 955 1000 305 305 1000 1000 304 1000)
Population mean number of elite cases: 7.13
Count of perfect (error zero) individuals by case: (955 305 955 0 305 305 0 0 304 0)
Population mean number of perfect (error zero) cases: 3.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction tagged_559} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Best program: (boolean_invert_second_then_and tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank tagged_559) (integer_dup_times exec_s_when_autoconstructing (exec_yankdup integer_yank in3 print_integer boolean_stackdepth boolean_stackdepth boolean_empty) () ()) ())
Errors: [0 0 0 1 0 0 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 16
Size: 23
Percent parens: 0.304
--- Population Statistics ---
Average total errors in population: 6.871
Median total errors in population: 8
Error averages by case: (0.045 0.695 0.045 1.0 0.695 0.695 1.0 1.0 0.696 1.0)
Error minima by case: (0 0 0 1 0 0 1 1 0 1)
Average genome size in population (length): 13.928
Average program size in population (points): 19.266
Average percent parens in population: 0.270
Minimum age in population: 48.0554205160588
Maximum age in population: 53.71886629587971
Average age in population: 51.2683657087101
Median age in population: 51.35379743797239
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 109
Genome diversity (% unique genomes):	 0.466
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 138
Syntactic diversity (% unique Push programs):	 0.404
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.011
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 11159937
--- Timings ---
Current time: 1559582728807 milliseconds
Total Time:          85.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.4 seconds, 75.0%
Fitness Testing:     13.1 seconds, 15.2%
Report:               8.3 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 83                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 94                 
Correct output: 45                  | Program output: 45                 
Correct output: 4                   | Program output: 47                 
Correct output: 37                  | Program output: 83                 
Correct output: 8                   | Program output: 65                 
Correct output: 37                  | Program output: 41                 
Correct output: 48                  | Program output: 94                 
Correct output: 13                  | Program output: 26                 
Correct output: 20                  | Program output: 77                 
Correct output: 25                  | Program output: 87                 
Correct output: 25                  | Program output: 95                 
Correct output: 19                  | Program output: 19                 
Correct output: 31                  | Program output: 81                 
Correct output: 35                  | Program output: 72                 
Correct output: 0                   | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 20                 
Correct output: 12                  | Program output: 92                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 32                 
Correct output: -49                 | Program output: -13                
Correct output: -76                 | Program output: -76                
Correct output: -91                 | Program output: -2                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: 22                 
Correct output: -64                 | Program output: -64                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: 75                 
Correct output: -21                 | Program output: 67                 
Correct output: -82                 | Program output: -67                
Correct output: -96                 | Program output: 42                 
Correct output: -89                 | Program output: 59                 
Correct output: -89                 | Program output: -7                 
Correct output: 8                   | Program output: 60                 
Correct output: -95                 | Program output: -30                
Correct output: -48                 | Program output: -17                
Correct output: -51                 | Program output: -49                
Correct output: -72                 | Program output: 64                 
Correct output: -71                 | Program output: 5                  
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: 65                 
Correct output: -63                 | Program output: 40                 
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: 43                 
Correct output: 3                   | Program output: 47                 
Correct output: -51                 | Program output: -16                
Correct output: -23                 | Program output: 74                 
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: 23                 
Correct output: -67                 | Program output: 20                 
Correct output: -97                 | Program output: -2                 
Correct output: -57                 | Program output: -29                
Correct output: -86                 | Program output: 4                  
Correct output: -43                 | Program output: -13                
Correct output: -48                 | Program output: 59                 
Correct output: -89                 | Program output: -84                
Correct output: -81                 | Program output: 95                 
Correct output: -61                 | Program output: -24                
Correct output: -62                 | Program output: 33                 
Correct output: -85                 | Program output: 75                 
Correct output: -100                | Program output: -100               
Correct output: -70                 | Program output: -27                
Correct output: -82                 | Program output: -60                
Correct output: -74                 | Program output: 78                 
Correct output: -100                | Program output: 13                 
Correct output: -84                 | Program output: -84                
Correct output: -35                 | Program output: -27                
Correct output: -41                 | Program output: -41                
Correct output: -89                 | Program output: -4                 
Correct output: -61                 | Program output: 53                 
Correct output: -100                | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: 87                 
Correct output: -96                 | Program output: 8                  
Correct output: -48                 | Program output: -43                
Correct output: 27                  | Program output: 27                 
Correct output: -78                 | Program output: -46                
Correct output: -35                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 2, :instruction boolean_not} {:close 0, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction tagged_559} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Lexicase best program: (boolean_invert_second_then_and integer_empty boolean_not tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank tagged_559) (boolean_dup_times exec_s_when_autoconstructing (exec_yankdup integer_yank in3 print_integer boolean_stackdepth boolean_empty) () ()) ())
Lexicase best errors: [0 1 1 1 0 1 1 0 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 24
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 2, :instruction boolean_not} {:close 0, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction tagged_559} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Zero cases best program: (boolean_invert_second_then_and integer_empty boolean_not tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank tagged_559) (boolean_dup_times exec_s_when_autoconstructing (exec_yankdup integer_yank in3 print_integer boolean_stackdepth boolean_empty) () ()) ())
Zero cases best errors: [0 1 1 1 0 1 1 0 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 24
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (963 1000 1000 1000 963 1000 1000 963 963 1000)
Population mean number of elite cases: 9.85
Count of perfect (error zero) individuals by case: (963 0 0 0 963 0 0 963 963 0)
Population mean number of perfect (error zero) cases: 3.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 1, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction tagged_559} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Best program: (exec_pop () integer_empty integer_yankdup tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank tagged_559) (integer_dup_times exec_s_when_autoconstructing (exec_yankdup integer_yank in3 print_integer boolean_stackdepth boolean_empty) () ()) ())
Errors: [0 1 1 1 0 1 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 17
Size: 25
Percent parens: 0.320
--- Population Statistics ---
Average total errors in population: 6.148
Median total errors in population: 6
Error averages by case: (0.037 1.0 1.0 1.0 0.037 1.0 1.0 0.037 0.037 1.0)
Error minima by case: (0 1 1 1 0 1 1 0 0 1)
Average genome size in population (length): 17.167
Average program size in population (points): 24.297
Average percent parens in population: 0.291
Minimum age in population: 50.3867514161393
Maximum age in population: 54.68015522466158
Average age in population: 52.84599701786879
Median age in population: 52.88689485075884
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 260
Genome diversity (% unique genomes):	 0.369
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 343
Syntactic diversity (% unique Push programs):	 0.321
Total error diversity:				 0.002
Error (vector) diversity:			 0.002
Behavioral diversity:				 0.008
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 11331920
--- Timings ---
Current time: 1559582730789 milliseconds
Total Time:          87.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.0 seconds, 75.2%
Fitness Testing:     13.3 seconds, 15.1%
Report:               8.4 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 75                  | Program output: 81                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 40                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 87                 
Correct output: 45                  | Program output: 65                 
Correct output: 4                   | Program output: 62                 
Correct output: 37                  | Program output: 95                 
Correct output: 8                   | Program output: 8                  
Correct output: 37                  | Program output: 37                 
Correct output: 48                  | Program output: 92                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 88                 
Correct output: 25                  | Program output: 25                 
Correct output: 25                  | Program output: 98                 
Correct output: 19                  | Program output: 72                 
Correct output: 31                  | Program output: 59                 
Correct output: 35                  | Program output: 56                 
Correct output: 0                   | Program output: 0                  
Correct output: 7                   | Program output: 11                 
Correct output: 18                  | Program output: 33                 
Correct output: 12                  | Program output: 33                 
Correct output: 36                  | Program output: 94                 
Correct output: 9                   | Program output: 9                  
Correct output: -49                 | Program output: -32                
Correct output: -76                 | Program output: -56                
Correct output: -91                 | Program output: -41                
Correct output: -76                 | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: -64                 | Program output: 68                 
Correct output: -89                 | Program output: -1                 
Correct output: -90                 | Program output: 99                 
Correct output: -91                 | Program output: 21                 
Correct output: -56                 | Program output: -56                
Correct output: -21                 | Program output: 52                 
Correct output: -82                 | Program output: -38                
Correct output: -96                 | Program output: 74                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -89                
Correct output: 8                   | Program output: 90                 
Correct output: -95                 | Program output: 35                 
Correct output: -48                 | Program output: 5                  
Correct output: -51                 | Program output: 38                 
Correct output: -72                 | Program output: 23                 
Correct output: -71                 | Program output: 32                 
Correct output: -94                 | Program output: 61                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -63                
Correct output: -67                 | Program output: -17                
Correct output: -95                 | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -3                 
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: 12                 
Correct output: -72                 | Program output: -2                 
Correct output: -67                 | Program output: 23                 
Correct output: -97                 | Program output: 25                 
Correct output: -57                 | Program output: 45                 
Correct output: -86                 | Program output: 93                 
Correct output: -43                 | Program output: 48                 
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: 15                 
Correct output: -81                 | Program output: -28                
Correct output: -61                 | Program output: 100                
Correct output: -62                 | Program output: 9                  
Correct output: -85                 | Program output: 70                 
Correct output: -100                | Program output: 31                 
Correct output: -70                 | Program output: -11                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: 9                  
Correct output: -100                | Program output: -32                
Correct output: -84                 | Program output: 35                 
Correct output: -35                 | Program output: 26                 
Correct output: -41                 | Program output: 20                 
Correct output: -89                 | Program output: 61                 
Correct output: -61                 | Program output: 1                  
Correct output: -100                | Program output: 50                 
Correct output: -75                 | Program output: -48                
Correct output: -73                 | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: 2                  
Correct output: 27                  | Program output: 73                 
Correct output: -78                 | Program output: -78                
Correct output: -35                 | Program output: -34                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction tagged_559} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Lexicase best program: (in4 tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank tagged_559) (integer_dup_times integer_yank integer_max print_integer boolean_stackdepth boolean_empty) ())
Lexicase best errors: [1 1 0 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 17
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction tagged_559} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Zero cases best program: (in4 tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank tagged_559) (integer_dup_times integer_yank integer_max print_integer boolean_stackdepth boolean_empty) ())
Zero cases best errors: [1 1 0 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 17
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 955 1 1000 955 1 1 955 1000)
Population mean number of elite cases: 6.87
Count of perfect (error zero) individuals by case: (0 0 955 1 0 955 1 1 955 0)
Population mean number of perfect (error zero) cases: 2.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction tagged_559} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Best program: (in4 tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank tagged_559) (integer_dup_times integer_yank integer_max print_integer boolean_stackdepth boolean_empty) ())
Errors: [1 1 0 0 1 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 13
Size: 17
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 7.132
Median total errors in population: 7
Error averages by case: (1.0 1.0 0.045 0.999 1.0 0.045 0.999 0.999 0.045 1.0)
Error minima by case: (1 1 0 0 1 0 0 0 0 1)
Average genome size in population (length): 17.312
Average program size in population (points): 24.409
Average percent parens in population: 0.287
Minimum age in population: 51.3867514161393
Maximum age in population: 56.2423420510604
Average age in population: 54.33867111919972
Median age in population: 54.38474580817274
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 189
Genome diversity (% unique genomes):	 0.473
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 268
Syntactic diversity (% unique Push programs):	 0.417
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.01
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 11506776
--- Timings ---
Current time: 1559582732552 milliseconds
Total Time:          89.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.5 seconds, 75.3%
Fitness Testing:     13.5 seconds, 15.0%
Report:               8.5 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 75                  | Program output: 81                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 40                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 87                 
Correct output: 45                  | Program output: 65                 
Correct output: 4                   | Program output: 62                 
Correct output: 37                  | Program output: 95                 
Correct output: 8                   | Program output: 8                  
Correct output: 37                  | Program output: 37                 
Correct output: 48                  | Program output: 92                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 88                 
Correct output: 25                  | Program output: 25                 
Correct output: 25                  | Program output: 98                 
Correct output: 19                  | Program output: 72                 
Correct output: 31                  | Program output: 59                 
Correct output: 35                  | Program output: 56                 
Correct output: 0                   | Program output: 0                  
Correct output: 7                   | Program output: 11                 
Correct output: 18                  | Program output: 33                 
Correct output: 12                  | Program output: 33                 
Correct output: 36                  | Program output: 94                 
Correct output: 9                   | Program output: 9                  
Correct output: -49                 | Program output: -32                
Correct output: -76                 | Program output: -56                
Correct output: -91                 | Program output: -41                
Correct output: -76                 | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: -64                 | Program output: 68                 
Correct output: -89                 | Program output: -1                 
Correct output: -90                 | Program output: 99                 
Correct output: -91                 | Program output: 21                 
Correct output: -56                 | Program output: -56                
Correct output: -21                 | Program output: 52                 
Correct output: -82                 | Program output: -38                
Correct output: -96                 | Program output: 74                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -89                
Correct output: 8                   | Program output: 90                 
Correct output: -95                 | Program output: 35                 
Correct output: -48                 | Program output: 5                  
Correct output: -51                 | Program output: 38                 
Correct output: -72                 | Program output: 23                 
Correct output: -71                 | Program output: 32                 
Correct output: -94                 | Program output: 61                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -63                
Correct output: -67                 | Program output: -17                
Correct output: -95                 | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -3                 
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: 12                 
Correct output: -72                 | Program output: -2                 
Correct output: -67                 | Program output: 23                 
Correct output: -97                 | Program output: 25                 
Correct output: -57                 | Program output: 45                 
Correct output: -86                 | Program output: 93                 
Correct output: -43                 | Program output: 48                 
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: 15                 
Correct output: -81                 | Program output: -28                
Correct output: -61                 | Program output: 100                
Correct output: -62                 | Program output: 9                  
Correct output: -85                 | Program output: 70                 
Correct output: -100                | Program output: 31                 
Correct output: -70                 | Program output: -11                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: 9                  
Correct output: -100                | Program output: -32                
Correct output: -84                 | Program output: 35                 
Correct output: -35                 | Program output: 26                 
Correct output: -41                 | Program output: 20                 
Correct output: -89                 | Program output: 61                 
Correct output: -61                 | Program output: 1                  
Correct output: -100                | Program output: 50                 
Correct output: -75                 | Program output: -48                
Correct output: -73                 | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: 2                  
Correct output: 27                  | Program output: 73                 
Correct output: -78                 | Program output: -78                
Correct output: -35                 | Program output: -34                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 0, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction tagged_559} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Lexicase best program: (in4 tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank tagged_559) (integer_dup_times integer_yank integer_max print_integer boolean_stackdepth boolean_empty) ())
Lexicase best errors: [1 1 0 1 1 1 0 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 17
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 0, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction tagged_559} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Zero cases best program: (in4 tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank tagged_559) (integer_dup_times integer_yank integer_max print_integer boolean_stackdepth boolean_empty) ())
Zero cases best errors: [1 1 0 1 1 1 0 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 17
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 949 1000 1000 1 931 1000 934 1)
Population mean number of elite cases: 7.82
Count of perfect (error zero) individuals by case: (0 0 949 0 0 1 931 0 934 1)
Population mean number of perfect (error zero) cases: 2.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 2, :instruction tagged_559} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Best program: (in4 tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank tagged_559) () (integer_dup_times integer_yank integer_max print_integer boolean_stackdepth boolean_empty))
Errors: [1 1 0 1 1 1 0 1 0 1]
Total: 7
Mean: 0.7
Genome size: 13
Size: 17
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 7.184
Median total errors in population: 7
Error averages by case: (1.0 1.0 0.051 1.0 1.0 0.999 0.069 1.0 0.066 0.999)
Error minima by case: (1 1 0 1 1 0 0 1 0 0)
Average genome size in population (length): 12.985
Average program size in population (points): 16.992
Average percent parens in population: 0.235
Minimum age in population: 56.40594357591181
Maximum age in population: 57.40594357591181
Average age in population: 56.91194357591181
Median age in population: 57.40594357591181
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 790
Genome diversity (% unique genomes):	 0.158
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 809
Syntactic diversity (% unique Push programs):	 0.147
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 11642258
--- Timings ---
Current time: 1559582734292 milliseconds
Total Time:          91.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.9 seconds, 75.5%
Fitness Testing:     13.6 seconds, 14.9%
Report:               8.7 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 75                  | Program output: 81                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 40                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 87                 
Correct output: 45                  | Program output: 65                 
Correct output: 4                   | Program output: 62                 
Correct output: 37                  | Program output: 95                 
Correct output: 8                   | Program output: 8                  
Correct output: 37                  | Program output: 37                 
Correct output: 48                  | Program output: 92                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 88                 
Correct output: 25                  | Program output: 25                 
Correct output: 25                  | Program output: 98                 
Correct output: 19                  | Program output: 72                 
Correct output: 31                  | Program output: 59                 
Correct output: 35                  | Program output: 56                 
Correct output: 0                   | Program output: 0                  
Correct output: 7                   | Program output: 11                 
Correct output: 18                  | Program output: 33                 
Correct output: 12                  | Program output: 33                 
Correct output: 36                  | Program output: 94                 
Correct output: 9                   | Program output: 9                  
Correct output: -49                 | Program output: -32                
Correct output: -76                 | Program output: -56                
Correct output: -91                 | Program output: -41                
Correct output: -76                 | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: -64                 | Program output: 68                 
Correct output: -89                 | Program output: -1                 
Correct output: -90                 | Program output: 99                 
Correct output: -91                 | Program output: 21                 
Correct output: -56                 | Program output: -56                
Correct output: -21                 | Program output: 52                 
Correct output: -82                 | Program output: -38                
Correct output: -96                 | Program output: 74                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -89                
Correct output: 8                   | Program output: 90                 
Correct output: -95                 | Program output: 35                 
Correct output: -48                 | Program output: 5                  
Correct output: -51                 | Program output: 38                 
Correct output: -72                 | Program output: 23                 
Correct output: -71                 | Program output: 32                 
Correct output: -94                 | Program output: 61                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -63                
Correct output: -67                 | Program output: -17                
Correct output: -95                 | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -3                 
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: 12                 
Correct output: -72                 | Program output: -2                 
Correct output: -67                 | Program output: 23                 
Correct output: -97                 | Program output: 25                 
Correct output: -57                 | Program output: 45                 
Correct output: -86                 | Program output: 93                 
Correct output: -43                 | Program output: 48                 
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: 15                 
Correct output: -81                 | Program output: -28                
Correct output: -61                 | Program output: 100                
Correct output: -62                 | Program output: 9                  
Correct output: -85                 | Program output: 70                 
Correct output: -100                | Program output: 31                 
Correct output: -70                 | Program output: -11                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: 9                  
Correct output: -100                | Program output: -32                
Correct output: -84                 | Program output: 35                 
Correct output: -35                 | Program output: 26                 
Correct output: -41                 | Program output: 20                 
Correct output: -89                 | Program output: 61                 
Correct output: -61                 | Program output: 1                  
Correct output: -100                | Program output: 50                 
Correct output: -75                 | Program output: -48                
Correct output: -73                 | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: 2                  
Correct output: 27                  | Program output: 73                 
Correct output: -78                 | Program output: -78                
Correct output: -35                 | Program output: -34                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction tagged_559} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Lexicase best program: (in4 tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank tagged_559 integer_dup_times integer_yank integer_empty print_integer boolean_stackdepth boolean_empty) () ())
Lexicase best errors: [0 0 1 1 0 1 1 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 17
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction tagged_559} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Zero cases best program: (in4 tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank tagged_559 integer_dup_times integer_yank integer_empty print_integer boolean_stackdepth boolean_empty) () ())
Zero cases best errors: [0 0 1 1 0 1 1 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 17
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (492 493 1000 1000 492 1000 1000 492 450 493)
Population mean number of elite cases: 6.91
Count of perfect (error zero) individuals by case: (492 493 0 0 492 0 0 492 450 493)
Population mean number of perfect (error zero) cases: 2.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction tagged_559} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Best program: (in4 tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank tagged_559) (integer_dup_times integer_yank integer_max print_integer boolean_stackdepth boolean_empty) ())
Errors: [0 0 1 1 0 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 13
Size: 17
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 7.088
Median total errors in population: 9
Error averages by case: (0.508 0.507 1.0 1.0 0.508 1.0 1.0 0.508 0.55 0.507)
Error minima by case: (0 0 1 1 0 1 1 0 0 0)
Average genome size in population (length): 14.98
Average program size in population (points): 18.999
Average percent parens in population: 0.213
Minimum age in population: 57.40594357591181
Maximum age in population: 59.40594357591181
Average age in population: 58.66294357591181
Median age in population: 58.40594357591181
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 369
Genome diversity (% unique genomes):	 0.242
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 381
Syntactic diversity (% unique Push programs):	 0.215
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 11794580
--- Timings ---
Current time: 1559582736093 milliseconds
Total Time:          93.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.4 seconds, 75.7%
Fitness Testing:     13.8 seconds, 14.8%
Report:               8.8 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 75                  | Program output: 81                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 40                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 87                 
Correct output: 45                  | Program output: 65                 
Correct output: 4                   | Program output: 62                 
Correct output: 37                  | Program output: 95                 
Correct output: 8                   | Program output: 8                  
Correct output: 37                  | Program output: 37                 
Correct output: 48                  | Program output: 92                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 88                 
Correct output: 25                  | Program output: 25                 
Correct output: 25                  | Program output: 98                 
Correct output: 19                  | Program output: 72                 
Correct output: 31                  | Program output: 59                 
Correct output: 35                  | Program output: 56                 
Correct output: 0                   | Program output: 0                  
Correct output: 7                   | Program output: 11                 
Correct output: 18                  | Program output: 33                 
Correct output: 12                  | Program output: 33                 
Correct output: 36                  | Program output: 94                 
Correct output: 9                   | Program output: 9                  
Correct output: -49                 | Program output: -32                
Correct output: -76                 | Program output: -56                
Correct output: -91                 | Program output: -41                
Correct output: -76                 | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: -64                 | Program output: 68                 
Correct output: -89                 | Program output: -1                 
Correct output: -90                 | Program output: 99                 
Correct output: -91                 | Program output: 21                 
Correct output: -56                 | Program output: -56                
Correct output: -21                 | Program output: 52                 
Correct output: -82                 | Program output: -38                
Correct output: -96                 | Program output: 74                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -89                
Correct output: 8                   | Program output: 90                 
Correct output: -95                 | Program output: 35                 
Correct output: -48                 | Program output: 5                  
Correct output: -51                 | Program output: 38                 
Correct output: -72                 | Program output: 23                 
Correct output: -71                 | Program output: 32                 
Correct output: -94                 | Program output: 61                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -63                
Correct output: -67                 | Program output: -17                
Correct output: -95                 | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -3                 
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: 12                 
Correct output: -72                 | Program output: -2                 
Correct output: -67                 | Program output: 23                 
Correct output: -97                 | Program output: 25                 
Correct output: -57                 | Program output: 45                 
Correct output: -86                 | Program output: 93                 
Correct output: -43                 | Program output: 48                 
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: 15                 
Correct output: -81                 | Program output: -28                
Correct output: -61                 | Program output: 100                
Correct output: -62                 | Program output: 9                  
Correct output: -85                 | Program output: 70                 
Correct output: -100                | Program output: 31                 
Correct output: -70                 | Program output: -11                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: 9                  
Correct output: -100                | Program output: -32                
Correct output: -84                 | Program output: 35                 
Correct output: -35                 | Program output: 26                 
Correct output: -41                 | Program output: 20                 
Correct output: -89                 | Program output: 61                 
Correct output: -61                 | Program output: 1                  
Correct output: -100                | Program output: 50                 
Correct output: -75                 | Program output: -48                
Correct output: -73                 | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: 2                  
Correct output: 27                  | Program output: 73                 
Correct output: -78                 | Program output: -78                
Correct output: -35                 | Program output: -34                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction tagged_559} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Lexicase best program: (in4 tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank tagged_559) (integer_dup_times integer_yank integer_max print_integer boolean_stackdepth boolean_empty) ())
Lexicase best errors: [1 0 0 1 0 0 1 1 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 17
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction tagged_559} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Zero cases best program: (in4 tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank tagged_559) (integer_dup_times integer_yank integer_max print_integer boolean_stackdepth boolean_empty) ())
Zero cases best errors: [1 0 0 1 0 0 1 1 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 17
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 938 940 1000 773 774 1000 1000 163 781)
Population mean number of elite cases: 8.37
Count of perfect (error zero) individuals by case: (0 938 940 0 773 774 0 0 163 781)
Population mean number of perfect (error zero) cases: 4.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction tagged_559} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Best program: (in4 tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank tagged_559) (integer_dup_times integer_yank integer_max print_integer boolean_stackdepth boolean_empty) ())
Errors: [1 0 0 1 0 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 13
Size: 17
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 5.631
Median total errors in population: 5
Error averages by case: (1.0 0.062 0.06 1.0 0.227 0.226 1.0 1.0 0.837 0.219)
Error minima by case: (1 0 0 1 0 0 1 1 0 0)
Average genome size in population (length): 13.868
Average program size in population (points): 17.907
Average percent parens in population: 0.226
Minimum age in population: 58.40594357591181
Maximum age in population: 61.40594357591181
Average age in population: 60.04894357591181
Median age in population: 60.15594357591181
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 456
Genome diversity (% unique genomes):	 0.295
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 488
Syntactic diversity (% unique Push programs):	 0.271
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 11939885
--- Timings ---
Current time: 1559582738144 milliseconds
Total Time:          95.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.2 seconds, 75.9%
Fitness Testing:     14.0 seconds, 14.7%
Report:               8.9 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Smallest problem report - generation 41
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 75                  | Program output: 81                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 40                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 87                 
Correct output: 45                  | Program output: 65                 
Correct output: 4                   | Program output: 62                 
Correct output: 37                  | Program output: 95                 
Correct output: 8                   | Program output: 8                  
Correct output: 37                  | Program output: 37                 
Correct output: 48                  | Program output: 92                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 88                 
Correct output: 25                  | Program output: 25                 
Correct output: 25                  | Program output: 98                 
Correct output: 19                  | Program output: 72                 
Correct output: 31                  | Program output: 59                 
Correct output: 35                  | Program output: 56                 
Correct output: 0                   | Program output: 0                  
Correct output: 7                   | Program output: 11                 
Correct output: 18                  | Program output: 33                 
Correct output: 12                  | Program output: 33                 
Correct output: 36                  | Program output: 94                 
Correct output: 9                   | Program output: 9                  
Correct output: -49                 | Program output: -32                
Correct output: -76                 | Program output: -56                
Correct output: -91                 | Program output: -41                
Correct output: -76                 | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: -64                 | Program output: 68                 
Correct output: -89                 | Program output: -1                 
Correct output: -90                 | Program output: 99                 
Correct output: -91                 | Program output: 21                 
Correct output: -56                 | Program output: -56                
Correct output: -21                 | Program output: 52                 
Correct output: -82                 | Program output: -38                
Correct output: -96                 | Program output: 74                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -89                
Correct output: 8                   | Program output: 90                 
Correct output: -95                 | Program output: 35                 
Correct output: -48                 | Program output: 5                  
Correct output: -51                 | Program output: 38                 
Correct output: -72                 | Program output: 23                 
Correct output: -71                 | Program output: 32                 
Correct output: -94                 | Program output: 61                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -63                
Correct output: -67                 | Program output: -17                
Correct output: -95                 | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -3                 
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: 12                 
Correct output: -72                 | Program output: -2                 
Correct output: -67                 | Program output: 23                 
Correct output: -97                 | Program output: 25                 
Correct output: -57                 | Program output: 45                 
Correct output: -86                 | Program output: 93                 
Correct output: -43                 | Program output: 48                 
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: 15                 
Correct output: -81                 | Program output: -28                
Correct output: -61                 | Program output: 100                
Correct output: -62                 | Program output: 9                  
Correct output: -85                 | Program output: 70                 
Correct output: -100                | Program output: 31                 
Correct output: -70                 | Program output: -11                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: 9                  
Correct output: -100                | Program output: -32                
Correct output: -84                 | Program output: 35                 
Correct output: -35                 | Program output: 26                 
Correct output: -41                 | Program output: 20                 
Correct output: -89                 | Program output: 61                 
Correct output: -61                 | Program output: 1                  
Correct output: -100                | Program output: 50                 
Correct output: -75                 | Program output: -48                
Correct output: -73                 | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: 2                  
Correct output: 27                  | Program output: 73                 
Correct output: -78                 | Program output: -78                
Correct output: -35                 | Program output: -34                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction tagged_559} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Lexicase best program: (in4 tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank tagged_559) (integer_dup_times integer_yank integer_max print_integer boolean_stackdepth boolean_empty) ())
Lexicase best errors: [0 0 1 1 1 1 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 17
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction tagged_559} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Zero cases best program: (in4 tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank tagged_559) (integer_dup_times integer_yank integer_max print_integer boolean_stackdepth boolean_empty) ())
Zero cases best errors: [0 0 1 1 1 1 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 17
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (735 744 209 1000 1 1000 738 1000 1 954)
Population mean number of elite cases: 6.38
Count of perfect (error zero) individuals by case: (735 744 209 0 1 0 738 0 1 954)
Population mean number of perfect (error zero) cases: 3.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction tagged_559} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Best program: (in4 tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank tagged_559) (integer_dup_times integer_yank integer_max print_integer boolean_stackdepth boolean_empty) ())
Errors: [0 0 1 1 1 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 13
Size: 17
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 6.618
Median total errors in population: 6
Error averages by case: (0.265 0.256 0.791 1.0 0.999 1.0 0.262 1.0 0.999 0.046)
Error minima by case: (0 0 0 1 0 1 0 1 0 0)
Average genome size in population (length): 14.012
Average program size in population (points): 18.042
Average percent parens in population: 0.224
Minimum age in population: 59.40594357591181
Maximum age in population: 63.28094357591181
Average age in population: 61.57844357591181
Median age in population: 61.65594357591181
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 347
Genome diversity (% unique genomes):	 0.343
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 397
Syntactic diversity (% unique Push programs):	 0.311
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 12082814
--- Timings ---
Current time: 1559582740199 milliseconds
Total Time:          97.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.0 seconds, 76.1%
Fitness Testing:     14.1 seconds, 14.6%
Report:               9.0 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Smallest problem report - generation 42
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -24                
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: -3                 
Correct output: 40                  | Program output: 83                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: 73                 
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 38                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 43                 
Correct output: 45                  | Program output: 69                 
Correct output: 4                   | Program output: 54                 
Correct output: 37                  | Program output: 37                 
Correct output: 8                   | Program output: 98                 
Correct output: 37                  | Program output: 96                 
Correct output: 48                  | Program output: 62                 
Correct output: 13                  | Program output: 73                 
Correct output: 20                  | Program output: 71                 
Correct output: 25                  | Program output: 47                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 41                 
Correct output: 31                  | Program output: 45                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 74                 
Correct output: 7                   | Program output: 51                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 15                 
Correct output: 36                  | Program output: 91                 
Correct output: 9                   | Program output: 52                 
Correct output: -49                 | Program output: -49                
Correct output: -76                 | Program output: 5                  
Correct output: -91                 | Program output: -91                
Correct output: -76                 | Program output: -60                
Correct output: -95                 | Program output: -74                
Correct output: -64                 | Program output: 95                 
Correct output: -89                 | Program output: 77                 
Correct output: -90                 | Program output: 19                 
Correct output: -91                 | Program output: 88                 
Correct output: -56                 | Program output: -11                
Correct output: -21                 | Program output: -21                
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: 71                 
Correct output: -89                 | Program output: 9                  
Correct output: -89                 | Program output: -34                
Correct output: 8                   | Program output: 67                 
Correct output: -95                 | Program output: -95                
Correct output: -48                 | Program output: 30                 
Correct output: -51                 | Program output: 8                  
Correct output: -72                 | Program output: 9                  
Correct output: -71                 | Program output: 47                 
Correct output: -94                 | Program output: 86                 
Correct output: -80                 | Program output: -57                
Correct output: -63                 | Program output: -38                
Correct output: -67                 | Program output: -3                 
Correct output: -95                 | Program output: -95                
Correct output: 3                   | Program output: 47                 
Correct output: -51                 | Program output: -51                
Correct output: -23                 | Program output: 1                  
Correct output: -89                 | Program output: 2                  
Correct output: -72                 | Program output: -17                
Correct output: -67                 | Program output: -32                
Correct output: -97                 | Program output: -97                
Correct output: -57                 | Program output: 87                 
Correct output: -86                 | Program output: -86                
Correct output: -43                 | Program output: -40                
Correct output: -48                 | Program output: -41                
Correct output: -89                 | Program output: -89                
Correct output: -81                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -85                 | Program output: -57                
Correct output: -100                | Program output: 49                 
Correct output: -70                 | Program output: -70                
Correct output: -82                 | Program output: 75                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: 15                 
Correct output: -35                 | Program output: -35                
Correct output: -41                 | Program output: -17                
Correct output: -89                 | Program output: 53                 
Correct output: -61                 | Program output: -61                
Correct output: -100                | Program output: 65                 
Correct output: -75                 | Program output: 35                 
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: 19                 
Correct output: -48                 | Program output: -48                
Correct output: 27                  | Program output: 88                 
Correct output: -78                 | Program output: -4                 
Correct output: -35                 | Program output: -33                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction tagged_559} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Lexicase best program: (in4 tagged_418 boolean_stackdepth exec_s_when_autoconstructing (boolean_not tagged_418) (integer_dup_times in1 boolean_not integer_yank tagged_559) (integer_dup_times integer_yank integer_max print_integer boolean_stackdepth boolean_empty))
Lexicase best errors: [1 1 0 0 0 1 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 21
Percent parens: 0.190
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction tagged_559} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Zero cases best program: (in4 tagged_418 boolean_stackdepth exec_s_when_autoconstructing (boolean_not tagged_418) (integer_dup_times in1 boolean_not integer_yank tagged_559) (integer_dup_times integer_yank integer_max print_integer boolean_stackdepth boolean_empty))
Zero cases best errors: [1 1 0 0 0 1 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 21
Percent parens: 0.190
--- Lexicase Population Statistics ---
Count of elite individuals by case: (7 4 163 168 163 201 165 383 4 932)
Population mean number of elite cases: 2.19
Count of perfect (error zero) individuals by case: (7 4 163 168 163 201 165 383 4 932)
Population mean number of perfect (error zero) cases: 2.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction tagged_559} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Best program: (in4 tagged_418 boolean_stackdepth exec_s_when_autoconstructing (boolean_not tagged_418) (integer_dup_times in1 boolean_not integer_yank tagged_559) (integer_dup_times integer_yank integer_max print_integer boolean_stackdepth boolean_empty))
Errors: [1 1 0 0 0 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 17
Size: 21
Percent parens: 0.190
--- Population Statistics ---
Average total errors in population: 7.81
Median total errors in population: 8
Error averages by case: (0.993 0.996 0.837 0.832 0.837 0.799 0.835 0.617 0.996 0.068)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 16.428
Average program size in population (points): 20.827
Average percent parens in population: 0.211
Minimum age in population: 60.40594357591181
Maximum age in population: 64.9059435759118
Average age in population: 63.35025607591181
Median age in population: 63.40594357591181
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 158
Genome diversity (% unique genomes):	 0.334
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 167
Syntactic diversity (% unique Push programs):	 0.309
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 12252866
--- Timings ---
Current time: 1559582742446 milliseconds
Total Time:          99.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.9 seconds, 76.3%
Fitness Testing:     14.3 seconds, 14.4%
Report:               9.1 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Smallest problem report - generation 43
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: 13                 
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 83                 
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: -62                
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 76                 
Correct output: 45                  | Program output: 60                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 100                
Correct output: 8                   | Program output: 32                 
Correct output: 37                  | Program output: 91                 
Correct output: 48                  | Program output: 48                 
Correct output: 13                  | Program output: 19                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 69                 
Correct output: 25                  | Program output: 66                 
Correct output: 19                  | Program output: 44                 
Correct output: 31                  | Program output: 31                 
Correct output: 35                  | Program output: 74                 
Correct output: 0                   | Program output: 12                 
Correct output: 7                   | Program output: 18                 
Correct output: 18                  | Program output: 50                 
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 91                 
Correct output: 9                   | Program output: 45                 
Correct output: -49                 | Program output: -29                
Correct output: -76                 | Program output: 60                 
Correct output: -91                 | Program output: 63                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: 22                 
Correct output: -64                 | Program output: 84                 
Correct output: -89                 | Program output: 1                  
Correct output: -90                 | Program output: 34                 
Correct output: -91                 | Program output: -19                
Correct output: -56                 | Program output: 79                 
Correct output: -21                 | Program output: 26                 
Correct output: -82                 | Program output: 2                  
Correct output: -96                 | Program output: -96                
Correct output: -89                 | Program output: -13                
Correct output: -89                 | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: -95                 | Program output: 62                 
Correct output: -48                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -72                 | Program output: -72                
Correct output: -71                 | Program output: -71                
Correct output: -94                 | Program output: -54                
Correct output: -80                 | Program output: 16                 
Correct output: -63                 | Program output: 55                 
Correct output: -67                 | Program output: 8                  
Correct output: -95                 | Program output: 92                 
Correct output: 3                   | Program output: 71                 
Correct output: -51                 | Program output: 45                 
Correct output: -23                 | Program output: 44                 
Correct output: -89                 | Program output: 94                 
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: 98                 
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: 22                 
Correct output: -43                 | Program output: -43                
Correct output: -48                 | Program output: 56                 
Correct output: -89                 | Program output: -15                
Correct output: -81                 | Program output: -81                
Correct output: -61                 | Program output: 10                 
Correct output: -62                 | Program output: 2                  
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: 95                 
Correct output: -70                 | Program output: -18                
Correct output: -82                 | Program output: 31                 
Correct output: -74                 | Program output: 53                 
Correct output: -100                | Program output: 88                 
Correct output: -84                 | Program output: 51                 
Correct output: -35                 | Program output: -19                
Correct output: -41                 | Program output: 4                  
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: 87                 
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: 4                  
Correct output: -73                 | Program output: 49                 
Correct output: -96                 | Program output: 69                 
Correct output: -48                 | Program output: 100                
Correct output: 27                  | Program output: 75                 
Correct output: -78                 | Program output: 63                 
Correct output: -35                 | Program output: 54                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction tagged_559} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Lexicase best program: (exec_s_when_autoconstructing (boolean_not tagged_418) (in2 in3 boolean_not integer_yank tagged_559) (integer_dup_times integer_yank integer_max print_integer boolean_stackdepth boolean_empty))
Lexicase best errors: [1 1 0 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 18
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction tagged_559} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Zero cases best program: (exec_s_when_autoconstructing (boolean_not tagged_418) (in2 in3 boolean_not integer_yank tagged_559) (integer_dup_times integer_yank integer_max print_integer boolean_stackdepth boolean_empty))
Zero cases best errors: [1 1 0 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 18
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (113 114 231 286 389 68 113 207 456 233)
Population mean number of elite cases: 2.21
Count of perfect (error zero) individuals by case: (113 114 231 286 389 68 113 207 456 233)
Population mean number of perfect (error zero) cases: 2.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction tagged_559} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Best program: (in4 tagged_418 integer_dup_times exec_s_when_autoconstructing (boolean_not integer_yank tagged_559) (integer_dup_times integer_yank in2 print_integer boolean_stackdepth boolean_empty) ())
Errors: [1 1 0 1 1 0 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 13
Size: 17
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 7.79
Median total errors in population: 8
Error averages by case: (0.887 0.886 0.769 0.714 0.611 0.932 0.887 0.793 0.544 0.767)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 17.291
Average program size in population (points): 21.664
Average percent parens in population: 0.198
Minimum age in population: 63.15594357591181
Maximum age in population: 66.5309435759118
Average age in population: 64.9378810759118
Median age in population: 64.9684435759118
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 288
Genome diversity (% unique genomes):	 0.265
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 295
Syntactic diversity (% unique Push programs):	 0.24
Total error diversity:				 0.005
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 12425488
--- Timings ---
Current time: 1559582744736 milliseconds
Total Time:         101.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        77.8 seconds, 76.5%
Fitness Testing:     14.6 seconds, 14.3%
Report:               9.3 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Smallest problem report - generation 44
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 75                  | Program output: 81                 
Correct output: -24                 | Program output: -24                
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 40                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: 73                 
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 87                 
Correct output: 45                  | Program output: 65                 
Correct output: 4                   | Program output: 62                 
Correct output: 37                  | Program output: 95                 
Correct output: 8                   | Program output: 8                  
Correct output: 37                  | Program output: 37                 
Correct output: 48                  | Program output: 92                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 88                 
Correct output: 25                  | Program output: 25                 
Correct output: 25                  | Program output: 98                 
Correct output: 19                  | Program output: 72                 
Correct output: 31                  | Program output: 59                 
Correct output: 35                  | Program output: 56                 
Correct output: 0                   | Program output: 0                  
Correct output: 7                   | Program output: 11                 
Correct output: 18                  | Program output: 33                 
Correct output: 12                  | Program output: 33                 
Correct output: 36                  | Program output: 94                 
Correct output: 9                   | Program output: 9                  
Correct output: -49                 | Program output: -49                
Correct output: -76                 | Program output: -56                
Correct output: -91                 | Program output: -41                
Correct output: -76                 | Program output: -60                
Correct output: -95                 | Program output: -95                
Correct output: -64                 | Program output: 68                 
Correct output: -89                 | Program output: -1                 
Correct output: -90                 | Program output: 99                 
Correct output: -91                 | Program output: 88                 
Correct output: -56                 | Program output: -56                
Correct output: -21                 | Program output: 52                 
Correct output: -82                 | Program output:                    
Correct output: -96                 | Program output: 71                 
Correct output: -89                 | Program output: 9                  
Correct output: -89                 | Program output: -89                
Correct output: 8                   | Program output: 90                 
Correct output: -95                 | Program output: 35                 
Correct output: -48                 | Program output: 30                 
Correct output: -51                 | Program output: 8                  
Correct output: -72                 | Program output: 9                  
Correct output: -71                 | Program output: 47                 
Correct output: -94                 | Program output: 86                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -63                
Correct output: -67                 | Program output: -17                
Correct output: -95                 | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -3                 
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: 12                 
Correct output: -72                 | Program output: -17                
Correct output: -67                 | Program output: -32                
Correct output: -97                 | Program output: 25                 
Correct output: -57                 | Program output: 87                 
Correct output: -86                 | Program output: 93                 
Correct output: -43                 | Program output: -40                
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: -89                
Correct output: -81                 | Program output: -56                
Correct output: -61                 | Program output: 100                
Correct output: -62                 | Program output: 9                  
Correct output: -85                 | Program output: -57                
Correct output: -100                | Program output: 31                 
Correct output: -70                 | Program output: -70                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: 9                  
Correct output: -100                | Program output: -32                
Correct output: -84                 | Program output: 35                 
Correct output: -35                 | Program output: -35                
Correct output: -41                 | Program output: 20                 
Correct output: -89                 | Program output: 53                 
Correct output: -61                 | Program output: 1                  
Correct output: -100                | Program output: 65                 
Correct output: -75                 | Program output: -48                
Correct output: -73                 | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: 2                  
Correct output: 27                  | Program output: 73                 
Correct output: -78                 | Program output: -78                
Correct output: -35                 | Program output: -34                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction tagged_559} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Lexicase best program: (in4 tagged_418 in2 exec_s_when_autoconstructing (boolean_not tagged_418) (integer_dup_times in1 boolean_not integer_yank tagged_559) (integer_dup_times integer_yank integer_max print_integer boolean_stackdepth boolean_empty))
Lexicase best errors: [0 1 0 0 1 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 21
Percent parens: 0.190
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction tagged_559} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Zero cases best program: (in4 tagged_418 in2 exec_s_when_autoconstructing (boolean_not tagged_418) (integer_dup_times in1 boolean_not integer_yank tagged_559) (integer_dup_times integer_yank integer_max print_integer boolean_stackdepth boolean_empty))
Zero cases best errors: [0 1 0 0 1 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 21
Percent parens: 0.190
--- Lexicase Population Statistics ---
Count of elite individuals by case: (209 233 837 215 93 391 371 359 236 371)
Population mean number of elite cases: 3.32
Count of perfect (error zero) individuals by case: (209 233 837 215 93 391 371 359 236 371)
Population mean number of perfect (error zero) cases: 3.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction tagged_559} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Best program: (in4 tagged_418 in2 exec_s_when_autoconstructing (boolean_not tagged_418) (integer_dup_times in1 boolean_not integer_yank tagged_559) (integer_dup_times integer_yank integer_max print_integer boolean_stackdepth boolean_empty))
Errors: [0 1 0 0 1 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 17
Size: 21
Percent parens: 0.190
--- Population Statistics ---
Average total errors in population: 6.685
Median total errors in population: 7
Error averages by case: (0.791 0.767 0.163 0.785 0.907 0.609 0.629 0.641 0.764 0.629)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 17.984
Average program size in population (points): 22.772
Average percent parens in population: 0.208
Minimum age in population: 64.4059435759118
Maximum age in population: 68.0934435759118
Average age in population: 66.2884748259118
Median age in population: 66.4059435759118
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 104
Genome diversity (% unique genomes):	 0.288
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 110
Syntactic diversity (% unique Push programs):	 0.262
Total error diversity:				 0.006
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 12611988
--- Timings ---
Current time: 1559582747005 milliseconds
Total Time:         103.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        79.7 seconds, 76.7%
Fitness Testing:     14.8 seconds, 14.2%
Report:               9.4 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Smallest problem report - generation 45
Test total error for best: 577
Test mean error for best: 0.57700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -3                 
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: 14                 
Correct output: 40                  | Program output: 83                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: -62                
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 75                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 76                 
Correct output: 45                  | Program output: 60                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 100                
Correct output: 8                   | Program output: 32                 
Correct output: 37                  | Program output: 91                 
Correct output: 48                  | Program output: 48                 
Correct output: 13                  | Program output: 19                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 69                 
Correct output: 25                  | Program output: 66                 
Correct output: 19                  | Program output: 44                 
Correct output: 31                  | Program output: 31                 
Correct output: 35                  | Program output: 74                 
Correct output: 0                   | Program output: 0                  
Correct output: 7                   | Program output: 18                 
Correct output: 18                  | Program output: 50                 
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 91                 
Correct output: 9                   | Program output: 45                 
Correct output: -49                 | Program output: -32                
Correct output: -76                 | Program output: -56                
Correct output: -91                 | Program output: -41                
Correct output: -76                 | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: -64                 | Program output: 84                 
Correct output: -89                 | Program output: -1                 
Correct output: -90                 | Program output: 34                 
Correct output: -91                 | Program output: -19                
Correct output: -56                 | Program output: -56                
Correct output: -21                 | Program output: 52                 
Correct output: -82                 | Program output: -38                
Correct output: -96                 | Program output: -96                
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -89                
Correct output: 8                   | Program output: 8                  
Correct output: -95                 | Program output: 35                 
Correct output: -48                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -72                 | Program output: -72                
Correct output: -71                 | Program output: -71                
Correct output: -94                 | Program output: -54                
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -63                
Correct output: -67                 | Program output: -17                
Correct output: -95                 | Program output: 30                 
Correct output: 3                   | Program output: 71                 
Correct output: -51                 | Program output: -3                 
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: 94                 
Correct output: -72                 | Program output: -2                 
Correct output: -67                 | Program output: 23                 
Correct output: -97                 | Program output: 25                 
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: 93                 
Correct output: -43                 | Program output: 48                 
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: 15                 
Correct output: -81                 | Program output: -28                
Correct output: -61                 | Program output: 100                
Correct output: -62                 | Program output: 9                  
Correct output: -85                 | Program output: 70                 
Correct output: -100                | Program output: 95                 
Correct output: -70                 | Program output: -11                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: 9                  
Correct output: -100                | Program output: -32                
Correct output: -84                 | Program output: 51                 
Correct output: -35                 | Program output: 26                 
Correct output: -41                 | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: 1                  
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -48                
Correct output: -73                 | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: 2                  
Correct output: 27                  | Program output: 75                 
Correct output: -78                 | Program output: -78                
Correct output: -35                 | Program output: -34                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction tagged_559} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Lexicase best program: (in4 tagged_418 integer_dup exec_s_when_autoconstructing (boolean_not tagged_418) (in2 in1 boolean_not integer_yank tagged_559) (integer_dup_times integer_yank integer_max print_integer boolean_stackdepth boolean_empty))
Lexicase best errors: [1 1 0 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 21
Percent parens: 0.190
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction tagged_559} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Zero cases best program: (in4 tagged_418 integer_dup exec_s_when_autoconstructing (boolean_not tagged_418) (in2 in1 boolean_not integer_yank tagged_559) (integer_dup_times integer_yank integer_max print_integer boolean_stackdepth boolean_empty))
Zero cases best errors: [1 1 0 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 21
Percent parens: 0.190
--- Lexicase Population Statistics ---
Count of elite individuals by case: (53 136 593 126 461 940 280 432 455 456)
Population mean number of elite cases: 3.93
Count of perfect (error zero) individuals by case: (53 136 593 126 461 940 280 432 455 456)
Population mean number of perfect (error zero) cases: 3.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction tagged_559} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Best program: (in4 tagged_418 integer_dup exec_s_when_autoconstructing (boolean_not tagged_418) (in2 in1 boolean_not integer_yank tagged_559) (integer_dup_times integer_yank integer_max print_integer boolean_stackdepth boolean_empty))
Errors: [1 1 0 1 0 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 17
Size: 21
Percent parens: 0.190
--- Population Statistics ---
Average total errors in population: 6.068
Median total errors in population: 6
Error averages by case: (0.947 0.864 0.407 0.874 0.539 0.06 0.72 0.568 0.545 0.544)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 18.439
Average program size in population (points): 23.144
Average percent parens in population: 0.202
Minimum age in population: 65.4059435759118
Maximum age in population: 69.6559435759118
Average age in population: 67.5588420134118
Median age in population: 67.6325060759118
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 150
Genome diversity (% unique genomes):	 0.326
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 155
Syntactic diversity (% unique Push programs):	 0.302
Total error diversity:				 0.007
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.074
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 12800727
--- Timings ---
Current time: 1559582749346 milliseconds
Total Time:         106.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        81.6 seconds, 76.7%
Fitness Testing:     15.1 seconds, 14.2%
Report:               9.6 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Smallest problem report - generation 46
Test total error for best: 559
Test mean error for best: 0.55900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -24                
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: -3                 
Correct output: 40                  | Program output: 83                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: 73                 
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 38                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 43                 
Correct output: 45                  | Program output: 69                 
Correct output: 4                   | Program output: 54                 
Correct output: 37                  | Program output: 37                 
Correct output: 8                   | Program output: 98                 
Correct output: 37                  | Program output: 96                 
Correct output: 48                  | Program output: 62                 
Correct output: 13                  | Program output: 73                 
Correct output: 20                  | Program output: 71                 
Correct output: 25                  | Program output: 47                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 41                 
Correct output: 31                  | Program output: 45                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 7                   | Program output: 51                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 15                 
Correct output: 36                  | Program output: 91                 
Correct output: 9                   | Program output: 52                 
Correct output: -49                 | Program output: -49                
Correct output: -76                 | Program output: -56                
Correct output: -91                 | Program output: -41                
Correct output: -76                 | Program output: -60                
Correct output: -95                 | Program output: -95                
Correct output: -64                 | Program output: 95                 
Correct output: -89                 | Program output: -1                 
Correct output: -90                 | Program output: 19                 
Correct output: -91                 | Program output: 88                 
Correct output: -56                 | Program output: -56                
Correct output: -21                 | Program output: -21                
Correct output: -82                 | Program output:                    
Correct output: -96                 | Program output: 71                 
Correct output: -89                 | Program output: 9                  
Correct output: -89                 | Program output: -89                
Correct output: 8                   | Program output: 67                 
Correct output: -95                 | Program output: -95                
Correct output: -48                 | Program output: 30                 
Correct output: -51                 | Program output: 8                  
Correct output: -72                 | Program output: 9                  
Correct output: -71                 | Program output: 47                 
Correct output: -94                 | Program output: 86                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -63                
Correct output: -67                 | Program output: -17                
Correct output: -95                 | Program output: -95                
Correct output: 3                   | Program output: 47                 
Correct output: -51                 | Program output: -3                 
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: 2                  
Correct output: -72                 | Program output: -17                
Correct output: -67                 | Program output: -32                
Correct output: -97                 | Program output: -97                
Correct output: -57                 | Program output: 87                 
Correct output: -86                 | Program output: -86                
Correct output: -43                 | Program output: -40                
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: -89                
Correct output: -81                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -85                 | Program output: -57                
Correct output: -100                | Program output: 49                 
Correct output: -70                 | Program output: -70                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -32                
Correct output: -84                 | Program output: 15                 
Correct output: -35                 | Program output: -35                
Correct output: -41                 | Program output: -17                
Correct output: -89                 | Program output: 53                 
Correct output: -61                 | Program output: 1                  
Correct output: -100                | Program output: 65                 
Correct output: -75                 | Program output: -48                
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: 2                  
Correct output: 27                  | Program output: 88                 
Correct output: -78                 | Program output: -78                
Correct output: -35                 | Program output: -34                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction tagged_559} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Lexicase best program: (in4 tagged_418 in2 exec_s_when_autoconstructing (boolean_not tagged_418) (integer_dup_times in1 integer_rot integer_yank tagged_559) (integer_dup_times integer_yank integer_max print_integer boolean_stackdepth boolean_empty))
Lexicase best errors: [0 0 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 21
Percent parens: 0.190
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction tagged_559} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Zero cases best program: (in4 tagged_418 in2 exec_s_when_autoconstructing (boolean_not tagged_418) (integer_dup_times in1 integer_rot integer_yank tagged_559) (integer_dup_times integer_yank integer_max print_integer boolean_stackdepth boolean_empty))
Zero cases best errors: [0 0 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 21
Percent parens: 0.190
--- Lexicase Population Statistics ---
Count of elite individuals by case: (577 872 919 55 162 54 413 233 557 55)
Population mean number of elite cases: 3.90
Count of perfect (error zero) individuals by case: (577 872 919 55 162 54 413 233 557 55)
Population mean number of perfect (error zero) cases: 3.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction tagged_559} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Best program: (in4 tagged_418 in2 exec_s_when_autoconstructing (boolean_not tagged_418) (integer_dup_times in1 integer_rot integer_yank tagged_559) (integer_dup_times integer_yank integer_max print_integer boolean_stackdepth boolean_empty))
Errors: [0 0 0 0 1 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 17
Size: 21
Percent parens: 0.190
--- Population Statistics ---
Average total errors in population: 6.103
Median total errors in population: 6
Error averages by case: (0.423 0.128 0.081 0.945 0.838 0.946 0.587 0.767 0.443 0.945)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.198
Average program size in population (points): 27.878
Average percent parens in population: 0.204
Minimum age in population: 66.9059435759118
Maximum age in population: 70.9606310759118
Average age in population: 69.3569084196618
Median age in population: 69.3278185759118
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 144
Genome diversity (% unique genomes):	 0.352
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 151
Syntactic diversity (% unique Push programs):	 0.334
Total error diversity:				 0.009
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.096
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 13028156
--- Timings ---
Current time: 1559582751686 milliseconds
Total Time:         108.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        83.5 seconds, 76.8%
Fitness Testing:     15.4 seconds, 14.1%
Report:               9.7 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Smallest problem report - generation 47
Test total error for best: 591
Test mean error for best: 0.59100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -24                
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: -3                 
Correct output: 40                  | Program output: 83                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: -62                
Correct output: -34                 | Program output: 73                 
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 38                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 76                 
Correct output: 45                  | Program output: 65                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 95                 
Correct output: 8                   | Program output: 32                 
Correct output: 37                  | Program output: 37                 
Correct output: 48                  | Program output: 48                 
Correct output: 13                  | Program output: 19                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 69                 
Correct output: 25                  | Program output: 66                 
Correct output: 19                  | Program output: 72                 
Correct output: 31                  | Program output: 31                 
Correct output: 35                  | Program output: 56                 
Correct output: 0                   | Program output: 12                 
Correct output: 7                   | Program output: 11                 
Correct output: 18                  | Program output: 33                 
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 94                 
Correct output: 9                   | Program output: 9                  
Correct output: -49                 | Program output: -49                
Correct output: -76                 | Program output: 5                  
Correct output: -91                 | Program output: -91                
Correct output: -76                 | Program output: -60                
Correct output: -95                 | Program output: -74                
Correct output: -64                 | Program output: 95                 
Correct output: -89                 | Program output: 77                 
Correct output: -90                 | Program output: 19                 
Correct output: -91                 | Program output: 88                 
Correct output: -56                 | Program output: -56                
Correct output: -21                 | Program output: 26                 
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: -96                
Correct output: -89                 | Program output: -13                
Correct output: -89                 | Program output: -34                
Correct output: 8                   | Program output: 8                  
Correct output: -95                 | Program output: -95                
Correct output: -48                 | Program output: 30                 
Correct output: -51                 | Program output: 8                  
Correct output: -72                 | Program output: -72                
Correct output: -71                 | Program output: -71                
Correct output: -94                 | Program output: 86                 
Correct output: -80                 | Program output: 16                 
Correct output: -63                 | Program output: -63                
Correct output: -67                 | Program output: -3                 
Correct output: -95                 | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -23                 | Program output: 44                 
Correct output: -89                 | Program output: 2                  
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: -97                
Correct output: -57                 | Program output: 87                 
Correct output: -86                 | Program output: 93                 
Correct output: -43                 | Program output: -40                
Correct output: -48                 | Program output: 56                 
Correct output: -89                 | Program output: -89                
Correct output: -81                 | Program output: -81                
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: 2                  
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: 49                 
Correct output: -70                 | Program output: -70                
Correct output: -82                 | Program output: 75                 
Correct output: -74                 | Program output: 53                 
Correct output: -100                | Program output: -32                
Correct output: -84                 | Program output: 15                 
Correct output: -35                 | Program output: -35                
Correct output: -41                 | Program output: -17                
Correct output: -89                 | Program output: 53                 
Correct output: -61                 | Program output: 1                  
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: 35                 
Correct output: -73                 | Program output: 49                 
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: -48                
Correct output: 27                  | Program output: 73                 
Correct output: -78                 | Program output: -4                 
Correct output: -35                 | Program output: -33                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Lexicase best program: (in4 tagged_418 in2 exec_s_when_autoconstructing (boolean_not tagged_418) (integer_dup_times in1 boolean_stackdepth exec_s_when_autoconstructing (boolean_not tagged_418) (in2 in3 boolean_not integer_dup_times integer_yank print_integer boolean_stackdepth boolean_empty) ()) ())
Lexicase best errors: [0 1 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 27
Percent parens: 0.259
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Zero cases best program: (in4 tagged_418 in2 exec_s_when_autoconstructing (boolean_not tagged_418) (integer_dup_times in1 boolean_stackdepth exec_s_when_autoconstructing (boolean_not tagged_418) (in2 in3 boolean_not integer_dup_times integer_yank print_integer boolean_stackdepth boolean_empty) ()) ())
Zero cases best errors: [0 1 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 27
Percent parens: 0.259
--- Lexicase Population Statistics ---
Count of elite individuals by case: (297 278 136 894 892 756 379 1 1 948)
Population mean number of elite cases: 4.58
Count of perfect (error zero) individuals by case: (297 278 136 894 892 756 379 1 1 948)
Population mean number of perfect (error zero) cases: 4.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Best program: (in4 tagged_418 in2 exec_s_when_autoconstructing (boolean_not tagged_418) (integer_dup_times in1 boolean_stackdepth exec_s_when_autoconstructing (boolean_not tagged_418) (in2 in3 boolean_not integer_dup_times integer_yank print_integer boolean_stackdepth boolean_empty) ()) ())
Errors: [0 1 0 0 0 0 0 1 1 0]
Total: 3
Mean: 0.3
Genome size: 20
Size: 27
Percent parens: 0.259
--- Population Statistics ---
Average total errors in population: 5.418
Median total errors in population: 6
Error averages by case: (0.703 0.722 0.864 0.106 0.108 0.244 0.621 0.999 0.999 0.052)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 18.184
Average program size in population (points): 23.179
Average percent parens in population: 0.211
Minimum age in population: 69.4684435759118
Maximum age in population: 72.9606310759118
Average age in population: 71.30192990403681
Median age in population: 71.2975451384118
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 360
Genome diversity (% unique genomes):	 0.26
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 384
Syntactic diversity (% unique Push programs):	 0.234
Total error diversity:				 0.008
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.072
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 13212485
--- Timings ---
Current time: 1559582754030 milliseconds
Total Time:         111.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        85.3 seconds, 76.9%
Fitness Testing:     15.6 seconds, 14.1%
Report:               9.9 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Smallest problem report - generation 48
Test total error for best: 503
Test mean error for best: 0.50300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -24                
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: -3                 
Correct output: 40                  | Program output: 40                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: -62                
Correct output: -34                 | Program output: 73                 
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 38                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 76                 
Correct output: 45                  | Program output: 60                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 95                 
Correct output: 8                   | Program output: 8                  
Correct output: 37                  | Program output: 37                 
Correct output: 48                  | Program output: 48                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 25                 
Correct output: 25                  | Program output: 66                 
Correct output: 19                  | Program output: 44                 
Correct output: 31                  | Program output: 31                 
Correct output: 35                  | Program output: 56                 
Correct output: 0                   | Program output: 0                  
Correct output: 7                   | Program output: 11                 
Correct output: 18                  | Program output: 33                 
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 91                 
Correct output: 9                   | Program output: 9                  
Correct output: -49                 | Program output: -49                
Correct output: -76                 | Program output: -56                
Correct output: -91                 | Program output: -41                
Correct output: -76                 | Program output: -60                
Correct output: -95                 | Program output: -95                
Correct output: -64                 | Program output: 95                 
Correct output: -89                 | Program output: -1                 
Correct output: -90                 | Program output: 19                 
Correct output: -91                 | Program output: 88                 
Correct output: -56                 | Program output: -56                
Correct output: -21                 | Program output: 26                 
Correct output: -82                 | Program output: -38                
Correct output: -96                 | Program output: -96                
Correct output: -89                 | Program output: -13                
Correct output: -89                 | Program output: -89                
Correct output: 8                   | Program output: 8                  
Correct output: -95                 | Program output: -95                
Correct output: -48                 | Program output: 30                 
Correct output: -51                 | Program output: 8                  
Correct output: -72                 | Program output: -72                
Correct output: -71                 | Program output: -71                
Correct output: -94                 | Program output: 86                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -63                
Correct output: -67                 | Program output: -17                
Correct output: -95                 | Program output: 30                 
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -3                 
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: 2                  
Correct output: -72                 | Program output: -17                
Correct output: -67                 | Program output: -32                
Correct output: -97                 | Program output: -97                
Correct output: -57                 | Program output: 87                 
Correct output: -86                 | Program output: 22                 
Correct output: -43                 | Program output: -40                
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: -89                
Correct output: -81                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -85                 | Program output: -57                
Correct output: -100                | Program output: 49                 
Correct output: -70                 | Program output: -70                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: 9                  
Correct output: -100                | Program output: -32                
Correct output: -84                 | Program output: 15                 
Correct output: -35                 | Program output: -35                
Correct output: -41                 | Program output: -17                
Correct output: -89                 | Program output: 53                 
Correct output: -61                 | Program output: 1                  
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -48                
Correct output: -73                 | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: -48                
Correct output: 27                  | Program output: 73                 
Correct output: -78                 | Program output: -78                
Correct output: -35                 | Program output: -34                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Lexicase best program: (in4 tagged_418 in4 tagged_418 in2 exec_s_when_autoconstructing (boolean_not tagged_418) (integer_dup_times in1 boolean_stackdepth exec_s_when_autoconstructing (boolean_not tagged_418) (in2 in3 boolean_not integer_dup_times integer_yank print_integer boolean_stackdepth boolean_empty) ()) ())
Lexicase best errors: [1 0 0 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 29
Percent parens: 0.241
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Zero cases best program: (in4 tagged_418 in4 tagged_418 in2 exec_s_when_autoconstructing (boolean_not tagged_418) (integer_dup_times in1 boolean_stackdepth exec_s_when_autoconstructing (boolean_not tagged_418) (in2 in3 boolean_not integer_dup_times integer_yank print_integer boolean_stackdepth boolean_empty) ()) ())
Zero cases best errors: [1 0 0 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 29
Percent parens: 0.241
--- Lexicase Population Statistics ---
Count of elite individuals by case: (8 715 634 219 610 6 219 633 951 716)
Population mean number of elite cases: 4.71
Count of perfect (error zero) individuals by case: (8 715 634 219 610 6 219 633 951 716)
Population mean number of perfect (error zero) cases: 4.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction tagged_559} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Best program: (in4 tagged_418 in2 exec_s_when_autoconstructing (boolean_not tagged_418) (integer_dup_times in1 integer_rot integer_yank tagged_559) (exec_s_when_autoconstructing (boolean_not tagged_418) (in2 in3 integer_yankdup integer_dup_times integer_yank print_integer boolean_stackdepth boolean_empty) ()))
Errors: [1 0 0 1 0 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 22
Size: 29
Percent parens: 0.241
--- Population Statistics ---
Average total errors in population: 5.289
Median total errors in population: 4
Error averages by case: (0.992 0.285 0.366 0.781 0.39 0.994 0.781 0.367 0.049 0.284)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.83
Average program size in population (points): 26.331
Average percent parens in population: 0.244
Minimum age in population: 70.9371935759118
Maximum age in population: 74.2008654509118
Average age in population: 72.76958127122431
Median age in population: 72.8200060759118
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 170
Genome diversity (% unique genomes):	 0.299
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 173
Syntactic diversity (% unique Push programs):	 0.272
Total error diversity:				 0.007
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 13414659
--- Timings ---
Current time: 1559582756370 milliseconds
Total Time:         113.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        87.2 seconds, 77.0%
Fitness Testing:     15.9 seconds, 14.0%
Report:              10.1 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Smallest problem report - generation 49
Test total error for best: 529
Test mean error for best: 0.52900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -24                
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: -3                 
Correct output: 40                  | Program output: 83                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: -62                
Correct output: -34                 | Program output: 73                 
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 38                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 43                 
Correct output: 45                  | Program output: 60                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 37                 
Correct output: 8                   | Program output: 32                 
Correct output: 37                  | Program output: 91                 
Correct output: 48                  | Program output: 48                 
Correct output: 13                  | Program output: 19                 
Correct output: 20                  | Program output: 20                 
Correct output: 25                  | Program output: 47                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 41                 
Correct output: 31                  | Program output: 31                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 12                 
Correct output: 7                   | Program output: 18                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 91                 
Correct output: 9                   | Program output: 45                 
Correct output: -49                 | Program output: -49                
Correct output: -76                 | Program output: 5                  
Correct output: -91                 | Program output: -91                
Correct output: -76                 | Program output: -60                
Correct output: -95                 | Program output: -74                
Correct output: -64                 | Program output: 95                 
Correct output: -89                 | Program output: 77                 
Correct output: -90                 | Program output: 19                 
Correct output: -91                 | Program output: 88                 
Correct output: -56                 | Program output: -11                
Correct output: -21                 | Program output: -21                
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: -96                
Correct output: -89                 | Program output: -13                
Correct output: -89                 | Program output: -34                
Correct output: 8                   | Program output: 8                  
Correct output: -95                 | Program output: -95                
Correct output: -48                 | Program output: 30                 
Correct output: -51                 | Program output: 8                  
Correct output: -72                 | Program output: -72                
Correct output: -71                 | Program output: -71                
Correct output: -94                 | Program output: 86                 
Correct output: -80                 | Program output: -57                
Correct output: -63                 | Program output: -38                
Correct output: -67                 | Program output: -3                 
Correct output: -95                 | Program output: -95                
Correct output: 3                   | Program output: 47                 
Correct output: -51                 | Program output: -51                
Correct output: -23                 | Program output: 1                  
Correct output: -89                 | Program output: 2                  
Correct output: -72                 | Program output: -17                
Correct output: -67                 | Program output: -32                
Correct output: -97                 | Program output: -97                
Correct output: -57                 | Program output: 87                 
Correct output: -86                 | Program output: -86                
Correct output: -43                 | Program output: -40                
Correct output: -48                 | Program output: -41                
Correct output: -89                 | Program output: -89                
Correct output: -81                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -85                 | Program output: -57                
Correct output: -100                | Program output: 49                 
Correct output: -70                 | Program output: -70                
Correct output: -82                 | Program output: 75                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: 15                 
Correct output: -35                 | Program output: -35                
Correct output: -41                 | Program output: -17                
Correct output: -89                 | Program output: 53                 
Correct output: -61                 | Program output: -61                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: 35                 
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: 19                 
Correct output: -48                 | Program output: -48                
Correct output: 27                  | Program output: 75                 
Correct output: -78                 | Program output: -4                 
Correct output: -35                 | Program output: -33                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Lexicase best program: (exec_s_when_autoconstructing () (tagged_418) (integer_rot boolean_frominteger boolean_not tagged_418) integer_dup_times in1 boolean_stackdepth exec_s_when_autoconstructing (boolean_not tagged_418) (in2 in3 integer_yankdup integer_dup_times integer_yank print_integer boolean_stackdepth boolean_empty) ())
Lexicase best errors: [0 1 0 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 27
Percent parens: 0.259
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Zero cases best program: (exec_s_when_autoconstructing () (tagged_418) (integer_rot boolean_frominteger boolean_not tagged_418) integer_dup_times in1 boolean_stackdepth exec_s_when_autoconstructing (boolean_not tagged_418) (in2 in3 integer_yankdup integer_dup_times integer_yank print_integer boolean_stackdepth boolean_empty) ())
Zero cases best errors: [0 1 0 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 27
Percent parens: 0.259
--- Lexicase Population Statistics ---
Count of elite individuals by case: (733 313 424 292 416 315 524 734 314 734)
Population mean number of elite cases: 4.80
Count of perfect (error zero) individuals by case: (733 313 424 292 416 315 524 734 314 734)
Population mean number of perfect (error zero) cases: 4.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty})
Best program: (exec_s_when_autoconstructing () (tagged_418) (integer_rot boolean_frominteger boolean_not tagged_418) integer_dup_times in1 boolean_stackdepth exec_s_when_autoconstructing (boolean_not tagged_418) (in2 in3 integer_yankdup integer_dup_times integer_yank print_integer boolean_stackdepth boolean_empty) ())
Errors: [0 1 0 0 0 1 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 20
Size: 27
Percent parens: 0.259
--- Population Statistics ---
Average total errors in population: 5.201
Median total errors in population: 5
Error averages by case: (0.267 0.687 0.576 0.708 0.584 0.685 0.476 0.266 0.686 0.266)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.478
Average program size in population (points): 26.098
Average percent parens in population: 0.252
Minimum age in population: 72.5836779509118
Maximum age in population: 75.7399279509118
Average age in population: 74.48411838059931
Median age in population: 74.5055529509118
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 244
Genome diversity (% unique genomes):	 0.297
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 248
Syntactic diversity (% unique Push programs):	 0.275
Total error diversity:				 0.008
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 13613356
--- Timings ---
Current time: 1559582758647 milliseconds
Total Time:         115.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        89.0 seconds, 77.0%
Fitness Testing:     16.2 seconds, 14.0%
Report:              10.3 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Smallest problem report - generation 50
Test total error for best: 406
Test mean error for best: 0.40600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -24                
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: -3                 
Correct output: 40                  | Program output: 83                 
Correct output: -90                 | Program output: -80                
Correct output: -62                 | Program output: 85                 
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 38                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 43                 
Correct output: 45                  | Program output: 45                 
Correct output: 4                   | Program output: 47                 
Correct output: 37                  | Program output: 37                 
Correct output: 8                   | Program output: 65                 
Correct output: 37                  | Program output: 41                 
Correct output: 48                  | Program output: 62                 
Correct output: 13                  | Program output: 26                 
Correct output: 20                  | Program output: 71                 
Correct output: 25                  | Program output: 47                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 31                  | Program output: 45                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 15                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 32                 
Correct output: -49                 | Program output: -49                
Correct output: -76                 | Program output: -76                
Correct output: -91                 | Program output: -91                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -74                
Correct output: -64                 | Program output: -64                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: -11                
Correct output: -21                 | Program output: -21                
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: 42                 
Correct output: -89                 | Program output: 9                  
Correct output: -89                 | Program output: -34                
Correct output: 8                   | Program output: 60                 
Correct output: -95                 | Program output: -95                
Correct output: -48                 | Program output: -17                
Correct output: -51                 | Program output: -49                
Correct output: -72                 | Program output: 9                  
Correct output: -71                 | Program output: 5                  
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: -57                
Correct output: -63                 | Program output: -38                
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -95                
Correct output: 3                   | Program output: 47                 
Correct output: -51                 | Program output: -51                
Correct output: -23                 | Program output: 1                  
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: -17                
Correct output: -67                 | Program output: -32                
Correct output: -97                 | Program output: -97                
Correct output: -57                 | Program output: -29                
Correct output: -86                 | Program output: -86                
Correct output: -43                 | Program output: -40                
Correct output: -48                 | Program output: -41                
Correct output: -89                 | Program output: -89                
Correct output: -81                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -85                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -70                 | Program output: -70                
Correct output: -82                 | Program output: -60                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -35                 | Program output: -35                
Correct output: -41                 | Program output: -41                
Correct output: -89                 | Program output: -4                 
Correct output: -61                 | Program output: -61                
Correct output: -100                | Program output: 22                 
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: 8                  
Correct output: -48                 | Program output: -48                
Correct output: 27                  | Program output: 27                 
Correct output: -78                 | Program output: -46                
Correct output: -35                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_sub})
Lexicase best program: (in4 tagged_418 in2 exec_s_when_autoconstructing (boolean_not tagged_418) (integer_dup_times in1 boolean_stackdepth exec_s_when_autoconstructing (boolean_not tagged_418) (boolean_frominteger in3 integer_min print_integer boolean_stackdepth integer_sub) ()) ())
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 25
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_sub})
Zero cases best program: (in4 tagged_418 in2 exec_s_when_autoconstructing (boolean_not tagged_418) (integer_dup_times in1 boolean_stackdepth exec_s_when_autoconstructing (boolean_not tagged_418) (boolean_frominteger in3 integer_min print_integer boolean_stackdepth integer_sub) ()) ())
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 25
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (652 489 91 704 365 472 433 365 434 370)
Population mean number of elite cases: 4.38
Count of perfect (error zero) individuals by case: (652 489 91 704 365 472 433 365 434 370)
Population mean number of perfect (error zero) cases: 4.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_sub})
Best program: (in4 tagged_418 in2 exec_s_when_autoconstructing (boolean_not tagged_418) (integer_dup_times in1 boolean_stackdepth exec_s_when_autoconstructing (boolean_not tagged_418) (boolean_frominteger in3 integer_min print_integer boolean_stackdepth integer_sub) ()) ())
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 18
Size: 25
Percent parens: 0.280
--- Population Statistics ---
Average total errors in population: 5.625
Median total errors in population: 6
Error averages by case: (0.348 0.511 0.909 0.296 0.635 0.528 0.567 0.635 0.566 0.63)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.561
Average program size in population (points): 27.926
Average percent parens in population: 0.264
Minimum age in population: 73.8317248259118
Maximum age in population: 77.3007189665368
Average age in population: 75.90596579270868
Median age in population: 75.8788439665368
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 185
Genome diversity (% unique genomes):	 0.34
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 192
Syntactic diversity (% unique Push programs):	 0.321
Total error diversity:				 0.009
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.081
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 13826007
--- Timings ---
Current time: 1559582760912 milliseconds
Total Time:         117.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        90.9 seconds, 77.1%
Fitness Testing:     16.4 seconds, 13.9%
Report:              10.5 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Smallest problem report - generation 51
Test total error for best: 314
Test mean error for best: 0.31400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -24                
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: -3                 
Correct output: 40                  | Program output: 40                 
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: -62                
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: 90                 
Correct output: 38                  | Program output: 38                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 43                 
Correct output: 45                  | Program output: 65                 
Correct output: 4                   | Program output: 54                 
Correct output: 37                  | Program output: 37                 
Correct output: 8                   | Program output: 8                  
Correct output: 37                  | Program output: 37                 
Correct output: 48                  | Program output: 62                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 71                 
Correct output: 25                  | Program output: 25                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 41                 
Correct output: 31                  | Program output: 45                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 7                   | Program output: 11                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 15                 
Correct output: 36                  | Program output: 91                 
Correct output: 9                   | Program output: 9                  
Correct output: -49                 | Program output: -49                
Correct output: -76                 | Program output: -56                
Correct output: -91                 | Program output: -91                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -95                
Correct output: -64                 | Program output: 68                 
Correct output: -89                 | Program output: -1                 
Correct output: -90                 | Program output: 19                 
Correct output: -91                 | Program output: -19                
Correct output: -56                 | Program output: -56                
Correct output: -21                 | Program output: -21                
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: -96                
Correct output: -89                 | Program output: -13                
Correct output: -89                 | Program output: -89                
Correct output: 8                   | Program output: 67                 
Correct output: -95                 | Program output: -95                
Correct output: -48                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -72                 | Program output: -72                
Correct output: -71                 | Program output: -71                
Correct output: -94                 | Program output: -54                
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -63                
Correct output: -67                 | Program output: -17                
Correct output: -95                 | Program output: -95                
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: 2                  
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: -97                
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -86                
Correct output: -43                 | Program output: -43                
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: -89                
Correct output: -81                 | Program output: -81                
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: 31                 
Correct output: -70                 | Program output: -70                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: 15                 
Correct output: -35                 | Program output: -35                
Correct output: -41                 | Program output: -17                
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: -61                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -48                
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: -48                
Correct output: 27                  | Program output: 73                 
Correct output: -78                 | Program output: -78                
Correct output: -35                 | Program output: -34                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_sub})
Lexicase best program: (in4 tagged_418 in2 in4 tagged_418 in2 exec_s_when_autoconstructing (boolean_not tagged_418) (integer_dup_times in1 boolean_stackdepth exec_s_when_autoconstructing (boolean_not tagged_418) (boolean_frominteger boolean_and integer_min print_integer boolean_stackdepth integer_sub) ()) ())
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 28
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_sub})
Zero cases best program: (in4 tagged_418 in2 in4 tagged_418 in2 exec_s_when_autoconstructing (boolean_not tagged_418) (integer_dup_times in1 boolean_stackdepth exec_s_when_autoconstructing (boolean_not tagged_418) (boolean_frominteger boolean_and integer_min print_integer boolean_stackdepth integer_sub) ()) ())
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 28
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (915 852 723 723 959 299 34 34 280 959)
Population mean number of elite cases: 5.78
Count of perfect (error zero) individuals by case: (915 852 723 723 959 299 34 34 280 959)
Population mean number of perfect (error zero) cases: 5.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_sub})
Best program: (in4 tagged_418 in2 in4 tagged_418 in2 exec_s_when_autoconstructing (boolean_not tagged_418) (integer_dup_times in1 boolean_stackdepth exec_s_when_autoconstructing (boolean_not tagged_418) (boolean_frominteger boolean_and integer_min print_integer boolean_stackdepth integer_sub) ()) ())
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 21
Size: 28
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 4.222
Median total errors in population: 4
Error averages by case: (0.085 0.148 0.277 0.277 0.041 0.701 0.966 0.966 0.72 0.041)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 18.063
Average program size in population (points): 24.958
Average percent parens in population: 0.274
Minimum age in population: 75.9694201384118
Maximum age in population: 78.9307238493493
Average age in population: 77.77067270188837
Median age in population: 77.8400256071618
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 425
Genome diversity (% unique genomes):	 0.292
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 448
Syntactic diversity (% unique Push programs):	 0.273
Total error diversity:				 0.01
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 14010668
--- Timings ---
Current time: 1559582763252 milliseconds
Total Time:         120.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        92.8 seconds, 77.2%
Fitness Testing:     16.7 seconds, 13.9%
Report:              10.6 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Smallest problem report - generation 52
Test total error for best: 101
Test mean error for best: 0.10100
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 1
Test Case   33 | Error: 0
Test Case   34 | Error: 1
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 1
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -24                
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: -3                 
Correct output: 40                  | Program output: 40                 
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: -62                
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 38                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 43                 
Correct output: 45                  | Program output: 45                 
Correct output: 4                   | Program output: 47                 
Correct output: 37                  | Program output: 37                 
Correct output: 8                   | Program output: 8                  
Correct output: 37                  | Program output: 37                 
Correct output: 48                  | Program output: 62                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 71                 
Correct output: 25                  | Program output: 25                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 31                  | Program output: 45                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 15                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: -49                 | Program output: -49                
Correct output: -76                 | Program output: -76                
Correct output: -91                 | Program output: -91                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -95                
Correct output: -64                 | Program output: -64                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: -56                
Correct output: -21                 | Program output: -21                
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: -96                
Correct output: -89                 | Program output: -13                
Correct output: -89                 | Program output: -89                
Correct output: 8                   | Program output: 60                 
Correct output: -95                 | Program output: -95                
Correct output: -48                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -72                 | Program output: -72                
Correct output: -71                 | Program output: -71                
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -63                
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -95                
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: -97                
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -86                
Correct output: -43                 | Program output: -43                
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: -89                
Correct output: -81                 | Program output: -81                
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -100               
Correct output: -70                 | Program output: -70                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -35                 | Program output: -35                
Correct output: -41                 | Program output: -41                
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: -61                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: -48                
Correct output: 27                  | Program output: 27                 
Correct output: -78                 | Program output: -78                
Correct output: -35                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_sub})
Lexicase best program: (in4 tagged_418 in2 in4 tagged_418 in2 exec_s_when_autoconstructing (boolean_not tagged_418) (integer_dup_times in1 boolean_and integer_min in3 integer_min print_integer boolean_stackdepth integer_sub) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 22
Percent parens: 0.182
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_sub})
Zero cases best program: (in4 tagged_418 in2 in4 tagged_418 in2 exec_s_when_autoconstructing (boolean_not tagged_418) (integer_dup_times in1 boolean_and integer_min in3 integer_min print_integer boolean_stackdepth integer_sub) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 22
Percent parens: 0.182
--- Lexicase Population Statistics ---
Count of elite individuals by case: (729 506 747 751 587 590 594 729 757 587)
Population mean number of elite cases: 6.58
Count of perfect (error zero) individuals by case: (729 506 747 751 587 590 594 729 757 587)
Population mean number of perfect (error zero) cases: 6.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 1, :instruction tagged_418} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction tagged_418} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_sub})
Best program: (in4 tagged_418 in2 in4 tagged_418 in2 exec_s_when_autoconstructing (boolean_not tagged_418) (integer_dup_times in1 boolean_and integer_min in3 integer_min print_integer boolean_stackdepth integer_sub) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 18
Size: 22
Percent parens: 0.182
--- Population Statistics ---
Average total errors in population: 3.423
Median total errors in population: 4
Error averages by case: (0.271 0.494 0.253 0.249 0.413 0.41 0.406 0.271 0.243 0.413)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.772
Average program size in population (points): 29.29
Average percent parens in population: 0.255
Minimum age in population: 78.6880480680993
Maximum age in population: 80.8716418180993
Average age in population: 79.75132547288446
Median age in population: 79.8716418180993
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 320
Genome diversity (% unique genomes):	 0.301
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 336
Syntactic diversity (% unique Push programs):	 0.28
Total error diversity:				 0.011
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 14232648
--- Timings ---
Current time: 1559582765568 milliseconds
Total Time:         122.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        94.7 seconds, 77.3%
Fitness Testing:     16.9 seconds, 13.8%
Report:              10.8 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 52
Successful program: (in4 tagged_418 in2 in4 tagged_418 in2 exec_s_when_autoconstructing (boolean_not tagged_418) (integer_dup_times in1 boolean_and integer_min in3 integer_min print_integer boolean_stackdepth integer_sub) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 22


Auto-simplifying with starting size: 22
step: 0
program: (in4 tagged_418 in2 in4 tagged_418 in2 exec_s_when_autoconstructing (boolean_not tagged_418) (integer_dup_times in1 boolean_and integer_min in3 integer_min print_integer boolean_stackdepth integer_sub) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 22

step: 500
program: (in4 tagged_418 in2 in4 tagged_418 in2 exec_s_when_autoconstructing (boolean_not tagged_418) (integer_dup_times in1 boolean_and integer_min in3 integer_min print_integer boolean_stackdepth integer_sub) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 22

step: 1000
program: (in4 tagged_418 in2 in4 tagged_418 in2 exec_s_when_autoconstructing (boolean_not tagged_418) (integer_dup_times in1 boolean_and integer_min in3 integer_min print_integer boolean_stackdepth integer_sub) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 22

step: 1500
program: (in4 tagged_418 in2 in4 tagged_418 in2 exec_s_when_autoconstructing (boolean_not tagged_418) (integer_dup_times in1 boolean_and integer_min in3 integer_min print_integer boolean_stackdepth integer_sub) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 22

step: 2000
program: (in4 tagged_418 in2 in4 tagged_418 in2 exec_s_when_autoconstructing (boolean_not tagged_418) (integer_dup_times in1 boolean_and integer_min in3 integer_min print_integer boolean_stackdepth integer_sub) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 22

step: 2500
program: (in4 tagged_418 in2 in4 tagged_418 in2 exec_s_when_autoconstructing (boolean_not tagged_418) (integer_dup_times in1 boolean_and integer_min in3 integer_min print_integer boolean_stackdepth integer_sub) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 22

step: 3000
program: (in4 tagged_418 in2 in4 tagged_418 in2 exec_s_when_autoconstructing (boolean_not tagged_418) (integer_dup_times in1 boolean_and integer_min in3 integer_min print_integer boolean_stackdepth integer_sub) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 22

step: 3500
program: (in4 tagged_418 in2 in4 tagged_418 in2 exec_s_when_autoconstructing (boolean_not tagged_418) (integer_dup_times in1 boolean_and integer_min in3 integer_min print_integer boolean_stackdepth integer_sub) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 22

step: 4000
program: (in4 tagged_418 in2 in4 tagged_418 in2 exec_s_when_autoconstructing (boolean_not tagged_418) (integer_dup_times in1 boolean_and integer_min in3 integer_min print_integer boolean_stackdepth integer_sub) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 22

step: 4500
program: (in4 tagged_418 in2 in4 tagged_418 in2 exec_s_when_autoconstructing (boolean_not tagged_418) (integer_dup_times in1 boolean_and integer_min in3 integer_min print_integer boolean_stackdepth integer_sub) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 22

step: 5000
program: (in4 tagged_418 in2 in4 tagged_418 in2 exec_s_when_autoconstructing (boolean_not tagged_418) (integer_dup_times in1 boolean_and integer_min in3 integer_min print_integer boolean_stackdepth integer_sub) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 22

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 52
Test total error for best: 101
Test mean error for best: 0.10100
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 1
Test Case   33 | Error: 0
Test Case   34 | Error: 1
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 1
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 75                  | Program output: 75                 
Correct output: -24                 | Program output: -24                
Correct output: -80                 | Program output: -80                
Correct output: -3                  | Program output: -3                 
Correct output: 40                  | Program output: 40                 
Correct output: -90                 | Program output: -90                
Correct output: -62                 | Program output: -62                
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -84                
Correct output: 38                  | Program output: 38                 
Correct output: -9                  | Program output: -9                 
Correct output: -97                 | Program output: -97                
Correct output: 93                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: 73                  | Program output: 73                 
Correct output: 43                  | Program output: 43                 
Correct output: 45                  | Program output: 45                 
Correct output: 4                   | Program output: 47                 
Correct output: 37                  | Program output: 37                 
Correct output: 8                   | Program output: 8                  
Correct output: 37                  | Program output: 37                 
Correct output: 48                  | Program output: 62                 
Correct output: 13                  | Program output: 13                 
Correct output: 20                  | Program output: 71                 
Correct output: 25                  | Program output: 25                 
Correct output: 25                  | Program output: 25                 
Correct output: 19                  | Program output: 19                 
Correct output: 31                  | Program output: 45                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 7                   | Program output: 7                  
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 15                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: -49                 | Program output: -49                
Correct output: -76                 | Program output: -76                
Correct output: -91                 | Program output: -91                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -95                
Correct output: -64                 | Program output: -64                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: -56                
Correct output: -21                 | Program output: -21                
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: -96                
Correct output: -89                 | Program output: -13                
Correct output: -89                 | Program output: -89                
Correct output: 8                   | Program output: 60                 
Correct output: -95                 | Program output: -95                
Correct output: -48                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -72                 | Program output: -72                
Correct output: -71                 | Program output: -71                
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -63                
Correct output: -67                 | Program output: -67                
Correct output: -95                 | Program output: -95                
Correct output: 3                   | Program output: 3                  
Correct output: -51                 | Program output: -51                
Correct output: -23                 | Program output: -23                
Correct output: -89                 | Program output: -89                
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -97                 | Program output: -97                
Correct output: -57                 | Program output: -57                
Correct output: -86                 | Program output: -86                
Correct output: -43                 | Program output: -43                
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: -89                
Correct output: -81                 | Program output: -81                
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -100               
Correct output: -70                 | Program output: -70                
Correct output: -82                 | Program output: -82                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -35                 | Program output: -35                
Correct output: -41                 | Program output: -41                
Correct output: -89                 | Program output: -89                
Correct output: -61                 | Program output: -61                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: -48                
Correct output: 27                  | Program output: 27                 
Correct output: -78                 | Program output: -78                
Correct output: -35                 | Program output: -35                
;;******************************
