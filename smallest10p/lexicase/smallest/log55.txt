Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[100 -8 100 100] -8] [[58 58 74 58] 58] [[19 19 73 19] 19] [[-66 -37 -37 -37] -66] [[94 94 -68 94] -68] [[69 -99 69 69] -99] [[-86 -6 -86 -86] -86] [[-35 0 -35 -35] -35] [[-66 -66 -66 -66] -66] [[80 -60 -60 -60] -60] [(86 86 86 86) 86] [(90 90 90 90) 90] [(-45 -45 -45 -45) -45] [(-34 -34 -34 -34) -34] [(4 4 4 4) 4] [(27 39 56 39) 27] [(75 17 62 30) 17] [(85 35 57 49) 35] [(52 30 73 65) 30] [(21 55 81 24) 21] [(54 90 99 87) 54] [(73 74 28 17) 17] [(68 59 44 62) 44] [(51 80 45 83) 45] [(8 28 63 76) 8] [(40 46 90 30) 30] [(14 73 45 19) 14] [(53 28 40 50) 28] [(3 70 10 16) 3] [(62 74 95 60) 60] [(1 6 77 68) 1] [(80 1 77 17) 1] [(52 43 32 90) 32] [(66 94 69 0) 0] [(87 90 3 19) 3] [(-6 56 -71 -96) -96] [(19 -57 47 4) -57] [(79 41 93 58) 41] [(-93 50 34 63) -93] [(44 38 1 -6) -6] [(88 -4 -29 -39) -39] [(96 22 56 12) 12] [(-68 -43 89 -28) -68] [(41 86 -82 -91) -91] [(19 21 34 -89) -89] [(-38 98 2 46) -38] [(-52 58 41 81) -52] [(-12 26 97 96) -12] [(16 64 -95 74) -95] [(-12 60 82 98) -12] [(26 47 -42 -19) -42] [(73 -16 50 93) -16] [(49 -75 -73 71) -75] [(9 -43 -71 20) -71] [(40 -46 89 -56) -56] [(54 18 -33 35) -33] [(-4 -32 86 -60) -60] [(-9 -66 -12 79) -66] [(-29 -15 86 -50) -50] [(35 93 20 58) 20] [(-67 29 97 -14) -67] [(-24 78 -4 67) -24] [(66 91 -82 38) -82] [(85 56 78 62) 56] [(92 17 -55 -99) -99] [(27 37 3 -3) -3] [(36 37 86 -77) -77] [(-85 -45 94 -47) -85] [(68 -10 29 44) -10] [(-63 24 17 92) -63] [(-57 -41 -82 -71) -82] [(19 28 -15 -26) -26] [(-64 37 -8 -60) -64] [(-46 -35 65 -3) -46] [(65 -77 100 -16) -77] [(19 -76 -63 23) -76] [(-85 38 -36 -40) -85] [(-46 97 -47 66) -47] [(-49 -76 -80 69) -80] [(-59 -72 -84 -93) -93] [(-88 -82 -52 -97) -97] [(-56 -61 -19 22) -61] [(77 85 72 29) 29] [(73 66 -27 46) -27] [(-58 24 78 -68) -68] [(-98 31 11 -29) -98] [(83 19 23 80) 19] [(31 -28 21 41) -28] [(-61 -22 5 12) -61] [(50 -73 -58 29) -73] [(-36 70 56 -76) -76] [(3 -52 -88 -39) -88] [(98 4 -69 66) -69] [(53 67 3 36) 3] [(-87 37 -23 49) -87])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[100 -8 100 100] -8]
Train Case:   6 | Input/Output: [[58 58 74 58] 58]
Train Case:   7 | Input/Output: [[19 19 73 19] 19]
Train Case:   8 | Input/Output: [[-66 -37 -37 -37] -66]
Train Case:   9 | Input/Output: [[94 94 -68 94] -68]
Train Case:  10 | Input/Output: [[69 -99 69 69] -99]
Train Case:  11 | Input/Output: [[-86 -6 -86 -86] -86]
Train Case:  12 | Input/Output: [[-35 0 -35 -35] -35]
Train Case:  13 | Input/Output: [[-66 -66 -66 -66] -66]
Train Case:  14 | Input/Output: [[80 -60 -60 -60] -60]
Train Case:  15 | Input/Output: [(86 86 86 86) 86]
Train Case:  16 | Input/Output: [(90 90 90 90) 90]
Train Case:  17 | Input/Output: [(-45 -45 -45 -45) -45]
Train Case:  18 | Input/Output: [(-34 -34 -34 -34) -34]
Train Case:  19 | Input/Output: [(4 4 4 4) 4]
Train Case:  20 | Input/Output: [(27 39 56 39) 27]
Train Case:  21 | Input/Output: [(75 17 62 30) 17]
Train Case:  22 | Input/Output: [(85 35 57 49) 35]
Train Case:  23 | Input/Output: [(52 30 73 65) 30]
Train Case:  24 | Input/Output: [(21 55 81 24) 21]
Train Case:  25 | Input/Output: [(54 90 99 87) 54]
Train Case:  26 | Input/Output: [(73 74 28 17) 17]
Train Case:  27 | Input/Output: [(68 59 44 62) 44]
Train Case:  28 | Input/Output: [(51 80 45 83) 45]
Train Case:  29 | Input/Output: [(8 28 63 76) 8]
Train Case:  30 | Input/Output: [(40 46 90 30) 30]
Train Case:  31 | Input/Output: [(14 73 45 19) 14]
Train Case:  32 | Input/Output: [(53 28 40 50) 28]
Train Case:  33 | Input/Output: [(3 70 10 16) 3]
Train Case:  34 | Input/Output: [(62 74 95 60) 60]
Train Case:  35 | Input/Output: [(1 6 77 68) 1]
Train Case:  36 | Input/Output: [(80 1 77 17) 1]
Train Case:  37 | Input/Output: [(52 43 32 90) 32]
Train Case:  38 | Input/Output: [(66 94 69 0) 0]
Train Case:  39 | Input/Output: [(87 90 3 19) 3]
Train Case:  40 | Input/Output: [(-6 56 -71 -96) -96]
Train Case:  41 | Input/Output: [(19 -57 47 4) -57]
Train Case:  42 | Input/Output: [(79 41 93 58) 41]
Train Case:  43 | Input/Output: [(-93 50 34 63) -93]
Train Case:  44 | Input/Output: [(44 38 1 -6) -6]
Train Case:  45 | Input/Output: [(88 -4 -29 -39) -39]
Train Case:  46 | Input/Output: [(96 22 56 12) 12]
Train Case:  47 | Input/Output: [(-68 -43 89 -28) -68]
Train Case:  48 | Input/Output: [(41 86 -82 -91) -91]
Train Case:  49 | Input/Output: [(19 21 34 -89) -89]
Train Case:  50 | Input/Output: [(-38 98 2 46) -38]
Train Case:  51 | Input/Output: [(-52 58 41 81) -52]
Train Case:  52 | Input/Output: [(-12 26 97 96) -12]
Train Case:  53 | Input/Output: [(16 64 -95 74) -95]
Train Case:  54 | Input/Output: [(-12 60 82 98) -12]
Train Case:  55 | Input/Output: [(26 47 -42 -19) -42]
Train Case:  56 | Input/Output: [(73 -16 50 93) -16]
Train Case:  57 | Input/Output: [(49 -75 -73 71) -75]
Train Case:  58 | Input/Output: [(9 -43 -71 20) -71]
Train Case:  59 | Input/Output: [(40 -46 89 -56) -56]
Train Case:  60 | Input/Output: [(54 18 -33 35) -33]
Train Case:  61 | Input/Output: [(-4 -32 86 -60) -60]
Train Case:  62 | Input/Output: [(-9 -66 -12 79) -66]
Train Case:  63 | Input/Output: [(-29 -15 86 -50) -50]
Train Case:  64 | Input/Output: [(35 93 20 58) 20]
Train Case:  65 | Input/Output: [(-67 29 97 -14) -67]
Train Case:  66 | Input/Output: [(-24 78 -4 67) -24]
Train Case:  67 | Input/Output: [(66 91 -82 38) -82]
Train Case:  68 | Input/Output: [(85 56 78 62) 56]
Train Case:  69 | Input/Output: [(92 17 -55 -99) -99]
Train Case:  70 | Input/Output: [(27 37 3 -3) -3]
Train Case:  71 | Input/Output: [(36 37 86 -77) -77]
Train Case:  72 | Input/Output: [(-85 -45 94 -47) -85]
Train Case:  73 | Input/Output: [(68 -10 29 44) -10]
Train Case:  74 | Input/Output: [(-63 24 17 92) -63]
Train Case:  75 | Input/Output: [(-57 -41 -82 -71) -82]
Train Case:  76 | Input/Output: [(19 28 -15 -26) -26]
Train Case:  77 | Input/Output: [(-64 37 -8 -60) -64]
Train Case:  78 | Input/Output: [(-46 -35 65 -3) -46]
Train Case:  79 | Input/Output: [(65 -77 100 -16) -77]
Train Case:  80 | Input/Output: [(19 -76 -63 23) -76]
Train Case:  81 | Input/Output: [(-85 38 -36 -40) -85]
Train Case:  82 | Input/Output: [(-46 97 -47 66) -47]
Train Case:  83 | Input/Output: [(-49 -76 -80 69) -80]
Train Case:  84 | Input/Output: [(-59 -72 -84 -93) -93]
Train Case:  85 | Input/Output: [(-88 -82 -52 -97) -97]
Train Case:  86 | Input/Output: [(-56 -61 -19 22) -61]
Train Case:  87 | Input/Output: [(77 85 72 29) 29]
Train Case:  88 | Input/Output: [(73 66 -27 46) -27]
Train Case:  89 | Input/Output: [(-58 24 78 -68) -68]
Train Case:  90 | Input/Output: [(-98 31 11 -29) -98]
Train Case:  91 | Input/Output: [(83 19 23 80) 19]
Train Case:  92 | Input/Output: [(31 -28 21 41) -28]
Train Case:  93 | Input/Output: [(-61 -22 5 12) -61]
Train Case:  94 | Input/Output: [(50 -73 -58 29) -73]
Train Case:  95 | Input/Output: [(-36 70 56 -76) -76]
Train Case:  96 | Input/Output: [(3 -52 -88 -39) -88]
Train Case:  97 | Input/Output: [(98 4 -69 66) -69]
Train Case:  98 | Input/Output: [(53 67 3 36) 3]
Train Case:  99 | Input/Output: [(-87 37 -23 49) -87]
Test Case:   0 | Input/Output: [[-70 -70 -70 31] -70]
Test Case:   1 | Input/Output: [[-4 -4 94 -4] -4]
Test Case:   2 | Input/Output: [[24 24 24 70] 24]
Test Case:   3 | Input/Output: [[66 78 78 78] 66]
Test Case:   4 | Input/Output: [[59 -56 -56 -56] -56]
Test Case:   5 | Input/Output: [[-13 -99 -99 -99] -99]
Test Case:   6 | Input/Output: [[99 34 34 34] 34]
Test Case:   7 | Input/Output: [[-26 -26 91 -26] -26]
Test Case:   8 | Input/Output: [[97 8 97 97] 8]
Test Case:   9 | Input/Output: [[-99 -99 -34 -99] -99]
Test Case:  10 | Input/Output: [[-94 -77 -77 -77] -94]
Test Case:  11 | Input/Output: [[42 42 95 42] 42]
Test Case:  12 | Input/Output: [[-90 -30 -30 -30] -90]
Test Case:  13 | Input/Output: [[98 98 17 98] 17]
Test Case:  14 | Input/Output: [[-49 -12 -49 -49] -49]
Test Case:  15 | Input/Output: [[9 9 90 9] 9]
Test Case:  16 | Input/Output: [[-94 7 7 7] -94]
Test Case:  17 | Input/Output: [[39 -29 39 39] -29]
Test Case:  18 | Input/Output: [[31 31 51 31] 31]
Test Case:  19 | Input/Output: [[-36 14 14 14] -36]
Test Case:  20 | Input/Output: [[67 48 48 48] 48]
Test Case:  21 | Input/Output: [[-4 -80 -4 -4] -80]
Test Case:  22 | Input/Output: [[-83 -83 86 -83] -83]
Test Case:  23 | Input/Output: [[91 91 -55 91] -55]
Test Case:  24 | Input/Output: [[38 -58 -58 -58] -58]
Test Case:  25 | Input/Output: [[49 12 49 49] 12]
Test Case:  26 | Input/Output: [[-74 -74 -74 40] -74]
Test Case:  27 | Input/Output: [[90 90 61 90] 61]
Test Case:  28 | Input/Output: [[70 70 15 70] 15]
Test Case:  29 | Input/Output: [[63 -12 63 63] -12]
Test Case:  30 | Input/Output: [[55 70 55 55] 55]
Test Case:  31 | Input/Output: [[-19 76 -19 -19] -19]
Test Case:  32 | Input/Output: [[-27 -27 -27 73] -27]
Test Case:  33 | Input/Output: [[-89 -89 15 -89] -89]
Test Case:  34 | Input/Output: [[-59 49 49 49] -59]
Test Case:  35 | Input/Output: [[-15 -15 -15 -28] -28]
Test Case:  36 | Input/Output: [[99 99 99 -83] -83]
Test Case:  37 | Input/Output: [[-47 -47 63 -47] -47]
Test Case:  38 | Input/Output: [[-35 39 -35 -35] -35]
Test Case:  39 | Input/Output: [[-24 -7 -7 -7] -24]
Test Case:  40 | Input/Output: [[-45 -45 -45 -92] -92]
Test Case:  41 | Input/Output: [[-77 -77 -77 63] -77]
Test Case:  42 | Input/Output: [[41 41 41 -90] -90]
Test Case:  43 | Input/Output: [[81 81 81 68] 68]
Test Case:  44 | Input/Output: [[17 17 -60 17] -60]
Test Case:  45 | Input/Output: [[-18 52 52 52] -18]
Test Case:  46 | Input/Output: [[-85 -67 -85 -85] -85]
Test Case:  47 | Input/Output: [[39 77 77 77] 39]
Test Case:  48 | Input/Output: [[26 37 26 26] 26]
Test Case:  49 | Input/Output: [[-79 -80 -80 -80] -80]
Test Case:  50 | Input/Output: [[-18 77 -18 -18] -18]
Test Case:  51 | Input/Output: [[6 6 -67 6] -67]
Test Case:  52 | Input/Output: [[-57 16 16 16] -57]
Test Case:  53 | Input/Output: [[89 89 72 89] 72]
Test Case:  54 | Input/Output: [[65 0 0 0] 0]
Test Case:  55 | Input/Output: [[11 80 11 11] 11]
Test Case:  56 | Input/Output: [[82 82 82 37] 37]
Test Case:  57 | Input/Output: [[95 78 95 95] 78]
Test Case:  58 | Input/Output: [[-81 -81 -34 -81] -81]
Test Case:  59 | Input/Output: [[-52 52 52 52] -52]
Test Case:  60 | Input/Output: [[6 6 90 6] 6]
Test Case:  61 | Input/Output: [[53 53 90 53] 53]
Test Case:  62 | Input/Output: [[91 8 8 8] 8]
Test Case:  63 | Input/Output: [[-28 -63 -63 -63] -63]
Test Case:  64 | Input/Output: [[-15 -15 -99 -15] -99]
Test Case:  65 | Input/Output: [[14 -90 -90 -90] -90]
Test Case:  66 | Input/Output: [[39 -100 -100 -100] -100]
Test Case:  67 | Input/Output: [[18 18 64 18] 18]
Test Case:  68 | Input/Output: [[-96 17 17 17] -96]
Test Case:  69 | Input/Output: [[-67 6 -67 -67] -67]
Test Case:  70 | Input/Output: [[56 -90 -90 -90] -90]
Test Case:  71 | Input/Output: [[80 19 19 19] 19]
Test Case:  72 | Input/Output: [[20 -78 20 20] -78]
Test Case:  73 | Input/Output: [[-25 42 -25 -25] -25]
Test Case:  74 | Input/Output: [[-88 -88 -59 -88] -88]
Test Case:  75 | Input/Output: [[9 87 87 87] 9]
Test Case:  76 | Input/Output: [[-53 -47 -53 -53] -53]
Test Case:  77 | Input/Output: [[32 32 -59 32] -59]
Test Case:  78 | Input/Output: [[-97 -97 -40 -97] -97]
Test Case:  79 | Input/Output: [[30 -70 -70 -70] -70]
Test Case:  80 | Input/Output: [[86 -24 86 86] -24]
Test Case:  81 | Input/Output: [[-21 -74 -74 -74] -74]
Test Case:  82 | Input/Output: [[76 76 -94 76] -94]
Test Case:  83 | Input/Output: [[54 54 54 -10] -10]
Test Case:  84 | Input/Output: [[9 8 9 9] 8]
Test Case:  85 | Input/Output: [[-25 -25 -25 -58] -58]
Test Case:  86 | Input/Output: [[90 90 64 90] 64]
Test Case:  87 | Input/Output: [[98 -27 -27 -27] -27]
Test Case:  88 | Input/Output: [[-61 -61 -61 65] -61]
Test Case:  89 | Input/Output: [[-93 -93 -24 -93] -93]
Test Case:  90 | Input/Output: [[-82 -13 -13 -13] -82]
Test Case:  91 | Input/Output: [[-76 -76 -76 -91] -91]
Test Case:  92 | Input/Output: [[-33 -33 30 -33] -33]
Test Case:  93 | Input/Output: [[-56 -56 -56 -5] -56]
Test Case:  94 | Input/Output: [[-2 -2 -2 80] -2]
Test Case:  95 | Input/Output: [[-18 -71 -71 -71] -71]
Test Case:  96 | Input/Output: [[19 -99 -99 -99] -99]
Test Case:  97 | Input/Output: [[34 34 34 58] 34]
Test Case:  98 | Input/Output: [[-55 -55 31 -55] -55]
Test Case:  99 | Input/Output: [[6 6 6 -53] -53]
Test Case: 100 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 101 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 102 | Input/Output: [(77 77 77 77) 77]
Test Case: 103 | Input/Output: [(48 48 48 48) 48]
Test Case: 104 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 105 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 106 | Input/Output: [(9 9 9 9) 9]
Test Case: 107 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 108 | Input/Output: [(31 31 31 31) 31]
Test Case: 109 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 110 | Input/Output: [(23 23 23 23) 23]
Test Case: 111 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 112 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 113 | Input/Output: [(38 38 38 38) 38]
Test Case: 114 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 115 | Input/Output: [(99 99 99 99) 99]
Test Case: 116 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 117 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 118 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 119 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 120 | Input/Output: [(96 96 96 96) 96]
Test Case: 121 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 122 | Input/Output: [(81 81 81 81) 81]
Test Case: 123 | Input/Output: [(15 15 15 15) 15]
Test Case: 124 | Input/Output: [(72 72 72 72) 72]
Test Case: 125 | Input/Output: [(38 38 38 38) 38]
Test Case: 126 | Input/Output: [(18 18 18 18) 18]
Test Case: 127 | Input/Output: [(80 80 80 80) 80]
Test Case: 128 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 129 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 130 | Input/Output: [(78 78 78 78) 78]
Test Case: 131 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 132 | Input/Output: [(57 57 57 57) 57]
Test Case: 133 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 134 | Input/Output: [(91 91 91 91) 91]
Test Case: 135 | Input/Output: [(48 48 48 48) 48]
Test Case: 136 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 137 | Input/Output: [(97 97 97 97) 97]
Test Case: 138 | Input/Output: [(53 53 53 53) 53]
Test Case: 139 | Input/Output: [(65 65 65 65) 65]
Test Case: 140 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 141 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 142 | Input/Output: [(84 84 84 84) 84]
Test Case: 143 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 144 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 145 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 146 | Input/Output: [(48 48 48 48) 48]
Test Case: 147 | Input/Output: [(50 50 50 50) 50]
Test Case: 148 | Input/Output: [(17 17 17 17) 17]
Test Case: 149 | Input/Output: [(30 30 30 30) 30]
Test Case: 150 | Input/Output: [(45 45 45 45) 45]
Test Case: 151 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 152 | Input/Output: [(56 56 56 56) 56]
Test Case: 153 | Input/Output: [(30 30 30 30) 30]
Test Case: 154 | Input/Output: [(0 0 0 0) 0]
Test Case: 155 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 156 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 157 | Input/Output: [(1 1 1 1) 1]
Test Case: 158 | Input/Output: [(13 13 13 13) 13]
Test Case: 159 | Input/Output: [(16 16 16 16) 16]
Test Case: 160 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 161 | Input/Output: [(25 25 25 25) 25]
Test Case: 162 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 163 | Input/Output: [(98 98 98 98) 98]
Test Case: 164 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 165 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 166 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 167 | Input/Output: [(35 35 35 35) 35]
Test Case: 168 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 169 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 170 | Input/Output: [(69 69 69 69) 69]
Test Case: 171 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 172 | Input/Output: [(46 46 46 46) 46]
Test Case: 173 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 174 | Input/Output: [(63 63 63 63) 63]
Test Case: 175 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 176 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 177 | Input/Output: [(8 8 8 8) 8]
Test Case: 178 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 179 | Input/Output: [(96 96 96 96) 96]
Test Case: 180 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 181 | Input/Output: [(26 26 26 26) 26]
Test Case: 182 | Input/Output: [(77 77 77 77) 77]
Test Case: 183 | Input/Output: [(25 25 25 25) 25]
Test Case: 184 | Input/Output: [(83 83 83 83) 83]
Test Case: 185 | Input/Output: [(47 47 47 47) 47]
Test Case: 186 | Input/Output: [(61 61 61 61) 61]
Test Case: 187 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 188 | Input/Output: [(48 48 48 48) 48]
Test Case: 189 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 190 | Input/Output: [(89 89 89 89) 89]
Test Case: 191 | Input/Output: [(6 6 6 6) 6]
Test Case: 192 | Input/Output: [(92 92 92 92) 92]
Test Case: 193 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 194 | Input/Output: [(17 17 17 17) 17]
Test Case: 195 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 196 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 197 | Input/Output: [(33 33 33 33) 33]
Test Case: 198 | Input/Output: [(83 83 83 83) 83]
Test Case: 199 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 200 | Input/Output: [(26 4 13 53) 4]
Test Case: 201 | Input/Output: [(16 53 3 12) 3]
Test Case: 202 | Input/Output: [(37 83 0 35) 0]
Test Case: 203 | Input/Output: [(79 52 38 62) 38]
Test Case: 204 | Input/Output: [(72 24 100 74) 24]
Test Case: 205 | Input/Output: [(17 90 62 59) 17]
Test Case: 206 | Input/Output: [(83 35 61 71) 35]
Test Case: 207 | Input/Output: [(11 91 62 75) 11]
Test Case: 208 | Input/Output: [(40 40 12 21) 12]
Test Case: 209 | Input/Output: [(11 86 30 73) 11]
Test Case: 210 | Input/Output: [(38 70 42 25) 25]
Test Case: 211 | Input/Output: [(51 50 89 68) 50]
Test Case: 212 | Input/Output: [(77 26 85 48) 26]
Test Case: 213 | Input/Output: [(69 11 9 44) 9]
Test Case: 214 | Input/Output: [(94 12 88 98) 12]
Test Case: 215 | Input/Output: [(22 28 17 78) 17]
Test Case: 216 | Input/Output: [(97 19 4 30) 4]
Test Case: 217 | Input/Output: [(75 90 17 94) 17]
Test Case: 218 | Input/Output: [(12 12 52 58) 12]
Test Case: 219 | Input/Output: [(62 27 82 63) 27]
Test Case: 220 | Input/Output: [(61 46 66 85) 46]
Test Case: 221 | Input/Output: [(57 86 52 19) 19]
Test Case: 222 | Input/Output: [(32 95 2 0) 0]
Test Case: 223 | Input/Output: [(23 91 52 83) 23]
Test Case: 224 | Input/Output: [(69 21 91 62) 21]
Test Case: 225 | Input/Output: [(88 51 86 77) 51]
Test Case: 226 | Input/Output: [(52 88 76 77) 52]
Test Case: 227 | Input/Output: [(75 66 69 36) 36]
Test Case: 228 | Input/Output: [(23 88 43 88) 23]
Test Case: 229 | Input/Output: [(68 33 99 82) 33]
Test Case: 230 | Input/Output: [(79 42 40 5) 5]
Test Case: 231 | Input/Output: [(11 19 56 58) 11]
Test Case: 232 | Input/Output: [(83 5 36 34) 5]
Test Case: 233 | Input/Output: [(31 49 85 0) 0]
Test Case: 234 | Input/Output: [(71 25 90 99) 25]
Test Case: 235 | Input/Output: [(51 70 12 2) 2]
Test Case: 236 | Input/Output: [(62 30 35 70) 30]
Test Case: 237 | Input/Output: [(59 1 93 39) 1]
Test Case: 238 | Input/Output: [(41 52 100 77) 41]
Test Case: 239 | Input/Output: [(80 56 89 79) 56]
Test Case: 240 | Input/Output: [(30 20 38 98) 20]
Test Case: 241 | Input/Output: [(94 60 32 26) 26]
Test Case: 242 | Input/Output: [(95 21 43 32) 21]
Test Case: 243 | Input/Output: [(12 96 5 7) 5]
Test Case: 244 | Input/Output: [(28 83 0 52) 0]
Test Case: 245 | Input/Output: [(85 3 38 7) 3]
Test Case: 246 | Input/Output: [(51 67 93 95) 51]
Test Case: 247 | Input/Output: [(64 25 88 9) 9]
Test Case: 248 | Input/Output: [(22 65 70 81) 22]
Test Case: 249 | Input/Output: [(71 31 82 23) 23]
Test Case: 250 | Input/Output: [(11 10 38 74) 10]
Test Case: 251 | Input/Output: [(34 22 43 13) 13]
Test Case: 252 | Input/Output: [(44 96 93 93) 44]
Test Case: 253 | Input/Output: [(86 14 41 80) 14]
Test Case: 254 | Input/Output: [(17 64 24 0) 0]
Test Case: 255 | Input/Output: [(76 54 23 4) 4]
Test Case: 256 | Input/Output: [(0 32 45 70) 0]
Test Case: 257 | Input/Output: [(56 1 17 94) 1]
Test Case: 258 | Input/Output: [(93 90 74 32) 32]
Test Case: 259 | Input/Output: [(59 83 17 64) 17]
Test Case: 260 | Input/Output: [(0 11 4 40) 0]
Test Case: 261 | Input/Output: [(77 32 31 64) 31]
Test Case: 262 | Input/Output: [(42 2 13 14) 2]
Test Case: 263 | Input/Output: [(19 48 1 0) 0]
Test Case: 264 | Input/Output: [(23 28 67 83) 23]
Test Case: 265 | Input/Output: [(48 13 65 68) 13]
Test Case: 266 | Input/Output: [(93 68 79 55) 55]
Test Case: 267 | Input/Output: [(73 39 92 94) 39]
Test Case: 268 | Input/Output: [(42 99 15 77) 15]
Test Case: 269 | Input/Output: [(37 51 31 11) 11]
Test Case: 270 | Input/Output: [(12 17 67 43) 12]
Test Case: 271 | Input/Output: [(13 9 15 92) 9]
Test Case: 272 | Input/Output: [(59 20 67 70) 20]
Test Case: 273 | Input/Output: [(2 86 2 69) 2]
Test Case: 274 | Input/Output: [(79 98 24 15) 15]
Test Case: 275 | Input/Output: [(25 91 23 16) 16]
Test Case: 276 | Input/Output: [(50 7 78 91) 7]
Test Case: 277 | Input/Output: [(53 3 18 74) 3]
Test Case: 278 | Input/Output: [(11 13 23 95) 11]
Test Case: 279 | Input/Output: [(0 6 65 0) 0]
Test Case: 280 | Input/Output: [(84 53 9 87) 9]
Test Case: 281 | Input/Output: [(95 41 26 73) 26]
Test Case: 282 | Input/Output: [(29 34 37 82) 29]
Test Case: 283 | Input/Output: [(72 79 50 70) 50]
Test Case: 284 | Input/Output: [(77 13 57 61) 13]
Test Case: 285 | Input/Output: [(64 82 7 27) 7]
Test Case: 286 | Input/Output: [(38 38 61 0) 0]
Test Case: 287 | Input/Output: [(15 15 5 80) 5]
Test Case: 288 | Input/Output: [(41 47 96 0) 0]
Test Case: 289 | Input/Output: [(65 87 92 89) 65]
Test Case: 290 | Input/Output: [(87 77 46 87) 46]
Test Case: 291 | Input/Output: [(77 37 89 55) 37]
Test Case: 292 | Input/Output: [(92 90 71 51) 51]
Test Case: 293 | Input/Output: [(71 33 89 80) 33]
Test Case: 294 | Input/Output: [(81 16 0 75) 0]
Test Case: 295 | Input/Output: [(68 61 36 32) 32]
Test Case: 296 | Input/Output: [(62 62 50 30) 30]
Test Case: 297 | Input/Output: [(71 44 72 55) 44]
Test Case: 298 | Input/Output: [(84 49 3 1) 1]
Test Case: 299 | Input/Output: [(56 10 30 6) 6]
Test Case: 300 | Input/Output: [(11 59 51 49) 11]
Test Case: 301 | Input/Output: [(13 68 72 83) 13]
Test Case: 302 | Input/Output: [(74 29 31 37) 29]
Test Case: 303 | Input/Output: [(97 25 31 23) 23]
Test Case: 304 | Input/Output: [(65 15 74 72) 15]
Test Case: 305 | Input/Output: [(1 47 99 9) 1]
Test Case: 306 | Input/Output: [(77 17 46 48) 17]
Test Case: 307 | Input/Output: [(15 87 76 37) 15]
Test Case: 308 | Input/Output: [(23 39 49 26) 23]
Test Case: 309 | Input/Output: [(49 25 54 13) 13]
Test Case: 310 | Input/Output: [(41 84 29 11) 11]
Test Case: 311 | Input/Output: [(21 77 45 58) 21]
Test Case: 312 | Input/Output: [(39 23 25 72) 23]
Test Case: 313 | Input/Output: [(81 7 22 69) 7]
Test Case: 314 | Input/Output: [(6 89 13 53) 6]
Test Case: 315 | Input/Output: [(7 71 88 86) 7]
Test Case: 316 | Input/Output: [(60 15 45 26) 15]
Test Case: 317 | Input/Output: [(59 78 62 26) 26]
Test Case: 318 | Input/Output: [(49 18 34 55) 18]
Test Case: 319 | Input/Output: [(51 74 49 42) 42]
Test Case: 320 | Input/Output: [(70 17 41 48) 17]
Test Case: 321 | Input/Output: [(31 14 96 90) 14]
Test Case: 322 | Input/Output: [(38 82 74 49) 38]
Test Case: 323 | Input/Output: [(42 72 90 13) 13]
Test Case: 324 | Input/Output: [(40 79 52 69) 40]
Test Case: 325 | Input/Output: [(85 67 69 80) 67]
Test Case: 326 | Input/Output: [(69 94 5 87) 5]
Test Case: 327 | Input/Output: [(49 61 42 78) 42]
Test Case: 328 | Input/Output: [(48 98 96 83) 48]
Test Case: 329 | Input/Output: [(34 40 20 3) 3]
Test Case: 330 | Input/Output: [(62 80 100 84) 62]
Test Case: 331 | Input/Output: [(13 35 93 50) 13]
Test Case: 332 | Input/Output: [(0 53 75 85) 0]
Test Case: 333 | Input/Output: [(41 31 2 24) 2]
Test Case: 334 | Input/Output: [(8 80 57 74) 8]
Test Case: 335 | Input/Output: [(14 98 73 4) 4]
Test Case: 336 | Input/Output: [(21 33 7 17) 7]
Test Case: 337 | Input/Output: [(34 81 0 54) 0]
Test Case: 338 | Input/Output: [(15 19 42 18) 15]
Test Case: 339 | Input/Output: [(53 90 16 76) 16]
Test Case: 340 | Input/Output: [(66 88 10 35) 10]
Test Case: 341 | Input/Output: [(66 68 13 48) 13]
Test Case: 342 | Input/Output: [(21 77 47 4) 4]
Test Case: 343 | Input/Output: [(59 79 10 61) 10]
Test Case: 344 | Input/Output: [(29 32 86 50) 29]
Test Case: 345 | Input/Output: [(0 27 99 50) 0]
Test Case: 346 | Input/Output: [(76 1 93 93) 1]
Test Case: 347 | Input/Output: [(48 63 66 77) 48]
Test Case: 348 | Input/Output: [(37 45 12 28) 12]
Test Case: 349 | Input/Output: [(81 85 39 7) 7]
Test Case: 350 | Input/Output: [(68 82 27 72) 27]
Test Case: 351 | Input/Output: [(39 7 38 97) 7]
Test Case: 352 | Input/Output: [(57 74 81 43) 43]
Test Case: 353 | Input/Output: [(86 84 68 87) 68]
Test Case: 354 | Input/Output: [(40 84 100 8) 8]
Test Case: 355 | Input/Output: [(29 22 26 48) 22]
Test Case: 356 | Input/Output: [(72 73 18 56) 18]
Test Case: 357 | Input/Output: [(9 18 22 59) 9]
Test Case: 358 | Input/Output: [(32 17 79 53) 17]
Test Case: 359 | Input/Output: [(61 78 66 6) 6]
Test Case: 360 | Input/Output: [(3 88 63 30) 3]
Test Case: 361 | Input/Output: [(80 68 66 24) 24]
Test Case: 362 | Input/Output: [(3 50 29 63) 3]
Test Case: 363 | Input/Output: [(100 91 64 94) 64]
Test Case: 364 | Input/Output: [(45 95 32 84) 32]
Test Case: 365 | Input/Output: [(78 76 29 52) 29]
Test Case: 366 | Input/Output: [(81 62 88 76) 62]
Test Case: 367 | Input/Output: [(20 82 83 20) 20]
Test Case: 368 | Input/Output: [(46 90 83 70) 46]
Test Case: 369 | Input/Output: [(20 59 26 92) 20]
Test Case: 370 | Input/Output: [(96 22 39 7) 7]
Test Case: 371 | Input/Output: [(8 5 40 38) 5]
Test Case: 372 | Input/Output: [(73 29 54 10) 10]
Test Case: 373 | Input/Output: [(98 24 73 29) 24]
Test Case: 374 | Input/Output: [(3 96 48 64) 3]
Test Case: 375 | Input/Output: [(20 26 4 88) 4]
Test Case: 376 | Input/Output: [(67 85 86 77) 67]
Test Case: 377 | Input/Output: [(8 10 1 96) 1]
Test Case: 378 | Input/Output: [(26 37 81 21) 21]
Test Case: 379 | Input/Output: [(86 51 22 8) 8]
Test Case: 380 | Input/Output: [(11 40 0 65) 0]
Test Case: 381 | Input/Output: [(94 58 86 93) 58]
Test Case: 382 | Input/Output: [(58 70 43 23) 23]
Test Case: 383 | Input/Output: [(2 89 47 91) 2]
Test Case: 384 | Input/Output: [(67 13 55 67) 13]
Test Case: 385 | Input/Output: [(49 34 63 69) 34]
Test Case: 386 | Input/Output: [(66 23 73 53) 23]
Test Case: 387 | Input/Output: [(70 48 76 71) 48]
Test Case: 388 | Input/Output: [(56 66 82 63) 56]
Test Case: 389 | Input/Output: [(15 72 1 87) 1]
Test Case: 390 | Input/Output: [(91 12 75 80) 12]
Test Case: 391 | Input/Output: [(40 83 24 65) 24]
Test Case: 392 | Input/Output: [(82 63 51 51) 51]
Test Case: 393 | Input/Output: [(67 40 4 19) 4]
Test Case: 394 | Input/Output: [(17 33 35 87) 17]
Test Case: 395 | Input/Output: [(49 63 70 28) 28]
Test Case: 396 | Input/Output: [(80 85 43 58) 43]
Test Case: 397 | Input/Output: [(2 95 69 80) 2]
Test Case: 398 | Input/Output: [(92 87 77 24) 24]
Test Case: 399 | Input/Output: [(31 24 7 74) 7]
Test Case: 400 | Input/Output: [(45 60 -95 33) -95]
Test Case: 401 | Input/Output: [(-30 -80 -79 25) -80]
Test Case: 402 | Input/Output: [(-20 0 96 90) -20]
Test Case: 403 | Input/Output: [(-5 64 -51 68) -51]
Test Case: 404 | Input/Output: [(76 -41 -67 -17) -67]
Test Case: 405 | Input/Output: [(-86 25 -28 -70) -86]
Test Case: 406 | Input/Output: [(49 -12 -33 71) -33]
Test Case: 407 | Input/Output: [(30 74 18 78) 18]
Test Case: 408 | Input/Output: [(-90 20 -4 51) -90]
Test Case: 409 | Input/Output: [(-40 57 12 -37) -40]
Test Case: 410 | Input/Output: [(43 -32 2 -74) -74]
Test Case: 411 | Input/Output: [(24 -48 62 53) -48]
Test Case: 412 | Input/Output: [(-100 -40 38 -76) -100]
Test Case: 413 | Input/Output: [(7 -60 -48 -91) -91]
Test Case: 414 | Input/Output: [(76 -67 29 -75) -75]
Test Case: 415 | Input/Output: [(-99 -19 19 -76) -99]
Test Case: 416 | Input/Output: [(-49 86 -91 95) -91]
Test Case: 417 | Input/Output: [(-93 -17 69 36) -93]
Test Case: 418 | Input/Output: [(-100 5 81 -94) -100]
Test Case: 419 | Input/Output: [(100 96 -71 -71) -71]
Test Case: 420 | Input/Output: [(-92 81 5 37) -92]
Test Case: 421 | Input/Output: [(82 41 44 -17) -17]
Test Case: 422 | Input/Output: [(92 -83 31 -69) -83]
Test Case: 423 | Input/Output: [(-36 81 47 1) -36]
Test Case: 424 | Input/Output: [(79 41 55 9) 9]
Test Case: 425 | Input/Output: [(66 -87 -94 24) -94]
Test Case: 426 | Input/Output: [(-84 -25 -83 -45) -84]
Test Case: 427 | Input/Output: [(-90 -48 38 81) -90]
Test Case: 428 | Input/Output: [(39 48 -75 -74) -75]
Test Case: 429 | Input/Output: [(-72 -49 -41 81) -72]
Test Case: 430 | Input/Output: [(40 56 84 -43) -43]
Test Case: 431 | Input/Output: [(84 68 96 -65) -65]
Test Case: 432 | Input/Output: [(4 -12 -2 -34) -34]
Test Case: 433 | Input/Output: [(-43 86 74 -91) -91]
Test Case: 434 | Input/Output: [(61 81 -32 -51) -51]
Test Case: 435 | Input/Output: [(68 -28 21 58) -28]
Test Case: 436 | Input/Output: [(-60 80 57 62) -60]
Test Case: 437 | Input/Output: [(-49 74 18 12) -49]
Test Case: 438 | Input/Output: [(46 -99 26 97) -99]
Test Case: 439 | Input/Output: [(20 -26 55 -82) -82]
Test Case: 440 | Input/Output: [(-83 -14 64 58) -83]
Test Case: 441 | Input/Output: [(70 -46 79 -10) -46]
Test Case: 442 | Input/Output: [(35 -25 -27 -25) -27]
Test Case: 443 | Input/Output: [(-25 33 -83 -96) -96]
Test Case: 444 | Input/Output: [(-47 13 -55 96) -55]
Test Case: 445 | Input/Output: [(-10 -24 18 -28) -28]
Test Case: 446 | Input/Output: [(-14 -74 21 -41) -74]
Test Case: 447 | Input/Output: [(-65 100 -49 22) -65]
Test Case: 448 | Input/Output: [(-59 86 -23 81) -59]
Test Case: 449 | Input/Output: [(-28 90 -64 0) -64]
Test Case: 450 | Input/Output: [(-97 -95 -17 -22) -97]
Test Case: 451 | Input/Output: [(-35 -87 0 71) -87]
Test Case: 452 | Input/Output: [(32 -20 2 16) -20]
Test Case: 453 | Input/Output: [(91 -93 38 49) -93]
Test Case: 454 | Input/Output: [(-23 96 77 2) -23]
Test Case: 455 | Input/Output: [(-81 -93 54 34) -93]
Test Case: 456 | Input/Output: [(53 22 -75 47) -75]
Test Case: 457 | Input/Output: [(20 55 61 -96) -96]
Test Case: 458 | Input/Output: [(-44 23 -95 -4) -95]
Test Case: 459 | Input/Output: [(-13 0 34 -16) -16]
Test Case: 460 | Input/Output: [(-38 80 5 -21) -38]
Test Case: 461 | Input/Output: [(10 -86 88 56) -86]
Test Case: 462 | Input/Output: [(31 -54 93 48) -54]
Test Case: 463 | Input/Output: [(-53 5 71 -3) -53]
Test Case: 464 | Input/Output: [(32 -83 -66 -33) -83]
Test Case: 465 | Input/Output: [(-45 -14 53 26) -45]
Test Case: 466 | Input/Output: [(-35 -87 -17 93) -87]
Test Case: 467 | Input/Output: [(-64 -76 -62 53) -76]
Test Case: 468 | Input/Output: [(9 4 -9 91) -9]
Test Case: 469 | Input/Output: [(52 18 -90 34) -90]
Test Case: 470 | Input/Output: [(93 -8 49 -80) -80]
Test Case: 471 | Input/Output: [(-47 3 69 56) -47]
Test Case: 472 | Input/Output: [(-79 -15 -86 22) -86]
Test Case: 473 | Input/Output: [(-56 39 -11 -23) -56]
Test Case: 474 | Input/Output: [(71 5 73 -35) -35]
Test Case: 475 | Input/Output: [(84 -68 28 29) -68]
Test Case: 476 | Input/Output: [(18 47 -28 48) -28]
Test Case: 477 | Input/Output: [(55 33 -78 47) -78]
Test Case: 478 | Input/Output: [(-4 34 -55 -77) -77]
Test Case: 479 | Input/Output: [(-91 -64 -64 18) -91]
Test Case: 480 | Input/Output: [(50 -52 -41 -66) -66]
Test Case: 481 | Input/Output: [(-100 -38 2 50) -100]
Test Case: 482 | Input/Output: [(82 79 13 12) 12]
Test Case: 483 | Input/Output: [(43 -7 73 -67) -67]
Test Case: 484 | Input/Output: [(-11 -14 57 51) -14]
Test Case: 485 | Input/Output: [(-70 82 33 95) -70]
Test Case: 486 | Input/Output: [(-56 -8 63 19) -56]
Test Case: 487 | Input/Output: [(11 63 96 -45) -45]
Test Case: 488 | Input/Output: [(90 28 64 58) 28]
Test Case: 489 | Input/Output: [(52 -27 -28 -13) -28]
Test Case: 490 | Input/Output: [(33 -65 -25 -8) -65]
Test Case: 491 | Input/Output: [(86 -21 -47 93) -47]
Test Case: 492 | Input/Output: [(67 -53 97 -27) -53]
Test Case: 493 | Input/Output: [(-27 -43 27 -59) -59]
Test Case: 494 | Input/Output: [(-40 12 32 -10) -40]
Test Case: 495 | Input/Output: [(73 -100 -41 -12) -100]
Test Case: 496 | Input/Output: [(-39 72 -6 -93) -93]
Test Case: 497 | Input/Output: [(-29 -32 -73 22) -73]
Test Case: 498 | Input/Output: [(-90 -81 83 -15) -90]
Test Case: 499 | Input/Output: [(45 -51 -66 -90) -90]
Test Case: 500 | Input/Output: [(-89 78 -81 86) -89]
Test Case: 501 | Input/Output: [(-90 13 -28 25) -90]
Test Case: 502 | Input/Output: [(-51 77 -60 -100) -100]
Test Case: 503 | Input/Output: [(5 -79 82 68) -79]
Test Case: 504 | Input/Output: [(3 63 78 -6) -6]
Test Case: 505 | Input/Output: [(-32 -21 23 -89) -89]
Test Case: 506 | Input/Output: [(47 -25 -70 80) -70]
Test Case: 507 | Input/Output: [(89 50 47 68) 47]
Test Case: 508 | Input/Output: [(-98 23 74 61) -98]
Test Case: 509 | Input/Output: [(-43 -70 -19 96) -70]
Test Case: 510 | Input/Output: [(-33 43 32 -89) -89]
Test Case: 511 | Input/Output: [(94 -48 -33 -54) -54]
Test Case: 512 | Input/Output: [(57 -31 -39 34) -39]
Test Case: 513 | Input/Output: [(-60 56 46 -10) -60]
Test Case: 514 | Input/Output: [(-100 -24 35 -3) -100]
Test Case: 515 | Input/Output: [(8 75 64 -24) -24]
Test Case: 516 | Input/Output: [(70 -46 -83 -40) -83]
Test Case: 517 | Input/Output: [(83 -94 -35 -75) -94]
Test Case: 518 | Input/Output: [(-46 48 91 -54) -54]
Test Case: 519 | Input/Output: [(-7 62 14 67) -7]
Test Case: 520 | Input/Output: [(-5 -1 29 46) -5]
Test Case: 521 | Input/Output: [(-49 -92 -86 -81) -92]
Test Case: 522 | Input/Output: [(-78 30 -28 -6) -78]
Test Case: 523 | Input/Output: [(-47 85 52 64) -47]
Test Case: 524 | Input/Output: [(-56 93 8 -100) -100]
Test Case: 525 | Input/Output: [(95 34 87 -66) -66]
Test Case: 526 | Input/Output: [(-53 82 4 54) -53]
Test Case: 527 | Input/Output: [(-23 -91 -59 3) -91]
Test Case: 528 | Input/Output: [(-60 -95 44 -70) -95]
Test Case: 529 | Input/Output: [(83 -97 32 5) -97]
Test Case: 530 | Input/Output: [(1 73 11 23) 1]
Test Case: 531 | Input/Output: [(-28 -8 92 -32) -32]
Test Case: 532 | Input/Output: [(90 88 -35 -26) -35]
Test Case: 533 | Input/Output: [(1 6 66 65) 1]
Test Case: 534 | Input/Output: [(70 88 -43 55) -43]
Test Case: 535 | Input/Output: [(51 83 48 29) 29]
Test Case: 536 | Input/Output: [(11 83 -58 -76) -76]
Test Case: 537 | Input/Output: [(-84 52 21 -94) -94]
Test Case: 538 | Input/Output: [(76 -91 -10 42) -91]
Test Case: 539 | Input/Output: [(60 43 -74 -22) -74]
Test Case: 540 | Input/Output: [(-89 55 -57 -11) -89]
Test Case: 541 | Input/Output: [(-64 57 -97 20) -97]
Test Case: 542 | Input/Output: [(27 0 -20 -60) -60]
Test Case: 543 | Input/Output: [(-39 8 22 82) -39]
Test Case: 544 | Input/Output: [(-67 63 -32 -82) -82]
Test Case: 545 | Input/Output: [(0 -90 -40 90) -90]
Test Case: 546 | Input/Output: [(-76 73 21 47) -76]
Test Case: 547 | Input/Output: [(-23 89 -18 -67) -67]
Test Case: 548 | Input/Output: [(-8 -32 30 -55) -55]
Test Case: 549 | Input/Output: [(-36 -90 -62 -1) -90]
Test Case: 550 | Input/Output: [(-73 98 16 85) -73]
Test Case: 551 | Input/Output: [(-44 -77 92 35) -77]
Test Case: 552 | Input/Output: [(40 29 57 74) 29]
Test Case: 553 | Input/Output: [(72 100 37 19) 19]
Test Case: 554 | Input/Output: [(-58 -28 48 31) -58]
Test Case: 555 | Input/Output: [(-10 -69 -98 26) -98]
Test Case: 556 | Input/Output: [(-82 -32 98 -75) -82]
Test Case: 557 | Input/Output: [(-19 42 73 55) -19]
Test Case: 558 | Input/Output: [(-92 -36 34 -72) -92]
Test Case: 559 | Input/Output: [(11 82 -66 -90) -90]
Test Case: 560 | Input/Output: [(88 71 100 1) 1]
Test Case: 561 | Input/Output: [(50 -1 1 49) -1]
Test Case: 562 | Input/Output: [(66 -52 10 56) -52]
Test Case: 563 | Input/Output: [(-24 -57 -74 -50) -74]
Test Case: 564 | Input/Output: [(-16 -94 63 81) -94]
Test Case: 565 | Input/Output: [(53 -84 51 -49) -84]
Test Case: 566 | Input/Output: [(5 -49 79 61) -49]
Test Case: 567 | Input/Output: [(80 45 60 33) 33]
Test Case: 568 | Input/Output: [(-51 -31 -53 8) -53]
Test Case: 569 | Input/Output: [(44 42 -43 -32) -43]
Test Case: 570 | Input/Output: [(-88 81 -71 -12) -88]
Test Case: 571 | Input/Output: [(61 18 -21 -2) -21]
Test Case: 572 | Input/Output: [(89 91 -33 69) -33]
Test Case: 573 | Input/Output: [(-21 83 -67 44) -67]
Test Case: 574 | Input/Output: [(-76 -80 -25 -22) -80]
Test Case: 575 | Input/Output: [(-35 76 -77 0) -77]
Test Case: 576 | Input/Output: [(86 88 -87 65) -87]
Test Case: 577 | Input/Output: [(-84 -10 -87 63) -87]
Test Case: 578 | Input/Output: [(87 4 4 93) 4]
Test Case: 579 | Input/Output: [(-8 87 51 86) -8]
Test Case: 580 | Input/Output: [(-69 12 41 48) -69]
Test Case: 581 | Input/Output: [(76 16 -20 65) -20]
Test Case: 582 | Input/Output: [(9 -3 46 30) -3]
Test Case: 583 | Input/Output: [(35 11 95 55) 11]
Test Case: 584 | Input/Output: [(-2 100 -49 -76) -76]
Test Case: 585 | Input/Output: [(92 96 58 -8) -8]
Test Case: 586 | Input/Output: [(65 -26 92 -37) -37]
Test Case: 587 | Input/Output: [(1 57 -14 84) -14]
Test Case: 588 | Input/Output: [(52 96 -17 50) -17]
Test Case: 589 | Input/Output: [(51 54 -30 15) -30]
Test Case: 590 | Input/Output: [(57 -88 -75 90) -88]
Test Case: 591 | Input/Output: [(23 1 44 -93) -93]
Test Case: 592 | Input/Output: [(93 -71 43 -48) -71]
Test Case: 593 | Input/Output: [(38 -23 49 -42) -42]
Test Case: 594 | Input/Output: [(-23 2 9 100) -23]
Test Case: 595 | Input/Output: [(83 -90 -40 -33) -90]
Test Case: 596 | Input/Output: [(18 37 60 -82) -82]
Test Case: 597 | Input/Output: [(-7 86 26 -17) -17]
Test Case: 598 | Input/Output: [(38 -24 -59 -20) -59]
Test Case: 599 | Input/Output: [(-65 4 53 -71) -71]
Test Case: 600 | Input/Output: [(-98 4 -90 2) -98]
Test Case: 601 | Input/Output: [(16 -45 6 -68) -68]
Test Case: 602 | Input/Output: [(-82 -83 3 -8) -83]
Test Case: 603 | Input/Output: [(-51 59 -2 -30) -51]
Test Case: 604 | Input/Output: [(-19 -61 26 29) -61]
Test Case: 605 | Input/Output: [(66 60 -6 -98) -98]
Test Case: 606 | Input/Output: [(-23 -98 -70 -58) -98]
Test Case: 607 | Input/Output: [(86 -99 13 24) -99]
Test Case: 608 | Input/Output: [(-100 4 -69 48) -100]
Test Case: 609 | Input/Output: [(-6 -21 38 48) -21]
Test Case: 610 | Input/Output: [(-100 9 16 19) -100]
Test Case: 611 | Input/Output: [(24 8 -57 99) -57]
Test Case: 612 | Input/Output: [(45 70 -16 23) -16]
Test Case: 613 | Input/Output: [(-23 7 -29 -42) -42]
Test Case: 614 | Input/Output: [(-54 -42 51 -90) -90]
Test Case: 615 | Input/Output: [(88 49 76 39) 39]
Test Case: 616 | Input/Output: [(-82 -33 -45 -39) -82]
Test Case: 617 | Input/Output: [(65 -33 -79 -60) -79]
Test Case: 618 | Input/Output: [(-56 56 26 -77) -77]
Test Case: 619 | Input/Output: [(69 -26 -90 -12) -90]
Test Case: 620 | Input/Output: [(80 -66 -4 17) -66]
Test Case: 621 | Input/Output: [(97 -43 32 -99) -99]
Test Case: 622 | Input/Output: [(14 48 48 -63) -63]
Test Case: 623 | Input/Output: [(94 81 -61 57) -61]
Test Case: 624 | Input/Output: [(57 19 -47 -48) -48]
Test Case: 625 | Input/Output: [(65 -22 -4 65) -22]
Test Case: 626 | Input/Output: [(-14 -48 -85 12) -85]
Test Case: 627 | Input/Output: [(58 -57 44 85) -57]
Test Case: 628 | Input/Output: [(-26 -85 -73 -1) -85]
Test Case: 629 | Input/Output: [(-95 -4 -47 -7) -95]
Test Case: 630 | Input/Output: [(-8 28 -78 45) -78]
Test Case: 631 | Input/Output: [(19 63 97 82) 19]
Test Case: 632 | Input/Output: [(25 -27 94 93) -27]
Test Case: 633 | Input/Output: [(66 -90 8 -11) -90]
Test Case: 634 | Input/Output: [(-85 27 24 -40) -85]
Test Case: 635 | Input/Output: [(56 57 35 -86) -86]
Test Case: 636 | Input/Output: [(-42 -50 -15 -24) -50]
Test Case: 637 | Input/Output: [(-86 89 12 73) -86]
Test Case: 638 | Input/Output: [(39 85 -50 -33) -50]
Test Case: 639 | Input/Output: [(41 -57 83 40) -57]
Test Case: 640 | Input/Output: [(-72 52 -17 -64) -72]
Test Case: 641 | Input/Output: [(-90 -62 -53 55) -90]
Test Case: 642 | Input/Output: [(-18 0 31 -77) -77]
Test Case: 643 | Input/Output: [(-14 -10 2 -52) -52]
Test Case: 644 | Input/Output: [(89 45 -8 43) -8]
Test Case: 645 | Input/Output: [(-16 -77 -49 20) -77]
Test Case: 646 | Input/Output: [(93 -34 -76 -65) -76]
Test Case: 647 | Input/Output: [(-15 19 19 -91) -91]
Test Case: 648 | Input/Output: [(74 56 56 -55) -55]
Test Case: 649 | Input/Output: [(-68 27 25 77) -68]
Test Case: 650 | Input/Output: [(-60 88 -80 -38) -80]
Test Case: 651 | Input/Output: [(41 28 -97 -68) -97]
Test Case: 652 | Input/Output: [(8 79 22 -17) -17]
Test Case: 653 | Input/Output: [(-34 18 -97 -32) -97]
Test Case: 654 | Input/Output: [(23 -81 12 12) -81]
Test Case: 655 | Input/Output: [(-93 -48 -87 46) -93]
Test Case: 656 | Input/Output: [(63 -44 -65 30) -65]
Test Case: 657 | Input/Output: [(-26 71 -43 93) -43]
Test Case: 658 | Input/Output: [(98 81 34 -97) -97]
Test Case: 659 | Input/Output: [(68 36 -16 50) -16]
Test Case: 660 | Input/Output: [(-42 -38 84 40) -42]
Test Case: 661 | Input/Output: [(-81 20 -26 100) -81]
Test Case: 662 | Input/Output: [(58 49 -65 13) -65]
Test Case: 663 | Input/Output: [(-84 56 -10 54) -84]
Test Case: 664 | Input/Output: [(60 85 87 18) 18]
Test Case: 665 | Input/Output: [(70 -28 81 75) -28]
Test Case: 666 | Input/Output: [(-70 19 5 -22) -70]
Test Case: 667 | Input/Output: [(-61 99 8 28) -61]
Test Case: 668 | Input/Output: [(-13 -23 73 -95) -95]
Test Case: 669 | Input/Output: [(-23 -76 -25 75) -76]
Test Case: 670 | Input/Output: [(85 5 -38 -43) -43]
Test Case: 671 | Input/Output: [(-97 64 -95 -34) -97]
Test Case: 672 | Input/Output: [(33 59 50 58) 33]
Test Case: 673 | Input/Output: [(-87 -91 16 -95) -95]
Test Case: 674 | Input/Output: [(28 14 -97 87) -97]
Test Case: 675 | Input/Output: [(-1 14 42 -60) -60]
Test Case: 676 | Input/Output: [(21 -4 -84 -18) -84]
Test Case: 677 | Input/Output: [(70 26 -83 68) -83]
Test Case: 678 | Input/Output: [(55 57 11 -25) -25]
Test Case: 679 | Input/Output: [(39 3 -44 -12) -44]
Test Case: 680 | Input/Output: [(96 -36 -2 22) -36]
Test Case: 681 | Input/Output: [(-95 83 18 -25) -95]
Test Case: 682 | Input/Output: [(82 21 73 -57) -57]
Test Case: 683 | Input/Output: [(-23 56 80 -52) -52]
Test Case: 684 | Input/Output: [(18 -58 -23 -9) -58]
Test Case: 685 | Input/Output: [(58 53 41 31) 31]
Test Case: 686 | Input/Output: [(-78 -27 -16 -27) -78]
Test Case: 687 | Input/Output: [(31 -61 -65 -67) -67]
Test Case: 688 | Input/Output: [(92 -82 -50 44) -82]
Test Case: 689 | Input/Output: [(14 -25 -89 13) -89]
Test Case: 690 | Input/Output: [(34 77 5 46) 5]
Test Case: 691 | Input/Output: [(57 52 45 -2) -2]
Test Case: 692 | Input/Output: [(-28 -77 -84 17) -84]
Test Case: 693 | Input/Output: [(33 29 5 22) 5]
Test Case: 694 | Input/Output: [(-52 23 -69 74) -69]
Test Case: 695 | Input/Output: [(-25 68 -77 -25) -77]
Test Case: 696 | Input/Output: [(-47 92 45 40) -47]
Test Case: 697 | Input/Output: [(37 -99 98 95) -99]
Test Case: 698 | Input/Output: [(-35 28 -47 13) -47]
Test Case: 699 | Input/Output: [(-8 91 50 4) -8]
Test Case: 700 | Input/Output: [(82 9 67 -79) -79]
Test Case: 701 | Input/Output: [(-61 -89 32 -96) -96]
Test Case: 702 | Input/Output: [(-54 42 86 -55) -55]
Test Case: 703 | Input/Output: [(36 -87 -21 -2) -87]
Test Case: 704 | Input/Output: [(-31 -99 25 50) -99]
Test Case: 705 | Input/Output: [(49 25 -54 35) -54]
Test Case: 706 | Input/Output: [(38 -75 63 47) -75]
Test Case: 707 | Input/Output: [(-83 -3 -33 41) -83]
Test Case: 708 | Input/Output: [(-46 -18 -39 -96) -96]
Test Case: 709 | Input/Output: [(23 -39 -25 75) -39]
Test Case: 710 | Input/Output: [(88 -76 -28 -7) -76]
Test Case: 711 | Input/Output: [(10 67 75 -80) -80]
Test Case: 712 | Input/Output: [(-89 -11 -59 -2) -89]
Test Case: 713 | Input/Output: [(-39 63 46 -81) -81]
Test Case: 714 | Input/Output: [(-65 64 31 42) -65]
Test Case: 715 | Input/Output: [(92 -53 15 49) -53]
Test Case: 716 | Input/Output: [(3 -87 -14 41) -87]
Test Case: 717 | Input/Output: [(-80 -43 -92 2) -92]
Test Case: 718 | Input/Output: [(49 -89 -51 -30) -89]
Test Case: 719 | Input/Output: [(20 57 5 -88) -88]
Test Case: 720 | Input/Output: [(-28 60 -69 -30) -69]
Test Case: 721 | Input/Output: [(-69 88 32 92) -69]
Test Case: 722 | Input/Output: [(26 -22 -72 -63) -72]
Test Case: 723 | Input/Output: [(-65 -89 92 -74) -89]
Test Case: 724 | Input/Output: [(51 -12 30 -43) -43]
Test Case: 725 | Input/Output: [(10 54 -63 35) -63]
Test Case: 726 | Input/Output: [(90 -60 -94 42) -94]
Test Case: 727 | Input/Output: [(66 -88 12 92) -88]
Test Case: 728 | Input/Output: [(31 90 -84 -7) -84]
Test Case: 729 | Input/Output: [(91 -53 21 -36) -53]
Test Case: 730 | Input/Output: [(99 58 76 -89) -89]
Test Case: 731 | Input/Output: [(-69 91 5 60) -69]
Test Case: 732 | Input/Output: [(-35 -75 25 -53) -75]
Test Case: 733 | Input/Output: [(61 56 -100 0) -100]
Test Case: 734 | Input/Output: [(-45 -16 -9 -36) -45]
Test Case: 735 | Input/Output: [(-2 -22 40 -56) -56]
Test Case: 736 | Input/Output: [(-99 -67 -37 37) -99]
Test Case: 737 | Input/Output: [(11 -98 -47 -37) -98]
Test Case: 738 | Input/Output: [(10 -99 48 69) -99]
Test Case: 739 | Input/Output: [(-32 -83 22 46) -83]
Test Case: 740 | Input/Output: [(17 100 -55 67) -55]
Test Case: 741 | Input/Output: [(-60 -7 30 -26) -60]
Test Case: 742 | Input/Output: [(84 35 87 -39) -39]
Test Case: 743 | Input/Output: [(34 -96 38 -65) -96]
Test Case: 744 | Input/Output: [(-24 68 -79 -14) -79]
Test Case: 745 | Input/Output: [(-96 41 -25 -82) -96]
Test Case: 746 | Input/Output: [(-1 -4 -98 -45) -98]
Test Case: 747 | Input/Output: [(-57 -43 58 -26) -57]
Test Case: 748 | Input/Output: [(-26 -39 -88 15) -88]
Test Case: 749 | Input/Output: [(-91 -38 13 5) -91]
Test Case: 750 | Input/Output: [(87 -85 -16 86) -85]
Test Case: 751 | Input/Output: [(68 30 -71 66) -71]
Test Case: 752 | Input/Output: [(68 40 -14 -27) -27]
Test Case: 753 | Input/Output: [(62 -60 84 -51) -60]
Test Case: 754 | Input/Output: [(-92 -97 -72 25) -97]
Test Case: 755 | Input/Output: [(73 -71 -83 -78) -83]
Test Case: 756 | Input/Output: [(-77 4 61 -37) -77]
Test Case: 757 | Input/Output: [(97 -31 72 -28) -31]
Test Case: 758 | Input/Output: [(-57 27 9 -33) -57]
Test Case: 759 | Input/Output: [(-62 30 59 45) -62]
Test Case: 760 | Input/Output: [(67 -5 100 32) -5]
Test Case: 761 | Input/Output: [(-6 22 -5 -50) -50]
Test Case: 762 | Input/Output: [(-78 6 3 1) -78]
Test Case: 763 | Input/Output: [(54 -23 10 72) -23]
Test Case: 764 | Input/Output: [(-76 91 14 -88) -88]
Test Case: 765 | Input/Output: [(-84 -33 88 -26) -84]
Test Case: 766 | Input/Output: [(60 5 -67 33) -67]
Test Case: 767 | Input/Output: [(73 41 31 -26) -26]
Test Case: 768 | Input/Output: [(-95 -82 -61 55) -95]
Test Case: 769 | Input/Output: [(-30 21 63 -19) -30]
Test Case: 770 | Input/Output: [(-11 -26 -72 67) -72]
Test Case: 771 | Input/Output: [(16 11 86 -5) -5]
Test Case: 772 | Input/Output: [(-69 -9 -58 -22) -69]
Test Case: 773 | Input/Output: [(0 85 72 -80) -80]
Test Case: 774 | Input/Output: [(-41 -15 -11 -81) -81]
Test Case: 775 | Input/Output: [(-66 91 47 55) -66]
Test Case: 776 | Input/Output: [(-14 53 -51 -22) -51]
Test Case: 777 | Input/Output: [(-14 62 49 0) -14]
Test Case: 778 | Input/Output: [(54 -51 14 -9) -51]
Test Case: 779 | Input/Output: [(-81 86 51 0) -81]
Test Case: 780 | Input/Output: [(79 63 -83 -71) -83]
Test Case: 781 | Input/Output: [(-81 24 -26 -37) -81]
Test Case: 782 | Input/Output: [(8 -21 -94 17) -94]
Test Case: 783 | Input/Output: [(-24 -64 8 65) -64]
Test Case: 784 | Input/Output: [(4 33 -71 32) -71]
Test Case: 785 | Input/Output: [(86 -95 -69 -50) -95]
Test Case: 786 | Input/Output: [(63 78 76 -16) -16]
Test Case: 787 | Input/Output: [(-57 -54 20 -29) -57]
Test Case: 788 | Input/Output: [(52 -77 -42 -64) -77]
Test Case: 789 | Input/Output: [(-43 -1 50 93) -43]
Test Case: 790 | Input/Output: [(32 39 -21 99) -21]
Test Case: 791 | Input/Output: [(4 -90 -62 -36) -90]
Test Case: 792 | Input/Output: [(21 1 -31 -76) -76]
Test Case: 793 | Input/Output: [(-15 5 96 -23) -23]
Test Case: 794 | Input/Output: [(-21 36 63 -93) -93]
Test Case: 795 | Input/Output: [(24 -43 29 75) -43]
Test Case: 796 | Input/Output: [(25 -81 -86 73) -86]
Test Case: 797 | Input/Output: [(74 46 73 -25) -25]
Test Case: 798 | Input/Output: [(94 14 60 -3) -3]
Test Case: 799 | Input/Output: [(-22 84 -30 7) -30]
Test Case: 800 | Input/Output: [(33 -49 96 95) -49]
Test Case: 801 | Input/Output: [(-2 76 -57 -55) -57]
Test Case: 802 | Input/Output: [(-18 -100 -46 -100) -100]
Test Case: 803 | Input/Output: [(-23 -6 -60 59) -60]
Test Case: 804 | Input/Output: [(-69 -8 -49 67) -69]
Test Case: 805 | Input/Output: [(75 -31 -60 15) -60]
Test Case: 806 | Input/Output: [(-10 -6 -34 -96) -96]
Test Case: 807 | Input/Output: [(-21 54 84 -86) -86]
Test Case: 808 | Input/Output: [(-64 -8 63 -38) -64]
Test Case: 809 | Input/Output: [(-35 -89 99 -89) -89]
Test Case: 810 | Input/Output: [(84 75 -95 -98) -98]
Test Case: 811 | Input/Output: [(33 47 -63 14) -63]
Test Case: 812 | Input/Output: [(-51 56 31 64) -51]
Test Case: 813 | Input/Output: [(-59 -99 -94 2) -99]
Test Case: 814 | Input/Output: [(100 76 -53 -38) -53]
Test Case: 815 | Input/Output: [(-65 0 24 86) -65]
Test Case: 816 | Input/Output: [(-17 61 58 42) -17]
Test Case: 817 | Input/Output: [(31 -65 -3 15) -65]
Test Case: 818 | Input/Output: [(-77 22 -17 -19) -77]
Test Case: 819 | Input/Output: [(-57 -42 -87 59) -87]
Test Case: 820 | Input/Output: [(3 -13 -78 62) -78]
Test Case: 821 | Input/Output: [(93 -13 60 -1) -13]
Test Case: 822 | Input/Output: [(-34 96 70 98) -34]
Test Case: 823 | Input/Output: [(47 -84 33 -70) -84]
Test Case: 824 | Input/Output: [(74 -76 -23 -78) -78]
Test Case: 825 | Input/Output: [(-64 16 7 85) -64]
Test Case: 826 | Input/Output: [(-6 -18 40 -20) -20]
Test Case: 827 | Input/Output: [(99 10 -28 3) -28]
Test Case: 828 | Input/Output: [(86 -87 95 11) -87]
Test Case: 829 | Input/Output: [(49 -100 -12 100) -100]
Test Case: 830 | Input/Output: [(21 48 -88 63) -88]
Test Case: 831 | Input/Output: [(27 -39 -6 -4) -39]
Test Case: 832 | Input/Output: [(35 26 58 -43) -43]
Test Case: 833 | Input/Output: [(-11 -99 -3 -35) -99]
Test Case: 834 | Input/Output: [(-16 -68 84 70) -68]
Test Case: 835 | Input/Output: [(61 -91 45 -29) -91]
Test Case: 836 | Input/Output: [(79 62 95 -69) -69]
Test Case: 837 | Input/Output: [(16 59 -18 81) -18]
Test Case: 838 | Input/Output: [(-54 -78 39 -5) -78]
Test Case: 839 | Input/Output: [(-29 -33 26 -42) -42]
Test Case: 840 | Input/Output: [(-18 -48 19 87) -48]
Test Case: 841 | Input/Output: [(1 -24 -87 -62) -87]
Test Case: 842 | Input/Output: [(46 -36 37 -53) -53]
Test Case: 843 | Input/Output: [(-84 60 49 -83) -84]
Test Case: 844 | Input/Output: [(-27 1 -38 79) -38]
Test Case: 845 | Input/Output: [(-65 -90 -39 93) -90]
Test Case: 846 | Input/Output: [(88 21 35 89) 21]
Test Case: 847 | Input/Output: [(-89 87 -36 -18) -89]
Test Case: 848 | Input/Output: [(51 59 54 -22) -22]
Test Case: 849 | Input/Output: [(-58 -53 94 -36) -58]
Test Case: 850 | Input/Output: [(83 45 53 19) 19]
Test Case: 851 | Input/Output: [(1 56 5 18) 1]
Test Case: 852 | Input/Output: [(-79 -98 98 97) -98]
Test Case: 853 | Input/Output: [(55 -28 42 -10) -28]
Test Case: 854 | Input/Output: [(-18 -8 -73 14) -73]
Test Case: 855 | Input/Output: [(-47 -99 -65 17) -99]
Test Case: 856 | Input/Output: [(10 76 87 -42) -42]
Test Case: 857 | Input/Output: [(-19 -79 -20 -86) -86]
Test Case: 858 | Input/Output: [(-5 -77 41 0) -77]
Test Case: 859 | Input/Output: [(48 31 -60 84) -60]
Test Case: 860 | Input/Output: [(-90 -75 -79 25) -90]
Test Case: 861 | Input/Output: [(81 -25 -11 -41) -41]
Test Case: 862 | Input/Output: [(-19 55 -98 -1) -98]
Test Case: 863 | Input/Output: [(88 97 -73 51) -73]
Test Case: 864 | Input/Output: [(-79 -35 -3 60) -79]
Test Case: 865 | Input/Output: [(-26 10 -97 -12) -97]
Test Case: 866 | Input/Output: [(56 99 -29 -42) -42]
Test Case: 867 | Input/Output: [(-45 29 34 -24) -45]
Test Case: 868 | Input/Output: [(62 -26 -69 -96) -96]
Test Case: 869 | Input/Output: [(-67 -4 55 67) -67]
Test Case: 870 | Input/Output: [(-84 55 -28 -58) -84]
Test Case: 871 | Input/Output: [(-67 66 62 48) -67]
Test Case: 872 | Input/Output: [(-94 83 -52 7) -94]
Test Case: 873 | Input/Output: [(-69 13 -31 -56) -69]
Test Case: 874 | Input/Output: [(10 -60 -16 -30) -60]
Test Case: 875 | Input/Output: [(-18 12 -70 -87) -87]
Test Case: 876 | Input/Output: [(-82 -23 -84 -68) -84]
Test Case: 877 | Input/Output: [(-34 31 71 -35) -35]
Test Case: 878 | Input/Output: [(88 -61 49 56) -61]
Test Case: 879 | Input/Output: [(52 18 61 -20) -20]
Test Case: 880 | Input/Output: [(-75 78 59 -12) -75]
Test Case: 881 | Input/Output: [(-65 51 66 7) -65]
Test Case: 882 | Input/Output: [(-93 42 -33 -98) -98]
Test Case: 883 | Input/Output: [(51 -21 -11 64) -21]
Test Case: 884 | Input/Output: [(46 80 -85 14) -85]
Test Case: 885 | Input/Output: [(-15 37 26 -36) -36]
Test Case: 886 | Input/Output: [(37 4 -89 -92) -92]
Test Case: 887 | Input/Output: [(56 55 -50 -28) -50]
Test Case: 888 | Input/Output: [(50 68 -85 -17) -85]
Test Case: 889 | Input/Output: [(-89 -8 -29 7) -89]
Test Case: 890 | Input/Output: [(23 86 41 -56) -56]
Test Case: 891 | Input/Output: [(-72 -42 -99 90) -99]
Test Case: 892 | Input/Output: [(1 -59 -49 -56) -59]
Test Case: 893 | Input/Output: [(61 4 90 81) 4]
Test Case: 894 | Input/Output: [(-95 -63 -38 78) -95]
Test Case: 895 | Input/Output: [(-21 6 -28 -52) -52]
Test Case: 896 | Input/Output: [(94 -11 -37 34) -37]
Test Case: 897 | Input/Output: [(-21 -38 -43 -24) -43]
Test Case: 898 | Input/Output: [(-19 -91 -89 -31) -91]
Test Case: 899 | Input/Output: [(-42 -59 -10 -19) -59]
Test Case: 900 | Input/Output: [(92 83 30 2) 2]
Test Case: 901 | Input/Output: [(-90 67 66 75) -90]
Test Case: 902 | Input/Output: [(-70 13 -51 4) -70]
Test Case: 903 | Input/Output: [(-83 31 69 -64) -83]
Test Case: 904 | Input/Output: [(-42 42 -76 5) -76]
Test Case: 905 | Input/Output: [(6 -32 -51 36) -51]
Test Case: 906 | Input/Output: [(44 52 11 -12) -12]
Test Case: 907 | Input/Output: [(-44 -70 62 -2) -70]
Test Case: 908 | Input/Output: [(-62 62 25 24) -62]
Test Case: 909 | Input/Output: [(11 -81 36 -51) -81]
Test Case: 910 | Input/Output: [(-40 -6 -97 -26) -97]
Test Case: 911 | Input/Output: [(-30 5 -90 23) -90]
Test Case: 912 | Input/Output: [(-61 15 94 -99) -99]
Test Case: 913 | Input/Output: [(35 -42 81 55) -42]
Test Case: 914 | Input/Output: [(5 100 96 -52) -52]
Test Case: 915 | Input/Output: [(17 -32 7 -40) -40]
Test Case: 916 | Input/Output: [(-6 70 75 -18) -18]
Test Case: 917 | Input/Output: [(-40 22 -16 1) -40]
Test Case: 918 | Input/Output: [(-24 -34 -44 -70) -70]
Test Case: 919 | Input/Output: [(-98 -27 -54 77) -98]
Test Case: 920 | Input/Output: [(-35 83 -33 -8) -35]
Test Case: 921 | Input/Output: [(42 66 39 83) 39]
Test Case: 922 | Input/Output: [(39 -31 34 -45) -45]
Test Case: 923 | Input/Output: [(-100 64 98 7) -100]
Test Case: 924 | Input/Output: [(57 44 77 6) 6]
Test Case: 925 | Input/Output: [(8 99 42 35) 8]
Test Case: 926 | Input/Output: [(9 -63 -83 22) -83]
Test Case: 927 | Input/Output: [(95 39 14 -32) -32]
Test Case: 928 | Input/Output: [(85 48 67 -22) -22]
Test Case: 929 | Input/Output: [(-53 -94 93 -27) -94]
Test Case: 930 | Input/Output: [(-78 98 -69 -16) -78]
Test Case: 931 | Input/Output: [(21 -17 -5 42) -17]
Test Case: 932 | Input/Output: [(-56 -39 89 50) -56]
Test Case: 933 | Input/Output: [(-44 59 -19 62) -44]
Test Case: 934 | Input/Output: [(-9 33 12 50) -9]
Test Case: 935 | Input/Output: [(42 -89 -50 11) -89]
Test Case: 936 | Input/Output: [(-69 100 -32 -1) -69]
Test Case: 937 | Input/Output: [(27 3 -45 53) -45]
Test Case: 938 | Input/Output: [(-22 -94 70 -81) -94]
Test Case: 939 | Input/Output: [(-31 -12 -88 91) -88]
Test Case: 940 | Input/Output: [(-41 -88 -90 34) -90]
Test Case: 941 | Input/Output: [(32 86 -54 -15) -54]
Test Case: 942 | Input/Output: [(-82 48 0 20) -82]
Test Case: 943 | Input/Output: [(34 91 -23 -65) -65]
Test Case: 944 | Input/Output: [(-65 62 57 -67) -67]
Test Case: 945 | Input/Output: [(95 61 81 0) 0]
Test Case: 946 | Input/Output: [(-46 17 -51 68) -51]
Test Case: 947 | Input/Output: [(-95 -56 40 -17) -95]
Test Case: 948 | Input/Output: [(-88 -90 -40 38) -90]
Test Case: 949 | Input/Output: [(15 -16 2 16) -16]
Test Case: 950 | Input/Output: [(-15 -80 26 8) -80]
Test Case: 951 | Input/Output: [(-23 -16 -22 -41) -41]
Test Case: 952 | Input/Output: [(27 -44 -21 52) -44]
Test Case: 953 | Input/Output: [(20 -100 -20 -3) -100]
Test Case: 954 | Input/Output: [(17 65 55 -14) -14]
Test Case: 955 | Input/Output: [(65 38 12 -85) -85]
Test Case: 956 | Input/Output: [(-4 62 40 -73) -73]
Test Case: 957 | Input/Output: [(-1 -77 -72 -86) -86]
Test Case: 958 | Input/Output: [(-10 -68 46 -96) -96]
Test Case: 959 | Input/Output: [(-84 -84 -58 11) -84]
Test Case: 960 | Input/Output: [(-94 -60 -98 7) -98]
Test Case: 961 | Input/Output: [(-27 -77 69 -50) -77]
Test Case: 962 | Input/Output: [(-18 -23 85 95) -23]
Test Case: 963 | Input/Output: [(-33 -56 78 -59) -59]
Test Case: 964 | Input/Output: [(34 -74 44 41) -74]
Test Case: 965 | Input/Output: [(42 -17 -83 -67) -83]
Test Case: 966 | Input/Output: [(29 86 6 -72) -72]
Test Case: 967 | Input/Output: [(18 84 33 -46) -46]
Test Case: 968 | Input/Output: [(-53 -75 -15 -54) -75]
Test Case: 969 | Input/Output: [(56 11 32 47) 11]
Test Case: 970 | Input/Output: [(34 49 -74 50) -74]
Test Case: 971 | Input/Output: [(-36 36 52 58) -36]
Test Case: 972 | Input/Output: [(-85 30 -94 88) -94]
Test Case: 973 | Input/Output: [(10 -6 18 12) -6]
Test Case: 974 | Input/Output: [(11 26 -54 -70) -70]
Test Case: 975 | Input/Output: [(-39 -8 -81 -59) -81]
Test Case: 976 | Input/Output: [(-42 64 93 55) -42]
Test Case: 977 | Input/Output: [(-64 93 33 -32) -64]
Test Case: 978 | Input/Output: [(89 -62 60 72) -62]
Test Case: 979 | Input/Output: [(100 -39 -71 2) -71]
Test Case: 980 | Input/Output: [(-9 -39 -41 -15) -41]
Test Case: 981 | Input/Output: [(33 25 28 58) 25]
Test Case: 982 | Input/Output: [(38 77 56 -44) -44]
Test Case: 983 | Input/Output: [(79 -22 87 -60) -60]
Test Case: 984 | Input/Output: [(-81 -15 58 -23) -81]
Test Case: 985 | Input/Output: [(5 -73 -4 8) -73]
Test Case: 986 | Input/Output: [(-96 -33 54 -35) -96]
Test Case: 987 | Input/Output: [(83 -99 -65 -4) -99]
Test Case: 988 | Input/Output: [(4 32 -54 90) -54]
Test Case: 989 | Input/Output: [(11 -56 9 -19) -56]
Test Case: 990 | Input/Output: [(32 23 24 96) 23]
Test Case: 991 | Input/Output: [(-91 -32 79 75) -91]
Test Case: 992 | Input/Output: [(92 24 -77 -57) -77]
Test Case: 993 | Input/Output: [(6 -47 -40 17) -47]
Test Case: 994 | Input/Output: [(-58 -50 -22 0) -58]
Test Case: 995 | Input/Output: [(6 -13 -55 46) -55]
Test Case: 996 | Input/Output: [(-44 -29 12 38) -44]
Test Case: 997 | Input/Output: [(69 87 52 -21) -21]
Test Case: 998 | Input/Output: [(30 -65 66 6) -65]
Test Case: 999 | Input/Output: [(-50 21 -7 19) -50]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 20 85 11 39 -48 -76 -103 77 -67 -61 58 49 110 -121 6 33
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[100 -8 100 100] -8] [[58 58 74 58] 58] [[19 19 73 19] 19] [[-66 -37 -37 -37] -66] [[94 94 -68 94] -68] [[69 -99 69 69] -99] [[-86 -6 -86 -86] -86] [[-35 0 -35 -35] -35] [[-66 -66 -66 -66] -66] [[80 -60 -60 -60] -60] [(86 86 86 86) 86] [(90 90 90 90) 90] [(-45 -45 -45 -45) -45] [(-34 -34 -34 -34) -34] [(4 4 4 4) 4] [(27 39 56 39) 27] [(75 17 62 30) 17] [(85 35 57 49) 35] [(52 30 73 65) 30] [(21 55 81 24) 21] [(54 90 99 87) 54] [(73 74 28 17) 17] [(68 59 44 62) 44] [(51 80 45 83) 45] [(8 28 63 76) 8] [(40 46 90 30) 30] [(14 73 45 19) 14] [(53 28 40 50) 28] [(3 70 10 16) 3] [(62 74 95 60) 60] [(1 6 77 68) 1] [(80 1 77 17) 1] [(52 43 32 90) 32] [(66 94 69 0) 0] [(87 90 3 19) 3] [(-6 56 -71 -96) -96] [(19 -57 47 4) -57] [(79 41 93 58) 41] [(-93 50 34 63) -93] [(44 38 1 -6) -6] [(88 -4 -29 -39) -39] [(96 22 56 12) 12] [(-68 -43 89 -28) -68] [(41 86 -82 -91) -91] [(19 21 34 -89) -89] [(-38 98 2 46) -38] [(-52 58 41 81) -52] [(-12 26 97 96) -12] [(16 64 -95 74) -95] [(-12 60 82 98) -12] [(26 47 -42 -19) -42] [(73 -16 50 93) -16] [(49 -75 -73 71) -75] [(9 -43 -71 20) -71] [(40 -46 89 -56) -56] [(54 18 -33 35) -33] [(-4 -32 86 -60) -60] [(-9 -66 -12 79) -66] [(-29 -15 86 -50) -50] [(35 93 20 58) 20] [(-67 29 97 -14) -67] [(-24 78 -4 67) -24] [(66 91 -82 38) -82] [(85 56 78 62) 56] [(92 17 -55 -99) -99] [(27 37 3 -3) -3] [(36 37 86 -77) -77] [(-85 -45 94 -47) -85] [(68 -10 29 44) -10] [(-63 24 17 92) -63] [(-57 -41 -82 -71) -82] [(19 28 -15 -26) -26] [(-64 37 -8 -60) -64] [(-46 -35 65 -3) -46] [(65 -77 100 -16) -77] [(19 -76 -63 23) -76] [(-85 38 -36 -40) -85] [(-46 97 -47 66) -47] [(-49 -76 -80 69) -80] [(-59 -72 -84 -93) -93] [(-88 -82 -52 -97) -97] [(-56 -61 -19 22) -61] [(77 85 72 29) 29] [(73 66 -27 46) -27] [(-58 24 78 -68) -68] [(-98 31 11 -29) -98] [(83 19 23 80) 19] [(31 -28 21 41) -28] [(-61 -22 5 12) -61] [(50 -73 -58 29) -73] [(-36 70 56 -76) -76] [(3 -52 -88 -39) -88] [(98 4 -69 66) -69] [(53 67 3 36) 3] [(-87 37 -23 49) -87])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -8                  | Program output: -8                 
Correct output: 58                  | Program output: 58                 
Correct output: 19                  | Program output: 19                 
Correct output: -66                 | Program output: -37                
Correct output: -68                 | Program output: 94                 
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -6                 
Correct output: -35                 | Program output: 0                  
Correct output: -66                 | Program output: -66                
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 90                  | Program output: 90                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: 4                   | Program output: 4                  
Correct output: 27                  | Program output: 39                 
Correct output: 17                  | Program output: 17                 
Correct output: 35                  | Program output: 35                 
Correct output: 30                  | Program output: 30                 
Correct output: 21                  | Program output: 55                 
Correct output: 54                  | Program output: 90                 
Correct output: 17                  | Program output: 74                 
Correct output: 44                  | Program output: 59                 
Correct output: 45                  | Program output: 80                 
Correct output: 8                   | Program output: 28                 
Correct output: 30                  | Program output: 46                 
Correct output: 14                  | Program output: 73                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 70                 
Correct output: 60                  | Program output: 74                 
Correct output: 1                   | Program output: 6                  
Correct output: 1                   | Program output: 1                  
Correct output: 32                  | Program output: 43                 
Correct output: 0                   | Program output: 94                 
Correct output: 3                   | Program output: 90                 
Correct output: -96                 | Program output: 56                 
Correct output: -57                 | Program output: -57                
Correct output: 41                  | Program output: 41                 
Correct output: -93                 | Program output: 50                 
Correct output: -6                  | Program output: 38                 
Correct output: -39                 | Program output: -4                 
Correct output: 12                  | Program output: 22                 
Correct output: -68                 | Program output: -43                
Correct output: -91                 | Program output: 86                 
Correct output: -89                 | Program output: 21                 
Correct output: -38                 | Program output: 98                 
Correct output: -52                 | Program output: 58                 
Correct output: -12                 | Program output: 26                 
Correct output: -95                 | Program output: 64                 
Correct output: -12                 | Program output: 60                 
Correct output: -42                 | Program output: 47                 
Correct output: -16                 | Program output: -16                
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -43                
Correct output: -56                 | Program output: -46                
Correct output: -33                 | Program output: 18                 
Correct output: -60                 | Program output: -32                
Correct output: -66                 | Program output: -66                
Correct output: -50                 | Program output: -15                
Correct output: 20                  | Program output: 93                 
Correct output: -67                 | Program output: 29                 
Correct output: -24                 | Program output: 78                 
Correct output: -82                 | Program output: 91                 
Correct output: 56                  | Program output: 56                 
Correct output: -99                 | Program output: 17                 
Correct output: -3                  | Program output: 37                 
Correct output: -77                 | Program output: 37                 
Correct output: -85                 | Program output: -45                
Correct output: -10                 | Program output: -10                
Correct output: -63                 | Program output: 24                 
Correct output: -82                 | Program output: -41                
Correct output: -26                 | Program output: 28                 
Correct output: -64                 | Program output: 37                 
Correct output: -46                 | Program output: -35                
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -85                 | Program output: 38                 
Correct output: -47                 | Program output: 97                 
Correct output: -80                 | Program output: -76                
Correct output: -93                 | Program output: -72                
Correct output: -97                 | Program output: -82                
Correct output: -61                 | Program output: -61                
Correct output: 29                  | Program output: 85                 
Correct output: -27                 | Program output: 66                 
Correct output: -68                 | Program output: 24                 
Correct output: -98                 | Program output: 31                 
Correct output: 19                  | Program output: 19                 
Correct output: -28                 | Program output: -28                
Correct output: -61                 | Program output: -22                
Correct output: -73                 | Program output: -73                
Correct output: -76                 | Program output: 70                 
Correct output: -88                 | Program output: -52                
Correct output: -69                 | Program output: 4                  
Correct output: 3                   | Program output: 67                 
Correct output: -87                 | Program output: 37                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 2, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 2, :instruction exec_do*times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_integer_249} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction tag_integer_561} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*while} {:close 1, :instruction tagged_783} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 1, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_stackdepth} {:close 2, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_flush} {:close 0, :instruction tagged_798} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or})
Lexicase best program: (boolean_invert_second_then_and integer_yankdup exec_do*range (integer_yank) integer_div exec_if (exec_do*while (integer_gte exec_when ()) exec_eq exec_do*times ()) (boolean_frominteger boolean_invert_first_then_and integer_sub exec_empty) boolean_yank integer_fromboolean integer_mult exec_eq boolean_flush boolean_yankdup in3 print_integer exec_y (boolean_xor exec_flush tag_integer_249 exec_s_when_autoconstructing () (exec_noop boolean_eq integer_lt integer_stackdepth) (tag_integer_561) exec_dup_items) in3 exec_stackdepth boolean_xor exec_do*while () tagged_783 integer_eq boolean_not in4 integer_mod in3 exec_if (exec_s () (integer_flush boolean_frominteger exec_empty integer_fromboolean integer_shove print_integer integer_gt) (boolean_invert_first_then_and) exec_do*count (integer_dup_items integer_lt integer_dup_times) exec_stackdepth boolean_rot boolean_pop boolean_yank integer_lt) (boolean_shove exec_dup () integer_stackdepth) boolean_shove integer_sub exec_flush tagged_798 integer_div boolean_dup_times integer_empty print_boolean exec_y (boolean_empty boolean_or) integer_inc exec_k (in4 boolean_stackdepth integer_min exec_stackdepth integer_rot exec_when (integer_pop) exec_s () (boolean_rot exec_dup_times () exec_if () (boolean_dup_times exec_dup_items) integer_yank integer_dup_times exec_eq boolean_xor boolean_not exec_eq integer_gt boolean_or) ()) ())
Lexicase best errors: [0 1 1 1 0 1 1 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 129
Percent parens: 0.225
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 2, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 2, :instruction exec_do*times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_integer_249} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction tag_integer_561} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*while} {:close 1, :instruction tagged_783} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 1, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_stackdepth} {:close 2, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_flush} {:close 0, :instruction tagged_798} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or})
Zero cases best program: (boolean_invert_second_then_and integer_yankdup exec_do*range (integer_yank) integer_div exec_if (exec_do*while (integer_gte exec_when ()) exec_eq exec_do*times ()) (boolean_frominteger boolean_invert_first_then_and integer_sub exec_empty) boolean_yank integer_fromboolean integer_mult exec_eq boolean_flush boolean_yankdup in3 print_integer exec_y (boolean_xor exec_flush tag_integer_249 exec_s_when_autoconstructing () (exec_noop boolean_eq integer_lt integer_stackdepth) (tag_integer_561) exec_dup_items) in3 exec_stackdepth boolean_xor exec_do*while () tagged_783 integer_eq boolean_not in4 integer_mod in3 exec_if (exec_s () (integer_flush boolean_frominteger exec_empty integer_fromboolean integer_shove print_integer integer_gt) (boolean_invert_first_then_and) exec_do*count (integer_dup_items integer_lt integer_dup_times) exec_stackdepth boolean_rot boolean_pop boolean_yank integer_lt) (boolean_shove exec_dup () integer_stackdepth) boolean_shove integer_sub exec_flush tagged_798 integer_div boolean_dup_times integer_empty print_boolean exec_y (boolean_empty boolean_or) integer_inc exec_k (in4 boolean_stackdepth integer_min exec_stackdepth integer_rot exec_when (integer_pop) exec_s () (boolean_rot exec_dup_times () exec_if () (boolean_dup_times exec_dup_items) integer_yank integer_dup_times exec_eq boolean_xor boolean_not exec_eq integer_gt boolean_or) ()) ())
Zero cases best errors: [0 1 1 1 0 1 1 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 129
Percent parens: 0.225
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 2 5 3 6 2 3 2 2 1)
Population mean number of elite cases: 0.03
Count of perfect (error zero) individuals by case: (1 2 5 3 6 2 3 2 2 1)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_rot} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_xor} {:close 2, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction -10} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_div} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_821} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_integer_811} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_rot})
Best program: (boolean_frominteger boolean_eq integer_swap integer_shove boolean_rot boolean_yankdup exec_eq integer_pop exec_s (boolean_xor) (exec_if () () boolean_invert_first_then_and in2 print_integer boolean_flush integer_min -10 integer_eq) (exec_swap (boolean_xor exec_y (integer_dup_items integer_gte) integer_yank boolean_or exec_empty) (exec_dup_items) exec_y_when_autoconstructing (integer_dup_times)) integer_pop exec_shove (exec_rot (boolean_dup_items integer_swap integer_gt integer_div) () (boolean_dup_items exec_do*range (tagged_821 exec_flush) boolean_invert_second_then_and exec_y_when_autoconstructing () integer_shove) integer_dup_times integer_dup_items tag_integer_811 boolean_not boolean_flush) exec_dup_times (integer_add integer_eq exec_rot () () ()))
Errors: [1 0 1 1 0 0 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 52
Size: 72
Percent parens: 0.278
--- Population Statistics ---
Average total errors in population: 9.973
Median total errors in population: 10
Error averages by case: (0.999 0.998 0.995 0.997 0.994 0.998 0.997 0.998 0.998 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.288
Average program size in population (points): 67.599
Average percent parens in population: 0.281
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.266
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 479925
--- Timings ---
Current time: 1559583649589 milliseconds
Total Time:           2.2 seconds
Initialization:       0.1 seconds,  4.5%
Reproduction:         0.7 seconds, 33.9%
Fitness Testing:      1.4 seconds, 61.7%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -8                  | Program output: 100                
Correct output: 58                  | Program output: 58                 
Correct output: 19                  | Program output: 19                 
Correct output: -66                 | Program output: -37                
Correct output: -68                 | Program output: 94                 
Correct output: -99                 | Program output: 69                 
Correct output: -86                 | Program output: -86                
Correct output: -35                 | Program output: -35                
Correct output: -66                 | Program output: -66                
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 90                  | Program output: 90                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: 4                   | Program output: 4                  
Correct output: 27                  | Program output: 39                 
Correct output: 17                  | Program output: 30                 
Correct output: 35                  | Program output: 49                 
Correct output: 30                  | Program output: 65                 
Correct output: 21                  | Program output: 24                 
Correct output: 54                  | Program output: 87                 
Correct output: 17                  | Program output: 17                 
Correct output: 44                  | Program output: 62                 
Correct output: 45                  | Program output: 83                 
Correct output: 8                   | Program output: 76                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 19                 
Correct output: 28                  | Program output: 50                 
Correct output: 3                   | Program output: 16                 
Correct output: 60                  | Program output: 60                 
Correct output: 1                   | Program output: 68                 
Correct output: 1                   | Program output: 17                 
Correct output: 32                  | Program output: 90                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 19                 
Correct output: -96                 | Program output: -96                
Correct output: -57                 | Program output: 4                  
Correct output: 41                  | Program output: 58                 
Correct output: -93                 | Program output: 63                 
Correct output: -6                  | Program output: -6                 
Correct output: -39                 | Program output: -39                
Correct output: 12                  | Program output: 12                 
Correct output: -68                 | Program output: -28                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -38                 | Program output: 46                 
Correct output: -52                 | Program output: 81                 
Correct output: -12                 | Program output: 96                 
Correct output: -95                 | Program output: 74                 
Correct output: -12                 | Program output: 98                 
Correct output: -42                 | Program output: -19                
Correct output: -16                 | Program output: 93                 
Correct output: -75                 | Program output: 71                 
Correct output: -71                 | Program output: 20                 
Correct output: -56                 | Program output: -56                
Correct output: -33                 | Program output: 35                 
Correct output: -60                 | Program output: -60                
Correct output: -66                 | Program output: 79                 
Correct output: -50                 | Program output: -50                
Correct output: 20                  | Program output: 58                 
Correct output: -67                 | Program output: -14                
Correct output: -24                 | Program output: 67                 
Correct output: -82                 | Program output: 38                 
Correct output: 56                  | Program output: 62                 
Correct output: -99                 | Program output: -99                
Correct output: -3                  | Program output: -3                 
Correct output: -77                 | Program output: -77                
Correct output: -85                 | Program output: -47                
Correct output: -10                 | Program output: 44                 
Correct output: -63                 | Program output: 92                 
Correct output: -82                 | Program output: -71                
Correct output: -26                 | Program output: -26                
Correct output: -64                 | Program output: -60                
Correct output: -46                 | Program output: -3                 
Correct output: -77                 | Program output: -16                
Correct output: -76                 | Program output: 23                 
Correct output: -85                 | Program output: -40                
Correct output: -47                 | Program output: 66                 
Correct output: -80                 | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: -97                
Correct output: -61                 | Program output: 22                 
Correct output: 29                  | Program output: 29                 
Correct output: -27                 | Program output: 46                 
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -29                
Correct output: 19                  | Program output: 80                 
Correct output: -28                 | Program output: 41                 
Correct output: -61                 | Program output: 12                 
Correct output: -73                 | Program output: 29                 
Correct output: -76                 | Program output: -76                
Correct output: -88                 | Program output: -39                
Correct output: -69                 | Program output: 66                 
Correct output: 3                   | Program output: 36                 
Correct output: -87                 | Program output: 49                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_swap} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_stackdepth} {:close 2, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_flush} {:close 0, :instruction tagged_798} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or})
Lexicase best program: (boolean_or integer_dup boolean_pop exec_k_when_autoconstructing (integer_eq in4 print_integer exec_yankdup exec_s (exec_do*times (print_boolean exec_k_when_autoconstructing (integer_inc integer_gt integer_yankdup integer_min integer_shove exec_k (integer_yankdup integer_min) (integer_empty boolean_yank integer_min in2 integer_max boolean_swap in2) boolean_invert_second_then_and integer_flush boolean_dup_times integer_eq boolean_swap boolean_or) (integer_lt exec_noop exec_do*count (integer_fromboolean integer_shove print_integer integer_gt) boolean_invert_first_then_and) exec_do*count (integer_dup_items integer_lt integer_dup_times) exec_stackdepth boolean_rot boolean_pop boolean_yank integer_lt) boolean_shove exec_dup () integer_stackdepth) (boolean_shove) () integer_sub exec_flush) (tagged_798 integer_div) boolean_dup_times integer_empty print_boolean exec_y (boolean_empty boolean_or) integer_inc exec_k (in4 boolean_stackdepth integer_min exec_stackdepth integer_rot exec_when (integer_pop) exec_s () (boolean_rot exec_dup_times () exec_if () (boolean_dup_times exec_dup_items) integer_yank integer_dup_times exec_eq boolean_xor boolean_not exec_eq integer_gt boolean_or) ()) ())
Lexicase best errors: [0 1 1 0 0 1 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 111
Percent parens: 0.216
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_swap} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_stackdepth} {:close 2, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_flush} {:close 0, :instruction tagged_798} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or})
Zero cases best program: (boolean_or integer_dup boolean_pop exec_k_when_autoconstructing (integer_eq in4 print_integer exec_yankdup exec_s (exec_do*times (print_boolean exec_k_when_autoconstructing (integer_inc integer_gt integer_yankdup integer_min integer_shove exec_k (integer_yankdup integer_min) (integer_empty boolean_yank integer_min in2 integer_max boolean_swap in2) boolean_invert_second_then_and integer_flush boolean_dup_times integer_eq boolean_swap boolean_or) (integer_lt exec_noop exec_do*count (integer_fromboolean integer_shove print_integer integer_gt) boolean_invert_first_then_and) exec_do*count (integer_dup_items integer_lt integer_dup_times) exec_stackdepth boolean_rot boolean_pop boolean_yank integer_lt) boolean_shove exec_dup () integer_stackdepth) (boolean_shove) () integer_sub exec_flush) (tagged_798 integer_div) boolean_dup_times integer_empty print_boolean exec_y (boolean_empty boolean_or) integer_inc exec_k (in4 boolean_stackdepth integer_min exec_stackdepth integer_rot exec_when (integer_pop) exec_s () (boolean_rot exec_dup_times () exec_if () (boolean_dup_times exec_dup_items) integer_yank integer_dup_times exec_eq boolean_xor boolean_not exec_eq integer_gt boolean_or) ()) ())
Zero cases best errors: [0 1 1 0 0 1 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 111
Percent parens: 0.216
--- Lexicase Population Statistics ---
Count of elite individuals by case: (179 292 93 793 882 320 322 179 292 177)
Population mean number of elite cases: 3.53
Count of perfect (error zero) individuals by case: (179 292 93 793 882 320 322 179 292 177)
Population mean number of perfect (error zero) cases: 3.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction print_exec} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction tag_boolean_171} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_sub} {:close 0, :instruction print_newline} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_add} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_mult} {:close 0, :instruction in4})
Best program: (boolean_or integer_dup boolean_pop exec_k_when_autoconstructing (integer_eq in4 print_integer exec_yankdup exec_s (exec_do*times (print_boolean exec_k_when_autoconstructing (integer_inc integer_gt integer_yankdup integer_min integer_dup_items exec_k (integer_yankdup boolean_xor integer_empty print_integer boolean_eq in3 exec_flush integer_rot print_exec (exec_eq boolean_xor integer_dup_times integer_mod boolean_yank) boolean_yank integer_lte boolean_pop boolean_invert_second_then_and print_integer tag_boolean_171) (exec_while (in3 boolean_and integer_swap integer_sub) print_newline integer_inc boolean_dup boolean_shove exec_do*while (exec_stackdepth) exec_pop (in1 boolean_rot integer_add) integer_gte) integer_mult) (in4))) () ()) ())
Errors: [0 1 1 0 0 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 56
Size: 71
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 6.471
Median total errors in population: 6
Error averages by case: (0.821 0.708 0.907 0.207 0.118 0.68 0.678 0.821 0.708 0.823)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.562
Average program size in population (points): 88.483
Average percent parens in population: 0.241
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.504
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 73
Genome diversity (% unique genomes):	 0.641
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 73
Syntactic diversity (% unique Push programs):	 0.632
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 967013
--- Timings ---
Current time: 1559583652252 milliseconds
Total Time:           5.4 seconds
Initialization:       0.1 seconds,  1.8%
Reproduction:         2.4 seconds, 45.0%
Fitness Testing:      2.0 seconds, 37.6%
Report:               0.8 seconds, 15.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: 100                
Correct output: 58                  | Program output: 58                 
Correct output: 19                  | Program output: 19                 
Correct output: -66                 | Program output: -66                
Correct output: -68                 | Program output: 94                 
Correct output: -99                 | Program output: 69                 
Correct output: -86                 | Program output: -86                
Correct output: -35                 | Program output: -35                
Correct output: -66                 | Program output: -66                
Correct output: -60                 | Program output: 80                 
Correct output: 86                  | Program output: 86                 
Correct output: 90                  | Program output: 90                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: 4                   | Program output: 4                  
Correct output: 27                  | Program output: 27                 
Correct output: 17                  | Program output: 75                 
Correct output: 35                  | Program output: 85                 
Correct output: 30                  | Program output: 52                 
Correct output: 21                  | Program output: 21                 
Correct output: 54                  | Program output: 54                 
Correct output: 17                  | Program output: 73                 
Correct output: 44                  | Program output: 68                 
Correct output: 45                  | Program output: 51                 
Correct output: 8                   | Program output: 8                  
Correct output: 30                  | Program output: 40                 
Correct output: 14                  | Program output: 14                 
Correct output: 28                  | Program output: 53                 
Correct output: 3                   | Program output: 3                  
Correct output: 60                  | Program output: 62                 
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 80                 
Correct output: 32                  | Program output: 52                 
Correct output: 0                   | Program output: 66                 
Correct output: 3                   | Program output: 87                 
Correct output: -96                 | Program output: -6                 
Correct output: -57                 | Program output: 19                 
Correct output: 41                  | Program output: 79                 
Correct output: -93                 | Program output: -93                
Correct output: -6                  | Program output: 44                 
Correct output: -39                 | Program output: 88                 
Correct output: 12                  | Program output: 96                 
Correct output: -68                 | Program output: -68                
Correct output: -91                 | Program output: 41                 
Correct output: -89                 | Program output: 19                 
Correct output: -38                 | Program output: -38                
Correct output: -52                 | Program output: -52                
Correct output: -12                 | Program output: -12                
Correct output: -95                 | Program output: 16                 
Correct output: -12                 | Program output: -12                
Correct output: -42                 | Program output: 26                 
Correct output: -16                 | Program output: 73                 
Correct output: -75                 | Program output: 49                 
Correct output: -71                 | Program output: 9                  
Correct output: -56                 | Program output: 40                 
Correct output: -33                 | Program output: 54                 
Correct output: -60                 | Program output: -4                 
Correct output: -66                 | Program output: -9                 
Correct output: -50                 | Program output: -29                
Correct output: 20                  | Program output: 35                 
Correct output: -67                 | Program output: -67                
Correct output: -24                 | Program output: -24                
Correct output: -82                 | Program output: 66                 
Correct output: 56                  | Program output: 85                 
Correct output: -99                 | Program output: 92                 
Correct output: -3                  | Program output: 27                 
Correct output: -77                 | Program output: 36                 
Correct output: -85                 | Program output: -85                
Correct output: -10                 | Program output: 68                 
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -57                
Correct output: -26                 | Program output: 19                 
Correct output: -64                 | Program output: -64                
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: 65                 
Correct output: -76                 | Program output: 19                 
Correct output: -85                 | Program output: -85                
Correct output: -47                 | Program output: -46                
Correct output: -80                 | Program output: -49                
Correct output: -93                 | Program output: -59                
Correct output: -97                 | Program output: -88                
Correct output: -61                 | Program output: -56                
Correct output: 29                  | Program output: 77                 
Correct output: -27                 | Program output: 73                 
Correct output: -68                 | Program output: -58                
Correct output: -98                 | Program output: -98                
Correct output: 19                  | Program output: 83                 
Correct output: -28                 | Program output: 31                 
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: 50                 
Correct output: -76                 | Program output: -36                
Correct output: -88                 | Program output: 3                  
Correct output: -69                 | Program output: 98                 
Correct output: 3                   | Program output: 53                 
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 1, :instruction tagged_375} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop})
Lexicase best program: (integer_dup_items in3 integer_pop integer_dup_times boolean_shove exec_dup (integer_mult exec_y_when_autoconstructing (integer_lte integer_dup tagged_375) print_integer in4 exec_y_when_autoconstructing () exec_k (boolean_flush integer_dup) () integer_min integer_swap integer_gte integer_mult exec_while (boolean_not boolean_or boolean_empty) exec_s_when_autoconstructing (exec_rot () (boolean_yankdup exec_dup_items boolean_yankdup) (exec_when (integer_dup_times in3 exec_when (exec_s_when_autoconstructing () (boolean_pop) ())))) () ()))
Lexicase best errors: [0 1 0 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 54
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 1, :instruction tagged_375} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop})
Zero cases best program: (integer_dup_items in3 integer_pop integer_dup_times boolean_shove exec_dup (integer_mult exec_y_when_autoconstructing (integer_lte integer_dup tagged_375) print_integer in4 exec_y_when_autoconstructing () exec_k (boolean_flush integer_dup) () integer_min integer_swap integer_gte integer_mult exec_while (boolean_not boolean_or boolean_empty) exec_s_when_autoconstructing (exec_rot () (boolean_yankdup exec_dup_items boolean_yankdup) (exec_when (integer_dup_times in3 exec_when (exec_s_when_autoconstructing () (boolean_pop) ())))) () ()))
Zero cases best errors: [0 1 0 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 54
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (320 212 320 104 104 318 211 104 869 880)
Population mean number of elite cases: 3.44
Count of perfect (error zero) individuals by case: (320 212 320 104 104 318 211 104 869 880)
Population mean number of perfect (error zero) cases: 3.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_471} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tag_boolean_360} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_lt} {:close 0, :instruction tag_boolean_82} {:close 0, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_exec})
Best program: (integer_yankdup integer_min in1 boolean_invert_first_then_and print_integer tagged_471 integer_max in3 exec_y () boolean_rot exec_dup_items integer_dec integer_max boolean_or boolean_invert_second_then_and print_integer exec_dup_times (boolean_and exec_k_when_autoconstructing () (integer_dec integer_fromboolean exec_rot (exec_rot () (exec_eq) (integer_dup_times boolean_xor exec_k_when_autoconstructing (boolean_yankdup integer_yankdup) (tag_boolean_360 in1) print_integer integer_shove) boolean_yankdup boolean_shove print_newline boolean_flush) (integer_inc integer_dec integer_dup_times boolean_stackdepth in1 exec_do*range (boolean_and) boolean_not boolean_rot exec_rot (integer_mod exec_noop) (integer_lt) (tag_boolean_82 in1 print_exec (in3 integer_flush integer_dup_times boolean_dup print_exec ()))) ())))
Errors: [1 1 1 0 0 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 58
Size: 77
Percent parens: 0.247
--- Population Statistics ---
Average total errors in population: 6.558
Median total errors in population: 6
Error averages by case: (0.68 0.788 0.68 0.896 0.896 0.682 0.789 0.896 0.131 0.12)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.765
Average program size in population (points): 80.418
Average percent parens in population: 0.251
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.942
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 59
Genome diversity (% unique genomes):	 0.746
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.737
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1486942
--- Timings ---
Current time: 1559583655494 milliseconds
Total Time:           8.4 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.5 seconds, 53.6%
Fitness Testing:      2.6 seconds, 31.4%
Report:               1.2 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: 100                
Correct output: 58                  | Program output: 58                 
Correct output: 19                  | Program output: 19                 
Correct output: -66                 | Program output: -66                
Correct output: -68                 | Program output: 94                 
Correct output: -99                 | Program output: 69                 
Correct output: -86                 | Program output: -86                
Correct output: -35                 | Program output: -35                
Correct output: -66                 | Program output: -66                
Correct output: -60                 | Program output: 80                 
Correct output: 86                  | Program output: 86                 
Correct output: 90                  | Program output: 90                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: 4                   | Program output: 4                  
Correct output: 27                  | Program output: 27                 
Correct output: 17                  | Program output: 75                 
Correct output: 35                  | Program output: 85                 
Correct output: 30                  | Program output: 52                 
Correct output: 21                  | Program output: 21                 
Correct output: 54                  | Program output: 54                 
Correct output: 17                  | Program output: 73                 
Correct output: 44                  | Program output: 68                 
Correct output: 45                  | Program output: 51                 
Correct output: 8                   | Program output: 8                  
Correct output: 30                  | Program output: 40                 
Correct output: 14                  | Program output: 14                 
Correct output: 28                  | Program output: 53                 
Correct output: 3                   | Program output: 3                  
Correct output: 60                  | Program output: 62                 
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 80                 
Correct output: 32                  | Program output: 52                 
Correct output: 0                   | Program output: 66                 
Correct output: 3                   | Program output: 87                 
Correct output: -96                 | Program output: -6                 
Correct output: -57                 | Program output: 19                 
Correct output: 41                  | Program output: 79                 
Correct output: -93                 | Program output: -93                
Correct output: -6                  | Program output: 44                 
Correct output: -39                 | Program output: 88                 
Correct output: 12                  | Program output: 96                 
Correct output: -68                 | Program output: -68                
Correct output: -91                 | Program output: 41                 
Correct output: -89                 | Program output: 19                 
Correct output: -38                 | Program output: -38                
Correct output: -52                 | Program output: -52                
Correct output: -12                 | Program output: -12                
Correct output: -95                 | Program output: 16                 
Correct output: -12                 | Program output: -12                
Correct output: -42                 | Program output: 26                 
Correct output: -16                 | Program output: 73                 
Correct output: -75                 | Program output: 49                 
Correct output: -71                 | Program output: 9                  
Correct output: -56                 | Program output: 40                 
Correct output: -33                 | Program output: 54                 
Correct output: -60                 | Program output: -4                 
Correct output: -66                 | Program output: -9                 
Correct output: -50                 | Program output: -29                
Correct output: 20                  | Program output: 35                 
Correct output: -67                 | Program output: -67                
Correct output: -24                 | Program output: -24                
Correct output: -82                 | Program output: 66                 
Correct output: 56                  | Program output: 85                 
Correct output: -99                 | Program output: 92                 
Correct output: -3                  | Program output: 27                 
Correct output: -77                 | Program output: 36                 
Correct output: -85                 | Program output: -85                
Correct output: -10                 | Program output: 68                 
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -57                
Correct output: -26                 | Program output: 19                 
Correct output: -64                 | Program output: -64                
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: 65                 
Correct output: -76                 | Program output: 19                 
Correct output: -85                 | Program output: -85                
Correct output: -47                 | Program output: -46                
Correct output: -80                 | Program output: -49                
Correct output: -93                 | Program output: -59                
Correct output: -97                 | Program output: -88                
Correct output: -61                 | Program output: -56                
Correct output: 29                  | Program output: 77                 
Correct output: -27                 | Program output: 73                 
Correct output: -68                 | Program output: -58                
Correct output: -98                 | Program output: -98                
Correct output: 19                  | Program output: 83                 
Correct output: -28                 | Program output: 31                 
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: 50                 
Correct output: -76                 | Program output: -36                
Correct output: -88                 | Program output: 3                  
Correct output: -69                 | Program output: 98                 
Correct output: 3                   | Program output: 53                 
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_y} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 1, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_exec_326} {:close 1, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_noop} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s_when_autoconstructing})
Lexicase best program: (exec_yankdup in2 exec_s (in4) (exec_y (integer_dec) integer_shove in3) (in3 exec_rot () (print_integer) (integer_dup_times tag_exec_326 () in1) exec_yankdup exec_when (integer_yank exec_noop) in2) integer_lte exec_while (integer_dup exec_rot () (in1 integer_dec) (boolean_swap) exec_flush integer_mult integer_gt exec_y (exec_do*count (integer_lt exec_stackdepth boolean_swap exec_s_when_autoconstructing () () ()))))
Lexicase best errors: [0 1 1 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 54
Percent parens: 0.352
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 0, :instruction exec_y} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 1, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_exec_326} {:close 1, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_noop} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s_when_autoconstructing})
Zero cases best program: (exec_yankdup in2 exec_s (in4) (exec_y (integer_dec) integer_shove in3) (in3 exec_rot () (print_integer) (integer_dup_times tag_exec_326 () in1) exec_yankdup exec_when (integer_yank exec_noop) in2) integer_lte exec_while (integer_dup exec_rot () (in1 integer_dec) (boolean_swap) exec_flush integer_mult integer_gt exec_y (exec_do*count (integer_lt exec_stackdepth boolean_swap exec_s_when_autoconstructing () () ()))))
Zero cases best errors: [0 1 1 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 54
Percent parens: 0.352
--- Lexicase Population Statistics ---
Count of elite individuals by case: (325 320 317 6 325 6 6 323 326 858)
Population mean number of elite cases: 2.81
Count of perfect (error zero) individuals by case: (325 320 317 6 325 6 6 323 326 858)
Population mean number of perfect (error zero) cases: 2.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction print_newline} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s})
Best program: (in1 integer_mult exec_while (in2 exec_rot (print_newline integer_eq boolean_flush integer_dec) (integer_fromboolean exec_do*times (integer_lte integer_yank) integer_shove exec_yank boolean_or print_integer boolean_and) (boolean_eq) in1 in3 integer_swap integer_mod boolean_dup_items boolean_and boolean_dup) print_integer integer_mult integer_dup integer_fromboolean exec_swap () (integer_add exec_shove (exec_swap (integer_dup) (exec_when (exec_do*count (in1 integer_dec exec_swap (in3) (exec_k_when_autoconstructing (exec_s () () ()) ())))))))
Errors: [0 1 1 1 0 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 43
Size: 63
Percent parens: 0.317
--- Population Statistics ---
Average total errors in population: 7.188
Median total errors in population: 7
Error averages by case: (0.675 0.68 0.683 0.994 0.675 0.994 0.994 0.677 0.674 0.142)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.984
Average program size in population (points): 70.572
Average percent parens in population: 0.267
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.447
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 40
Genome diversity (% unique genomes):	 0.739
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 44
Syntactic diversity (% unique Push programs):	 0.726
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2020531
--- Timings ---
Current time: 1559583658496 milliseconds
Total Time:          11.7 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.6 seconds, 56.6%
Fitness Testing:      3.2 seconds, 27.7%
Report:               1.7 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -8                  | Program output: -8                 
Correct output: 58                  | Program output: 58                 
Correct output: 19                  | Program output: 19                 
Correct output: -66                 | Program output: -37                
Correct output: -68                 | Program output: 94                 
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -6                 
Correct output: -35                 | Program output: 0                  
Correct output: -66                 | Program output: -66                
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 90                  | Program output: 90                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: 4                   | Program output: 4                  
Correct output: 27                  | Program output: 39                 
Correct output: 17                  | Program output: 17                 
Correct output: 35                  | Program output: 35                 
Correct output: 30                  | Program output: 30                 
Correct output: 21                  | Program output: 55                 
Correct output: 54                  | Program output: 90                 
Correct output: 17                  | Program output: 74                 
Correct output: 44                  | Program output: 59                 
Correct output: 45                  | Program output: 80                 
Correct output: 8                   | Program output: 28                 
Correct output: 30                  | Program output: 46                 
Correct output: 14                  | Program output: 73                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 70                 
Correct output: 60                  | Program output: 74                 
Correct output: 1                   | Program output: 6                  
Correct output: 1                   | Program output: 1                  
Correct output: 32                  | Program output: 43                 
Correct output: 0                   | Program output: 94                 
Correct output: 3                   | Program output: 90                 
Correct output: -96                 | Program output: 56                 
Correct output: -57                 | Program output: -57                
Correct output: 41                  | Program output: 41                 
Correct output: -93                 | Program output: 50                 
Correct output: -6                  | Program output: 38                 
Correct output: -39                 | Program output: -4                 
Correct output: 12                  | Program output: 22                 
Correct output: -68                 | Program output: -43                
Correct output: -91                 | Program output: 86                 
Correct output: -89                 | Program output: 21                 
Correct output: -38                 | Program output: 98                 
Correct output: -52                 | Program output: 58                 
Correct output: -12                 | Program output: 26                 
Correct output: -95                 | Program output: 64                 
Correct output: -12                 | Program output: 60                 
Correct output: -42                 | Program output: 47                 
Correct output: -16                 | Program output: -16                
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -43                
Correct output: -56                 | Program output: -46                
Correct output: -33                 | Program output: 18                 
Correct output: -60                 | Program output: -32                
Correct output: -66                 | Program output: -66                
Correct output: -50                 | Program output: -15                
Correct output: 20                  | Program output: 93                 
Correct output: -67                 | Program output: 29                 
Correct output: -24                 | Program output: 78                 
Correct output: -82                 | Program output: 91                 
Correct output: 56                  | Program output: 56                 
Correct output: -99                 | Program output: 17                 
Correct output: -3                  | Program output: 37                 
Correct output: -77                 | Program output: 37                 
Correct output: -85                 | Program output: -45                
Correct output: -10                 | Program output: -10                
Correct output: -63                 | Program output: 24                 
Correct output: -82                 | Program output: -41                
Correct output: -26                 | Program output: 28                 
Correct output: -64                 | Program output: 37                 
Correct output: -46                 | Program output: -35                
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -85                 | Program output: 38                 
Correct output: -47                 | Program output: 97                 
Correct output: -80                 | Program output: -76                
Correct output: -93                 | Program output: -72                
Correct output: -97                 | Program output: -82                
Correct output: -61                 | Program output: -61                
Correct output: 29                  | Program output: 85                 
Correct output: -27                 | Program output: 66                 
Correct output: -68                 | Program output: 24                 
Correct output: -98                 | Program output: 31                 
Correct output: 19                  | Program output: 19                 
Correct output: -28                 | Program output: -28                
Correct output: -61                 | Program output: -22                
Correct output: -73                 | Program output: -73                
Correct output: -76                 | Program output: 70                 
Correct output: -88                 | Program output: -52                
Correct output: -69                 | Program output: 4                  
Correct output: 3                   | Program output: 67                 
Correct output: -87                 | Program output: 37                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction tagged_927} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 1, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_exec_326} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_noop} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s_when_autoconstructing})
Lexicase best program: (boolean_frominteger boolean_eq integer_swap integer_shove tagged_927 boolean_yankdup exec_eq integer_pop exec_s (integer_shove in3) (in3 exec_rot () (print_integer) (integer_dup_times tag_exec_326 () in1 exec_yankdup exec_when (integer_yank exec_noop) in2) integer_lte exec_while (integer_dup exec_rot () (in1 integer_dec) (boolean_swap) exec_flush integer_mult integer_gt exec_y (exec_do*count (integer_lt exec_stackdepth boolean_swap exec_s_when_autoconstructing () () ())))) ())
Lexicase best errors: [1 0 1 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 56
Percent parens: 0.321
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction tagged_927} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 1, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_exec_326} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_noop} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s_when_autoconstructing})
Zero cases best program: (boolean_frominteger boolean_eq integer_swap integer_shove tagged_927 boolean_yankdup exec_eq integer_pop exec_s (integer_shove in3) (in3 exec_rot () (print_integer) (integer_dup_times tag_exec_326 () in1 exec_yankdup exec_when (integer_yank exec_noop) in2) integer_lte exec_while (integer_dup exec_rot () (in1 integer_dec) (boolean_swap) exec_flush integer_mult integer_gt exec_y (exec_do*count (integer_lt exec_stackdepth boolean_swap exec_s_when_autoconstructing () () ())))) ())
Zero cases best errors: [1 0 1 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 56
Percent parens: 0.321
--- Lexicase Population Statistics ---
Count of elite individuals by case: (263 3 640 381 3 868 374 3 216 215)
Population mean number of elite cases: 2.97
Count of perfect (error zero) individuals by case: (263 3 640 381 3 868 374 3 216 215)
Population mean number of perfect (error zero) cases: 2.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 1, :instruction tagged_375} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_noop} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s_when_autoconstructing})
Best program: (exec_yankdup in2 integer_dup tagged_375 print_integer in4 exec_y_when_autoconstructing () exec_k (boolean_flush integer_dup) () integer_min exec_when (integer_yank exec_noop) in2 integer_lte exec_while (integer_dup exec_rot () (in1 integer_dec) (boolean_swap) exec_flush integer_mult integer_gt exec_y (exec_do*count (integer_lt exec_stackdepth boolean_swap exec_s_when_autoconstructing () () ()))))
Errors: [1 0 1 0 0 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 31
Size: 45
Percent parens: 0.311
--- Population Statistics ---
Average total errors in population: 7.034
Median total errors in population: 7
Error averages by case: (0.737 0.997 0.36 0.619 0.997 0.132 0.626 0.997 0.784 0.785)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.463
Average program size in population (points): 66.032
Average percent parens in population: 0.286
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 5.875375
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 33
Genome diversity (% unique genomes):	 0.711
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.704
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2516285
--- Timings ---
Current time: 1559583661637 milliseconds
Total Time:          14.8 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         9.0 seconds, 60.5%
Fitness Testing:      3.8 seconds, 25.4%
Report:               2.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -8                  | Program output: -8                 
Correct output: 58                  | Program output: 58                 
Correct output: 19                  | Program output: 19                 
Correct output: -66                 | Program output: -37                
Correct output: -68                 | Program output: 94                 
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -6                 
Correct output: -35                 | Program output: 0                  
Correct output: -66                 | Program output: -66                
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 90                  | Program output: 90                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: 4                   | Program output: 44                 
Correct output: 27                  | Program output: 39                 
Correct output: 17                  | Program output: 17                 
Correct output: 35                  | Program output: 35                 
Correct output: 30                  | Program output: 30                 
Correct output: 21                  | Program output: 55                 
Correct output: 54                  | Program output: 90                 
Correct output: 17                  | Program output: 74                 
Correct output: 44                  | Program output: 59                 
Correct output: 45                  | Program output: 80                 
Correct output: 8                   | Program output: 28                 
Correct output: 30                  | Program output: 46                 
Correct output: 14                  | Program output: 73                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 70                 
Correct output: 60                  | Program output: 74                 
Correct output: 1                   | Program output: 6                  
Correct output: 1                   | Program output: 1                  
Correct output: 32                  | Program output: 43                 
Correct output: 0                   | Program output: 94                 
Correct output: 3                   | Program output: 90                 
Correct output: -96                 | Program output: 56                 
Correct output: -57                 | Program output: -57                
Correct output: 41                  | Program output: 41                 
Correct output: -93                 | Program output: 50                 
Correct output: -6                  | Program output: 38                 
Correct output: -39                 | Program output: -4                 
Correct output: 12                  | Program output: 22                 
Correct output: -68                 | Program output: -43                
Correct output: -91                 | Program output: 86                 
Correct output: -89                 | Program output: 21                 
Correct output: -38                 | Program output: 98                 
Correct output: -52                 | Program output: 58                 
Correct output: -12                 | Program output: 26                 
Correct output: -95                 | Program output: 64                 
Correct output: -12                 | Program output: 60                 
Correct output: -42                 | Program output: 47                 
Correct output: -16                 | Program output: -16                
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -43                
Correct output: -56                 | Program output: -46                
Correct output: -33                 | Program output: 18                 
Correct output: -60                 | Program output: -32                
Correct output: -66                 | Program output: -66                
Correct output: -50                 | Program output: -15                
Correct output: 20                  | Program output: 93                 
Correct output: -67                 | Program output: 29                 
Correct output: -24                 | Program output: 78                 
Correct output: -82                 | Program output: 91                 
Correct output: 56                  | Program output: 56                 
Correct output: -99                 | Program output: 17                 
Correct output: -3                  | Program output: 37                 
Correct output: -77                 | Program output: 37                 
Correct output: -85                 | Program output: -45                
Correct output: -10                 | Program output: -10                
Correct output: -63                 | Program output: 24                 
Correct output: -82                 | Program output: -41                
Correct output: -26                 | Program output: 28                 
Correct output: -64                 | Program output: 37                 
Correct output: -46                 | Program output: -35                
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -85                 | Program output: 38                 
Correct output: -47                 | Program output: 97                 
Correct output: -80                 | Program output: -76                
Correct output: -93                 | Program output: -72                
Correct output: -97                 | Program output: -82                
Correct output: -61                 | Program output: -61                
Correct output: 29                  | Program output: 85                 
Correct output: -27                 | Program output: 66                 
Correct output: -68                 | Program output: 24                 
Correct output: -98                 | Program output: 31                 
Correct output: 19                  | Program output: 19                 
Correct output: -28                 | Program output: -28                
Correct output: -61                 | Program output: -22                
Correct output: -73                 | Program output: -73                
Correct output: -76                 | Program output: 70                 
Correct output: -88                 | Program output: -52                
Correct output: -69                 | Program output: 4                  
Correct output: 3                   | Program output: 67                 
Correct output: -87                 | Program output: 37                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 1, :instruction tagged_375} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_noop} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s_when_autoconstructing})
Lexicase best program: (exec_yankdup in2 integer_dup tagged_375 print_integer in4 exec_y_when_autoconstructing () exec_k (boolean_flush integer_dup) () integer_min exec_when (integer_yank exec_noop) in2 integer_lte exec_while (integer_dup exec_rot () (in1 integer_dec) (boolean_swap) exec_flush integer_mult integer_gt exec_y (exec_do*count (integer_lt exec_stackdepth boolean_swap exec_s_when_autoconstructing () () ()))))
Lexicase best errors: [1 1 0 0 0 1 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 45
Percent parens: 0.311
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 1, :instruction tagged_375} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_noop} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s_when_autoconstructing})
Zero cases best program: (exec_yankdup in2 integer_dup tagged_375 print_integer in4 exec_y_when_autoconstructing () exec_k (boolean_flush integer_dup) () integer_min exec_when (integer_yank exec_noop) in2 integer_lte exec_while (integer_dup exec_rot () (in1 integer_dec) (boolean_swap) exec_flush integer_mult integer_gt exec_y (exec_do*count (integer_lt exec_stackdepth boolean_swap exec_s_when_autoconstructing () () ()))))
Zero cases best errors: [1 1 0 0 0 1 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 45
Percent parens: 0.311
--- Lexicase Population Statistics ---
Count of elite individuals by case: (74 80 369 370 371 80 140 791 212 213)
Population mean number of elite cases: 2.70
Count of perfect (error zero) individuals by case: (74 80 369 370 371 80 140 791 212 213)
Population mean number of perfect (error zero) cases: 2.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction tagged_927} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 1, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_exec_326} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_noop} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s_when_autoconstructing})
Best program: (boolean_frominteger boolean_eq integer_swap integer_shove tagged_927 boolean_yankdup exec_eq integer_pop exec_s (integer_shove in3) (in3 exec_rot () (print_integer) (integer_dup_times tag_exec_326 () in1 exec_yankdup exec_when (integer_yank exec_noop) in2) integer_lte exec_while (integer_dup exec_rot () (in1 integer_dec) (boolean_swap) exec_flush integer_mult integer_gt exec_y (exec_do*count (integer_lt exec_stackdepth boolean_swap exec_s_when_autoconstructing () () ())))) ())
Errors: [1 1 0 0 0 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 38
Size: 56
Percent parens: 0.321
--- Population Statistics ---
Average total errors in population: 7.3
Median total errors in population: 7
Error averages by case: (0.926 0.92 0.631 0.63 0.629 0.92 0.86 0.209 0.788 0.787)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.145
Average program size in population (points): 59.119
Average percent parens in population: 0.294
Minimum age in population: 5.0
Maximum age in population: 9.4375
Average age in population: 7.6653125
Median age in population: 7.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 93
Genome diversity (% unique genomes):	 0.653
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.644
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2892930
--- Timings ---
Current time: 1559583664314 milliseconds
Total Time:          17.5 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.9 seconds, 62.6%
Fitness Testing:      4.2 seconds, 24.0%
Report:               2.2 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 480
Test mean error for best: 0.48000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: 100                
Correct output: 58                  | Program output: 58                 
Correct output: 19                  | Program output: 19                 
Correct output: -66                 | Program output: -37                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: 69                 
Correct output: -86                 | Program output: -86                
Correct output: -35                 | Program output: -35                
Correct output: -66                 | Program output: -66                
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 90                  | Program output: 90                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: 4                   | Program output: 4                  
Correct output: 27                  | Program output: 39                 
Correct output: 17                  | Program output: 30                 
Correct output: 35                  | Program output: 49                 
Correct output: 30                  | Program output: 65                 
Correct output: 21                  | Program output: 24                 
Correct output: 54                  | Program output: 87                 
Correct output: 17                  | Program output: 17                 
Correct output: 44                  | Program output: 44                 
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 63                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 19                 
Correct output: 28                  | Program output: 40                 
Correct output: 3                   | Program output: 10                 
Correct output: 60                  | Program output: 60                 
Correct output: 1                   | Program output: 68                 
Correct output: 1                   | Program output: 17                 
Correct output: 32                  | Program output: 32                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -71                
Correct output: -57                 | Program output: 4                  
Correct output: 41                  | Program output: 58                 
Correct output: -93                 | Program output: 34                 
Correct output: -6                  | Program output: -6                 
Correct output: -39                 | Program output: -29                
Correct output: 12                  | Program output: 12                 
Correct output: -68                 | Program output: -28                
Correct output: -91                 | Program output: -82                
Correct output: -89                 | Program output: -89                
Correct output: -38                 | Program output: 2                  
Correct output: -52                 | Program output: 41                 
Correct output: -12                 | Program output: 96                 
Correct output: -95                 | Program output: -95                
Correct output: -12                 | Program output: 82                 
Correct output: -42                 | Program output: -42                
Correct output: -16                 | Program output: 50                 
Correct output: -75                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -56                 | Program output: -56                
Correct output: -33                 | Program output: -33                
Correct output: -60                 | Program output: -60                
Correct output: -66                 | Program output: -12                
Correct output: -50                 | Program output: -50                
Correct output: 20                  | Program output: 20                 
Correct output: -67                 | Program output: -14                
Correct output: -24                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: 56                  | Program output: 62                 
Correct output: -99                 | Program output: -55                
Correct output: -3                  | Program output: -3                 
Correct output: -77                 | Program output: -77                
Correct output: -85                 | Program output: -47                
Correct output: -10                 | Program output: 29                 
Correct output: -63                 | Program output: 17                 
Correct output: -82                 | Program output: -82                
Correct output: -26                 | Program output: -15                
Correct output: -64                 | Program output: -8                 
Correct output: -46                 | Program output: -3                 
Correct output: -77                 | Program output: -16                
Correct output: -76                 | Program output: -63                
Correct output: -85                 | Program output: -36                
Correct output: -47                 | Program output: -47                
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: -84                
Correct output: -97                 | Program output: -52                
Correct output: -61                 | Program output: -19                
Correct output: 29                  | Program output: 29                 
Correct output: -27                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -29                
Correct output: 19                  | Program output: 23                 
Correct output: -28                 | Program output: 21                 
Correct output: -61                 | Program output: 5                  
Correct output: -73                 | Program output: -58                
Correct output: -76                 | Program output: -76                
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -69                
Correct output: 3                   | Program output: 3                  
Correct output: -87                 | Program output: -23                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction tag_exec_489} {:close 0, :instruction 4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range})
Lexicase best program: (exec_yankdup in2 in3 in4 in3 integer_min in3 boolean_dup integer_dup_times print_integer tag_exec_489 () 4 exec_flush exec_do*while (boolean_xor) integer_div exec_pop (integer_fromboolean integer_stackdepth) integer_lte exec_do*times () integer_div exec_noop integer_stackdepth integer_dec boolean_eq exec_rot (exec_do*while (exec_shove () exec_eq boolean_dup_times exec_do*range ())) () ())
Lexicase best errors: [1 1 0 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 43
Percent parens: 0.256
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction tag_exec_489} {:close 0, :instruction 4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range})
Zero cases best program: (exec_yankdup in2 in3 in4 in3 integer_min in3 boolean_dup integer_dup_times print_integer tag_exec_489 () 4 exec_flush exec_do*while (boolean_xor) integer_div exec_pop (integer_fromboolean integer_stackdepth) integer_lte exec_do*times () integer_div exec_noop integer_stackdepth integer_dec boolean_eq exec_rot (exec_do*while (exec_shove () exec_eq boolean_dup_times exec_do*range ())) () ())
Zero cases best errors: [1 1 0 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 43
Percent parens: 0.256
--- Lexicase Population Statistics ---
Count of elite individuals by case: (300 188 52 171 169 539 51 788 226 227)
Population mean number of elite cases: 2.71
Count of perfect (error zero) individuals by case: (300 188 52 171 169 539 51 788 226 227)
Population mean number of perfect (error zero) cases: 2.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction tag_exec_489} {:close 0, :instruction 4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range})
Best program: (exec_yankdup in2 in3 in4 in3 integer_min in3 boolean_dup integer_dup_times print_integer tag_exec_489 () 4 exec_flush exec_do*while (boolean_xor) integer_div exec_pop (integer_fromboolean integer_stackdepth) integer_lte exec_do*times () integer_div exec_noop integer_stackdepth integer_dec boolean_eq exec_rot (exec_do*while (exec_shove () exec_eq boolean_dup_times exec_do*range ())) () ())
Errors: [1 1 0 0 0 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 32
Size: 43
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 7.289
Median total errors in population: 7
Error averages by case: (0.7 0.812 0.948 0.829 0.831 0.461 0.949 0.212 0.774 0.773)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.801
Average program size in population (points): 61.0
Average percent parens in population: 0.286
Minimum age in population: 6.0
Maximum age in population: 10.96875
Average age in population: 9.11096875
Median age in population: 9.1875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 47
Genome diversity (% unique genomes):	 0.719
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 51
Syntactic diversity (% unique Push programs):	 0.711
Total error diversity:				 0.007
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.072
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3261347
--- Timings ---
Current time: 1559583666962 milliseconds
Total Time:          20.2 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.0 seconds, 64.2%
Fitness Testing:      4.6 seconds, 22.8%
Report:               2.5 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 378
Test mean error for best: 0.37800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -8                  | Program output: -8                 
Correct output: 58                  | Program output: 58                 
Correct output: 19                  | Program output: 19                 
Correct output: -66                 | Program output: -37                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -86                
Correct output: -35                 | Program output: -35                
Correct output: -66                 | Program output: -66                
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 90                  | Program output: 90                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: 4                   | Program output: 4                  
Correct output: 27                  | Program output: 39                 
Correct output: 17                  | Program output: 17                 
Correct output: 35                  | Program output: 35                 
Correct output: 30                  | Program output: 30                 
Correct output: 21                  | Program output: 24                 
Correct output: 54                  | Program output: 87                 
Correct output: 17                  | Program output: 17                 
Correct output: 44                  | Program output: 59                 
Correct output: 45                  | Program output: 80                 
Correct output: 8                   | Program output: 28                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 19                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 16                 
Correct output: 60                  | Program output: 60                 
Correct output: 1                   | Program output: 6                  
Correct output: 1                   | Program output: 1                  
Correct output: 32                  | Program output: 43                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 19                 
Correct output: -96                 | Program output: -71                
Correct output: -57                 | Program output: -57                
Correct output: 41                  | Program output: 41                 
Correct output: -93                 | Program output: 50                 
Correct output: -6                  | Program output: -6                 
Correct output: -39                 | Program output: -29                
Correct output: 12                  | Program output: 12                 
Correct output: -68                 | Program output: -43                
Correct output: -91                 | Program output: -82                
Correct output: -89                 | Program output: -89                
Correct output: -38                 | Program output: 46                 
Correct output: -52                 | Program output: 58                 
Correct output: -12                 | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: -12                 | Program output: 60                 
Correct output: -42                 | Program output: -42                
Correct output: -16                 | Program output: -16                
Correct output: -75                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -56                 | Program output: -56                
Correct output: -33                 | Program output: -33                
Correct output: -60                 | Program output: -60                
Correct output: -66                 | Program output: -12                
Correct output: -50                 | Program output: -50                
Correct output: 20                  | Program output: 58                 
Correct output: -67                 | Program output: -14                
Correct output: -24                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: 56                  | Program output: 56                 
Correct output: -99                 | Program output: -55                
Correct output: -3                  | Program output: -3                 
Correct output: -77                 | Program output: -77                
Correct output: -85                 | Program output: -47                
Correct output: -10                 | Program output: -10                
Correct output: -63                 | Program output: 24                 
Correct output: -82                 | Program output: -82                
Correct output: -26                 | Program output: -15                
Correct output: -64                 | Program output: -8                 
Correct output: -46                 | Program output: -35                
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -63                
Correct output: -85                 | Program output: -36                
Correct output: -47                 | Program output: -47                
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: -84                
Correct output: -97                 | Program output: -52                
Correct output: -61                 | Program output: -19                
Correct output: 29                  | Program output: 29                 
Correct output: -27                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -29                
Correct output: 19                  | Program output: 19                 
Correct output: -28                 | Program output: -28                
Correct output: -61                 | Program output: -22                
Correct output: -73                 | Program output: -58                
Correct output: -76                 | Program output: -76                
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -69                
Correct output: 3                   | Program output: 36                 
Correct output: -87                 | Program output: -23                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction tag_exec_489} {:close 0, :instruction 4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range})
Lexicase best program: (exec_yankdup in2 in3 integer_swap in3 integer_min in3 boolean_dup integer_dup_times print_integer tag_exec_489 () 4 exec_flush exec_do*while (boolean_xor) integer_div exec_pop (integer_fromboolean integer_stackdepth) integer_lte exec_do*times () integer_div exec_noop integer_stackdepth integer_dec boolean_eq exec_rot (exec_do*while (exec_shove () exec_eq boolean_dup_times exec_do*range ())) () ())
Lexicase best errors: [1 0 1 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 43
Percent parens: 0.256
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction tag_exec_489} {:close 0, :instruction 4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range})
Zero cases best program: (exec_yankdup in2 in3 integer_swap in3 integer_min in3 boolean_dup integer_dup_times print_integer tag_exec_489 () 4 exec_flush exec_do*while (boolean_xor) integer_div exec_pop (integer_fromboolean integer_stackdepth) integer_lte exec_do*times () integer_div exec_noop integer_stackdepth integer_dec boolean_eq exec_rot (exec_do*while (exec_shove () exec_eq boolean_dup_times exec_do*range ())) () ())
Zero cases best errors: [1 0 1 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 43
Percent parens: 0.256
--- Lexicase Population Statistics ---
Count of elite individuals by case: (114 108 429 477 378 920 322 901 110 156)
Population mean number of elite cases: 3.91
Count of perfect (error zero) individuals by case: (114 108 429 477 378 920 322 901 110 156)
Population mean number of perfect (error zero) cases: 3.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction tag_exec_489} {:close 0, :instruction 4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range})
Best program: (exec_yankdup in2 in3 in4 in2 integer_min in3 boolean_dup integer_dup_times print_integer tag_exec_489 () 4 exec_flush exec_do*while (boolean_xor) integer_div exec_pop (integer_fromboolean integer_stackdepth) integer_lte exec_do*times () integer_div exec_noop integer_stackdepth integer_dec boolean_eq exec_rot (exec_do*while (exec_shove () exec_eq boolean_dup_times exec_do*range ())) () ())
Errors: [1 0 0 0 1 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 32
Size: 43
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 6.085
Median total errors in population: 6
Error averages by case: (0.886 0.892 0.571 0.523 0.622 0.08 0.678 0.099 0.89 0.844)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.666
Average program size in population (points): 50.112
Average percent parens in population: 0.267
Minimum age in population: 7.75
Maximum age in population: 12.390625
Average age in population: 10.475921875
Median age in population: 10.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 196
Genome diversity (% unique genomes):	 0.563
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 207
Syntactic diversity (% unique Push programs):	 0.546
Total error diversity:				 0.007
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3616224
--- Timings ---
Current time: 1559583669411 milliseconds
Total Time:          22.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.8 seconds, 65.5%
Fitness Testing:      5.0 seconds, 22.0%
Report:               2.7 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 428
Test mean error for best: 0.42800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: 100                
Correct output: 58                  | Program output: 58                 
Correct output: 19                  | Program output: 19                 
Correct output: -66                 | Program output: -37                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: 69                 
Correct output: -86                 | Program output: -86                
Correct output: -35                 | Program output: -35                
Correct output: -66                 | Program output: -66                
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 90                  | Program output: 90                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: 4                   | Program output: 4                  
Correct output: 27                  | Program output: 39                 
Correct output: 17                  | Program output: 30                 
Correct output: 35                  | Program output: 49                 
Correct output: 30                  | Program output: 65                 
Correct output: 21                  | Program output: 24                 
Correct output: 54                  | Program output: 87                 
Correct output: 17                  | Program output: 17                 
Correct output: 44                  | Program output: 44                 
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 63                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 19                 
Correct output: 28                  | Program output: 40                 
Correct output: 3                   | Program output: 10                 
Correct output: 60                  | Program output: 60                 
Correct output: 1                   | Program output: 68                 
Correct output: 1                   | Program output: 17                 
Correct output: 32                  | Program output: 32                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -96                
Correct output: -57                 | Program output: 4                  
Correct output: 41                  | Program output: 58                 
Correct output: -93                 | Program output: 34                 
Correct output: -6                  | Program output: -6                 
Correct output: -39                 | Program output: -39                
Correct output: 12                  | Program output: 12                 
Correct output: -68                 | Program output: -28                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -38                 | Program output: 2                  
Correct output: -52                 | Program output: 41                 
Correct output: -12                 | Program output: 96                 
Correct output: -95                 | Program output: -95                
Correct output: -12                 | Program output: 82                 
Correct output: -42                 | Program output: -42                
Correct output: -16                 | Program output: 50                 
Correct output: -75                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -56                 | Program output: -56                
Correct output: -33                 | Program output: -33                
Correct output: -60                 | Program output: -60                
Correct output: -66                 | Program output: -12                
Correct output: -50                 | Program output: -50                
Correct output: 20                  | Program output: 20                 
Correct output: -67                 | Program output: -14                
Correct output: -24                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: 56                  | Program output: 62                 
Correct output: -99                 | Program output: -99                
Correct output: -3                  | Program output: -3                 
Correct output: -77                 | Program output: -77                
Correct output: -85                 | Program output: -47                
Correct output: -10                 | Program output: 29                 
Correct output: -63                 | Program output: 17                 
Correct output: -82                 | Program output: -82                
Correct output: -26                 | Program output: -26                
Correct output: -64                 | Program output: -60                
Correct output: -46                 | Program output: -3                 
Correct output: -77                 | Program output: -16                
Correct output: -76                 | Program output: -63                
Correct output: -85                 | Program output: -40                
Correct output: -47                 | Program output: -47                
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: -97                
Correct output: -61                 | Program output: -19                
Correct output: 29                  | Program output: 29                 
Correct output: -27                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -29                
Correct output: 19                  | Program output: 23                 
Correct output: -28                 | Program output: 21                 
Correct output: -61                 | Program output: 5                  
Correct output: -73                 | Program output: -58                
Correct output: -76                 | Program output: -76                
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -69                
Correct output: 3                   | Program output: 3                  
Correct output: -87                 | Program output: -23                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction tagged_375} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop})
Lexicase best program: (exec_yankdup in2 in3 in4 in3 integer_min integer_dup tagged_375 print_integer in4 exec_y_when_autoconstructing () exec_k (boolean_flush integer_dup) () integer_min integer_swap integer_gte integer_mult exec_while (boolean_not boolean_or boolean_empty) exec_s_when_autoconstructing (exec_rot () (boolean_yankdup exec_dup_items boolean_yankdup) (exec_when (integer_dup_times in3 exec_when (exec_s_when_autoconstructing () (boolean_pop) ())))) () ())
Lexicase best errors: [0 0 0 1 0 1 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 49
Percent parens: 0.327
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction tagged_375} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop})
Zero cases best program: (exec_yankdup in2 in3 in4 in3 integer_min integer_dup tagged_375 print_integer in4 exec_y_when_autoconstructing () exec_k (boolean_flush integer_dup) () integer_min integer_swap integer_gte integer_mult exec_while (boolean_not boolean_or boolean_empty) exec_s_when_autoconstructing (exec_rot () (boolean_yankdup exec_dup_items boolean_yankdup) (exec_when (integer_dup_times in3 exec_when (exec_s_when_autoconstructing () (boolean_pop) ())))) () ())
Zero cases best errors: [0 0 0 1 0 1 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 49
Percent parens: 0.327
--- Lexicase Population Statistics ---
Count of elite individuals by case: (257 257 257 453 457 157 422 157 157 510)
Population mean number of elite cases: 3.08
Count of perfect (error zero) individuals by case: (257 257 257 453 457 157 422 157 157 510)
Population mean number of perfect (error zero) cases: 3.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction tagged_375} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop})
Best program: (exec_yankdup in2 in3 in4 in3 integer_min integer_dup tagged_375 print_integer in4 exec_y_when_autoconstructing () exec_k (boolean_flush integer_dup) (integer_min integer_swap integer_gte integer_mult exec_while (boolean_not) boolean_or boolean_empty) exec_s_when_autoconstructing (exec_rot () (boolean_yankdup exec_dup_items boolean_yankdup) (exec_when (integer_dup_times in3 exec_when (exec_s_when_autoconstructing () (boolean_pop) ())))) () ())
Errors: [0 0 0 1 0 1 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 33
Size: 49
Percent parens: 0.327
--- Population Statistics ---
Average total errors in population: 6.916
Median total errors in population: 7
Error averages by case: (0.743 0.743 0.743 0.547 0.543 0.843 0.578 0.843 0.843 0.49)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.491
Average program size in population (points): 43.812
Average percent parens in population: 0.278
Minimum age in population: 10.625
Maximum age in population: 13.734375
Average age in population: 12.0470859375
Median age in population: 12.0703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 164
Genome diversity (% unique genomes):	 0.465
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 166
Syntactic diversity (% unique Push programs):	 0.43
Total error diversity:				 0.006
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4243137
--- Timings ---
Current time: 1559583672165 milliseconds
Total Time:          25.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.8 seconds, 66.1%
Fitness Testing:      5.6 seconds, 21.9%
Report:               2.9 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 378
Test mean error for best: 0.37800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -8                  | Program output: -8                 
Correct output: 58                  | Program output: 58                 
Correct output: 19                  | Program output: 19                 
Correct output: -66                 | Program output: -37                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -86                
Correct output: -35                 | Program output: -35                
Correct output: -66                 | Program output: -66                
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 90                  | Program output: 90                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: 4                   | Program output: 4                  
Correct output: 27                  | Program output: 39                 
Correct output: 17                  | Program output: 17                 
Correct output: 35                  | Program output: 35                 
Correct output: 30                  | Program output: 30                 
Correct output: 21                  | Program output: 24                 
Correct output: 54                  | Program output: 87                 
Correct output: 17                  | Program output: 17                 
Correct output: 44                  | Program output: 59                 
Correct output: 45                  | Program output: 80                 
Correct output: 8                   | Program output: 28                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 19                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 16                 
Correct output: 60                  | Program output: 60                 
Correct output: 1                   | Program output: 6                  
Correct output: 1                   | Program output: 1                  
Correct output: 32                  | Program output: 43                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 19                 
Correct output: -96                 | Program output: -71                
Correct output: -57                 | Program output: -57                
Correct output: 41                  | Program output: 41                 
Correct output: -93                 | Program output: 50                 
Correct output: -6                  | Program output: -6                 
Correct output: -39                 | Program output: -29                
Correct output: 12                  | Program output: 12                 
Correct output: -68                 | Program output: -43                
Correct output: -91                 | Program output: -82                
Correct output: -89                 | Program output: -89                
Correct output: -38                 | Program output: 46                 
Correct output: -52                 | Program output: 58                 
Correct output: -12                 | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: -12                 | Program output: 60                 
Correct output: -42                 | Program output: -42                
Correct output: -16                 | Program output: -16                
Correct output: -75                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -56                 | Program output: -56                
Correct output: -33                 | Program output: -33                
Correct output: -60                 | Program output: -60                
Correct output: -66                 | Program output: -12                
Correct output: -50                 | Program output: -50                
Correct output: 20                  | Program output: 58                 
Correct output: -67                 | Program output: -14                
Correct output: -24                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: 56                  | Program output: 56                 
Correct output: -99                 | Program output: -55                
Correct output: -3                  | Program output: -3                 
Correct output: -77                 | Program output: -77                
Correct output: -85                 | Program output: -47                
Correct output: -10                 | Program output: -10                
Correct output: -63                 | Program output: 24                 
Correct output: -82                 | Program output: -82                
Correct output: -26                 | Program output: -15                
Correct output: -64                 | Program output: -8                 
Correct output: -46                 | Program output: -35                
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -63                
Correct output: -85                 | Program output: -36                
Correct output: -47                 | Program output: -47                
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: -84                
Correct output: -97                 | Program output: -52                
Correct output: -61                 | Program output: -19                
Correct output: 29                  | Program output: 29                 
Correct output: -27                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -29                
Correct output: 19                  | Program output: 19                 
Correct output: -28                 | Program output: -28                
Correct output: -61                 | Program output: -22                
Correct output: -73                 | Program output: -58                
Correct output: -76                 | Program output: -76                
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -69                
Correct output: 3                   | Program output: 36                 
Correct output: -87                 | Program output: -23                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction tag_exec_489} {:close 0, :instruction 4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range})
Lexicase best program: (exec_yankdup in2 in3 in4 in2 integer_min in3 boolean_dup integer_dup_times print_integer tag_exec_489 () 4 exec_flush exec_do*while (boolean_xor) integer_div exec_pop (integer_fromboolean integer_stackdepth) integer_lte exec_do*times () integer_div exec_noop integer_stackdepth integer_dec boolean_eq exec_rot (exec_do*while (exec_shove () exec_eq boolean_dup_times exec_do*range ())) () ())
Lexicase best errors: [1 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 43
Percent parens: 0.256
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction tag_exec_489} {:close 0, :instruction 4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range})
Zero cases best program: (exec_yankdup in2 in3 in4 in2 integer_min in3 boolean_dup integer_dup_times print_integer tag_exec_489 () 4 exec_flush exec_do*while (boolean_xor) integer_div exec_pop (integer_fromboolean integer_stackdepth) integer_lte exec_do*times () integer_div exec_noop integer_stackdepth integer_dec boolean_eq exec_rot (exec_do*while (exec_shove () exec_eq boolean_dup_times exec_do*range ())) () ())
Zero cases best errors: [1 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 43
Percent parens: 0.256
--- Lexicase Population Statistics ---
Count of elite individuals by case: (291 640 455 241 311 388 579 389 292 437)
Population mean number of elite cases: 4.02
Count of perfect (error zero) individuals by case: (291 640 455 241 311 388 579 389 292 437)
Population mean number of perfect (error zero) cases: 4.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction tag_exec_489} {:close 0, :instruction 4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range})
Best program: (exec_yankdup in2 in3 in4 in2 integer_min in3 boolean_dup integer_dup_times print_integer tag_exec_489 () 4 exec_flush exec_do*while (boolean_xor) integer_div exec_pop (integer_fromboolean integer_stackdepth) integer_lte exec_do*times () integer_div exec_noop boolean_and integer_dec boolean_eq exec_rot (exec_do*while (exec_shove () exec_eq boolean_dup_times exec_do*range ())) () ())
Errors: [1 0 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 32
Size: 43
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 5.977
Median total errors in population: 7
Error averages by case: (0.709 0.36 0.545 0.759 0.689 0.612 0.421 0.611 0.708 0.563)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.876
Average program size in population (points): 42.849
Average percent parens in population: 0.278
Minimum age in population: 11.625
Maximum age in population: 14.91796875
Average age in population: 13.411671875
Median age in population: 13.33203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 210
Genome diversity (% unique genomes):	 0.444
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 217
Syntactic diversity (% unique Push programs):	 0.42
Total error diversity:				 0.009
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4615511
--- Timings ---
Current time: 1559583674587 milliseconds
Total Time:          27.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.6 seconds, 66.9%
Fitness Testing:      5.9 seconds, 21.3%
Report:               3.2 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 415
Test mean error for best: 0.41500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -8                  | Program output: -8                 
Correct output: 58                  | Program output: 58                 
Correct output: 19                  | Program output: 19                 
Correct output: -66                 | Program output: -37                
Correct output: -68                 | Program output: 94                 
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -86                
Correct output: -35                 | Program output: -35                
Correct output: -66                 | Program output: -66                
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 90                  | Program output: 90                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: 4                   | Program output: 4                  
Correct output: 27                  | Program output: 39                 
Correct output: 17                  | Program output: 17                 
Correct output: 35                  | Program output: 35                 
Correct output: 30                  | Program output: 30                 
Correct output: 21                  | Program output: 24                 
Correct output: 54                  | Program output: 87                 
Correct output: 17                  | Program output: 17                 
Correct output: 44                  | Program output: 59                 
Correct output: 45                  | Program output: 80                 
Correct output: 8                   | Program output: 28                 
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 19                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 16                 
Correct output: 60                  | Program output: 60                 
Correct output: 1                   | Program output: 6                  
Correct output: 1                   | Program output: 1                  
Correct output: 32                  | Program output: 43                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 19                 
Correct output: -96                 | Program output: -96                
Correct output: -57                 | Program output: -57                
Correct output: 41                  | Program output: 41                 
Correct output: -93                 | Program output: 50                 
Correct output: -6                  | Program output: -6                 
Correct output: -39                 | Program output: -39                
Correct output: 12                  | Program output: 12                 
Correct output: -68                 | Program output: -43                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -38                 | Program output: 46                 
Correct output: -52                 | Program output: 58                 
Correct output: -12                 | Program output: 26                 
Correct output: -95                 | Program output:                    
Correct output: -12                 | Program output: 60                 
Correct output: -42                 | Program output: -19                
Correct output: -16                 | Program output: -16                
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -43                
Correct output: -56                 | Program output: -56                
Correct output: -33                 | Program output: 18                 
Correct output: -60                 | Program output: -60                
Correct output: -66                 | Program output: -66                
Correct output: -50                 | Program output: -50                
Correct output: 20                  | Program output: 58                 
Correct output: -67                 | Program output: -14                
Correct output: -24                 | Program output: 67                 
Correct output: -82                 | Program output: 38                 
Correct output: 56                  | Program output: 56                 
Correct output: -99                 | Program output: -99                
Correct output: -3                  | Program output: -3                 
Correct output: -77                 | Program output: -77                
Correct output: -85                 | Program output: -47                
Correct output: -10                 | Program output: -10                
Correct output: -63                 | Program output: 24                 
Correct output: -82                 | Program output: -71                
Correct output: -26                 | Program output: -26                
Correct output: -64                 | Program output: -60                
Correct output: -46                 | Program output: -35                
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -85                 | Program output: -40                
Correct output: -47                 | Program output: 66                 
Correct output: -80                 | Program output: -76                
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: -97                
Correct output: -61                 | Program output: -61                
Correct output: 29                  | Program output: 29                 
Correct output: -27                 | Program output: 46                 
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -29                
Correct output: 19                  | Program output: 19                 
Correct output: -28                 | Program output: -28                
Correct output: -61                 | Program output: -22                
Correct output: -73                 | Program output: -73                
Correct output: -76                 | Program output: -76                
Correct output: -88                 | Program output: -52                
Correct output: -69                 | Program output: 4                  
Correct output: 3                   | Program output: 36                 
Correct output: -87                 | Program output: 37                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction tagged_375} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction 4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range})
Lexicase best program: (exec_yankdup in2 in3 in4 in3 in2 in1 exec_yankdup in2 in3 in4 in2 integer_min integer_dup tagged_375 print_integer in4 exec_y_when_autoconstructing () exec_k (boolean_flush integer_dup) () integer_min 4 exec_flush exec_do*while (boolean_and) integer_div exec_pop (integer_fromboolean integer_stackdepth) integer_lte exec_do*times () integer_div exec_noop integer_stackdepth integer_dup boolean_eq exec_rot (exec_do*while (exec_shove () exec_eq boolean_dup_times exec_do*range ())) () ())
Lexicase best errors: [0 0 1 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 56
Percent parens: 0.232
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction tagged_375} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction 4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range})
Zero cases best program: (exec_yankdup in2 in3 in4 in3 in2 in1 exec_yankdup in2 in3 in4 in2 integer_min integer_dup tagged_375 print_integer in4 exec_y_when_autoconstructing () exec_k (boolean_flush integer_dup) () integer_min 4 exec_flush exec_do*while (boolean_and) integer_div exec_pop (integer_fromboolean integer_stackdepth) integer_lte exec_do*times () integer_div exec_noop integer_stackdepth integer_dup boolean_eq exec_rot (exec_do*while (exec_shove () exec_eq boolean_dup_times exec_do*range ())) () ())
Zero cases best errors: [0 0 1 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 56
Percent parens: 0.232
--- Lexicase Population Statistics ---
Count of elite individuals by case: (579 27 3 639 155 551 934 639 27 919)
Population mean number of elite cases: 4.47
Count of perfect (error zero) individuals by case: (579 27 3 639 155 551 934 639 27 919)
Population mean number of perfect (error zero) cases: 4.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction tagged_375} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction 4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range})
Best program: (exec_yankdup in2 in3 in4 in3 in2 in1 exec_yankdup in2 in3 in4 in2 integer_min integer_dup tagged_375 print_integer in4 exec_y_when_autoconstructing () exec_k (boolean_flush integer_dup) () integer_min 4 exec_flush exec_do*while (boolean_and) integer_div exec_pop (integer_fromboolean integer_stackdepth) integer_lte exec_do*times () integer_div exec_noop integer_stackdepth integer_dup boolean_eq exec_rot (exec_do*while (exec_shove () exec_eq boolean_dup_times exec_do*range ())) () ())
Errors: [0 0 1 0 1 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 43
Size: 56
Percent parens: 0.232
--- Population Statistics ---
Average total errors in population: 5.527
Median total errors in population: 6
Error averages by case: (0.421 0.973 0.997 0.361 0.845 0.449 0.066 0.361 0.973 0.081)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.208
Average program size in population (points): 43.063
Average percent parens in population: 0.273
Minimum age in population: 12.625
Maximum age in population: 16.546875
Average age in population: 14.964064453125
Median age in population: 15.0546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 119
Genome diversity (% unique genomes):	 0.485
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 133
Syntactic diversity (% unique Push programs):	 0.447
Total error diversity:				 0.008
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4995127
--- Timings ---
Current time: 1559583677122 milliseconds
Total Time:          30.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.5 seconds, 67.7%
Fitness Testing:      6.3 seconds, 20.9%
Report:               3.4 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 234
Test mean error for best: 0.23400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: -8                 
Correct output: 58                  | Program output: 58                 
Correct output: 19                  | Program output: 19                 
Correct output: -66                 | Program output: -37                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -86                
Correct output: -35                 | Program output: -35                
Correct output: -66                 | Program output: -66                
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 90                  | Program output: 90                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: 4                   | Program output: 4                  
Correct output: 27                  | Program output: 39                 
Correct output: 17                  | Program output: 17                 
Correct output: 35                  | Program output: 35                 
Correct output: 30                  | Program output: 30                 
Correct output: 21                  | Program output: 24                 
Correct output: 54                  | Program output: 87                 
Correct output: 17                  | Program output: 17                 
Correct output: 44                  | Program output: 44                 
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 2828               
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 19                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 10                 
Correct output: 60                  | Program output: 60                 
Correct output: 1                   | Program output: 6                  
Correct output: 1                   | Program output: 1                  
Correct output: 32                  | Program output: 32                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -96                
Correct output: -57                 | Program output: -57                
Correct output: 41                  | Program output: 41                 
Correct output: -93                 | Program output: 34                 
Correct output: -6                  | Program output: -6                 
Correct output: -39                 | Program output: -39                
Correct output: 12                  | Program output: 12                 
Correct output: -68                 | Program output: -43                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -38                 | Program output: 2                  
Correct output: -52                 | Program output: 41                 
Correct output: -12                 | Program output: 26                 
Correct output: -95                 | Program output:                    
Correct output: -12                 | Program output: 60                 
Correct output: -42                 | Program output: -42                
Correct output: -16                 | Program output: -16                
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
Correct output: -56                 | Program output: -56                
Correct output: -33                 | Program output: -33                
Correct output: -60                 | Program output: -60                
Correct output: -66                 | Program output: -66                
Correct output: -50                 | Program output: -50                
Correct output: 20                  | Program output: 20                 
Correct output: -67                 | Program output: -14                
Correct output: -24                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: 56                  | Program output: 56                 
Correct output: -99                 | Program output: -99                
Correct output: -3                  | Program output: -3                 
Correct output: -77                 | Program output: -77                
Correct output: -85                 | Program output: -47                
Correct output: -10                 | Program output: -10                
Correct output: -63                 | Program output: 17                 
Correct output: -82                 | Program output: -82                
Correct output: -26                 | Program output: -26                
Correct output: -64                 | Program output: -60                
Correct output: -46                 | Program output: -35                
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -85                 | Program output: -40                
Correct output: -47                 | Program output: -47                
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: -97                
Correct output: -61                 | Program output: -61                
Correct output: 29                  | Program output: 29                 
Correct output: -27                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -29                
Correct output: 19                  | Program output: 19                 
Correct output: -28                 | Program output: -28                
Correct output: -61                 | Program output: -22                
Correct output: -73                 | Program output: -73                
Correct output: -76                 | Program output: -76                
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -69                
Correct output: 3                   | Program output: 3                  
Correct output: -87                 | Program output: -23                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction tagged_375} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range})
Lexicase best program: (exec_yankdup in2 in3 in4 exec_yankdup in2 in3 in4 in3 in2 in1 exec_yankdup in2 in3 in4 in2 integer_min integer_min integer_dup tagged_375 print_integer in4 exec_do*while (boolean_and) integer_div exec_pop (integer_fromboolean integer_stackdepth) integer_lte exec_do*times () integer_div exec_noop integer_stackdepth integer_dup boolean_eq exec_rot (exec_do*while (exec_shove () exec_eq boolean_dup_times exec_do*range ())) () ())
Lexicase best errors: [1 0 0 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 51
Percent parens: 0.196
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction tagged_375} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range})
Zero cases best program: (exec_yankdup in2 in3 in4 exec_yankdup in2 in3 in4 in3 in2 in1 exec_yankdup in2 in3 in4 in2 integer_min integer_min integer_dup tagged_375 print_integer in4 exec_do*while (boolean_and) integer_div exec_pop (integer_fromboolean integer_stackdepth) integer_lte exec_do*times () integer_div exec_noop integer_stackdepth integer_dup boolean_eq exec_rot (exec_do*while (exec_shove () exec_eq boolean_dup_times exec_do*range ())) () ())
Zero cases best errors: [1 0 0 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 51
Percent parens: 0.196
--- Lexicase Population Statistics ---
Count of elite individuals by case: (108 694 412 953 529 685 137 108 480 529)
Population mean number of elite cases: 4.64
Count of perfect (error zero) individuals by case: (108 694 412 953 529 685 137 108 480 529)
Population mean number of perfect (error zero) cases: 4.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction tagged_375} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range})
Best program: (exec_yankdup in2 in3 in4 exec_yankdup in2 in3 in4 in3 in2 in1 exec_yankdup in2 in3 in4 in2 integer_min integer_min integer_dup tagged_375 print_integer in4 exec_do*while (boolean_and) integer_div exec_pop (integer_fromboolean integer_stackdepth) integer_lte exec_do*times () integer_div exec_noop integer_stackdepth integer_dup boolean_eq exec_rot (exec_do*while (exec_shove () exec_eq boolean_dup_times exec_do*range ())) () ())
Errors: [1 0 0 0 0 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 41
Size: 51
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 5.365
Median total errors in population: 5
Error averages by case: (0.892 0.306 0.588 0.047 0.471 0.315 0.863 0.892 0.52 0.471)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.13
Average program size in population (points): 48.445
Average percent parens in population: 0.255
Minimum age in population: 14.46484375
Maximum age in population: 17.9794921875
Average age in population: 16.418310546875
Median age in population: 16.3818359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 205
Genome diversity (% unique genomes):	 0.504
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 220
Syntactic diversity (% unique Push programs):	 0.46
Total error diversity:				 0.008
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5327650
--- Timings ---
Current time: 1559583679853 milliseconds
Total Time:          32.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.4 seconds, 68.4%
Fitness Testing:      6.7 seconds, 20.4%
Report:               3.6 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 234
Test mean error for best: 0.23400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: -8                 
Correct output: 58                  | Program output: 58                 
Correct output: 19                  | Program output: 19                 
Correct output: -66                 | Program output: -37                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -86                
Correct output: -35                 | Program output: -35                
Correct output: -66                 | Program output: -66                
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 90                  | Program output: 90                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: 4                   | Program output: 4                  
Correct output: 27                  | Program output: 39                 
Correct output: 17                  | Program output: 17                 
Correct output: 35                  | Program output: 35                 
Correct output: 30                  | Program output: 30                 
Correct output: 21                  | Program output: 24                 
Correct output: 54                  | Program output: 87                 
Correct output: 17                  | Program output: 17                 
Correct output: 44                  | Program output: 44                 
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 2828               
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 19                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 10                 
Correct output: 60                  | Program output: 60                 
Correct output: 1                   | Program output: 6                  
Correct output: 1                   | Program output: 1                  
Correct output: 32                  | Program output: 32                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -96                
Correct output: -57                 | Program output: -57                
Correct output: 41                  | Program output: 41                 
Correct output: -93                 | Program output: 34                 
Correct output: -6                  | Program output: -6                 
Correct output: -39                 | Program output: -39                
Correct output: 12                  | Program output: 12                 
Correct output: -68                 | Program output: -43                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -38                 | Program output: 2                  
Correct output: -52                 | Program output: 41                 
Correct output: -12                 | Program output: 26                 
Correct output: -95                 | Program output:                    
Correct output: -12                 | Program output: 60                 
Correct output: -42                 | Program output: -42                
Correct output: -16                 | Program output: -16                
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
Correct output: -56                 | Program output: -56                
Correct output: -33                 | Program output: -33                
Correct output: -60                 | Program output: -60                
Correct output: -66                 | Program output: -66                
Correct output: -50                 | Program output: -50                
Correct output: 20                  | Program output: 20                 
Correct output: -67                 | Program output: -14                
Correct output: -24                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: 56                  | Program output: 56                 
Correct output: -99                 | Program output: -99                
Correct output: -3                  | Program output: -3                 
Correct output: -77                 | Program output: -77                
Correct output: -85                 | Program output: -47                
Correct output: -10                 | Program output: -10                
Correct output: -63                 | Program output: 17                 
Correct output: -82                 | Program output: -82                
Correct output: -26                 | Program output: -26                
Correct output: -64                 | Program output: -60                
Correct output: -46                 | Program output: -35                
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -85                 | Program output: -40                
Correct output: -47                 | Program output: -47                
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: -97                
Correct output: -61                 | Program output: -61                
Correct output: 29                  | Program output: 29                 
Correct output: -27                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -29                
Correct output: 19                  | Program output: 19                 
Correct output: -28                 | Program output: -28                
Correct output: -61                 | Program output: -22                
Correct output: -73                 | Program output: -73                
Correct output: -76                 | Program output: -76                
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -69                
Correct output: 3                   | Program output: 3                  
Correct output: -87                 | Program output: -23                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction tagged_375} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range})
Lexicase best program: (exec_yankdup in2 in3 in4 exec_yankdup in2 in3 in4 in3 in2 in1 exec_yankdup in2 in3 in4 in2 integer_min integer_min integer_dup tagged_375 print_integer in4 exec_do*while (boolean_and) integer_div exec_pop (integer_fromboolean integer_stackdepth) integer_lte exec_do*times () integer_div exec_noop integer_stackdepth integer_dup boolean_eq exec_rot (exec_do*while (exec_shove () exec_eq boolean_dup_times exec_do*range ())) () ())
Lexicase best errors: [0 0 1 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 51
Percent parens: 0.196
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction tagged_375} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range})
Zero cases best program: (exec_yankdup in2 in3 in4 exec_yankdup in2 in3 in4 in3 in2 in1 exec_yankdup in2 in3 in4 in2 integer_min integer_min integer_dup tagged_375 print_integer in4 exec_do*while (boolean_and) integer_div exec_pop (integer_fromboolean integer_stackdepth) integer_lte exec_do*times () integer_div exec_noop integer_stackdepth integer_dup boolean_eq exec_rot (exec_do*while (exec_shove () exec_eq boolean_dup_times exec_do*range ())) () ())
Zero cases best errors: [0 0 1 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 51
Percent parens: 0.196
--- Lexicase Population Statistics ---
Count of elite individuals by case: (494 944 198 497 918 197 517 198 512 498)
Population mean number of elite cases: 4.97
Count of perfect (error zero) individuals by case: (494 944 198 497 918 197 517 198 512 498)
Population mean number of perfect (error zero) cases: 4.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction tagged_375} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range})
Best program: (exec_yankdup in2 in3 in4 exec_yankdup in2 in3 in4 in3 in2 in1 exec_yankdup in2 in3 in4 in2 integer_min integer_min integer_dup tagged_375 print_integer in4 exec_do*while (boolean_and) integer_div exec_pop (integer_fromboolean integer_stackdepth) integer_lte exec_do*times () integer_div exec_noop integer_stackdepth integer_dup boolean_eq exec_rot (exec_do*while (exec_shove () exec_eq boolean_dup_times exec_do*range ())) () ())
Errors: [0 0 1 0 0 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 41
Size: 51
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 5.027
Median total errors in population: 5
Error averages by case: (0.506 0.056 0.802 0.503 0.082 0.803 0.483 0.802 0.488 0.502)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.57
Average program size in population (points): 47.275
Average percent parens in population: 0.228
Minimum age in population: 15.46484375
Maximum age in population: 19.548828125
Average age in population: 17.6123515625
Median age in population: 17.6982421875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 279
Genome diversity (% unique genomes):	 0.499
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 304
Syntactic diversity (% unique Push programs):	 0.449
Total error diversity:				 0.008
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 5992309
--- Timings ---
Current time: 1559583682907 milliseconds
Total Time:          35.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.4 seconds, 67.9%
Fitness Testing:      7.3 seconds, 20.4%
Report:               4.1 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 213
Test mean error for best: 0.21300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: -8                 
Correct output: 58                  | Program output: 58                 
Correct output: 19                  | Program output: 19                 
Correct output: -66                 | Program output: -66                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -86                
Correct output: -35                 | Program output: -35                
Correct output: -66                 | Program output: -66                
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 90                  | Program output: 90                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: 4                   | Program output: 4                  
Correct output: 27                  | Program output: 27                 
Correct output: 17                  | Program output: 17                 
Correct output: 35                  | Program output: 35                 
Correct output: 30                  | Program output: 30                 
Correct output: 21                  | Program output: 21                 
Correct output: 54                  | Program output: 54                 
Correct output: 17                  | Program output: 28                 
Correct output: 44                  | Program output: 44                 
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 30                  | Program output: 40                 
Correct output: 14                  | Program output: 14                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 3                  
Correct output: 60                  | Program output: 62                 
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 1                  
Correct output: 32                  | Program output: 32                 
Correct output: 0                   | Program output: 66                 
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -71                
Correct output: -57                 | Program output: -57                
Correct output: 41                  | Program output: 41                 
Correct output: -93                 | Program output: -93                
Correct output: -6                  | Program output: 1                  
Correct output: -39                 | Program output: -29                
Correct output: 12                  | Program output: 22                 
Correct output: -68                 | Program output: -68                
Correct output: -91                 | Program output: -82                
Correct output: -89                 | Program output: 19                 
Correct output: -38                 | Program output: -38                
Correct output: -52                 | Program output: -52                
Correct output: -12                 | Program output: -12                
Correct output: -95                 | Program output: -95                
Correct output: -12                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -16                 | Program output: -16                
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
Correct output: -56                 | Program output: -46                
Correct output: -33                 | Program output: -33                
Correct output: -60                 | Program output: -32                
Correct output: -66                 | Program output: -66                
Correct output: -50                 | Program output: -29                
Correct output: 20                  | Program output: 20                 
Correct output: -67                 | Program output: -67                
Correct output: -24                 | Program output: -24                
Correct output: -82                 | Program output: -82                
Correct output: 56                  | Program output: 56                 
Correct output: -99                 | Program output: -55                
Correct output: -3                  | Program output: 3                  
Correct output: -77                 | Program output: 36                 
Correct output: -85                 | Program output: -85                
Correct output: -10                 | Program output: -10                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -26                 | Program output: -15                
Correct output: -64                 | Program output: -64                
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -85                 | Program output: -85                
Correct output: -47                 | Program output: -47                
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: -84                
Correct output: -97                 | Program output: -88                
Correct output: -61                 | Program output: -61                
Correct output: 29                  | Program output: 72                 
Correct output: -27                 | Program output: -27                
Correct output: -68                 | Program output: -58                
Correct output: -98                 | Program output: -98                
Correct output: 19                  | Program output: 19                 
Correct output: -28                 | Program output: -28                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -73                
Correct output: -76                 | Program output: -36                
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -69                
Correct output: 3                   | Program output: 3                  
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction tagged_375} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range})
Lexicase best program: (exec_yankdup in2 exec_s () (in1 in3 boolean_dup) () integer_min in3 integer_min integer_min integer_dup tagged_375 print_integer in4 exec_do*while (boolean_and) integer_div exec_pop (integer_fromboolean integer_stackdepth) integer_lte exec_do*times () integer_div exec_noop integer_stackdepth integer_dup boolean_eq exec_rot (exec_do*while (exec_shove () exec_eq boolean_dup_times exec_do*range ())) () ())
Lexicase best errors: [1 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 46
Percent parens: 0.283
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction tagged_375} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range})
Zero cases best program: (exec_yankdup in2 exec_s () (in1 in3 boolean_dup) () integer_min in3 integer_min integer_min integer_dup tagged_375 print_integer in4 exec_do*while (boolean_and) integer_div exec_pop (integer_fromboolean integer_stackdepth) integer_lte exec_do*times () integer_div exec_noop integer_stackdepth integer_dup boolean_eq exec_rot (exec_do*while (exec_shove () exec_eq boolean_dup_times exec_do*range ())) () ())
Zero cases best errors: [1 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 46
Percent parens: 0.283
--- Lexicase Population Statistics ---
Count of elite individuals by case: (473 720 483 473 685 721 443 481 442 442)
Population mean number of elite cases: 5.36
Count of perfect (error zero) individuals by case: (473 720 483 473 685 721 443 481 442 442)
Population mean number of perfect (error zero) cases: 5.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction tagged_375} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range})
Best program: (exec_yankdup in2 exec_s () (in1 in3 boolean_dup) () integer_min in3 integer_min integer_min integer_dup tagged_375 print_integer in4 exec_do*while (boolean_and) integer_div exec_pop (integer_fromboolean integer_stackdepth) integer_lte exec_do*times () integer_div exec_noop integer_stackdepth integer_dup boolean_eq exec_rot (exec_do*while (exec_shove () exec_eq boolean_dup_times exec_do*range ())) () ())
Errors: [1 0 0 1 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 33
Size: 46
Percent parens: 0.283
--- Population Statistics ---
Average total errors in population: 4.637
Median total errors in population: 5
Error averages by case: (0.527 0.28 0.517 0.527 0.315 0.279 0.557 0.519 0.558 0.558)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.314
Average program size in population (points): 47.066
Average percent parens in population: 0.230
Minimum age in population: 17.2783203125
Maximum age in population: 20.5322265625
Average age in population: 18.70988256835938
Median age in population: 18.8388671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 153
Genome diversity (% unique genomes):	 0.525
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 187
Syntactic diversity (% unique Push programs):	 0.464
Total error diversity:				 0.009
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 6826256
--- Timings ---
Current time: 1559583685810 milliseconds
Total Time:          39.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.2 seconds, 67.3%
Fitness Testing:      8.1 seconds, 20.7%
Report:               4.6 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 211
Test mean error for best: 0.21100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: 100                
Correct output: 58                  | Program output: 58                 
Correct output: 19                  | Program output: 19                 
Correct output: -66                 | Program output: -66                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: 69                 
Correct output: -86                 | Program output: -86                
Correct output: -35                 | Program output: -35                
Correct output: -66                 | Program output: -66                
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 90                  | Program output: 90                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: 4                   | Program output: 4                  
Correct output: 27                  | Program output: 27                 
Correct output: 17                  | Program output: 30                 
Correct output: 35                  | Program output: 49                 
Correct output: 30                  | Program output: 52                 
Correct output: 21                  | Program output: 21                 
Correct output: 54                  | Program output: 54                 
Correct output: 17                  | Program output: 17                 
Correct output: 44                  | Program output: 44                 
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 28                  | Program output: 40                 
Correct output: 3                   | Program output: 3                  
Correct output: 60                  | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 17                 
Correct output: 32                  | Program output: 32                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -96                
Correct output: -57                 | Program output: 4                  
Correct output: 41                  | Program output: 58                 
Correct output: -93                 | Program output: -93                
Correct output: -6                  | Program output: -6                 
Correct output: -39                 | Program output: -39                
Correct output: 12                  | Program output: 12                 
Correct output: -68                 | Program output: -68                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -38                 | Program output: -38                
Correct output: -52                 | Program output: -52                
Correct output: -12                 | Program output: -12                
Correct output: -95                 | Program output: -95                
Correct output: -12                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -16                 | Program output: 50                 
Correct output: -75                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -56                 | Program output: -56                
Correct output: -33                 | Program output: -33                
Correct output: -60                 | Program output: -60                
Correct output: -66                 | Program output: -12                
Correct output: -50                 | Program output: -50                
Correct output: 20                  | Program output: 20                 
Correct output: -67                 | Program output: -67                
Correct output: -24                 | Program output: -24                
Correct output: -82                 | Program output: -82                
Correct output: 56                  | Program output: 62                 
Correct output: -99                 | Program output: -99                
Correct output: -3                  | Program output: -3                 
Correct output: -77                 | Program output: -77                
Correct output: -85                 | Program output: -85                
Correct output: -10                 | Program output: 29                 
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -26                 | Program output: -26                
Correct output: -64                 | Program output: -64                
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: -16                
Correct output: -76                 | Program output: -63                
Correct output: -85                 | Program output: -85                
Correct output: -47                 | Program output: -47                
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: -97                
Correct output: -61                 | Program output: -56                
Correct output: 29                  | Program output: 29                 
Correct output: -27                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -98                
Correct output: 19                  | Program output: 23                 
Correct output: -28                 | Program output: 21                 
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -58                
Correct output: -76                 | Program output: -76                
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -69                
Correct output: 3                   | Program output: 3                  
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction tagged_375} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range})
Lexicase best program: (exec_yankdup in2 in4 in1 in3 boolean_dup integer_min in3 integer_min integer_min integer_dup tagged_375 print_integer in4 exec_do*while (boolean_and) integer_div exec_pop (integer_fromboolean integer_stackdepth) integer_lte exec_do*times () integer_div exec_noop integer_stackdepth integer_dup boolean_eq exec_rot (exec_do*while (exec_shove () exec_eq boolean_dup_times exec_do*range ())) () ())
Lexicase best errors: [0 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 43
Percent parens: 0.233
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction tagged_375} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range})
Zero cases best program: (exec_yankdup in2 in4 in1 in3 boolean_dup integer_min in3 integer_min integer_min integer_dup tagged_375 print_integer in4 exec_do*while (boolean_and) integer_div exec_pop (integer_fromboolean integer_stackdepth) integer_lte exec_do*times () integer_div exec_noop integer_stackdepth integer_dup boolean_eq exec_rot (exec_do*while (exec_shove () exec_eq boolean_dup_times exec_do*range ())) () ())
Zero cases best errors: [0 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 43
Percent parens: 0.233
--- Lexicase Population Statistics ---
Count of elite individuals by case: (661 912 369 929 930 372 904 521 522 913)
Population mean number of elite cases: 7.03
Count of perfect (error zero) individuals by case: (661 912 369 929 930 372 904 521 522 913)
Population mean number of perfect (error zero) cases: 7.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction tagged_375} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range})
Best program: (exec_yankdup in2 in4 in1 in3 boolean_dup integer_min in3 integer_min integer_min integer_dup tagged_375 print_integer in4 exec_do*while (boolean_and) integer_div exec_pop (integer_fromboolean integer_stackdepth) integer_lte exec_do*times () integer_div exec_noop integer_stackdepth integer_dup boolean_eq exec_rot (exec_do*while (exec_shove () exec_eq boolean_dup_times exec_do*range ())) () ())
Errors: [0 0 0 0 0 0 1 0 0 0]
Total: 1
Mean: 0.1
Genome size: 33
Size: 43
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 2.967
Median total errors in population: 2
Error averages by case: (0.339 0.088 0.631 0.071 0.07 0.628 0.096 0.479 0.478 0.087)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.028
Average program size in population (points): 47.635
Average percent parens in population: 0.244
Minimum age in population: 18.2783203125
Maximum age in population: 21.935546875
Average age in population: 20.69017407226562
Median age in population: 20.62249755859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 345
Genome diversity (% unique genomes):	 0.536
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 362
Syntactic diversity (% unique Push programs):	 0.487
Total error diversity:				 0.01
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 7486140
--- Timings ---
Current time: 1559583688562 milliseconds
Total Time:          41.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.1 seconds, 67.3%
Fitness Testing:      8.7 seconds, 20.8%
Report:               4.9 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: -8                 
Correct output: 58                  | Program output: 58                 
Correct output: 19                  | Program output: 19                 
Correct output: -66                 | Program output: -66                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -86                
Correct output: -35                 | Program output: -35                
Correct output: -66                 | Program output: -66                
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 90                  | Program output: 90                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: 4                   | Program output: 4                  
Correct output: 27                  | Program output: 27                 
Correct output: 17                  | Program output: 17                 
Correct output: 35                  | Program output: 35                 
Correct output: 30                  | Program output: 30                 
Correct output: 21                  | Program output: 21                 
Correct output: 54                  | Program output: 54                 
Correct output: 17                  | Program output: 17                 
Correct output: 44                  | Program output: 44                 
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 3                  
Correct output: 60                  | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 1                  
Correct output: 32                  | Program output: 32                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -96                
Correct output: -57                 | Program output: -57                
Correct output: 41                  | Program output: 41                 
Correct output: -93                 | Program output: -93                
Correct output: -6                  | Program output: -6                 
Correct output: -39                 | Program output: -39                
Correct output: 12                  | Program output: 12                 
Correct output: -68                 | Program output: -68                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -38                 | Program output: -38                
Correct output: -52                 | Program output: -52                
Correct output: -12                 | Program output: -12                
Correct output: -95                 | Program output: -95                
Correct output: -12                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -16                 | Program output: -16                
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
Correct output: -56                 | Program output: -56                
Correct output: -33                 | Program output: -33                
Correct output: -60                 | Program output: -60                
Correct output: -66                 | Program output: -66                
Correct output: -50                 | Program output: -50                
Correct output: 20                  | Program output: 20                 
Correct output: -67                 | Program output: -67                
Correct output: -24                 | Program output: -24                
Correct output: -82                 | Program output: -82                
Correct output: 56                  | Program output: 56                 
Correct output: -99                 | Program output: -99                
Correct output: -3                  | Program output: -3                 
Correct output: -77                 | Program output: -77                
Correct output: -85                 | Program output: -85                
Correct output: -10                 | Program output: -10                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -26                 | Program output: -26                
Correct output: -64                 | Program output: -64                
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -85                 | Program output: -85                
Correct output: -47                 | Program output: -47                
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: -97                
Correct output: -61                 | Program output: -61                
Correct output: 29                  | Program output: 29                 
Correct output: -27                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -98                
Correct output: 19                  | Program output: 19                 
Correct output: -28                 | Program output: -28                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -73                
Correct output: -76                 | Program output: -76                
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -69                
Correct output: 3                   | Program output: 3                  
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction tagged_375} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range})
Lexicase best program: (exec_yankdup in2 in4 in1 in3 boolean_dup integer_min boolean_yank integer_min integer_min integer_dup tagged_375 print_integer in4 exec_do*while (boolean_and) integer_div exec_pop (integer_fromboolean integer_stackdepth) integer_lte exec_do*times () integer_div exec_noop integer_stackdepth integer_dup boolean_eq exec_rot (exec_do*while (exec_shove () exec_eq boolean_dup_times exec_do*range ())) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 43
Percent parens: 0.233
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction tagged_375} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range})
Zero cases best program: (exec_yankdup in2 in4 in1 in3 boolean_dup integer_min boolean_yank integer_min integer_min integer_dup tagged_375 print_integer in4 exec_do*while (boolean_and) integer_div exec_pop (integer_fromboolean integer_stackdepth) integer_lte exec_do*times () integer_div exec_noop integer_stackdepth integer_dup boolean_eq exec_rot (exec_do*while (exec_shove () exec_eq boolean_dup_times exec_do*range ())) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 43
Percent parens: 0.233
--- Lexicase Population Statistics ---
Count of elite individuals by case: (717 446 441 717 936 692 923 446 717 936)
Population mean number of elite cases: 6.97
Count of perfect (error zero) individuals by case: (717 446 441 717 936 692 923 446 717 936)
Population mean number of perfect (error zero) cases: 6.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction tagged_375} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range})
Best program: (exec_yankdup in2 in4 in1 in3 boolean_dup integer_min in3 integer_min boolean_dup integer_min in3 integer_min integer_min integer_dup tagged_375 print_integer in4 exec_do*while (boolean_and) integer_div exec_pop (integer_fromboolean integer_stackdepth) integer_lte exec_do*times () integer_div exec_noop integer_stackdepth integer_dup boolean_eq exec_rot (exec_do*while (exec_shove () exec_eq boolean_dup_times exec_do*range ())) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 37
Size: 47
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 3.029
Median total errors in population: 3
Error averages by case: (0.283 0.554 0.559 0.283 0.064 0.308 0.077 0.554 0.283 0.064)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.104
Average program size in population (points): 44.548
Average percent parens in population: 0.233
Minimum age in population: 19.2783203125
Maximum age in population: 23.76812744140625
Average age in population: 21.99665661621094
Median age in population: 22.21533203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 318
Genome diversity (% unique genomes):	 0.53
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 339
Syntactic diversity (% unique Push programs):	 0.483
Total error diversity:				 0.011
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 7968814
--- Timings ---
Current time: 1559583691274 milliseconds
Total Time:          44.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.0 seconds, 67.6%
Fitness Testing:      9.2 seconds, 20.6%
Report:               5.1 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 15
Successful program: (exec_yankdup in2 in4 in1 in3 boolean_dup integer_min in3 integer_min boolean_dup integer_min in3 integer_min integer_min integer_dup tagged_375 print_integer in4 exec_do*while (boolean_and) integer_div exec_pop (integer_fromboolean integer_stackdepth) integer_lte exec_do*times () integer_div exec_noop integer_stackdepth integer_dup boolean_eq exec_rot (exec_do*while (exec_shove () exec_eq boolean_dup_times exec_do*range ())) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 47


Auto-simplifying with starting size: 47
step: 0
program: (exec_yankdup in2 in4 in1 in3 boolean_dup integer_min in3 integer_min boolean_dup integer_min in3 integer_min integer_min integer_dup tagged_375 print_integer in4 exec_do*while (boolean_and) integer_div exec_pop (integer_fromboolean integer_stackdepth) integer_lte exec_do*times () integer_div exec_noop integer_stackdepth integer_dup boolean_eq exec_rot (exec_do*while (exec_shove () exec_eq boolean_dup_times exec_do*range ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 47

step: 500
program: (exec_yankdup in2 in4 in1 in3 boolean_dup integer_min in3 integer_min boolean_dup integer_min in3 integer_min integer_min integer_dup tagged_375 print_integer in4 exec_do*while (boolean_and) integer_div exec_pop (integer_fromboolean integer_stackdepth) integer_lte exec_do*times () integer_div exec_noop integer_stackdepth integer_dup boolean_eq exec_rot (exec_do*while (exec_shove () exec_eq boolean_dup_times exec_do*range ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 47

step: 1000
program: (exec_yankdup in2 in4 in1 in3 boolean_dup integer_min in3 integer_min boolean_dup integer_min in3 integer_min integer_min integer_dup tagged_375 print_integer in4 exec_do*while (boolean_and) integer_div exec_pop (integer_fromboolean integer_stackdepth) integer_lte exec_do*times () integer_div exec_noop integer_stackdepth integer_dup boolean_eq exec_rot (exec_do*while (exec_shove () exec_eq boolean_dup_times exec_do*range ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 47

step: 1500
program: (exec_yankdup in2 in4 in1 in3 boolean_dup integer_min in3 integer_min boolean_dup integer_min in3 integer_min integer_min integer_dup tagged_375 print_integer in4 exec_do*while (boolean_and) integer_div exec_pop (integer_fromboolean integer_stackdepth) integer_lte exec_do*times () integer_div exec_noop integer_stackdepth integer_dup boolean_eq exec_rot (exec_do*while (exec_shove () exec_eq boolean_dup_times exec_do*range ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 47

step: 2000
program: (exec_yankdup in2 in4 in1 in3 boolean_dup integer_min in3 integer_min boolean_dup integer_min in3 integer_min integer_min integer_dup tagged_375 print_integer in4 exec_do*while (boolean_and) integer_div exec_pop (integer_fromboolean integer_stackdepth) integer_lte exec_do*times () integer_div exec_noop integer_stackdepth integer_dup boolean_eq exec_rot (exec_do*while (exec_shove () exec_eq boolean_dup_times exec_do*range ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 47

step: 2500
program: (exec_yankdup in2 in4 in1 in3 boolean_dup integer_min in3 integer_min boolean_dup integer_min in3 integer_min integer_min integer_dup tagged_375 print_integer in4 exec_do*while (boolean_and) integer_div exec_pop (integer_fromboolean integer_stackdepth) integer_lte exec_do*times () integer_div exec_noop integer_stackdepth integer_dup boolean_eq exec_rot (exec_do*while (exec_shove () exec_eq boolean_dup_times exec_do*range ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 47

step: 3000
program: (exec_yankdup in2 in4 in1 in3 boolean_dup integer_min in3 integer_min boolean_dup integer_min in3 integer_min integer_min integer_dup tagged_375 print_integer in4 exec_do*while (boolean_and) integer_div exec_pop (integer_fromboolean integer_stackdepth) integer_lte exec_do*times () integer_div exec_noop integer_stackdepth integer_dup boolean_eq exec_rot (exec_do*while (exec_shove () exec_eq boolean_dup_times exec_do*range ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 47

step: 3500
program: (exec_yankdup in2 in4 in1 in3 boolean_dup integer_min in3 integer_min boolean_dup integer_min in3 integer_min integer_min integer_dup tagged_375 print_integer in4 exec_do*while (boolean_and) integer_div exec_pop (integer_fromboolean integer_stackdepth) integer_lte exec_do*times () integer_div exec_noop integer_stackdepth integer_dup boolean_eq exec_rot (exec_do*while (exec_shove () exec_eq boolean_dup_times exec_do*range ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 47

step: 4000
program: (exec_yankdup in2 in4 in1 in3 boolean_dup integer_min in3 integer_min boolean_dup integer_min in3 integer_min integer_min integer_dup tagged_375 print_integer in4 exec_do*while (boolean_and) integer_div exec_pop (integer_fromboolean integer_stackdepth) integer_lte exec_do*times () integer_div exec_noop integer_stackdepth integer_dup boolean_eq exec_rot (exec_do*while (exec_shove () exec_eq boolean_dup_times exec_do*range ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 47

step: 4500
program: (exec_yankdup in2 in4 in1 in3 boolean_dup integer_min in3 integer_min boolean_dup integer_min in3 integer_min integer_min integer_dup tagged_375 print_integer in4 exec_do*while (boolean_and) integer_div exec_pop (integer_fromboolean integer_stackdepth) integer_lte exec_do*times () integer_div exec_noop integer_stackdepth integer_dup boolean_eq exec_rot (exec_do*while (exec_shove () exec_eq boolean_dup_times exec_do*range ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 47

step: 5000
program: (exec_yankdup in2 in4 in1 in3 boolean_dup integer_min in3 integer_min boolean_dup integer_min in3 integer_min integer_min integer_dup tagged_375 print_integer in4 exec_do*while (boolean_and) integer_div exec_pop (integer_fromboolean integer_stackdepth) integer_lte exec_do*times () integer_div exec_noop integer_stackdepth integer_dup boolean_eq exec_rot (exec_do*while (exec_shove () exec_eq boolean_dup_times exec_do*range ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 47

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: -8                 
Correct output: 58                  | Program output: 58                 
Correct output: 19                  | Program output: 19                 
Correct output: -66                 | Program output: -66                
Correct output: -68                 | Program output: -68                
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -86                
Correct output: -35                 | Program output: -35                
Correct output: -66                 | Program output: -66                
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 90                  | Program output: 90                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: 4                   | Program output: 4                  
Correct output: 27                  | Program output: 27                 
Correct output: 17                  | Program output: 17                 
Correct output: 35                  | Program output: 35                 
Correct output: 30                  | Program output: 30                 
Correct output: 21                  | Program output: 21                 
Correct output: 54                  | Program output: 54                 
Correct output: 17                  | Program output: 17                 
Correct output: 44                  | Program output: 44                 
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 30                  | Program output: 30                 
Correct output: 14                  | Program output: 14                 
Correct output: 28                  | Program output: 28                 
Correct output: 3                   | Program output: 3                  
Correct output: 60                  | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 1                  
Correct output: 32                  | Program output: 32                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 3                  
Correct output: -96                 | Program output: -96                
Correct output: -57                 | Program output: -57                
Correct output: 41                  | Program output: 41                 
Correct output: -93                 | Program output: -93                
Correct output: -6                  | Program output: -6                 
Correct output: -39                 | Program output: -39                
Correct output: 12                  | Program output: 12                 
Correct output: -68                 | Program output: -68                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -38                 | Program output: -38                
Correct output: -52                 | Program output: -52                
Correct output: -12                 | Program output: -12                
Correct output: -95                 | Program output: -95                
Correct output: -12                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -16                 | Program output: -16                
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
Correct output: -56                 | Program output: -56                
Correct output: -33                 | Program output: -33                
Correct output: -60                 | Program output: -60                
Correct output: -66                 | Program output: -66                
Correct output: -50                 | Program output: -50                
Correct output: 20                  | Program output: 20                 
Correct output: -67                 | Program output: -67                
Correct output: -24                 | Program output: -24                
Correct output: -82                 | Program output: -82                
Correct output: 56                  | Program output: 56                 
Correct output: -99                 | Program output: -99                
Correct output: -3                  | Program output: -3                 
Correct output: -77                 | Program output: -77                
Correct output: -85                 | Program output: -85                
Correct output: -10                 | Program output: -10                
Correct output: -63                 | Program output: -63                
Correct output: -82                 | Program output: -82                
Correct output: -26                 | Program output: -26                
Correct output: -64                 | Program output: -64                
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -85                 | Program output: -85                
Correct output: -47                 | Program output: -47                
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: -97                
Correct output: -61                 | Program output: -61                
Correct output: 29                  | Program output: 29                 
Correct output: -27                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -98                
Correct output: 19                  | Program output: 19                 
Correct output: -28                 | Program output: -28                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -73                
Correct output: -76                 | Program output: -76                
Correct output: -88                 | Program output: -88                
Correct output: -69                 | Program output: -69                
Correct output: 3                   | Program output: 3                  
Correct output: -87                 | Program output: -87                
;;******************************
