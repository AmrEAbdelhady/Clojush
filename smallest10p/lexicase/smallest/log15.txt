Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[95 95 95 85] 85] [[36 36 81 36] 36] [[32 32 32 87] 32] [[48 48 -73 48] -73] [[-44 -44 -1 -44] -44] [[-78 86 -78 -78] -78] [[80 76 76 76] 76] [[99 51 99 99] 51] [[-42 -16 -16 -16] -42] [[-89 -25 -25 -25] -89] [(-35 -35 -35 -35) -35] [(-19 -19 -19 -19) -19] [(47 47 47 47) 47] [(-72 -72 -72 -72) -72] [(-94 -94 -94 -94) -94] [(87 19 46 98) 19] [(15 24 71 86) 15] [(2 13 87 80) 2] [(36 21 51 42) 21] [(3 29 74 59) 3] [(13 67 49 43) 13] [(70 16 36 93) 16] [(57 24 57 7) 7] [(42 55 99 67) 42] [(3 23 2 64) 2] [(64 37 37 23) 23] [(7 57 25 11) 7] [(92 95 100 11) 11] [(56 35 19 23) 19] [(23 42 50 6) 6] [(28 83 67 36) 28] [(9 80 20 84) 9] [(55 90 33 60) 33] [(56 23 30 76) 23] [(59 82 37 29) 29] [(65 -84 64 47) -84] [(4 43 42 -14) -14] [(-88 12 4 66) -88] [(48 -82 -12 -27) -82] [(10 -48 1 65) -48] [(99 29 14 92) 14] [(-71 10 28 -94) -94] [(70 -21 -29 -69) -69] [(59 -90 76 -47) -90] [(69 -2 -73 42) -73] [(-31 54 -43 -72) -72] [(55 -65 11 15) -65] [(-17 -15 -96 -71) -96] [(14 78 -5 18) -5] [(-34 29 63 50) -34] [(61 82 83 -23) -23] [(-28 37 -54 45) -54] [(12 -67 47 -6) -67] [(66 -55 50 -96) -96] [(-28 -57 45 -22) -57] [(24 -7 74 -90) -90] [(5 31 -97 -9) -97] [(83 85 -52 12) -52] [(-72 84 -37 -28) -72] [(-86 34 75 54) -86] [(82 -42 51 41) -42] [(-3 -86 -35 -16) -86] [(-32 48 -90 38) -90] [(1 42 -55 -76) -76] [(4 54 11 8) 4] [(-31 -1 -21 57) -31] [(24 54 -41 49) -41] [(-5 7 28 75) -5] [(90 32 77 -44) -44] [(-51 -6 72 -66) -66] [(53 29 -61 3) -61] [(49 6 26 -18) -18] [(-81 -43 33 -64) -81] [(47 -21 45 -7) -21] [(2 -98 92 64) -98] [(-100 43 29 54) -100] [(93 14 -79 -47) -79] [(45 -15 -97 69) -97] [(-14 -8 -30 -50) -50] [(-89 -4 2 -59) -89] [(97 28 80 -30) -30] [(14 55 78 -55) -55] [(-68 26 -6 22) -68] [(66 -77 -4 99) -77] [(-23 11 92 -30) -30] [(-14 -41 -68 -53) -68] [(-45 -8 -15 -41) -45] [(-89 -46 13 32) -89] [(43 -24 60 72) -24] [(56 85 -82 -82) -82] [(93 53 -98 59) -98] [(35 -62 3 -4) -62] [(-69 98 4 90) -69] [(99 40 -67 33) -67] [(-65 -24 -47 28) -65])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[95 95 95 85] 85]
Train Case:   6 | Input/Output: [[36 36 81 36] 36]
Train Case:   7 | Input/Output: [[32 32 32 87] 32]
Train Case:   8 | Input/Output: [[48 48 -73 48] -73]
Train Case:   9 | Input/Output: [[-44 -44 -1 -44] -44]
Train Case:  10 | Input/Output: [[-78 86 -78 -78] -78]
Train Case:  11 | Input/Output: [[80 76 76 76] 76]
Train Case:  12 | Input/Output: [[99 51 99 99] 51]
Train Case:  13 | Input/Output: [[-42 -16 -16 -16] -42]
Train Case:  14 | Input/Output: [[-89 -25 -25 -25] -89]
Train Case:  15 | Input/Output: [(-35 -35 -35 -35) -35]
Train Case:  16 | Input/Output: [(-19 -19 -19 -19) -19]
Train Case:  17 | Input/Output: [(47 47 47 47) 47]
Train Case:  18 | Input/Output: [(-72 -72 -72 -72) -72]
Train Case:  19 | Input/Output: [(-94 -94 -94 -94) -94]
Train Case:  20 | Input/Output: [(87 19 46 98) 19]
Train Case:  21 | Input/Output: [(15 24 71 86) 15]
Train Case:  22 | Input/Output: [(2 13 87 80) 2]
Train Case:  23 | Input/Output: [(36 21 51 42) 21]
Train Case:  24 | Input/Output: [(3 29 74 59) 3]
Train Case:  25 | Input/Output: [(13 67 49 43) 13]
Train Case:  26 | Input/Output: [(70 16 36 93) 16]
Train Case:  27 | Input/Output: [(57 24 57 7) 7]
Train Case:  28 | Input/Output: [(42 55 99 67) 42]
Train Case:  29 | Input/Output: [(3 23 2 64) 2]
Train Case:  30 | Input/Output: [(64 37 37 23) 23]
Train Case:  31 | Input/Output: [(7 57 25 11) 7]
Train Case:  32 | Input/Output: [(92 95 100 11) 11]
Train Case:  33 | Input/Output: [(56 35 19 23) 19]
Train Case:  34 | Input/Output: [(23 42 50 6) 6]
Train Case:  35 | Input/Output: [(28 83 67 36) 28]
Train Case:  36 | Input/Output: [(9 80 20 84) 9]
Train Case:  37 | Input/Output: [(55 90 33 60) 33]
Train Case:  38 | Input/Output: [(56 23 30 76) 23]
Train Case:  39 | Input/Output: [(59 82 37 29) 29]
Train Case:  40 | Input/Output: [(65 -84 64 47) -84]
Train Case:  41 | Input/Output: [(4 43 42 -14) -14]
Train Case:  42 | Input/Output: [(-88 12 4 66) -88]
Train Case:  43 | Input/Output: [(48 -82 -12 -27) -82]
Train Case:  44 | Input/Output: [(10 -48 1 65) -48]
Train Case:  45 | Input/Output: [(99 29 14 92) 14]
Train Case:  46 | Input/Output: [(-71 10 28 -94) -94]
Train Case:  47 | Input/Output: [(70 -21 -29 -69) -69]
Train Case:  48 | Input/Output: [(59 -90 76 -47) -90]
Train Case:  49 | Input/Output: [(69 -2 -73 42) -73]
Train Case:  50 | Input/Output: [(-31 54 -43 -72) -72]
Train Case:  51 | Input/Output: [(55 -65 11 15) -65]
Train Case:  52 | Input/Output: [(-17 -15 -96 -71) -96]
Train Case:  53 | Input/Output: [(14 78 -5 18) -5]
Train Case:  54 | Input/Output: [(-34 29 63 50) -34]
Train Case:  55 | Input/Output: [(61 82 83 -23) -23]
Train Case:  56 | Input/Output: [(-28 37 -54 45) -54]
Train Case:  57 | Input/Output: [(12 -67 47 -6) -67]
Train Case:  58 | Input/Output: [(66 -55 50 -96) -96]
Train Case:  59 | Input/Output: [(-28 -57 45 -22) -57]
Train Case:  60 | Input/Output: [(24 -7 74 -90) -90]
Train Case:  61 | Input/Output: [(5 31 -97 -9) -97]
Train Case:  62 | Input/Output: [(83 85 -52 12) -52]
Train Case:  63 | Input/Output: [(-72 84 -37 -28) -72]
Train Case:  64 | Input/Output: [(-86 34 75 54) -86]
Train Case:  65 | Input/Output: [(82 -42 51 41) -42]
Train Case:  66 | Input/Output: [(-3 -86 -35 -16) -86]
Train Case:  67 | Input/Output: [(-32 48 -90 38) -90]
Train Case:  68 | Input/Output: [(1 42 -55 -76) -76]
Train Case:  69 | Input/Output: [(4 54 11 8) 4]
Train Case:  70 | Input/Output: [(-31 -1 -21 57) -31]
Train Case:  71 | Input/Output: [(24 54 -41 49) -41]
Train Case:  72 | Input/Output: [(-5 7 28 75) -5]
Train Case:  73 | Input/Output: [(90 32 77 -44) -44]
Train Case:  74 | Input/Output: [(-51 -6 72 -66) -66]
Train Case:  75 | Input/Output: [(53 29 -61 3) -61]
Train Case:  76 | Input/Output: [(49 6 26 -18) -18]
Train Case:  77 | Input/Output: [(-81 -43 33 -64) -81]
Train Case:  78 | Input/Output: [(47 -21 45 -7) -21]
Train Case:  79 | Input/Output: [(2 -98 92 64) -98]
Train Case:  80 | Input/Output: [(-100 43 29 54) -100]
Train Case:  81 | Input/Output: [(93 14 -79 -47) -79]
Train Case:  82 | Input/Output: [(45 -15 -97 69) -97]
Train Case:  83 | Input/Output: [(-14 -8 -30 -50) -50]
Train Case:  84 | Input/Output: [(-89 -4 2 -59) -89]
Train Case:  85 | Input/Output: [(97 28 80 -30) -30]
Train Case:  86 | Input/Output: [(14 55 78 -55) -55]
Train Case:  87 | Input/Output: [(-68 26 -6 22) -68]
Train Case:  88 | Input/Output: [(66 -77 -4 99) -77]
Train Case:  89 | Input/Output: [(-23 11 92 -30) -30]
Train Case:  90 | Input/Output: [(-14 -41 -68 -53) -68]
Train Case:  91 | Input/Output: [(-45 -8 -15 -41) -45]
Train Case:  92 | Input/Output: [(-89 -46 13 32) -89]
Train Case:  93 | Input/Output: [(43 -24 60 72) -24]
Train Case:  94 | Input/Output: [(56 85 -82 -82) -82]
Train Case:  95 | Input/Output: [(93 53 -98 59) -98]
Train Case:  96 | Input/Output: [(35 -62 3 -4) -62]
Train Case:  97 | Input/Output: [(-69 98 4 90) -69]
Train Case:  98 | Input/Output: [(99 40 -67 33) -67]
Train Case:  99 | Input/Output: [(-65 -24 -47 28) -65]
Test Case:   0 | Input/Output: [[40 40 40 -93] -93]
Test Case:   1 | Input/Output: [[-89 -89 -48 -89] -89]
Test Case:   2 | Input/Output: [[66 68 66 66] 66]
Test Case:   3 | Input/Output: [[-81 -81 -81 -81] -81]
Test Case:   4 | Input/Output: [[28 63 28 28] 28]
Test Case:   5 | Input/Output: [[2 2 2 -23] -23]
Test Case:   6 | Input/Output: [[-25 -25 56 -25] -25]
Test Case:   7 | Input/Output: [[-8 66 66 66] -8]
Test Case:   8 | Input/Output: [[-8 -6 -6 -6] -8]
Test Case:   9 | Input/Output: [[-81 -81 -81 -5] -81]
Test Case:  10 | Input/Output: [[29 29 76 29] 29]
Test Case:  11 | Input/Output: [[-38 47 47 47] -38]
Test Case:  12 | Input/Output: [[-52 -52 -79 -52] -79]
Test Case:  13 | Input/Output: [[-24 18 18 18] -24]
Test Case:  14 | Input/Output: [[21 21 77 21] 21]
Test Case:  15 | Input/Output: [[41 41 41 -67] -67]
Test Case:  16 | Input/Output: [[84 84 -17 84] -17]
Test Case:  17 | Input/Output: [[-74 -74 -83 -74] -83]
Test Case:  18 | Input/Output: [[76 82 82 82] 76]
Test Case:  19 | Input/Output: [[-27 -27 70 -27] -27]
Test Case:  20 | Input/Output: [[37 37 37 2] 2]
Test Case:  21 | Input/Output: [[-48 -26 -26 -26] -48]
Test Case:  22 | Input/Output: [[92 92 92 -6] -6]
Test Case:  23 | Input/Output: [[-93 -64 -93 -93] -93]
Test Case:  24 | Input/Output: [[-38 -54 -54 -54] -54]
Test Case:  25 | Input/Output: [[-83 100 -83 -83] -83]
Test Case:  26 | Input/Output: [[-26 16 16 16] -26]
Test Case:  27 | Input/Output: [[-67 -35 -35 -35] -67]
Test Case:  28 | Input/Output: [[-3 -3 59 -3] -3]
Test Case:  29 | Input/Output: [[-50 -50 -50 -68] -68]
Test Case:  30 | Input/Output: [[29 29 29 -67] -67]
Test Case:  31 | Input/Output: [[-19 -19 -19 -5] -19]
Test Case:  32 | Input/Output: [[-31 -31 -31 23] -31]
Test Case:  33 | Input/Output: [[-37 -37 -37 -95] -95]
Test Case:  34 | Input/Output: [[-44 -44 -5 -44] -44]
Test Case:  35 | Input/Output: [[21 21 21 -99] -99]
Test Case:  36 | Input/Output: [[-91 -91 -26 -91] -91]
Test Case:  37 | Input/Output: [[79 -49 79 79] -49]
Test Case:  38 | Input/Output: [[75 75 75 90] 75]
Test Case:  39 | Input/Output: [[15 90 90 90] 15]
Test Case:  40 | Input/Output: [[-90 -86 -86 -86] -90]
Test Case:  41 | Input/Output: [[-9 -9 -9 41] -9]
Test Case:  42 | Input/Output: [[19 -9 19 19] -9]
Test Case:  43 | Input/Output: [[-70 -70 34 -70] -70]
Test Case:  44 | Input/Output: [[1 1 43 1] 1]
Test Case:  45 | Input/Output: [[12 12 -51 12] -51]
Test Case:  46 | Input/Output: [[63 63 63 30] 30]
Test Case:  47 | Input/Output: [[22 -69 -69 -69] -69]
Test Case:  48 | Input/Output: [[44 -32 44 44] -32]
Test Case:  49 | Input/Output: [[43 -74 -74 -74] -74]
Test Case:  50 | Input/Output: [[47 47 -16 47] -16]
Test Case:  51 | Input/Output: [[-95 -95 -95 27] -95]
Test Case:  52 | Input/Output: [[47 47 47 -65] -65]
Test Case:  53 | Input/Output: [[85 78 85 85] 78]
Test Case:  54 | Input/Output: [[-91 30 -91 -91] -91]
Test Case:  55 | Input/Output: [[73 14 73 73] 14]
Test Case:  56 | Input/Output: [[-26 -14 -26 -26] -26]
Test Case:  57 | Input/Output: [[-98 -98 74 -98] -98]
Test Case:  58 | Input/Output: [[23 23 16 23] 16]
Test Case:  59 | Input/Output: [[58 -70 58 58] -70]
Test Case:  60 | Input/Output: [[-45 79 -45 -45] -45]
Test Case:  61 | Input/Output: [[-49 -49 -36 -49] -49]
Test Case:  62 | Input/Output: [[59 -95 59 59] -95]
Test Case:  63 | Input/Output: [[-39 100 100 100] -39]
Test Case:  64 | Input/Output: [[-53 84 -53 -53] -53]
Test Case:  65 | Input/Output: [[-83 -53 -53 -53] -83]
Test Case:  66 | Input/Output: [[-84 56 -84 -84] -84]
Test Case:  67 | Input/Output: [[-6 -6 -6 50] -6]
Test Case:  68 | Input/Output: [[-18 -18 -18 46] -18]
Test Case:  69 | Input/Output: [[59 59 -58 59] -58]
Test Case:  70 | Input/Output: [[-16 -12 -12 -12] -16]
Test Case:  71 | Input/Output: [[56 47 47 47] 47]
Test Case:  72 | Input/Output: [[29 66 29 29] 29]
Test Case:  73 | Input/Output: [[93 93 93 -60] -60]
Test Case:  74 | Input/Output: [[-82 -99 -82 -82] -99]
Test Case:  75 | Input/Output: [[-66 -66 -67 -66] -67]
Test Case:  76 | Input/Output: [[-30 -30 -30 -61] -61]
Test Case:  77 | Input/Output: [[-28 -28 -38 -28] -38]
Test Case:  78 | Input/Output: [[-86 -86 48 -86] -86]
Test Case:  79 | Input/Output: [[2 -19 2 2] -19]
Test Case:  80 | Input/Output: [[56 56 56 -19] -19]
Test Case:  81 | Input/Output: [[6 6 6 -22] -22]
Test Case:  82 | Input/Output: [[97 97 -66 97] -66]
Test Case:  83 | Input/Output: [[-85 59 59 59] -85]
Test Case:  84 | Input/Output: [[12 54 12 12] 12]
Test Case:  85 | Input/Output: [[88 88 88 95] 88]
Test Case:  86 | Input/Output: [[-19 -78 -19 -19] -78]
Test Case:  87 | Input/Output: [[-73 -73 -54 -73] -73]
Test Case:  88 | Input/Output: [[-41 -41 -89 -41] -89]
Test Case:  89 | Input/Output: [[-8 -8 45 -8] -8]
Test Case:  90 | Input/Output: [[67 67 67 3] 3]
Test Case:  91 | Input/Output: [[40 40 40 58] 40]
Test Case:  92 | Input/Output: [[-60 -33 -33 -33] -60]
Test Case:  93 | Input/Output: [[-49 -60 -49 -49] -60]
Test Case:  94 | Input/Output: [[-9 -9 -9 93] -9]
Test Case:  95 | Input/Output: [[-82 0 0 0] -82]
Test Case:  96 | Input/Output: [[-47 -2 -47 -47] -47]
Test Case:  97 | Input/Output: [[93 93 -63 93] -63]
Test Case:  98 | Input/Output: [[50 50 50 5] 5]
Test Case:  99 | Input/Output: [[-72 60 60 60] -72]
Test Case: 100 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 101 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 102 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 103 | Input/Output: [(66 66 66 66) 66]
Test Case: 104 | Input/Output: [(88 88 88 88) 88]
Test Case: 105 | Input/Output: [(6 6 6 6) 6]
Test Case: 106 | Input/Output: [(25 25 25 25) 25]
Test Case: 107 | Input/Output: [(74 74 74 74) 74]
Test Case: 108 | Input/Output: [(34 34 34 34) 34]
Test Case: 109 | Input/Output: [(98 98 98 98) 98]
Test Case: 110 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 111 | Input/Output: [(12 12 12 12) 12]
Test Case: 112 | Input/Output: [(95 95 95 95) 95]
Test Case: 113 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 114 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 115 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 116 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 117 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 118 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 119 | Input/Output: [(27 27 27 27) 27]
Test Case: 120 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 121 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 122 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 123 | Input/Output: [(85 85 85 85) 85]
Test Case: 124 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 125 | Input/Output: [(0 0 0 0) 0]
Test Case: 126 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 127 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 128 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 129 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 130 | Input/Output: [(49 49 49 49) 49]
Test Case: 131 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 132 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 133 | Input/Output: [(13 13 13 13) 13]
Test Case: 134 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 135 | Input/Output: [(81 81 81 81) 81]
Test Case: 136 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 137 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 138 | Input/Output: [(84 84 84 84) 84]
Test Case: 139 | Input/Output: [(61 61 61 61) 61]
Test Case: 140 | Input/Output: [(40 40 40 40) 40]
Test Case: 141 | Input/Output: [(62 62 62 62) 62]
Test Case: 142 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 143 | Input/Output: [(7 7 7 7) 7]
Test Case: 144 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 145 | Input/Output: [(38 38 38 38) 38]
Test Case: 146 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 147 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 148 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 149 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 150 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 151 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 152 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 153 | Input/Output: [(90 90 90 90) 90]
Test Case: 154 | Input/Output: [(19 19 19 19) 19]
Test Case: 155 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 156 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 157 | Input/Output: [(62 62 62 62) 62]
Test Case: 158 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 159 | Input/Output: [(81 81 81 81) 81]
Test Case: 160 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 161 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 162 | Input/Output: [(82 82 82 82) 82]
Test Case: 163 | Input/Output: [(12 12 12 12) 12]
Test Case: 164 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 165 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 166 | Input/Output: [(57 57 57 57) 57]
Test Case: 167 | Input/Output: [(81 81 81 81) 81]
Test Case: 168 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 169 | Input/Output: [(16 16 16 16) 16]
Test Case: 170 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 171 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 172 | Input/Output: [(15 15 15 15) 15]
Test Case: 173 | Input/Output: [(52 52 52 52) 52]
Test Case: 174 | Input/Output: [(62 62 62 62) 62]
Test Case: 175 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 176 | Input/Output: [(93 93 93 93) 93]
Test Case: 177 | Input/Output: [(58 58 58 58) 58]
Test Case: 178 | Input/Output: [(9 9 9 9) 9]
Test Case: 179 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 180 | Input/Output: [(18 18 18 18) 18]
Test Case: 181 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 182 | Input/Output: [(27 27 27 27) 27]
Test Case: 183 | Input/Output: [(68 68 68 68) 68]
Test Case: 184 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 185 | Input/Output: [(8 8 8 8) 8]
Test Case: 186 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 187 | Input/Output: [(60 60 60 60) 60]
Test Case: 188 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 189 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 190 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 191 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 192 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 193 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 194 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 195 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 196 | Input/Output: [(65 65 65 65) 65]
Test Case: 197 | Input/Output: [(94 94 94 94) 94]
Test Case: 198 | Input/Output: [(98 98 98 98) 98]
Test Case: 199 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 200 | Input/Output: [(19 23 55 26) 19]
Test Case: 201 | Input/Output: [(10 18 55 13) 10]
Test Case: 202 | Input/Output: [(94 80 89 69) 69]
Test Case: 203 | Input/Output: [(99 79 10 70) 10]
Test Case: 204 | Input/Output: [(13 39 31 68) 13]
Test Case: 205 | Input/Output: [(83 79 78 12) 12]
Test Case: 206 | Input/Output: [(99 80 22 78) 22]
Test Case: 207 | Input/Output: [(68 98 35 60) 35]
Test Case: 208 | Input/Output: [(18 44 86 57) 18]
Test Case: 209 | Input/Output: [(21 47 21 39) 21]
Test Case: 210 | Input/Output: [(84 14 50 36) 14]
Test Case: 211 | Input/Output: [(97 51 20 49) 20]
Test Case: 212 | Input/Output: [(7 49 91 8) 7]
Test Case: 213 | Input/Output: [(39 72 50 30) 30]
Test Case: 214 | Input/Output: [(35 82 18 74) 18]
Test Case: 215 | Input/Output: [(18 84 34 32) 18]
Test Case: 216 | Input/Output: [(24 10 74 12) 10]
Test Case: 217 | Input/Output: [(97 10 49 88) 10]
Test Case: 218 | Input/Output: [(26 99 13 60) 13]
Test Case: 219 | Input/Output: [(20 48 73 98) 20]
Test Case: 220 | Input/Output: [(53 100 52 65) 52]
Test Case: 221 | Input/Output: [(79 62 81 51) 51]
Test Case: 222 | Input/Output: [(0 11 23 82) 0]
Test Case: 223 | Input/Output: [(5 4 100 27) 4]
Test Case: 224 | Input/Output: [(11 85 43 56) 11]
Test Case: 225 | Input/Output: [(38 92 50 85) 38]
Test Case: 226 | Input/Output: [(30 8 83 10) 8]
Test Case: 227 | Input/Output: [(84 49 90 35) 35]
Test Case: 228 | Input/Output: [(37 18 50 47) 18]
Test Case: 229 | Input/Output: [(38 72 10 34) 10]
Test Case: 230 | Input/Output: [(21 30 61 12) 12]
Test Case: 231 | Input/Output: [(34 17 98 67) 17]
Test Case: 232 | Input/Output: [(40 72 71 68) 40]
Test Case: 233 | Input/Output: [(36 76 3 43) 3]
Test Case: 234 | Input/Output: [(13 5 71 94) 5]
Test Case: 235 | Input/Output: [(67 39 22 81) 22]
Test Case: 236 | Input/Output: [(93 11 28 34) 11]
Test Case: 237 | Input/Output: [(87 19 88 7) 7]
Test Case: 238 | Input/Output: [(100 51 71 43) 43]
Test Case: 239 | Input/Output: [(64 73 31 87) 31]
Test Case: 240 | Input/Output: [(82 60 81 96) 60]
Test Case: 241 | Input/Output: [(96 53 16 70) 16]
Test Case: 242 | Input/Output: [(94 1 0 56) 0]
Test Case: 243 | Input/Output: [(70 16 100 3) 3]
Test Case: 244 | Input/Output: [(4 60 55 86) 4]
Test Case: 245 | Input/Output: [(19 44 14 57) 14]
Test Case: 246 | Input/Output: [(20 90 74 42) 20]
Test Case: 247 | Input/Output: [(5 24 97 64) 5]
Test Case: 248 | Input/Output: [(55 30 88 24) 24]
Test Case: 249 | Input/Output: [(48 73 77 37) 37]
Test Case: 250 | Input/Output: [(48 31 46 51) 31]
Test Case: 251 | Input/Output: [(99 91 45 31) 31]
Test Case: 252 | Input/Output: [(29 19 1 63) 1]
Test Case: 253 | Input/Output: [(87 80 19 65) 19]
Test Case: 254 | Input/Output: [(34 25 16 66) 16]
Test Case: 255 | Input/Output: [(48 51 42 62) 42]
Test Case: 256 | Input/Output: [(13 33 56 94) 13]
Test Case: 257 | Input/Output: [(62 22 41 9) 9]
Test Case: 258 | Input/Output: [(74 53 20 51) 20]
Test Case: 259 | Input/Output: [(72 32 64 15) 15]
Test Case: 260 | Input/Output: [(67 34 80 32) 32]
Test Case: 261 | Input/Output: [(0 61 48 33) 0]
Test Case: 262 | Input/Output: [(0 38 23 45) 0]
Test Case: 263 | Input/Output: [(10 78 75 86) 10]
Test Case: 264 | Input/Output: [(79 26 27 1) 1]
Test Case: 265 | Input/Output: [(30 25 92 11) 11]
Test Case: 266 | Input/Output: [(90 53 7 91) 7]
Test Case: 267 | Input/Output: [(53 28 34 8) 8]
Test Case: 268 | Input/Output: [(4 61 93 42) 4]
Test Case: 269 | Input/Output: [(29 54 62 72) 29]
Test Case: 270 | Input/Output: [(94 30 42 75) 30]
Test Case: 271 | Input/Output: [(89 55 33 33) 33]
Test Case: 272 | Input/Output: [(12 94 21 37) 12]
Test Case: 273 | Input/Output: [(59 40 17 31) 17]
Test Case: 274 | Input/Output: [(27 70 26 28) 26]
Test Case: 275 | Input/Output: [(75 84 47 2) 2]
Test Case: 276 | Input/Output: [(56 28 20 4) 4]
Test Case: 277 | Input/Output: [(98 36 49 53) 36]
Test Case: 278 | Input/Output: [(35 36 50 37) 35]
Test Case: 279 | Input/Output: [(16 63 67 89) 16]
Test Case: 280 | Input/Output: [(46 28 77 29) 28]
Test Case: 281 | Input/Output: [(51 15 52 70) 15]
Test Case: 282 | Input/Output: [(62 99 21 52) 21]
Test Case: 283 | Input/Output: [(31 26 49 65) 26]
Test Case: 284 | Input/Output: [(85 88 92 69) 69]
Test Case: 285 | Input/Output: [(22 50 93 33) 22]
Test Case: 286 | Input/Output: [(9 78 12 53) 9]
Test Case: 287 | Input/Output: [(43 24 10 41) 10]
Test Case: 288 | Input/Output: [(69 87 83 90) 69]
Test Case: 289 | Input/Output: [(64 14 65 100) 14]
Test Case: 290 | Input/Output: [(46 78 94 35) 35]
Test Case: 291 | Input/Output: [(17 100 53 47) 17]
Test Case: 292 | Input/Output: [(7 37 54 74) 7]
Test Case: 293 | Input/Output: [(4 92 47 63) 4]
Test Case: 294 | Input/Output: [(48 75 42 2) 2]
Test Case: 295 | Input/Output: [(91 43 21 20) 20]
Test Case: 296 | Input/Output: [(28 0 99 11) 0]
Test Case: 297 | Input/Output: [(78 9 14 83) 9]
Test Case: 298 | Input/Output: [(20 71 40 6) 6]
Test Case: 299 | Input/Output: [(66 40 87 58) 40]
Test Case: 300 | Input/Output: [(5 7 2 70) 2]
Test Case: 301 | Input/Output: [(62 70 77 54) 54]
Test Case: 302 | Input/Output: [(25 1 86 67) 1]
Test Case: 303 | Input/Output: [(23 12 54 13) 12]
Test Case: 304 | Input/Output: [(85 42 28 33) 28]
Test Case: 305 | Input/Output: [(53 49 75 83) 49]
Test Case: 306 | Input/Output: [(97 43 38 0) 0]
Test Case: 307 | Input/Output: [(7 87 81 99) 7]
Test Case: 308 | Input/Output: [(44 59 21 65) 21]
Test Case: 309 | Input/Output: [(25 93 18 54) 18]
Test Case: 310 | Input/Output: [(26 13 43 91) 13]
Test Case: 311 | Input/Output: [(88 68 10 92) 10]
Test Case: 312 | Input/Output: [(30 39 5 76) 5]
Test Case: 313 | Input/Output: [(100 11 63 33) 11]
Test Case: 314 | Input/Output: [(55 26 15 16) 15]
Test Case: 315 | Input/Output: [(56 54 42 14) 14]
Test Case: 316 | Input/Output: [(91 14 22 24) 14]
Test Case: 317 | Input/Output: [(99 2 39 78) 2]
Test Case: 318 | Input/Output: [(93 34 55 49) 34]
Test Case: 319 | Input/Output: [(0 27 18 19) 0]
Test Case: 320 | Input/Output: [(8 13 98 58) 8]
Test Case: 321 | Input/Output: [(87 20 57 16) 16]
Test Case: 322 | Input/Output: [(41 83 46 89) 41]
Test Case: 323 | Input/Output: [(23 81 84 95) 23]
Test Case: 324 | Input/Output: [(94 79 64 61) 61]
Test Case: 325 | Input/Output: [(17 77 84 97) 17]
Test Case: 326 | Input/Output: [(95 62 83 73) 62]
Test Case: 327 | Input/Output: [(53 74 61 27) 27]
Test Case: 328 | Input/Output: [(86 28 16 63) 16]
Test Case: 329 | Input/Output: [(67 88 94 75) 67]
Test Case: 330 | Input/Output: [(83 61 88 13) 13]
Test Case: 331 | Input/Output: [(8 32 62 43) 8]
Test Case: 332 | Input/Output: [(17 63 76 61) 17]
Test Case: 333 | Input/Output: [(31 21 14 58) 14]
Test Case: 334 | Input/Output: [(24 64 85 9) 9]
Test Case: 335 | Input/Output: [(48 77 24 72) 24]
Test Case: 336 | Input/Output: [(71 96 89 40) 40]
Test Case: 337 | Input/Output: [(71 49 98 66) 49]
Test Case: 338 | Input/Output: [(58 84 81 78) 58]
Test Case: 339 | Input/Output: [(44 93 44 47) 44]
Test Case: 340 | Input/Output: [(78 62 8 71) 8]
Test Case: 341 | Input/Output: [(92 4 66 40) 4]
Test Case: 342 | Input/Output: [(81 92 56 81) 56]
Test Case: 343 | Input/Output: [(82 26 47 7) 7]
Test Case: 344 | Input/Output: [(20 64 47 80) 20]
Test Case: 345 | Input/Output: [(67 22 54 100) 22]
Test Case: 346 | Input/Output: [(0 19 55 51) 0]
Test Case: 347 | Input/Output: [(10 59 7 66) 7]
Test Case: 348 | Input/Output: [(42 14 76 27) 14]
Test Case: 349 | Input/Output: [(17 70 86 27) 17]
Test Case: 350 | Input/Output: [(54 77 79 72) 54]
Test Case: 351 | Input/Output: [(73 40 16 88) 16]
Test Case: 352 | Input/Output: [(92 57 90 54) 54]
Test Case: 353 | Input/Output: [(27 41 60 9) 9]
Test Case: 354 | Input/Output: [(49 18 77 12) 12]
Test Case: 355 | Input/Output: [(20 63 8 52) 8]
Test Case: 356 | Input/Output: [(18 54 93 73) 18]
Test Case: 357 | Input/Output: [(96 5 1 83) 1]
Test Case: 358 | Input/Output: [(81 64 10 55) 10]
Test Case: 359 | Input/Output: [(56 23 42 50) 23]
Test Case: 360 | Input/Output: [(29 48 54 53) 29]
Test Case: 361 | Input/Output: [(97 93 25 68) 25]
Test Case: 362 | Input/Output: [(89 36 56 14) 14]
Test Case: 363 | Input/Output: [(18 70 7 47) 7]
Test Case: 364 | Input/Output: [(0 29 25 84) 0]
Test Case: 365 | Input/Output: [(58 60 1 77) 1]
Test Case: 366 | Input/Output: [(35 61 58 82) 35]
Test Case: 367 | Input/Output: [(85 95 40 52) 40]
Test Case: 368 | Input/Output: [(2 42 52 82) 2]
Test Case: 369 | Input/Output: [(96 4 55 32) 4]
Test Case: 370 | Input/Output: [(95 22 100 40) 22]
Test Case: 371 | Input/Output: [(83 77 73 81) 73]
Test Case: 372 | Input/Output: [(34 18 96 86) 18]
Test Case: 373 | Input/Output: [(27 76 100 64) 27]
Test Case: 374 | Input/Output: [(99 72 17 55) 17]
Test Case: 375 | Input/Output: [(24 16 33 89) 16]
Test Case: 376 | Input/Output: [(9 14 21 22) 9]
Test Case: 377 | Input/Output: [(23 48 51 82) 23]
Test Case: 378 | Input/Output: [(47 53 81 0) 0]
Test Case: 379 | Input/Output: [(63 58 43 38) 38]
Test Case: 380 | Input/Output: [(62 86 9 88) 9]
Test Case: 381 | Input/Output: [(88 13 81 32) 13]
Test Case: 382 | Input/Output: [(43 36 40 28) 28]
Test Case: 383 | Input/Output: [(73 93 27 25) 25]
Test Case: 384 | Input/Output: [(31 23 0 9) 0]
Test Case: 385 | Input/Output: [(60 70 93 66) 60]
Test Case: 386 | Input/Output: [(51 44 48 73) 44]
Test Case: 387 | Input/Output: [(57 19 51 71) 19]
Test Case: 388 | Input/Output: [(65 50 40 24) 24]
Test Case: 389 | Input/Output: [(51 55 92 24) 24]
Test Case: 390 | Input/Output: [(39 73 7 13) 7]
Test Case: 391 | Input/Output: [(72 5 15 22) 5]
Test Case: 392 | Input/Output: [(40 18 5 86) 5]
Test Case: 393 | Input/Output: [(28 6 6 26) 6]
Test Case: 394 | Input/Output: [(71 3 16 99) 3]
Test Case: 395 | Input/Output: [(85 69 82 27) 27]
Test Case: 396 | Input/Output: [(15 36 64 21) 15]
Test Case: 397 | Input/Output: [(3 90 25 70) 3]
Test Case: 398 | Input/Output: [(88 3 64 0) 0]
Test Case: 399 | Input/Output: [(68 34 46 25) 25]
Test Case: 400 | Input/Output: [(-25 18 87 12) -25]
Test Case: 401 | Input/Output: [(-43 14 42 -79) -79]
Test Case: 402 | Input/Output: [(38 -22 95 -5) -22]
Test Case: 403 | Input/Output: [(95 -40 38 -73) -73]
Test Case: 404 | Input/Output: [(-17 -50 55 20) -50]
Test Case: 405 | Input/Output: [(-39 -28 13 -53) -53]
Test Case: 406 | Input/Output: [(-97 16 12 -15) -97]
Test Case: 407 | Input/Output: [(-4 -76 5 86) -76]
Test Case: 408 | Input/Output: [(-60 49 29 56) -60]
Test Case: 409 | Input/Output: [(-83 -64 19 54) -83]
Test Case: 410 | Input/Output: [(63 36 40 -27) -27]
Test Case: 411 | Input/Output: [(-92 88 35 -96) -96]
Test Case: 412 | Input/Output: [(70 -30 12 56) -30]
Test Case: 413 | Input/Output: [(90 -67 15 -6) -67]
Test Case: 414 | Input/Output: [(-6 99 -42 -86) -86]
Test Case: 415 | Input/Output: [(-58 48 85 51) -58]
Test Case: 416 | Input/Output: [(-32 -33 -31 36) -33]
Test Case: 417 | Input/Output: [(51 -25 -35 -44) -44]
Test Case: 418 | Input/Output: [(-22 -51 74 2) -51]
Test Case: 419 | Input/Output: [(-91 72 48 82) -91]
Test Case: 420 | Input/Output: [(-65 28 91 -98) -98]
Test Case: 421 | Input/Output: [(-90 21 -65 -60) -90]
Test Case: 422 | Input/Output: [(45 73 -36 83) -36]
Test Case: 423 | Input/Output: [(-53 -59 86 73) -59]
Test Case: 424 | Input/Output: [(-45 -32 -79 -47) -79]
Test Case: 425 | Input/Output: [(13 -57 -97 -71) -97]
Test Case: 426 | Input/Output: [(-40 -96 81 -13) -96]
Test Case: 427 | Input/Output: [(-78 38 -39 11) -78]
Test Case: 428 | Input/Output: [(34 -5 45 2) -5]
Test Case: 429 | Input/Output: [(-85 81 -63 -33) -85]
Test Case: 430 | Input/Output: [(79 16 26 4) 4]
Test Case: 431 | Input/Output: [(15 63 -16 -92) -92]
Test Case: 432 | Input/Output: [(-13 -9 55 12) -13]
Test Case: 433 | Input/Output: [(-11 53 50 -99) -99]
Test Case: 434 | Input/Output: [(69 33 -71 -15) -71]
Test Case: 435 | Input/Output: [(-88 41 82 -6) -88]
Test Case: 436 | Input/Output: [(54 -66 -12 -84) -84]
Test Case: 437 | Input/Output: [(-8 60 -54 -29) -54]
Test Case: 438 | Input/Output: [(-69 -51 9 5) -69]
Test Case: 439 | Input/Output: [(22 69 91 31) 22]
Test Case: 440 | Input/Output: [(43 17 -80 58) -80]
Test Case: 441 | Input/Output: [(-61 -49 -77 92) -77]
Test Case: 442 | Input/Output: [(-26 -49 -98 -50) -98]
Test Case: 443 | Input/Output: [(6 -89 12 -79) -89]
Test Case: 444 | Input/Output: [(-2 62 -16 -21) -21]
Test Case: 445 | Input/Output: [(73 86 -73 -30) -73]
Test Case: 446 | Input/Output: [(-51 30 -78 35) -78]
Test Case: 447 | Input/Output: [(17 -42 -54 -17) -54]
Test Case: 448 | Input/Output: [(16 -68 -32 55) -68]
Test Case: 449 | Input/Output: [(-86 -36 33 76) -86]
Test Case: 450 | Input/Output: [(-99 10 -84 -9) -99]
Test Case: 451 | Input/Output: [(91 -21 47 11) -21]
Test Case: 452 | Input/Output: [(75 -42 -4 -20) -42]
Test Case: 453 | Input/Output: [(85 -77 -61 -69) -77]
Test Case: 454 | Input/Output: [(97 24 28 70) 24]
Test Case: 455 | Input/Output: [(-28 -34 -22 43) -34]
Test Case: 456 | Input/Output: [(-39 2 30 -24) -39]
Test Case: 457 | Input/Output: [(21 -52 -62 -50) -62]
Test Case: 458 | Input/Output: [(5 -28 -25 72) -28]
Test Case: 459 | Input/Output: [(72 29 17 -46) -46]
Test Case: 460 | Input/Output: [(-31 -99 -31 75) -99]
Test Case: 461 | Input/Output: [(53 -90 58 -40) -90]
Test Case: 462 | Input/Output: [(64 -16 -70 -94) -94]
Test Case: 463 | Input/Output: [(36 68 80 -30) -30]
Test Case: 464 | Input/Output: [(-40 70 -72 -61) -72]
Test Case: 465 | Input/Output: [(94 11 -66 -18) -66]
Test Case: 466 | Input/Output: [(-31 79 82 6) -31]
Test Case: 467 | Input/Output: [(-97 -20 46 -36) -97]
Test Case: 468 | Input/Output: [(-72 -55 50 69) -72]
Test Case: 469 | Input/Output: [(43 50 -43 69) -43]
Test Case: 470 | Input/Output: [(67 -81 -58 -44) -81]
Test Case: 471 | Input/Output: [(70 14 -77 -22) -77]
Test Case: 472 | Input/Output: [(99 66 60 -94) -94]
Test Case: 473 | Input/Output: [(11 -98 70 -7) -98]
Test Case: 474 | Input/Output: [(60 -67 86 44) -67]
Test Case: 475 | Input/Output: [(-64 -72 91 -52) -72]
Test Case: 476 | Input/Output: [(85 93 93 42) 42]
Test Case: 477 | Input/Output: [(90 -64 -96 92) -96]
Test Case: 478 | Input/Output: [(91 -77 -99 -35) -99]
Test Case: 479 | Input/Output: [(21 -76 -37 47) -76]
Test Case: 480 | Input/Output: [(70 -90 50 -57) -90]
Test Case: 481 | Input/Output: [(42 -56 75 -95) -95]
Test Case: 482 | Input/Output: [(-57 50 16 46) -57]
Test Case: 483 | Input/Output: [(-2 93 -26 -49) -49]
Test Case: 484 | Input/Output: [(-96 92 -1 -19) -96]
Test Case: 485 | Input/Output: [(45 27 57 38) 27]
Test Case: 486 | Input/Output: [(76 -1 -18 -30) -30]
Test Case: 487 | Input/Output: [(-69 -53 -28 80) -69]
Test Case: 488 | Input/Output: [(-96 45 17 3) -96]
Test Case: 489 | Input/Output: [(3 24 60 -87) -87]
Test Case: 490 | Input/Output: [(-67 -71 -52 -72) -72]
Test Case: 491 | Input/Output: [(8 -4 -16 -86) -86]
Test Case: 492 | Input/Output: [(6 20 -49 -45) -49]
Test Case: 493 | Input/Output: [(-83 -67 -58 -82) -83]
Test Case: 494 | Input/Output: [(6 -27 93 93) -27]
Test Case: 495 | Input/Output: [(-76 -90 -16 -74) -90]
Test Case: 496 | Input/Output: [(28 73 -64 -13) -64]
Test Case: 497 | Input/Output: [(53 38 -69 -29) -69]
Test Case: 498 | Input/Output: [(52 33 -50 -96) -96]
Test Case: 499 | Input/Output: [(-98 41 77 -33) -98]
Test Case: 500 | Input/Output: [(4 79 28 72) 4]
Test Case: 501 | Input/Output: [(-21 -25 -12 35) -25]
Test Case: 502 | Input/Output: [(-100 -21 -79 24) -100]
Test Case: 503 | Input/Output: [(84 -46 15 -36) -46]
Test Case: 504 | Input/Output: [(-14 67 23 45) -14]
Test Case: 505 | Input/Output: [(5 -79 -95 -70) -95]
Test Case: 506 | Input/Output: [(25 -13 47 -45) -45]
Test Case: 507 | Input/Output: [(-1 -77 36 95) -77]
Test Case: 508 | Input/Output: [(-5 -81 -76 73) -81]
Test Case: 509 | Input/Output: [(46 -24 -39 -88) -88]
Test Case: 510 | Input/Output: [(-26 -19 42 82) -26]
Test Case: 511 | Input/Output: [(84 92 -90 87) -90]
Test Case: 512 | Input/Output: [(18 -86 -51 -8) -86]
Test Case: 513 | Input/Output: [(-99 -49 39 55) -99]
Test Case: 514 | Input/Output: [(-82 61 -94 -2) -94]
Test Case: 515 | Input/Output: [(40 -99 17 31) -99]
Test Case: 516 | Input/Output: [(-12 -49 80 47) -49]
Test Case: 517 | Input/Output: [(-12 -38 -9 42) -38]
Test Case: 518 | Input/Output: [(67 -21 -57 -70) -70]
Test Case: 519 | Input/Output: [(-65 10 90 25) -65]
Test Case: 520 | Input/Output: [(27 -67 -17 63) -67]
Test Case: 521 | Input/Output: [(79 -24 29 47) -24]
Test Case: 522 | Input/Output: [(22 38 -64 66) -64]
Test Case: 523 | Input/Output: [(79 -8 32 94) -8]
Test Case: 524 | Input/Output: [(31 -19 57 -16) -19]
Test Case: 525 | Input/Output: [(-29 91 -88 -47) -88]
Test Case: 526 | Input/Output: [(-18 50 -29 -16) -29]
Test Case: 527 | Input/Output: [(-39 1 76 -81) -81]
Test Case: 528 | Input/Output: [(-34 -34 -39 -3) -39]
Test Case: 529 | Input/Output: [(-32 -50 98 29) -50]
Test Case: 530 | Input/Output: [(-64 99 -69 85) -69]
Test Case: 531 | Input/Output: [(-72 -70 12 -69) -72]
Test Case: 532 | Input/Output: [(38 -64 65 6) -64]
Test Case: 533 | Input/Output: [(15 -75 -57 48) -75]
Test Case: 534 | Input/Output: [(-93 100 -34 41) -93]
Test Case: 535 | Input/Output: [(53 34 39 46) 34]
Test Case: 536 | Input/Output: [(69 90 -69 94) -69]
Test Case: 537 | Input/Output: [(-6 -93 -80 -66) -93]
Test Case: 538 | Input/Output: [(-88 -95 92 2) -95]
Test Case: 539 | Input/Output: [(78 -12 -16 96) -16]
Test Case: 540 | Input/Output: [(-96 67 -92 26) -96]
Test Case: 541 | Input/Output: [(5 -57 72 -9) -57]
Test Case: 542 | Input/Output: [(-69 86 10 -9) -69]
Test Case: 543 | Input/Output: [(-35 45 -37 -79) -79]
Test Case: 544 | Input/Output: [(-78 75 -91 -7) -91]
Test Case: 545 | Input/Output: [(19 -26 91 43) -26]
Test Case: 546 | Input/Output: [(-43 57 66 88) -43]
Test Case: 547 | Input/Output: [(-64 -57 -100 -48) -100]
Test Case: 548 | Input/Output: [(94 -39 -56 14) -56]
Test Case: 549 | Input/Output: [(1 45 -70 41) -70]
Test Case: 550 | Input/Output: [(3 89 37 -79) -79]
Test Case: 551 | Input/Output: [(-29 49 -62 -11) -62]
Test Case: 552 | Input/Output: [(-63 40 -77 -23) -77]
Test Case: 553 | Input/Output: [(-86 -99 -72 35) -99]
Test Case: 554 | Input/Output: [(84 -27 43 -31) -31]
Test Case: 555 | Input/Output: [(-11 -7 -43 -23) -43]
Test Case: 556 | Input/Output: [(44 18 -95 6) -95]
Test Case: 557 | Input/Output: [(-94 -2 -27 56) -94]
Test Case: 558 | Input/Output: [(28 91 80 25) 25]
Test Case: 559 | Input/Output: [(38 -53 -26 -31) -53]
Test Case: 560 | Input/Output: [(47 -14 79 -56) -56]
Test Case: 561 | Input/Output: [(-78 -23 -16 -84) -84]
Test Case: 562 | Input/Output: [(46 -15 -23 27) -23]
Test Case: 563 | Input/Output: [(-36 -69 70 -97) -97]
Test Case: 564 | Input/Output: [(43 94 76 -68) -68]
Test Case: 565 | Input/Output: [(-69 -54 5 -71) -71]
Test Case: 566 | Input/Output: [(-83 22 23 -77) -83]
Test Case: 567 | Input/Output: [(19 68 -10 -80) -80]
Test Case: 568 | Input/Output: [(38 -67 -76 23) -76]
Test Case: 569 | Input/Output: [(19 0 41 -90) -90]
Test Case: 570 | Input/Output: [(-96 26 44 -52) -96]
Test Case: 571 | Input/Output: [(30 68 -59 91) -59]
Test Case: 572 | Input/Output: [(96 -67 -64 72) -67]
Test Case: 573 | Input/Output: [(26 -63 80 60) -63]
Test Case: 574 | Input/Output: [(-30 64 53 -44) -44]
Test Case: 575 | Input/Output: [(19 75 22 -33) -33]
Test Case: 576 | Input/Output: [(77 75 -85 21) -85]
Test Case: 577 | Input/Output: [(29 -38 10 81) -38]
Test Case: 578 | Input/Output: [(70 -92 19 53) -92]
Test Case: 579 | Input/Output: [(-25 90 -19 83) -25]
Test Case: 580 | Input/Output: [(51 -73 -30 -48) -73]
Test Case: 581 | Input/Output: [(-81 -91 -68 90) -91]
Test Case: 582 | Input/Output: [(94 -33 54 34) -33]
Test Case: 583 | Input/Output: [(-47 -5 64 -73) -73]
Test Case: 584 | Input/Output: [(14 -87 -47 81) -87]
Test Case: 585 | Input/Output: [(43 83 1 2) 1]
Test Case: 586 | Input/Output: [(-13 -20 26 -44) -44]
Test Case: 587 | Input/Output: [(-26 13 -1 76) -26]
Test Case: 588 | Input/Output: [(2 -48 -95 90) -95]
Test Case: 589 | Input/Output: [(67 3 86 60) 3]
Test Case: 590 | Input/Output: [(36 46 -49 39) -49]
Test Case: 591 | Input/Output: [(-5 28 -34 99) -34]
Test Case: 592 | Input/Output: [(-57 -27 -53 -84) -84]
Test Case: 593 | Input/Output: [(-40 83 98 77) -40]
Test Case: 594 | Input/Output: [(-33 -52 -9 79) -52]
Test Case: 595 | Input/Output: [(-53 -18 82 -21) -53]
Test Case: 596 | Input/Output: [(6 3 86 -94) -94]
Test Case: 597 | Input/Output: [(-38 76 -44 18) -44]
Test Case: 598 | Input/Output: [(-94 -35 -89 1) -94]
Test Case: 599 | Input/Output: [(55 -76 -5 31) -76]
Test Case: 600 | Input/Output: [(-23 -58 -1 56) -58]
Test Case: 601 | Input/Output: [(65 -75 -13 84) -75]
Test Case: 602 | Input/Output: [(98 -11 -61 -30) -61]
Test Case: 603 | Input/Output: [(-91 -100 -54 -18) -100]
Test Case: 604 | Input/Output: [(-68 -100 -59 -39) -100]
Test Case: 605 | Input/Output: [(-40 -94 -97 25) -97]
Test Case: 606 | Input/Output: [(-84 90 -9 -34) -84]
Test Case: 607 | Input/Output: [(4 -37 100 63) -37]
Test Case: 608 | Input/Output: [(84 79 57 18) 18]
Test Case: 609 | Input/Output: [(-88 43 -90 -36) -90]
Test Case: 610 | Input/Output: [(-91 63 -89 16) -91]
Test Case: 611 | Input/Output: [(57 -11 -86 -52) -86]
Test Case: 612 | Input/Output: [(-40 -21 -38 -57) -57]
Test Case: 613 | Input/Output: [(-61 73 58 -47) -61]
Test Case: 614 | Input/Output: [(48 -94 31 48) -94]
Test Case: 615 | Input/Output: [(-1 -87 -48 91) -87]
Test Case: 616 | Input/Output: [(88 41 -46 44) -46]
Test Case: 617 | Input/Output: [(-43 4 57 -54) -54]
Test Case: 618 | Input/Output: [(-52 84 -100 -28) -100]
Test Case: 619 | Input/Output: [(-22 72 10 -22) -22]
Test Case: 620 | Input/Output: [(-98 -75 -51 -80) -98]
Test Case: 621 | Input/Output: [(34 56 -20 54) -20]
Test Case: 622 | Input/Output: [(17 -72 48 23) -72]
Test Case: 623 | Input/Output: [(-58 -46 -28 -77) -77]
Test Case: 624 | Input/Output: [(-41 86 78 -7) -41]
Test Case: 625 | Input/Output: [(61 12 -89 -72) -89]
Test Case: 626 | Input/Output: [(-73 -89 -7 51) -89]
Test Case: 627 | Input/Output: [(80 84 -99 45) -99]
Test Case: 628 | Input/Output: [(-98 40 -25 40) -98]
Test Case: 629 | Input/Output: [(-93 -49 -54 -14) -93]
Test Case: 630 | Input/Output: [(78 24 -83 89) -83]
Test Case: 631 | Input/Output: [(30 -17 -88 -32) -88]
Test Case: 632 | Input/Output: [(-74 16 41 -18) -74]
Test Case: 633 | Input/Output: [(48 36 33 -92) -92]
Test Case: 634 | Input/Output: [(-26 65 23 -3) -26]
Test Case: 635 | Input/Output: [(-7 -45 -62 -45) -62]
Test Case: 636 | Input/Output: [(37 -43 76 -2) -43]
Test Case: 637 | Input/Output: [(12 -45 41 5) -45]
Test Case: 638 | Input/Output: [(8 -29 -53 32) -53]
Test Case: 639 | Input/Output: [(66 -86 16 -79) -86]
Test Case: 640 | Input/Output: [(39 78 41 -6) -6]
Test Case: 641 | Input/Output: [(46 65 -24 -43) -43]
Test Case: 642 | Input/Output: [(-83 -38 -55 63) -83]
Test Case: 643 | Input/Output: [(-51 -80 -39 -3) -80]
Test Case: 644 | Input/Output: [(-51 13 -99 81) -99]
Test Case: 645 | Input/Output: [(-24 77 -6 43) -24]
Test Case: 646 | Input/Output: [(-39 -45 26 71) -45]
Test Case: 647 | Input/Output: [(-86 34 -26 20) -86]
Test Case: 648 | Input/Output: [(-65 -74 -100 34) -100]
Test Case: 649 | Input/Output: [(30 -35 -39 39) -39]
Test Case: 650 | Input/Output: [(9 -9 -52 5) -52]
Test Case: 651 | Input/Output: [(-100 53 92 98) -100]
Test Case: 652 | Input/Output: [(72 -83 -56 -37) -83]
Test Case: 653 | Input/Output: [(31 25 66 19) 19]
Test Case: 654 | Input/Output: [(-89 73 -30 26) -89]
Test Case: 655 | Input/Output: [(-92 -94 80 -29) -94]
Test Case: 656 | Input/Output: [(-33 47 41 92) -33]
Test Case: 657 | Input/Output: [(60 63 -59 -22) -59]
Test Case: 658 | Input/Output: [(-62 40 54 22) -62]
Test Case: 659 | Input/Output: [(89 32 80 42) 32]
Test Case: 660 | Input/Output: [(-83 69 95 -60) -83]
Test Case: 661 | Input/Output: [(41 -69 34 -52) -69]
Test Case: 662 | Input/Output: [(-59 70 -15 -62) -62]
Test Case: 663 | Input/Output: [(-79 66 -63 -68) -79]
Test Case: 664 | Input/Output: [(24 -39 36 96) -39]
Test Case: 665 | Input/Output: [(23 46 97 -21) -21]
Test Case: 666 | Input/Output: [(35 89 90 -67) -67]
Test Case: 667 | Input/Output: [(-29 14 -64 -14) -64]
Test Case: 668 | Input/Output: [(-50 56 -33 22) -50]
Test Case: 669 | Input/Output: [(-19 19 88 -9) -19]
Test Case: 670 | Input/Output: [(-85 -58 6 -48) -85]
Test Case: 671 | Input/Output: [(19 -83 49 58) -83]
Test Case: 672 | Input/Output: [(61 37 51 100) 37]
Test Case: 673 | Input/Output: [(16 51 32 74) 16]
Test Case: 674 | Input/Output: [(-18 -64 96 -61) -64]
Test Case: 675 | Input/Output: [(-39 97 57 13) -39]
Test Case: 676 | Input/Output: [(94 -25 -68 34) -68]
Test Case: 677 | Input/Output: [(62 -62 10 71) -62]
Test Case: 678 | Input/Output: [(60 31 0 76) 0]
Test Case: 679 | Input/Output: [(-11 -35 -5 -27) -35]
Test Case: 680 | Input/Output: [(-22 60 -87 -80) -87]
Test Case: 681 | Input/Output: [(20 83 54 95) 20]
Test Case: 682 | Input/Output: [(-97 -51 -32 36) -97]
Test Case: 683 | Input/Output: [(19 7 70 -48) -48]
Test Case: 684 | Input/Output: [(85 84 -64 67) -64]
Test Case: 685 | Input/Output: [(55 -25 3 -18) -25]
Test Case: 686 | Input/Output: [(61 -48 19 29) -48]
Test Case: 687 | Input/Output: [(-89 42 62 100) -89]
Test Case: 688 | Input/Output: [(43 55 74 -85) -85]
Test Case: 689 | Input/Output: [(-19 52 89 46) -19]
Test Case: 690 | Input/Output: [(-82 23 72 -41) -82]
Test Case: 691 | Input/Output: [(-63 -68 -38 -65) -68]
Test Case: 692 | Input/Output: [(78 25 94 17) 17]
Test Case: 693 | Input/Output: [(70 -69 -60 -62) -69]
Test Case: 694 | Input/Output: [(19 36 -22 61) -22]
Test Case: 695 | Input/Output: [(76 -17 24 -55) -55]
Test Case: 696 | Input/Output: [(40 -19 -95 -26) -95]
Test Case: 697 | Input/Output: [(-82 18 -79 -48) -82]
Test Case: 698 | Input/Output: [(34 -20 2 -88) -88]
Test Case: 699 | Input/Output: [(-50 87 98 -43) -50]
Test Case: 700 | Input/Output: [(-41 73 66 -60) -60]
Test Case: 701 | Input/Output: [(-98 -31 56 68) -98]
Test Case: 702 | Input/Output: [(-9 25 60 81) -9]
Test Case: 703 | Input/Output: [(81 100 -68 -93) -93]
Test Case: 704 | Input/Output: [(74 94 -42 33) -42]
Test Case: 705 | Input/Output: [(-46 -45 46 -85) -85]
Test Case: 706 | Input/Output: [(62 -20 93 -28) -28]
Test Case: 707 | Input/Output: [(12 -47 -58 -89) -89]
Test Case: 708 | Input/Output: [(-72 30 -27 -24) -72]
Test Case: 709 | Input/Output: [(15 -38 -47 -75) -75]
Test Case: 710 | Input/Output: [(89 12 56 28) 12]
Test Case: 711 | Input/Output: [(80 -62 60 93) -62]
Test Case: 712 | Input/Output: [(-71 6 -94 -59) -94]
Test Case: 713 | Input/Output: [(52 48 20 -76) -76]
Test Case: 714 | Input/Output: [(-65 77 -72 39) -72]
Test Case: 715 | Input/Output: [(26 63 94 31) 26]
Test Case: 716 | Input/Output: [(7 -63 -52 -88) -88]
Test Case: 717 | Input/Output: [(77 -58 38 -69) -69]
Test Case: 718 | Input/Output: [(-73 1 -73 -93) -93]
Test Case: 719 | Input/Output: [(27 4 -67 65) -67]
Test Case: 720 | Input/Output: [(81 -56 -68 73) -68]
Test Case: 721 | Input/Output: [(89 60 97 -31) -31]
Test Case: 722 | Input/Output: [(-75 -3 98 41) -75]
Test Case: 723 | Input/Output: [(-64 8 46 8) -64]
Test Case: 724 | Input/Output: [(8 -65 98 31) -65]
Test Case: 725 | Input/Output: [(-48 -6 -13 -9) -48]
Test Case: 726 | Input/Output: [(83 93 -75 45) -75]
Test Case: 727 | Input/Output: [(-64 -27 26 80) -64]
Test Case: 728 | Input/Output: [(-97 -58 21 83) -97]
Test Case: 729 | Input/Output: [(-7 -38 8 55) -38]
Test Case: 730 | Input/Output: [(57 -45 -41 -25) -45]
Test Case: 731 | Input/Output: [(32 -59 -95 77) -95]
Test Case: 732 | Input/Output: [(-64 -48 -4 88) -64]
Test Case: 733 | Input/Output: [(-51 45 83 -94) -94]
Test Case: 734 | Input/Output: [(68 72 -10 -61) -61]
Test Case: 735 | Input/Output: [(-5 41 1 -89) -89]
Test Case: 736 | Input/Output: [(-57 5 -38 -89) -89]
Test Case: 737 | Input/Output: [(48 -22 32 71) -22]
Test Case: 738 | Input/Output: [(-42 -100 -79 27) -100]
Test Case: 739 | Input/Output: [(-26 96 -33 -76) -76]
Test Case: 740 | Input/Output: [(-35 -36 -91 -59) -91]
Test Case: 741 | Input/Output: [(-90 69 -82 -32) -90]
Test Case: 742 | Input/Output: [(-83 -78 -14 26) -83]
Test Case: 743 | Input/Output: [(-16 -6 -28 97) -28]
Test Case: 744 | Input/Output: [(15 60 15 -37) -37]
Test Case: 745 | Input/Output: [(-5 59 62 -42) -42]
Test Case: 746 | Input/Output: [(-76 22 67 59) -76]
Test Case: 747 | Input/Output: [(-3 -83 -46 9) -83]
Test Case: 748 | Input/Output: [(-49 5 -21 -11) -49]
Test Case: 749 | Input/Output: [(-26 -91 -15 -90) -91]
Test Case: 750 | Input/Output: [(13 18 -91 15) -91]
Test Case: 751 | Input/Output: [(-78 74 -24 -27) -78]
Test Case: 752 | Input/Output: [(61 78 -71 -12) -71]
Test Case: 753 | Input/Output: [(-81 67 70 80) -81]
Test Case: 754 | Input/Output: [(86 12 50 84) 12]
Test Case: 755 | Input/Output: [(69 -26 -96 77) -96]
Test Case: 756 | Input/Output: [(3 -52 -98 95) -98]
Test Case: 757 | Input/Output: [(-35 -73 41 40) -73]
Test Case: 758 | Input/Output: [(-72 33 39 -4) -72]
Test Case: 759 | Input/Output: [(-22 83 -52 51) -52]
Test Case: 760 | Input/Output: [(80 97 -34 -71) -71]
Test Case: 761 | Input/Output: [(-25 -51 -10 44) -51]
Test Case: 762 | Input/Output: [(45 -25 -5 65) -25]
Test Case: 763 | Input/Output: [(-29 -8 4 -99) -99]
Test Case: 764 | Input/Output: [(28 -62 97 63) -62]
Test Case: 765 | Input/Output: [(30 -72 -40 18) -72]
Test Case: 766 | Input/Output: [(-76 7 4 -71) -76]
Test Case: 767 | Input/Output: [(-52 -66 -48 -23) -66]
Test Case: 768 | Input/Output: [(80 94 28 -31) -31]
Test Case: 769 | Input/Output: [(7 -28 -73 -8) -73]
Test Case: 770 | Input/Output: [(4 -43 69 53) -43]
Test Case: 771 | Input/Output: [(0 -32 62 24) -32]
Test Case: 772 | Input/Output: [(59 35 43 -31) -31]
Test Case: 773 | Input/Output: [(-52 -37 17 -18) -52]
Test Case: 774 | Input/Output: [(-92 62 -61 33) -92]
Test Case: 775 | Input/Output: [(-14 41 -93 80) -93]
Test Case: 776 | Input/Output: [(-64 59 -26 -9) -64]
Test Case: 777 | Input/Output: [(-20 -47 61 -95) -95]
Test Case: 778 | Input/Output: [(73 -32 55 21) -32]
Test Case: 779 | Input/Output: [(-5 -44 20 39) -44]
Test Case: 780 | Input/Output: [(65 -69 70 97) -69]
Test Case: 781 | Input/Output: [(60 24 91 -16) -16]
Test Case: 782 | Input/Output: [(91 -75 -18 27) -75]
Test Case: 783 | Input/Output: [(47 0 28 -27) -27]
Test Case: 784 | Input/Output: [(67 -75 -56 -41) -75]
Test Case: 785 | Input/Output: [(-34 -51 53 3) -51]
Test Case: 786 | Input/Output: [(-85 39 96 73) -85]
Test Case: 787 | Input/Output: [(80 -27 -40 2) -40]
Test Case: 788 | Input/Output: [(7 39 89 56) 7]
Test Case: 789 | Input/Output: [(70 -100 -62 63) -100]
Test Case: 790 | Input/Output: [(73 -6 -81 23) -81]
Test Case: 791 | Input/Output: [(92 74 7 -5) -5]
Test Case: 792 | Input/Output: [(-16 -94 -22 -3) -94]
Test Case: 793 | Input/Output: [(-82 76 54 -10) -82]
Test Case: 794 | Input/Output: [(31 -13 -41 76) -41]
Test Case: 795 | Input/Output: [(71 -79 -66 87) -79]
Test Case: 796 | Input/Output: [(1 68 7 -59) -59]
Test Case: 797 | Input/Output: [(7 25 62 70) 7]
Test Case: 798 | Input/Output: [(84 -74 52 -64) -74]
Test Case: 799 | Input/Output: [(-17 69 37 -2) -17]
Test Case: 800 | Input/Output: [(81 72 17 93) 17]
Test Case: 801 | Input/Output: [(16 -12 -97 -75) -97]
Test Case: 802 | Input/Output: [(-89 70 25 43) -89]
Test Case: 803 | Input/Output: [(-95 61 77 -9) -95]
Test Case: 804 | Input/Output: [(-46 77 10 -43) -46]
Test Case: 805 | Input/Output: [(67 -31 17 -77) -77]
Test Case: 806 | Input/Output: [(13 18 -83 39) -83]
Test Case: 807 | Input/Output: [(-17 48 81 -82) -82]
Test Case: 808 | Input/Output: [(56 91 -53 -7) -53]
Test Case: 809 | Input/Output: [(10 -1 57 -64) -64]
Test Case: 810 | Input/Output: [(-34 82 1 40) -34]
Test Case: 811 | Input/Output: [(-86 55 -33 37) -86]
Test Case: 812 | Input/Output: [(-52 -32 51 -87) -87]
Test Case: 813 | Input/Output: [(-99 -82 39 -91) -99]
Test Case: 814 | Input/Output: [(-99 53 27 37) -99]
Test Case: 815 | Input/Output: [(13 -26 13 67) -26]
Test Case: 816 | Input/Output: [(27 3 -56 2) -56]
Test Case: 817 | Input/Output: [(21 87 47 -54) -54]
Test Case: 818 | Input/Output: [(-31 -95 -95 24) -95]
Test Case: 819 | Input/Output: [(-71 -70 -32 -93) -93]
Test Case: 820 | Input/Output: [(65 16 87 65) 16]
Test Case: 821 | Input/Output: [(-72 67 -75 82) -75]
Test Case: 822 | Input/Output: [(65 87 78 3) 3]
Test Case: 823 | Input/Output: [(-61 -9 -32 -97) -97]
Test Case: 824 | Input/Output: [(-79 -97 -100 -100) -100]
Test Case: 825 | Input/Output: [(34 -94 49 -3) -94]
Test Case: 826 | Input/Output: [(-73 -70 41 -49) -73]
Test Case: 827 | Input/Output: [(9 -50 95 28) -50]
Test Case: 828 | Input/Output: [(83 -35 46 74) -35]
Test Case: 829 | Input/Output: [(-62 -92 15 -39) -92]
Test Case: 830 | Input/Output: [(88 17 84 -43) -43]
Test Case: 831 | Input/Output: [(29 -63 -12 -35) -63]
Test Case: 832 | Input/Output: [(72 -57 100 -95) -95]
Test Case: 833 | Input/Output: [(-41 -74 -58 -9) -74]
Test Case: 834 | Input/Output: [(-41 47 -56 46) -56]
Test Case: 835 | Input/Output: [(60 40 66 -12) -12]
Test Case: 836 | Input/Output: [(4 -29 19 -100) -100]
Test Case: 837 | Input/Output: [(-88 -59 96 -73) -88]
Test Case: 838 | Input/Output: [(36 -70 -21 14) -70]
Test Case: 839 | Input/Output: [(-66 -36 -10 -5) -66]
Test Case: 840 | Input/Output: [(66 53 33 -100) -100]
Test Case: 841 | Input/Output: [(58 51 50 -4) -4]
Test Case: 842 | Input/Output: [(-12 -79 64 -8) -79]
Test Case: 843 | Input/Output: [(28 3 -27 -62) -62]
Test Case: 844 | Input/Output: [(-72 -42 -20 -60) -72]
Test Case: 845 | Input/Output: [(64 -74 -23 17) -74]
Test Case: 846 | Input/Output: [(-74 -30 58 99) -74]
Test Case: 847 | Input/Output: [(49 97 -26 43) -26]
Test Case: 848 | Input/Output: [(-100 -49 62 82) -100]
Test Case: 849 | Input/Output: [(65 -1 60 -70) -70]
Test Case: 850 | Input/Output: [(36 78 14 -18) -18]
Test Case: 851 | Input/Output: [(-3 -26 6 -24) -26]
Test Case: 852 | Input/Output: [(25 5 39 -13) -13]
Test Case: 853 | Input/Output: [(51 70 44 -79) -79]
Test Case: 854 | Input/Output: [(92 -39 52 -63) -63]
Test Case: 855 | Input/Output: [(44 43 -70 -57) -70]
Test Case: 856 | Input/Output: [(92 -65 -45 34) -65]
Test Case: 857 | Input/Output: [(30 100 -71 -50) -71]
Test Case: 858 | Input/Output: [(-75 -20 -53 -97) -97]
Test Case: 859 | Input/Output: [(-35 54 45 49) -35]
Test Case: 860 | Input/Output: [(6 -68 -31 -13) -68]
Test Case: 861 | Input/Output: [(97 84 -80 -7) -80]
Test Case: 862 | Input/Output: [(-4 30 64 81) -4]
Test Case: 863 | Input/Output: [(-69 4 -72 -51) -72]
Test Case: 864 | Input/Output: [(55 58 -57 -31) -57]
Test Case: 865 | Input/Output: [(-24 40 85 25) -24]
Test Case: 866 | Input/Output: [(-69 -72 -82 -96) -96]
Test Case: 867 | Input/Output: [(34 -31 99 -81) -81]
Test Case: 868 | Input/Output: [(44 -80 -54 -82) -82]
Test Case: 869 | Input/Output: [(-94 38 23 -20) -94]
Test Case: 870 | Input/Output: [(-35 35 47 84) -35]
Test Case: 871 | Input/Output: [(16 -87 -73 73) -87]
Test Case: 872 | Input/Output: [(-89 2 4 48) -89]
Test Case: 873 | Input/Output: [(-91 -23 42 16) -91]
Test Case: 874 | Input/Output: [(-25 -84 38 30) -84]
Test Case: 875 | Input/Output: [(9 79 -63 12) -63]
Test Case: 876 | Input/Output: [(71 -20 44 -17) -20]
Test Case: 877 | Input/Output: [(-46 47 -98 8) -98]
Test Case: 878 | Input/Output: [(19 -45 -49 80) -49]
Test Case: 879 | Input/Output: [(24 -38 35 -36) -38]
Test Case: 880 | Input/Output: [(-100 -43 -59 95) -100]
Test Case: 881 | Input/Output: [(61 95 35 -37) -37]
Test Case: 882 | Input/Output: [(-25 47 34 -71) -71]
Test Case: 883 | Input/Output: [(-10 56 -36 57) -36]
Test Case: 884 | Input/Output: [(87 89 62 33) 33]
Test Case: 885 | Input/Output: [(-27 59 -18 31) -27]
Test Case: 886 | Input/Output: [(64 -93 -13 -65) -93]
Test Case: 887 | Input/Output: [(-81 24 -1 -10) -81]
Test Case: 888 | Input/Output: [(34 75 29 -60) -60]
Test Case: 889 | Input/Output: [(-25 -51 -77 -80) -80]
Test Case: 890 | Input/Output: [(35 -86 94 -30) -86]
Test Case: 891 | Input/Output: [(-35 -60 14 -68) -68]
Test Case: 892 | Input/Output: [(-5 54 100 -92) -92]
Test Case: 893 | Input/Output: [(-7 -80 24 -54) -80]
Test Case: 894 | Input/Output: [(28 -79 -73 -44) -79]
Test Case: 895 | Input/Output: [(-2 -5 -16 -80) -80]
Test Case: 896 | Input/Output: [(-73 41 99 1) -73]
Test Case: 897 | Input/Output: [(36 62 -51 60) -51]
Test Case: 898 | Input/Output: [(11 53 48 53) 11]
Test Case: 899 | Input/Output: [(-72 -98 7 -31) -98]
Test Case: 900 | Input/Output: [(-40 -81 67 -57) -81]
Test Case: 901 | Input/Output: [(-34 -80 -99 -88) -99]
Test Case: 902 | Input/Output: [(-82 -63 17 -75) -82]
Test Case: 903 | Input/Output: [(-81 -88 -9 -97) -97]
Test Case: 904 | Input/Output: [(-45 53 -72 62) -72]
Test Case: 905 | Input/Output: [(89 57 70 -33) -33]
Test Case: 906 | Input/Output: [(-32 81 87 80) -32]
Test Case: 907 | Input/Output: [(97 -86 -53 29) -86]
Test Case: 908 | Input/Output: [(87 30 -62 -30) -62]
Test Case: 909 | Input/Output: [(-29 -99 96 -32) -99]
Test Case: 910 | Input/Output: [(59 -24 0 32) -24]
Test Case: 911 | Input/Output: [(-1 -69 -84 61) -84]
Test Case: 912 | Input/Output: [(-81 -69 15 53) -81]
Test Case: 913 | Input/Output: [(-4 -86 2 -86) -86]
Test Case: 914 | Input/Output: [(92 -94 49 -5) -94]
Test Case: 915 | Input/Output: [(66 -88 -24 -64) -88]
Test Case: 916 | Input/Output: [(-82 91 -25 11) -82]
Test Case: 917 | Input/Output: [(71 -10 -74 57) -74]
Test Case: 918 | Input/Output: [(-80 -4 -100 50) -100]
Test Case: 919 | Input/Output: [(53 -65 -74 -33) -74]
Test Case: 920 | Input/Output: [(-63 -76 -10 17) -76]
Test Case: 921 | Input/Output: [(-56 -53 -85 -57) -85]
Test Case: 922 | Input/Output: [(95 -63 -19 -20) -63]
Test Case: 923 | Input/Output: [(-96 61 -13 84) -96]
Test Case: 924 | Input/Output: [(69 -67 -1 -70) -70]
Test Case: 925 | Input/Output: [(-25 -1 -35 60) -35]
Test Case: 926 | Input/Output: [(-17 33 68 98) -17]
Test Case: 927 | Input/Output: [(60 -23 -92 -24) -92]
Test Case: 928 | Input/Output: [(21 -80 -60 -58) -80]
Test Case: 929 | Input/Output: [(-74 -82 -23 -57) -82]
Test Case: 930 | Input/Output: [(35 -78 86 91) -78]
Test Case: 931 | Input/Output: [(41 -42 -1 91) -42]
Test Case: 932 | Input/Output: [(-26 -38 -75 87) -75]
Test Case: 933 | Input/Output: [(-29 53 -55 -56) -56]
Test Case: 934 | Input/Output: [(-53 69 43 -100) -100]
Test Case: 935 | Input/Output: [(62 35 -78 -28) -78]
Test Case: 936 | Input/Output: [(-59 12 90 -46) -59]
Test Case: 937 | Input/Output: [(-37 11 81 -51) -51]
Test Case: 938 | Input/Output: [(-70 -61 86 0) -70]
Test Case: 939 | Input/Output: [(93 -60 40 100) -60]
Test Case: 940 | Input/Output: [(55 53 -66 78) -66]
Test Case: 941 | Input/Output: [(19 52 -96 83) -96]
Test Case: 942 | Input/Output: [(47 -8 -88 -76) -88]
Test Case: 943 | Input/Output: [(16 -49 -97 -18) -97]
Test Case: 944 | Input/Output: [(41 -74 -58 4) -74]
Test Case: 945 | Input/Output: [(50 57 78 -88) -88]
Test Case: 946 | Input/Output: [(41 -66 -60 -65) -66]
Test Case: 947 | Input/Output: [(23 -62 57 -33) -62]
Test Case: 948 | Input/Output: [(-56 57 -6 35) -56]
Test Case: 949 | Input/Output: [(58 -95 29 84) -95]
Test Case: 950 | Input/Output: [(60 -25 -66 -92) -92]
Test Case: 951 | Input/Output: [(-43 -46 42 42) -46]
Test Case: 952 | Input/Output: [(-19 56 -20 62) -20]
Test Case: 953 | Input/Output: [(8 35 59 21) 8]
Test Case: 954 | Input/Output: [(-29 -95 -31 -57) -95]
Test Case: 955 | Input/Output: [(73 41 -40 65) -40]
Test Case: 956 | Input/Output: [(75 95 -64 25) -64]
Test Case: 957 | Input/Output: [(-27 93 -6 -72) -72]
Test Case: 958 | Input/Output: [(-16 -17 -31 -27) -31]
Test Case: 959 | Input/Output: [(-25 16 89 87) -25]
Test Case: 960 | Input/Output: [(5 77 -17 21) -17]
Test Case: 961 | Input/Output: [(-15 -10 87 -66) -66]
Test Case: 962 | Input/Output: [(-44 -14 78 -19) -44]
Test Case: 963 | Input/Output: [(-95 -69 -58 -30) -95]
Test Case: 964 | Input/Output: [(-56 -68 43 -52) -68]
Test Case: 965 | Input/Output: [(-19 1 -16 64) -19]
Test Case: 966 | Input/Output: [(41 29 64 85) 29]
Test Case: 967 | Input/Output: [(-4 60 -18 -47) -47]
Test Case: 968 | Input/Output: [(-42 -86 82 80) -86]
Test Case: 969 | Input/Output: [(-51 68 36 -72) -72]
Test Case: 970 | Input/Output: [(0 -92 19 -91) -92]
Test Case: 971 | Input/Output: [(-74 -51 94 -20) -74]
Test Case: 972 | Input/Output: [(-90 93 -16 9) -90]
Test Case: 973 | Input/Output: [(1 8 -49 9) -49]
Test Case: 974 | Input/Output: [(-29 36 -85 41) -85]
Test Case: 975 | Input/Output: [(58 85 -76 2) -76]
Test Case: 976 | Input/Output: [(14 60 -60 21) -60]
Test Case: 977 | Input/Output: [(-37 -58 -63 28) -63]
Test Case: 978 | Input/Output: [(-62 39 64 -28) -62]
Test Case: 979 | Input/Output: [(-36 -19 -79 31) -79]
Test Case: 980 | Input/Output: [(-78 10 -34 -63) -78]
Test Case: 981 | Input/Output: [(-94 -93 33 13) -94]
Test Case: 982 | Input/Output: [(-66 -16 29 46) -66]
Test Case: 983 | Input/Output: [(73 -39 43 -23) -39]
Test Case: 984 | Input/Output: [(-20 -77 -9 39) -77]
Test Case: 985 | Input/Output: [(-34 34 30 28) -34]
Test Case: 986 | Input/Output: [(49 -42 11 41) -42]
Test Case: 987 | Input/Output: [(-86 27 56 -18) -86]
Test Case: 988 | Input/Output: [(61 37 29 -27) -27]
Test Case: 989 | Input/Output: [(10 23 -46 46) -46]
Test Case: 990 | Input/Output: [(42 78 -21 83) -21]
Test Case: 991 | Input/Output: [(11 33 -93 19) -93]
Test Case: 992 | Input/Output: [(98 30 71 -3) -3]
Test Case: 993 | Input/Output: [(-24 44 14 -38) -38]
Test Case: 994 | Input/Output: [(-42 -99 17 -53) -99]
Test Case: 995 | Input/Output: [(7 97 -47 -98) -98]
Test Case: 996 | Input/Output: [(22 -76 -89 -7) -89]
Test Case: 997 | Input/Output: [(67 -86 63 -43) -86]
Test Case: 998 | Input/Output: [(94 -25 13 -17) -25]
Test Case: 999 | Input/Output: [(-90 55 -77 -77) -90]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = 118 51 -111 -12 -76 -77 81 -11 57 72 -64 80 4 -102 1 57
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[95 95 95 85] 85] [[36 36 81 36] 36] [[32 32 32 87] 32] [[48 48 -73 48] -73] [[-44 -44 -1 -44] -44] [[-78 86 -78 -78] -78] [[80 76 76 76] 76] [[99 51 99 99] 51] [[-42 -16 -16 -16] -42] [[-89 -25 -25 -25] -89] [(-35 -35 -35 -35) -35] [(-19 -19 -19 -19) -19] [(47 47 47 47) 47] [(-72 -72 -72 -72) -72] [(-94 -94 -94 -94) -94] [(87 19 46 98) 19] [(15 24 71 86) 15] [(2 13 87 80) 2] [(36 21 51 42) 21] [(3 29 74 59) 3] [(13 67 49 43) 13] [(70 16 36 93) 16] [(57 24 57 7) 7] [(42 55 99 67) 42] [(3 23 2 64) 2] [(64 37 37 23) 23] [(7 57 25 11) 7] [(92 95 100 11) 11] [(56 35 19 23) 19] [(23 42 50 6) 6] [(28 83 67 36) 28] [(9 80 20 84) 9] [(55 90 33 60) 33] [(56 23 30 76) 23] [(59 82 37 29) 29] [(65 -84 64 47) -84] [(4 43 42 -14) -14] [(-88 12 4 66) -88] [(48 -82 -12 -27) -82] [(10 -48 1 65) -48] [(99 29 14 92) 14] [(-71 10 28 -94) -94] [(70 -21 -29 -69) -69] [(59 -90 76 -47) -90] [(69 -2 -73 42) -73] [(-31 54 -43 -72) -72] [(55 -65 11 15) -65] [(-17 -15 -96 -71) -96] [(14 78 -5 18) -5] [(-34 29 63 50) -34] [(61 82 83 -23) -23] [(-28 37 -54 45) -54] [(12 -67 47 -6) -67] [(66 -55 50 -96) -96] [(-28 -57 45 -22) -57] [(24 -7 74 -90) -90] [(5 31 -97 -9) -97] [(83 85 -52 12) -52] [(-72 84 -37 -28) -72] [(-86 34 75 54) -86] [(82 -42 51 41) -42] [(-3 -86 -35 -16) -86] [(-32 48 -90 38) -90] [(1 42 -55 -76) -76] [(4 54 11 8) 4] [(-31 -1 -21 57) -31] [(24 54 -41 49) -41] [(-5 7 28 75) -5] [(90 32 77 -44) -44] [(-51 -6 72 -66) -66] [(53 29 -61 3) -61] [(49 6 26 -18) -18] [(-81 -43 33 -64) -81] [(47 -21 45 -7) -21] [(2 -98 92 64) -98] [(-100 43 29 54) -100] [(93 14 -79 -47) -79] [(45 -15 -97 69) -97] [(-14 -8 -30 -50) -50] [(-89 -4 2 -59) -89] [(97 28 80 -30) -30] [(14 55 78 -55) -55] [(-68 26 -6 22) -68] [(66 -77 -4 99) -77] [(-23 11 92 -30) -30] [(-14 -41 -68 -53) -68] [(-45 -8 -15 -41) -45] [(-89 -46 13 32) -89] [(43 -24 60 72) -24] [(56 85 -82 -82) -82] [(93 53 -98 59) -98] [(35 -62 3 -4) -62] [(-69 98 4 90) -69] [(99 40 -67 33) -67] [(-65 -24 -47 28) -65])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 85                  | Program output: 95                 
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 32                 
Correct output: -73                 | Program output: 48                 
Correct output: -44                 | Program output: -44                
Correct output: -78                 | Program output: -78                
Correct output: 76                  | Program output: 80                 
Correct output: 51                  | Program output: 99                 
Correct output: -42                 | Program output: -42                
Correct output: -89                 | Program output: -89                
Correct output: -35                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: 47                  | Program output: 47                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output: 87                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 21                  | Program output: 36                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 70                 
Correct output: 7                   | Program output: 57                 
Correct output: 42                  | Program output: 42                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 64                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 92                 
Correct output: 19                  | Program output: 56                 
Correct output: 6                   | Program output: 23                 
Correct output: 28                  | Program output: 28                 
Correct output: 9                   | Program output: 9                  
Correct output: 33                  | Program output: 55                 
Correct output: 23                  | Program output: 56                 
Correct output: 29                  | Program output: 59                 
Correct output: -84                 | Program output: 65                 
Correct output: -14                 | Program output: 4                  
Correct output: -88                 | Program output: -88                
Correct output: -82                 | Program output: 48                 
Correct output: -48                 | Program output: 10                 
Correct output: 14                  | Program output: 99                 
Correct output: -94                 | Program output: -71                
Correct output: -69                 | Program output: 70                 
Correct output: -90                 | Program output: 59                 
Correct output: -73                 | Program output: 69                 
Correct output: -72                 | Program output: -31                
Correct output: -65                 | Program output: 55                 
Correct output: -96                 | Program output: -17                
Correct output: -5                  | Program output: 14                 
Correct output: -34                 | Program output: -34                
Correct output: -23                 | Program output: 61                 
Correct output: -54                 | Program output: -28                
Correct output: -67                 | Program output: 12                 
Correct output: -96                 | Program output: 66                 
Correct output: -57                 | Program output: -28                
Correct output: -90                 | Program output: 24                 
Correct output: -97                 | Program output: 5                  
Correct output: -52                 | Program output: 83                 
Correct output: -72                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: -42                 | Program output: 82                 
Correct output: -86                 | Program output: -3                 
Correct output: -90                 | Program output: -32                
Correct output: -76                 | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: -31                 | Program output: -31                
Correct output: -41                 | Program output: 24                 
Correct output: -5                  | Program output: -5                 
Correct output: -44                 | Program output: 90                 
Correct output: -66                 | Program output: -51                
Correct output: -61                 | Program output: 53                 
Correct output: -18                 | Program output: 49                 
Correct output: -81                 | Program output: -81                
Correct output: -21                 | Program output: 47                 
Correct output: -98                 | Program output: 2                  
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: 93                 
Correct output: -97                 | Program output: 45                 
Correct output: -50                 | Program output: -14                
Correct output: -89                 | Program output: -89                
Correct output: -30                 | Program output: 97                 
Correct output: -55                 | Program output: 14                 
Correct output: -68                 | Program output: -68                
Correct output: -77                 | Program output: 66                 
Correct output: -30                 | Program output: -23                
Correct output: -68                 | Program output: -14                
Correct output: -45                 | Program output: -45                
Correct output: -89                 | Program output: -89                
Correct output: -24                 | Program output: 43                 
Correct output: -82                 | Program output: 56                 
Correct output: -98                 | Program output: 93                 
Correct output: -62                 | Program output: 35                 
Correct output: -69                 | Program output: -69                
Correct output: -67                 | Program output: 99                 
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 2, :instruction integer_eq} {:close 0, :instruction in1} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction tagged_872} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (boolean_xor exec_eq in1 exec_when (boolean_dup_times integer_gte exec_noop) exec_dup_times () integer_dup_times exec_do*range (boolean_or integer_eq) in1 boolean_flush print_integer boolean_frominteger exec_do*count (integer_max integer_empty exec_do*times (exec_k_when_autoconstructing (in4 exec_do*times (boolean_not exec_yankdup boolean_dup boolean_not integer_rot integer_rot integer_yankdup tagged_872) integer_rot exec_do*while (boolean_xor integer_yank exec_pop (exec_do*count (integer_dec exec_k_when_autoconstructing (in4 integer_add boolean_and in4) (in3 exec_if (integer_mod exec_swap () (boolean_not exec_dup_times (boolean_xor print_integer) in4 boolean_eq print_integer exec_k_when_autoconstructing (exec_y_when_autoconstructing ()) ())) ()))))) ())))
Lexicase best errors: [1 0 0 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 78
Percent parens: 0.282
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 2, :instruction integer_eq} {:close 0, :instruction in1} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction tagged_872} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (boolean_xor exec_eq in1 exec_when (boolean_dup_times integer_gte exec_noop) exec_dup_times () integer_dup_times exec_do*range (boolean_or integer_eq) in1 boolean_flush print_integer boolean_frominteger exec_do*count (integer_max integer_empty exec_do*times (exec_k_when_autoconstructing (in4 exec_do*times (boolean_not exec_yankdup boolean_dup boolean_not integer_rot integer_rot integer_yankdup tagged_872) integer_rot exec_do*while (boolean_xor integer_yank exec_pop (exec_do*count (integer_dec exec_k_when_autoconstructing (in4 integer_add boolean_and in4) (in3 exec_if (integer_mod exec_swap () (boolean_not exec_dup_times (boolean_xor print_integer) in4 boolean_eq print_integer exec_k_when_autoconstructing (exec_y_when_autoconstructing ()) ())) ()))))) ())))
Zero cases best errors: [1 0 0 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 78
Percent parens: 0.282
--- Lexicase Population Statistics ---
Count of elite individuals by case: (5 3 3 7 18 6 3 5 3 3)
Population mean number of elite cases: 0.06
Count of perfect (error zero) individuals by case: (5 3 3 7 18 6 3 5 3 3)
Population mean number of perfect (error zero) cases: 0.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_boolean_923} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_when} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_max})
Best program: (boolean_stackdepth integer_eq exec_s_when_autoconstructing (in1 exec_k_when_autoconstructing (exec_empty exec_s (print_integer exec_flush boolean_rot tag_boolean_923 integer_empty integer_dup_times) (integer_empty integer_max exec_while (in3 integer_yank) boolean_empty integer_lt) (integer_mod integer_dup_items exec_dup_times (boolean_and boolean_shove exec_s (integer_flush exec_when (exec_stackdepth)) (integer_max) ()))) ()) () ())
Errors: [1 0 0 1 0 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 30
Size: 45
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 9.944
Median total errors in population: 10
Error averages by case: (0.995 0.997 0.997 0.993 0.982 0.994 0.997 0.995 0.997 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.032
Average program size in population (points): 70.381
Average percent parens in population: 0.283
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.273
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 474901
--- Timings ---
Current time: 1559582772545 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  4.4%
Reproduction:         0.9 seconds, 34.4%
Fitness Testing:      1.7 seconds, 61.2%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 757
Test mean error for best: 0.75700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output:                    
Correct output: 85                  | Program output:                    
Correct output: 36                  | Program output:                    
Correct output: 32                  | Program output:                    
Correct output: -73                 | Program output:                    
Correct output: -44                 | Program output: -44                
Correct output: -78                 | Program output: -78                
Correct output: 76                  | Program output:                    
Correct output: 51                  | Program output:                    
Correct output: -42                 | Program output: -16                
Correct output: -89                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: 47                  | Program output:                    
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output:                    
Correct output: 15                  | Program output:                    
Correct output: 2                   | Program output:                    
Correct output: 21                  | Program output:                    
Correct output: 3                   | Program output:                    
Correct output: 13                  | Program output:                    
Correct output: 16                  | Program output:                    
Correct output: 7                   | Program output:                    
Correct output: 42                  | Program output:                    
Correct output: 2                   | Program output:                    
Correct output: 23                  | Program output:                    
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 92                 
Correct output: 19                  | Program output:                    
Correct output: 6                   | Program output: 0                  
Correct output: 28                  | Program output:                    
Correct output: 9                   | Program output:                    
Correct output: 33                  | Program output:                    
Correct output: 23                  | Program output:                    
Correct output: 29                  | Program output:                    
Correct output: -84                 | Program output:                    
Correct output: -14                 | Program output: -14                
Correct output: -88                 | Program output:                    
Correct output: -82                 | Program output: -27                
Correct output: -48                 | Program output:                    
Correct output: 14                  | Program output:                    
Correct output: -94                 | Program output: -94                
Correct output: -69                 | Program output: -69                
Correct output: -90                 | Program output: -47                
Correct output: -73                 | Program output:                    
Correct output: -72                 | Program output: -72                
Correct output: -65                 | Program output:                    
Correct output: -96                 | Program output: -71                
Correct output: -5                  | Program output:                    
Correct output: -34                 | Program output:                    
Correct output: -23                 | Program output: -23                
Correct output: -54                 | Program output:                    
Correct output: -67                 | Program output: -6                 
Correct output: -96                 | Program output: -96                
Correct output: -57                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -9                 
Correct output: -52                 | Program output:                    
Correct output: -72                 | Program output: -28                
Correct output: -86                 | Program output:                    
Correct output: -42                 | Program output:                    
Correct output: -86                 | Program output: -16                
Correct output: -90                 | Program output:                    
Correct output: -76                 | Program output: -76                
Correct output: 4                   | Program output:                    
Correct output: -31                 | Program output:                    
Correct output: -41                 | Program output:                    
Correct output: -5                  | Program output:                    
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -66                
Correct output: -61                 | Program output: 3                  
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -64                
Correct output: -21                 | Program output: -7                 
Correct output: -98                 | Program output:                    
Correct output: -100                | Program output:                    
Correct output: -79                 | Program output: -47                
Correct output: -97                 | Program output:                    
Correct output: -50                 | Program output: -50                
Correct output: -89                 | Program output: -59                
Correct output: -30                 | Program output: -30                
Correct output: -55                 | Program output: -55                
Correct output: -68                 | Program output:                    
Correct output: -77                 | Program output:                    
Correct output: -30                 | Program output: -30                
Correct output: -68                 | Program output: -53                
Correct output: -45                 | Program output: -41                
Correct output: -89                 | Program output:                    
Correct output: -24                 | Program output:                    
Correct output: -82                 | Program output: -82                
Correct output: -98                 | Program output:                    
Correct output: -62                 | Program output: -4                 
Correct output: -69                 | Program output:                    
Correct output: -67                 | Program output:                    
Correct output: -65                 | Program output:                    
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_7} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction tagged_295} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_min} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction 63} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_exec})
Lexicase best program: (integer_rot boolean_eq integer_mult tag_exec_7 (boolean_and integer_dup_times boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth) exec_dup_times () in4 tagged_295 in1 exec_dup_times (integer_lt exec_rot (exec_y (boolean_eq integer_lt integer_min integer_gte) integer_add exec_yankdup boolean_yankdup boolean_flush) (integer_fromboolean exec_yankdup boolean_not 63 exec_s_when_autoconstructing (exec_do*times (exec_rot (exec_yankdup boolean_rot integer_max boolean_rot exec_dup () exec_s_when_autoconstructing (exec_do*range (exec_flush) integer_stackdepth print_exec (boolean_dup integer_fromboolean integer_dup_items integer_max boolean_rot integer_empty boolean_empty exec_if (in2 boolean_frominteger exec_dup () exec_do*count () print_exec ()) ())) () ()) () ())) () ()) ()))
Lexicase best errors: [0 0 0 1 0 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 96
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_7} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction tagged_295} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_min} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction 63} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_exec})
Zero cases best program: (integer_rot boolean_eq integer_mult tag_exec_7 (boolean_and integer_dup_times boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth) exec_dup_times () in4 tagged_295 in1 exec_dup_times (integer_lt exec_rot (exec_y (boolean_eq integer_lt integer_min integer_gte) integer_add exec_yankdup boolean_yankdup boolean_flush) (integer_fromboolean exec_yankdup boolean_not 63 exec_s_when_autoconstructing (exec_do*times (exec_rot (exec_yankdup boolean_rot integer_max boolean_rot exec_dup () exec_s_when_autoconstructing (exec_do*range (exec_flush) integer_stackdepth print_exec (boolean_dup integer_fromboolean integer_dup_items integer_max boolean_rot integer_empty boolean_empty exec_if (in2 boolean_frominteger exec_dup () exec_do*count () print_exec ()) ())) () ()) () ())) () ()) ()))
Zero cases best errors: [0 0 0 1 0 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 96
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (178 178 847 101 847 178 510 101 279 483)
Population mean number of elite cases: 3.70
Count of perfect (error zero) individuals by case: (178 178 847 101 847 178 510 101 279 483)
Population mean number of perfect (error zero) cases: 3.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_7} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction tagged_295} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_min} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction 63} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Best program: (integer_rot boolean_eq integer_mult tag_exec_7 (boolean_and integer_dup_times boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth) exec_dup_times () in4 tagged_295 in1 exec_dup_times (integer_lt exec_rot (exec_y (boolean_eq integer_lt integer_min integer_gte) integer_add exec_yankdup boolean_yankdup boolean_flush) (integer_fromboolean exec_yankdup boolean_not 63 exec_s_when_autoconstructing (exec_do*times (exec_rot (exec_yankdup boolean_rot integer_max boolean_rot exec_dup () exec_s_when_autoconstructing (exec_do*range (exec_flush) integer_stackdepth print_exec (boolean_dup integer_fromboolean integer_dup_items integer_max boolean_rot integer_empty boolean_empty exec_if (in2 boolean_frominteger exec_dup () exec_do*count () print_exec (exec_yankdup exec_swap (boolean_dup_times exec_while (print_exec (in3 integer_lt -86 exec_while ()))) ())) ())) () ()) () ())) () ()) ()))
Errors: [0 0 0 1 0 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 75
Size: 110
Percent parens: 0.318
--- Population Statistics ---
Average total errors in population: 6.298
Median total errors in population: 6
Error averages by case: (0.822 0.822 0.153 0.899 0.153 0.822 0.49 0.899 0.721 0.517)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.919
Average program size in population (points): 73.506
Average percent parens in population: 0.291
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.51
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 116
Genome diversity (% unique genomes):	 0.576
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 116
Syntactic diversity (% unique Push programs):	 0.575
Total error diversity:				 0.007
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 996754
--- Timings ---
Current time: 1559582775345 milliseconds
Total Time:           5.3 seconds
Initialization:       0.1 seconds,  2.3%
Reproduction:         2.5 seconds, 46.6%
Fitness Testing:      2.3 seconds, 44.0%
Report:               0.4 seconds,  7.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 85                  | Program output: 95                 
Correct output: 36                  | Program output: 81                 
Correct output: 32                  | Program output: 32                 
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -1                 
Correct output: -78                 | Program output: -78                
Correct output: 76                  | Program output: 76                 
Correct output: 51                  | Program output: 99                 
Correct output: -42                 | Program output: -16                
Correct output: -89                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: 47                  | Program output: 47                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output: 46                 
Correct output: 15                  | Program output: 71                 
Correct output: 2                   | Program output: 87                 
Correct output: 21                  | Program output: 51                 
Correct output: 3                   | Program output: 74                 
Correct output: 13                  | Program output: 49                 
Correct output: 16                  | Program output: 36                 
Correct output: 7                   | Program output: 57                 
Correct output: 42                  | Program output: 99                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 37                 
Correct output: 7                   | Program output: 25                 
Correct output: 11                  | Program output: 100                
Correct output: 19                  | Program output: 19                 
Correct output: 6                   | Program output: 50                 
Correct output: 28                  | Program output: 67                 
Correct output: 9                   | Program output: 20                 
Correct output: 33                  | Program output: 33                 
Correct output: 23                  | Program output: 30                 
Correct output: 29                  | Program output: 37                 
Correct output: -84                 | Program output: 64                 
Correct output: -14                 | Program output: 42                 
Correct output: -88                 | Program output: 4                  
Correct output: -82                 | Program output: -12                
Correct output: -48                 | Program output: 1                  
Correct output: 14                  | Program output: 14                 
Correct output: -94                 | Program output: 28                 
Correct output: -69                 | Program output: -29                
Correct output: -90                 | Program output: 76                 
Correct output: -73                 | Program output: -73                
Correct output: -72                 | Program output: -43                
Correct output: -65                 | Program output: 11                 
Correct output: -96                 | Program output: -96                
Correct output: -5                  | Program output: -5                 
Correct output: -34                 | Program output: 63                 
Correct output: -23                 | Program output: 83                 
Correct output: -54                 | Program output: -54                
Correct output: -67                 | Program output: 47                 
Correct output: -96                 | Program output: 50                 
Correct output: -57                 | Program output: 45                 
Correct output: -90                 | Program output: 74                 
Correct output: -97                 | Program output: -97                
Correct output: -52                 | Program output: -52                
Correct output: -72                 | Program output: -37                
Correct output: -86                 | Program output: 75                 
Correct output: -42                 | Program output: 51                 
Correct output: -86                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: -55                
Correct output: 4                   | Program output: 11                 
Correct output: -31                 | Program output: -21                
Correct output: -41                 | Program output: -41                
Correct output: -5                  | Program output: 28                 
Correct output: -44                 | Program output: 77                 
Correct output: -66                 | Program output: 72                 
Correct output: -61                 | Program output: -61                
Correct output: -18                 | Program output: 26                 
Correct output: -81                 | Program output: 33                 
Correct output: -21                 | Program output: 45                 
Correct output: -98                 | Program output: 92                 
Correct output: -100                | Program output: 29                 
Correct output: -79                 | Program output: -79                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: -30                
Correct output: -89                 | Program output: 2                  
Correct output: -30                 | Program output: 80                 
Correct output: -55                 | Program output: 78                 
Correct output: -68                 | Program output: -6                 
Correct output: -77                 | Program output: -4                 
Correct output: -30                 | Program output: 92                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -15                
Correct output: -89                 | Program output: 13                 
Correct output: -24                 | Program output: 60                 
Correct output: -82                 | Program output: -82                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: 3                  
Correct output: -69                 | Program output: 4                  
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_exec_614} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction 8} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tagged_813} {:close 0, :instruction print_newline} {:close 0, :instruction tag_integer_218} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_empty} {:close 2, :instruction integer_mult} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_first_then_and})
Lexicase best program: (integer_add integer_yank integer_shove integer_mult integer_add in2 boolean_swap boolean_not integer_pop in3 integer_swap integer_lt in3 boolean_dup_times integer_shove boolean_shove boolean_pop integer_dup boolean_xor print_integer exec_do*times (exec_empty boolean_frominteger exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) integer_div exec_swap (exec_flush exec_when ()) (in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove) boolean_flush integer_lt exec_dup_items integer_min boolean_pop integer_fromboolean in4 integer_dec boolean_xor boolean_dup integer_mult integer_dup_times exec_s_when_autoconstructing (exec_do*while () integer_eq integer_yank integer_inc) (boolean_yank tag_exec_614 (print_exec () boolean_and exec_s_when_autoconstructing (integer_dup_items boolean_yank exec_dup () integer_dup exec_k_when_autoconstructing (exec_do*count () exec_y_when_autoconstructing () 8 boolean_dup in2 boolean_dup_items tagged_813 print_newline tag_integer_218 exec_shove (boolean_and exec_if (exec_empty exec_do*times (exec_stackdepth integer_shove boolean_empty) integer_mult) () boolean_frominteger) boolean_invert_first_then_and) ()) () ())) ()))
Lexicase best errors: [1 1 0 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 113
Percent parens: 0.239
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_exec_614} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction 8} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tagged_813} {:close 0, :instruction print_newline} {:close 0, :instruction tag_integer_218} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_empty} {:close 2, :instruction integer_mult} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_first_then_and})
Zero cases best program: (integer_add integer_yank integer_shove integer_mult integer_add in2 boolean_swap boolean_not integer_pop in3 integer_swap integer_lt in3 boolean_dup_times integer_shove boolean_shove boolean_pop integer_dup boolean_xor print_integer exec_do*times (exec_empty boolean_frominteger exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) integer_div exec_swap (exec_flush exec_when ()) (in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove) boolean_flush integer_lt exec_dup_items integer_min boolean_pop integer_fromboolean in4 integer_dec boolean_xor boolean_dup integer_mult integer_dup_times exec_s_when_autoconstructing (exec_do*while () integer_eq integer_yank integer_inc) (boolean_yank tag_exec_614 (print_exec () boolean_and exec_s_when_autoconstructing (integer_dup_items boolean_yank exec_dup () integer_dup exec_k_when_autoconstructing (exec_do*count () exec_y_when_autoconstructing () 8 boolean_dup in2 boolean_dup_items tagged_813 print_newline tag_integer_218 exec_shove (boolean_and exec_if (exec_empty exec_do*times (exec_stackdepth integer_shove boolean_empty) integer_mult) () boolean_frominteger) boolean_invert_first_then_and) ()) () ())) ()))
Zero cases best errors: [1 1 0 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 113
Percent parens: 0.239
--- Lexicase Population Statistics ---
Count of elite individuals by case: (586 134 247 2 869 248 2 471 381 259)
Population mean number of elite cases: 3.20
Count of perfect (error zero) individuals by case: (586 134 247 2 869 248 2 471 381 259)
Population mean number of perfect (error zero) cases: 3.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_frominteger})
Best program: (in3 print_integer exec_shove (exec_while (integer_swap integer_min integer_dup_times exec_dup (boolean_yank integer_min integer_sub integer_dup boolean_invert_second_then_and integer_fromboolean boolean_dup_items integer_inc exec_swap (integer_lte) () integer_inc exec_swap (integer_gte print_exec (boolean_frominteger)) ()))))
Errors: [1 1 0 1 0 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 23
Size: 32
Percent parens: 0.281
--- Population Statistics ---
Average total errors in population: 6.801
Median total errors in population: 7
Error averages by case: (0.414 0.866 0.753 0.998 0.131 0.752 0.998 0.529 0.619 0.741)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.376
Average program size in population (points): 89.836
Average percent parens in population: 0.292
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.946
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 47
Genome diversity (% unique genomes):	 0.713
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.709
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1687537
--- Timings ---
Current time: 1559582778481 milliseconds
Total Time:           8.8 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         4.6 seconds, 52.9%
Fitness Testing:      3.0 seconds, 34.4%
Report:               1.0 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 85                  | Program output: 95                 
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 32                 
Correct output: -73                 | Program output: 48                 
Correct output: -44                 | Program output: -44                
Correct output: -78                 | Program output: -78                
Correct output: 76                  | Program output: 80                 
Correct output: 51                  | Program output: 99                 
Correct output: -42                 | Program output: -42                
Correct output: -89                 | Program output: -89                
Correct output: -35                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: 47                  | Program output: 47                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output: 87                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 21                  | Program output: 36                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 70                 
Correct output: 7                   | Program output: 57                 
Correct output: 42                  | Program output: 42                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 64                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 92                 
Correct output: 19                  | Program output: 56                 
Correct output: 6                   | Program output: 23                 
Correct output: 28                  | Program output: 28                 
Correct output: 9                   | Program output: 9                  
Correct output: 33                  | Program output: 55                 
Correct output: 23                  | Program output: 56                 
Correct output: 29                  | Program output: 59                 
Correct output: -84                 | Program output: 65                 
Correct output: -14                 | Program output: 4                  
Correct output: -88                 | Program output: -88                
Correct output: -82                 | Program output: 48                 
Correct output: -48                 | Program output: 10                 
Correct output: 14                  | Program output: 99                 
Correct output: -94                 | Program output: -71                
Correct output: -69                 | Program output: 70                 
Correct output: -90                 | Program output: 59                 
Correct output: -73                 | Program output: 69                 
Correct output: -72                 | Program output: -31                
Correct output: -65                 | Program output: 55                 
Correct output: -96                 | Program output: -17                
Correct output: -5                  | Program output: 14                 
Correct output: -34                 | Program output: -34                
Correct output: -23                 | Program output: 61                 
Correct output: -54                 | Program output: -28                
Correct output: -67                 | Program output: 12                 
Correct output: -96                 | Program output: 66                 
Correct output: -57                 | Program output: -28                
Correct output: -90                 | Program output: 24                 
Correct output: -97                 | Program output: 5                  
Correct output: -52                 | Program output: 83                 
Correct output: -72                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: -42                 | Program output: 82                 
Correct output: -86                 | Program output: -3                 
Correct output: -90                 | Program output: -32                
Correct output: -76                 | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: -31                 | Program output: -31                
Correct output: -41                 | Program output: 24                 
Correct output: -5                  | Program output: -5                 
Correct output: -44                 | Program output: 90                 
Correct output: -66                 | Program output: -51                
Correct output: -61                 | Program output: 53                 
Correct output: -18                 | Program output: 49                 
Correct output: -81                 | Program output: -81                
Correct output: -21                 | Program output: 47                 
Correct output: -98                 | Program output: 2                  
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: 93                 
Correct output: -97                 | Program output: 45                 
Correct output: -50                 | Program output: -14                
Correct output: -89                 | Program output: -89                
Correct output: -30                 | Program output: 97                 
Correct output: -55                 | Program output: 14                 
Correct output: -68                 | Program output: -68                
Correct output: -77                 | Program output: 66                 
Correct output: -30                 | Program output: -23                
Correct output: -68                 | Program output: -14                
Correct output: -45                 | Program output: -45                
Correct output: -89                 | Program output: -89                
Correct output: -24                 | Program output: 43                 
Correct output: -82                 | Program output: 56                 
Correct output: -98                 | Program output: 93                 
Correct output: -62                 | Program output: 35                 
Correct output: -69                 | Program output: -69                
Correct output: -67                 | Program output: 99                 
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 2, :instruction integer_eq} {:close 0, :instruction in1} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction tagged_872} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (boolean_xor exec_eq in1 exec_when (boolean_dup_times integer_gte exec_noop) exec_dup_times () integer_dup_times exec_do*range (boolean_or integer_eq) in1 boolean_flush print_integer boolean_frominteger exec_do*count (exec_flush print_exec (exec_do*times (exec_k_when_autoconstructing (in4 exec_do*times (boolean_not exec_yankdup boolean_dup boolean_not integer_rot integer_rot integer_yankdup tagged_872) integer_rot exec_do*while (boolean_xor integer_yank exec_pop (exec_do*count (integer_dec exec_k_when_autoconstructing () ())))) ()))))
Lexicase best errors: [1 0 1 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 54
Percent parens: 0.278
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 2, :instruction integer_eq} {:close 0, :instruction in1} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction tagged_872} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (boolean_xor exec_eq in1 exec_when (boolean_dup_times integer_gte exec_noop) exec_dup_times () integer_dup_times exec_do*range (boolean_or integer_eq) in1 boolean_flush print_integer boolean_frominteger exec_do*count (exec_flush print_exec (exec_do*times (exec_k_when_autoconstructing (in4 exec_do*times (boolean_not exec_yankdup boolean_dup boolean_not integer_rot integer_rot integer_yankdup tagged_872) integer_rot exec_do*while (boolean_xor integer_yank exec_pop (exec_do*count (integer_dec exec_k_when_autoconstructing () ())))) ()))))
Zero cases best errors: [1 0 1 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 54
Percent parens: 0.278
--- Lexicase Population Statistics ---
Count of elite individuals by case: (185 222 185 881 130 342 881 222 222 222)
Population mean number of elite cases: 3.49
Count of perfect (error zero) individuals by case: (185 222 185 881 130 342 881 222 222 222)
Population mean number of perfect (error zero) cases: 3.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_div} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 2, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_if} {:close 2, :instruction integer_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_152} {:close 0, :instruction in4} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_eq})
Best program: (integer_add exec_do*range () integer_eq integer_div integer_flush in1 exec_do*while (print_integer) exec_eq boolean_dup_items exec_pop (integer_shove exec_s (integer_dup exec_k_when_autoconstructing (print_integer integer_pop boolean_pop exec_dup (exec_when ()) boolean_xor exec_dup_times (integer_shove boolean_rot exec_s (boolean_stackdepth boolean_dup_items) (exec_when (print_exec () boolean_eq exec_stackdepth) integer_lte exec_eq boolean_frominteger boolean_and integer_min integer_eq integer_dup_times exec_if () (integer_swap)) (exec_dup_items boolean_empty exec_s_when_autoconstructing (boolean_dup_items boolean_dup_times boolean_eq) (exec_do*count (exec_do*range (integer_pop tagged_152 in4 integer_empty) exec_y () integer_rot exec_eq)) ()))) ()) () ()))
Errors: [1 0 1 0 1 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 55
Size: 80
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 6.508
Median total errors in population: 7
Error averages by case: (0.815 0.778 0.815 0.119 0.87 0.658 0.119 0.778 0.778 0.778)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.525
Average program size in population (points): 74.142
Average percent parens in population: 0.276
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.71875
Median age in population: 4.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 67
Genome diversity (% unique genomes):	 0.732
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 68
Syntactic diversity (% unique Push programs):	 0.726
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2195556
--- Timings ---
Current time: 1559582781515 milliseconds
Total Time:          11.4 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         6.5 seconds, 56.9%
Fitness Testing:      3.5 seconds, 31.1%
Report:               1.2 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 85                  | Program output: 95                 
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 32                 
Correct output: -73                 | Program output: 48                 
Correct output: -44                 | Program output: -44                
Correct output: -78                 | Program output: 86                 
Correct output: 76                  | Program output: 76                 
Correct output: 51                  | Program output: 51                 
Correct output: -42                 | Program output: -16                
Correct output: -89                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: 47                  | Program output: 47                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 24                 
Correct output: 2                   | Program output: 13                 
Correct output: 21                  | Program output: 21                 
Correct output: 3                   | Program output: 29                 
Correct output: 13                  | Program output: 67                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 24                 
Correct output: 42                  | Program output: 55                 
Correct output: 2                   | Program output: 23                 
Correct output: 23                  | Program output: 37                 
Correct output: 7                   | Program output: 57                 
Correct output: 11                  | Program output: 95                 
Correct output: 19                  | Program output: 35                 
Correct output: 6                   | Program output: 42                 
Correct output: 28                  | Program output: 83                 
Correct output: 9                   | Program output: 80                 
Correct output: 33                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 29                  | Program output: 82                 
Correct output: -84                 | Program output: -84                
Correct output: -14                 | Program output: 43                 
Correct output: -88                 | Program output: 12                 
Correct output: -82                 | Program output: -82                
Correct output: -48                 | Program output: -48                
Correct output: 14                  | Program output: 29                 
Correct output: -94                 | Program output: 10                 
Correct output: -69                 | Program output: -21                
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: -2                 
Correct output: -72                 | Program output: 54                 
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -15                
Correct output: -5                  | Program output: 78                 
Correct output: -34                 | Program output: 29                 
Correct output: -23                 | Program output: 82                 
Correct output: -54                 | Program output: 37                 
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -55                
Correct output: -57                 | Program output: -57                
Correct output: -90                 | Program output: -7                 
Correct output: -97                 | Program output: 31                 
Correct output: -52                 | Program output: 85                 
Correct output: -72                 | Program output: 84                 
Correct output: -86                 | Program output: 34                 
Correct output: -42                 | Program output: -42                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: 48                 
Correct output: -76                 | Program output: 42                 
Correct output: 4                   | Program output: 54                 
Correct output: -31                 | Program output: -1                 
Correct output: -41                 | Program output: 54                 
Correct output: -5                  | Program output: 7                  
Correct output: -44                 | Program output: 32                 
Correct output: -66                 | Program output: -6                 
Correct output: -61                 | Program output: 29                 
Correct output: -18                 | Program output: 6                  
Correct output: -81                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 43                 
Correct output: -79                 | Program output: 14                 
Correct output: -97                 | Program output: -15                
Correct output: -50                 | Program output: -8                 
Correct output: -89                 | Program output: -4                 
Correct output: -30                 | Program output: 28                 
Correct output: -55                 | Program output: 55                 
Correct output: -68                 | Program output: 26                 
Correct output: -77                 | Program output: -77                
Correct output: -30                 | Program output: 11                 
Correct output: -68                 | Program output: -41                
Correct output: -45                 | Program output: -8                 
Correct output: -89                 | Program output: -46                
Correct output: -24                 | Program output: -24                
Correct output: -82                 | Program output: 85                 
Correct output: -98                 | Program output: 53                 
Correct output: -62                 | Program output: -62                
Correct output: -69                 | Program output: 98                 
Correct output: -67                 | Program output: 40                 
Correct output: -65                 | Program output: -24                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction tag_boolean_788} {:close 0, :instruction in4} {:close 0, :instruction exec_while} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_816} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction exec_if} {:close 2, :instruction exec_y} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction 11} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (integer_add integer_yank integer_shove integer_mult integer_add in2 print_integer exec_shove (exec_while (in1 boolean_swap boolean_or boolean_swap print_boolean) boolean_eq boolean_empty) boolean_xor integer_sub integer_swap integer_shove integer_pop integer_gt integer_lte integer_flush exec_flush exec_yank boolean_yankdup exec_yankdup integer_fromboolean exec_yank integer_pop boolean_pop tag_boolean_788 in4 exec_while (integer_gt) integer_add integer_add integer_mult boolean_eq exec_y_when_autoconstructing (integer_mult exec_k_when_autoconstructing (print_integer integer_yankdup exec_swap () (boolean_and integer_swap) integer_dup exec_shove (tagged_816 exec_y_when_autoconstructing (integer_div exec_if (exec_y ()) (exec_noop) boolean_and) exec_do*while (11 integer_stackdepth))) ()))
Lexicase best errors: [1 1 0 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 75
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction tag_boolean_788} {:close 0, :instruction in4} {:close 0, :instruction exec_while} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_816} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction exec_if} {:close 2, :instruction exec_y} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction 11} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (integer_add integer_yank integer_shove integer_mult integer_add in2 print_integer exec_shove (exec_while (in1 boolean_swap boolean_or boolean_swap print_boolean) boolean_eq boolean_empty) boolean_xor integer_sub integer_swap integer_shove integer_pop integer_gt integer_lte integer_flush exec_flush exec_yank boolean_yankdup exec_yankdup integer_fromboolean exec_yank integer_pop boolean_pop tag_boolean_788 in4 exec_while (integer_gt) integer_add integer_add integer_mult boolean_eq exec_y_when_autoconstructing (integer_mult exec_k_when_autoconstructing (print_integer integer_yankdup exec_swap () (boolean_and integer_swap) integer_dup exec_shove (tagged_816 exec_y_when_autoconstructing (integer_div exec_if (exec_y ()) (exec_noop) boolean_and) exec_do*while (11 integer_stackdepth))) ()))
Zero cases best errors: [1 1 0 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 75
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (490 487 227 712 83 225 489 3 225 226)
Population mean number of elite cases: 3.17
Count of perfect (error zero) individuals by case: (490 487 227 712 83 225 489 3 225 226)
Population mean number of perfect (error zero) cases: 3.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_frominteger})
Best program: (integer_add integer_yank integer_shove integer_mult integer_add in2 print_integer exec_shove (exec_while (integer_swap boolean_dup_items integer_dup_times exec_dup (boolean_yank integer_min integer_sub integer_dup boolean_invert_second_then_and) integer_fromboolean boolean_dup_items integer_inc exec_swap (integer_lte) () integer_inc exec_swap (integer_gte print_exec (boolean_frominteger)) ())))
Errors: [1 1 0 0 1 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 28
Size: 37
Percent parens: 0.243
--- Population Statistics ---
Average total errors in population: 6.833
Median total errors in population: 6
Error averages by case: (0.51 0.513 0.773 0.288 0.917 0.775 0.511 0.997 0.775 0.774)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.413
Average program size in population (points): 68.978
Average percent parens in population: 0.282
Minimum age in population: 4.0
Maximum age in population: 8.0
Average age in population: 6.184875
Median age in population: 6.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 55
Genome diversity (% unique genomes):	 0.754
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.747
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2695780
--- Timings ---
Current time: 1559582784275 milliseconds
Total Time:          14.6 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         8.6 seconds, 58.6%
Fitness Testing:      4.0 seconds, 27.4%
Report:               1.9 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 85                  | Program output: 95                 
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 32                 
Correct output: -73                 | Program output: 48                 
Correct output: -44                 | Program output: -44                
Correct output: -78                 | Program output: -78                
Correct output: 76                  | Program output: 80                 
Correct output: 51                  | Program output: 99                 
Correct output: -42                 | Program output: -42                
Correct output: -89                 | Program output: -89                
Correct output: -35                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: 47                  | Program output: 47                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output: 87                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 21                  | Program output: 36                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 70                 
Correct output: 7                   | Program output: 57                 
Correct output: 42                  | Program output: 42                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 64                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 92                 
Correct output: 19                  | Program output: 56                 
Correct output: 6                   | Program output: 23                 
Correct output: 28                  | Program output: 28                 
Correct output: 9                   | Program output: 9                  
Correct output: 33                  | Program output: 55                 
Correct output: 23                  | Program output: 56                 
Correct output: 29                  | Program output: 59                 
Correct output: -84                 | Program output: 65                 
Correct output: -14                 | Program output: 4                  
Correct output: -88                 | Program output: -88                
Correct output: -82                 | Program output: 48                 
Correct output: -48                 | Program output: 10                 
Correct output: 14                  | Program output: 99                 
Correct output: -94                 | Program output: -71                
Correct output: -69                 | Program output: 70                 
Correct output: -90                 | Program output: 59                 
Correct output: -73                 | Program output: 69                 
Correct output: -72                 | Program output: -31                
Correct output: -65                 | Program output: 55                 
Correct output: -96                 | Program output: -17                
Correct output: -5                  | Program output: 14                 
Correct output: -34                 | Program output: -34                
Correct output: -23                 | Program output: 61                 
Correct output: -54                 | Program output: -28                
Correct output: -67                 | Program output: 12                 
Correct output: -96                 | Program output: 66                 
Correct output: -57                 | Program output: -28                
Correct output: -90                 | Program output: 24                 
Correct output: -97                 | Program output: 5                  
Correct output: -52                 | Program output: 83                 
Correct output: -72                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: -42                 | Program output: 82                 
Correct output: -86                 | Program output: -3                 
Correct output: -90                 | Program output: -32                
Correct output: -76                 | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: -31                 | Program output: -31                
Correct output: -41                 | Program output: 24                 
Correct output: -5                  | Program output: -5                 
Correct output: -44                 | Program output: 90                 
Correct output: -66                 | Program output: -51                
Correct output: -61                 | Program output: 53                 
Correct output: -18                 | Program output: 49                 
Correct output: -81                 | Program output: -81                
Correct output: -21                 | Program output: 47                 
Correct output: -98                 | Program output: 2                  
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: 93                 
Correct output: -97                 | Program output: 45                 
Correct output: -50                 | Program output: -14                
Correct output: -89                 | Program output: -89                
Correct output: -30                 | Program output: 97                 
Correct output: -55                 | Program output: 14                 
Correct output: -68                 | Program output: -68                
Correct output: -77                 | Program output: 66                 
Correct output: -30                 | Program output: -23                
Correct output: -68                 | Program output: -14                
Correct output: -45                 | Program output: -45                
Correct output: -89                 | Program output: -89                
Correct output: -24                 | Program output: 43                 
Correct output: -82                 | Program output: 56                 
Correct output: -98                 | Program output: 93                 
Correct output: -62                 | Program output: 35                 
Correct output: -69                 | Program output: -69                
Correct output: -67                 | Program output: 99                 
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_boolean_923} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_exec_614} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction 8} {:close 0, :instruction exec_yank} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tagged_813} {:close 0, :instruction print_newline} {:close 0, :instruction tag_integer_218} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*times})
Lexicase best program: (boolean_stackdepth integer_eq exec_s_when_autoconstructing (in1 exec_k_when_autoconstructing (exec_empty exec_s (print_integer integer_gte boolean_rot tag_boolean_923 integer_empty integer_dup_times) (integer_empty integer_max exec_while (in3 integer_yank) boolean_empty integer_lt) (integer_mod integer_dup_items exec_dup_times (boolean_and boolean_shove exec_s (integer_flush exec_noop exec_y () integer_inc boolean_eq boolean_stackdepth integer_max) (integer_div) (exec_swap (integer_yankdup exec_when ()) (in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove) boolean_flush integer_lt exec_dup_items integer_min boolean_pop integer_fromboolean in4 integer_dec boolean_xor boolean_dup integer_mult integer_dup_times exec_s_when_autoconstructing (exec_do*while () integer_eq integer_yank integer_inc) (boolean_rot tag_exec_614 (print_exec () boolean_and exec_s_when_autoconstructing (integer_dup_items boolean_yank exec_dup () integer_dup exec_k_when_autoconstructing (exec_do*count () exec_y_when_autoconstructing () 8 exec_yank in2 boolean_dup_items tagged_813 print_newline tag_integer_218 exec_shove (boolean_and exec_if (exec_empty exec_do*times ()) ())) ()) () ())) ()))))) ()) () ())
Lexicase best errors: [0 1 1 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 123
Percent parens: 0.317
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_boolean_923} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_exec_614} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction 8} {:close 0, :instruction exec_yank} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tagged_813} {:close 0, :instruction print_newline} {:close 0, :instruction tag_integer_218} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*times})
Zero cases best program: (boolean_stackdepth integer_eq exec_s_when_autoconstructing (in1 exec_k_when_autoconstructing (exec_empty exec_s (print_integer integer_gte boolean_rot tag_boolean_923 integer_empty integer_dup_times) (integer_empty integer_max exec_while (in3 integer_yank) boolean_empty integer_lt) (integer_mod integer_dup_items exec_dup_times (boolean_and boolean_shove exec_s (integer_flush exec_noop exec_y () integer_inc boolean_eq boolean_stackdepth integer_max) (integer_div) (exec_swap (integer_yankdup exec_when ()) (in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove) boolean_flush integer_lt exec_dup_items integer_min boolean_pop integer_fromboolean in4 integer_dec boolean_xor boolean_dup integer_mult integer_dup_times exec_s_when_autoconstructing (exec_do*while () integer_eq integer_yank integer_inc) (boolean_rot tag_exec_614 (print_exec () boolean_and exec_s_when_autoconstructing (integer_dup_items boolean_yank exec_dup () integer_dup exec_k_when_autoconstructing (exec_do*count () exec_y_when_autoconstructing () 8 exec_yank in2 boolean_dup_items tagged_813 print_newline tag_integer_218 exec_shove (boolean_and exec_if (exec_empty exec_do*times ()) ())) ()) () ())) ()))))) ()) () ())
Zero cases best errors: [0 1 1 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 123
Percent parens: 0.317
--- Lexicase Population Statistics ---
Count of elite individuals by case: (875 408 411 159 307 306 1000 304 306 2)
Population mean number of elite cases: 4.08
Count of perfect (error zero) individuals by case: (875 408 411 159 307 306 0 304 306 2)
Population mean number of perfect (error zero) cases: 3.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_7} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 2, :instruction integer_eq} {:close 0, :instruction in1} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction tagged_295} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_min} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Best program: (integer_rot boolean_eq integer_mult tag_exec_7 (boolean_and exec_do*range (boolean_or integer_eq)) in1 boolean_flush print_integer exec_stackdepth exec_dup_times () in4 tagged_295 in1 exec_dup_times (integer_lt exec_rot (exec_y (boolean_eq integer_lt integer_min integer_gte) integer_dup boolean_xor print_integer) (exec_do*times (exec_pop (boolean_frominteger exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) integer_div) exec_swap (exec_flush exec_when ()) (in4 exec_flush exec_yank exec_do*range () exec_swap () (boolean_shove) boolean_flush integer_lt exec_dup_items integer_min boolean_pop exec_do*range (exec_flush) integer_stackdepth print_exec (boolean_dup integer_fromboolean integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () exec_do*count () print_exec (exec_yankdup exec_swap (boolean_dup_times exec_while (print_exec (in3 integer_lt -86 exec_while ()))) ())) ()))) ()))
Errors: [0 1 1 1 0 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 77
Size: 107
Percent parens: 0.280
--- Population Statistics ---
Average total errors in population: 6.922
Median total errors in population: 7
Error averages by case: (0.125 0.592 0.589 0.841 0.693 0.694 1.0 0.696 0.694 0.998)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 54.136
Average program size in population (points): 74.387
Average percent parens in population: 0.267
Minimum age in population: 5.0
Maximum age in population: 9.75
Average age in population: 7.973125
Median age in population: 8.03125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 59
Genome diversity (% unique genomes):	 0.757
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.753
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3292379
--- Timings ---
Current time: 1559582787195 milliseconds
Total Time:          17.1 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:        10.4 seconds, 60.5%
Fitness Testing:      4.5 seconds, 26.3%
Report:               2.1 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 85                  | Program output: 95                 
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 32                 
Correct output: -73                 | Program output: 48                 
Correct output: -44                 | Program output: -44                
Correct output: -78                 | Program output: -78                
Correct output: 76                  | Program output: 80                 
Correct output: 51                  | Program output: 99                 
Correct output: -42                 | Program output: -42                
Correct output: -89                 | Program output: -89                
Correct output: -35                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: 47                  | Program output: 47                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output: 87                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 21                  | Program output: 36                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 70                 
Correct output: 7                   | Program output: 57                 
Correct output: 42                  | Program output: 42                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 64                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 92                 
Correct output: 19                  | Program output: 56                 
Correct output: 6                   | Program output: 23                 
Correct output: 28                  | Program output: 28                 
Correct output: 9                   | Program output: 9                  
Correct output: 33                  | Program output: 55                 
Correct output: 23                  | Program output: 56                 
Correct output: 29                  | Program output: 59                 
Correct output: -84                 | Program output: 65                 
Correct output: -14                 | Program output: 4                  
Correct output: -88                 | Program output: -88                
Correct output: -82                 | Program output: 48                 
Correct output: -48                 | Program output: 10                 
Correct output: 14                  | Program output: 99                 
Correct output: -94                 | Program output: -71                
Correct output: -69                 | Program output: 70                 
Correct output: -90                 | Program output: 59                 
Correct output: -73                 | Program output: 69                 
Correct output: -72                 | Program output: -31                
Correct output: -65                 | Program output: 55                 
Correct output: -96                 | Program output: -17                
Correct output: -5                  | Program output: 14                 
Correct output: -34                 | Program output: -34                
Correct output: -23                 | Program output: 61                 
Correct output: -54                 | Program output: -28                
Correct output: -67                 | Program output: 12                 
Correct output: -96                 | Program output: 66                 
Correct output: -57                 | Program output: -28                
Correct output: -90                 | Program output: 24                 
Correct output: -97                 | Program output: 5                  
Correct output: -52                 | Program output: 83                 
Correct output: -72                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: -42                 | Program output: 82                 
Correct output: -86                 | Program output: -3                 
Correct output: -90                 | Program output: -32                
Correct output: -76                 | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: -31                 | Program output: -31                
Correct output: -41                 | Program output: 24                 
Correct output: -5                  | Program output: -5                 
Correct output: -44                 | Program output: 90                 
Correct output: -66                 | Program output: -51                
Correct output: -61                 | Program output: 53                 
Correct output: -18                 | Program output: 49                 
Correct output: -81                 | Program output: -81                
Correct output: -21                 | Program output: 47                 
Correct output: -98                 | Program output: 2                  
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: 93                 
Correct output: -97                 | Program output: 45                 
Correct output: -50                 | Program output: -14                
Correct output: -89                 | Program output: -89                
Correct output: -30                 | Program output: 97                 
Correct output: -55                 | Program output: 14                 
Correct output: -68                 | Program output: -68                
Correct output: -77                 | Program output: 66                 
Correct output: -30                 | Program output: -23                
Correct output: -68                 | Program output: -14                
Correct output: -45                 | Program output: -45                
Correct output: -89                 | Program output: -89                
Correct output: -24                 | Program output: 43                 
Correct output: -82                 | Program output: 56                 
Correct output: -98                 | Program output: 93                 
Correct output: -62                 | Program output: 35                 
Correct output: -69                 | Program output: -69                
Correct output: -67                 | Program output: 99                 
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 2, :instruction integer_eq} {:close 0, :instruction in1} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction tagged_872} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_152} {:close 0, :instruction in4} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_rot})
Lexicase best program: (boolean_xor exec_eq in1 exec_when (boolean_dup_times integer_gte exec_noop) exec_dup_times () integer_dup_times exec_do*range (boolean_or integer_eq) in1 boolean_flush print_integer boolean_frominteger exec_do*count (integer_max integer_empty exec_do*times (exec_k_when_autoconstructing (in4 exec_do*times (boolean_not exec_yankdup boolean_dup boolean_not integer_rot integer_rot integer_yankdup tagged_872) integer_rot exec_do*while (boolean_xor integer_yank exec_pop (exec_do*count (integer_dec exec_k_when_autoconstructing (in4 integer_add boolean_xor integer_yank exec_do*while (boolean_xor integer_yank exec_pop (exec_do*count (integer_dec exec_k_when_autoconstructing (in4 integer_add boolean_and in4) (in3 exec_if (integer_mod exec_swap () (boolean_not exec_dup_times (boolean_xor print_integer) in4 boolean_eq print_integer exec_s_when_autoconstructing (boolean_dup_items boolean_dup_times boolean_eq) (exec_do*count (exec_do*range (integer_pop tagged_152 in4 integer_empty) exec_y () integer_rot)) ())) ()))))) ())))) ())))
Lexicase best errors: [0 0 0 1 1 1 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 107
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 2, :instruction integer_eq} {:close 0, :instruction in1} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction tagged_872} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_152} {:close 0, :instruction in4} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_y} {:close 0, :instruction integer_rot})
Zero cases best program: (boolean_xor exec_eq in1 exec_when (boolean_dup_times integer_gte exec_noop) exec_dup_times () integer_dup_times exec_do*range (boolean_or integer_eq) in1 boolean_flush print_integer boolean_frominteger exec_do*count (integer_max integer_empty exec_do*times (exec_k_when_autoconstructing (in4 exec_do*times (boolean_not exec_yankdup boolean_dup boolean_not integer_rot integer_rot integer_yankdup tagged_872) integer_rot exec_do*while (boolean_xor integer_yank exec_pop (exec_do*count (integer_dec exec_k_when_autoconstructing (in4 integer_add boolean_xor integer_yank exec_do*while (boolean_xor integer_yank exec_pop (exec_do*count (integer_dec exec_k_when_autoconstructing (in4 integer_add boolean_and in4) (in3 exec_if (integer_mod exec_swap () (boolean_not exec_dup_times (boolean_xor print_integer) in4 boolean_eq print_integer exec_s_when_autoconstructing (boolean_dup_items boolean_dup_times boolean_eq) (exec_do*count (exec_do*range (integer_pop tagged_152 in4 integer_empty) exec_y () integer_rot)) ())) ()))))) ())))) ())))
Zero cases best errors: [0 0 0 1 1 1 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 107
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (459 795 458 15 89 15 461 90 90 458)
Population mean number of elite cases: 2.93
Count of perfect (error zero) individuals by case: (459 795 458 15 89 15 461 90 90 458)
Population mean number of perfect (error zero) cases: 2.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction tagged_872} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Best program: (integer_add integer_eq integer_swap in1 exec_k_when_autoconstructing (exec_empty exec_s (print_integer print_integer integer_swap exec_do*count (integer_max integer_empty boolean_or exec_k_when_autoconstructing (in4 exec_do*times (boolean_not exec_yankdup boolean_dup boolean_not boolean_invert_second_then_and integer_rot boolean_dup boolean_not integer_rot integer_rot integer_yankdup tagged_872) integer_rot exec_do*while (boolean_xor exec_do*times (exec_rot (exec_yankdup boolean_rot integer_max boolean_rot exec_dup () exec_s_when_autoconstructing (exec_do*range (exec_flush) integer_stackdepth print_exec (boolean_dup integer_fromboolean integer_dup_items integer_max boolean_rot integer_empty boolean_empty exec_if (in2 integer_stackdepth print_exec (boolean_dup integer_fromboolean integer_dup_items integer_empty boolean_rot integer_empty boolean_empty exec_if (in2 boolean_frominteger exec_dup () exec_do*count () print_exec (exec_yankdup exec_swap (boolean_dup_times exec_while (print_exec (in3 integer_lt -86 exec_while ()))) ())) ())) ())) () ()) () ()))) ())) () ()) ())
Errors: [0 0 0 1 1 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 77
Size: 111
Percent parens: 0.306
--- Population Statistics ---
Average total errors in population: 7.07
Median total errors in population: 6
Error averages by case: (0.541 0.205 0.542 0.985 0.911 0.985 0.539 0.91 0.91 0.542)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.462
Average program size in population (points): 76.398
Average percent parens in population: 0.274
Minimum age in population: 6.0
Maximum age in population: 11.25
Average age in population: 9.53515625
Median age in population: 9.59375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 28
Genome diversity (% unique genomes):	 0.808
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.801
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3972231
--- Timings ---
Current time: 1559582790297 milliseconds
Total Time:          20.2 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        12.3 seconds, 60.8%
Fitness Testing:      5.1 seconds, 25.1%
Report:               2.7 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 85                  | Program output: 85                 
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 87                 
Correct output: -73                 | Program output: 48                 
Correct output: -44                 | Program output: -44                
Correct output: -78                 | Program output: -78                
Correct output: 76                  | Program output: 76                 
Correct output: 51                  | Program output: 99                 
Correct output: -42                 | Program output: -16                
Correct output: -89                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: 47                  | Program output: 47                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output: 98                 
Correct output: 15                  | Program output: 86                 
Correct output: 2                   | Program output: 80                 
Correct output: 21                  | Program output: 42                 
Correct output: 3                   | Program output: 59                 
Correct output: 13                  | Program output: 43                 
Correct output: 16                  | Program output: 93                 
Correct output: 7                   | Program output: 7                  
Correct output: 42                  | Program output: 67                 
Correct output: 2                   | Program output: 64                 
Correct output: 23                  | Program output: 23                 
Correct output: 7                   | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 19                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 36                 
Correct output: 9                   | Program output: 84                 
Correct output: 33                  | Program output: 60                 
Correct output: 23                  | Program output: 76                 
Correct output: 29                  | Program output: 29                 
Correct output: -84                 | Program output: 47                 
Correct output: -14                 | Program output: -14                
Correct output: -88                 | Program output: 66                 
Correct output: -82                 | Program output: -27                
Correct output: -48                 | Program output: 65                 
Correct output: 14                  | Program output: 92                 
Correct output: -94                 | Program output: -94                
Correct output: -69                 | Program output: -69                
Correct output: -90                 | Program output: -47                
Correct output: -73                 | Program output: 42                 
Correct output: -72                 | Program output: -72                
Correct output: -65                 | Program output: 15                 
Correct output: -96                 | Program output: -71                
Correct output: -5                  | Program output: 18                 
Correct output: -34                 | Program output: 50                 
Correct output: -23                 | Program output: -23                
Correct output: -54                 | Program output: 45                 
Correct output: -67                 | Program output: -6                 
Correct output: -96                 | Program output: -96                
Correct output: -57                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -9                 
Correct output: -52                 | Program output: 12                 
Correct output: -72                 | Program output: -28                
Correct output: -86                 | Program output: 54                 
Correct output: -42                 | Program output: 41                 
Correct output: -86                 | Program output: -16                
Correct output: -90                 | Program output: 38                 
Correct output: -76                 | Program output: -76                
Correct output: 4                   | Program output: 8                  
Correct output: -31                 | Program output: 57                 
Correct output: -41                 | Program output: 49                 
Correct output: -5                  | Program output: 75                 
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -66                
Correct output: -61                 | Program output: 3                  
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -64                
Correct output: -21                 | Program output: -7                 
Correct output: -98                 | Program output: 64                 
Correct output: -100                | Program output: 54                 
Correct output: -79                 | Program output: -47                
Correct output: -97                 | Program output: 69                 
Correct output: -50                 | Program output: -50                
Correct output: -89                 | Program output: -59                
Correct output: -30                 | Program output: -30                
Correct output: -55                 | Program output: -55                
Correct output: -68                 | Program output: 22                 
Correct output: -77                 | Program output: 99                 
Correct output: -30                 | Program output: -30                
Correct output: -68                 | Program output: -53                
Correct output: -45                 | Program output: -41                
Correct output: -89                 | Program output: 32                 
Correct output: -24                 | Program output: 72                 
Correct output: -82                 | Program output: -82                
Correct output: -98                 | Program output: 59                 
Correct output: -62                 | Program output: -4                 
Correct output: -69                 | Program output: 90                 
Correct output: -67                 | Program output: 33                 
Correct output: -65                 | Program output: 28                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_7} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_872} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_exec_614} {:close 1, :instruction print_exec} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction 8} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2})
Lexicase best program: (integer_dup integer_yank integer_shove integer_mult integer_add in2 boolean_swap boolean_eq integer_mult tag_exec_7 (boolean_and integer_dup_times boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_mult) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth) exec_dup_times () in4 print_integer exec_do*times (exec_empty boolean_frominteger boolean_not integer_rot) integer_rot integer_yankdup tagged_872 integer_rot exec_do*while (boolean_xor integer_yank) print_exec (exec_do*count (integer_dec exec_k_when_autoconstructing (in4 integer_add boolean_and integer_dec boolean_xor boolean_dup integer_mult integer_dup_times exec_s_when_autoconstructing (exec_do*while () in1 integer_yank integer_inc) (boolean_yank tag_exec_614 (print_exec () boolean_and) exec_s_when_autoconstructing (integer_dup_items boolean_yank exec_dup () integer_dup exec_k_when_autoconstructing (exec_do*count () exec_y_when_autoconstructing () 8 boolean_dup in2) ()) () ()) ()) ())))
Lexicase best errors: [1 0 0 0 0 0 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 100
Percent parens: 0.270
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_7} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_872} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_exec_614} {:close 1, :instruction print_exec} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction 8} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2})
Zero cases best program: (integer_dup integer_yank integer_shove integer_mult integer_add in2 boolean_swap boolean_eq integer_mult tag_exec_7 (boolean_and integer_dup_times boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_mult) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth) exec_dup_times () in4 print_integer exec_do*times (exec_empty boolean_frominteger boolean_not integer_rot) integer_rot integer_yankdup tagged_872 integer_rot exec_do*while (boolean_xor integer_yank) print_exec (exec_do*count (integer_dec exec_k_when_autoconstructing (in4 integer_add boolean_and integer_dec boolean_xor boolean_dup integer_mult integer_dup_times exec_s_when_autoconstructing (exec_do*while () in1 integer_yank integer_inc) (boolean_yank tag_exec_614 (print_exec () boolean_and) exec_s_when_autoconstructing (integer_dup_items boolean_yank exec_dup () integer_dup exec_k_when_autoconstructing (exec_do*count () exec_y_when_autoconstructing () 8 boolean_dup in2) ()) () ()) ()) ())))
Zero cases best errors: [1 0 0 0 0 0 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 100
Percent parens: 0.270
--- Lexicase Population Statistics ---
Count of elite individuals by case: (182 252 692 253 253 689 7 429 253 431)
Population mean number of elite cases: 3.44
Count of perfect (error zero) individuals by case: (182 252 692 253 253 689 7 429 253 431)
Population mean number of perfect (error zero) cases: 3.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_exec_614} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction 8} {:close 0, :instruction exec_yank} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tagged_813} {:close 0, :instruction print_newline} {:close 0, :instruction tag_integer_218} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_empty} {:close 2, :instruction integer_mult})
Best program: (integer_add integer_yank integer_shove integer_mult integer_sub in2 boolean_swap boolean_not integer_pop in3 integer_swap integer_lt boolean_frominteger boolean_dup_times integer_shove boolean_shove boolean_pop integer_dup boolean_xor print_integer exec_do*times (exec_pop (boolean_frominteger exec_noop exec_pop () in1 boolean_eq boolean_stackdepth boolean_empty) integer_div) exec_swap (exec_flush exec_when ()) (in4 print_integer exec_yank integer_swap) exec_swap () (boolean_shove) boolean_flush integer_lt exec_dup_items integer_min boolean_pop integer_fromboolean in4 integer_dec boolean_xor boolean_dup integer_mult integer_dup_times exec_s_when_autoconstructing (exec_do*while () integer_eq integer_yank integer_inc) (boolean_rot tag_exec_614 (print_exec () boolean_and exec_s_when_autoconstructing (integer_dup_items boolean_yank exec_dup () integer_dup exec_k_when_autoconstructing (exec_do*count () exec_y_when_autoconstructing () 8 exec_yank in2 boolean_dup_items tagged_813 print_newline tag_integer_218 exec_shove (boolean_and exec_if (exec_empty exec_do*times (exec_stackdepth integer_shove boolean_empty) integer_mult) ())) ()) () ())) ())
Errors: [1 0 0 0 0 0 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 84
Size: 111
Percent parens: 0.243
--- Population Statistics ---
Average total errors in population: 6.559
Median total errors in population: 6
Error averages by case: (0.818 0.748 0.308 0.747 0.747 0.311 0.993 0.571 0.747 0.569)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.801
Average program size in population (points): 79.112
Average percent parens in population: 0.268
Minimum age in population: 8.0
Maximum age in population: 12.90625
Average age in population: 11.0830625
Median age in population: 11.171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 14
Genome diversity (% unique genomes):	 0.82
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.808
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4483362
--- Timings ---
Current time: 1559582792999 milliseconds
Total Time:          23.2 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        14.2 seconds, 61.1%
Fitness Testing:      5.5 seconds, 23.8%
Report:               3.4 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 85                  | Program output: 95                 
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 32                 
Correct output: -73                 | Program output: 48                 
Correct output: -44                 | Program output: -44                
Correct output: -78                 | Program output: -78                
Correct output: 76                  | Program output: 80                 
Correct output: 51                  | Program output: 99                 
Correct output: -42                 | Program output: -42                
Correct output: -89                 | Program output: -89                
Correct output: -35                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: 47                  | Program output: 47                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output: 87                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 21                  | Program output: 36                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 70                 
Correct output: 7                   | Program output: 57                 
Correct output: 42                  | Program output: 42                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 64                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 92                 
Correct output: 19                  | Program output: 56                 
Correct output: 6                   | Program output: 23                 
Correct output: 28                  | Program output: 28                 
Correct output: 9                   | Program output: 9                  
Correct output: 33                  | Program output: 55                 
Correct output: 23                  | Program output: 56                 
Correct output: 29                  | Program output: 59                 
Correct output: -84                 | Program output: 65                 
Correct output: -14                 | Program output: 4                  
Correct output: -88                 | Program output: -88                
Correct output: -82                 | Program output: 48                 
Correct output: -48                 | Program output: 10                 
Correct output: 14                  | Program output: 99                 
Correct output: -94                 | Program output: -71                
Correct output: -69                 | Program output: 70                 
Correct output: -90                 | Program output: 59                 
Correct output: -73                 | Program output: 69                 
Correct output: -72                 | Program output: -31                
Correct output: -65                 | Program output: 55                 
Correct output: -96                 | Program output: -17                
Correct output: -5                  | Program output: 14                 
Correct output: -34                 | Program output: -34                
Correct output: -23                 | Program output: 61                 
Correct output: -54                 | Program output: -28                
Correct output: -67                 | Program output: 12                 
Correct output: -96                 | Program output: 66                 
Correct output: -57                 | Program output: -28                
Correct output: -90                 | Program output: 24                 
Correct output: -97                 | Program output: 5                  
Correct output: -52                 | Program output: 83                 
Correct output: -72                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: -42                 | Program output: 82                 
Correct output: -86                 | Program output: -3                 
Correct output: -90                 | Program output: -32                
Correct output: -76                 | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: -31                 | Program output: -31                
Correct output: -41                 | Program output: 24                 
Correct output: -5                  | Program output: -5                 
Correct output: -44                 | Program output: 90                 
Correct output: -66                 | Program output: -51                
Correct output: -61                 | Program output: 53                 
Correct output: -18                 | Program output: 49                 
Correct output: -81                 | Program output: -81                
Correct output: -21                 | Program output: 47                 
Correct output: -98                 | Program output: 2                  
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: 93                 
Correct output: -97                 | Program output: 45                 
Correct output: -50                 | Program output: -14                
Correct output: -89                 | Program output: -89                
Correct output: -30                 | Program output: 97                 
Correct output: -55                 | Program output: 14                 
Correct output: -68                 | Program output: -68                
Correct output: -77                 | Program output: 66                 
Correct output: -30                 | Program output: -23                
Correct output: -68                 | Program output: -14                
Correct output: -45                 | Program output: -45                
Correct output: -89                 | Program output: -89                
Correct output: -24                 | Program output: 43                 
Correct output: -82                 | Program output: 56                 
Correct output: -98                 | Program output: 93                 
Correct output: -62                 | Program output: 35                 
Correct output: -69                 | Program output: -69                
Correct output: -67                 | Program output: 99                 
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 3, :instruction integer_eq} {:close 0, :instruction in1} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction tagged_872} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 2, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_not})
Lexicase best program: (exec_rot (integer_lte) () (integer_fromboolean boolean_stackdepth exec_empty integer_gt integer_pop exec_noop) exec_dup_times (integer_dup_times) exec_do*range (boolean_or integer_eq) in1 boolean_flush print_integer boolean_frominteger exec_do*count (integer_max integer_empty exec_do*times (exec_k_when_autoconstructing (exec_dup_times (exec_do*times (boolean_not exec_yankdup print_integer exec_yank tagged_872) integer_rot exec_do*while (boolean_xor integer_yank exec_pop (exec_do*count (integer_dec exec_k_when_autoconstructing (in4 integer_add boolean_and in4) () in3 exec_if (integer_mod exec_swap () (boolean_not)) ()))))) ())))
Lexicase best errors: [1 0 1 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 67
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 3, :instruction integer_eq} {:close 0, :instruction in1} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction tagged_872} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 2, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_not})
Zero cases best program: (exec_rot (integer_lte) () (integer_fromboolean boolean_stackdepth exec_empty integer_gt integer_pop exec_noop) exec_dup_times (integer_dup_times) exec_do*range (boolean_or integer_eq) in1 boolean_flush print_integer boolean_frominteger exec_do*count (integer_max integer_empty exec_do*times (exec_k_when_autoconstructing (exec_dup_times (exec_do*times (boolean_not exec_yankdup print_integer exec_yank tagged_872) integer_rot exec_do*while (boolean_xor integer_yank exec_pop (exec_do*count (integer_dec exec_k_when_autoconstructing (in4 integer_add boolean_and in4) () in3 exec_if (integer_mod exec_swap () (boolean_not)) ()))))) ())))
Zero cases best errors: [1 0 1 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 67
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (112 256 86 112 876 86 255 256 436 422)
Population mean number of elite cases: 2.90
Count of perfect (error zero) individuals by case: (112 256 86 112 876 86 255 256 436 422)
Population mean number of perfect (error zero) cases: 2.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_boolean_923} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_when} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_max})
Best program: (boolean_stackdepth integer_eq exec_s_when_autoconstructing (in1 exec_k_when_autoconstructing (exec_empty exec_s (print_integer exec_flush boolean_rot tag_boolean_923 integer_empty integer_dup_times) (integer_empty integer_max exec_while (in3 integer_yank) boolean_empty integer_lt) (integer_mod integer_dup_items exec_dup_times (boolean_and boolean_shove exec_s (integer_flush exec_when (exec_stackdepth)) (integer_max) ()))) ()) () ())
Errors: [1 0 1 1 0 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 30
Size: 45
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 7.103
Median total errors in population: 8
Error averages by case: (0.888 0.744 0.914 0.888 0.124 0.914 0.745 0.744 0.564 0.578)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.455
Average program size in population (points): 83.896
Average percent parens in population: 0.264
Minimum age in population: 9.4375
Maximum age in population: 14.5625
Average age in population: 12.5142578125
Median age in population: 12.59375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.858
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.851
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4973294
--- Timings ---
Current time: 1559582795783 milliseconds
Total Time:          26.1 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        16.3 seconds, 62.4%
Fitness Testing:      6.0 seconds, 23.0%
Report:               3.7 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 85                  | Program output: 95                 
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 32                 
Correct output: -73                 | Program output: 48                 
Correct output: -44                 | Program output: -44                
Correct output: -78                 | Program output: -78                
Correct output: 76                  | Program output: 80                 
Correct output: 51                  | Program output: 99                 
Correct output: -42                 | Program output: -42                
Correct output: -89                 | Program output: -89                
Correct output: -35                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: 47                  | Program output: 47                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output: 87                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 21                  | Program output: 36                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 70                 
Correct output: 7                   | Program output: 57                 
Correct output: 42                  | Program output: 42                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 64                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 92                 
Correct output: 19                  | Program output: 56                 
Correct output: 6                   | Program output: 23                 
Correct output: 28                  | Program output: 28                 
Correct output: 9                   | Program output: 9                  
Correct output: 33                  | Program output: 55                 
Correct output: 23                  | Program output: 56                 
Correct output: 29                  | Program output: 59                 
Correct output: -84                 | Program output: 65                 
Correct output: -14                 | Program output: 4                  
Correct output: -88                 | Program output: -88                
Correct output: -82                 | Program output: 48                 
Correct output: -48                 | Program output: 10                 
Correct output: 14                  | Program output: 99                 
Correct output: -94                 | Program output: -71                
Correct output: -69                 | Program output: 70                 
Correct output: -90                 | Program output: 59                 
Correct output: -73                 | Program output: 69                 
Correct output: -72                 | Program output: -31                
Correct output: -65                 | Program output: 55                 
Correct output: -96                 | Program output: -17                
Correct output: -5                  | Program output: 14                 
Correct output: -34                 | Program output: -34                
Correct output: -23                 | Program output: 61                 
Correct output: -54                 | Program output: -28                
Correct output: -67                 | Program output: 12                 
Correct output: -96                 | Program output: 66                 
Correct output: -57                 | Program output: -28                
Correct output: -90                 | Program output: 24                 
Correct output: -97                 | Program output: 5                  
Correct output: -52                 | Program output: 83                 
Correct output: -72                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: -42                 | Program output: 82                 
Correct output: -86                 | Program output: -3                 
Correct output: -90                 | Program output: -32                
Correct output: -76                 | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: -31                 | Program output: -31                
Correct output: -41                 | Program output: 24                 
Correct output: -5                  | Program output: -5                 
Correct output: -44                 | Program output: 90                 
Correct output: -66                 | Program output: -51                
Correct output: -61                 | Program output: 53                 
Correct output: -18                 | Program output: 49                 
Correct output: -81                 | Program output: -81                
Correct output: -21                 | Program output: 47                 
Correct output: -98                 | Program output: 2                  
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: 93                 
Correct output: -97                 | Program output: 45                 
Correct output: -50                 | Program output: -14                
Correct output: -89                 | Program output: -89                
Correct output: -30                 | Program output: 97                 
Correct output: -55                 | Program output: 14                 
Correct output: -68                 | Program output: -68                
Correct output: -77                 | Program output: 66                 
Correct output: -30                 | Program output: -23                
Correct output: -68                 | Program output: -14                
Correct output: -45                 | Program output: -45                
Correct output: -89                 | Program output: -89                
Correct output: -24                 | Program output: 43                 
Correct output: -82                 | Program output: 56                 
Correct output: -98                 | Program output: 93                 
Correct output: -62                 | Program output: 35                 
Correct output: -69                 | Program output: -69                
Correct output: -67                 | Program output: 99                 
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_or} {:close 2, :instruction integer_eq} {:close 0, :instruction in1} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_xor} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 2, :instruction boolean_and} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction 63} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot})
Lexicase best program: (boolean_xor exec_eq in1 exec_when (boolean_dup_times integer_gte exec_noop) exec_dup_times () integer_dup_times exec_do*range (boolean_or) integer_eq in1 boolean_flush print_integer boolean_frominteger exec_do*count (boolean_xor print_integer) exec_do*times (exec_empty in1 boolean_eq boolean_stackdepth integer_max) integer_div exec_swap (exec_flush boolean_and) () in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove integer_fromboolean exec_yankdup boolean_not 63 exec_s_when_autoconstructing (exec_do*times (exec_rot (exec_yankdup boolean_rot integer_max boolean_rot exec_dup () exec_s_when_autoconstructing (exec_do*range (exec_flush) integer_stackdepth print_exec (boolean_dup integer_fromboolean integer_dup_items integer_max boolean_rot)) () ()) () ())) () ()))
Lexicase best errors: [0 1 0 0 0 1 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 81
Percent parens: 0.296
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_or} {:close 2, :instruction integer_eq} {:close 0, :instruction in1} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_xor} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 2, :instruction boolean_and} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction 63} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot})
Zero cases best program: (boolean_xor exec_eq in1 exec_when (boolean_dup_times integer_gte exec_noop) exec_dup_times () integer_dup_times exec_do*range (boolean_or) integer_eq in1 boolean_flush print_integer boolean_frominteger exec_do*count (boolean_xor print_integer) exec_do*times (exec_empty in1 boolean_eq boolean_stackdepth integer_max) integer_div exec_swap (exec_flush boolean_and) () in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove integer_fromboolean exec_yankdup boolean_not 63 exec_s_when_autoconstructing (exec_do*times (exec_rot (exec_yankdup boolean_rot integer_max boolean_rot exec_dup () exec_s_when_autoconstructing (exec_do*range (exec_flush) integer_stackdepth print_exec (boolean_dup integer_fromboolean integer_dup_items integer_max boolean_rot)) () ()) () ())) () ()))
Zero cases best errors: [0 1 0 0 0 1 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 81
Percent parens: 0.296
--- Lexicase Population Statistics ---
Count of elite individuals by case: (588 94 879 378 685 91 93 376 214 376)
Population mean number of elite cases: 3.77
Count of perfect (error zero) individuals by case: (588 94 879 378 685 91 93 376 214 376)
Population mean number of perfect (error zero) cases: 3.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_eq} {:close 0, :instruction in1} {:close 1, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_exec_614} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction 8} {:close 0, :instruction exec_yank} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction print_newline} {:close 0, :instruction tag_integer_218} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty})
Best program: (boolean_xor exec_eq in1 exec_when (boolean_dup_times integer_gte exec_noop exec_dup_times (integer_dup_times) exec_do*range (boolean_or integer_eq) in1 boolean_flush) print_integer boolean_frominteger exec_do*count () integer_max integer_empty exec_do*times (exec_noop boolean_yank) in1 boolean_eq boolean_stackdepth integer_max integer_div exec_swap (exec_flush exec_when () in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove) boolean_flush integer_lt exec_dup_items integer_min boolean_pop integer_fromboolean in4 integer_dec boolean_xor boolean_dup integer_mult integer_dup_times exec_s_when_autoconstructing (exec_do*while () integer_eq integer_yank integer_inc boolean_rot tag_exec_614 (print_exec () boolean_and exec_s_when_autoconstructing (integer_dup_items boolean_yank exec_dup () integer_dup exec_k_when_autoconstructing (exec_do*count () exec_y_when_autoconstructing (8) exec_yank in2 boolean_dup_items exec_noop print_newline tag_integer_218 exec_shove (boolean_and integer_fromboolean exec_empty)) ()) () ())) () ()) ())
Errors: [0 1 0 0 0 1 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 76
Size: 103
Percent parens: 0.262
--- Population Statistics ---
Average total errors in population: 6.226
Median total errors in population: 7
Error averages by case: (0.412 0.906 0.121 0.622 0.315 0.909 0.907 0.624 0.786 0.624)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.132
Average program size in population (points): 76.907
Average percent parens in population: 0.253
Minimum age in population: 10.59375
Maximum age in population: 15.89453125
Average age in population: 13.905296875
Median age in population: 13.978515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.829
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.82
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 5485517
--- Timings ---
Current time: 1559582798436 milliseconds
Total Time:          28.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.1 seconds, 63.3%
Fitness Testing:      6.5 seconds, 22.6%
Report:               3.9 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 546
Test mean error for best: 0.54600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 85                  | Program output: 85                 
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 87                 
Correct output: -73                 | Program output: 48                 
Correct output: -44                 | Program output: -44                
Correct output: -78                 | Program output: -78                
Correct output: 76                  | Program output: 76                 
Correct output: 51                  | Program output: 99                 
Correct output: -42                 | Program output: -16                
Correct output: -89                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: 47                  | Program output: 47                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output: 98                 
Correct output: 15                  | Program output: 86                 
Correct output: 2                   | Program output: 80                 
Correct output: 21                  | Program output: 42                 
Correct output: 3                   | Program output: 59                 
Correct output: 13                  | Program output: 43                 
Correct output: 16                  | Program output: 93                 
Correct output: 7                   | Program output: 7                  
Correct output: 42                  | Program output: 67                 
Correct output: 2                   | Program output: 64                 
Correct output: 23                  | Program output: 23                 
Correct output: 7                   | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 19                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 36                 
Correct output: 9                   | Program output: 84                 
Correct output: 33                  | Program output: 60                 
Correct output: 23                  | Program output: 76                 
Correct output: 29                  | Program output: 29                 
Correct output: -84                 | Program output: -84                
Correct output: -14                 | Program output: -14                
Correct output: -88                 | Program output: 66                 
Correct output: -82                 | Program output: -82                
Correct output: -48                 | Program output: -48                
Correct output: 14                  | Program output: 92                 
Correct output: -94                 | Program output: -94                
Correct output: -69                 | Program output: -21                
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: -2                 
Correct output: -72                 | Program output: -72                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -15                
Correct output: -5                  | Program output: 18                 
Correct output: -34                 | Program output: 50                 
Correct output: -23                 | Program output: -23                
Correct output: -54                 | Program output: 45                 
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -55                
Correct output: -57                 | Program output: -57                
Correct output: -90                 | Program output: -7                 
Correct output: -97                 | Program output: -9                 
Correct output: -52                 | Program output: 12                 
Correct output: -72                 | Program output: -28                
Correct output: -86                 | Program output: 54                 
Correct output: -42                 | Program output: -42                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: 38                 
Correct output: -76                 | Program output: -76                
Correct output: 4                   | Program output: 8                  
Correct output: -31                 | Program output: -1                 
Correct output: -41                 | Program output: 49                 
Correct output: -5                  | Program output: 75                 
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -6                 
Correct output: -61                 | Program output: 3                  
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 54                 
Correct output: -79                 | Program output: -47                
Correct output: -97                 | Program output: -15                
Correct output: -50                 | Program output: -8                 
Correct output: -89                 | Program output: -4                 
Correct output: -30                 | Program output: -30                
Correct output: -55                 | Program output: -55                
Correct output: -68                 | Program output: 22                 
Correct output: -77                 | Program output: -77                
Correct output: -30                 | Program output: -30                
Correct output: -68                 | Program output: -41                
Correct output: -45                 | Program output: -8                 
Correct output: -89                 | Program output: -46                
Correct output: -24                 | Program output: -24                
Correct output: -82                 | Program output: -82                
Correct output: -98                 | Program output: 59                 
Correct output: -62                 | Program output: -62                
Correct output: -69                 | Program output: 90                 
Correct output: -67                 | Program output: 33                 
Correct output: -65                 | Program output: -24                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction integer_eq} {:close 0, :instruction in1} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_boolean_923} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_when} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_max})
Lexicase best program: (exec_rot (integer_lte) () (integer_fromboolean integer_eq) in1 boolean_flush print_integer boolean_frominteger exec_swap (integer_max exec_s (print_integer exec_flush boolean_rot tag_boolean_923 integer_empty integer_dup_times) (integer_empty integer_max exec_while (in3 exec_k_when_autoconstructing () (boolean_empty integer_lt) integer_mod integer_dup_items exec_dup_times (boolean_and boolean_shove exec_s (integer_flush exec_when (exec_stackdepth)) (integer_max) ()))) ()) ())
Lexicase best errors: [1 1 0 1 1 0 0 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 51
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction integer_eq} {:close 0, :instruction in1} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_boolean_923} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_when} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_max})
Zero cases best program: (exec_rot (integer_lte) () (integer_fromboolean integer_eq) in1 boolean_flush print_integer boolean_frominteger exec_swap (integer_max exec_s (print_integer exec_flush boolean_rot tag_boolean_923 integer_empty integer_dup_times) (integer_empty integer_max exec_while (in3 exec_k_when_autoconstructing () (boolean_empty integer_lt) integer_mod integer_dup_items exec_dup_times (boolean_and boolean_shove exec_s (integer_flush exec_when (exec_stackdepth)) (integer_max) ()))) ()) ())
Zero cases best errors: [1 1 0 1 1 0 0 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 51
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (200 363 504 1 1 505 504 504 200 360)
Population mean number of elite cases: 3.14
Count of perfect (error zero) individuals by case: (200 363 504 1 1 505 504 504 200 360)
Population mean number of perfect (error zero) cases: 3.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Best program: (integer_add integer_yank integer_shove integer_mult integer_add in2 boolean_swap boolean_eq boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_dup_times boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () boolean_xor print_integer) (exec_do*times (exec_pop (boolean_frominteger exec_noop boolean_xor print_integer) exec_do*times (exec_pop (boolean_frominteger exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) integer_div) exec_swap (exec_flush exec_when ()) (in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove) boolean_flush exec_do*times (exec_rot (print_boolean) (boolean_rot integer_max boolean_rot exec_dup () exec_s_when_autoconstructing (exec_do*range (exec_flush) integer_stackdepth integer_dup_items boolean_dup integer_fromboolean integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup exec_swap (boolean_dup_times exec_while (print_exec (in3 integer_lt -86 exec_while ()))) ()))) ()) () ()) ())))))
Errors: [0 0 1 1 1 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 89
Size: 127
Percent parens: 0.299
--- Population Statistics ---
Average total errors in population: 6.858
Median total errors in population: 6
Error averages by case: (0.8 0.637 0.496 0.999 0.999 0.495 0.496 0.496 0.8 0.64)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.56
Average program size in population (points): 83.212
Average percent parens in population: 0.282
Minimum age in population: 12.125
Maximum age in population: 17.212890625
Average age in population: 15.23008984375
Median age in population: 15.265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 53
Genome diversity (% unique genomes):	 0.803
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.799
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 5897369
--- Timings ---
Current time: 1559582801068 milliseconds
Total Time:          31.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        20.0 seconds, 64.1%
Fitness Testing:      6.9 seconds, 21.9%
Report:               4.2 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 559
Test mean error for best: 0.55900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 85                  | Program output: 85                 
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 87                 
Correct output: -73                 | Program output: 48                 
Correct output: -44                 | Program output: -44                
Correct output: -78                 | Program output: -78                
Correct output: 76                  | Program output: 76                 
Correct output: 51                  | Program output: 99                 
Correct output: -42                 | Program output: -42                
Correct output: -89                 | Program output: -89                
Correct output: -35                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: 47                  | Program output: 47                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output: 98                 
Correct output: 15                  | Program output: 86                 
Correct output: 2                   | Program output:                    
Correct output: 21                  | Program output: 42                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 43                 
Correct output: 16                  | Program output: 93                 
Correct output: 7                   | Program output: 7                  
Correct output: 42                  | Program output: 67                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 23                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 11                 
Correct output: 19                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 36                 
Correct output: 9                   | Program output:                    
Correct output: 33                  | Program output: 60                 
Correct output: 23                  | Program output: 76                 
Correct output: 29                  | Program output: 29                 
Correct output: -84                 | Program output: 47                 
Correct output: -14                 | Program output:                    
Correct output: -88                 | Program output: -88                
Correct output: -82                 | Program output: -27                
Correct output: -48                 | Program output: 10                 
Correct output: 14                  | Program output: 92                 
Correct output: -94                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -90                 | Program output: -47                
Correct output: -73                 | Program output: 42                 
Correct output: -72                 | Program output: -31                
Correct output: -65                 | Program output: 15                 
Correct output: -96                 | Program output: -17                
Correct output: -5                  | Program output: 18                 
Correct output: -34                 | Program output: -34                
Correct output: -23                 | Program output: -23                
Correct output: -54                 | Program output: -28                
Correct output: -67                 | Program output:                    
Correct output: -96                 | Program output: -96                
Correct output: -57                 | Program output: -28                
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: 5                  
Correct output: -52                 | Program output: 12                 
Correct output: -72                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: -42                 | Program output: 41                 
Correct output: -86                 | Program output: -3                 
Correct output: -90                 | Program output: -32                
Correct output: -76                 | Program output: 1                  
Correct output: 4                   | Program output:                    
Correct output: -31                 | Program output: -31                
Correct output: -41                 | Program output: 49                 
Correct output: -5                  | Program output: -5                 
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -51                
Correct output: -61                 | Program output: 3                  
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -21                 | Program output: -7                 
Correct output: -98                 | Program output:                    
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: -47                
Correct output: -97                 | Program output: 69                 
Correct output: -50                 | Program output: -14                
Correct output: -89                 | Program output: -89                
Correct output: -30                 | Program output: -30                
Correct output: -55                 | Program output: -55                
Correct output: -68                 | Program output: -68                
Correct output: -77                 | Program output: 99                 
Correct output: -30                 | Program output: -23                
Correct output: -68                 | Program output: -14                
Correct output: -45                 | Program output: -45                
Correct output: -89                 | Program output: -89                
Correct output: -24                 | Program output: 72                 
Correct output: -82                 | Program output: -82                
Correct output: -98                 | Program output: 59                 
Correct output: -62                 | Program output: -4                 
Correct output: -69                 | Program output: -69                
Correct output: -67                 | Program output: 33                 
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction 63} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_xor boolean_pop in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_dup_times boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth) (boolean_invert_second_then_and) in4 print_integer) exec_do*times (exec_empty boolean_frominteger exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) integer_div exec_swap (exec_flush boolean_and) (in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove) integer_fromboolean exec_yankdup boolean_not 63 exec_s_when_autoconstructing (exec_do*times (exec_rot (print_boolean) (boolean_rot integer_max boolean_rot exec_dup () exec_s_when_autoconstructing (exec_do*range (exec_flush) integer_stackdepth integer_dup_items boolean_dup integer_fromboolean integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup exec_swap (boolean_dup_times exec_while (print_exec (in3 integer_lt -86 exec_while ()))) ()))) ()) () ()) ())) () ()))
Lexicase best errors: [0 1 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 124
Percent parens: 0.306
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction 63} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_xor boolean_pop in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_dup_times boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth) (boolean_invert_second_then_and) in4 print_integer) exec_do*times (exec_empty boolean_frominteger exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) integer_div exec_swap (exec_flush boolean_and) (in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove) integer_fromboolean exec_yankdup boolean_not 63 exec_s_when_autoconstructing (exec_do*times (exec_rot (print_boolean) (boolean_rot integer_max boolean_rot exec_dup () exec_s_when_autoconstructing (exec_do*range (exec_flush) integer_stackdepth integer_dup_items boolean_dup integer_fromboolean integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup exec_swap (boolean_dup_times exec_while (print_exec (in3 integer_lt -86 exec_while ()))) ()))) ()) () ()) ())) () ()))
Zero cases best errors: [0 1 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 124
Percent parens: 0.306
--- Lexicase Population Statistics ---
Count of elite individuals by case: (708 302 907 259 507 304 515 261 516 321)
Population mean number of elite cases: 4.60
Count of perfect (error zero) individuals by case: (708 302 907 259 507 304 515 261 516 321)
Population mean number of perfect (error zero) cases: 4.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction 63} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Best program: (boolean_xor boolean_pop in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_dup_times boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth) () exec_dup_times () in4 print_integer) exec_do*times (exec_empty boolean_frominteger exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) integer_div exec_swap (exec_flush boolean_and) (in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove) integer_fromboolean exec_yankdup boolean_not 63 exec_s_when_autoconstructing (exec_do*times (exec_rot (print_boolean) (boolean_rot integer_max boolean_rot exec_dup () exec_s_when_autoconstructing (exec_do*range (exec_flush) integer_stackdepth integer_dup_items boolean_dup integer_fromboolean integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup exec_swap (boolean_dup_times exec_while (print_exec (in3 integer_lt -86 exec_while ()))) ()))) ()) () ()) ())) () ()))
Errors: [0 1 0 0 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 86
Size: 125
Percent parens: 0.312
--- Population Statistics ---
Average total errors in population: 5.4
Median total errors in population: 5
Error averages by case: (0.292 0.698 0.093 0.741 0.493 0.696 0.485 0.739 0.484 0.679)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 70.621
Average program size in population (points): 98.752
Average percent parens in population: 0.283
Minimum age in population: 13.125
Maximum age in population: 18.59375
Average age in population: 16.7800537109375
Median age in population: 16.8515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 53
Genome diversity (% unique genomes):	 0.842
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.84
Total error diversity:				 0.009
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.081
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 6195901
--- Timings ---
Current time: 1559582803870 milliseconds
Total Time:          34.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.2 seconds, 65.2%
Fitness Testing:      7.2 seconds, 21.0%
Report:               4.6 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 549
Test mean error for best: 0.54900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 85                  | Program output: 85                 
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 87                 
Correct output: -73                 | Program output: 48                 
Correct output: -44                 | Program output: -44                
Correct output: -78                 | Program output: -78                
Correct output: 76                  | Program output: 76                 
Correct output: 51                  | Program output: 99                 
Correct output: -42                 | Program output: -16                
Correct output: -89                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: 47                  | Program output: 47                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output: 98                 
Correct output: 15                  | Program output: 86                 
Correct output: 2                   | Program output: 80                 
Correct output: 21                  | Program output: 42                 
Correct output: 3                   | Program output: 59                 
Correct output: 13                  | Program output: 43                 
Correct output: 16                  | Program output: 93                 
Correct output: 7                   | Program output: 7                  
Correct output: 42                  | Program output: 67                 
Correct output: 2                   | Program output: 64                 
Correct output: 23                  | Program output: 23                 
Correct output: 7                   | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 19                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 36                 
Correct output: 9                   | Program output: 84                 
Correct output: 33                  | Program output: 60                 
Correct output: 23                  | Program output: 76                 
Correct output: 29                  | Program output: 29                 
Correct output: -84                 | Program output: -84                
Correct output: -14                 | Program output: -14                
Correct output: -88                 | Program output: 66                 
Correct output: -82                 | Program output: -82                
Correct output: -48                 | Program output: -48                
Correct output: 14                  | Program output: 92                 
Correct output: -94                 | Program output: -94                
Correct output: -69                 | Program output: -21                
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: -2                 
Correct output: -72                 | Program output: -72                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -15                
Correct output: -5                  | Program output: 18                 
Correct output: -34                 | Program output: 50                 
Correct output: -23                 | Program output: -23                
Correct output: -54                 | Program output: 45                 
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -55                
Correct output: -57                 | Program output: -57                
Correct output: -90                 | Program output: -7                 
Correct output: -97                 | Program output: -9                 
Correct output: -52                 | Program output: 12                 
Correct output: -72                 | Program output: -28                
Correct output: -86                 | Program output: 54                 
Correct output: -42                 | Program output: -42                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: 38                 
Correct output: -76                 | Program output: -76                
Correct output: 4                   | Program output: 8                  
Correct output: -31                 | Program output: -1                 
Correct output: -41                 | Program output: 49                 
Correct output: -5                  | Program output: 75                 
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -6                 
Correct output: -61                 | Program output: 3                  
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 54                 
Correct output: -79                 | Program output: -47                
Correct output: -97                 | Program output: -15                
Correct output: -50                 | Program output: -8                 
Correct output: -89                 | Program output: -4                 
Correct output: -30                 | Program output: -30                
Correct output: -55                 | Program output: -55                
Correct output: -68                 | Program output: 22                 
Correct output: -77                 | Program output: -77                
Correct output: -30                 | Program output: -30                
Correct output: -68                 | Program output: -41                
Correct output: -45                 | Program output: -8                 
Correct output: -89                 | Program output: -46                
Correct output: -24                 | Program output: -24                
Correct output: -82                 | Program output: -82                
Correct output: -98                 | Program output: 59                 
Correct output: -62                 | Program output: -62                
Correct output: -69                 | Program output: 90                 
Correct output: -67                 | Program output: 33                 
Correct output: -65                 | Program output: -24                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction 63} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot})
Lexicase best program: (integer_add integer_yank integer_shove integer_mult integer_add in2 boolean_swap boolean_eq boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_dup_times boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (exec_y_when_autoconstructing () boolean_not integer_dup_times) (boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth) exec_dup_times () in4 print_integer) (exec_do*times (exec_empty boolean_frominteger exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) integer_div) exec_swap (exec_flush boolean_and) (in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove) integer_fromboolean exec_yankdup boolean_not 63 exec_s_when_autoconstructing (exec_do*times (exec_rot (print_boolean) (integer_flush integer_max boolean_rot exec_while () exec_s_when_autoconstructing (exec_do*range (exec_flush) integer_stackdepth integer_dup_items boolean_dup integer_fromboolean integer_dup_items integer_max boolean_rot) () ()) ())) () ()))
Lexicase best errors: [0 1 1 0 1 1 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 101
Percent parens: 0.287
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction 63} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot})
Zero cases best program: (integer_add integer_yank integer_shove integer_mult integer_add in2 boolean_swap boolean_eq boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_dup_times boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (exec_y_when_autoconstructing () boolean_not integer_dup_times) (boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth) exec_dup_times () in4 print_integer) (exec_do*times (exec_empty boolean_frominteger exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) integer_div) exec_swap (exec_flush boolean_and) (in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove) integer_fromboolean exec_yankdup boolean_not 63 exec_s_when_autoconstructing (exec_do*times (exec_rot (print_boolean) (integer_flush integer_max boolean_rot exec_while () exec_s_when_autoconstructing (exec_do*range (exec_flush) integer_stackdepth integer_dup_items boolean_dup integer_fromboolean integer_dup_items integer_max boolean_rot) () ()) ())) () ()))
Zero cases best errors: [0 1 1 0 1 1 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 101
Percent parens: 0.287
--- Lexicase Population Statistics ---
Count of elite individuals by case: (912 33 1000 350 1000 271 1000 232 471 318)
Population mean number of elite cases: 5.59
Count of perfect (error zero) individuals by case: (912 33 0 350 0 271 0 232 471 318)
Population mean number of perfect (error zero) cases: 2.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction 63} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_exec} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Best program: (integer_add integer_yank integer_shove integer_mult integer_add in2 boolean_swap boolean_eq boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_dup_times boolean_flush exec_dup_times (exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth) exec_dup_times () in4 print_integer) (exec_do*times (exec_empty boolean_frominteger exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) integer_div) exec_swap (exec_flush boolean_and) (in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_dup_items) integer_fromboolean exec_yankdup boolean_not 63 exec_s_when_autoconstructing (exec_noop exec_rot (print_boolean) (boolean_rot integer_max boolean_rot exec_dup () exec_s_when_autoconstructing (exec_do*range (exec_flush) integer_stackdepth integer_dup_items boolean_dup integer_fromboolean integer_dup_items integer_max boolean_rot exec_k_when_autoconstructing (integer_gt exec_if (in2 boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup exec_swap (boolean_dup_times boolean_frominteger print_exec (in3 integer_lt -86 exec_while ())) ()))) ()) ()) () ()) ()) () ()))
Errors: [0 1 1 0 1 1 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 89
Size: 128
Percent parens: 0.305
--- Population Statistics ---
Average total errors in population: 7.413
Median total errors in population: 7
Error averages by case: (0.088 0.967 1.0 0.65 1.0 0.729 1.0 0.768 0.529 0.682)
Error minima by case: (0 0 1 0 1 0 1 0 0 0)
Average genome size in population (length): 84.866
Average program size in population (points): 121.734
Average percent parens in population: 0.302
Minimum age in population: 15.0078125
Maximum age in population: 19.78076171875
Average age in population: 18.180541015625
Median age in population: 18.2314453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 48
Genome diversity (% unique genomes):	 0.805
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.805
Total error diversity:				 0.005
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.118
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 6443675
--- Timings ---
Current time: 1559582806281 milliseconds
Total Time:          36.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.0 seconds, 65.8%
Fitness Testing:      7.4 seconds, 20.4%
Report:               4.9 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 85                  | Program output: 95                 
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 32                 
Correct output: -73                 | Program output: 48                 
Correct output: -44                 | Program output: -44                
Correct output: -78                 | Program output: 86                 
Correct output: 76                  | Program output: 76                 
Correct output: 51                  | Program output: 51                 
Correct output: -42                 | Program output: -16                
Correct output: -89                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: 47                  | Program output: 47                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 24                 
Correct output: 2                   | Program output: 13                 
Correct output: 21                  | Program output: 21                 
Correct output: 3                   | Program output: 29                 
Correct output: 13                  | Program output: 67                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 24                 
Correct output: 42                  | Program output: 55                 
Correct output: 2                   | Program output: 23                 
Correct output: 23                  | Program output: 37                 
Correct output: 7                   | Program output: 57                 
Correct output: 11                  | Program output: 95                 
Correct output: 19                  | Program output: 35                 
Correct output: 6                   | Program output: 42                 
Correct output: 28                  | Program output: 83                 
Correct output: 9                   | Program output: 80                 
Correct output: 33                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 29                  | Program output: 82                 
Correct output: -84                 | Program output: -84                
Correct output: -14                 | Program output: 43                 
Correct output: -88                 | Program output: 12                 
Correct output: -82                 | Program output: -82                
Correct output: -48                 | Program output: -48                
Correct output: 14                  | Program output: 29                 
Correct output: -94                 | Program output: 10                 
Correct output: -69                 | Program output: -21                
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: -2                 
Correct output: -72                 | Program output: 54                 
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -15                
Correct output: -5                  | Program output: 78                 
Correct output: -34                 | Program output: 29                 
Correct output: -23                 | Program output: 82                 
Correct output: -54                 | Program output: 37                 
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -55                
Correct output: -57                 | Program output: -57                
Correct output: -90                 | Program output: -7                 
Correct output: -97                 | Program output: 31                 
Correct output: -52                 | Program output: 85                 
Correct output: -72                 | Program output: 84                 
Correct output: -86                 | Program output: 34                 
Correct output: -42                 | Program output: -42                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: 48                 
Correct output: -76                 | Program output: 42                 
Correct output: 4                   | Program output: 54                 
Correct output: -31                 | Program output: -1                 
Correct output: -41                 | Program output: 54                 
Correct output: -5                  | Program output: 7                  
Correct output: -44                 | Program output: 32                 
Correct output: -66                 | Program output: -6                 
Correct output: -61                 | Program output: 29                 
Correct output: -18                 | Program output: 6                  
Correct output: -81                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 43                 
Correct output: -79                 | Program output: 14                 
Correct output: -97                 | Program output: -15                
Correct output: -50                 | Program output: -8                 
Correct output: -89                 | Program output: -4                 
Correct output: -30                 | Program output: 28                 
Correct output: -55                 | Program output: 55                 
Correct output: -68                 | Program output: 26                 
Correct output: -77                 | Program output: -77                
Correct output: -30                 | Program output: 11                 
Correct output: -68                 | Program output: -41                
Correct output: -45                 | Program output: -8                 
Correct output: -89                 | Program output: -46                
Correct output: -24                 | Program output: -24                
Correct output: -82                 | Program output: 85                 
Correct output: -98                 | Program output: 53                 
Correct output: -62                 | Program output: -62                
Correct output: -69                 | Program output: 98                 
Correct output: -67                 | Program output: 40                 
Correct output: -65                 | Program output: -24                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_xor} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction 63} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup})
Lexicase best program: (integer_add integer_yank integer_shove integer_mult integer_add in2 boolean_swap boolean_eq boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer integer_dup_times boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (exec_rot () (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth) () (exec_dup_times () boolean_xor print_integer)) (exec_do*times (exec_empty boolean_frominteger exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) boolean_stackdepth) (exec_dup_items exec_flush boolean_and) in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove) integer_fromboolean exec_yankdup boolean_not 63 exec_s_when_autoconstructing (exec_do*times (exec_rot (print_boolean) (boolean_rot integer_max boolean_rot exec_dup () exec_s_when_autoconstructing (integer_dup_items boolean_dup) () ()) ())) () ())
Lexicase best errors: [0 0 1 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 93
Percent parens: 0.301
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_xor} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction 63} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup})
Zero cases best program: (integer_add integer_yank integer_shove integer_mult integer_add in2 boolean_swap boolean_eq boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer integer_dup_times boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (exec_rot () (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth) () (exec_dup_times () boolean_xor print_integer)) (exec_do*times (exec_empty boolean_frominteger exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) boolean_stackdepth) (exec_dup_items exec_flush boolean_and) in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove) integer_fromboolean exec_yankdup boolean_not 63 exec_s_when_autoconstructing (exec_do*times (exec_rot (print_boolean) (boolean_rot integer_max boolean_rot exec_dup () exec_s_when_autoconstructing (integer_dup_items boolean_dup) () ()) ())) () ())
Zero cases best errors: [0 0 1 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 93
Percent parens: 0.301
--- Lexicase Population Statistics ---
Count of elite individuals by case: (621 621 1000 93 1 1 95 621 36 926)
Population mean number of elite cases: 4.01
Count of perfect (error zero) individuals by case: (621 621 0 93 1 1 95 621 36 926)
Population mean number of perfect (error zero) cases: 3.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 2, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean})
Best program: (integer_add integer_yank integer_shove integer_mult integer_add in2 boolean_swap boolean_eq boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_dup_times boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth) (exec_dup_times () in4 print_integer) exec_if (exec_empty boolean_frominteger exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) (integer_div) exec_swap (exec_flush boolean_and) (in4 print_integer exec_yank exec_do*range () exec_swap () () boolean_shove) integer_fromboolean)
Errors: [0 0 1 0 1 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 51
Size: 68
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.985
Median total errors in population: 6
Error averages by case: (0.379 0.379 1.0 0.907 0.999 0.999 0.905 0.379 0.964 0.074)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 86.631
Average program size in population (points): 123.008
Average percent parens in population: 0.295
Minimum age in population: 17.265625
Maximum age in population: 21.34521484375
Average age in population: 19.54851831054688
Median age in population: 19.55859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 45
Genome diversity (% unique genomes):	 0.843
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.842
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.154
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 6733267
--- Timings ---
Current time: 1559582808770 milliseconds
Total Time:          38.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.8 seconds, 66.3%
Fitness Testing:      7.7 seconds, 19.8%
Report:               5.3 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 553
Test mean error for best: 0.55300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output:                    
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 85                  | Program output: 85                 
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 87                 
Correct output: -73                 | Program output: 48                 
Correct output: -44                 | Program output: -44                
Correct output: -78                 | Program output: -78                
Correct output: 76                  | Program output: 76                 
Correct output: 51                  | Program output: 99                 
Correct output: -42                 | Program output: -16                
Correct output: -89                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: 47                  | Program output: 47                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output: 98                 
Correct output: 15                  | Program output: 86                 
Correct output: 2                   | Program output: 80                 
Correct output: 21                  | Program output: 42                 
Correct output: 3                   | Program output: 59                 
Correct output: 13                  | Program output: 43                 
Correct output: 16                  | Program output: 93                 
Correct output: 7                   | Program output: 7                  
Correct output: 42                  | Program output: 67                 
Correct output: 2                   | Program output: 64                 
Correct output: 23                  | Program output: 23                 
Correct output: 7                   | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 19                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 36                 
Correct output: 9                   | Program output: 84                 
Correct output: 33                  | Program output: 60                 
Correct output: 23                  | Program output: 76                 
Correct output: 29                  | Program output: 29                 
Correct output: -84                 | Program output: -84                
Correct output: -14                 | Program output: -14                
Correct output: -88                 | Program output: 66                 
Correct output: -82                 | Program output: -82                
Correct output: -48                 | Program output: -48                
Correct output: 14                  | Program output: 92                 
Correct output: -94                 | Program output: -94                
Correct output: -69                 | Program output: -21                
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: -2                 
Correct output: -72                 | Program output: -72                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -15                
Correct output: -5                  | Program output: 18                 
Correct output: -34                 | Program output: 50                 
Correct output: -23                 | Program output: -23                
Correct output: -54                 | Program output: 45                 
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -55                
Correct output: -57                 | Program output: -57                
Correct output: -90                 | Program output: -7                 
Correct output: -97                 | Program output: -9                 
Correct output: -52                 | Program output: 12                 
Correct output: -72                 | Program output: -28                
Correct output: -86                 | Program output: 54                 
Correct output: -42                 | Program output: -42                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: 38                 
Correct output: -76                 | Program output: -76                
Correct output: 4                   | Program output: 8                  
Correct output: -31                 | Program output: -1                 
Correct output: -41                 | Program output: 49                 
Correct output: -5                  | Program output: 7                  
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -6                 
Correct output: -61                 | Program output: 3                  
Correct output: -18                 | Program output: 6                  
Correct output: -81                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 54                 
Correct output: -79                 | Program output: -47                
Correct output: -97                 | Program output: -15                
Correct output: -50                 | Program output: -8                 
Correct output: -89                 | Program output: -4                 
Correct output: -30                 | Program output: -30                
Correct output: -55                 | Program output: -55                
Correct output: -68                 | Program output: 22                 
Correct output: -77                 | Program output: -77                
Correct output: -30                 | Program output: -30                
Correct output: -68                 | Program output: -41                
Correct output: -45                 | Program output: -8                 
Correct output: -89                 | Program output: -46                
Correct output: -24                 | Program output: -24                
Correct output: -82                 | Program output: -82                
Correct output: -98                 | Program output: 59                 
Correct output: -62                 | Program output: -62                
Correct output: -69                 | Program output: 90                 
Correct output: -67                 | Program output: 33                 
Correct output: -65                 | Program output: -24                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction 63} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Lexicase best program: (integer_add integer_yank integer_shove integer_mult integer_add in2 boolean_swap boolean_eq boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_dup_times boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth) (exec_dup_times () in4 print_integer) exec_if (exec_empty boolean_frominteger exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) (integer_div) exec_swap (exec_flush exec_flush boolean_and) (in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove) integer_fromboolean exec_yankdup boolean_not 63 exec_s_when_autoconstructing (exec_do*times (exec_rot (exec_y_when_autoconstructing () boolean_rot integer_max boolean_rot exec_dup () exec_s_when_autoconstructing (exec_do*range (exec_flush) integer_stackdepth integer_dup_items boolean_dup integer_fromboolean integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () exec_do*count (print_exec (boolean_dup_times exec_while (print_exec (in3 integer_lt -86 exec_while ()))))) ()) () ()) () ())) () ()))
Lexicase best errors: [0 0 1 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 126
Percent parens: 0.302
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction 63} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Zero cases best program: (integer_add integer_yank integer_shove integer_mult integer_add in2 boolean_swap boolean_eq boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_dup_times boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth) (exec_dup_times () in4 print_integer) exec_if (exec_empty boolean_frominteger exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) (integer_div) exec_swap (exec_flush exec_flush boolean_and) (in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove) integer_fromboolean exec_yankdup boolean_not 63 exec_s_when_autoconstructing (exec_do*times (exec_rot (exec_y_when_autoconstructing () boolean_rot integer_max boolean_rot exec_dup () exec_s_when_autoconstructing (exec_do*range (exec_flush) integer_stackdepth integer_dup_items boolean_dup integer_fromboolean integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () exec_do*count (print_exec (boolean_dup_times exec_while (print_exec (in3 integer_lt -86 exec_while ()))))) ()) () ()) () ())) () ()))
Zero cases best errors: [0 0 1 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 126
Percent parens: 0.302
--- Lexicase Population Statistics ---
Count of elite individuals by case: (551 234 100 148 147 199 29 209 909 551)
Population mean number of elite cases: 3.08
Count of perfect (error zero) individuals by case: (551 234 100 148 147 199 29 209 909 551)
Population mean number of perfect (error zero) cases: 3.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction 63} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_exec} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Best program: (integer_add integer_yank integer_shove integer_mult integer_add in2 boolean_swap boolean_eq boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_dup_times boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (print_integer) (integer_flush) boolean_not integer_dup_times) (boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth) exec_do*times (exec_empty boolean_frominteger exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) integer_div exec_swap (exec_flush boolean_and) (in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove) integer_fromboolean exec_yankdup boolean_not 63 exec_s_when_autoconstructing (exec_do*times (exec_rot (print_boolean) (boolean_rot exec_s_when_autoconstructing (exec_do*times (exec_rot (print_boolean boolean_rot integer_max boolean_rot exec_dup () exec_when (exec_do*range (exec_flush) integer_stackdepth integer_dup_items boolean_dup integer_fromboolean integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup ()) (exec_do*count (print_exec (exec_yankdup exec_swap () (boolean_dup_times boolean_xor print_exec (in3 integer_lt -86 exec_while ()))))))) () ())) () ()) ())) () ()))
Errors: [0 0 1 1 1 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 92
Size: 133
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 6.923
Median total errors in population: 7
Error averages by case: (0.449 0.766 0.9 0.852 0.853 0.801 0.971 0.791 0.091 0.449)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 86.764
Average program size in population (points): 123.106
Average percent parens in population: 0.295
Minimum age in population: 18.9814453125
Maximum age in population: 22.970703125
Average age in population: 21.03082116699219
Median age in population: 21.031005859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 55
Genome diversity (% unique genomes):	 0.773
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.77
Total error diversity:				 0.006
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.129
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 7002290
--- Timings ---
Current time: 1559582811213 milliseconds
Total Time:          41.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        27.6 seconds, 66.7%
Fitness Testing:      8.0 seconds, 19.3%
Report:               5.7 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 557
Test mean error for best: 0.55700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 85                  | Program output: 85                 
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 87                 
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -1                 
Correct output: -78                 | Program output: -78                
Correct output: 76                  | Program output: 76                 
Correct output: 51                  | Program output: 99                 
Correct output: -42                 | Program output: -16                
Correct output: -89                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: 47                  | Program output: 47                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output: 98                 
Correct output: 15                  | Program output: 86                 
Correct output: 2                   | Program output: 80                 
Correct output: 21                  | Program output: 42                 
Correct output: 3                   | Program output: 59                 
Correct output: 13                  | Program output: 43                 
Correct output: 16                  | Program output: 93                 
Correct output: 7                   | Program output: 7                  
Correct output: 42                  | Program output: 67                 
Correct output: 2                   | Program output:                    
Correct output: 23                  | Program output: 23                 
Correct output: 7                   | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 19                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 36                 
Correct output: 9                   | Program output: 84                 
Correct output: 33                  | Program output: 60                 
Correct output: 23                  | Program output: 76                 
Correct output: 29                  | Program output: 29                 
Correct output: -84                 | Program output: 47                 
Correct output: -14                 | Program output: -14                
Correct output: -88                 | Program output:                    
Correct output: -82                 | Program output: -12                
Correct output: -48                 | Program output: 1                  
Correct output: 14                  | Program output: 92                 
Correct output: -94                 | Program output: -94                
Correct output: -69                 | Program output: -29                
Correct output: -90                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -72                 | Program output: -43                
Correct output: -65                 | Program output: 11                 
Correct output: -96                 | Program output: -96                
Correct output: -5                  | Program output: -5                 
Correct output: -34                 | Program output: 50                 
Correct output: -23                 | Program output: -23                
Correct output: -54                 | Program output: -54                
Correct output: -67                 | Program output: -6                 
Correct output: -96                 | Program output: -96                
Correct output: -57                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -97                
Correct output: -52                 | Program output: -52                
Correct output: -72                 | Program output: -37                
Correct output: -86                 | Program output: 54                 
Correct output: -42                 | Program output: 41                 
Correct output: -86                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: -55                
Correct output: 4                   | Program output: 11                 
Correct output: -31                 | Program output: -21                
Correct output: -41                 | Program output: -41                
Correct output: -5                  | Program output: 75                 
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -66                
Correct output: -61                 | Program output: -61                
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -64                
Correct output: -21                 | Program output: -7                 
Correct output: -98                 | Program output: 64                 
Correct output: -100                | Program output: 54                 
Correct output: -79                 | Program output: -79                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: -30                
Correct output: -89                 | Program output:                    
Correct output: -30                 | Program output: -30                
Correct output: -55                 | Program output: -55                
Correct output: -68                 | Program output: -6                 
Correct output: -77                 | Program output: -4                 
Correct output: -30                 | Program output: -30                
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -15                
Correct output: -89                 | Program output: 32                 
Correct output: -24                 | Program output: 72                 
Correct output: -82                 | Program output: -82                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: 3                  
Correct output: -69                 | Program output:                    
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction 63} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 1, :instruction -86} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_xor boolean_pop in3 exec_when (boolean_dup_times integer_gte integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_dup_times boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth) () exec_dup_times () in4 print_integer) exec_do*times (exec_empty boolean_frominteger exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) integer_div exec_swap (exec_flush boolean_and) (in4 print_integer exec_do*range () exec_swap () (boolean_shove) integer_fromboolean exec_yankdup exec_yank exec_do*range () exec_swap () (boolean_shove) integer_fromboolean exec_yankdup boolean_not 63 exec_s_when_autoconstructing (integer_yank exec_rot (print_boolean) (boolean_rot integer_max boolean_rot exec_dup () exec_s_when_autoconstructing (exec_do*range (exec_flush) integer_stackdepth integer_dup_items boolean_dup integer_fromboolean integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger boolean_rot integer_empty integer_gt exec_if (in2 integer_gt exec_if (in2 boolean_frominteger boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup exec_swap (boolean_dup_times exec_while (print_exec (in3 integer_lt -86) exec_while ())) ()))) ()) ()) ()) ()) () ()) ()) () ()))
Lexicase best errors: [0 0 0 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 153
Percent parens: 0.307
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction 63} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 1, :instruction -86} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_xor boolean_pop in3 exec_when (boolean_dup_times integer_gte integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_dup_times boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth) () exec_dup_times () in4 print_integer) exec_do*times (exec_empty boolean_frominteger exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) integer_div exec_swap (exec_flush boolean_and) (in4 print_integer exec_do*range () exec_swap () (boolean_shove) integer_fromboolean exec_yankdup exec_yank exec_do*range () exec_swap () (boolean_shove) integer_fromboolean exec_yankdup boolean_not 63 exec_s_when_autoconstructing (integer_yank exec_rot (print_boolean) (boolean_rot integer_max boolean_rot exec_dup () exec_s_when_autoconstructing (exec_do*range (exec_flush) integer_stackdepth integer_dup_items boolean_dup integer_fromboolean integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger boolean_rot integer_empty integer_gt exec_if (in2 integer_gt exec_if (in2 boolean_frominteger boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup exec_swap (boolean_dup_times exec_while (print_exec (in3 integer_lt -86) exec_while ())) ()))) ()) ()) ()) ()) () ()) ()) () ()))
Zero cases best errors: [0 0 0 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 153
Percent parens: 0.307
--- Lexicase Population Statistics ---
Count of elite individuals by case: (260 468 231 359 213 315 916 254 486 260)
Population mean number of elite cases: 3.76
Count of perfect (error zero) individuals by case: (260 468 231 359 213 315 916 254 486 260)
Population mean number of perfect (error zero) cases: 3.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction tagged_349} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction 63} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction in3})
Best program: (boolean_xor boolean_pop in3 exec_when (boolean_dup_times integer_rot integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_dup_times boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth) () exec_dup_times () tagged_349 print_integer) exec_do*times (exec_empty boolean_frominteger exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) integer_flush exec_swap (exec_flush boolean_and) (in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove) integer_fromboolean exec_yankdup boolean_not 63 exec_s_when_autoconstructing (integer_yank exec_rot (print_boolean) (boolean_rot integer_max boolean_rot exec_dup () exec_s_when_autoconstructing (exec_do*range (exec_flush) integer_stackdepth integer_dup_items boolean_dup integer_fromboolean integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup exec_swap (boolean_dup_times exec_while (print_exec (in3))) ()))) ()) ()) () ()) ()) () ()))
Errors: [0 0 0 0 1 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 88
Size: 127
Percent parens: 0.307
--- Population Statistics ---
Average total errors in population: 6.238
Median total errors in population: 7
Error averages by case: (0.74 0.532 0.769 0.641 0.787 0.685 0.084 0.746 0.514 0.74)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 87.677
Average program size in population (points): 125.409
Average percent parens in population: 0.300
Minimum age in population: 20.37890625
Maximum age in population: 24.536865234375
Average age in population: 22.53986791992188
Median age in population: 22.581787109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 21
Genome diversity (% unique genomes):	 0.824
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.822
Total error diversity:				 0.008
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.117
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 7297346
--- Timings ---
Current time: 1559582813681 milliseconds
Total Time:          43.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        29.4 seconds, 67.0%
Fitness Testing:      8.3 seconds, 18.9%
Report:               6.1 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 560
Test mean error for best: 0.56000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 85                  | Program output: 85                 
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 87                 
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -1                 
Correct output: -78                 | Program output: -78                
Correct output: 76                  | Program output: 76                 
Correct output: 51                  | Program output: 99                 
Correct output: -42                 | Program output: -16                
Correct output: -89                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: 47                  | Program output: 47                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output: 98                 
Correct output: 15                  | Program output: 86                 
Correct output: 2                   | Program output: 80                 
Correct output: 21                  | Program output: 42                 
Correct output: 3                   | Program output: 59                 
Correct output: 13                  | Program output: 43                 
Correct output: 16                  | Program output: 93                 
Correct output: 7                   | Program output: 7                  
Correct output: 42                  | Program output: 67                 
Correct output: 2                   | Program output:                    
Correct output: 23                  | Program output: 23                 
Correct output: 7                   | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 19                  | Program output: 19                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 36                 
Correct output: 9                   | Program output: 84                 
Correct output: 33                  | Program output: 60                 
Correct output: 23                  | Program output: 76                 
Correct output: 29                  | Program output: 29                 
Correct output: -84                 | Program output: 47                 
Correct output: -14                 | Program output: -14                
Correct output: -88                 | Program output: 4                  
Correct output: -82                 | Program output: -12                
Correct output: -48                 | Program output: 1                  
Correct output: 14                  | Program output: 14                 
Correct output: -94                 | Program output: -94                
Correct output: -69                 | Program output: -29                
Correct output: -90                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -72                 | Program output: -43                
Correct output: -65                 | Program output:                    
Correct output: -96                 | Program output: -96                
Correct output: -5                  | Program output: -5                 
Correct output: -34                 | Program output: 50                 
Correct output: -23                 | Program output: -23                
Correct output: -54                 | Program output: -54                
Correct output: -67                 | Program output: -6                 
Correct output: -96                 | Program output: -96                
Correct output: -57                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -97                
Correct output: -52                 | Program output: -52                
Correct output: -72                 | Program output: -37                
Correct output: -86                 | Program output: 54                 
Correct output: -42                 | Program output: 41                 
Correct output: -86                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: -55                
Correct output: 4                   | Program output:                    
Correct output: -31                 | Program output: -21                
Correct output: -41                 | Program output: -41                
Correct output: -5                  | Program output: 75                 
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -66                
Correct output: -61                 | Program output: -61                
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -64                
Correct output: -21                 | Program output: -7                 
Correct output: -98                 | Program output: 64                 
Correct output: -100                | Program output: 54                 
Correct output: -79                 | Program output: -79                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: -30                
Correct output: -89                 | Program output:                    
Correct output: -30                 | Program output: -30                
Correct output: -55                 | Program output: -55                
Correct output: -68                 | Program output: -6                 
Correct output: -77                 | Program output: -4                 
Correct output: -30                 | Program output: -30                
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -15                
Correct output: -89                 | Program output: 32                 
Correct output: -24                 | Program output: 72                 
Correct output: -82                 | Program output: -82                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: 3                  
Correct output: -69                 | Program output: 4                  
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction 63} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 1, :instruction -86} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_xor boolean_pop in3 exec_when (boolean_dup_times integer_gte integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_dup_times boolean_flush integer_dup exec_yank boolean_not print_integer) (integer_flush) boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth exec_dup_times () in4 print_integer exec_do*times (exec_empty boolean_frominteger exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) integer_div exec_swap (exec_flush boolean_and) (in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove) integer_fromboolean exec_yankdup boolean_not 63 exec_s_when_autoconstructing (integer_yank exec_rot (print_boolean) (boolean_rot integer_max boolean_rot exec_dup () exec_s_when_autoconstructing (exec_do*range (exec_flush) integer_stackdepth integer_dup_items boolean_dup exec_while (integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup exec_swap (boolean_dup_times exec_while (print_exec (in3 integer_lt -86) exec_while ())) ()))) ()) ())) () ()) ()) () ()))
Lexicase best errors: [0 1 1 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 130
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction 63} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 1, :instruction -86} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_xor boolean_pop in3 exec_when (boolean_dup_times integer_gte integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_dup_times boolean_flush integer_dup exec_yank boolean_not print_integer) (integer_flush) boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth exec_dup_times () in4 print_integer exec_do*times (exec_empty boolean_frominteger exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) integer_div exec_swap (exec_flush boolean_and) (in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove) integer_fromboolean exec_yankdup boolean_not 63 exec_s_when_autoconstructing (integer_yank exec_rot (print_boolean) (boolean_rot integer_max boolean_rot exec_dup () exec_s_when_autoconstructing (exec_do*range (exec_flush) integer_stackdepth integer_dup_items boolean_dup exec_while (integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup exec_swap (boolean_dup_times exec_while (print_exec (in3 integer_lt -86) exec_while ())) ()))) ()) ())) () ()) ()) () ()))
Zero cases best errors: [0 1 1 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 130
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (403 229 40 403 568 900 168 403 118 555)
Population mean number of elite cases: 3.79
Count of perfect (error zero) individuals by case: (403 229 40 403 568 900 168 403 118 555)
Population mean number of perfect (error zero) cases: 3.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction 63} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 1, :instruction -86} {:close 0, :instruction integer_gte})
Best program: (boolean_xor boolean_pop in3 exec_when (integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth) exec_dup_times () in4 print_integer exec_do*times (exec_empty boolean_frominteger exec_noop exec_y () in1 boolean_eq boolean_stackdepth boolean_stackdepth integer_max) integer_div exec_swap (exec_empty boolean_and) (in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove) integer_fromboolean exec_yankdup boolean_not 63 exec_s_when_autoconstructing (integer_yank exec_rot (print_boolean boolean_rot integer_max boolean_rot exec_dup () exec_s_when_autoconstructing (exec_do*range (exec_flush) integer_stackdepth integer_dup_items boolean_dup integer_fromboolean integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup exec_swap (boolean_dup_times exec_while (print_exec (in3 integer_lt -86) integer_gte)) ()))) ()) ()) () ()) () ()) () ()))
Errors: [0 1 1 0 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 85
Size: 121
Percent parens: 0.298
--- Population Statistics ---
Average total errors in population: 6.213
Median total errors in population: 6
Error averages by case: (0.597 0.771 0.96 0.597 0.432 0.1 0.832 0.597 0.882 0.445)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 86.241
Average program size in population (points): 122.859
Average percent parens in population: 0.298
Minimum age in population: 21.37890625
Maximum age in population: 25.553466796875
Average age in population: 23.69916333007812
Median age in population: 23.76261901855469
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 46
Genome diversity (% unique genomes):	 0.826
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.826
Total error diversity:				 0.008
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.134
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 7631850
--- Timings ---
Current time: 1559582816254 milliseconds
Total Time:          46.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        31.1 seconds, 67.2%
Fitness Testing:      8.6 seconds, 18.6%
Report:               6.5 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 546
Test mean error for best: 0.54600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 85                  | Program output: 95                 
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 32                 
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -1                 
Correct output: -78                 | Program output: -78                
Correct output: 76                  | Program output: 80                 
Correct output: 51                  | Program output: 99                 
Correct output: -42                 | Program output: -16                
Correct output: -89                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: 47                  | Program output: 47                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output: 87                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 21                  | Program output: 36                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 70                 
Correct output: 7                   | Program output: 57                 
Correct output: 42                  | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 64                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 92                 
Correct output: 19                  | Program output: 56                 
Correct output: 6                   | Program output: 23                 
Correct output: 28                  | Program output: 28                 
Correct output: 9                   | Program output: 9                  
Correct output: 33                  | Program output: 55                 
Correct output: 23                  | Program output: 56                 
Correct output: 29                  | Program output: 59                 
Correct output: -84                 | Program output: 65                 
Correct output: -14                 | Program output: 4                  
Correct output: -88                 | Program output: 4                  
Correct output: -82                 | Program output: -12                
Correct output: -48                 | Program output: 1                  
Correct output: 14                  | Program output: 1614               
Correct output: -94                 | Program output: -71                
Correct output: -69                 | Program output: -29                
Correct output: -90                 | Program output: 59                 
Correct output: -73                 | Program output: -73                
Correct output: -72                 | Program output: -43                
Correct output: -65                 | Program output:                    
Correct output: -96                 | Program output: -96                
Correct output: -5                  | Program output: -5                 
Correct output: -34                 | Program output: -34                
Correct output: -23                 | Program output: 61                 
Correct output: -54                 | Program output: -54                
Correct output: -67                 | Program output: 12                 
Correct output: -96                 | Program output: 66                 
Correct output: -57                 | Program output: -28                
Correct output: -90                 | Program output: 24                 
Correct output: -97                 | Program output: -97                
Correct output: -52                 | Program output: -52                
Correct output: -72                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -42                 | Program output: 82                 
Correct output: -86                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: -55                
Correct output: 4                   | Program output:                    
Correct output: -31                 | Program output: -21                
Correct output: -41                 | Program output: -41                
Correct output: -5                  | Program output: -5                 
Correct output: -44                 | Program output: 90                 
Correct output: -66                 | Program output: -51                
Correct output: -61                 | Program output: -61                
Correct output: -18                 | Program output: 49                 
Correct output: -81                 | Program output: -81                
Correct output: -21                 | Program output: 47                 
Correct output: -98                 | Program output: 2                  
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: -79                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: -30                
Correct output: -89                 | Program output: 2                  
Correct output: -30                 | Program output: 97                 
Correct output: -55                 | Program output: 14                 
Correct output: -68                 | Program output: -6                 
Correct output: -77                 | Program output: -4                 
Correct output: -30                 | Program output: -23                
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -15                
Correct output: -89                 | Program output: 13                 
Correct output: -24                 | Program output: 43                 
Correct output: -82                 | Program output: -82                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: 3                  
Correct output: -69                 | Program output: 4                  
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 2, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_xor boolean_pop in3 exec_when (boolean_dup_times integer_gte integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_dup_times boolean_flush print_integer) (integer_dup_times boolean_flush integer_dup exec_yank) exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth) exec_dup_times (in1 print_integer exec_do*times (exec_empty boolean_frominteger exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) integer_div exec_swap (exec_flush boolean_and exec_noop) (exec_y () in1 boolean_eq boolean_stackdepth integer_max) exec_dup_times () exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove)) integer_fromboolean exec_yankdup exec_do*range (exec_flush) integer_stackdepth integer_dup_items boolean_dup integer_fromboolean integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () exec_do*count () print_exec (exec_yankdup exec_swap (boolean_dup_times exec_while (print_exec (in3 integer_lt) -86 exec_while ())) ())) ()) ()))
Lexicase best errors: [0 0 1 1 1 0 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 122
Percent parens: 0.279
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 2, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_xor boolean_pop in3 exec_when (boolean_dup_times integer_gte integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_dup_times boolean_flush print_integer) (integer_dup_times boolean_flush integer_dup exec_yank) exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth) exec_dup_times (in1 print_integer exec_do*times (exec_empty boolean_frominteger exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) integer_div exec_swap (exec_flush boolean_and exec_noop) (exec_y () in1 boolean_eq boolean_stackdepth integer_max) exec_dup_times () exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove)) integer_fromboolean exec_yankdup exec_do*range (exec_flush) integer_stackdepth integer_dup_items boolean_dup integer_fromboolean integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () exec_do*count () print_exec (exec_yankdup exec_swap (boolean_dup_times exec_while (print_exec (in3 integer_lt) -86 exec_while ())) ())) ()) ()))
Zero cases best errors: [0 0 1 1 1 0 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 122
Percent parens: 0.279
--- Lexicase Population Statistics ---
Count of elite individuals by case: (830 27 666 33 105 559 561 117 249 559)
Population mean number of elite cases: 3.71
Count of perfect (error zero) individuals by case: (830 27 666 33 105 559 561 117 249 559)
Population mean number of perfect (error zero) cases: 3.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 2, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Best program: (boolean_xor boolean_pop in3 exec_when (boolean_dup_times integer_gte integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_dup_times boolean_flush print_integer) (integer_dup_times boolean_flush integer_dup exec_yank) exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth) exec_dup_times (in1 print_integer exec_do*times (exec_empty boolean_frominteger exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) integer_div exec_swap (exec_flush boolean_and exec_noop) (exec_y () in1 boolean_eq boolean_stackdepth integer_max) exec_dup_times () exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove)) integer_fromboolean exec_yankdup exec_do*range (exec_flush) integer_stackdepth integer_dup_items boolean_dup integer_fromboolean integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () exec_do*count () print_exec (exec_yankdup exec_swap (boolean_dup_times exec_while (print_exec (in3 integer_lt) -86 exec_while ())) ())) ()) ()))
Errors: [0 0 1 1 1 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 88
Size: 122
Percent parens: 0.279
--- Population Statistics ---
Average total errors in population: 6.294
Median total errors in population: 6
Error averages by case: (0.17 0.973 0.334 0.967 0.895 0.441 0.439 0.883 0.751 0.441)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 88.006
Average program size in population (points): 124.714
Average percent parens in population: 0.294
Minimum age in population: 23.16900634765625
Maximum age in population: 26.90457153320312
Average age in population: 25.11500839233398
Median age in population: 25.15837097167969
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 59
Genome diversity (% unique genomes):	 0.79
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.79
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.103
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 7910471
--- Timings ---
Current time: 1559582818909 milliseconds
Total Time:          48.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.9 seconds, 67.4%
Fitness Testing:      8.9 seconds, 18.3%
Report:               6.9 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 545
Test mean error for best: 0.54500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 85                  | Program output: 85                 
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 87                 
Correct output: -73                 | Program output: 48                 
Correct output: -44                 | Program output: -44                
Correct output: -78                 | Program output: -78                
Correct output: 76                  | Program output: 76                 
Correct output: 51                  | Program output: 99                 
Correct output: -42                 | Program output: -16                
Correct output: -89                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: 47                  | Program output: 47                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output: 98                 
Correct output: 15                  | Program output: 86                 
Correct output: 2                   | Program output: 80                 
Correct output: 21                  | Program output: 42                 
Correct output: 3                   | Program output: 59                 
Correct output: 13                  | Program output: 43                 
Correct output: 16                  | Program output: 93                 
Correct output: 7                   | Program output: 7                  
Correct output: 42                  | Program output: 67                 
Correct output: 2                   | Program output: 64                 
Correct output: 23                  | Program output: 23                 
Correct output: 7                   | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 19                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 36                 
Correct output: 9                   | Program output: 84                 
Correct output: 33                  | Program output: 60                 
Correct output: 23                  | Program output: 76                 
Correct output: 29                  | Program output: 29                 
Correct output: -84                 | Program output: -84                
Correct output: -14                 | Program output: -14                
Correct output: -88                 | Program output: 66                 
Correct output: -82                 | Program output: -82                
Correct output: -48                 | Program output: -48                
Correct output: 14                  | Program output: 92                 
Correct output: -94                 | Program output: -94                
Correct output: -69                 | Program output: -21                
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: -2                 
Correct output: -72                 | Program output: -72                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -15                
Correct output: -5                  | Program output: 18                 
Correct output: -34                 | Program output: 50                 
Correct output: -23                 | Program output: -23                
Correct output: -54                 | Program output: 45                 
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -55                
Correct output: -57                 | Program output: -57                
Correct output: -90                 | Program output: -7                 
Correct output: -97                 | Program output: -9                 
Correct output: -52                 | Program output: 12                 
Correct output: -72                 | Program output: -28                
Correct output: -86                 | Program output: 54                 
Correct output: -42                 | Program output: -42                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: 38                 
Correct output: -76                 | Program output: -76                
Correct output: 4                   | Program output: 8                  
Correct output: -31                 | Program output: -1                 
Correct output: -41                 | Program output: 49                 
Correct output: -5                  | Program output: 75                 
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -6                 
Correct output: -61                 | Program output: 3                  
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 54                 
Correct output: -79                 | Program output: -47                
Correct output: -97                 | Program output: -15                
Correct output: -50                 | Program output: -8                 
Correct output: -89                 | Program output: -4                 
Correct output: -30                 | Program output: -30                
Correct output: -55                 | Program output: -55                
Correct output: -68                 | Program output: 22                 
Correct output: -77                 | Program output: -77                
Correct output: -30                 | Program output: -30                
Correct output: -68                 | Program output: -41                
Correct output: -45                 | Program output: -8                 
Correct output: -89                 | Program output: -46                
Correct output: -24                 | Program output: -24                
Correct output: -82                 | Program output: -82                
Correct output: -98                 | Program output: 59                 
Correct output: -62                 | Program output: -62                
Correct output: -69                 | Program output: 90                 
Correct output: -67                 | Program output: 33                 
Correct output: -65                 | Program output: -24                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_s} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction 63} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 1, :instruction -86} {:close 0, :instruction exec_while})
Lexicase best program: (integer_add integer_yank integer_shove integer_mult integer_add in2 boolean_swap boolean_eq boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_dup_times boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (exec_s () (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_flush exec_dup_times () exec_stackdepth) () (exec_dup_times () in4 print_integer) exec_do*times (exec_empty boolean_frominteger exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) integer_div) (exec_swap (exec_flush boolean_and) (in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove) integer_fromboolean exec_yankdup boolean_not 63 exec_s_when_autoconstructing (integer_yank exec_rot (print_boolean) (boolean_rot integer_max boolean_rot exec_dup () exec_s_when_autoconstructing (exec_do*range (exec_flush) integer_stackdepth integer_dup_items boolean_dup integer_fromboolean integer_dup_items integer_max boolean_rot exec_while (print_exec (integer_mult integer_gt exec_if (in2 boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup exec_swap (boolean_dup_times exec_while (print_exec (in3 integer_lt -86) exec_while ())) ()))) ()))) () ()) ()) () ())))
Lexicase best errors: [1 1 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 134
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_s} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction 63} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 1, :instruction -86} {:close 0, :instruction exec_while})
Zero cases best program: (integer_add integer_yank integer_shove integer_mult integer_add in2 boolean_swap boolean_eq boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_dup_times boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (exec_s () (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_flush exec_dup_times () exec_stackdepth) () (exec_dup_times () in4 print_integer) exec_do*times (exec_empty boolean_frominteger exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) integer_div) (exec_swap (exec_flush boolean_and) (in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove) integer_fromboolean exec_yankdup boolean_not 63 exec_s_when_autoconstructing (integer_yank exec_rot (print_boolean) (boolean_rot integer_max boolean_rot exec_dup () exec_s_when_autoconstructing (exec_do*range (exec_flush) integer_stackdepth integer_dup_items boolean_dup integer_fromboolean integer_dup_items integer_max boolean_rot exec_while (print_exec (integer_mult integer_gt exec_if (in2 boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup exec_swap (boolean_dup_times exec_while (print_exec (in3 integer_lt -86) exec_while ())) ()))) ()))) () ()) ()) () ())))
Zero cases best errors: [1 1 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 134
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (480 372 429 196 396 918 438 357 399 250)
Population mean number of elite cases: 4.24
Count of perfect (error zero) individuals by case: (480 372 429 196 396 918 438 357 399 250)
Population mean number of perfect (error zero) cases: 4.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction 63} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 1, :instruction -86} {:close 0, :instruction exec_while})
Best program: (integer_add integer_yank integer_shove integer_mult integer_add in2 boolean_swap boolean_eq boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_dup_times integer_min integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (boolean_not integer_dup_times) (boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth exec_dup_times () in4 print_integer exec_do*times (exec_empty boolean_frominteger exec_noop boolean_and) in1 boolean_eq boolean_stackdepth integer_max) integer_div) (exec_swap (exec_flush boolean_and) (in4 print_integer exec_yank exec_do*range () integer_fromboolean exec_yankdup boolean_not 63 exec_s_when_autoconstructing (integer_yank exec_rot (print_boolean) (boolean_rot integer_max integer_lt) (exec_do*range (exec_flush) integer_stackdepth integer_dup_items boolean_dup integer_fromboolean integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup exec_swap (boolean_dup_times exec_while (print_exec (in3 exec_do*range (-86) exec_while ()))) ()))))) ())) () ())))
Errors: [1 1 0 0 0 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 89
Size: 123
Percent parens: 0.276
--- Population Statistics ---
Average total errors in population: 5.765
Median total errors in population: 5
Error averages by case: (0.52 0.628 0.571 0.804 0.604 0.082 0.562 0.643 0.601 0.75)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 87.627
Average program size in population (points): 123.233
Average percent parens in population: 0.288
Minimum age in population: 24.16900634765625
Maximum age in population: 28.31009674072266
Average age in population: 26.52538275909424
Median age in population: 26.54540634155273
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 99
Genome diversity (% unique genomes):	 0.828
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 99
Syntactic diversity (% unique Push programs):	 0.828
Total error diversity:				 0.007
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.148
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 8292779
--- Timings ---
Current time: 1559582821593 milliseconds
Total Time:          51.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.8 seconds, 67.3%
Fitness Testing:      9.4 seconds, 18.1%
Report:               7.5 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 544
Test mean error for best: 0.54400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 85                  | Program output: 95                 
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 32                 
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -1                 
Correct output: -78                 | Program output: -78                
Correct output: 76                  | Program output: 80                 
Correct output: 51                  | Program output: 99                 
Correct output: -42                 | Program output: -16                
Correct output: -89                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: 47                  | Program output: 47                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output: 87                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 21                  | Program output: 36                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 70                 
Correct output: 7                   | Program output: 57                 
Correct output: 42                  | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 64                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 92                 
Correct output: 19                  | Program output: 56                 
Correct output: 6                   | Program output: 23                 
Correct output: 28                  | Program output: 28                 
Correct output: 9                   | Program output: 9                  
Correct output: 33                  | Program output: 55                 
Correct output: 23                  | Program output: 56                 
Correct output: 29                  | Program output: 59                 
Correct output: -84                 | Program output: 65                 
Correct output: -14                 | Program output: 4                  
Correct output: -88                 | Program output: 4                  
Correct output: -82                 | Program output: -12                
Correct output: -48                 | Program output: 1                  
Correct output: 14                  | Program output: 99                 
Correct output: -94                 | Program output: -71                
Correct output: -69                 | Program output: -29                
Correct output: -90                 | Program output: 59                 
Correct output: -73                 | Program output: -73                
Correct output: -72                 | Program output: -43                
Correct output: -65                 | Program output: 55                 
Correct output: -96                 | Program output: -96                
Correct output: -5                  | Program output: -5                 
Correct output: -34                 | Program output: -34                
Correct output: -23                 | Program output: 61                 
Correct output: -54                 | Program output: -54                
Correct output: -67                 | Program output: 12                 
Correct output: -96                 | Program output: 66                 
Correct output: -57                 | Program output: -28                
Correct output: -90                 | Program output: 24                 
Correct output: -97                 | Program output: -97                
Correct output: -52                 | Program output: -52                
Correct output: -72                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -42                 | Program output: 82                 
Correct output: -86                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: -55                
Correct output: 4                   | Program output: 4                  
Correct output: -31                 | Program output: -21                
Correct output: -41                 | Program output: -41                
Correct output: -5                  | Program output: -5                 
Correct output: -44                 | Program output: 90                 
Correct output: -66                 | Program output: -51                
Correct output: -61                 | Program output: -61                
Correct output: -18                 | Program output: 49                 
Correct output: -81                 | Program output: -81                
Correct output: -21                 | Program output: 47                 
Correct output: -98                 | Program output: 2                  
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: -79                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: -30                
Correct output: -89                 | Program output: 2                  
Correct output: -30                 | Program output: 97                 
Correct output: -55                 | Program output: 14                 
Correct output: -68                 | Program output: -6                 
Correct output: -77                 | Program output: -4                 
Correct output: -30                 | Program output: -23                
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -15                
Correct output: -89                 | Program output: -89                
Correct output: -24                 | Program output: 43                 
Correct output: -82                 | Program output: -82                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: 3                  
Correct output: -69                 | Program output: 4                  
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 2, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (boolean_xor boolean_pop in3 exec_when (boolean_dup_times integer_gte integer_dup exec_yank exec_s_when_autoconstructing (print_integer integer_dup_times boolean_xor print_integer) (integer_dup_times boolean_flush integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte) boolean_stackdepth) exec_flush exec_dup_times () exec_stackdepth exec_dup_times (in1 print_integer exec_swap (exec_flush boolean_and exec_noop) (exec_y () in1 boolean_eq boolean_stackdepth integer_max) exec_dup_times () exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove)) integer_fromboolean exec_yankdup exec_do*range (exec_flush) integer_stackdepth integer_dup_items boolean_dup integer_fromboolean) ()))
Lexicase best errors: [1 0 0 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 80
Percent parens: 0.275
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_lte} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 2, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (boolean_xor boolean_pop in3 exec_when (boolean_dup_times integer_gte integer_dup exec_yank exec_s_when_autoconstructing (print_integer integer_dup_times boolean_xor print_integer) (integer_dup_times boolean_flush integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte) boolean_stackdepth) exec_flush exec_dup_times () exec_stackdepth exec_dup_times (in1 print_integer exec_swap (exec_flush boolean_and exec_noop) (exec_y () in1 boolean_eq boolean_stackdepth integer_max) exec_dup_times () exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove)) integer_fromboolean exec_yankdup exec_do*range (exec_flush) integer_stackdepth integer_dup_items boolean_dup integer_fromboolean) ()))
Zero cases best errors: [1 0 0 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 80
Percent parens: 0.275
--- Lexicase Population Statistics ---
Count of elite individuals by case: (439 880 188 551 299 303 296 393 440 911)
Population mean number of elite cases: 4.70
Count of perfect (error zero) individuals by case: (439 880 188 551 299 303 296 393 440 911)
Population mean number of perfect (error zero) cases: 4.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 2, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Best program: (boolean_xor boolean_pop in3 exec_when (boolean_dup_times integer_gte integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_dup_times boolean_flush print_integer) (integer_dup_times boolean_flush integer_dup exec_yank) exec_s_when_autoconstructing (print_integer) (integer_flush boolean_not integer_dup_times) (boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth) exec_dup_times (in1 print_integer exec_do*times (exec_empty boolean_frominteger exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) integer_div exec_swap (exec_flush boolean_and exec_noop) (exec_y () in1 boolean_eq boolean_stackdepth integer_max) exec_dup_times () exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove)) integer_fromboolean exec_yankdup exec_do*range (exec_flush) integer_stackdepth integer_dup_items boolean_dup integer_fromboolean integer_dup_items) (integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup exec_swap (boolean_dup_times exec_while (print_exec (in3 integer_lt) -86 exec_while ())) ()))) ()))))
Errors: [1 0 0 0 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 88
Size: 122
Percent parens: 0.279
--- Population Statistics ---
Average total errors in population: 5.3
Median total errors in population: 5
Error averages by case: (0.561 0.12 0.812 0.449 0.701 0.697 0.704 0.607 0.56 0.089)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 87.766
Average program size in population (points): 122.934
Average percent parens in population: 0.284
Minimum age in population: 26.162109375
Maximum age in population: 29.94438171386719
Average age in population: 28.14050736999512
Median age in population: 28.2575626373291
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 37
Genome diversity (% unique genomes):	 0.841
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.838
Total error diversity:				 0.008
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.126
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 8642739
--- Timings ---
Current time: 1559582824320 milliseconds
Total Time:          54.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.6 seconds, 67.4%
Fitness Testing:      9.7 seconds, 17.9%
Report:               7.8 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 85                  | Program output: 95                 
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 32                 
Correct output: -73                 | Program output: 48                 
Correct output: -44                 | Program output: -44                
Correct output: -78                 | Program output: 86                 
Correct output: 76                  | Program output: 76                 
Correct output: 51                  | Program output: 51                 
Correct output: -42                 | Program output: -16                
Correct output: -89                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: 47                  | Program output: 47                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 24                 
Correct output: 2                   | Program output: 13                 
Correct output: 21                  | Program output: 21                 
Correct output: 3                   | Program output: 29                 
Correct output: 13                  | Program output: 67                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 24                 
Correct output: 42                  | Program output: 55                 
Correct output: 2                   | Program output: 23                 
Correct output: 23                  | Program output: 37                 
Correct output: 7                   | Program output: 57                 
Correct output: 11                  | Program output: 95                 
Correct output: 19                  | Program output: 35                 
Correct output: 6                   | Program output: 42                 
Correct output: 28                  | Program output: 83                 
Correct output: 9                   | Program output: 80                 
Correct output: 33                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 29                  | Program output: 82                 
Correct output: -84                 | Program output: -84                
Correct output: -14                 | Program output: 43                 
Correct output: -88                 | Program output: 12                 
Correct output: -82                 | Program output: -82                
Correct output: -48                 | Program output: -48                
Correct output: 14                  | Program output: 29                 
Correct output: -94                 | Program output:                    
Correct output: -69                 | Program output: -21                
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: -2                 
Correct output: -72                 | Program output: 54                 
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -15                
Correct output: -5                  | Program output: 78                 
Correct output: -34                 | Program output: 29                 
Correct output: -23                 | Program output: 82                 
Correct output: -54                 | Program output: 37                 
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -55                
Correct output: -57                 | Program output: -57                
Correct output: -90                 | Program output: -7                 
Correct output: -97                 | Program output: 31                 
Correct output: -52                 | Program output: 85                 
Correct output: -72                 | Program output: 84                 
Correct output: -86                 | Program output: 34                 
Correct output: -42                 | Program output: -42                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: 48                 
Correct output: -76                 | Program output: 42                 
Correct output: 4                   | Program output: 54                 
Correct output: -31                 | Program output: -1                 
Correct output: -41                 | Program output: 54                 
Correct output: -5                  | Program output: 7                  
Correct output: -44                 | Program output: 32                 
Correct output: -66                 | Program output: -6                 
Correct output: -61                 | Program output: 29                 
Correct output: -18                 | Program output:                    
Correct output: -81                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 43                 
Correct output: -79                 | Program output: -47                
Correct output: -97                 | Program output: -15                
Correct output: -50                 | Program output: -8                 
Correct output: -89                 | Program output: -4                 
Correct output: -30                 | Program output: 28                 
Correct output: -55                 | Program output: 55                 
Correct output: -68                 | Program output: 26                 
Correct output: -77                 | Program output: -77                
Correct output: -30                 | Program output:                    
Correct output: -68                 | Program output: -41                
Correct output: -45                 | Program output: -8                 
Correct output: -89                 | Program output: -46                
Correct output: -24                 | Program output: -24                
Correct output: -82                 | Program output: 85                 
Correct output: -98                 | Program output: 53                 
Correct output: -62                 | Program output: -62                
Correct output: -69                 | Program output: 98                 
Correct output: -67                 | Program output: 40                 
Correct output: -65                 | Program output: -24                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction 63} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 1, :instruction -86} {:close 0, :instruction exec_while})
Lexicase best program: (integer_add boolean_xor integer_shove integer_mult integer_mult integer_add in2 boolean_swap boolean_eq boolean_flush print_integer boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth exec_dup_times (in1 print_integer exec_do*times (exec_empty boolean_frominteger exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) integer_div integer_dup_items exec_flush boolean_and exec_noop) exec_y () in1 integer_div exec_swap (exec_flush boolean_and) (in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove) integer_fromboolean exec_yankdup boolean_not 63 exec_s_when_autoconstructing (exec_do*times (exec_rot (print_boolean) (boolean_rot integer_max boolean_rot exec_dup () exec_s_when_autoconstructing (exec_do*range (exec_flush) integer_stackdepth integer_dup_items boolean_dup integer_fromboolean integer_dup_items integer_max in2 boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup exec_swap (boolean_dup_times exec_while (print_exec (in3 integer_lt boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup exec_swap (boolean_dup_times exec_while (print_exec (in3 integer_lt -86) exec_while ())) ()))))) ()))) () ()) ())) () ()))
Lexicase best errors: [0 0 0 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 141
Percent parens: 0.291
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction 63} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 1, :instruction -86} {:close 0, :instruction exec_while})
Zero cases best program: (integer_add boolean_xor integer_shove integer_mult integer_mult integer_add in2 boolean_swap boolean_eq boolean_flush print_integer boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth exec_dup_times (in1 print_integer exec_do*times (exec_empty boolean_frominteger exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) integer_div integer_dup_items exec_flush boolean_and exec_noop) exec_y () in1 integer_div exec_swap (exec_flush boolean_and) (in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove) integer_fromboolean exec_yankdup boolean_not 63 exec_s_when_autoconstructing (exec_do*times (exec_rot (print_boolean) (boolean_rot integer_max boolean_rot exec_dup () exec_s_when_autoconstructing (exec_do*range (exec_flush) integer_stackdepth integer_dup_items boolean_dup integer_fromboolean integer_dup_items integer_max in2 boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup exec_swap (boolean_dup_times exec_while (print_exec (in3 integer_lt boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup exec_swap (boolean_dup_times exec_while (print_exec (in3 integer_lt -86) exec_while ())) ()))))) ()))) () ()) ())) () ()))
Zero cases best errors: [0 0 0 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 141
Percent parens: 0.291
--- Lexicase Population Statistics ---
Count of elite individuals by case: (301 300 29 300 33 787 300 29 309 338)
Population mean number of elite cases: 2.73
Count of perfect (error zero) individuals by case: (301 300 29 300 33 787 300 29 309 338)
Population mean number of perfect (error zero) cases: 2.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 2, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Best program: (integer_add integer_yank integer_shove integer_mult integer_add in2 boolean_swap boolean_yankdup boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_dup_times) (boolean_yank integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not exec_shove (print_integer) integer_flush) boolean_not integer_dup_times) boolean_yank exec_do*times (exec_empty boolean_frominteger exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) integer_div exec_swap (exec_flush boolean_and exec_noop) (exec_y () in1 boolean_eq boolean_stackdepth integer_max) exec_dup_times () exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove)) integer_fromboolean exec_yankdup exec_do*range (exec_flush) integer_stackdepth integer_dup_items boolean_dup integer_fromboolean integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () exec_do*count () print_exec (exec_yankdup exec_swap (boolean_dup_times exec_while (print_exec (in3 integer_lt) -86 exec_while ())) ())) ()) ())
Errors: [0 0 0 0 0 1 0 0 1 1]
Total: 3
Mean: 0.3
Genome size: 84
Size: 116
Percent parens: 0.276
--- Population Statistics ---
Average total errors in population: 7.274
Median total errors in population: 8
Error averages by case: (0.699 0.7 0.971 0.7 0.967 0.213 0.7 0.971 0.691 0.662)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 88.082
Average program size in population (points): 122.339
Average percent parens in population: 0.278
Minimum age in population: 27.521728515625
Maximum age in population: 31.28800582885742
Average age in population: 29.73615507316589
Median age in population: 29.73625946044922
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 17
Genome diversity (% unique genomes):	 0.817
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.815
Total error diversity:				 0.007
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.108
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 9066448
--- Timings ---
Current time: 1559582827322 milliseconds
Total Time:          57.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.4 seconds, 67.2%
Fitness Testing:     10.2 seconds, 17.9%
Report:               8.4 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 528
Test mean error for best: 0.52800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 85                  | Program output: 95                 
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 32                 
Correct output: -73                 | Program output: 48                 
Correct output: -44                 | Program output: -44                
Correct output: -78                 | Program output: -78                
Correct output: 76                  | Program output: 80                 
Correct output: 51                  | Program output: 99                 
Correct output: -42                 | Program output: -16                
Correct output: -89                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: 47                  | Program output: 47                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output: 87                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output:                    
Correct output: 21                  | Program output: 36                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 70                 
Correct output: 7                   | Program output: 57                 
Correct output: 42                  | Program output: 42                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 64                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 92                 
Correct output: 19                  | Program output: 56                 
Correct output: 6                   | Program output: 23                 
Correct output: 28                  | Program output: 28                 
Correct output: 9                   | Program output: 9                  
Correct output: 33                  | Program output: 55                 
Correct output: 23                  | Program output: 56                 
Correct output: 29                  | Program output: 59                 
Correct output: -84                 | Program output: -84                
Correct output: -14                 | Program output: 4                  
Correct output: -88                 | Program output:                    
Correct output: -82                 | Program output: -82                
Correct output: -48                 | Program output: -48                
Correct output: 14                  | Program output: 99                 
Correct output: -94                 | Program output: 10                 
Correct output: -69                 | Program output: -21                
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: -2                 
Correct output: -72                 | Program output: -31                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -15                
Correct output: -5                  | Program output: 14                 
Correct output: -34                 | Program output: -34                
Correct output: -23                 | Program output: 61                 
Correct output: -54                 | Program output: -28                
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -55                
Correct output: -57                 | Program output: -57                
Correct output: -90                 | Program output: -7                 
Correct output: -97                 | Program output: 5                  
Correct output: -52                 | Program output: 83                 
Correct output: -72                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: -42                 | Program output: -42                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -32                
Correct output: -76                 | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: -31                 | Program output: -1                 
Correct output: -41                 | Program output: 24                 
Correct output: -5                  | Program output: 7                  
Correct output: -44                 | Program output: 90                 
Correct output: -66                 | Program output: -6                 
Correct output: -61                 | Program output: 53                 
Correct output: -18                 | Program output: 6                  
Correct output: -81                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output:                    
Correct output: -97                 | Program output: -15                
Correct output: -50                 | Program output: -8                 
Correct output: -89                 | Program output: -4                 
Correct output: -30                 | Program output: 97                 
Correct output: -55                 | Program output: 14                 
Correct output: -68                 | Program output: -68                
Correct output: -77                 | Program output: -77                
Correct output: -30                 | Program output: 11                 
Correct output: -68                 | Program output: -41                
Correct output: -45                 | Program output: -8                 
Correct output: -89                 | Program output: -46                
Correct output: -24                 | Program output: -24                
Correct output: -82                 | Program output: 56                 
Correct output: -98                 | Program output: 93                 
Correct output: -62                 | Program output: -62                
Correct output: -69                 | Program output: -69                
Correct output: -67                 | Program output: 99                 
Correct output: -65                 | Program output: -24                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 2, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (integer_add integer_yank integer_shove integer_mult integer_add in2 boolean_swap boolean_eq boolean_flush integer_dup exec_dup_items integer_dup_times boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth exec_dup_times (in1 print_integer exec_do*times (integer_pop boolean_frominteger exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) integer_div exec_swap (exec_flush boolean_and exec_noop) (exec_y () in1 boolean_eq boolean_stackdepth integer_max) exec_dup_times () exec_swap (exec_k_when_autoconstructing (integer_stackdepth) (in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove)) integer_fromboolean exec_yankdup exec_do*range (exec_flush) integer_stackdepth integer_dup_items boolean_dup integer_fromboolean integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () exec_do*count () print_exec (exec_yankdup exec_swap (boolean_dup_times exec_while (print_exec (in3 integer_lt) -86 exec_y_when_autoconstructing ())) ())) ()) ()))
Lexicase best errors: [0 0 0 0 0 1 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 116
Percent parens: 0.259
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 2, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (integer_add integer_yank integer_shove integer_mult integer_add in2 boolean_swap boolean_eq boolean_flush integer_dup exec_dup_items integer_dup_times boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth exec_dup_times (in1 print_integer exec_do*times (integer_pop boolean_frominteger exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) integer_div exec_swap (exec_flush boolean_and exec_noop) (exec_y () in1 boolean_eq boolean_stackdepth integer_max) exec_dup_times () exec_swap (exec_k_when_autoconstructing (integer_stackdepth) (in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove)) integer_fromboolean exec_yankdup exec_do*range (exec_flush) integer_stackdepth integer_dup_items boolean_dup integer_fromboolean integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () exec_do*count () print_exec (exec_yankdup exec_swap (boolean_dup_times exec_while (print_exec (in3 integer_lt) -86 exec_y_when_autoconstructing ())) ())) ()) ()))
Zero cases best errors: [0 0 0 0 0 1 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 116
Percent parens: 0.259
--- Lexicase Population Statistics ---
Count of elite individuals by case: (260 809 254 210 783 116 309 214 116 84)
Population mean number of elite cases: 3.15
Count of perfect (error zero) individuals by case: (260 809 254 210 783 116 309 214 116 84)
Population mean number of perfect (error zero) cases: 3.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 2, :instruction boolean_swap} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 2, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (integer_add integer_yank integer_shove integer_mult integer_add in2 boolean_swap boolean_eq boolean_flush integer_dup exec_dup_items integer_dup_times boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth) exec_dup_times (in1 print_integer exec_do*times (integer_pop boolean_frominteger exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) integer_div exec_swap (exec_flush boolean_and exec_noop) () exec_y (in1 boolean_eq boolean_stackdepth integer_max) exec_dup_times () exec_swap (exec_k_when_autoconstructing (integer_stackdepth) (in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove)) integer_fromboolean exec_yankdup exec_do*range (exec_flush) integer_stackdepth integer_dup_items boolean_dup integer_fromboolean integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () exec_do*count () print_exec (exec_yankdup exec_swap (boolean_dup_times exec_while (print_exec (in3 integer_lt) -86 exec_y_when_autoconstructing ())) ())) ()) ()))
Errors: [0 0 0 0 0 1 1 0 1 1]
Total: 4
Mean: 0.4
Genome size: 86
Size: 116
Percent parens: 0.259
--- Population Statistics ---
Average total errors in population: 6.845
Median total errors in population: 7
Error averages by case: (0.74 0.191 0.746 0.79 0.217 0.884 0.691 0.786 0.884 0.916)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 86.282
Average program size in population (points): 117.584
Average percent parens in population: 0.265
Minimum age in population: 28.521728515625
Maximum age in population: 33.0632266998291
Average age in population: 31.38834349632263
Median age in population: 31.49339866638184
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 86
Genome diversity (% unique genomes):	 0.797
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.795
Total error diversity:				 0.007
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.121
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 9469395
--- Timings ---
Current time: 1559582830161 milliseconds
Total Time:          60.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        40.2 seconds, 66.8%
Fitness Testing:     10.7 seconds, 17.8%
Report:               9.1 seconds, 15.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 541
Test mean error for best: 0.54100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 85                  | Program output: 95                 
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 32                 
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -1                 
Correct output: -78                 | Program output: -78                
Correct output: 76                  | Program output: 80                 
Correct output: 51                  | Program output: 99                 
Correct output: -42                 | Program output: -16                
Correct output: -89                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: 47                  | Program output: 47                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output: 87                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 21                  | Program output: 36                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 70                 
Correct output: 7                   | Program output: 57                 
Correct output: 42                  | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 64                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 92                 
Correct output: 19                  | Program output: 56                 
Correct output: 6                   | Program output: 23                 
Correct output: 28                  | Program output: 28                 
Correct output: 9                   | Program output: 9                  
Correct output: 33                  | Program output: 55                 
Correct output: 23                  | Program output: 56                 
Correct output: 29                  | Program output: 59                 
Correct output: -84                 | Program output: 65                 
Correct output: -14                 | Program output: 4                  
Correct output: -88                 | Program output: -88                
Correct output: -82                 | Program output: -12                
Correct output: -48                 | Program output: 1                  
Correct output: 14                  | Program output: 99                 
Correct output: -94                 | Program output: -71                
Correct output: -69                 | Program output: -29                
Correct output: -90                 | Program output: 59                 
Correct output: -73                 | Program output: -73                
Correct output: -72                 | Program output: -43                
Correct output: -65                 | Program output: 55                 
Correct output: -96                 | Program output: -96                
Correct output: -5                  | Program output: -5                 
Correct output: -34                 | Program output: -34                
Correct output: -23                 | Program output: 61                 
Correct output: -54                 | Program output: -54                
Correct output: -67                 | Program output: 12                 
Correct output: -96                 | Program output: 66                 
Correct output: -57                 | Program output: -28                
Correct output: -90                 | Program output: 24                 
Correct output: -97                 | Program output: -97                
Correct output: -52                 | Program output: -52                
Correct output: -72                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -42                 | Program output: 82                 
Correct output: -86                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: -55                
Correct output: 4                   | Program output: 4                  
Correct output: -31                 | Program output: -21                
Correct output: -41                 | Program output: -41                
Correct output: -5                  | Program output: -5                 
Correct output: -44                 | Program output: 90                 
Correct output: -66                 | Program output: -51                
Correct output: -61                 | Program output: -61                
Correct output: -18                 | Program output: 49                 
Correct output: -81                 | Program output: -81                
Correct output: -21                 | Program output: 47                 
Correct output: -98                 | Program output: 2                  
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: -79                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: -30                
Correct output: -89                 | Program output: 2                  
Correct output: -30                 | Program output: 97                 
Correct output: -55                 | Program output: 14                 
Correct output: -68                 | Program output: -6                 
Correct output: -77                 | Program output: -4                 
Correct output: -30                 | Program output: -23                
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -15                
Correct output: -89                 | Program output: -89                
Correct output: -24                 | Program output: 43                 
Correct output: -82                 | Program output: -82                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: 35                 
Correct output: -69                 | Program output: -69                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 2, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_xor boolean_pop in3 exec_when (boolean_dup_times integer_gte integer_dup exec_yank exec_s_when_autoconstructing (exec_k () (integer_dup_times boolean_flush print_integer) integer_dup_times boolean_flush integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) print_boolean integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth) (exec_dup_times (in1 print_integer exec_do*times (exec_empty boolean_frominteger exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) integer_div exec_swap (exec_flush boolean_and exec_noop) (exec_y () in1 boolean_eq boolean_stackdepth integer_max) exec_dup_times () exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove)) integer_fromboolean exec_yankdup exec_do*range (exec_flush) integer_stackdepth integer_dup_items boolean_dup boolean_rot integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () exec_do*count () print_exec (exec_yankdup exec_swap (boolean_dup_times exec_while (integer_div in3 integer_lt) -86 exec_while ()) ())) ()) ()))))
Lexicase best errors: [1 0 0 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 123
Percent parens: 0.285
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 2, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_xor boolean_pop in3 exec_when (boolean_dup_times integer_gte integer_dup exec_yank exec_s_when_autoconstructing (exec_k () (integer_dup_times boolean_flush print_integer) integer_dup_times boolean_flush integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) print_boolean integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth) (exec_dup_times (in1 print_integer exec_do*times (exec_empty boolean_frominteger exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) integer_div exec_swap (exec_flush boolean_and exec_noop) (exec_y () in1 boolean_eq boolean_stackdepth integer_max) exec_dup_times () exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove)) integer_fromboolean exec_yankdup exec_do*range (exec_flush) integer_stackdepth integer_dup_items boolean_dup boolean_rot integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () exec_do*count () print_exec (exec_yankdup exec_swap (boolean_dup_times exec_while (integer_div in3 integer_lt) -86 exec_while ()) ())) ()) ()))))
Zero cases best errors: [1 0 0 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 123
Percent parens: 0.285
--- Lexicase Population Statistics ---
Count of elite individuals by case: (271 898 898 410 336 507 478 487 184 526)
Population mean number of elite cases: 4.99
Count of perfect (error zero) individuals by case: (271 898 898 410 336 507 478 487 184 526)
Population mean number of perfect (error zero) cases: 4.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 2, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Best program: (boolean_xor boolean_pop in3 exec_when (boolean_dup_times integer_gte integer_dup exec_yank exec_s_when_autoconstructing (exec_k () (integer_dup_times boolean_flush print_integer) integer_dup_times boolean_flush integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) print_boolean integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth) (exec_dup_times (in1 print_integer exec_do*times (exec_empty boolean_frominteger exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) integer_div exec_swap (exec_flush boolean_and exec_noop) (exec_y () in1 boolean_eq boolean_stackdepth integer_max) exec_dup_times () exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove)) integer_fromboolean exec_yankdup exec_do*range (exec_flush) integer_stackdepth integer_dup_items boolean_dup integer_fromboolean integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () exec_do*count () print_exec (exec_yankdup exec_swap (boolean_dup_times exec_while (integer_div in3 integer_lt) -86 exec_while ()) ())) ()) ()))))
Errors: [1 0 0 0 1 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 88
Size: 123
Percent parens: 0.285
--- Population Statistics ---
Average total errors in population: 5.005
Median total errors in population: 5
Error averages by case: (0.729 0.102 0.102 0.59 0.664 0.493 0.522 0.513 0.816 0.474)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 89.586
Average program size in population (points): 123.845
Average percent parens in population: 0.276
Minimum age in population: 30.84669494628906
Maximum age in population: 34.5448431968689
Average age in population: 32.51262036371231
Median age in population: 32.61574745178223
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 21
Genome diversity (% unique genomes):	 0.846
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.846
Total error diversity:				 0.008
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.126
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 9839083
--- Timings ---
Current time: 1559582832979 milliseconds
Total Time:          62.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        42.0 seconds, 66.8%
Fitness Testing:     11.1 seconds, 17.6%
Report:               9.7 seconds, 15.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 545
Test mean error for best: 0.54500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output:                    
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 85                  | Program output: 85                 
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 87                 
Correct output: -73                 | Program output: 48                 
Correct output: -44                 | Program output: -44                
Correct output: -78                 | Program output: -78                
Correct output: 76                  | Program output: 76                 
Correct output: 51                  | Program output: 99                 
Correct output: -42                 | Program output: -16                
Correct output: -89                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: 47                  | Program output: 47                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output:                    
Correct output: 2                   | Program output:                    
Correct output: 21                  | Program output: 21                 
Correct output: 3                   | Program output: 59                 
Correct output: 13                  | Program output: 43                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output:                    
Correct output: 42                  | Program output: 67                 
Correct output: 2                   | Program output: 23                 
Correct output: 23                  | Program output: 23                 
Correct output: 7                   | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 19                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 36                 
Correct output: 9                   | Program output: 84                 
Correct output: 33                  | Program output: 60                 
Correct output: 23                  | Program output: 23                 
Correct output: 29                  | Program output: 29                 
Correct output: -84                 | Program output: -84                
Correct output: -14                 | Program output: -14                
Correct output: -88                 | Program output:                    
Correct output: -82                 | Program output: -82                
Correct output: -48                 | Program output: -48                
Correct output: 14                  | Program output: 92                 
Correct output: -94                 | Program output: 10                 
Correct output: -69                 | Program output: -21                
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: -2                 
Correct output: -72                 | Program output: -72                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -15                
Correct output: -5                  | Program output: 18                 
Correct output: -34                 | Program output: 50                 
Correct output: -23                 | Program output: -23                
Correct output: -54                 | Program output: 45                 
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -55                
Correct output: -57                 | Program output: -57                
Correct output: -90                 | Program output: -7                 
Correct output: -97                 | Program output: -9                 
Correct output: -52                 | Program output: 12                 
Correct output: -72                 | Program output: -28                
Correct output: -86                 | Program output: 54                 
Correct output: -42                 | Program output: -42                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: 38                 
Correct output: -76                 | Program output: -76                
Correct output: 4                   | Program output: 8                  
Correct output: -31                 | Program output: -1                 
Correct output: -41                 | Program output: 49                 
Correct output: -5                  | Program output:                    
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -6                 
Correct output: -61                 | Program output: 3                  
Correct output: -18                 | Program output: 6                  
Correct output: -81                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 54                 
Correct output: -79                 | Program output: 14                 
Correct output: -97                 | Program output: -15                
Correct output: -50                 | Program output: -8                 
Correct output: -89                 | Program output: -4                 
Correct output: -30                 | Program output: -30                
Correct output: -55                 | Program output: -55                
Correct output: -68                 | Program output: 22                 
Correct output: -77                 | Program output: -77                
Correct output: -30                 | Program output: 011                
Correct output: -68                 | Program output: -41                
Correct output: -45                 | Program output: -8                 
Correct output: -89                 | Program output: -46                
Correct output: -24                 | Program output: -24                
Correct output: -82                 | Program output: -82                
Correct output: -98                 | Program output: 59                 
Correct output: -62                 | Program output: -62                
Correct output: -69                 | Program output: 90                 
Correct output: -67                 | Program output: 33                 
Correct output: -65                 | Program output: -24                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction 63} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_while})
Lexicase best program: (integer_add integer_yank integer_shove integer_mult integer_add in2 boolean_swap boolean_eq boolean_flush integer_dup exec_yank print_integer integer_dup_times boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not print_integer) integer_dup_times boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (boolean_not) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth boolean_eq boolean_stackdepth integer_max integer_div exec_swap (exec_flush boolean_and) (in4 print_integer exec_yank exec_do*range () exec_k_when_autoconstructing () (boolean_shove) integer_fromboolean exec_yankdup boolean_not 63 exec_s_when_autoconstructing (integer_yank exec_rot (print_boolean) (boolean_rot integer_max boolean_rot integer_mod) (exec_s_when_autoconstructing (exec_do*range (exec_flush) integer_stackdepth integer_dup_items boolean_dup exec_while (integer_dup_items integer_max boolean_rot integer_empty exec_stackdepth exec_if (in2 boolean_frominteger boolean_rot integer_empty integer_gt exec_if (print_exec (boolean_dup_times exec_while (print_exec (exec_when (integer_lt boolean_xor exec_while ()))))) ()) ())) () ())) () ()))
Lexicase best errors: [1 0 0 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 121
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction 63} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_while})
Zero cases best program: (integer_add integer_yank integer_shove integer_mult integer_add in2 boolean_swap boolean_eq boolean_flush integer_dup exec_yank print_integer integer_dup_times boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not print_integer) integer_dup_times boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (boolean_not) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth boolean_eq boolean_stackdepth integer_max integer_div exec_swap (exec_flush boolean_and) (in4 print_integer exec_yank exec_do*range () exec_k_when_autoconstructing () (boolean_shove) integer_fromboolean exec_yankdup boolean_not 63 exec_s_when_autoconstructing (integer_yank exec_rot (print_boolean) (boolean_rot integer_max boolean_rot integer_mod) (exec_s_when_autoconstructing (exec_do*range (exec_flush) integer_stackdepth integer_dup_items boolean_dup exec_while (integer_dup_items integer_max boolean_rot integer_empty exec_stackdepth exec_if (in2 boolean_frominteger boolean_rot integer_empty integer_gt exec_if (print_exec (boolean_dup_times exec_while (print_exec (exec_when (integer_lt boolean_xor exec_while ()))))) ()) ())) () ())) () ()))
Zero cases best errors: [1 0 0 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 121
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (77 554 306 306 561 245 316 338 348 37)
Population mean number of elite cases: 3.09
Count of perfect (error zero) individuals by case: (77 554 306 306 561 245 316 338 348 37)
Population mean number of perfect (error zero) cases: 3.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_y})
Best program: (integer_add integer_yank integer_shove integer_mult integer_add in2 boolean_swap boolean_eq boolean_flush integer_dup exec_yank print_integer integer_dup_times boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_yankdup exec_y () in1 boolean_eq boolean_stackdepth integer_max integer_div exec_swap (exec_flush boolean_and exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) (exec_dup_times () exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove) integer_fromboolean exec_yankdup exec_do*range (exec_flush) integer_stackdepth integer_dup_items boolean_dup integer_fromboolean integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup exec_swap (boolean_dup_times exec_while (print_exec (in3 integer_lt) -86 exec_y ())) ()))) ())) ()))
Errors: [1 0 0 0 0 1 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 80
Size: 108
Percent parens: 0.259
--- Population Statistics ---
Average total errors in population: 6.912
Median total errors in population: 6
Error averages by case: (0.923 0.446 0.694 0.694 0.439 0.755 0.684 0.662 0.652 0.963)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 88.619
Average program size in population (points): 121.391
Average percent parens in population: 0.269
Minimum age in population: 31.86813354492188
Maximum age in population: 35.92971849441528
Average age in population: 33.71895804214478
Median age in population: 33.78239333629608
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 30
Genome diversity (% unique genomes):	 0.842
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.841
Total error diversity:				 0.006
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.133
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 10211892
--- Timings ---
Current time: 1559582835569 milliseconds
Total Time:          65.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.8 seconds, 66.6%
Fitness Testing:     11.5 seconds, 17.5%
Report:              10.3 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 558
Test mean error for best: 0.55800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 85                  | Program output: 85                 
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 87                 
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -1                 
Correct output: -78                 | Program output: -78                
Correct output: 76                  | Program output: 76                 
Correct output: 51                  | Program output: 99                 
Correct output: -42                 | Program output: -16                
Correct output: -89                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: 47                  | Program output: 47                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output: 98                 
Correct output: 15                  | Program output: 86                 
Correct output: 2                   | Program output: 80                 
Correct output: 21                  | Program output: 42                 
Correct output: 3                   | Program output: 59                 
Correct output: 13                  | Program output: 43                 
Correct output: 16                  | Program output: 93                 
Correct output: 7                   | Program output: 7                  
Correct output: 42                  | Program output: 67                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 7                   | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 19                  | Program output:                    
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 36                 
Correct output: 9                   | Program output: 84                 
Correct output: 33                  | Program output: 60                 
Correct output: 23                  | Program output: 76                 
Correct output: 29                  | Program output: 29                 
Correct output: -84                 | Program output: 47                 
Correct output: -14                 | Program output: -14                
Correct output: -88                 | Program output: -88                
Correct output: -82                 | Program output: -12                
Correct output: -48                 | Program output: 1                  
Correct output: 14                  | Program output: 14                 
Correct output: -94                 | Program output: -94                
Correct output: -69                 | Program output: -29                
Correct output: -90                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -72                 | Program output: -43                
Correct output: -65                 | Program output: 11                 
Correct output: -96                 | Program output: -96                
Correct output: -5                  | Program output: -5                 
Correct output: -34                 | Program output: 50                 
Correct output: -23                 | Program output: -23                
Correct output: -54                 | Program output: -54                
Correct output: -67                 | Program output: -6                 
Correct output: -96                 | Program output: -96                
Correct output: -57                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -97                
Correct output: -52                 | Program output: -52                
Correct output: -72                 | Program output: -37                
Correct output: -86                 | Program output: 54                 
Correct output: -42                 | Program output: 41                 
Correct output: -86                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: -55                
Correct output: 4                   | Program output: 11                 
Correct output: -31                 | Program output: -21                
Correct output: -41                 | Program output: -41                
Correct output: -5                  | Program output: 75                 
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -66                
Correct output: -61                 | Program output: -61                
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -64                
Correct output: -21                 | Program output: -7                 
Correct output: -98                 | Program output: 64                 
Correct output: -100                | Program output: 54                 
Correct output: -79                 | Program output: -79                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: -30                
Correct output: -89                 | Program output: 2                  
Correct output: -30                 | Program output: -30                
Correct output: -55                 | Program output: -55                
Correct output: -68                 | Program output: -6                 
Correct output: -77                 | Program output: -4                 
Correct output: -30                 | Program output: -30                
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -15                
Correct output: -89                 | Program output:                    
Correct output: -24                 | Program output: 72                 
Correct output: -82                 | Program output: -82                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output:                    
Correct output: -69                 | Program output: -69                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 1, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 2, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_xor boolean_pop in3 exec_when (boolean_dup_times integer_gte integer_dup exec_yank exec_s_when_autoconstructing (exec_k () (integer_dup_times boolean_flush print_integer) integer_dup_times boolean_flush integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth) (integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth integer_swap) in4 print_integer) integer_dup in1 boolean_eq boolean_stackdepth integer_max integer_div boolean_empty exec_flush boolean_and exec_noop exec_y () exec_y () in1 boolean_eq boolean_stackdepth integer_max exec_dup_times () exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove)) integer_fromboolean exec_yankdup exec_do*range (exec_flush) integer_stackdepth exec_stackdepth boolean_dup integer_fromboolean integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup exec_swap (boolean_dup_times) (exec_while (integer_inc in3 integer_lt) -86 exec_while ())))) ()) ()) ())
Lexicase best errors: [0 0 0 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 137
Percent parens: 0.263
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 1, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 2, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_xor boolean_pop in3 exec_when (boolean_dup_times integer_gte integer_dup exec_yank exec_s_when_autoconstructing (exec_k () (integer_dup_times boolean_flush print_integer) integer_dup_times boolean_flush integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth) (integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth integer_swap) in4 print_integer) integer_dup in1 boolean_eq boolean_stackdepth integer_max integer_div boolean_empty exec_flush boolean_and exec_noop exec_y () exec_y () in1 boolean_eq boolean_stackdepth integer_max exec_dup_times () exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove)) integer_fromboolean exec_yankdup exec_do*range (exec_flush) integer_stackdepth exec_stackdepth boolean_dup integer_fromboolean integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup exec_swap (boolean_dup_times) (exec_while (integer_inc in3 integer_lt) -86 exec_while ())))) ()) ()) ())
Zero cases best errors: [0 0 0 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 137
Percent parens: 0.263
--- Lexicase Population Statistics ---
Count of elite individuals by case: (276 844 803 125 277 117 277 753 793 290)
Population mean number of elite cases: 4.55
Count of perfect (error zero) individuals by case: (276 844 803 125 277 117 277 753 793 290)
Population mean number of perfect (error zero) cases: 4.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 1, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 0, :instruction 13} {:close 1, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Best program: (boolean_xor boolean_pop in3 exec_when (boolean_dup_times integer_gte integer_dup exec_yank exec_s_when_autoconstructing (exec_k () (integer_dup_times boolean_flush print_integer) integer_dup_times boolean_flush integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth) (integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth integer_swap) in4 print_integer) integer_dup in1 boolean_eq boolean_stackdepth integer_max integer_div exec_swap (exec_flush boolean_and exec_noop boolean_eq 13 integer_max) (integer_div) exec_swap (exec_flush integer_max) (integer_div) exec_swap (exec_flush boolean_and) (in4 print_integer exec_yank exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 exec_yankdup exec_do*range (exec_flush) integer_stackdepth integer_dup_items boolean_dup integer_fromboolean integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 integer_gt exec_if (in2 boolean_frominteger exec_dup () boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup exec_swap (boolean_dup_times) (exec_while (integer_inc in3 integer_lt) -86 exec_while ())))) ()) ())) ()))
Errors: [0 0 0 1 0 1 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 96
Size: 131
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 5.445
Median total errors in population: 5
Error averages by case: (0.724 0.156 0.197 0.875 0.723 0.883 0.723 0.247 0.207 0.71)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 92.47
Average program size in population (points): 125.412
Average percent parens in population: 0.262
Minimum age in population: 33.02554178237915
Maximum age in population: 37.41772079467773
Average age in population: 35.17418299591541
Median age in population: 35.16896867752075
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 44
Genome diversity (% unique genomes):	 0.847
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.845
Total error diversity:				 0.008
Error (vector) diversity:			 0.035
Behavioral diversity:				 0.206
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 10486544
--- Timings ---
Current time: 1559582838114 milliseconds
Total Time:          68.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.6 seconds, 66.8%
Fitness Testing:     11.9 seconds, 17.4%
Report:              10.7 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 683
Test mean error for best: 0.68300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 85                  | Program output: 95                 
Correct output: 36                  | Program output: 81                 
Correct output: 32                  | Program output: 32                 
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -1                 
Correct output: -78                 | Program output: -78                
Correct output: 76                  | Program output: 76                 
Correct output: 51                  | Program output: 99                 
Correct output: -42                 | Program output: -16                
Correct output: -89                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: 47                  | Program output: 47                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output: 46                 
Correct output: 15                  | Program output: 71                 
Correct output: 2                   | Program output: 87                 
Correct output: 21                  | Program output: 51                 
Correct output: 3                   | Program output: 74                 
Correct output: 13                  | Program output: 49                 
Correct output: 16                  | Program output: 36                 
Correct output: 7                   | Program output: 57                 
Correct output: 42                  | Program output: 99                 
Correct output: 2                   | Program output:                    
Correct output: 23                  | Program output: 37                 
Correct output: 7                   | Program output: 25                 
Correct output: 11                  | Program output: 100                
Correct output: 19                  | Program output: 19                 
Correct output: 6                   | Program output: 50                 
Correct output: 28                  | Program output: 67                 
Correct output: 9                   | Program output: 9                  
Correct output: 33                  | Program output: 33                 
Correct output: 23                  | Program output: 30                 
Correct output: 29                  | Program output: 37                 
Correct output: -84                 | Program output: 64                 
Correct output: -14                 | Program output: 42                 
Correct output: -88                 | Program output: 66                 
Correct output: -82                 | Program output: -12                
Correct output: -48                 | Program output: 1                  
Correct output: 14                  | Program output: 14                 
Correct output: -94                 | Program output: 28                 
Correct output: -69                 | Program output: -29                
Correct output: -90                 | Program output: 76                 
Correct output: -73                 | Program output: -73                
Correct output: -72                 | Program output: -43                
Correct output: -65                 | Program output: 11                 
Correct output: -96                 | Program output: -96                
Correct output: -5                  | Program output: -5                 
Correct output: -34                 | Program output: 63                 
Correct output: -23                 | Program output: 83                 
Correct output: -54                 | Program output: -54                
Correct output: -67                 | Program output: 47                 
Correct output: -96                 | Program output: 50                 
Correct output: -57                 | Program output: 45                 
Correct output: -90                 | Program output: 74                 
Correct output: -97                 | Program output: -97                
Correct output: -52                 | Program output: -52                
Correct output: -72                 | Program output: -37                
Correct output: -86                 | Program output: 75                 
Correct output: -42                 | Program output: 51                 
Correct output: -86                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: -55                
Correct output: 4                   | Program output: 11                 
Correct output: -31                 | Program output: -21                
Correct output: -41                 | Program output: -41                
Correct output: -5                  | Program output: 28                 
Correct output: -44                 | Program output: 77                 
Correct output: -66                 | Program output: 72                 
Correct output: -61                 | Program output: -61                
Correct output: -18                 | Program output: 26                 
Correct output: -81                 | Program output: 33                 
Correct output: -21                 | Program output: 45                 
Correct output: -98                 | Program output: 92                 
Correct output: -100                | Program output: 29                 
Correct output: -79                 | Program output: -79                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: -30                
Correct output: -89                 | Program output:                    
Correct output: -30                 | Program output: 80                 
Correct output: -55                 | Program output: 78                 
Correct output: -68                 | Program output: -6                 
Correct output: -77                 | Program output: -4                 
Correct output: -30                 | Program output: 92                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -15                
Correct output: -89                 | Program output:                    
Correct output: -24                 | Program output: 60                 
Correct output: -82                 | Program output: -82                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output:                    
Correct output: -69                 | Program output: 90                 
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 2, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_xor exec_when (in3 exec_when (boolean_dup_times integer_gte integer_dup exec_yank exec_s_when_autoconstructing (integer_shove integer_mult integer_add in2 boolean_swap) () (boolean_eq boolean_flush integer_dup exec_yank print_integer) integer_dup_times boolean_flush integer_dup exec_yank) exec_yank) exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () boolean_yank integer_lte boolean_stackdepth integer_empty exec_dup_times () exec_stackdepth exec_dup_times () in1 print_integer exec_do*times (exec_empty boolean_frominteger exec_noop exec_y ()) in1 boolean_eq boolean_stackdepth integer_max integer_div exec_swap (exec_flush boolean_and exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) (exec_dup_times () exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup exec_swap (exec_y () exec_while (integer_inc in3 integer_lt) -86 exec_while ()) ()))) ()))) ()))
Lexicase best errors: [1 0 1 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 127
Percent parens: 0.276
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 2, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_xor exec_when (in3 exec_when (boolean_dup_times integer_gte integer_dup exec_yank exec_s_when_autoconstructing (integer_shove integer_mult integer_add in2 boolean_swap) () (boolean_eq boolean_flush integer_dup exec_yank print_integer) integer_dup_times boolean_flush integer_dup exec_yank) exec_yank) exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () boolean_yank integer_lte boolean_stackdepth integer_empty exec_dup_times () exec_stackdepth exec_dup_times () in1 print_integer exec_do*times (exec_empty boolean_frominteger exec_noop exec_y ()) in1 boolean_eq boolean_stackdepth integer_max integer_div exec_swap (exec_flush boolean_and exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) (exec_dup_times () exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup exec_swap (exec_y () exec_while (integer_inc in3 integer_lt) -86 exec_while ()) ()))) ()))) ()))
Zero cases best errors: [1 0 1 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 127
Percent parens: 0.276
--- Lexicase Population Statistics ---
Count of elite individuals by case: (339 434 75 144 420 139 446 434 140 157)
Population mean number of elite cases: 2.73
Count of perfect (error zero) individuals by case: (339 434 75 144 420 139 446 434 140 157)
Population mean number of perfect (error zero) cases: 2.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 1, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 2, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 1, :instruction -86} {:close 0, :instruction exec_while})
Best program: (boolean_xor boolean_pop in3 exec_when (boolean_dup_times integer_gte integer_dup exec_yank exec_s_when_autoconstructing (exec_k () (integer_dup_times boolean_flush print_integer integer_dup_times boolean_flush integer_dup exec_yank) exec_s_when_autoconstructing (print_integer) () (integer_flush) boolean_not integer_dup_times) (boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth) (integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth integer_swap) in4 print_integer) integer_dup in1 boolean_eq boolean_stackdepth integer_max integer_div boolean_empty exec_flush boolean_and exec_noop exec_y () exec_y () in1 boolean_eq boolean_stackdepth integer_max exec_dup_times () exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove)) integer_fromboolean exec_yankdup exec_do*range (exec_flush) integer_stackdepth exec_stackdepth boolean_dup integer_fromboolean integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup exec_swap (boolean_dup_times) (exec_while (integer_inc in3 integer_lt) -86) exec_while ()))) ()) ())
Errors: [1 0 0 1 0 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 92
Size: 125
Percent parens: 0.264
--- Population Statistics ---
Average total errors in population: 7.272
Median total errors in population: 6
Error averages by case: (0.661 0.566 0.925 0.856 0.58 0.861 0.554 0.566 0.86 0.843)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 89.442
Average program size in population (points): 121.423
Average percent parens in population: 0.263
Minimum age in population: 34.02639007568359
Maximum age in population: 38.61834466457367
Average age in population: 36.70621206140518
Median age in population: 36.80687892436981
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 30
Genome diversity (% unique genomes):	 0.889
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.886
Total error diversity:				 0.007
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.251
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 10739973
--- Timings ---
Current time: 1559582840568 milliseconds
Total Time:          70.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        47.4 seconds, 67.0%
Fitness Testing:     12.2 seconds, 17.2%
Report:              11.1 seconds, 15.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output:                    
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output:                    
Correct output: 85                  | Program output:                    
Correct output: 36                  | Program output:                    
Correct output: 32                  | Program output:                    
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -44                
Correct output: -78                 | Program output: -78                
Correct output: 76                  | Program output:                    
Correct output: 51                  | Program output:                    
Correct output: -42                 | Program output: -16                
Correct output: -89                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: 47                  | Program output:                    
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output:                    
Correct output: 15                  | Program output:                    
Correct output: 2                   | Program output: 2                  
Correct output: 21                  | Program output:                    
Correct output: 3                   | Program output:                    
Correct output: 13                  | Program output:                    
Correct output: 16                  | Program output: 93                 
Correct output: 7                   | Program output:                    
Correct output: 42                  | Program output:                    
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output:                    
Correct output: 7                   | Program output:                    
Correct output: 11                  | Program output:                    
Correct output: 19                  | Program output: 19                 
Correct output: 6                   | Program output:                    
Correct output: 28                  | Program output:                    
Correct output: 9                   | Program output: 20                 
Correct output: 33                  | Program output:                    
Correct output: 23                  | Program output:                    
Correct output: 29                  | Program output:                    
Correct output: -84                 | Program output: -84                
Correct output: -14                 | Program output:                    
Correct output: -88                 | Program output: -8812              
Correct output: -82                 | Program output: -82                
Correct output: -48                 | Program output: -481               
Correct output: 14                  | Program output: 92                 
Correct output: -94                 | Program output: 10-94              
Correct output: -69                 | Program output: -21                
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: -2                 
Correct output: -72                 | Program output: -43                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -15                
Correct output: -5                  | Program output: -5                 
Correct output: -34                 | Program output:                    
Correct output: -23                 | Program output:                    
Correct output: -54                 | Program output: -54                
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -55                
Correct output: -57                 | Program output: -57                
Correct output: -90                 | Program output: -7                 
Correct output: -97                 | Program output: -9                 
Correct output: -52                 | Program output: -52                
Correct output: -72                 | Program output: -28                
Correct output: -86                 | Program output:                    
Correct output: -42                 | Program output: -42                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: -55                
Correct output: 4                   | Program output: 11                 
Correct output: -31                 | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -5                  | Program output: 75                 
Correct output: -44                 | Program output:                    
Correct output: -66                 | Program output: -6                 
Correct output: -61                 | Program output: -61                
Correct output: -18                 | Program output: 6                  
Correct output: -81                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output:                    
Correct output: -79                 | Program output: 14                 
Correct output: -97                 | Program output: -15                
Correct output: -50                 | Program output: -8                 
Correct output: -89                 | Program output: -4                 
Correct output: -30                 | Program output:                    
Correct output: -55                 | Program output:                    
Correct output: -68                 | Program output: -6                 
Correct output: -77                 | Program output: -77                
Correct output: -30                 | Program output: -30                
Correct output: -68                 | Program output: -41                
Correct output: -45                 | Program output: -8                 
Correct output: -89                 | Program output: 13-46              
Correct output: -24                 | Program output: -24                
Correct output: -82                 | Program output: -82                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: 3                  
Correct output: -69                 | Program output: 4                  
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -24                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 2, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_xor exec_when (in3 exec_when (boolean_dup_times integer_gte integer_dup exec_s_when_autoconstructing (exec_s_when_autoconstructing (integer_shove integer_mult integer_add in2 boolean_swap) () (boolean_eq boolean_flush integer_dup exec_yank print_integer) integer_dup_times boolean_flush integer_dup exec_yank) (exec_yank) (exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () boolean_yank integer_lte boolean_stackdepth integer_empty exec_dup_times () exec_stackdepth) exec_dup_times () in1 print_integer exec_do*times (boolean_rot boolean_frominteger exec_noop exec_y ()) in1 boolean_eq boolean_stackdepth integer_max) integer_div exec_swap (exec_flush boolean_and integer_add exec_y () in1 boolean_eq boolean_stackdepth integer_max) (exec_dup_times () exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () boolean_frominteger exec_dup () integer_eq print_exec (exec_yankdup exec_swap (exec_y () exec_while (integer_inc in3 integer_lt) -86 exec_while ()) ())) ()))) ())))
Lexicase best errors: [0 1 0 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 129
Percent parens: 0.287
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 2, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_xor exec_when (in3 exec_when (boolean_dup_times integer_gte integer_dup exec_s_when_autoconstructing (exec_s_when_autoconstructing (integer_shove integer_mult integer_add in2 boolean_swap) () (boolean_eq boolean_flush integer_dup exec_yank print_integer) integer_dup_times boolean_flush integer_dup exec_yank) (exec_yank) (exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () boolean_yank integer_lte boolean_stackdepth integer_empty exec_dup_times () exec_stackdepth) exec_dup_times () in1 print_integer exec_do*times (boolean_rot boolean_frominteger exec_noop exec_y ()) in1 boolean_eq boolean_stackdepth integer_max) integer_div exec_swap (exec_flush boolean_and integer_add exec_y () in1 boolean_eq boolean_stackdepth integer_max) (exec_dup_times () exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () boolean_frominteger exec_dup () integer_eq print_exec (exec_yankdup exec_swap (exec_y () exec_while (integer_inc in3 integer_lt) -86 exec_while ()) ())) ()))) ())))
Zero cases best errors: [0 1 0 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 129
Percent parens: 0.287
--- Lexicase Population Statistics ---
Count of elite individuals by case: (510 198 446 198 776 339 562 506 320 95)
Population mean number of elite cases: 3.95
Count of perfect (error zero) individuals by case: (510 198 446 198 776 339 562 506 320 95)
Population mean number of perfect (error zero) cases: 3.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 2, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Best program: (boolean_xor exec_when (in3 exec_when (boolean_dup_times exec_s_when_autoconstructing (integer_dup exec_yank exec_s_when_autoconstructing (integer_shove integer_mult integer_add in2 boolean_swap) () (boolean_eq boolean_flush integer_dup exec_yank print_integer) integer_dup_times boolean_flush integer_dup exec_yank) (exec_yank) (exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () boolean_yank integer_lte boolean_stackdepth integer_empty exec_dup_times () exec_stackdepth) exec_dup_times () in1 print_integer exec_do*times (exec_empty boolean_frominteger exec_noop exec_y ()) in1 boolean_eq boolean_stackdepth integer_max) integer_div exec_swap (exec_flush boolean_and integer_mult exec_y () in1 boolean_eq boolean_stackdepth integer_max) (exec_dup_times () exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup exec_swap (exec_y () exec_while (integer_inc in3 integer_lt) -86 exec_while ()) ()))) ()))) ())))
Errors: [0 1 0 1 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 92
Size: 130
Percent parens: 0.292
--- Population Statistics ---
Average total errors in population: 6.05
Median total errors in population: 5
Error averages by case: (0.49 0.802 0.554 0.802 0.224 0.661 0.438 0.494 0.68 0.905)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 88.845
Average program size in population (points): 121.573
Average percent parens in population: 0.269
Minimum age in population: 35.94726181030273
Maximum age in population: 40.18458691239357
Average age in population: 38.03152306580544
Median age in population: 38.18040615320206
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 63
Genome diversity (% unique genomes):	 0.824
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.822
Total error diversity:				 0.008
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.221
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 11045335
--- Timings ---
Current time: 1559582843186 milliseconds
Total Time:          73.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        49.2 seconds, 67.1%
Fitness Testing:     12.5 seconds, 17.1%
Report:              11.4 seconds, 15.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 577
Test mean error for best: 0.57700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 85                  | Program output: 95                 
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 32                 
Correct output: -73                 | Program output: 48                 
Correct output: -44                 | Program output: -44                
Correct output: -78                 | Program output: -78                
Correct output: 76                  | Program output: 76                 
Correct output: 51                  | Program output: 51                 
Correct output: -42                 | Program output: -42                
Correct output: -89                 | Program output: -89                
Correct output: -35                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: 47                  | Program output: 47                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 21                  | Program output: 21                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output:                    
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 24                 
Correct output: 42                  | Program output: 55                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 37                 
Correct output: 7                   | Program output:                    
Correct output: 11                  | Program output: 95                 
Correct output: 19                  | Program output: 35                 
Correct output: 6                   | Program output: 0                  
Correct output: 28                  | Program output: 28                 
Correct output: 9                   | Program output: 9                  
Correct output: 33                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 29                  | Program output: 82                 
Correct output: -84                 | Program output: -84                
Correct output: -14                 | Program output: 4                  
Correct output: -88                 | Program output: -88                
Correct output: -82                 | Program output: -82                
Correct output: -48                 | Program output: 10                 
Correct output: 14                  | Program output: 29                 
Correct output: -94                 | Program output: -71                
Correct output: -69                 | Program output: -21                
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: -2                 
Correct output: -72                 | Program output: -31                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -17                
Correct output: -5                  | Program output:                    
Correct output: -34                 | Program output: -34                
Correct output: -23                 | Program output: 82                 
Correct output: -54                 | Program output: -28                
Correct output: -67                 | Program output: 0                  
Correct output: -96                 | Program output: -55                
Correct output: -57                 | Program output: -28                
Correct output: -90                 | Program output: 24                 
Correct output: -97                 | Program output: 5                  
Correct output: -52                 | Program output: 85                 
Correct output: -72                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: -42                 | Program output: -42                
Correct output: -86                 | Program output: -3                 
Correct output: -90                 | Program output: -32                
Correct output: -76                 | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: -31                 | Program output: -31                
Correct output: -41                 | Program output: 24                 
Correct output: -5                  | Program output: -5                 
Correct output: -44                 | Program output: 32                 
Correct output: -66                 | Program output: -51                
Correct output: -61                 | Program output: 29                 
Correct output: -18                 | Program output: 6                  
Correct output: -81                 | Program output: -81                
Correct output: -21                 | Program output: -21                
Correct output: -98                 | Program output: 2                  
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: 14                 
Correct output: -97                 | Program output: -15                
Correct output: -50                 | Program output: -14                
Correct output: -89                 | Program output: -89                
Correct output: -30                 | Program output: 28                 
Correct output: -55                 | Program output:                    
Correct output: -68                 | Program output: -68                
Correct output: -77                 | Program output: -77                
Correct output: -30                 | Program output: -23                
Correct output: -68                 | Program output: -14                
Correct output: -45                 | Program output: -45                
Correct output: -89                 | Program output: -89                
Correct output: -24                 | Program output: -24                
Correct output: -82                 | Program output: 85                 
Correct output: -98                 | Program output: 53                 
Correct output: -62                 | Program output: -62                
Correct output: -69                 | Program output: -69                
Correct output: -67                 | Program output: 40                 
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction 13} {:close 1, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 1, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Lexicase best program: (integer_add integer_yank in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) exec_s_when_autoconstructing (print_integer) (integer_dup_times boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer integer_flush) (boolean_not print_integer) (integer_flush) boolean_not integer_dup_times) (print_integer) integer_flush boolean_not integer_dup_times boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth exec_flush exec_dup_times () exec_stackdepth exec_dup_times () boolean_shove print_integer exec_do*times (exec_empty boolean_frominteger exec_noop exec_y () in1 boolean_eq 13 integer_max) integer_div exec_swap (exec_flush integer_max integer_div) (exec_swap (exec_flush boolean_and) (in2 print_integer exec_yank exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 exec_flush) integer_stackdepth integer_dup_items boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () exec_do*count () print_exec (exec_yankdup exec_swap (boolean_dup_times exec_while (print_exec (in3) integer_lt) -86 exec_while ()) ())) ()) ())))
Lexicase best errors: [0 1 0 1 1 0 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 114
Percent parens: 0.272
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction 13} {:close 1, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 1, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Zero cases best program: (integer_add integer_yank in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) exec_s_when_autoconstructing (print_integer) (integer_dup_times boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer integer_flush) (boolean_not print_integer) (integer_flush) boolean_not integer_dup_times) (print_integer) integer_flush boolean_not integer_dup_times boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth exec_flush exec_dup_times () exec_stackdepth exec_dup_times () boolean_shove print_integer exec_do*times (exec_empty boolean_frominteger exec_noop exec_y () in1 boolean_eq 13 integer_max) integer_div exec_swap (exec_flush integer_max integer_div) (exec_swap (exec_flush boolean_and) (in2 print_integer exec_yank exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 exec_flush) integer_stackdepth integer_dup_items boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () exec_do*count () print_exec (exec_yankdup exec_swap (boolean_dup_times exec_while (print_exec (in3) integer_lt) -86 exec_while ()) ())) ()) ())))
Zero cases best errors: [0 1 0 1 1 0 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 114
Percent parens: 0.272
--- Lexicase Population Statistics ---
Count of elite individuals by case: (690 18 321 8 2 718 310 323 390 22)
Population mean number of elite cases: 2.80
Count of perfect (error zero) individuals by case: (690 18 321 8 2 718 310 323 390 22)
Population mean number of perfect (error zero) cases: 2.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction 13} {:close 1, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Best program: (integer_add integer_yank in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) exec_s_when_autoconstructing (print_integer) (integer_dup_times) (boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (boolean_not) (integer_flush) (boolean_not print_integer) integer_flush) boolean_not integer_dup_times print_integer integer_flush boolean_not integer_dup_times boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth exec_flush exec_dup_times () exec_stackdepth exec_dup_times () boolean_stackdepth print_integer exec_do*times (exec_empty boolean_frominteger exec_noop exec_y () in1 boolean_eq) 13 integer_max integer_div exec_swap (exec_flush integer_max) (integer_div) exec_swap (exec_flush boolean_and) (in2 print_integer exec_yank exec_swap () (exec_k_when_autoconstructing (boolean_and) (in4 exec_flush) integer_stackdepth integer_dup_items boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () exec_do*count () print_exec (exec_yankdup exec_swap (boolean_dup_times exec_while (print_exec (in3 integer_lt) -86 exec_while ())) ())) ())))
Errors: [0 1 0 1 1 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 83
Size: 114
Percent parens: 0.272
--- Population Statistics ---
Average total errors in population: 7.198
Median total errors in population: 7
Error averages by case: (0.31 0.982 0.679 0.992 0.998 0.282 0.69 0.677 0.61 0.978)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 89.275
Average program size in population (points): 123.917
Average percent parens in population: 0.279
Minimum age in population: 37.88483721017838
Maximum age in population: 41.7604788839817
Average age in population: 39.95212527810037
Median age in population: 40.13035467267036
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 69
Genome diversity (% unique genomes):	 0.761
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 69
Syntactic diversity (% unique Push programs):	 0.76
Total error diversity:				 0.006
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.204
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 11415133
--- Timings ---
Current time: 1559582845735 milliseconds
Total Time:          75.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        50.9 seconds, 67.1%
Fitness Testing:     12.9 seconds, 17.0%
Report:              12.0 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 561
Test mean error for best: 0.56100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 85                  | Program output: 85                 
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 87                 
Correct output: -73                 | Program output: 48                 
Correct output: -44                 | Program output: -44                
Correct output: -78                 | Program output: -78                
Correct output: 76                  | Program output: 76                 
Correct output: 51                  | Program output: 99                 
Correct output: -42                 | Program output: -42                
Correct output: -89                 | Program output: -89                
Correct output: -35                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: 47                  | Program output: 47                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output: 98                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 21                  | Program output: 42                 
Correct output: 3                   | Program output:                    
Correct output: 13                  | Program output:                    
Correct output: 16                  | Program output: 93                 
Correct output: 7                   | Program output: 7                  
Correct output: 42                  | Program output: 67                 
Correct output: 2                   | Program output:                    
Correct output: 23                  | Program output: 23                 
Correct output: 7                   | Program output:                    
Correct output: 11                  | Program output: 11                 
Correct output: 19                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 33                  | Program output: 60                 
Correct output: 23                  | Program output: 76                 
Correct output: 29                  | Program output: 29                 
Correct output: -84                 | Program output: 47                 
Correct output: -14                 | Program output: 4                  
Correct output: -88                 | Program output: -88                
Correct output: -82                 | Program output: -27                
Correct output: -48                 | Program output: 10                 
Correct output: 14                  | Program output: 92                 
Correct output: -94                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -90                 | Program output: -47                
Correct output: -73                 | Program output: 42                 
Correct output: -72                 | Program output: -31                
Correct output: -65                 | Program output: 15                 
Correct output: -96                 | Program output: -17                
Correct output: -5                  | Program output:                    
Correct output: -34                 | Program output: -34                
Correct output: -23                 | Program output: -23                
Correct output: -54                 | Program output: -28                
Correct output: -67                 | Program output: 012                
Correct output: -96                 | Program output: -96                
Correct output: -57                 | Program output: -28                
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: 5                  
Correct output: -52                 | Program output: 12                 
Correct output: -72                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: -42                 | Program output: 41                 
Correct output: -86                 | Program output: -3                 
Correct output: -90                 | Program output: -32                
Correct output: -76                 | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: -31                 | Program output: -31                
Correct output: -41                 | Program output: 49                 
Correct output: -5                  | Program output: -5                 
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -51                
Correct output: -61                 | Program output: 3                  
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -21                 | Program output: -7                 
Correct output: -98                 | Program output: 2                  
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: -47                
Correct output: -97                 | Program output: 69                 
Correct output: -50                 | Program output: -14                
Correct output: -89                 | Program output: -89                
Correct output: -30                 | Program output: -30                
Correct output: -55                 | Program output:                    
Correct output: -68                 | Program output: -68                
Correct output: -77                 | Program output: 99                 
Correct output: -30                 | Program output: -23                
Correct output: -68                 | Program output: -14                
Correct output: -45                 | Program output: -45                
Correct output: -89                 | Program output: -89                
Correct output: -24                 | Program output: 72                 
Correct output: -82                 | Program output: -82                
Correct output: -98                 | Program output: 59                 
Correct output: -62                 | Program output: -4                 
Correct output: -69                 | Program output: -69                
Correct output: -67                 | Program output: 33                 
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 2, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Lexicase best program: (integer_add integer_yank in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) exec_s_when_autoconstructing (print_integer) (integer_dup_times print_integer integer_dup_times boolean_flush integer_dup exec_yank exec_yank) (exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () boolean_yank integer_lte boolean_stackdepth integer_empty exec_dup_times () exec_stackdepth) exec_dup_times () in1 print_integer exec_do*times (exec_empty boolean_frominteger exec_noop exec_y ()) in1 boolean_eq boolean_stackdepth integer_max integer_div exec_swap (exec_flush boolean_and integer_mult exec_y () in1 boolean_eq boolean_stackdepth integer_max) (exec_dup_times () exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup exec_swap (exec_y () exec_while (integer_inc in3 integer_lt) -86 exec_while ()) ()))) ()))) ()))
Lexicase best errors: [1 0 0 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 119
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 2, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Zero cases best program: (integer_add integer_yank in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) exec_s_when_autoconstructing (print_integer) (integer_dup_times print_integer integer_dup_times boolean_flush integer_dup exec_yank exec_yank) (exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () boolean_yank integer_lte boolean_stackdepth integer_empty exec_dup_times () exec_stackdepth) exec_dup_times () in1 print_integer exec_do*times (exec_empty boolean_frominteger exec_noop exec_y ()) in1 boolean_eq boolean_stackdepth integer_max integer_div exec_swap (exec_flush boolean_and integer_mult exec_y () in1 boolean_eq boolean_stackdepth integer_max) (exec_dup_times () exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup exec_swap (exec_y () exec_while (integer_inc in3 integer_lt) -86 exec_while ()) ()))) ()))) ()))
Zero cases best errors: [1 0 0 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 119
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (43 524 526 475 851 38 581 905 258 905)
Population mean number of elite cases: 5.11
Count of perfect (error zero) individuals by case: (43 524 526 475 851 38 581 905 258 905)
Population mean number of perfect (error zero) cases: 5.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 2, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 1, :instruction -86} {:close 0, :instruction exec_while})
Best program: (integer_add integer_yank in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) exec_s_when_autoconstructing (print_integer) (integer_dup_times boolean_flush print_integer integer_dup_times boolean_flush integer_dup exec_yank exec_noop print_integer) (integer_flush) boolean_not boolean_empty boolean_yank integer_flush boolean_not integer_dup_times boolean_yank integer_lte boolean_stackdepth exec_flush exec_dup_times () exec_stackdepth exec_do*times (exec_empty boolean_frominteger exec_dup_times (exec_y ()) in1 boolean_eq boolean_stackdepth integer_max) integer_div exec_swap (exec_flush boolean_and exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) (exec_dup_times () exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 boolean_invert_first_then_and boolean_and) in4 boolean_dup integer_fromboolean integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (boolean_eq boolean_frominteger exec_dup () boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup exec_swap (boolean_dup_times) (exec_while (exec_swap (boolean_dup_times) (exec_while (integer_inc in3 integer_lt) -86) exec_while ()))))) ()) ()))
Errors: [1 0 0 0 0 1 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 86
Size: 116
Percent parens: 0.259
--- Population Statistics ---
Average total errors in population: 4.894
Median total errors in population: 5
Error averages by case: (0.957 0.476 0.474 0.525 0.149 0.962 0.419 0.095 0.742 0.095)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 88.415
Average program size in population (points): 122.543
Average percent parens in population: 0.278
Minimum age in population: 38.88483721017838
Maximum age in population: 43.52187896519899
Average age in population: 41.57672113831341
Median age in population: 41.63208544254303
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 59
Genome diversity (% unique genomes):	 0.795
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.792
Total error diversity:				 0.008
Error (vector) diversity:			 0.041
Behavioral diversity:				 0.199
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 11786523
--- Timings ---
Current time: 1559582848382 milliseconds
Total Time:          78.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        52.7 seconds, 67.2%
Fitness Testing:     13.3 seconds, 17.0%
Report:              12.4 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 554
Test mean error for best: 0.55400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 85                  | Program output: 85                 
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 87                 
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -1                 
Correct output: -78                 | Program output: -78                
Correct output: 76                  | Program output: 76                 
Correct output: 51                  | Program output: 99                 
Correct output: -42                 | Program output: -16                
Correct output: -89                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: 47                  | Program output: 47                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output: 98                 
Correct output: 15                  | Program output: 86                 
Correct output: 2                   | Program output: 80                 
Correct output: 21                  | Program output: 42                 
Correct output: 3                   | Program output: 59                 
Correct output: 13                  | Program output: 43                 
Correct output: 16                  | Program output: 93                 
Correct output: 7                   | Program output: 7                  
Correct output: 42                  | Program output: 67                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 7                   | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 19                  | Program output:                    
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 36                 
Correct output: 9                   | Program output: 20                 
Correct output: 33                  | Program output: 60                 
Correct output: 23                  | Program output: 76                 
Correct output: 29                  | Program output: 29                 
Correct output: -84                 | Program output: 47                 
Correct output: -14                 | Program output: -14                
Correct output: -88                 | Program output: 4                  
Correct output: -82                 | Program output: -12                
Correct output: -48                 | Program output: 1                  
Correct output: 14                  | Program output:                    
Correct output: -94                 | Program output: -94                
Correct output: -69                 | Program output: -29                
Correct output: -90                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -72                 | Program output: -43                
Correct output: -65                 | Program output: 11                 
Correct output: -96                 | Program output: -96                
Correct output: -5                  | Program output: -5                 
Correct output: -34                 | Program output: 50                 
Correct output: -23                 | Program output: -23                
Correct output: -54                 | Program output: -54                
Correct output: -67                 | Program output: -6                 
Correct output: -96                 | Program output: -96                
Correct output: -57                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -97                
Correct output: -52                 | Program output: -52                
Correct output: -72                 | Program output: -37                
Correct output: -86                 | Program output: 54                 
Correct output: -42                 | Program output: 41                 
Correct output: -86                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: -55                
Correct output: 4                   | Program output: 11                 
Correct output: -31                 | Program output: -21                
Correct output: -41                 | Program output: -41                
Correct output: -5                  | Program output: 75                 
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -66                
Correct output: -61                 | Program output: -61                
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -64                
Correct output: -21                 | Program output: -7                 
Correct output: -98                 | Program output: 64                 
Correct output: -100                | Program output: 54                 
Correct output: -79                 | Program output: -79                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: -30                
Correct output: -89                 | Program output: 2                  
Correct output: -30                 | Program output: -30                
Correct output: -55                 | Program output: -55                
Correct output: -68                 | Program output: -6                 
Correct output: -77                 | Program output: -4                 
Correct output: -30                 | Program output: -30                
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -15                
Correct output: -89                 | Program output: 23                 
Correct output: -24                 | Program output: 72                 
Correct output: -82                 | Program output: -82                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output:                    
Correct output: -69                 | Program output: 4                  
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 3, :instruction boolean_swap} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Lexicase best program: (integer_add integer_yank integer_shove integer_mult integer_add in2 boolean_swap boolean_eq boolean_flush integer_dup exec_yank integer_dup_times boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (integer_flush boolean_not integer_dup_times) (boolean_yank) integer_lte boolean_stackdepth exec_flush exec_dup_times () integer_gt) exec_dup_times (in3 print_integer exec_do*times (integer_pop boolean_frominteger exec_noop) exec_y () in1 boolean_eq boolean_stackdepth integer_max) exec_shove () exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 print_integer exec_yank exec_do*range () exec_swap (boolean_shove) (exec_dup_items exec_yankdup boolean_frominteger exec_flush) integer_stackdepth integer_dup_items boolean_dup integer_fromboolean integer_dup_items integer_div print_integer integer_empty integer_gt exec_if (exec_do*range (exec_flush) integer_stackdepth integer_dup_items boolean_dup boolean_and) (in4 integer_dup_items integer_max exec_s_when_autoconstructing (integer_empty integer_gt exec_if (exec_yank boolean_frominteger exec_dup () boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup boolean_dup_times exec_while (print_exec (in3 integer_lt) -86 exec_while ())))) ()) () ()))) ())
Lexicase best errors: [1 1 0 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 128
Percent parens: 0.266
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 3, :instruction boolean_swap} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Zero cases best program: (integer_add integer_yank integer_shove integer_mult integer_add in2 boolean_swap boolean_eq boolean_flush integer_dup exec_yank integer_dup_times boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (integer_flush boolean_not integer_dup_times) (boolean_yank) integer_lte boolean_stackdepth exec_flush exec_dup_times () integer_gt) exec_dup_times (in3 print_integer exec_do*times (integer_pop boolean_frominteger exec_noop) exec_y () in1 boolean_eq boolean_stackdepth integer_max) exec_shove () exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 print_integer exec_yank exec_do*range () exec_swap (boolean_shove) (exec_dup_items exec_yankdup boolean_frominteger exec_flush) integer_stackdepth integer_dup_items boolean_dup integer_fromboolean integer_dup_items integer_div print_integer integer_empty integer_gt exec_if (exec_do*range (exec_flush) integer_stackdepth integer_dup_items boolean_dup boolean_and) (in4 integer_dup_items integer_max exec_s_when_autoconstructing (integer_empty integer_gt exec_if (exec_yank boolean_frominteger exec_dup () boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup boolean_dup_times exec_while (print_exec (in3 integer_lt) -86 exec_while ())))) ()) () ()))) ())
Zero cases best errors: [1 1 0 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 128
Percent parens: 0.266
--- Lexicase Population Statistics ---
Count of elite individuals by case: (135 457 186 900 185 375 112 20 203 135)
Population mean number of elite cases: 2.71
Count of perfect (error zero) individuals by case: (135 457 186 900 185 375 112 20 203 135)
Population mean number of perfect (error zero) cases: 2.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 2, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_if} {:close 1, :instruction integer_div} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 2, :instruction exec_y} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 1, :instruction -86} {:close 0, :instruction exec_while})
Best program: (boolean_xor boolean_pop in3 exec_when (boolean_dup_times integer_gte integer_dup exec_yank exec_s_when_autoconstructing (exec_k () (integer_dup_times boolean_flush print_integer integer_dup_times boolean_flush integer_dup exec_yank) boolean_swap print_integer) () (integer_flush) boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_if () (integer_div) exec_stackdepth exec_dup_times () in1 print_integer exec_do*times (exec_empty boolean_frominteger exec_dup_times (exec_y ()) integer_sub boolean_eq boolean_stackdepth integer_max) integer_div exec_swap (exec_flush boolean_and exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) (exec_dup_times () exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 exec_k_when_autoconstructing (boolean_and) (in4 boolean_dup integer_fromboolean integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (boolean_eq boolean_frominteger exec_dup () boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup exec_swap (boolean_dup_times) (exec_while (exec_swap (boolean_dup_times) (exec_while (integer_inc in3 integer_lt) -86) exec_while ()))))) ()))) ()))
Errors: [0 1 0 0 0 1 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 86
Size: 122
Percent parens: 0.295
--- Population Statistics ---
Average total errors in population: 7.292
Median total errors in population: 8
Error averages by case: (0.865 0.543 0.814 0.1 0.815 0.625 0.888 0.98 0.797 0.865)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 87.689
Average program size in population (points): 123.05
Average percent parens in population: 0.287
Minimum age in population: 39.88483721017838
Maximum age in population: 44.98793857544661
Average age in population: 43.25889865543321
Median age in population: 43.34683015942574
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 19
Genome diversity (% unique genomes):	 0.823
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.821
Total error diversity:				 0.007
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.128
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 12146717
--- Timings ---
Current time: 1559582851021 milliseconds
Total Time:          81.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.5 seconds, 67.2%
Fitness Testing:     13.7 seconds, 16.9%
Report:              12.8 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 540
Test mean error for best: 0.54000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 85                  | Program output: 95                 
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 32                 
Correct output: -73                 | Program output: 48                 
Correct output: -44                 | Program output: -44                
Correct output: -78                 | Program output: -78                
Correct output: 76                  | Program output: 76                 
Correct output: 51                  | Program output: 51                 
Correct output: -42                 | Program output: -42                
Correct output: -89                 | Program output: -89                
Correct output: -35                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: 47                  | Program output: 47                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 24                 
Correct output: 2                   | Program output: 2                  
Correct output: 21                  | Program output: 21                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 67                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 24                 
Correct output: 42                  | Program output: 55                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 37                 
Correct output: 7                   | Program output: 57                 
Correct output: 11                  | Program output: 95                 
Correct output: 19                  | Program output: 35                 
Correct output: 6                   | Program output: 42                 
Correct output: 28                  | Program output: 83                 
Correct output: 9                   | Program output: 80                 
Correct output: 33                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 29                  | Program output: 82                 
Correct output: -84                 | Program output: -84                
Correct output: -14                 | Program output: 4                  
Correct output: -88                 | Program output: -88                
Correct output: -82                 | Program output: -82                
Correct output: -48                 | Program output: -48                
Correct output: 14                  | Program output: 29                 
Correct output: -94                 | Program output: -71                
Correct output: -69                 | Program output: -21                
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: -2                 
Correct output: -72                 | Program output: -31                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -17                
Correct output: -5                  | Program output: 78                 
Correct output: -34                 | Program output: -34                
Correct output: -23                 | Program output: 82                 
Correct output: -54                 | Program output: -28                
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -55                
Correct output: -57                 | Program output: -28                
Correct output: -90                 | Program output: -7                 
Correct output: -97                 | Program output:                    
Correct output: -52                 | Program output: 85                 
Correct output: -72                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: -42                 | Program output: -42                
Correct output: -86                 | Program output: -3                 
Correct output: -90                 | Program output: -32                
Correct output: -76                 | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: -31                 | Program output: -31                
Correct output: -41                 | Program output: 54                 
Correct output: -5                  | Program output: -5                 
Correct output: -44                 | Program output: 32                 
Correct output: -66                 | Program output: -51                
Correct output: -61                 | Program output: 29                 
Correct output: -18                 | Program output: 6                  
Correct output: -81                 | Program output: -81                
Correct output: -21                 | Program output: -21                
Correct output: -98                 | Program output: 2                  
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: 14                 
Correct output: -97                 | Program output: -15                
Correct output: -50                 | Program output: -14                
Correct output: -89                 | Program output: -89                
Correct output: -30                 | Program output: 28                 
Correct output: -55                 | Program output: 55                 
Correct output: -68                 | Program output: -68                
Correct output: -77                 | Program output: -77                
Correct output: -30                 | Program output: -23                
Correct output: -68                 | Program output: -14                
Correct output: -45                 | Program output: -45                
Correct output: -89                 | Program output: -89                
Correct output: -24                 | Program output: -24                
Correct output: -82                 | Program output: 85                 
Correct output: -98                 | Program output: 53                 
Correct output: -62                 | Program output: -62                
Correct output: -69                 | Program output: -69                
Correct output: -67                 | Program output: 40                 
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction 13} {:close 1, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 1, :instruction in3})
Lexicase best program: (integer_add integer_yank in1 exec_when (exec_if (integer_gte integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (integer_dup_times boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte exec_shove (exec_flush exec_dup_times () exec_stackdepth exec_flush exec_dup_times () exec_stackdepth)) (exec_dup_times () boolean_stackdepth print_integer) exec_do*times (exec_empty boolean_frominteger exec_noop exec_y () in1 boolean_eq 13 integer_max) integer_div) exec_swap (exec_flush integer_max integer_div) (exec_swap (exec_flush boolean_and) (in2 print_integer exec_yank exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 exec_flush) integer_stackdepth integer_dup_items boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () exec_do*count () print_exec (exec_yankdup exec_swap (boolean_dup_times exec_while (print_exec (in3))) ())) ()) ()))))
Lexicase best errors: [0 0 1 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 106
Percent parens: 0.311
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction 13} {:close 1, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 1, :instruction in3})
Zero cases best program: (integer_add integer_yank in1 exec_when (exec_if (integer_gte integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (integer_dup_times boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte exec_shove (exec_flush exec_dup_times () exec_stackdepth exec_flush exec_dup_times () exec_stackdepth)) (exec_dup_times () boolean_stackdepth print_integer) exec_do*times (exec_empty boolean_frominteger exec_noop exec_y () in1 boolean_eq 13 integer_max) integer_div) exec_swap (exec_flush integer_max integer_div) (exec_swap (exec_flush boolean_and) (in2 print_integer exec_yank exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 exec_flush) integer_stackdepth integer_dup_items boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () exec_do*count () print_exec (exec_yankdup exec_swap (boolean_dup_times exec_while (print_exec (in3))) ())) ()) ()))))
Zero cases best errors: [0 0 1 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 106
Percent parens: 0.311
--- Lexicase Population Statistics ---
Count of elite individuals by case: (261 281 190 477 725 217 353 297 257 258)
Population mean number of elite cases: 3.32
Count of perfect (error zero) individuals by case: (261 281 190 477 725 217 353 297 257 258)
Population mean number of perfect (error zero) cases: 3.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 1, :instruction in3})
Best program: (integer_yank in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) exec_s_when_autoconstructing (print_integer) (integer_dup_times boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (integer_gt integer_dup exec_yank boolean_dup_times integer_gte integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not print_integer) integer_flush) (boolean_not integer_dup_times) exec_stackdepth exec_flush exec_dup_times () exec_stackdepth) () exec_dup_times () boolean_stackdepth print_integer) (integer_max integer_div) exec_swap (exec_flush boolean_and) (in2 print_integer exec_yank exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 exec_flush) integer_stackdepth integer_dup_items boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () exec_do*count () print_exec (exec_yankdup exec_swap (boolean_dup_times exec_while (print_exec (in3))) ())) ()) ()))
Errors: [0 0 1 1 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 71
Size: 102
Percent parens: 0.304
--- Population Statistics ---
Average total errors in population: 6.684
Median total errors in population: 7
Error averages by case: (0.739 0.719 0.81 0.523 0.275 0.783 0.647 0.703 0.743 0.742)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 90.491
Average program size in population (points): 125.617
Average percent parens in population: 0.279
Minimum age in population: 40.88483721017838
Maximum age in population: 46.48254017345607
Average age in population: 44.70689717135951
Median age in population: 44.86591252498329
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 41
Genome diversity (% unique genomes):	 0.806
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.806
Total error diversity:				 0.008
Error (vector) diversity:			 0.035
Behavioral diversity:				 0.214
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 12487199
--- Timings ---
Current time: 1559582853507 milliseconds
Total Time:          83.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.3 seconds, 67.2%
Fitness Testing:     14.0 seconds, 16.8%
Report:              13.2 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 547
Test mean error for best: 0.54700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 85                  | Program output: 95                 
Correct output: 36                  | Program output: 81                 
Correct output: 32                  | Program output: 32                 
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -44                
Correct output: -78                 | Program output: -78                
Correct output: 76                  | Program output: 76                 
Correct output: 51                  | Program output: 99                 
Correct output: -42                 | Program output: -42                
Correct output: -89                 | Program output: -89                
Correct output: -35                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: 47                  | Program output: 47                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output: 46                 
Correct output: 15                  | Program output: 71                 
Correct output: 2                   | Program output: 2                  
Correct output: 21                  | Program output: 51                 
Correct output: 3                   | Program output: 74                 
Correct output: 13                  | Program output: 49                 
Correct output: 16                  | Program output: 36                 
Correct output: 7                   | Program output: 57                 
Correct output: 42                  | Program output: 99                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 37                 
Correct output: 7                   | Program output: 25                 
Correct output: 11                  | Program output: 100                
Correct output: 19                  | Program output: 19                 
Correct output: 6                   | Program output: 50                 
Correct output: 28                  | Program output: 67                 
Correct output: 9                   | Program output: 20                 
Correct output: 33                  | Program output: 33                 
Correct output: 23                  | Program output: 30                 
Correct output: 29                  | Program output: 37                 
Correct output: -84                 | Program output: 64                 
Correct output: -14                 | Program output: 42                 
Correct output: -88                 | Program output: -88                
Correct output: -82                 | Program output: -12                
Correct output: -48                 | Program output: 1                  
Correct output: 14                  | Program output: 14                 
Correct output: -94                 | Program output: -71                
Correct output: -69                 | Program output: -29                
Correct output: -90                 | Program output: 76                 
Correct output: -73                 | Program output: -73                
Correct output: -72                 | Program output: -31                
Correct output: -65                 | Program output: 11                 
Correct output: -96                 | Program output: -17                
Correct output: -5                  | Program output: -5                 
Correct output: -34                 | Program output: -34                
Correct output: -23                 | Program output: 83                 
Correct output: -54                 | Program output: -28                
Correct output: -67                 | Program output: 47                 
Correct output: -96                 | Program output: 50                 
Correct output: -57                 | Program output: -28                
Correct output: -90                 | Program output: 74                 
Correct output: -97                 | Program output: -97                
Correct output: -52                 | Program output: -52                
Correct output: -72                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: -42                 | Program output: 51                 
Correct output: -86                 | Program output: -3                 
Correct output: -90                 | Program output: -32                
Correct output: -76                 | Program output: 1                  
Correct output: 4                   | Program output: 11                 
Correct output: -31                 | Program output: -31                
Correct output: -41                 | Program output: -41                
Correct output: -5                  | Program output: -5                 
Correct output: -44                 | Program output: 77                 
Correct output: -66                 | Program output: -51                
Correct output: -61                 | Program output: -61                
Correct output: -18                 | Program output: 26                 
Correct output: -81                 | Program output: -81                
Correct output: -21                 | Program output: 45                 
Correct output: -98                 | Program output: 2                  
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: -79                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: -14                
Correct output: -89                 | Program output: -89                
Correct output: -30                 | Program output: 80                 
Correct output: -55                 | Program output: 78                 
Correct output: -68                 | Program output: -68                
Correct output: -77                 | Program output: -4                 
Correct output: -30                 | Program output: -23                
Correct output: -68                 | Program output: -14                
Correct output: -45                 | Program output: -45                
Correct output: -89                 | Program output: -89                
Correct output: -24                 | Program output: 60                 
Correct output: -82                 | Program output: -82                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: 3                  
Correct output: -69                 | Program output: -69                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction -54} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt})
Lexicase best program: (integer_add integer_yank in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) integer_dup exec_yank integer_dup_times boolean_flush integer_dup boolean_frominteger exec_s_when_autoconstructing (print_integer) (integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_stackdepth) exec_stackdepth exec_dup_times (in3 print_integer exec_do*times (integer_pop boolean_frominteger exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) exec_shove () exec_flush boolean_and exec_noop exec_y () in1 exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 exec_k_when_autoconstructing (boolean_and) (in4 boolean_dup integer_fromboolean integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_yankdup boolean_frominteger exec_flush) integer_stackdepth integer_dup_items boolean_dup -54 integer_dup_items integer_div print_integer integer_empty integer_gt exec_if (exec_do*range (exec_flush) integer_stackdepth integer_dup_items print_exec (exec_yankdup exec_swap (boolean_dup_times) (exec_while (exec_swap (boolean_dup_times) (exec_while (integer_inc in3 integer_lt)))))) ())) ()))
Lexicase best errors: [0 0 0 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 118
Percent parens: 0.246
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction -54} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt})
Zero cases best program: (integer_add integer_yank in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) integer_dup exec_yank integer_dup_times boolean_flush integer_dup boolean_frominteger exec_s_when_autoconstructing (print_integer) (integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_stackdepth) exec_stackdepth exec_dup_times (in3 print_integer exec_do*times (integer_pop boolean_frominteger exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) exec_shove () exec_flush boolean_and exec_noop exec_y () in1 exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 exec_k_when_autoconstructing (boolean_and) (in4 boolean_dup integer_fromboolean integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_yankdup boolean_frominteger exec_flush) integer_stackdepth integer_dup_items boolean_dup -54 integer_dup_items integer_div print_integer integer_empty integer_gt exec_if (exec_do*range (exec_flush) integer_stackdepth integer_dup_items print_exec (exec_yankdup exec_swap (boolean_dup_times) (exec_while (exec_swap (boolean_dup_times) (exec_while (integer_inc in3 integer_lt)))))) ())) ()))
Zero cases best errors: [0 0 0 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 118
Percent parens: 0.246
--- Lexicase Population Statistics ---
Count of elite individuals by case: (819 230 123 497 329 234 260 270 856 497)
Population mean number of elite cases: 4.11
Count of perfect (error zero) individuals by case: (819 230 123 497 329 234 260 270 856 497)
Population mean number of perfect (error zero) cases: 4.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Best program: (integer_yank in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) exec_s_when_autoconstructing (integer_dup_times boolean_flush integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_stackdepth) exec_stackdepth) (exec_dup_times (in3 print_integer integer_pop integer_pop boolean_frominteger exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) exec_shove () exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger exec_flush) integer_stackdepth integer_dup_items boolean_dup exec_k_when_autoconstructing (boolean_and) (in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup exec_swap (exec_y () exec_while (integer_inc in3 integer_lt) -86 exec_while ()) ()))) ()))) ()))
Errors: [0 0 0 0 0 1 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 84
Size: 120
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 5.885
Median total errors in population: 6
Error averages by case: (0.181 0.77 0.877 0.503 0.671 0.766 0.74 0.73 0.144 0.503)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 86.832
Average program size in population (points): 121.313
Average percent parens in population: 0.284
Minimum age in population: 43.45315849408507
Maximum age in population: 48.23322701267898
Average age in population: 46.30676729076076
Median age in population: 46.33746636845171
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 14
Genome diversity (% unique genomes):	 0.831
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.831
Total error diversity:				 0.009
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.158
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 12931977
--- Timings ---
Current time: 1559582856326 milliseconds
Total Time:          86.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.0 seconds, 67.3%
Fitness Testing:     14.5 seconds, 16.8%
Report:              13.6 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 550
Test mean error for best: 0.55000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 85                  | Program output: 85                 
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 87                 
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -1                 
Correct output: -78                 | Program output: -78                
Correct output: 76                  | Program output: 76                 
Correct output: 51                  | Program output: 99                 
Correct output: -42                 | Program output: -16                
Correct output: -89                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: 47                  | Program output: 47                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output: 98                 
Correct output: 15                  | Program output: 86                 
Correct output: 2                   | Program output: 80                 
Correct output: 21                  | Program output: 42                 
Correct output: 3                   | Program output: 59                 
Correct output: 13                  | Program output: 43                 
Correct output: 16                  | Program output: 93                 
Correct output: 7                   | Program output: 7                  
Correct output: 42                  | Program output: 67                 
Correct output: 2                   | Program output:                    
Correct output: 23                  | Program output: 23                 
Correct output: 7                   | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 19                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 36                 
Correct output: 9                   | Program output: 84                 
Correct output: 33                  | Program output: 60                 
Correct output: 23                  | Program output: 76                 
Correct output: 29                  | Program output: 29                 
Correct output: -84                 | Program output: 47                 
Correct output: -14                 | Program output: -14                
Correct output: -88                 | Program output: -88                
Correct output: -82                 | Program output: -12                
Correct output: -48                 | Program output: 1                  
Correct output: 14                  | Program output: 92                 
Correct output: -94                 | Program output: -94                
Correct output: -69                 | Program output: -29                
Correct output: -90                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -72                 | Program output: -43                
Correct output: -65                 | Program output: 15                 
Correct output: -96                 | Program output: -96                
Correct output: -5                  | Program output: -5                 
Correct output: -34                 | Program output: 50                 
Correct output: -23                 | Program output: -23                
Correct output: -54                 | Program output: -54                
Correct output: -67                 | Program output: -6                 
Correct output: -96                 | Program output: -96                
Correct output: -57                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -97                
Correct output: -52                 | Program output: -52                
Correct output: -72                 | Program output: -37                
Correct output: -86                 | Program output: 54                 
Correct output: -42                 | Program output: 41                 
Correct output: -86                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: -55                
Correct output: 4                   | Program output: 8                  
Correct output: -31                 | Program output: -21                
Correct output: -41                 | Program output: -41                
Correct output: -5                  | Program output: 75                 
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -66                
Correct output: -61                 | Program output: -61                
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -64                
Correct output: -21                 | Program output: -7                 
Correct output: -98                 | Program output: 64                 
Correct output: -100                | Program output: 54                 
Correct output: -79                 | Program output: -79                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: -30                
Correct output: -89                 | Program output:                    
Correct output: -30                 | Program output: -30                
Correct output: -55                 | Program output: -55                
Correct output: -68                 | Program output: -6                 
Correct output: -77                 | Program output: -4                 
Correct output: -30                 | Program output: -30                
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -15                
Correct output: -89                 | Program output: 32                 
Correct output: -24                 | Program output: 72                 
Correct output: -82                 | Program output: -82                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output:                    
Correct output: -69                 | Program output: -69                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_noop} {:close 2, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup})
Lexicase best program: (boolean_xor boolean_pop in3 exec_when (boolean_dup_times integer_gte integer_dup exec_yank exec_s_when_autoconstructing (exec_k () (integer_dup_times boolean_flush print_integer integer_dup_times boolean_flush integer_dup exec_yank) exec_s_when_autoconstructing (print_integer) () (integer_flush) boolean_not integer_dup_times) (boolean_yank integer_lte boolean_not exec_s_when_autoconstructing (integer_gt integer_dup exec_yank boolean_dup_times integer_gte integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not print_integer) integer_flush) (boolean_not integer_dup_times) print_integer) (integer_flush) boolean_not integer_dup_times) (boolean_yank integer_lte boolean_stackdepth exec_noop exec_y ()) in1 boolean_eq boolean_stackdepth integer_max) integer_div exec_swap (exec_flush boolean_and integer_add exec_y () in1 boolean_eq boolean_stackdepth integer_max) (exec_dup_times () exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () boolean_frominteger exec_dup () integer_eq print_exec (exec_yankdup)) ()))) ()))
Lexicase best errors: [0 0 0 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 126
Percent parens: 0.278
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_noop} {:close 2, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup})
Zero cases best program: (boolean_xor boolean_pop in3 exec_when (boolean_dup_times integer_gte integer_dup exec_yank exec_s_when_autoconstructing (exec_k () (integer_dup_times boolean_flush print_integer integer_dup_times boolean_flush integer_dup exec_yank) exec_s_when_autoconstructing (print_integer) () (integer_flush) boolean_not integer_dup_times) (boolean_yank integer_lte boolean_not exec_s_when_autoconstructing (integer_gt integer_dup exec_yank boolean_dup_times integer_gte integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not print_integer) integer_flush) (boolean_not integer_dup_times) print_integer) (integer_flush) boolean_not integer_dup_times) (boolean_yank integer_lte boolean_stackdepth exec_noop exec_y ()) in1 boolean_eq boolean_stackdepth integer_max) integer_div exec_swap (exec_flush boolean_and integer_add exec_y () in1 boolean_eq boolean_stackdepth integer_max) (exec_dup_times () exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () boolean_frominteger exec_dup () integer_eq print_exec (exec_yankdup)) ()))) ()))
Zero cases best errors: [0 0 0 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 126
Percent parens: 0.278
--- Lexicase Population Statistics ---
Count of elite individuals by case: (897 896 759 1 56 87 863 838 319 57)
Population mean number of elite cases: 4.77
Count of perfect (error zero) individuals by case: (897 896 759 1 56 87 863 838 319 57)
Population mean number of perfect (error zero) cases: 4.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 1, :instruction integer_max} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_noop} {:close 2, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Best program: (boolean_xor boolean_pop in3 exec_when (boolean_dup_times integer_gte integer_dup exec_yank exec_s_when_autoconstructing (exec_k () (integer_dup_times boolean_flush print_integer integer_dup_times boolean_flush integer_dup exec_yank) exec_s_when_autoconstructing (print_integer) () (integer_flush) boolean_not integer_dup_times) (boolean_yank integer_lte boolean_not exec_s_when_autoconstructing (integer_gt integer_dup exec_yank boolean_dup_times integer_gte integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not print_integer) integer_max) (exec_shove () exec_flush boolean_and exec_noop exec_y () in1 exec_swap (print_integer) (integer_flush) boolean_not integer_dup_times) print_integer) (integer_flush) boolean_not integer_dup_times) (boolean_yank integer_lte boolean_stackdepth exec_noop exec_y ()) in1 boolean_eq boolean_stackdepth integer_max) integer_div exec_swap (exec_flush boolean_and integer_add exec_y () in1 boolean_eq boolean_stackdepth integer_max) (exec_dup_times () exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () boolean_frominteger exec_dup () integer_eq print_exec (exec_yankdup exec_swap (exec_y () exec_while (integer_inc in3 integer_lt) -86 exec_while ()) ())) ()))) ()))
Errors: [0 0 0 1 0 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 108
Size: 152
Percent parens: 0.289
--- Population Statistics ---
Average total errors in population: 5.227
Median total errors in population: 5
Error averages by case: (0.103 0.104 0.241 0.999 0.944 0.913 0.137 0.162 0.681 0.943)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 86.635
Average program size in population (points): 122.122
Average percent parens in population: 0.290
Minimum age in population: 44.45315849408507
Maximum age in population: 49.57030701776966
Average age in population: 47.98101265548356
Median age in population: 48.13740903511643
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 44
Genome diversity (% unique genomes):	 0.809
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 44
Syntactic diversity (% unique Push programs):	 0.809
Total error diversity:				 0.008
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.125
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 13355604
--- Timings ---
Current time: 1559582859042 milliseconds
Total Time:          89.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.8 seconds, 67.1%
Fitness Testing:     14.9 seconds, 16.8%
Report:              14.2 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 550
Test mean error for best: 0.55000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 85                  | Program output: 85                 
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 87                 
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -1                 
Correct output: -78                 | Program output: -78                
Correct output: 76                  | Program output: 76                 
Correct output: 51                  | Program output: 99                 
Correct output: -42                 | Program output: -16                
Correct output: -89                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: 47                  | Program output: 47                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output: 98                 
Correct output: 15                  | Program output: 86                 
Correct output: 2                   | Program output: 80                 
Correct output: 21                  | Program output: 42                 
Correct output: 3                   | Program output: 59                 
Correct output: 13                  | Program output: 43                 
Correct output: 16                  | Program output: 93                 
Correct output: 7                   | Program output: 7                  
Correct output: 42                  | Program output: 67                 
Correct output: 2                   | Program output:                    
Correct output: 23                  | Program output: 23                 
Correct output: 7                   | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 19                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 36                 
Correct output: 9                   | Program output: 84                 
Correct output: 33                  | Program output: 60                 
Correct output: 23                  | Program output: 76                 
Correct output: 29                  | Program output: 29                 
Correct output: -84                 | Program output: 47                 
Correct output: -14                 | Program output: -14                
Correct output: -88                 | Program output: -88                
Correct output: -82                 | Program output: -12                
Correct output: -48                 | Program output: 1                  
Correct output: 14                  | Program output: 92                 
Correct output: -94                 | Program output: -94                
Correct output: -69                 | Program output: -29                
Correct output: -90                 | Program output: -47                
Correct output: -73                 | Program output: -73                
Correct output: -72                 | Program output: -43                
Correct output: -65                 | Program output: 15                 
Correct output: -96                 | Program output: -96                
Correct output: -5                  | Program output: -5                 
Correct output: -34                 | Program output: 50                 
Correct output: -23                 | Program output: -23                
Correct output: -54                 | Program output: -54                
Correct output: -67                 | Program output: -6                 
Correct output: -96                 | Program output: -96                
Correct output: -57                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -97                
Correct output: -52                 | Program output: -52                
Correct output: -72                 | Program output: -37                
Correct output: -86                 | Program output: 54                 
Correct output: -42                 | Program output: 41                 
Correct output: -86                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: -55                
Correct output: 4                   | Program output: 8                  
Correct output: -31                 | Program output: -21                
Correct output: -41                 | Program output: -41                
Correct output: -5                  | Program output: 75                 
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -66                
Correct output: -61                 | Program output: -61                
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -64                
Correct output: -21                 | Program output: -7                 
Correct output: -98                 | Program output: 64                 
Correct output: -100                | Program output: 54                 
Correct output: -79                 | Program output: -79                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: -30                
Correct output: -89                 | Program output:                    
Correct output: -30                 | Program output: -30                
Correct output: -55                 | Program output: -55                
Correct output: -68                 | Program output: -6                 
Correct output: -77                 | Program output: -4                 
Correct output: -30                 | Program output: -30                
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -15                
Correct output: -89                 | Program output: 32                 
Correct output: -24                 | Program output: 72                 
Correct output: -82                 | Program output: -82                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output:                    
Correct output: -69                 | Program output: -69                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_noop} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_xor boolean_pop in3 exec_when (boolean_dup_times integer_gte integer_dup exec_yank exec_s_when_autoconstructing (exec_k () (integer_dup_times boolean_flush print_integer integer_dup_times boolean_flush integer_dup exec_yank) exec_s_when_autoconstructing (print_integer) () (integer_flush) boolean_not integer_dup_times) (boolean_yank integer_lte boolean_not exec_s_when_autoconstructing (integer_gt integer_dup exec_yank boolean_dup_times integer_gte integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not print_integer) integer_flush) (boolean_not integer_dup_times) print_integer) (integer_flush) boolean_not integer_dup_times) (boolean_yank integer_lte boolean_stackdepth exec_noop exec_y_when_autoconstructing ()) in1 boolean_eq boolean_stackdepth integer_max) integer_div exec_swap (exec_flush boolean_and integer_add exec_y () in1 boolean_eq boolean_stackdepth integer_max) (exec_dup_times () exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () boolean_frominteger exec_dup () integer_eq print_exec (exec_yankdup exec_swap (exec_y () exec_while (integer_inc in3 integer_lt) -86 exec_while ()) ())) ()))) ()))
Lexicase best errors: [1 0 1 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 139
Percent parens: 0.288
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_noop} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_xor boolean_pop in3 exec_when (boolean_dup_times integer_gte integer_dup exec_yank exec_s_when_autoconstructing (exec_k () (integer_dup_times boolean_flush print_integer integer_dup_times boolean_flush integer_dup exec_yank) exec_s_when_autoconstructing (print_integer) () (integer_flush) boolean_not integer_dup_times) (boolean_yank integer_lte boolean_not exec_s_when_autoconstructing (integer_gt integer_dup exec_yank boolean_dup_times integer_gte integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not print_integer) integer_flush) (boolean_not integer_dup_times) print_integer) (integer_flush) boolean_not integer_dup_times) (boolean_yank integer_lte boolean_stackdepth exec_noop exec_y_when_autoconstructing ()) in1 boolean_eq boolean_stackdepth integer_max) integer_div exec_swap (exec_flush boolean_and integer_add exec_y () in1 boolean_eq boolean_stackdepth integer_max) (exec_dup_times () exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () boolean_frominteger exec_dup () integer_eq print_exec (exec_yankdup exec_swap (exec_y () exec_while (integer_inc in3 integer_lt) -86 exec_while ()) ())) ()))) ()))
Zero cases best errors: [1 0 1 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 139
Percent parens: 0.288
--- Lexicase Population Statistics ---
Count of elite individuals by case: (315 403 5 411 517 423 1000 877 212 14)
Population mean number of elite cases: 4.18
Count of perfect (error zero) individuals by case: (315 403 5 411 517 423 0 877 212 14)
Population mean number of perfect (error zero) cases: 3.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_noop} {:close 2, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 1, :instruction -86} {:close 0, :instruction exec_while})
Best program: (boolean_xor boolean_pop in3 exec_when (boolean_dup_times integer_gte integer_dup exec_yank exec_s_when_autoconstructing (exec_k () (integer_dup_times boolean_flush print_integer integer_dup_times boolean_flush integer_dup exec_yank) exec_s_when_autoconstructing (print_integer) () (integer_flush) boolean_not integer_dup_times) (boolean_yank integer_lte boolean_not exec_s_when_autoconstructing (integer_gt integer_dup exec_yank boolean_dup_times integer_gte integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not print_integer) integer_flush) (boolean_not integer_dup_times) print_integer) (integer_flush) boolean_not integer_dup_times) (boolean_yank integer_lte boolean_stackdepth exec_noop exec_y ()) in1 boolean_eq boolean_stackdepth integer_max) integer_div exec_swap (exec_flush boolean_and integer_add exec_y () in1 boolean_eq boolean_stackdepth integer_max) (exec_dup_times () exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 exec_swap (boolean_dup_times) (exec_while (exec_swap (boolean_dup_times) (exec_while (integer_inc in3 integer_lt) -86) exec_while ()))) ()))) ()))
Errors: [1 0 1 0 0 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 95
Size: 134
Percent parens: 0.291
--- Population Statistics ---
Average total errors in population: 6.823
Median total errors in population: 7
Error averages by case: (0.685 0.597 0.995 0.589 0.483 0.577 1.0 0.123 0.788 0.986)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 106.271
Average program size in population (points): 146.011
Average percent parens in population: 0.273
Minimum age in population: 47.60107063502073
Maximum age in population: 51.57030701776966
Average age in population: 49.18714852222311
Median age in population: 49.11233143601567
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 79
Genome diversity (% unique genomes):	 0.796
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 81
Syntactic diversity (% unique Push programs):	 0.794
Total error diversity:				 0.006
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.159
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 13881634
--- Timings ---
Current time: 1559582862248 milliseconds
Total Time:          92.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.6 seconds, 67.0%
Fitness Testing:     15.6 seconds, 16.9%
Report:              14.7 seconds, 16.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 554
Test mean error for best: 0.55400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 85                  | Program output: 95                 
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 32                 
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -1                 
Correct output: -78                 | Program output: -78                
Correct output: 76                  | Program output: 76                 
Correct output: 51                  | Program output: 51                 
Correct output: -42                 | Program output: -16                
Correct output: -89                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: 47                  | Program output: 47                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 24                 
Correct output: 2                   | Program output: 13                 
Correct output: 21                  | Program output: 21                 
Correct output: 3                   | Program output: 29                 
Correct output: 13                  | Program output: 67                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 24                 
Correct output: 42                  | Program output: 55                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 37                 
Correct output: 7                   | Program output: 57                 
Correct output: 11                  | Program output: 95                 
Correct output: 19                  | Program output: 35                 
Correct output: 6                   | Program output: 42                 
Correct output: 28                  | Program output: 83                 
Correct output: 9                   | Program output: 80                 
Correct output: 33                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 29                  | Program output: 82                 
Correct output: -84                 | Program output: -84                
Correct output: -14                 | Program output: 43                 
Correct output: -88                 | Program output: -88                
Correct output: -82                 | Program output: -12                
Correct output: -48                 | Program output: 1                  
Correct output: 14                  | Program output: 29                 
Correct output: -94                 | Program output: 10                 
Correct output: -69                 | Program output: -29                
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: -73                
Correct output: -72                 | Program output: -43                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -96                
Correct output: -5                  | Program output: -5                 
Correct output: -34                 | Program output: 29                 
Correct output: -23                 | Program output: 82                 
Correct output: -54                 | Program output: -54                
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -55                
Correct output: -57                 | Program output: -57                
Correct output: -90                 | Program output: -7                 
Correct output: -97                 | Program output: -97                
Correct output: -52                 | Program output: -52                
Correct output: -72                 | Program output: -37                
Correct output: -86                 | Program output: 34                 
Correct output: -42                 | Program output: -42                
Correct output: -86                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: -55                
Correct output: 4                   | Program output: 54                 
Correct output: -31                 | Program output: -21                
Correct output: -41                 | Program output: -41                
Correct output: -5                  | Program output: 7                  
Correct output: -44                 | Program output: 32                 
Correct output: -66                 | Program output: -6                 
Correct output: -61                 | Program output: -61                
Correct output: -18                 | Program output: 6                  
Correct output: -81                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 43                 
Correct output: -79                 | Program output: -79                
Correct output: -97                 | Program output: -97                
Correct output: -50                 | Program output: -30                
Correct output: -89                 | Program output: 2                  
Correct output: -30                 | Program output: 28                 
Correct output: -55                 | Program output: 55                 
Correct output: -68                 | Program output: -6                 
Correct output: -77                 | Program output: -4                 
Correct output: -30                 | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: -45                 | Program output: -15                
Correct output: -89                 | Program output: -46                
Correct output: -24                 | Program output: -24                
Correct output: -82                 | Program output: -82                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output:                    
Correct output: -69                 | Program output: -69                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_noop} {:close 2, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 1, :instruction -86} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_xor boolean_pop in3 exec_when (boolean_dup_times integer_gte integer_dup exec_yank exec_s_when_autoconstructing (exec_k () (integer_dup_times boolean_flush print_integer integer_dup_times boolean_flush integer_dup exec_yank) exec_s_when_autoconstructing (print_integer) () (integer_flush) boolean_not integer_dup_times) (boolean_yank integer_lte boolean_not exec_s_when_autoconstructing (integer_gt integer_dup exec_yank boolean_dup_times print_integer integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not print_integer) integer_flush) (integer_dup_times) print_integer) (integer_flush) boolean_not integer_dup_times) (boolean_yank integer_lte boolean_stackdepth exec_noop exec_y ()) in1 boolean_eq boolean_stackdepth integer_max) integer_div exec_swap (exec_flush boolean_and integer_add exec_y () in1 boolean_eq boolean_stackdepth integer_max) (exec_dup_times () exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_dup_times integer_gt exec_if (in2 exec_swap (boolean_dup_times) (exec_while (exec_swap (boolean_dup_times) (exec_while (integer_inc in3 integer_lt) -86) exec_while ()))) ()))) ()))
Lexicase best errors: [0 0 0 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 133
Percent parens: 0.293
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_noop} {:close 2, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 1, :instruction -86} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_xor boolean_pop in3 exec_when (boolean_dup_times integer_gte integer_dup exec_yank exec_s_when_autoconstructing (exec_k () (integer_dup_times boolean_flush print_integer integer_dup_times boolean_flush integer_dup exec_yank) exec_s_when_autoconstructing (print_integer) () (integer_flush) boolean_not integer_dup_times) (boolean_yank integer_lte boolean_not exec_s_when_autoconstructing (integer_gt integer_dup exec_yank boolean_dup_times print_integer integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not print_integer) integer_flush) (integer_dup_times) print_integer) (integer_flush) boolean_not integer_dup_times) (boolean_yank integer_lte boolean_stackdepth exec_noop exec_y ()) in1 boolean_eq boolean_stackdepth integer_max) integer_div exec_swap (exec_flush boolean_and integer_add exec_y () in1 boolean_eq boolean_stackdepth integer_max) (exec_dup_times () exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_dup_times integer_gt exec_if (in2 exec_swap (boolean_dup_times) (exec_while (exec_swap (boolean_dup_times) (exec_while (integer_inc in3 integer_lt) -86) exec_while ()))) ()))) ()))
Zero cases best errors: [0 0 0 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 133
Percent parens: 0.293
--- Lexicase Population Statistics ---
Count of elite individuals by case: (445 889 407 444 161 242 763 112 327 117)
Population mean number of elite cases: 3.91
Count of perfect (error zero) individuals by case: (445 889 407 444 161 242 763 112 327 117)
Population mean number of perfect (error zero) cases: 3.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_noop} {:close 2, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 1, :instruction -86} {:close 0, :instruction exec_while})
Best program: (boolean_xor boolean_pop in3 exec_when (boolean_dup_times integer_gte integer_dup exec_yank exec_s_when_autoconstructing (exec_k () (integer_dup_times boolean_flush print_integer integer_dup_times boolean_flush integer_dup exec_yank) exec_s_when_autoconstructing (print_integer) () (integer_flush) boolean_not integer_dup_times) (boolean_yank integer_lte boolean_not exec_s_when_autoconstructing (integer_gt integer_dup exec_yank boolean_dup_times print_integer integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not print_integer) integer_flush) (integer_dup_times) print_integer) (integer_flush) boolean_not integer_dup_times) (boolean_yank integer_lte boolean_stackdepth exec_noop exec_y ()) in1 boolean_eq boolean_stackdepth integer_max) integer_div exec_swap (exec_flush boolean_and integer_add exec_y () in1 boolean_eq boolean_stackdepth integer_max) (exec_dup_times () exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_dup_times integer_gt exec_if (in2 exec_swap (boolean_dup_times) (exec_while (exec_swap (boolean_dup_times) (exec_while (integer_inc in3 integer_lt) -86) exec_while ()))) ()))) ()))
Errors: [0 0 0 0 1 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 94
Size: 133
Percent parens: 0.293
--- Population Statistics ---
Average total errors in population: 6.093
Median total errors in population: 6
Error averages by case: (0.555 0.111 0.593 0.556 0.839 0.758 0.237 0.888 0.673 0.883)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 99.664
Average program size in population (points): 138.781
Average percent parens in population: 0.283
Minimum age in population: 48.60107063502073
Maximum age in population: 52.87606334942393
Average age in population: 50.82009710530739
Median age in population: 50.80107769882306
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 52
Genome diversity (% unique genomes):	 0.843
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.842
Total error diversity:				 0.009
Error (vector) diversity:			 0.041
Behavioral diversity:				 0.213
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 14461668
--- Timings ---
Current time: 1559582865433 milliseconds
Total Time:          95.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.4 seconds, 66.6%
Fitness Testing:     16.2 seconds, 17.0%
Report:              15.5 seconds, 16.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 577
Test mean error for best: 0.57700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 85                  | Program output: 85                 
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 87                 
Correct output: -73                 | Program output: 48                 
Correct output: -44                 | Program output: -44                
Correct output: -78                 | Program output: -78                
Correct output: 76                  | Program output: 76                 
Correct output: 51                  | Program output: 99                 
Correct output: -42                 | Program output: -42                
Correct output: -89                 | Program output: -89                
Correct output: -35                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: 47                  | Program output: 47                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output: 98                 
Correct output: 15                  | Program output: 86                 
Correct output: 2                   | Program output: 2                  
Correct output: 21                  | Program output: 42                 
Correct output: 3                   | Program output:                    
Correct output: 13                  | Program output: 43                 
Correct output: 16                  | Program output: 93                 
Correct output: 7                   | Program output: 7                  
Correct output: 42                  | Program output: 67                 
Correct output: 2                   | Program output:                    
Correct output: 23                  | Program output: 23                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 11                 
Correct output: 19                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 33                  | Program output: 60                 
Correct output: 23                  | Program output: 76                 
Correct output: 29                  | Program output: 29                 
Correct output: -84                 | Program output:                    
Correct output: -14                 | Program output: 4                  
Correct output: -88                 | Program output: -88                
Correct output: -82                 | Program output:                    
Correct output: -48                 | Program output:                    
Correct output: 14                  | Program output: 92                 
Correct output: -94                 | Program output: -71                
Correct output: -69                 | Program output:                    
Correct output: -90                 | Program output:                    
Correct output: -73                 | Program output:                    
Correct output: -72                 | Program output: -31                
Correct output: -65                 | Program output:                    
Correct output: -96                 | Program output: -17                
Correct output: -5                  | Program output: 18                 
Correct output: -34                 | Program output: -34                
Correct output: -23                 | Program output: -23                
Correct output: -54                 | Program output: -28                
Correct output: -67                 | Program output:                    
Correct output: -96                 | Program output:                    
Correct output: -57                 | Program output: -28                
Correct output: -90                 | Program output:                    
Correct output: -97                 | Program output: 5                  
Correct output: -52                 | Program output: 12                 
Correct output: -72                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: -42                 | Program output:                    
Correct output: -86                 | Program output: -3                 
Correct output: -90                 | Program output: -32                
Correct output: -76                 | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: -31                 | Program output: -31                
Correct output: -41                 | Program output: 49                 
Correct output: -5                  | Program output: -5                 
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -51                
Correct output: -61                 | Program output: 3                  
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -21                 | Program output:                    
Correct output: -98                 | Program output: 2                  
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: -47                
Correct output: -97                 | Program output:                    
Correct output: -50                 | Program output: -14                
Correct output: -89                 | Program output: -89                
Correct output: -30                 | Program output: -30                
Correct output: -55                 | Program output: -55                
Correct output: -68                 | Program output: -68                
Correct output: -77                 | Program output:                    
Correct output: -30                 | Program output: -23                
Correct output: -68                 | Program output: -14                
Correct output: -45                 | Program output: -45                
Correct output: -89                 | Program output: -89                
Correct output: -24                 | Program output:                    
Correct output: -82                 | Program output: -82                
Correct output: -98                 | Program output: 59                 
Correct output: -62                 | Program output:                    
Correct output: -69                 | Program output: -69                
Correct output: -67                 | Program output: 33                 
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_max} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_noop} {:close 2, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 1, :instruction -86} {:close 0, :instruction exec_while})
Lexicase best program: (integer_yank in1 exec_when (boolean_xor boolean_pop boolean_dup_times integer_gte integer_dup exec_yank) exec_s_when_autoconstructing (integer_dup_times boolean_flush integer_dup exec_yank) (exec_s_when_autoconstructing (integer_gte) (integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_stackdepth) exec_stackdepth) (boolean_dup_times print_integer integer_dup exec_yank) exec_s_when_autoconstructing (print_integer) (boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_eq exec_yank integer_max) exec_shove () exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 integer_flush) boolean_not print_integer) (integer_flush) integer_dup_times) (print_integer) integer_flush boolean_not integer_dup_times boolean_yank integer_lte boolean_stackdepth exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max integer_div exec_swap (exec_flush boolean_and integer_add exec_y () in1 boolean_eq boolean_stackdepth integer_max) (exec_dup_times () exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_dup_times integer_gt exec_if (in2 exec_swap (boolean_dup_times) (exec_while (exec_swap (boolean_dup_times) (exec_while (integer_inc in3 integer_lt) -86) exec_while ()))) ()))) ()))
Lexicase best errors: [1 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 145
Percent parens: 0.290
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_max} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_noop} {:close 2, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 1, :instruction -86} {:close 0, :instruction exec_while})
Zero cases best program: (integer_yank in1 exec_when (boolean_xor boolean_pop boolean_dup_times integer_gte integer_dup exec_yank) exec_s_when_autoconstructing (integer_dup_times boolean_flush integer_dup exec_yank) (exec_s_when_autoconstructing (integer_gte) (integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_stackdepth) exec_stackdepth) (boolean_dup_times print_integer integer_dup exec_yank) exec_s_when_autoconstructing (print_integer) (boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_eq exec_yank integer_max) exec_shove () exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 integer_flush) boolean_not print_integer) (integer_flush) integer_dup_times) (print_integer) integer_flush boolean_not integer_dup_times boolean_yank integer_lte boolean_stackdepth exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max integer_div exec_swap (exec_flush boolean_and integer_add exec_y () in1 boolean_eq boolean_stackdepth integer_max) (exec_dup_times () exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_dup_times integer_gt exec_if (in2 exec_swap (boolean_dup_times) (exec_while (exec_swap (boolean_dup_times) (exec_while (integer_inc in3 integer_lt) -86) exec_while ()))) ()))) ()))
Zero cases best errors: [1 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 145
Percent parens: 0.290
--- Lexicase Population Statistics ---
Count of elite individuals by case: (26 737 343 87 897 225 221 241 61 74)
Population mean number of elite cases: 2.91
Count of perfect (error zero) individuals by case: (26 737 343 87 897 225 221 241 61 74)
Population mean number of perfect (error zero) cases: 2.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_noop} {:close 2, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 1, :instruction -86} {:close 0, :instruction exec_while})
Best program: (integer_yank in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) exec_s_when_autoconstructing (integer_dup_times boolean_flush integer_dup exec_s_when_autoconstructing (print_integer) () (integer_flush) boolean_not integer_dup_times) (boolean_yank integer_lte boolean_not exec_s_when_autoconstructing (integer_gt integer_dup exec_yank boolean_dup_times print_integer integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (boolean_flush integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not print_integer) integer_flush) (integer_dup_times) print_integer) (integer_flush) boolean_not integer_dup_times) (boolean_yank integer_lte boolean_stackdepth exec_noop exec_y ()) in1 boolean_eq boolean_stackdepth integer_max integer_div exec_swap (exec_flush boolean_and integer_add exec_y () in1 boolean_eq boolean_stackdepth integer_max) (exec_dup_times () exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_dup_times integer_gt exec_if (in2 exec_swap (boolean_dup_times) (exec_while (exec_swap (boolean_dup_times) (exec_while (integer_inc in3 integer_lt) -86) exec_while ()))) ()))) ()))
Errors: [1 0 1 0 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 88
Size: 125
Percent parens: 0.296
--- Population Statistics ---
Average total errors in population: 7.088
Median total errors in population: 7
Error averages by case: (0.974 0.263 0.657 0.913 0.103 0.775 0.779 0.759 0.939 0.926)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 90.583
Average program size in population (points): 129.018
Average percent parens in population: 0.298
Minimum age in population: 50.81939460849389
Maximum age in population: 53.94873906869907
Average age in population: 52.62001636113302
Median age in population: 52.6122838947922
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 116
Genome diversity (% unique genomes):	 0.795
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 116
Syntactic diversity (% unique Push programs):	 0.795
Total error diversity:				 0.009
Error (vector) diversity:			 0.05
Behavioral diversity:				 0.202
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 15143521
--- Timings ---
Current time: 1559582868776 milliseconds
Total Time:          98.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.3 seconds, 66.2%
Fitness Testing:     16.9 seconds, 17.2%
Report:              16.2 seconds, 16.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 719
Test mean error for best: 0.71900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 00                 
Correct output: -44                 | Program output: -44-44             
Correct output: -99                 | Program output: 04                 
Correct output: -22                 | Program output: -22-22             
Correct output: 99                  | Program output: 99                 
Correct output: 85                  | Program output: 95                 
Correct output: 36                  | Program output: 81                 
Correct output: 32                  | Program output: 32                 
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -44-44             
Correct output: -78                 | Program output: -7886              
Correct output: 76                  | Program output: 76                 
Correct output: 51                  | Program output: 99                 
Correct output: -42                 | Program output: -42-16             
Correct output: -89                 | Program output: -89-25             
Correct output: -35                 | Program output: -35-35             
Correct output: -19                 | Program output: -19-19             
Correct output: 47                  | Program output: 47                 
Correct output: -72                 | Program output: -72-72             
Correct output: -94                 | Program output: -94-94             
Correct output: 19                  | Program output: 46                 
Correct output: 15                  | Program output: 71                 
Correct output: 2                   | Program output: 213                
Correct output: 21                  | Program output: 51                 
Correct output: 3                   | Program output: 329                
Correct output: 13                  | Program output: 49                 
Correct output: 16                  | Program output: 36                 
Correct output: 7                   | Program output: 57                 
Correct output: 42                  | Program output: 99                 
Correct output: 2                   | Program output: 323                
Correct output: 23                  | Program output: 37                 
Correct output: 7                   | Program output: 25                 
Correct output: 11                  | Program output: 100                
Correct output: 19                  | Program output: 19                 
Correct output: 6                   | Program output: 50                 
Correct output: 28                  | Program output: 67                 
Correct output: 9                   | Program output: 20                 
Correct output: 33                  | Program output: 33                 
Correct output: 23                  | Program output: 30                 
Correct output: 29                  | Program output: 37                 
Correct output: -84                 | Program output: -84                
Correct output: -14                 | Program output: 43                 
Correct output: -88                 | Program output: -8812              
Correct output: -82                 | Program output: -82                
Correct output: -48                 | Program output: -48                
Correct output: 14                  | Program output: 14                 
Correct output: -94                 | Program output: -7110              
Correct output: -69                 | Program output: -21                
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: -2                 
Correct output: -72                 | Program output: -3154              
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -17-15             
Correct output: -5                  | Program output: -5                 
Correct output: -34                 | Program output: -3429              
Correct output: -23                 | Program output: 83                 
Correct output: -54                 | Program output: -2837              
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -55                
Correct output: -57                 | Program output: -28-57             
Correct output: -90                 | Program output: -7                 
Correct output: -97                 | Program output: -97                
Correct output: -52                 | Program output: -52                
Correct output: -72                 | Program output: -7284              
Correct output: -86                 | Program output: -8634              
Correct output: -42                 | Program output: -42                
Correct output: -86                 | Program output: -3-86              
Correct output: -90                 | Program output: -3248              
Correct output: -76                 | Program output: 142                
Correct output: 4                   | Program output: 54                 
Correct output: -31                 | Program output: -31-1              
Correct output: -41                 | Program output: -41                
Correct output: -5                  | Program output: -5
(exec_yankdup exec_swap () (exec_k () (exec_while (integer_inc in3 integer_lt) -86 exec_while ())))(exec_yankdup exec_swap () (exec_k () (exec_while (integer_inc in3 integer_lt) -86 exec_while ())))
Correct output: -44                 | Program output: 77                 
Correct output: -66                 | Program output: -51-6              
Correct output: -61                 | Program output: -61                
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -81-43             
Correct output: -21                 | Program output: -21                
Correct output: -98                 | Program output: 2-98               
Correct output: -100                | Program output: -10043             
Correct output: -79                 | Program output: -79                
Correct output: -97                 | Program output: -15                
Correct output: -50                 | Program output: -14-8              
Correct output: -89                 | Program output: -89-4              
Correct output: -30                 | Program output: 80                 
Correct output: -55                 | Program output: 78                 
Correct output: -68                 | Program output: -6826              
Correct output: -77                 | Program output: -77                
Correct output: -30                 | Program output: -2311              
Correct output: -68                 | Program output: -14-41             
Correct output: -45                 | Program output: -45-8              
Correct output: -89                 | Program output: -89-46             
Correct output: -24                 | Program output: -24                
Correct output: -82                 | Program output: -82                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -69                 | Program output: -6998              
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -65-24             
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 1, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tagged_312} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 1, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Lexicase best program: (integer_add integer_yank in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) boolean_xor print_integer exec_rot () (boolean_yankdup integer_dup exec_yank integer_dup exec_yank) (exec_s_when_autoconstructing (in2) (exec_s_when_autoconstructing (boolean_rot) (integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times boolean_yank integer_lte boolean_stackdepth exec_flush exec_stackdepth) exec_stackdepth) exec_dup_times (in3 print_integer integer_pop integer_pop boolean_frominteger exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) exec_shove () exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger exec_flush) integer_stackdepth integer_dup_items tagged_312 boolean_eq boolean_and) (in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot print_newline integer_gt exec_if (in2) (boolean_frominteger exec_dup (boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup exec_swap () (exec_k () (exec_while (integer_inc in3 integer_lt) -86 exec_while ()))))))))) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 128
Percent parens: 0.297
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 1, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tagged_312} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 1, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Zero cases best program: (integer_add integer_yank in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) boolean_xor print_integer exec_rot () (boolean_yankdup integer_dup exec_yank integer_dup exec_yank) (exec_s_when_autoconstructing (in2) (exec_s_when_autoconstructing (boolean_rot) (integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times boolean_yank integer_lte boolean_stackdepth exec_flush exec_stackdepth) exec_stackdepth) exec_dup_times (in3 print_integer integer_pop integer_pop boolean_frominteger exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) exec_shove () exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger exec_flush) integer_stackdepth integer_dup_items tagged_312 boolean_eq boolean_and) (in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot print_newline integer_gt exec_if (in2) (boolean_frominteger exec_dup (boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup exec_swap () (exec_k () (exec_while (integer_inc in3 integer_lt) -86 exec_while ()))))))))) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 128
Percent parens: 0.297
--- Lexicase Population Statistics ---
Count of elite individuals by case: (522 39 149 36 203 36 197 34 402 480)
Population mean number of elite cases: 2.10
Count of perfect (error zero) individuals by case: (522 39 149 36 203 36 197 34 402 480)
Population mean number of perfect (error zero) cases: 2.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 1, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tagged_312} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 1, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Best program: (integer_add integer_yank in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) boolean_xor print_integer exec_rot () (boolean_yankdup integer_dup exec_yank integer_dup exec_yank) (exec_s_when_autoconstructing (in2) (exec_s_when_autoconstructing (boolean_rot) (integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times boolean_yank integer_lte boolean_stackdepth exec_flush exec_stackdepth) exec_stackdepth) exec_dup_times (in3 print_integer integer_pop integer_pop boolean_frominteger exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) exec_shove () exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger exec_flush) integer_stackdepth integer_dup_items tagged_312 boolean_eq boolean_and) (in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot print_newline integer_gt exec_if (in2) (boolean_frominteger exec_dup (boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup exec_swap () (exec_k () (exec_while (integer_inc in3 integer_lt) -86 exec_while ()))))))))) ()))
Errors: [0 0 0 0 0 0 0 0 1 1]
Total: 2
Mean: 0.2
Genome size: 90
Size: 128
Percent parens: 0.297
--- Population Statistics ---
Average total errors in population: 7.902
Median total errors in population: 7
Error averages by case: (0.478 0.961 0.851 0.964 0.797 0.964 0.803 0.966 0.598 0.52)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 92.911
Average program size in population (points): 131.374
Average percent parens in population: 0.293
Minimum age in population: 52.15909968619235
Maximum age in population: 55.49387694112374
Average age in population: 54.33944861056545
Median age in population: 54.36517837861902
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 43
Genome diversity (% unique genomes):	 0.8
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.798
Total error diversity:				 0.008
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.255
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 15671192
--- Timings ---
Current time: 1559582871722 milliseconds
Total Time:         101.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.1 seconds, 66.0%
Fitness Testing:     17.5 seconds, 17.2%
Report:              17.0 seconds, 16.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 618
Test mean error for best: 0.61800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 13                 
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 85                  | Program output: 85                 
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 87                 
Correct output: -73                 | Program output: 48                 
Correct output: -44                 | Program output: -44                
Correct output: -78                 | Program output: -78                
Correct output: 76                  | Program output: 76                 
Correct output: 51                  | Program output: 99                 
Correct output: -42                 | Program output: -16                
Correct output: -89                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: 47                  | Program output: 47                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output: 98                 
Correct output: 15                  | Program output: 86                 
Correct output: 2                   | Program output: 13                 
Correct output: 21                  | Program output: 42                 
Correct output: 3                   | Program output: 59                 
Correct output: 13                  | Program output: 43                 
Correct output: 16                  | Program output: 93                 
Correct output: 7                   | Program output: 7                  
Correct output: 42                  | Program output: 67                 
Correct output: 2                   | Program output: 64                 
Correct output: 23                  | Program output: 23                 
Correct output: 7                   | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 19                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 36                 
Correct output: 9                   | Program output: 84                 
Correct output: 33                  | Program output: 60                 
Correct output: 23                  | Program output: 76                 
Correct output: 29                  | Program output: 29                 
Correct output: -84                 | Program output: 47                 
Correct output: -14                 | Program output: -14                
Correct output: -88                 | Program output:                    
Correct output: -82                 | Program output: -27                
Correct output: -48                 | Program output: -48                
Correct output: 14                  | Program output: 92                 
Correct output: -94                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -90                 | Program output: -47                
Correct output: -73                 | Program output: 42                 
Correct output: -72                 | Program output: -72                
Correct output: -65                 | Program output: 15                 
Correct output: -96                 | Program output: -15                
Correct output: -5                  | Program output: 18                 
Correct output: -34                 | Program output: 50                 
Correct output: -23                 | Program output: -23                
Correct output: -54                 | Program output: 45                 
Correct output: -67                 | Program output: -6                 
Correct output: -96                 | Program output: -96                
Correct output: -57                 | Program output: -57                
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -97                
Correct output: -52                 | Program output: 12                 
Correct output: -72                 | Program output: -28                
Correct output: -86                 | Program output: 54                 
Correct output: -42                 | Program output: 41                 
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: 38                 
Correct output: -76                 | Program output: -76                
Correct output: 4                   | Program output: 8                  
Correct output: -31                 | Program output: -1                 
Correct output: -41                 | Program output: 49                 
Correct output: -5                  | Program output: 28                 
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -6                 
Correct output: -61                 | Program output: 3                  
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -43                
Correct output: -21                 | Program output: -7                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 54                 
Correct output: -79                 | Program output: -47                
Correct output: -97                 | Program output: 69                 
Correct output: -50                 | Program output: -8                 
Correct output: -89                 | Program output: -4                 
Correct output: -30                 | Program output: -30                
Correct output: -55                 | Program output: -55                
Correct output: -68                 | Program output: 22                 
Correct output: -77                 | Program output: 99                 
Correct output: -30                 | Program output: 11                 
Correct output: -68                 | Program output: -41                
Correct output: -45                 | Program output: -8                 
Correct output: -89                 | Program output: -46                
Correct output: -24                 | Program output: 72                 
Correct output: -82                 | Program output: -82                
Correct output: -98                 | Program output: 59                 
Correct output: -62                 | Program output: -4                 
Correct output: -69                 | Program output: 90                 
Correct output: -67                 | Program output: 33                 
Correct output: -65                 | Program output: -24                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_stackdepth} {:close 3, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Lexicase best program: (integer_yank integer_inc exec_when (in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) exec_s_when_autoconstructing (integer_dup_times boolean_flush integer_dup exec_yank) (exec_s_when_autoconstructing (in2) (integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_stackdepth) exec_stackdepth) ()) exec_dup_times (in3 print_integer integer_pop integer_pop boolean_frominteger exec_noop exec_y () in1) boolean_eq boolean_stackdepth exec_do*times () exec_shove (exec_swap (exec_k_when_autoconstructing (boolean_and in4 print_integer exec_yank) (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger exec_flush) integer_stackdepth integer_dup_items) (boolean_dup exec_k_when_autoconstructing (boolean_and in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup exec_swap (exec_y () exec_while (integer_inc in4 integer_lt) -86 exec_while ()) ()))) ())) ())))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 124
Percent parens: 0.306
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_stackdepth} {:close 3, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Zero cases best program: (integer_yank integer_inc exec_when (in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) exec_s_when_autoconstructing (integer_dup_times boolean_flush integer_dup exec_yank) (exec_s_when_autoconstructing (in2) (integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_stackdepth) exec_stackdepth) ()) exec_dup_times (in3 print_integer integer_pop integer_pop boolean_frominteger exec_noop exec_y () in1) boolean_eq boolean_stackdepth exec_do*times () exec_shove (exec_swap (exec_k_when_autoconstructing (boolean_and in4 print_integer exec_yank) (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger exec_flush) integer_stackdepth integer_dup_items) (boolean_dup exec_k_when_autoconstructing (boolean_and in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup exec_swap (exec_y () exec_while (integer_inc in4 integer_lt) -86 exec_while ()) ()))) ())) ())))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 124
Percent parens: 0.306
--- Lexicase Population Statistics ---
Count of elite individuals by case: (247 778 76 250 62 89 83 151 248 453)
Population mean number of elite cases: 2.44
Count of perfect (error zero) individuals by case: (247 778 76 250 62 89 83 151 248 453)
Population mean number of perfect (error zero) cases: 2.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_stackdepth} {:close 3, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Best program: (integer_yank in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) exec_s_when_autoconstructing (integer_dup_times boolean_flush integer_dup exec_yank) (exec_s_when_autoconstructing (in2) (exec_s_when_autoconstructing (boolean_rot) (integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_xor integer_lte boolean_stackdepth exec_flush exec_stackdepth exec_stackdepth) boolean_stackdepth exec_flush exec_stackdepth) (exec_stackdepth)) () exec_dup_times (in3 print_integer integer_pop integer_pop integer_max exec_noop exec_y () in1) boolean_eq boolean_stackdepth exec_do*times () exec_shove (exec_swap (exec_k_when_autoconstructing (boolean_and in4 print_integer exec_yank) (exec_do*range () exec_swap (boolean_shove) (exec_dup_items exec_yankdup boolean_frominteger exec_flush integer_stackdepth integer_dup_items) boolean_dup exec_k_when_autoconstructing (boolean_and in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup exec_swap (exec_y () exec_while (integer_inc in3 integer_lt) -86 exec_while ()) ()))) ())) ())) ()))
Errors: [0 0 0 0 1 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 90
Size: 130
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 7.563
Median total errors in population: 8
Error averages by case: (0.753 0.222 0.924 0.75 0.938 0.911 0.917 0.849 0.752 0.547)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 88.728
Average program size in population (points): 125.931
Average percent parens in population: 0.295
Minimum age in population: 54.52780299633741
Maximum age in population: 56.99565450209775
Average age in population: 56.14077804145988
Median age in population: 55.96890925196931
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 160
Genome diversity (% unique genomes):	 0.758
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 160
Syntactic diversity (% unique Push programs):	 0.757
Total error diversity:				 0.009
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.224
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 16114780
--- Timings ---
Current time: 1559582874452 milliseconds
Total Time:         104.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.9 seconds, 65.9%
Fitness Testing:     18.0 seconds, 17.2%
Report:              17.5 seconds, 16.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 571
Test mean error for best: 0.57100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 85                  | Program output: 95                 
Correct output: 36                  | Program output: 81                 
Correct output: 32                  | Program output: 32                 
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -44                
Correct output: -78                 | Program output: 86                 
Correct output: 76                  | Program output: 76                 
Correct output: 51                  | Program output: 99                 
Correct output: -42                 | Program output: -16                
Correct output: -89                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: 47                  | Program output: 47                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output: 46                 
Correct output: 15                  | Program output: 71                 
Correct output: 2                   | Program output: 2                  
Correct output: 21                  | Program output: 51                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 49                 
Correct output: 16                  | Program output: 36                 
Correct output: 7                   | Program output: 57                 
Correct output: 42                  | Program output: 99                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 37                 
Correct output: 7                   | Program output: 25                 
Correct output: 11                  | Program output: 100                
Correct output: 19                  | Program output: 19                 
Correct output: 6                   | Program output: 50                 
Correct output: 28                  | Program output: 67                 
Correct output: 9                   | Program output: 20                 
Correct output: 33                  | Program output: 33                 
Correct output: 23                  | Program output: 30                 
Correct output: 29                  | Program output: 37                 
Correct output: -84                 | Program output: -84                
Correct output: -14                 | Program output: 43                 
Correct output: -88                 | Program output: 12                 
Correct output: -82                 | Program output: -82                
Correct output: -48                 | Program output: -48                
Correct output: 14                  | Program output: 14                 
Correct output: -94                 | Program output: 10                 
Correct output: -69                 | Program output: -21                
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: -2                 
Correct output: -72                 | Program output: 54                 
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -15                
Correct output: -5                  | Program output: -5                 
Correct output: -34                 | Program output: 29                 
Correct output: -23                 | Program output: 83                 
Correct output: -54                 | Program output: 37                 
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -55                
Correct output: -57                 | Program output: -57                
Correct output: -90                 | Program output: -7                 
Correct output: -97                 | Program output: -97                
Correct output: -52                 | Program output: -52                
Correct output: -72                 | Program output: 84                 
Correct output: -86                 | Program output: 34                 
Correct output: -42                 | Program output: -42                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: 48                 
Correct output: -76                 | Program output: 42                 
Correct output: 4                   | Program output: 54                 
Correct output: -31                 | Program output: -1                 
Correct output: -41                 | Program output: -41                
Correct output: -5                  | Program output: 
(exec_yankdup exec_swap () (exec_k () (exec_while (integer_inc in3 integer_lt) -86 exec_while ())))(exec_yankdup exec_swap () (exec_k () (exec_while (integer_inc in3 integer_lt) -86 exec_while ())))
Correct output: -44                 | Program output: 77                 
Correct output: -66                 | Program output: -6                 
Correct output: -61                 | Program output: -61                
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 43                 
Correct output: -79                 | Program output: -79                
Correct output: -97                 | Program output: -15                
Correct output: -50                 | Program output: -8                 
Correct output: -89                 | Program output: -4                 
Correct output: -30                 | Program output: 80                 
Correct output: -55                 | Program output: 78                 
Correct output: -68                 | Program output: 26                 
Correct output: -77                 | Program output: -77                
Correct output: -30                 | Program output: 11                 
Correct output: -68                 | Program output: -41                
Correct output: -45                 | Program output: -8                 
Correct output: -89                 | Program output: -46                
Correct output: -24                 | Program output: -24                
Correct output: -82                 | Program output: -82                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -62                
Correct output: -69                 | Program output: 98                 
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -24                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_stackdepth} {:close 3, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Lexicase best program: (integer_yank in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) exec_s_when_autoconstructing (integer_dup_times boolean_flush integer_dup exec_yank) (exec_s_when_autoconstructing (in2) (exec_s_when_autoconstructing (boolean_rot) (integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_xor exec_yank) exec_s_when_autoconstructing (exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_stackdepth) (exec_stackdepth) ()) (exec_dup_times (in3 print_integer integer_pop integer_pop boolean_frominteger exec_noop exec_y () in1) boolean_eq boolean_stackdepth exec_do*times () exec_shove (exec_swap (exec_k_when_autoconstructing (boolean_and in4 print_integer exec_yank) (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger exec_flush) integer_stackdepth integer_dup_items) (boolean_dup exec_k_when_autoconstructing (boolean_and in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () in2 boolean_frominteger exec_dup () boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup exec_swap (exec_y () exec_while (integer_inc in3 integer_lt) -86 exec_while ()) ()))) ())) ())))) ())
Lexicase best errors: [0 0 0 1 1 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 144
Percent parens: 0.326
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_stackdepth} {:close 3, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Zero cases best program: (integer_yank in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) exec_s_when_autoconstructing (integer_dup_times boolean_flush integer_dup exec_yank) (exec_s_when_autoconstructing (in2) (exec_s_when_autoconstructing (boolean_rot) (integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_xor exec_yank) exec_s_when_autoconstructing (exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_yank integer_lte boolean_stackdepth exec_flush exec_stackdepth) (exec_stackdepth) ()) (exec_dup_times (in3 print_integer integer_pop integer_pop boolean_frominteger exec_noop exec_y () in1) boolean_eq boolean_stackdepth exec_do*times () exec_shove (exec_swap (exec_k_when_autoconstructing (boolean_and in4 print_integer exec_yank) (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger exec_flush) integer_stackdepth integer_dup_items) (boolean_dup exec_k_when_autoconstructing (boolean_and in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () in2 boolean_frominteger exec_dup () boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup exec_swap (exec_y () exec_while (integer_inc in3 integer_lt) -86 exec_while ()) ()))) ())) ())))) ())
Zero cases best errors: [0 0 0 1 1 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 144
Percent parens: 0.326
--- Lexicase Population Statistics ---
Count of elite individuals by case: (439 88 186 288 21 87 88 393 818 299)
Population mean number of elite cases: 2.71
Count of perfect (error zero) individuals by case: (439 88 186 288 21 87 88 393 818 299)
Population mean number of perfect (error zero) cases: 2.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_max} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tagged_312} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 1, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Best program: (integer_add integer_yank in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) boolean_xor integer_lte exec_rot () (boolean_yankdup integer_dup exec_yank integer_dup exec_yank) (exec_s_when_autoconstructing (in2) (exec_s_when_autoconstructing (boolean_rot) (integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times boolean_yank integer_lte boolean_stackdepth exec_flush exec_stackdepth) exec_stackdepth) exec_dup_times (in3 print_integer integer_pop integer_pop boolean_frominteger exec_noop exec_y () in1 boolean_eq boolean_stackdepth integer_max) exec_shove () exec_swap (exec_k_when_autoconstructing (boolean_and) (in4 print_integer exec_yank exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger exec_flush) integer_stackdepth integer_dup_items tagged_312 boolean_eq boolean_and) (in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot print_newline integer_gt exec_if (in2) (boolean_frominteger exec_dup (boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup exec_swap () (exec_k () (exec_while (integer_inc in3 integer_lt) -86 exec_while ()))))))))) ()))
Errors: [0 0 0 1 1 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 90
Size: 128
Percent parens: 0.297
--- Population Statistics ---
Average total errors in population: 7.293
Median total errors in population: 7
Error averages by case: (0.561 0.912 0.814 0.712 0.979 0.913 0.912 0.607 0.182 0.701)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 88.195
Average program size in population (points): 125.82
Average percent parens in population: 0.299
Minimum age in population: 55.69676479324698
Maximum age in population: 58.92755758322892
Average age in population: 57.87461316023408
Median age in population: 57.88620591448853
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 67
Genome diversity (% unique genomes):	 0.751
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 67
Syntactic diversity (% unique Push programs):	 0.75
Total error diversity:				 0.008
Error (vector) diversity:			 0.036
Behavioral diversity:				 0.267
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 16517286
--- Timings ---
Current time: 1559582877185 milliseconds
Total Time:         107.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.7 seconds, 65.9%
Fitness Testing:     18.5 seconds, 17.2%
Report:              17.9 seconds, 16.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 476
Test mean error for best: 0.47600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 15                 
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 85                  | Program output: 85                 
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 87                 
Correct output: -73                 | Program output: 48                 
Correct output: -44                 | Program output: -44                
Correct output: -78                 | Program output: -78                
Correct output: 76                  | Program output: 76                 
Correct output: 51                  | Program output: 99                 
Correct output: -42                 | Program output: -16                
Correct output: -89                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: 47                  | Program output: 47                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output: 98                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 0                  
Correct output: 21                  | Program output: 42                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output:                    
Correct output: 16                  | Program output: 93                 
Correct output: 7                   | Program output: 7                  
Correct output: 42                  | Program output: 67                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 23                 
Correct output: 7                   | Program output: 19                 
Correct output: 11                  | Program output: 11                 
Correct output: 19                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 36                 
Correct output: 9                   | Program output: 80                 
Correct output: 33                  | Program output: 60                 
Correct output: 23                  | Program output: 76                 
Correct output: 29                  | Program output: 29                 
Correct output: -84                 | Program output: -84                
Correct output: -14                 | Program output: 4                  
Correct output: -88                 | Program output: 12                 
Correct output: -82                 | Program output: -82                
Correct output: -48                 | Program output: 1                  
Correct output: 14                  | Program output: 92                 
Correct output: -94                 | Program output: 10                 
Correct output: -69                 | Program output: -21                
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: -2                 
Correct output: -72                 | Program output: -31                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -15                
Correct output: -5                  | Program output: 14                 
Correct output: -34                 | Program output: -34                
Correct output: -23                 | Program output: -23                
Correct output: -54                 | Program output: -28                
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -55                
Correct output: -57                 | Program output: -57                
Correct output: -90                 | Program output: -7                 
Correct output: -97                 | Program output:                    
Correct output: -52                 | Program output: 12                 
Correct output: -72                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: -42                 | Program output: -42                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -32                
Correct output: -76                 | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: -31                 | Program output: -1                 
Correct output: -41                 | Program output: 49                 
Correct output: -5                  | Program output: 7                  
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -6                 
Correct output: -61                 | Program output: 3                  
Correct output: -18                 | Program output: 26                 
Correct output: -81                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output:                    
Correct output: -97                 | Program output: -15                
Correct output: -50                 | Program output: -8                 
Correct output: -89                 | Program output: -4                 
Correct output: -30                 | Program output: -30                
Correct output: -55                 | Program output: 14                 
Correct output: -68                 | Program output: -68                
Correct output: -77                 | Program output: -77                
Correct output: -30                 | Program output: -23                
Correct output: -68                 | Program output: -41                
Correct output: -45                 | Program output: -8                 
Correct output: -89                 | Program output: -46                
Correct output: -24                 | Program output: -24                
Correct output: -82                 | Program output: -82                
Correct output: -98                 | Program output: 59                 
Correct output: -62                 | Program output: -62                
Correct output: -69                 | Program output: -69                
Correct output: -67                 | Program output: 33                 
Correct output: -65                 | Program output: -24                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_y} {:close 1, :instruction exec_stackdepth} {:close 3, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Lexicase best program: (integer_yank integer_inc exec_when (in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) in2) exec_s_when_autoconstructing (boolean_rot) (integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_xor integer_lte boolean_stackdepth exec_flush exec_stackdepth exec_stackdepth) exec_y () exec_stackdepth exec_stackdepth exec_dup_times (in3 print_integer integer_pop integer_pop boolean_frominteger exec_noop exec_y () in1) boolean_eq boolean_stackdepth exec_y () in1 boolean_eq boolean_stackdepth exec_do*times (exec_shove (exec_swap (exec_k_when_autoconstructing (boolean_and in4 print_integer exec_yank) (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger exec_flush) integer_stackdepth integer_dup_items) (boolean_dup exec_k_when_autoconstructing (boolean_and in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (exec_yankdup exec_swap (exec_y () exec_while (integer_inc in3 integer_lt) -86 exec_while ()) ()) ())) ()))))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 115
Percent parens: 0.287
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_y} {:close 1, :instruction exec_stackdepth} {:close 3, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Zero cases best program: (integer_yank integer_inc exec_when (in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) in2) exec_s_when_autoconstructing (boolean_rot) (integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_xor integer_lte boolean_stackdepth exec_flush exec_stackdepth exec_stackdepth) exec_y () exec_stackdepth exec_stackdepth exec_dup_times (in3 print_integer integer_pop integer_pop boolean_frominteger exec_noop exec_y () in1) boolean_eq boolean_stackdepth exec_y () in1 boolean_eq boolean_stackdepth exec_do*times (exec_shove (exec_swap (exec_k_when_autoconstructing (boolean_and in4 print_integer exec_yank) (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger exec_flush) integer_stackdepth integer_dup_items) (boolean_dup exec_k_when_autoconstructing (boolean_and in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (exec_yankdup exec_swap (exec_y () exec_while (integer_inc in3 integer_lt) -86 exec_while ()) ()) ())) ()))))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 115
Percent parens: 0.287
--- Lexicase Population Statistics ---
Count of elite individuals by case: (635 548 635 205 258 634 697 50 857 130)
Population mean number of elite cases: 4.65
Count of perfect (error zero) individuals by case: (635 548 635 205 258 634 697 50 857 130)
Population mean number of perfect (error zero) cases: 4.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_y} {:close 1, :instruction exec_stackdepth} {:close 3, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Best program: (integer_yank integer_inc exec_when (in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) in2) exec_s_when_autoconstructing (boolean_rot) (integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_xor integer_lte boolean_stackdepth exec_flush exec_stackdepth exec_stackdepth) exec_y () exec_stackdepth exec_stackdepth exec_dup_times (in3 print_integer integer_pop integer_pop boolean_frominteger exec_noop exec_y () in1) boolean_eq boolean_stackdepth exec_y () in1 boolean_eq boolean_stackdepth exec_do*times (exec_shove (exec_swap (exec_k_when_autoconstructing (boolean_and in4 print_integer exec_yank) (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger exec_flush) integer_stackdepth integer_dup_items) (boolean_dup exec_k_when_autoconstructing (boolean_and in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (exec_yankdup exec_swap (exec_y () exec_while (integer_inc in3 integer_lt) -86 exec_while ()) ()) ())) ()))))
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 82
Size: 115
Percent parens: 0.287
--- Population Statistics ---
Average total errors in population: 5.351
Median total errors in population: 4
Error averages by case: (0.365 0.452 0.365 0.795 0.742 0.366 0.303 0.95 0.143 0.87)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 89.486
Average program size in population (points): 128.969
Average percent parens in population: 0.305
Minimum age in population: 57.20837767068588
Maximum age in population: 60.86508568987483
Average age in population: 59.1750293809383
Median age in population: 59.25902177622265
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 34
Genome diversity (% unique genomes):	 0.797
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.797
Total error diversity:				 0.01
Error (vector) diversity:			 0.041
Behavioral diversity:				 0.279
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 16910743
--- Timings ---
Current time: 1559582879838 milliseconds
Total Time:         109.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.5 seconds, 65.9%
Fitness Testing:     18.9 seconds, 17.2%
Report:              18.4 seconds, 16.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 521
Test mean error for best: 0.52100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 85                  | Program output: 95                 
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 32                 
Correct output: -73                 | Program output: 48                 
Correct output: -44                 | Program output: -44                
Correct output: -78                 | Program output: -78                
Correct output: 76                  | Program output: 80                 
Correct output: 51                  | Program output: 99                 
Correct output: -42                 | Program output: -16                
Correct output: -89                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: 47                  | Program output: 47                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output: 87                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 21                  | Program output: 36                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 70                 
Correct output: 7                   | Program output: 57                 
Correct output: 42                  | Program output: 42                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 64                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 92                 
Correct output: 19                  | Program output: 56                 
Correct output: 6                   | Program output: 23                 
Correct output: 28                  | Program output: 28                 
Correct output: 9                   | Program output: 9                  
Correct output: 33                  | Program output: 55                 
Correct output: 23                  | Program output: 56                 
Correct output: 29                  | Program output: 59                 
Correct output: -84                 | Program output: -84                
Correct output: -14                 | Program output: 4                  
Correct output: -88                 | Program output: -88                
Correct output: -82                 | Program output: -82                
Correct output: -48                 | Program output: -48                
Correct output: 14                  | Program output: 99                 
Correct output: -94                 | Program output: -71                
Correct output: -69                 | Program output: -21                
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: -2                 
Correct output: -72                 | Program output: -31                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -15                
Correct output: -5                  | Program output: 14                 
Correct output: -34                 | Program output: -34                
Correct output: -23                 | Program output: 61                 
Correct output: -54                 | Program output: -28                
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -55                
Correct output: -57                 | Program output: -57                
Correct output: -90                 | Program output: -7                 
Correct output: -97                 | Program output: 5                  
Correct output: -52                 | Program output: 83                 
Correct output: -72                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: -42                 | Program output: -42                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -32                
Correct output: -76                 | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: -31                 | Program output: -1                 
Correct output: -41                 | Program output: 24                 
Correct output: -5                  | Program output: -5                 
Correct output: -44                 | Program output: 90                 
Correct output: -66                 | Program output: -6                 
Correct output: -61                 | Program output: 53                 
Correct output: -18                 | Program output: 6                  
Correct output: -81                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: 93                 
Correct output: -97                 | Program output: -15                
Correct output: -50                 | Program output: -8                 
Correct output: -89                 | Program output: -4                 
Correct output: -30                 | Program output: 97                 
Correct output: -55                 | Program output: 14                 
Correct output: -68                 | Program output: -68                
Correct output: -77                 | Program output: -77                
Correct output: -30                 | Program output: -23                
Correct output: -68                 | Program output: -41                
Correct output: -45                 | Program output: -8                 
Correct output: -89                 | Program output: -46                
Correct output: -24                 | Program output: -24                
Correct output: -82                 | Program output: 56                 
Correct output: -98                 | Program output: 93                 
Correct output: -62                 | Program output: -62                
Correct output: -69                 | Program output: -69                
Correct output: -67                 | Program output: 99                 
Correct output: -65                 | Program output: -24                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_stackdepth} {:close 4, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Lexicase best program: (integer_yank integer_inc integer_yank in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) exec_s_when_autoconstructing (integer_dup_times) (boolean_flush integer_dup exec_yank) (exec_s_when_autoconstructing (in2) (exec_s_when_autoconstructing (boolean_rot) (integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times boolean_xor exec_yank) exec_s_when_autoconstructing (exec_s_when_autoconstructing (print_integer integer_flush) (boolean_not integer_dup_times) () boolean_yank integer_lte boolean_stackdepth exec_flush exec_stackdepth) (exec_stackdepth) ())) (exec_dup_times (exec_y () in1) boolean_eq boolean_stackdepth exec_y () in1) boolean_eq boolean_stackdepth exec_do*times (exec_shove (exec_swap (exec_k_when_autoconstructing (boolean_and in4 print_integer exec_yank) (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger exec_flush) integer_stackdepth integer_dup_items) (boolean_dup exec_k_when_autoconstructing (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger exec_flush) (integer_stackdepth integer_dup_items) boolean_dup exec_k_when_autoconstructing (boolean_and in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () in2 boolean_frominteger exec_dup () boolean_frominteger exec_dup () exec_do*count (print_exec () exec_yankdup exec_swap (exec_y () exec_while (integer_inc in3 integer_lt) -86 exec_while ()) ())) ())) ())))))
Lexicase best errors: [0 0 1 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 161
Percent parens: 0.329
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_stackdepth} {:close 4, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Zero cases best program: (integer_yank integer_inc integer_yank in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) exec_s_when_autoconstructing (integer_dup_times) (boolean_flush integer_dup exec_yank) (exec_s_when_autoconstructing (in2) (exec_s_when_autoconstructing (boolean_rot) (integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times boolean_xor exec_yank) exec_s_when_autoconstructing (exec_s_when_autoconstructing (print_integer integer_flush) (boolean_not integer_dup_times) () boolean_yank integer_lte boolean_stackdepth exec_flush exec_stackdepth) (exec_stackdepth) ())) (exec_dup_times (exec_y () in1) boolean_eq boolean_stackdepth exec_y () in1) boolean_eq boolean_stackdepth exec_do*times (exec_shove (exec_swap (exec_k_when_autoconstructing (boolean_and in4 print_integer exec_yank) (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger exec_flush) integer_stackdepth integer_dup_items) (boolean_dup exec_k_when_autoconstructing (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger exec_flush) (integer_stackdepth integer_dup_items) boolean_dup exec_k_when_autoconstructing (boolean_and in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () in2 boolean_frominteger exec_dup () boolean_frominteger exec_dup () exec_do*count (print_exec () exec_yankdup exec_swap (exec_y () exec_while (integer_inc in3 integer_lt) -86 exec_while ()) ())) ())) ())))))
Zero cases best errors: [0 0 1 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 161
Percent parens: 0.329
--- Lexicase Population Statistics ---
Count of elite individuals by case: (156 511 18 216 4 82 799 496 867 853)
Population mean number of elite cases: 4.00
Count of perfect (error zero) individuals by case: (156 511 18 216 4 82 799 496 867 853)
Population mean number of perfect (error zero) cases: 4.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_stackdepth} {:close 4, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Best program: (integer_yank integer_inc integer_yank in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) exec_s_when_autoconstructing (integer_dup_times) (boolean_flush integer_dup exec_yank) (exec_s_when_autoconstructing (in2) (exec_s_when_autoconstructing (boolean_rot) (integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times boolean_xor exec_yank) exec_s_when_autoconstructing (exec_s_when_autoconstructing (print_integer integer_flush) (boolean_not integer_dup_times) () boolean_yank integer_lte boolean_stackdepth exec_flush exec_stackdepth) (exec_stackdepth) ())) (exec_dup_times (exec_y () in1) boolean_eq boolean_stackdepth exec_y () in1) boolean_eq boolean_stackdepth exec_do*times (exec_shove (exec_swap (exec_k_when_autoconstructing (boolean_and in4 print_integer exec_yank) (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger exec_flush) integer_stackdepth integer_dup_items) (boolean_dup exec_k_when_autoconstructing (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger exec_flush) (integer_stackdepth integer_dup_items) boolean_dup exec_k_when_autoconstructing (boolean_and in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () in2 boolean_frominteger exec_dup () boolean_frominteger exec_dup () exec_do*count (print_exec () exec_yankdup exec_swap (exec_y () exec_while (integer_inc in3 integer_lt) -86 exec_while ()) ())) ())) ())))))
Errors: [0 0 1 1 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 108
Size: 161
Percent parens: 0.329
--- Population Statistics ---
Average total errors in population: 5.998
Median total errors in population: 5
Error averages by case: (0.844 0.489 0.982 0.784 0.996 0.918 0.201 0.504 0.133 0.147)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 85.171
Average program size in population (points): 121.241
Average percent parens in population: 0.297
Minimum age in population: 59.36227317711746
Maximum age in population: 62.36508568987483
Average age in population: 60.42104883782106
Median age in population: 60.61073325642974
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 166
Genome diversity (% unique genomes):	 0.76
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 167
Syntactic diversity (% unique Push programs):	 0.758
Total error diversity:				 0.008
Error (vector) diversity:			 0.051
Behavioral diversity:				 0.24
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 17271403
--- Timings ---
Current time: 1559582882453 milliseconds
Total Time:         112.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.3 seconds, 66.0%
Fitness Testing:     19.3 seconds, 17.1%
Report:              18.9 seconds, 16.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Smallest problem report - generation 41
Test total error for best: 563
Test mean error for best: 0.56300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 85                  | Program output: 85                 
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 87                 
Correct output: -73                 | Program output: 48                 
Correct output: -44                 | Program output: -44                
Correct output: -78                 | Program output: -78                
Correct output: 76                  | Program output: 76                 
Correct output: 51                  | Program output: 99                 
Correct output: -42                 | Program output: -42                
Correct output: -89                 | Program output: -89                
Correct output: -35                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: 47                  | Program output: 47                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output: 98                 
Correct output: 15                  | Program output: 71                 
Correct output: 2                   | Program output:                    
Correct output: 21                  | Program output: 42                 
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 21                 
Correct output: 16                  | Program output: 93                 
Correct output: 7                   | Program output: 7                  
Correct output: 42                  | Program output: 67                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 23                 
Correct output: 7                   | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 19                  | Program output: 23                 
Correct output: 6                   | Program output: 6                  
Correct output: 28                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 33                  | Program output: 60                 
Correct output: 23                  | Program output: 76                 
Correct output: 29                  | Program output: 29                 
Correct output: -84                 | Program output: 47                 
Correct output: -14                 | Program output: 43                 
Correct output: -88                 | Program output: -88                
Correct output: -82                 | Program output: -27                
Correct output: -48                 | Program output: 0                  
Correct output: 14                  | Program output: 92                 
Correct output: -94                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -90                 | Program output: -47                
Correct output: -73                 | Program output: 42                 
Correct output: -72                 | Program output: -31                
Correct output: -65                 | Program output: 15                 
Correct output: -96                 | Program output: -17                
Correct output: -5                  | Program output:                    
Correct output: -34                 | Program output: -34                
Correct output: -23                 | Program output: -23                
Correct output: -54                 | Program output: -28                
Correct output: -67                 | Program output:                    
Correct output: -96                 | Program output: -96                
Correct output: -57                 | Program output: -28                
Correct output: -90                 | Program output: -7                 
Correct output: -97                 | Program output: 0                  
Correct output: -52                 | Program output: 12                 
Correct output: -72                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: -42                 | Program output: 41                 
Correct output: -86                 | Program output: -3                 
Correct output: -90                 | Program output: -32                
Correct output: -76                 | Program output: -76                
Correct output: 4                   | Program output: 54                 
Correct output: -31                 | Program output: -31                
Correct output: -41                 | Program output: 49                 
Correct output: -5                  | Program output: -5                 
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -51                
Correct output: -61                 | Program output: 3                  
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -21                 | Program output: -7                 
Correct output: -98                 | Program output:                    
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: -47                
Correct output: -97                 | Program output: 69                 
Correct output: -50                 | Program output: -14                
Correct output: -89                 | Program output: -89                
Correct output: -30                 | Program output: -30                
Correct output: -55                 | Program output:                    
Correct output: -68                 | Program output: -68                
Correct output: -77                 | Program output: 99                 
Correct output: -30                 | Program output: -23                
Correct output: -68                 | Program output: -14                
Correct output: -45                 | Program output: -45                
Correct output: -89                 | Program output: -89                
Correct output: -24                 | Program output: 72                 
Correct output: -82                 | Program output: -82                
Correct output: -98                 | Program output: 59                 
Correct output: -62                 | Program output: -43                
Correct output: -69                 | Program output: -69                
Correct output: -67                 | Program output: 33                 
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 1, :instruction in2} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_stackdepth} {:close 3, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Lexicase best program: (integer_yank integer_inc boolean_rot in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) in2 integer_yank boolean_rot integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_xor integer_lte boolean_stackdepth exec_flush exec_stackdepth boolean_yank integer_lte boolean_stackdepth exec_flush exec_stackdepth exec_stackdepth exec_dup_times (in3 print_integer integer_pop integer_pop boolean_frominteger boolean_not exec_y () in1) boolean_eq boolean_stackdepth exec_do*times () exec_shove (exec_swap (exec_k_when_autoconstructing (boolean_and in4 print_integer exec_yank) (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup exec_yank) exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger exec_flush) (integer_stackdepth integer_dup_items) boolean_dup exec_k_when_autoconstructing (boolean_and in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () in2 boolean_frominteger exec_dup () boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup exec_swap (exec_y () exec_while (integer_inc in3 integer_lt) -86 exec_while ()) ()))) ())) ()))
Lexicase best errors: [1 1 0 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 131
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 1, :instruction in2} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_stackdepth} {:close 3, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Zero cases best program: (integer_yank integer_inc boolean_rot in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) in2 integer_yank boolean_rot integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_xor integer_lte boolean_stackdepth exec_flush exec_stackdepth boolean_yank integer_lte boolean_stackdepth exec_flush exec_stackdepth exec_stackdepth exec_dup_times (in3 print_integer integer_pop integer_pop boolean_frominteger boolean_not exec_y () in1) boolean_eq boolean_stackdepth exec_do*times () exec_shove (exec_swap (exec_k_when_autoconstructing (boolean_and in4 print_integer exec_yank) (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup exec_yank) exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger exec_flush) (integer_stackdepth integer_dup_items) boolean_dup exec_k_when_autoconstructing (boolean_and in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () in2 boolean_frominteger exec_dup () boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup exec_swap (exec_y () exec_while (integer_inc in3 integer_lt) -86 exec_while ()) ()))) ())) ()))
Zero cases best errors: [1 1 0 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 131
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (122 199 113 454 649 831 909 395 34 2)
Population mean number of elite cases: 3.71
Count of perfect (error zero) individuals by case: (122 199 113 454 649 831 909 395 34 2)
Population mean number of perfect (error zero) cases: 3.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 1, :instruction in2} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_stackdepth} {:close 3, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Best program: (integer_yank integer_inc boolean_rot in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) in2 integer_yank boolean_rot integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_xor integer_lte boolean_stackdepth exec_flush exec_stackdepth boolean_yank integer_lte boolean_stackdepth exec_flush exec_stackdepth exec_stackdepth exec_dup_times (in3 print_integer integer_pop integer_pop boolean_frominteger boolean_not exec_y () in1) boolean_eq boolean_stackdepth exec_do*times () exec_shove (exec_swap (exec_k_when_autoconstructing (boolean_and in4 print_integer exec_yank) (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup exec_yank) exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger exec_flush) (integer_stackdepth integer_dup_items) boolean_dup exec_k_when_autoconstructing (boolean_and in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () in2 boolean_frominteger exec_dup () boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup exec_swap (exec_y () exec_while (integer_inc in3 integer_lt) -86 exec_while ()) ()))) ())) ()))
Errors: [1 1 0 0 1 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 96
Size: 131
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 6.292
Median total errors in population: 6
Error averages by case: (0.878 0.801 0.887 0.546 0.351 0.169 0.091 0.605 0.966 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 96.58
Average program size in population (points): 141.708
Average percent parens in population: 0.317
Minimum age in population: 60.49924490464036
Maximum age in population: 63.45219345273836
Average age in population: 62.05034400136066
Median age in population: 62.05498908053505
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 79
Genome diversity (% unique genomes):	 0.799
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 79
Syntactic diversity (% unique Push programs):	 0.798
Total error diversity:				 0.007
Error (vector) diversity:			 0.04
Behavioral diversity:				 0.168
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 17738463
--- Timings ---
Current time: 1559582885236 milliseconds
Total Time:         115.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        76.1 seconds, 66.0%
Fitness Testing:     19.7 seconds, 17.1%
Report:              19.3 seconds, 16.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Smallest problem report - generation 42
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 85                  | Program output: 95                 
Correct output: 36                  | Program output: 81                 
Correct output: 32                  | Program output: 32                 
Correct output: -73                 | Program output: -73                
Correct output: -44                 | Program output: -44                
Correct output: -78                 | Program output: -78                
Correct output: 76                  | Program output: 76                 
Correct output: 51                  | Program output: 99                 
Correct output: -42                 | Program output: -16                
Correct output: -89                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: 47                  | Program output: 47                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output: 46                 
Correct output: 15                  | Program output: 71                 
Correct output: 2                   | Program output: 87                 
Correct output: 21                  | Program output: 51                 
Correct output: 3                   | Program output: 74                 
Correct output: 13                  | Program output: 49                 
Correct output: 16                  | Program output: 36                 
Correct output: 7                   | Program output: 57                 
Correct output: 42                  | Program output: 99                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 37                 
Correct output: 7                   | Program output: 25                 
Correct output: 11                  | Program output: 100                
Correct output: 19                  | Program output: 19                 
Correct output: 6                   | Program output: 50                 
Correct output: 28                  | Program output: 67                 
Correct output: 9                   | Program output: 20                 
Correct output: 33                  | Program output: 33                 
Correct output: 23                  | Program output: 30                 
Correct output: 29                  | Program output: 37                 
Correct output: -84                 | Program output: 47                 
Correct output: -14                 | Program output: 42                 
Correct output: -88                 | Program output: 4                  
Correct output: -82                 | Program output: -27                
Correct output: -48                 | Program output: 65                 
Correct output: 14                  | Program output: 14                 
Correct output: -94                 | Program output: 28                 
Correct output: -69                 | Program output: -69                
Correct output: -90                 | Program output: -47                
Correct output: -73                 | Program output: 42                 
Correct output: -72                 | Program output: -43                
Correct output: -65                 | Program output: 15                 
Correct output: -96                 | Program output: -71                
Correct output: -5                  | Program output: -5                 
Correct output: -34                 | Program output: 63                 
Correct output: -23                 | Program output: 83                 
Correct output: -54                 | Program output: -54                
Correct output: -67                 | Program output: -6                 
Correct output: -96                 | Program output: -96                
Correct output: -57                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -97                 | Program output: -97                
Correct output: -52                 | Program output: -52                
Correct output: -72                 | Program output: -37                
Correct output: -86                 | Program output: 75                 
Correct output: -42                 | Program output: 41                 
Correct output: -86                 | Program output: -16                
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: -55                
Correct output: 4                   | Program output: 11                 
Correct output: -31                 | Program output: 57                 
Correct output: -41                 | Program output: -41                
Correct output: -5                  | Program output: 28                 
Correct output: -44                 | Program output: 77                 
Correct output: -66                 | Program output: -66                
Correct output: -61                 | Program output: -61                
Correct output: -18                 | Program output: 26                 
Correct output: -81                 | Program output: -64                
Correct output: -21                 | Program output: -7                 
Correct output: -98                 | Program output: 64                 
Correct output: -100                | Program output: 29                 
Correct output: -79                 | Program output: -79                
Correct output: -97                 | Program output: 69                 
Correct output: -50                 | Program output: -50                
Correct output: -89                 | Program output: -59                
Correct output: -30                 | Program output: 80                 
Correct output: -55                 | Program output: 78                 
Correct output: -68                 | Program output: -6                 
Correct output: -77                 | Program output: 99                 
Correct output: -30                 | Program output: 92                 
Correct output: -68                 | Program output: -53                
Correct output: -45                 | Program output: -41                
Correct output: -89                 | Program output: 32                 
Correct output: -24                 | Program output: 72                 
Correct output: -82                 | Program output: -82                
Correct output: -98                 | Program output: -98                
Correct output: -62                 | Program output: -4                 
Correct output: -69                 | Program output: 4                  
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: 28                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_stackdepth} {:close 4, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Lexicase best program: (integer_yank in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) exec_s_when_autoconstructing (integer_dup_times) (boolean_flush integer_dup in3) (exec_s_when_autoconstructing (in2) (exec_s_when_autoconstructing (boolean_rot) (integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times boolean_xor exec_yank) exec_s_when_autoconstructing (exec_s_when_autoconstructing (print_integer integer_flush) (boolean_not integer_dup_times) () boolean_yank integer_lte boolean_stackdepth exec_flush exec_stackdepth) (exec_stackdepth) ())) (exec_dup_times (in3) print_integer integer_pop integer_pop boolean_frominteger exec_noop exec_y () in1) boolean_eq boolean_stackdepth exec_do*times () exec_shove (exec_swap (exec_k_when_autoconstructing (boolean_and in4 print_integer exec_yank) (exec_do*range () exec_swap () (boolean_shove) exec_yank) exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger exec_flush) (integer_stackdepth integer_dup_items) boolean_dup exec_k_when_autoconstructing (boolean_and in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () in2 boolean_frominteger exec_dup () boolean_frominteger integer_pop) (exec_do*count (print_exec () exec_yankdup exec_swap (exec_y () boolean_empty integer_inc in3 integer_lt) (-86 exec_while ()))))) ())))
Lexicase best errors: [0 1 1 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 149
Percent parens: 0.322
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_stackdepth} {:close 4, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Zero cases best program: (integer_yank in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) exec_s_when_autoconstructing (integer_dup_times) (boolean_flush integer_dup in3) (exec_s_when_autoconstructing (in2) (exec_s_when_autoconstructing (boolean_rot) (integer_dup exec_yank) (exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times boolean_xor exec_yank) exec_s_when_autoconstructing (exec_s_when_autoconstructing (print_integer integer_flush) (boolean_not integer_dup_times) () boolean_yank integer_lte boolean_stackdepth exec_flush exec_stackdepth) (exec_stackdepth) ())) (exec_dup_times (in3) print_integer integer_pop integer_pop boolean_frominteger exec_noop exec_y () in1) boolean_eq boolean_stackdepth exec_do*times () exec_shove (exec_swap (exec_k_when_autoconstructing (boolean_and in4 print_integer exec_yank) (exec_do*range () exec_swap () (boolean_shove) exec_yank) exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger exec_flush) (integer_stackdepth integer_dup_items) boolean_dup exec_k_when_autoconstructing (boolean_and in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () in2 boolean_frominteger exec_dup () boolean_frominteger integer_pop) (exec_do*count (print_exec () exec_yankdup exec_swap (exec_y () boolean_empty integer_inc in3 integer_lt) (-86 exec_while ()))))) ())))
Zero cases best errors: [0 1 1 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 149
Percent parens: 0.322
--- Lexicase Population Statistics ---
Count of elite individuals by case: (889 19 387 287 511 77 108 74 343 197)
Population mean number of elite cases: 2.89
Count of perfect (error zero) individuals by case: (889 19 387 287 511 77 108 74 343 197)
Population mean number of perfect (error zero) cases: 2.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_stackdepth} {:close 4, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction -86} {:close 0, :instruction exec_while})
Best program: (integer_yank in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) exec_s_when_autoconstructing (integer_dup_times) (boolean_flush integer_dup exec_yank) (exec_s_when_autoconstructing (in2) (exec_s_when_autoconstructing (boolean_rot) (integer_dup exec_eq) (exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times exec_do*while (exec_yank) exec_s_when_autoconstructing (print_exec (print_integer integer_flush) boolean_not integer_dup_times) () (boolean_yank integer_lte boolean_stackdepth exec_flush exec_stackdepth) exec_stackdepth))) () exec_dup_times (in3 print_integer integer_pop integer_pop boolean_frominteger boolean_not exec_y () in1) boolean_eq boolean_stackdepth exec_do*times () exec_shove (exec_swap (exec_k_when_autoconstructing (boolean_and in4 print_integer exec_yank) (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup exec_yank) exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger exec_flush) (integer_stackdepth integer_dup_items) boolean_dup exec_k_when_autoconstructing (boolean_and in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () in2 boolean_frominteger exec_dup () boolean_frominteger exec_dup () exec_do*count (print_exec (exec_yankdup integer_yankdup exec_y () exec_while (integer_inc in3 integer_lt) -86 exec_while ()))) ())) ())))
Errors: [0 1 1 0 1 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 103
Size: 150
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 7.108
Median total errors in population: 7
Error averages by case: (0.111 0.981 0.613 0.713 0.489 0.923 0.892 0.926 0.657 0.803)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 95.6
Average program size in population (points): 137.791
Average percent parens in population: 0.305
Minimum age in population: 61.49924490464036
Maximum age in population: 65.03146335458405
Average age in population: 63.83683035562238
Median age in population: 64.02722259643201
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 54
Genome diversity (% unique genomes):	 0.814
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.811
Total error diversity:				 0.007
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.127
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 18105222
--- Timings ---
Current time: 1559582888112 milliseconds
Total Time:         118.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        77.9 seconds, 66.0%
Fitness Testing:     20.1 seconds, 17.0%
Report:              19.8 seconds, 16.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Smallest problem report - generation 43
Test total error for best: 491
Test mean error for best: 0.49100
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 1
Test Case    9 | Error: 0
Test Case   10 | Error: 1
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 1
Test Case   17 | Error: 1
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 1
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 1
Test Case   30 | Error: 1
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 1
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 1
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 1
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 1
Test Case   57 | Error: 0
Test Case   58 | Error: 1
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 1
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 1
Test Case   76 | Error: 1
Test Case   77 | Error: 1
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 1
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 1
Test Case   85 | Error: 1
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 1
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 1
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 1
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 1
Test Case  106 | Error: 1
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 1
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 1
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 1
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 1
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 1
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 1
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 1
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 1
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 1
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 1
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 1
Test Case  310 | Error: 1
Test Case  311 | Error: 1
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 1
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 1
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 1
Test Case  367 | Error: 1
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 1
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 1
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 1
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 1
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 1
Test Case  446 | Error: 1
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 1
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 1
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 1
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 1
Test Case  511 | Error: 1
Test Case  512 | Error: 1
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 1
Test Case  527 | Error: 1
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 1
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 1
Test Case  556 | Error: 1
Test Case  557 | Error: 1
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 1
Test Case  562 | Error: 1
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 1
Test Case  567 | Error: 1
Test Case  568 | Error: 1
Test Case  569 | Error: 1
Test Case  570 | Error: 1
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 1
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 1
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 1
Test Case  597 | Error: 1
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 1
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 1
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 1
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 0
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 1
Test Case  718 | Error: 1
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 1
Test Case  727 | Error: 1
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 1
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 1
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 1
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 1
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 1
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 1
Test Case  934 | Error: 1
Test Case  935 | Error: 1
Test Case  936 | Error: 1
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 1
Test Case  942 | Error: 1
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 1
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 1
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 1
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 1
Test Case  976 | Error: 1
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 85                  | Program output: 85                 
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 87                 
Correct output: -73                 | Program output: 48                 
Correct output: -44                 | Program output: -44                
Correct output: -78                 | Program output: -78                
Correct output: 76                  | Program output: 76                 
Correct output: 51                  | Program output: 99                 
Correct output: -42                 | Program output: -16                
Correct output: -89                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: 47                  | Program output: 47                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output:                    
Correct output: 15                  | Program output: 24                 
Correct output: 2                   | Program output: 13                 
Correct output: 21                  | Program output: 0                  
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 28                 
Correct output: 7                   | Program output: 57                 
Correct output: 42                  | Program output: 67                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 23                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 11                 
Correct output: 19                  | Program output: 23                 
Correct output: 6                   | Program output: 23                 
Correct output: 28                  | Program output: 28                 
Correct output: 9                   | Program output: 0                  
Correct output: 33                  | Program output: 60                 
Correct output: 23                  | Program output: 23                 
Correct output: 29                  | Program output: 29                 
Correct output: -84                 | Program output: -84                
Correct output: -14                 | Program output: 4                  
Correct output: -88                 | Program output: 12                 
Correct output: -82                 | Program output: -82                
Correct output: -48                 | Program output:                    
Correct output: 14                  | Program output: 92                 
Correct output: -94                 | Program output: 10                 
Correct output: -69                 | Program output: -21                
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: -2                 
Correct output: -72                 | Program output: -31                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -15                
Correct output: -5                  | Program output: 14                 
Correct output: -34                 | Program output: -34                
Correct output: -23                 | Program output: -23                
Correct output: -54                 | Program output: -28                
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -55                
Correct output: -57                 | Program output: -57                
Correct output: -90                 | Program output: -7                 
Correct output: -97                 | Program output:                    
Correct output: -52                 | Program output: 12                 
Correct output: -72                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: -42                 | Program output: -42                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -32                
Correct output: -76                 | Program output: -76                
Correct output: 4                   | Program output: 4                  
Correct output: -31                 | Program output: -1                 
Correct output: -41                 | Program output: 0                  
Correct output: -5                  | Program output:                    
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -6                 
Correct output: -61                 | Program output: 3                  
Correct output: -18                 | Program output: 0                  
Correct output: -81                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: 14                 
Correct output: -97                 | Program output: -15                
Correct output: -50                 | Program output: -8                 
Correct output: -89                 | Program output: -4                 
Correct output: -30                 | Program output: -30                
Correct output: -55                 | Program output: 14                 
Correct output: -68                 | Program output: 0                  
Correct output: -77                 | Program output: -77                
Correct output: -30                 | Program output: -23                
Correct output: -68                 | Program output: -41                
Correct output: -45                 | Program output: -8                 
Correct output: -89                 | Program output: -46                
Correct output: -24                 | Program output: -24                
Correct output: -82                 | Program output: -82                
Correct output: -98                 | Program output: 59                 
Correct output: -62                 | Program output: -62                
Correct output: -69                 | Program output: -69                
Correct output: -67                 | Program output: 33                 
Correct output: -65                 | Program output: -24                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 1, :instruction in2} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_div} {:close 4, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while})
Lexicase best program: (exec_k (integer_inc boolean_rot in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) in2) (integer_yank boolean_rot) integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_xor integer_lte boolean_stackdepth exec_flush exec_stackdepth integer_flush boolean_not integer_dup_times boolean_xor exec_yank exec_s_when_autoconstructing (exec_s_when_autoconstructing (print_integer integer_flush) (boolean_not integer_dup_times) () boolean_yank integer_lte boolean_stackdepth exec_flush integer_div) (exec_stackdepth) () exec_dup_times (exec_y () in1) boolean_eq boolean_stackdepth exec_y () in1 boolean_eq boolean_stackdepth exec_do*times (exec_shove (exec_swap (exec_k_when_autoconstructing (boolean_and in4 print_integer exec_yank) (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger exec_flush) integer_stackdepth integer_dup_items) (boolean_dup exec_k_when_autoconstructing (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger boolean_yankdup) (integer_stackdepth integer_dup_items) boolean_dup exec_k_when_autoconstructing (boolean_and in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () in2 boolean_frominteger exec_dup () boolean_frominteger exec_dup () exec_do*count (print_exec () exec_yankdup exec_swap (exec_y () exec_while (integer_inc in3 integer_lt) exec_k_when_autoconstructing (exec_while ()) ()) ())) ())) ()))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 158
Percent parens: 0.304
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 1, :instruction in2} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_div} {:close 4, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while})
Zero cases best program: (exec_k (integer_inc boolean_rot in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) in2) (integer_yank boolean_rot) integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_xor integer_lte boolean_stackdepth exec_flush exec_stackdepth integer_flush boolean_not integer_dup_times boolean_xor exec_yank exec_s_when_autoconstructing (exec_s_when_autoconstructing (print_integer integer_flush) (boolean_not integer_dup_times) () boolean_yank integer_lte boolean_stackdepth exec_flush integer_div) (exec_stackdepth) () exec_dup_times (exec_y () in1) boolean_eq boolean_stackdepth exec_y () in1 boolean_eq boolean_stackdepth exec_do*times (exec_shove (exec_swap (exec_k_when_autoconstructing (boolean_and in4 print_integer exec_yank) (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger exec_flush) integer_stackdepth integer_dup_items) (boolean_dup exec_k_when_autoconstructing (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger boolean_yankdup) (integer_stackdepth integer_dup_items) boolean_dup exec_k_when_autoconstructing (boolean_and in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () in2 boolean_frominteger exec_dup () boolean_frominteger exec_dup () exec_do*count (print_exec () exec_yankdup exec_swap (exec_y () exec_while (integer_inc in3 integer_lt) exec_k_when_autoconstructing (exec_while ()) ()) ())) ())) ()))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 158
Percent parens: 0.304
--- Lexicase Population Statistics ---
Count of elite individuals by case: (28 82 382 850 646 850 217 216 398 162)
Population mean number of elite cases: 3.83
Count of perfect (error zero) individuals by case: (28 82 382 850 646 850 217 216 398 162)
Population mean number of perfect (error zero) cases: 3.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 1, :instruction in2} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_div} {:close 4, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while})
Best program: (exec_k (integer_inc boolean_rot in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) in2) (integer_yank boolean_rot) integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_xor integer_lte boolean_stackdepth exec_flush exec_stackdepth integer_flush boolean_not integer_dup_times boolean_xor exec_yank exec_s_when_autoconstructing (exec_s_when_autoconstructing (print_integer integer_flush) (boolean_not integer_dup_times) () boolean_yank integer_lte boolean_stackdepth exec_flush integer_div) (exec_stackdepth) () exec_dup_times (exec_y () in1) boolean_eq boolean_stackdepth exec_y () in1 boolean_eq boolean_stackdepth exec_do*times (exec_shove (exec_swap (exec_k_when_autoconstructing (boolean_and in4 print_integer exec_yank) (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger exec_flush) integer_stackdepth integer_dup_items) (boolean_dup exec_k_when_autoconstructing (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger boolean_yankdup) (integer_stackdepth integer_dup_items) boolean_dup exec_k_when_autoconstructing (boolean_and in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () in2 boolean_frominteger exec_dup () boolean_frominteger exec_dup () exec_do*count (print_exec () exec_yankdup exec_swap (exec_y () exec_while (integer_inc in3 integer_lt) exec_k_when_autoconstructing (exec_while ()) ()) ())) ())) ()))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 110
Size: 158
Percent parens: 0.304
--- Population Statistics ---
Average total errors in population: 6.169
Median total errors in population: 6
Error averages by case: (0.972 0.918 0.618 0.15 0.354 0.15 0.783 0.784 0.602 0.838)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 87.827
Average program size in population (points): 127.242
Average percent parens in population: 0.308
Minimum age in population: 63.49924490464036
Maximum age in population: 66.88398328567882
Average age in population: 65.52689526215693
Median age in population: 65.66647743232443
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 66
Genome diversity (% unique genomes):	 0.748
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.746
Total error diversity:				 0.011
Error (vector) diversity:			 0.042
Behavioral diversity:				 0.203
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 18632646
--- Timings ---
Current time: 1559582890982 milliseconds
Total Time:         121.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        79.7 seconds, 65.9%
Fitness Testing:     20.7 seconds, 17.1%
Report:              20.5 seconds, 17.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 43
Successful program: (exec_k (integer_inc boolean_rot in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) in2) (integer_yank boolean_rot) integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_xor integer_lte boolean_stackdepth exec_flush exec_stackdepth integer_flush boolean_not integer_dup_times boolean_xor exec_yank exec_s_when_autoconstructing (exec_s_when_autoconstructing (print_integer integer_flush) (boolean_not integer_dup_times) () boolean_yank integer_lte boolean_stackdepth exec_flush integer_div) (exec_stackdepth) () exec_dup_times (exec_y () in1) boolean_eq boolean_stackdepth exec_y () in1 boolean_eq boolean_stackdepth exec_do*times (exec_shove (exec_swap (exec_k_when_autoconstructing (boolean_and in4 print_integer exec_yank) (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger exec_flush) integer_stackdepth integer_dup_items) (boolean_dup exec_k_when_autoconstructing (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger boolean_yankdup) (integer_stackdepth integer_dup_items) boolean_dup exec_k_when_autoconstructing (boolean_and in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () in2 boolean_frominteger exec_dup () boolean_frominteger exec_dup () exec_do*count (print_exec () exec_yankdup exec_swap (exec_y () exec_while (integer_inc in3 integer_lt) exec_k_when_autoconstructing (exec_while ()) ()) ())) ())) ()))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 158


Auto-simplifying with starting size: 158
step: 0
program: (exec_k (integer_inc boolean_rot in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) in2) (integer_yank boolean_rot) integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_xor integer_lte boolean_stackdepth exec_flush exec_stackdepth integer_flush boolean_not integer_dup_times boolean_xor exec_yank exec_s_when_autoconstructing (exec_s_when_autoconstructing (print_integer integer_flush) (boolean_not integer_dup_times) () boolean_yank integer_lte boolean_stackdepth exec_flush integer_div) (exec_stackdepth) () exec_dup_times (exec_y () in1) boolean_eq boolean_stackdepth exec_y () in1 boolean_eq boolean_stackdepth exec_do*times (exec_shove (exec_swap (exec_k_when_autoconstructing (boolean_and in4 print_integer exec_yank) (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger exec_flush) integer_stackdepth integer_dup_items) (boolean_dup exec_k_when_autoconstructing (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger boolean_yankdup) (integer_stackdepth integer_dup_items) boolean_dup exec_k_when_autoconstructing (boolean_and in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () in2 boolean_frominteger exec_dup () boolean_frominteger exec_dup () exec_do*count (print_exec () exec_yankdup exec_swap (exec_y () exec_while (integer_inc in3 integer_lt) exec_k_when_autoconstructing (exec_while ()) ()) ())) ())) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 158

step: 500
program: (exec_k (integer_inc boolean_rot in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) in2) (integer_yank boolean_rot) integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_xor integer_lte boolean_stackdepth exec_flush exec_stackdepth integer_flush boolean_not integer_dup_times boolean_xor exec_yank exec_s_when_autoconstructing (exec_s_when_autoconstructing (print_integer integer_flush) (boolean_not integer_dup_times) () boolean_yank integer_lte boolean_stackdepth exec_flush integer_div) (exec_stackdepth) () exec_dup_times (exec_y () in1) boolean_eq boolean_stackdepth exec_y () in1 boolean_eq boolean_stackdepth exec_do*times (exec_shove (exec_swap (exec_k_when_autoconstructing (boolean_and in4 print_integer exec_yank) (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger exec_flush) integer_stackdepth integer_dup_items) (boolean_dup exec_k_when_autoconstructing (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger boolean_yankdup) (integer_stackdepth integer_dup_items) boolean_dup exec_k_when_autoconstructing (boolean_and in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () in2 boolean_frominteger exec_dup () boolean_frominteger exec_dup () exec_do*count (print_exec () exec_yankdup exec_swap (exec_y () exec_while (integer_inc in3 integer_lt) exec_k_when_autoconstructing (exec_while ()) ()) ())) ())) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 158

step: 1000
program: (exec_k (integer_inc boolean_rot in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) in2) (integer_yank boolean_rot) integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_xor integer_lte boolean_stackdepth exec_flush exec_stackdepth integer_flush boolean_not integer_dup_times boolean_xor exec_yank exec_s_when_autoconstructing (exec_s_when_autoconstructing (print_integer integer_flush) (boolean_not integer_dup_times) () boolean_yank integer_lte boolean_stackdepth exec_flush integer_div) (exec_stackdepth) () exec_dup_times (exec_y () in1) boolean_eq boolean_stackdepth exec_y () in1 boolean_eq boolean_stackdepth exec_do*times (exec_shove (exec_swap (exec_k_when_autoconstructing (boolean_and in4 print_integer exec_yank) (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger exec_flush) integer_stackdepth integer_dup_items) (boolean_dup exec_k_when_autoconstructing (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger boolean_yankdup) (integer_stackdepth integer_dup_items) boolean_dup exec_k_when_autoconstructing (boolean_and in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () in2 boolean_frominteger exec_dup () boolean_frominteger exec_dup () exec_do*count (print_exec () exec_yankdup exec_swap (exec_y () exec_while (integer_inc in3 integer_lt) exec_k_when_autoconstructing (exec_while ()) ()) ())) ())) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 158

step: 1500
program: (exec_k (integer_inc boolean_rot in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) in2) (integer_yank boolean_rot) integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_xor integer_lte boolean_stackdepth exec_flush exec_stackdepth integer_flush boolean_not integer_dup_times boolean_xor exec_yank exec_s_when_autoconstructing (exec_s_when_autoconstructing (print_integer integer_flush) (boolean_not integer_dup_times) () boolean_yank integer_lte boolean_stackdepth exec_flush integer_div) (exec_stackdepth) () exec_dup_times (exec_y () in1) boolean_eq boolean_stackdepth exec_y () in1 boolean_eq boolean_stackdepth exec_do*times (exec_shove (exec_swap (exec_k_when_autoconstructing (boolean_and in4 print_integer exec_yank) (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger exec_flush) integer_stackdepth integer_dup_items) (boolean_dup exec_k_when_autoconstructing (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger boolean_yankdup) (integer_stackdepth integer_dup_items) boolean_dup exec_k_when_autoconstructing (boolean_and in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () in2 boolean_frominteger exec_dup () boolean_frominteger exec_dup () exec_do*count (print_exec () exec_yankdup exec_swap (exec_y () exec_while (integer_inc in3 integer_lt) exec_k_when_autoconstructing (exec_while ()) ()) ())) ())) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 158

step: 2000
program: (exec_k (integer_inc boolean_rot in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) in2) (integer_yank boolean_rot) integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_xor integer_lte boolean_stackdepth exec_flush exec_stackdepth integer_flush boolean_not integer_dup_times boolean_xor exec_yank exec_s_when_autoconstructing (exec_s_when_autoconstructing (print_integer integer_flush) (boolean_not integer_dup_times) () boolean_yank integer_lte boolean_stackdepth exec_flush integer_div) (exec_stackdepth) () exec_dup_times (exec_y () in1) boolean_eq boolean_stackdepth exec_y () in1 boolean_eq boolean_stackdepth exec_do*times (exec_shove (exec_swap (exec_k_when_autoconstructing (boolean_and in4 print_integer exec_yank) (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger exec_flush) integer_stackdepth integer_dup_items) (boolean_dup exec_k_when_autoconstructing (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger boolean_yankdup) (integer_stackdepth integer_dup_items) boolean_dup exec_k_when_autoconstructing (boolean_and in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () in2 boolean_frominteger exec_dup () boolean_frominteger exec_dup () exec_do*count (print_exec () exec_yankdup exec_swap (exec_y () exec_while (integer_inc in3 integer_lt) exec_k_when_autoconstructing (exec_while ()) ()) ())) ())) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 158

step: 2500
program: (exec_k (integer_inc boolean_rot in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) in2) (integer_yank boolean_rot) integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_xor integer_lte boolean_stackdepth exec_flush exec_stackdepth integer_flush boolean_not integer_dup_times boolean_xor exec_yank exec_s_when_autoconstructing (exec_s_when_autoconstructing (print_integer integer_flush) (boolean_not integer_dup_times) () boolean_yank integer_lte boolean_stackdepth exec_flush integer_div) (exec_stackdepth) () exec_dup_times (exec_y () in1) boolean_eq boolean_stackdepth exec_y () in1 boolean_eq boolean_stackdepth exec_do*times (exec_shove (exec_swap (exec_k_when_autoconstructing (boolean_and in4 print_integer exec_yank) (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger exec_flush) integer_stackdepth integer_dup_items) (boolean_dup exec_k_when_autoconstructing (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger boolean_yankdup) (integer_stackdepth integer_dup_items) boolean_dup exec_k_when_autoconstructing (boolean_and in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () in2 boolean_frominteger exec_dup () boolean_frominteger exec_dup () exec_do*count (print_exec () exec_yankdup exec_swap (exec_y () exec_while (integer_inc in3 integer_lt) exec_k_when_autoconstructing (exec_while ()) ()) ())) ())) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 158

step: 3000
program: (exec_k (integer_inc boolean_rot in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) in2) (integer_yank boolean_rot) integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_xor integer_lte boolean_stackdepth exec_flush exec_stackdepth integer_flush boolean_not integer_dup_times boolean_xor exec_yank exec_s_when_autoconstructing (exec_s_when_autoconstructing (print_integer integer_flush) (boolean_not integer_dup_times) () boolean_yank integer_lte boolean_stackdepth exec_flush integer_div) (exec_stackdepth) () exec_dup_times (exec_y () in1) boolean_eq boolean_stackdepth exec_y () in1 boolean_eq boolean_stackdepth exec_do*times (exec_shove (exec_swap (exec_k_when_autoconstructing (boolean_and in4 print_integer exec_yank) (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger exec_flush) integer_stackdepth integer_dup_items) (boolean_dup exec_k_when_autoconstructing (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger boolean_yankdup) (integer_stackdepth integer_dup_items) boolean_dup exec_k_when_autoconstructing (boolean_and in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () in2 boolean_frominteger exec_dup () boolean_frominteger exec_dup () exec_do*count (print_exec () exec_yankdup exec_swap (exec_y () exec_while (integer_inc in3 integer_lt) exec_k_when_autoconstructing (exec_while ()) ()) ())) ())) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 158

step: 3500
program: (exec_k (integer_inc boolean_rot in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) in2) (integer_yank boolean_rot) integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_xor integer_lte boolean_stackdepth exec_flush exec_stackdepth integer_flush boolean_not integer_dup_times boolean_xor exec_yank exec_s_when_autoconstructing (exec_s_when_autoconstructing (print_integer integer_flush) (boolean_not integer_dup_times) () boolean_yank integer_lte boolean_stackdepth exec_flush integer_div) (exec_stackdepth) () exec_dup_times (exec_y () in1) boolean_eq boolean_stackdepth exec_y () in1 boolean_eq boolean_stackdepth exec_do*times (exec_shove (exec_swap (exec_k_when_autoconstructing (boolean_and in4 print_integer exec_yank) (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger exec_flush) integer_stackdepth integer_dup_items) (boolean_dup exec_k_when_autoconstructing (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger boolean_yankdup) (integer_stackdepth integer_dup_items) boolean_dup exec_k_when_autoconstructing (boolean_and in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () in2 boolean_frominteger exec_dup () boolean_frominteger exec_dup () exec_do*count (print_exec () exec_yankdup exec_swap (exec_y () exec_while (integer_inc in3 integer_lt) exec_k_when_autoconstructing (exec_while ()) ()) ())) ())) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 158

step: 4000
program: (exec_k (integer_inc boolean_rot in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) in2) (integer_yank boolean_rot) integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_xor integer_lte boolean_stackdepth exec_flush exec_stackdepth integer_flush boolean_not integer_dup_times boolean_xor exec_yank exec_s_when_autoconstructing (exec_s_when_autoconstructing (print_integer integer_flush) (boolean_not integer_dup_times) () boolean_yank integer_lte boolean_stackdepth exec_flush integer_div) (exec_stackdepth) () exec_dup_times (exec_y () in1) boolean_eq boolean_stackdepth exec_y () in1 boolean_eq boolean_stackdepth exec_do*times (exec_shove (exec_swap (exec_k_when_autoconstructing (boolean_and in4 print_integer exec_yank) (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger exec_flush) integer_stackdepth integer_dup_items) (boolean_dup exec_k_when_autoconstructing (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger boolean_yankdup) (integer_stackdepth integer_dup_items) boolean_dup exec_k_when_autoconstructing (boolean_and in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () in2 boolean_frominteger exec_dup () boolean_frominteger exec_dup () exec_do*count (print_exec () exec_yankdup exec_swap (exec_y () exec_while (integer_inc in3 integer_lt) exec_k_when_autoconstructing (exec_while ()) ()) ())) ())) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 158

step: 4500
program: (exec_k (integer_inc boolean_rot in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) in2) (integer_yank boolean_rot) integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_xor integer_lte boolean_stackdepth exec_flush exec_stackdepth integer_flush boolean_not integer_dup_times boolean_xor exec_yank exec_s_when_autoconstructing (exec_s_when_autoconstructing (print_integer integer_flush) (boolean_not integer_dup_times) () boolean_yank integer_lte boolean_stackdepth exec_flush integer_div) (exec_stackdepth) () exec_dup_times (exec_y () in1) boolean_eq boolean_stackdepth exec_y () in1 boolean_eq boolean_stackdepth exec_do*times (exec_shove (exec_swap (exec_k_when_autoconstructing (boolean_and in4 print_integer exec_yank) (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger exec_flush) integer_stackdepth integer_dup_items) (boolean_dup exec_k_when_autoconstructing (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger boolean_yankdup) (integer_stackdepth integer_dup_items) boolean_dup exec_k_when_autoconstructing (boolean_and in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () in2 boolean_frominteger exec_dup () boolean_frominteger exec_dup () exec_do*count (print_exec () exec_yankdup exec_swap (exec_y () exec_while (integer_inc in3 integer_lt) exec_k_when_autoconstructing (exec_while ()) ()) ())) ())) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 158

step: 5000
program: (exec_k (integer_inc boolean_rot in1 exec_when (boolean_dup_times integer_gte integer_dup exec_yank) in2) (integer_yank boolean_rot) integer_dup exec_yank exec_s_when_autoconstructing (print_integer) (integer_flush) (boolean_not integer_dup_times) boolean_xor integer_lte boolean_stackdepth exec_flush exec_stackdepth integer_flush boolean_not integer_dup_times boolean_xor exec_yank exec_s_when_autoconstructing (exec_s_when_autoconstructing (print_integer integer_flush) (boolean_not integer_dup_times) () boolean_yank integer_lte boolean_stackdepth exec_flush integer_div) (exec_stackdepth) () exec_dup_times (exec_y () in1) boolean_eq boolean_stackdepth exec_y () in1 boolean_eq boolean_stackdepth exec_do*times (exec_shove (exec_swap (exec_k_when_autoconstructing (boolean_and in4 print_integer exec_yank) (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger exec_flush) integer_stackdepth integer_dup_items) (boolean_dup exec_k_when_autoconstructing (exec_do*range () exec_swap () (boolean_shove) exec_dup_items exec_yankdup boolean_frominteger boolean_yankdup) (integer_stackdepth integer_dup_items) boolean_dup exec_k_when_autoconstructing (boolean_and in4 exec_k_when_autoconstructing (boolean_and) (in4 integer_dup_items integer_max boolean_rot integer_empty integer_gt exec_if (in2 boolean_frominteger exec_dup () in2 boolean_frominteger exec_dup () boolean_frominteger exec_dup () exec_do*count (print_exec () exec_yankdup exec_swap (exec_y () exec_while (integer_inc in3 integer_lt) exec_k_when_autoconstructing (exec_while ()) ()) ())) ())) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 158

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 43
Test total error for best: 491
Test mean error for best: 0.49100
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 1
Test Case    9 | Error: 0
Test Case   10 | Error: 1
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 1
Test Case   17 | Error: 1
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 1
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 1
Test Case   30 | Error: 1
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 1
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 1
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 1
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 1
Test Case   57 | Error: 0
Test Case   58 | Error: 1
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 1
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 1
Test Case   76 | Error: 1
Test Case   77 | Error: 1
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 1
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 1
Test Case   85 | Error: 1
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 1
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 1
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 1
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 1
Test Case  106 | Error: 1
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 1
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 1
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 1
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 1
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 1
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 1
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 1
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 1
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 1
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 1
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 1
Test Case  310 | Error: 1
Test Case  311 | Error: 1
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 1
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 1
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 1
Test Case  367 | Error: 1
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 1
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 1
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 1
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 1
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 1
Test Case  446 | Error: 1
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 1
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 1
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 1
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 1
Test Case  511 | Error: 1
Test Case  512 | Error: 1
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 1
Test Case  527 | Error: 1
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 1
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 1
Test Case  556 | Error: 1
Test Case  557 | Error: 1
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 1
Test Case  562 | Error: 1
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 1
Test Case  567 | Error: 1
Test Case  568 | Error: 1
Test Case  569 | Error: 1
Test Case  570 | Error: 1
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 1
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 1
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 1
Test Case  597 | Error: 1
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 1
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 1
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 1
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 0
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 1
Test Case  718 | Error: 1
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 1
Test Case  727 | Error: 1
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 1
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 1
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 1
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 1
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 1
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 1
Test Case  934 | Error: 1
Test Case  935 | Error: 1
Test Case  936 | Error: 1
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 1
Test Case  942 | Error: 1
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 1
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 1
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 1
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 1
Test Case  976 | Error: 1
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 85                  | Program output: 85                 
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 87                 
Correct output: -73                 | Program output: 48                 
Correct output: -44                 | Program output: -44                
Correct output: -78                 | Program output: -78                
Correct output: 76                  | Program output: 76                 
Correct output: 51                  | Program output: 99                 
Correct output: -42                 | Program output: -16                
Correct output: -89                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -19                 | Program output: -19                
Correct output: 47                  | Program output: 47                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: 19                  | Program output:                    
Correct output: 15                  | Program output: 24                 
Correct output: 2                   | Program output: 13                 
Correct output: 21                  | Program output: 0                  
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 28                 
Correct output: 7                   | Program output: 57                 
Correct output: 42                  | Program output: 67                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 23                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 11                 
Correct output: 19                  | Program output: 23                 
Correct output: 6                   | Program output: 23                 
Correct output: 28                  | Program output: 28                 
Correct output: 9                   | Program output: 0                  
Correct output: 33                  | Program output: 60                 
Correct output: 23                  | Program output: 23                 
Correct output: 29                  | Program output: 29                 
Correct output: -84                 | Program output: -84                
Correct output: -14                 | Program output: 4                  
Correct output: -88                 | Program output: 12                 
Correct output: -82                 | Program output: -82                
Correct output: -48                 | Program output:                    
Correct output: 14                  | Program output: 92                 
Correct output: -94                 | Program output: 10                 
Correct output: -69                 | Program output: -21                
Correct output: -90                 | Program output: -90                
Correct output: -73                 | Program output: -2                 
Correct output: -72                 | Program output: -31                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -15                
Correct output: -5                  | Program output: 14                 
Correct output: -34                 | Program output: -34                
Correct output: -23                 | Program output: -23                
Correct output: -54                 | Program output: -28                
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -55                
Correct output: -57                 | Program output: -57                
Correct output: -90                 | Program output: -7                 
Correct output: -97                 | Program output:                    
Correct output: -52                 | Program output: 12                 
Correct output: -72                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: -42                 | Program output: -42                
Correct output: -86                 | Program output: -86                
Correct output: -90                 | Program output: -32                
Correct output: -76                 | Program output: -76                
Correct output: 4                   | Program output: 4                  
Correct output: -31                 | Program output: -1                 
Correct output: -41                 | Program output: 0                  
Correct output: -5                  | Program output:                    
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -6                 
Correct output: -61                 | Program output: 3                  
Correct output: -18                 | Program output: 0                  
Correct output: -81                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -79                 | Program output: 14                 
Correct output: -97                 | Program output: -15                
Correct output: -50                 | Program output: -8                 
Correct output: -89                 | Program output: -4                 
Correct output: -30                 | Program output: -30                
Correct output: -55                 | Program output: 14                 
Correct output: -68                 | Program output: 0                  
Correct output: -77                 | Program output: -77                
Correct output: -30                 | Program output: -23                
Correct output: -68                 | Program output: -41                
Correct output: -45                 | Program output: -8                 
Correct output: -89                 | Program output: -46                
Correct output: -24                 | Program output: -24                
Correct output: -82                 | Program output: -82                
Correct output: -98                 | Program output: 59                 
Correct output: -62                 | Program output: -62                
Correct output: -69                 | Program output: -69                
Correct output: -67                 | Program output: 33                 
Correct output: -65                 | Program output: -24                
;;******************************
