Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-68 12 -68 -68] -68] [[-12 -12 -11 -12] -12] [[-5 -100 -5 -5] -100] [[-26 -84 -26 -26] -84] [[-53 -53 -66 -53] -66] [[56 56 -43 56] -43] [[-55 -92 -92 -92] -92] [[77 7 7 7] 7] [[-11 -11 -80 -11] -80] [[-51 -51 -51 -74] -74] [(-47 -47 -47 -47) -47] [(-13 -13 -13 -13) -13] [(20 20 20 20) 20] [(-26 -26 -26 -26) -26] [(76 76 76 76) 76] [(59 26 5 36) 5] [(16 52 36 48) 16] [(30 68 14 12) 12] [(59 17 100 21) 17] [(37 82 13 100) 13] [(72 91 71 96) 71] [(81 8 69 45) 8] [(2 13 1 36) 1] [(71 68 90 80) 68] [(33 58 98 1) 1] [(59 74 38 71) 38] [(89 20 69 18) 18] [(32 25 21 30) 21] [(71 49 50 41) 41] [(12 21 100 58) 12] [(65 39 68 3) 3] [(33 47 19 29) 19] [(33 57 53 19) 19] [(49 46 18 7) 7] [(60 59 34 52) 34] [(-58 -78 -80 80) -80] [(63 -14 46 58) -14] [(-20 -84 47 94) -84] [(-75 -58 -63 88) -75] [(1 -68 -46 -70) -70] [(33 -69 -59 -75) -75] [(48 32 -60 -11) -60] [(-70 87 -98 0) -98] [(-72 -66 48 -94) -94] [(50 59 -16 59) -16] [(-55 83 -10 83) -55] [(13 68 54 -55) -55] [(55 -76 22 11) -76] [(16 44 -4 43) -4] [(-5 -90 -53 21) -90] [(-12 -39 -33 -34) -39] [(-79 65 -52 77) -79] [(-42 -13 -29 -72) -72] [(-85 -58 90 98) -85] [(-80 -80 97 -91) -91] [(-20 -58 -33 50) -58] [(54 34 43 83) 34] [(38 90 -6 37) -6] [(84 -70 -70 -74) -74] [(-28 12 -47 -30) -47] [(68 -85 62 -84) -85] [(-68 91 53 91) -68] [(-91 67 6 -4) -91] [(-25 97 -78 85) -78] [(9 -95 72 -37) -95] [(-84 4 -91 45) -91] [(60 10 59 -25) -25] [(-23 -92 94 6) -92] [(60 -63 68 5) -63] [(-10 -89 70 4) -89] [(100 70 -44 -29) -44] [(51 68 -66 -48) -66] [(-51 98 -67 24) -67] [(-21 61 -69 -84) -84] [(-68 84 24 -40) -68] [(40 41 30 -26) -26] [(53 -92 45 -19) -92] [(32 -20 -40 11) -40] [(-91 -75 92 -22) -91] [(22 -56 -84 -56) -84] [(-37 -54 44 85) -54] [(91 73 -14 -36) -36] [(-17 0 -20 38) -20] [(90 87 -54 92) -54] [(-6 80 -54 75) -54] [(-71 -98 25 -65) -98] [(-93 50 -53 -95) -95] [(-39 -65 70 -27) -65] [(-68 4 4 -55) -68] [(-36 95 19 35) -36] [(26 19 82 -14) -14] [(79 -65 -98 60) -98] [(-22 87 -64 40) -64] [(-76 -15 77 27) -76] [(58 68 29 23) 23])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-68 12 -68 -68] -68]
Train Case:   6 | Input/Output: [[-12 -12 -11 -12] -12]
Train Case:   7 | Input/Output: [[-5 -100 -5 -5] -100]
Train Case:   8 | Input/Output: [[-26 -84 -26 -26] -84]
Train Case:   9 | Input/Output: [[-53 -53 -66 -53] -66]
Train Case:  10 | Input/Output: [[56 56 -43 56] -43]
Train Case:  11 | Input/Output: [[-55 -92 -92 -92] -92]
Train Case:  12 | Input/Output: [[77 7 7 7] 7]
Train Case:  13 | Input/Output: [[-11 -11 -80 -11] -80]
Train Case:  14 | Input/Output: [[-51 -51 -51 -74] -74]
Train Case:  15 | Input/Output: [(-47 -47 -47 -47) -47]
Train Case:  16 | Input/Output: [(-13 -13 -13 -13) -13]
Train Case:  17 | Input/Output: [(20 20 20 20) 20]
Train Case:  18 | Input/Output: [(-26 -26 -26 -26) -26]
Train Case:  19 | Input/Output: [(76 76 76 76) 76]
Train Case:  20 | Input/Output: [(59 26 5 36) 5]
Train Case:  21 | Input/Output: [(16 52 36 48) 16]
Train Case:  22 | Input/Output: [(30 68 14 12) 12]
Train Case:  23 | Input/Output: [(59 17 100 21) 17]
Train Case:  24 | Input/Output: [(37 82 13 100) 13]
Train Case:  25 | Input/Output: [(72 91 71 96) 71]
Train Case:  26 | Input/Output: [(81 8 69 45) 8]
Train Case:  27 | Input/Output: [(2 13 1 36) 1]
Train Case:  28 | Input/Output: [(71 68 90 80) 68]
Train Case:  29 | Input/Output: [(33 58 98 1) 1]
Train Case:  30 | Input/Output: [(59 74 38 71) 38]
Train Case:  31 | Input/Output: [(89 20 69 18) 18]
Train Case:  32 | Input/Output: [(32 25 21 30) 21]
Train Case:  33 | Input/Output: [(71 49 50 41) 41]
Train Case:  34 | Input/Output: [(12 21 100 58) 12]
Train Case:  35 | Input/Output: [(65 39 68 3) 3]
Train Case:  36 | Input/Output: [(33 47 19 29) 19]
Train Case:  37 | Input/Output: [(33 57 53 19) 19]
Train Case:  38 | Input/Output: [(49 46 18 7) 7]
Train Case:  39 | Input/Output: [(60 59 34 52) 34]
Train Case:  40 | Input/Output: [(-58 -78 -80 80) -80]
Train Case:  41 | Input/Output: [(63 -14 46 58) -14]
Train Case:  42 | Input/Output: [(-20 -84 47 94) -84]
Train Case:  43 | Input/Output: [(-75 -58 -63 88) -75]
Train Case:  44 | Input/Output: [(1 -68 -46 -70) -70]
Train Case:  45 | Input/Output: [(33 -69 -59 -75) -75]
Train Case:  46 | Input/Output: [(48 32 -60 -11) -60]
Train Case:  47 | Input/Output: [(-70 87 -98 0) -98]
Train Case:  48 | Input/Output: [(-72 -66 48 -94) -94]
Train Case:  49 | Input/Output: [(50 59 -16 59) -16]
Train Case:  50 | Input/Output: [(-55 83 -10 83) -55]
Train Case:  51 | Input/Output: [(13 68 54 -55) -55]
Train Case:  52 | Input/Output: [(55 -76 22 11) -76]
Train Case:  53 | Input/Output: [(16 44 -4 43) -4]
Train Case:  54 | Input/Output: [(-5 -90 -53 21) -90]
Train Case:  55 | Input/Output: [(-12 -39 -33 -34) -39]
Train Case:  56 | Input/Output: [(-79 65 -52 77) -79]
Train Case:  57 | Input/Output: [(-42 -13 -29 -72) -72]
Train Case:  58 | Input/Output: [(-85 -58 90 98) -85]
Train Case:  59 | Input/Output: [(-80 -80 97 -91) -91]
Train Case:  60 | Input/Output: [(-20 -58 -33 50) -58]
Train Case:  61 | Input/Output: [(54 34 43 83) 34]
Train Case:  62 | Input/Output: [(38 90 -6 37) -6]
Train Case:  63 | Input/Output: [(84 -70 -70 -74) -74]
Train Case:  64 | Input/Output: [(-28 12 -47 -30) -47]
Train Case:  65 | Input/Output: [(68 -85 62 -84) -85]
Train Case:  66 | Input/Output: [(-68 91 53 91) -68]
Train Case:  67 | Input/Output: [(-91 67 6 -4) -91]
Train Case:  68 | Input/Output: [(-25 97 -78 85) -78]
Train Case:  69 | Input/Output: [(9 -95 72 -37) -95]
Train Case:  70 | Input/Output: [(-84 4 -91 45) -91]
Train Case:  71 | Input/Output: [(60 10 59 -25) -25]
Train Case:  72 | Input/Output: [(-23 -92 94 6) -92]
Train Case:  73 | Input/Output: [(60 -63 68 5) -63]
Train Case:  74 | Input/Output: [(-10 -89 70 4) -89]
Train Case:  75 | Input/Output: [(100 70 -44 -29) -44]
Train Case:  76 | Input/Output: [(51 68 -66 -48) -66]
Train Case:  77 | Input/Output: [(-51 98 -67 24) -67]
Train Case:  78 | Input/Output: [(-21 61 -69 -84) -84]
Train Case:  79 | Input/Output: [(-68 84 24 -40) -68]
Train Case:  80 | Input/Output: [(40 41 30 -26) -26]
Train Case:  81 | Input/Output: [(53 -92 45 -19) -92]
Train Case:  82 | Input/Output: [(32 -20 -40 11) -40]
Train Case:  83 | Input/Output: [(-91 -75 92 -22) -91]
Train Case:  84 | Input/Output: [(22 -56 -84 -56) -84]
Train Case:  85 | Input/Output: [(-37 -54 44 85) -54]
Train Case:  86 | Input/Output: [(91 73 -14 -36) -36]
Train Case:  87 | Input/Output: [(-17 0 -20 38) -20]
Train Case:  88 | Input/Output: [(90 87 -54 92) -54]
Train Case:  89 | Input/Output: [(-6 80 -54 75) -54]
Train Case:  90 | Input/Output: [(-71 -98 25 -65) -98]
Train Case:  91 | Input/Output: [(-93 50 -53 -95) -95]
Train Case:  92 | Input/Output: [(-39 -65 70 -27) -65]
Train Case:  93 | Input/Output: [(-68 4 4 -55) -68]
Train Case:  94 | Input/Output: [(-36 95 19 35) -36]
Train Case:  95 | Input/Output: [(26 19 82 -14) -14]
Train Case:  96 | Input/Output: [(79 -65 -98 60) -98]
Train Case:  97 | Input/Output: [(-22 87 -64 40) -64]
Train Case:  98 | Input/Output: [(-76 -15 77 27) -76]
Train Case:  99 | Input/Output: [(58 68 29 23) 23]
Test Case:   0 | Input/Output: [[20 93 20 20] 20]
Test Case:   1 | Input/Output: [[76 -28 -28 -28] -28]
Test Case:   2 | Input/Output: [[-7 -7 -7 -94] -94]
Test Case:   3 | Input/Output: [[-50 -50 -50 -17] -50]
Test Case:   4 | Input/Output: [[-57 12 12 12] -57]
Test Case:   5 | Input/Output: [[-63 -63 -63 14] -63]
Test Case:   6 | Input/Output: [[95 95 89 95] 89]
Test Case:   7 | Input/Output: [[28 28 28 39] 28]
Test Case:   8 | Input/Output: [[-27 42 -27 -27] -27]
Test Case:   9 | Input/Output: [[70 -15 -15 -15] -15]
Test Case:  10 | Input/Output: [[-99 50 -99 -99] -99]
Test Case:  11 | Input/Output: [[-43 -43 64 -43] -43]
Test Case:  12 | Input/Output: [[1 98 98 98] 1]
Test Case:  13 | Input/Output: [[-1 -1 -1 85] -1]
Test Case:  14 | Input/Output: [[34 34 34 21] 21]
Test Case:  15 | Input/Output: [[65 65 27 65] 27]
Test Case:  16 | Input/Output: [[81 -53 81 81] -53]
Test Case:  17 | Input/Output: [[91 28 91 91] 28]
Test Case:  18 | Input/Output: [[-4 -12 -4 -4] -12]
Test Case:  19 | Input/Output: [[56 56 56 42] 42]
Test Case:  20 | Input/Output: [[62 94 94 94] 62]
Test Case:  21 | Input/Output: [[37 -81 -81 -81] -81]
Test Case:  22 | Input/Output: [[-72 -62 -72 -72] -72]
Test Case:  23 | Input/Output: [[62 62 95 62] 62]
Test Case:  24 | Input/Output: [[-56 -56 -56 49] -56]
Test Case:  25 | Input/Output: [[-96 -96 -58 -96] -96]
Test Case:  26 | Input/Output: [[-42 -42 27 -42] -42]
Test Case:  27 | Input/Output: [[-93 -93 -93 -81] -93]
Test Case:  28 | Input/Output: [[-41 -22 -22 -22] -41]
Test Case:  29 | Input/Output: [[0 0 0 -96] -96]
Test Case:  30 | Input/Output: [[98 98 -3 98] -3]
Test Case:  31 | Input/Output: [[16 -83 -83 -83] -83]
Test Case:  32 | Input/Output: [[-15 -15 -15 41] -15]
Test Case:  33 | Input/Output: [[-96 -96 -96 94] -96]
Test Case:  34 | Input/Output: [[-78 34 -78 -78] -78]
Test Case:  35 | Input/Output: [[-41 -41 -69 -41] -69]
Test Case:  36 | Input/Output: [[-79 -27 -79 -79] -79]
Test Case:  37 | Input/Output: [[-100 94 -100 -100] -100]
Test Case:  38 | Input/Output: [[-40 -40 -23 -40] -40]
Test Case:  39 | Input/Output: [[-88 -88 -88 -99] -99]
Test Case:  40 | Input/Output: [[43 43 43 -37] -37]
Test Case:  41 | Input/Output: [[88 88 88 46] 46]
Test Case:  42 | Input/Output: [[36 66 36 36] 36]
Test Case:  43 | Input/Output: [[5 22 22 22] 5]
Test Case:  44 | Input/Output: [[29 29 29 -85] -85]
Test Case:  45 | Input/Output: [[-100 -100 -98 -100] -100]
Test Case:  46 | Input/Output: [[-77 -77 97 -77] -77]
Test Case:  47 | Input/Output: [[7 20 7 7] 7]
Test Case:  48 | Input/Output: [[-60 -60 -73 -60] -73]
Test Case:  49 | Input/Output: [[10 10 33 10] 10]
Test Case:  50 | Input/Output: [[-35 4 4 4] -35]
Test Case:  51 | Input/Output: [[90 -85 90 90] -85]
Test Case:  52 | Input/Output: [[7 7 7 -68] -68]
Test Case:  53 | Input/Output: [[87 87 46 87] 46]
Test Case:  54 | Input/Output: [[27 -6 27 27] -6]
Test Case:  55 | Input/Output: [[83 -32 83 83] -32]
Test Case:  56 | Input/Output: [[2 2 2 42] 2]
Test Case:  57 | Input/Output: [[-40 -40 -40 -73] -73]
Test Case:  58 | Input/Output: [[-96 -96 -96 -60] -96]
Test Case:  59 | Input/Output: [[15 -26 15 15] -26]
Test Case:  60 | Input/Output: [[-28 -42 -28 -28] -42]
Test Case:  61 | Input/Output: [[33 77 77 77] 33]
Test Case:  62 | Input/Output: [[-7 -7 82 -7] -7]
Test Case:  63 | Input/Output: [[-81 75 -81 -81] -81]
Test Case:  64 | Input/Output: [[-46 -46 -46 -50] -50]
Test Case:  65 | Input/Output: [[9 9 57 9] 9]
Test Case:  66 | Input/Output: [[72 72 72 30] 30]
Test Case:  67 | Input/Output: [[-40 -60 -40 -40] -60]
Test Case:  68 | Input/Output: [[-66 89 89 89] -66]
Test Case:  69 | Input/Output: [[33 7 7 7] 7]
Test Case:  70 | Input/Output: [[87 16 16 16] 16]
Test Case:  71 | Input/Output: [[-73 -50 -50 -50] -73]
Test Case:  72 | Input/Output: [[63 94 63 63] 63]
Test Case:  73 | Input/Output: [[-96 51 51 51] -96]
Test Case:  74 | Input/Output: [[-9 -9 -9 17] -9]
Test Case:  75 | Input/Output: [[59 52 52 52] 52]
Test Case:  76 | Input/Output: [[57 -83 -83 -83] -83]
Test Case:  77 | Input/Output: [[69 77 69 69] 69]
Test Case:  78 | Input/Output: [[-43 -43 -43 68] -43]
Test Case:  79 | Input/Output: [[-56 -56 -56 -46] -56]
Test Case:  80 | Input/Output: [[-58 -58 -58 -86] -86]
Test Case:  81 | Input/Output: [[-65 13 13 13] -65]
Test Case:  82 | Input/Output: [[-93 -78 -78 -78] -93]
Test Case:  83 | Input/Output: [[16 -75 16 16] -75]
Test Case:  84 | Input/Output: [[18 63 18 18] 18]
Test Case:  85 | Input/Output: [[12 12 64 12] 12]
Test Case:  86 | Input/Output: [[74 74 74 15] 15]
Test Case:  87 | Input/Output: [[74 -100 -100 -100] -100]
Test Case:  88 | Input/Output: [[-92 -92 2 -92] -92]
Test Case:  89 | Input/Output: [[2 2 80 2] 2]
Test Case:  90 | Input/Output: [[-36 -3 -36 -36] -36]
Test Case:  91 | Input/Output: [[67 67 67 46] 46]
Test Case:  92 | Input/Output: [[-56 -73 -56 -56] -73]
Test Case:  93 | Input/Output: [[-18 25 -18 -18] -18]
Test Case:  94 | Input/Output: [[91 91 21 91] 21]
Test Case:  95 | Input/Output: [[-11 -11 13 -11] -11]
Test Case:  96 | Input/Output: [[-39 -39 -39 55] -39]
Test Case:  97 | Input/Output: [[-75 -8 -75 -75] -75]
Test Case:  98 | Input/Output: [[-73 -51 -51 -51] -73]
Test Case:  99 | Input/Output: [[-82 54 -82 -82] -82]
Test Case: 100 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 101 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 102 | Input/Output: [(22 22 22 22) 22]
Test Case: 103 | Input/Output: [(95 95 95 95) 95]
Test Case: 104 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 105 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 106 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 107 | Input/Output: [(48 48 48 48) 48]
Test Case: 108 | Input/Output: [(48 48 48 48) 48]
Test Case: 109 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 110 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 111 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 112 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 113 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 114 | Input/Output: [(40 40 40 40) 40]
Test Case: 115 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 116 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 117 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 118 | Input/Output: [(43 43 43 43) 43]
Test Case: 119 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 120 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 121 | Input/Output: [(82 82 82 82) 82]
Test Case: 122 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 123 | Input/Output: [(22 22 22 22) 22]
Test Case: 124 | Input/Output: [(46 46 46 46) 46]
Test Case: 125 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 126 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 127 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 128 | Input/Output: [(81 81 81 81) 81]
Test Case: 129 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 130 | Input/Output: [(82 82 82 82) 82]
Test Case: 131 | Input/Output: [(82 82 82 82) 82]
Test Case: 132 | Input/Output: [(68 68 68 68) 68]
Test Case: 133 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 134 | Input/Output: [(60 60 60 60) 60]
Test Case: 135 | Input/Output: [(72 72 72 72) 72]
Test Case: 136 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 137 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 138 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 139 | Input/Output: [(57 57 57 57) 57]
Test Case: 140 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 141 | Input/Output: [(71 71 71 71) 71]
Test Case: 142 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 143 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 144 | Input/Output: [(46 46 46 46) 46]
Test Case: 145 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 146 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 147 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 148 | Input/Output: [(11 11 11 11) 11]
Test Case: 149 | Input/Output: [(1 1 1 1) 1]
Test Case: 150 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 151 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 152 | Input/Output: [(59 59 59 59) 59]
Test Case: 153 | Input/Output: [(3 3 3 3) 3]
Test Case: 154 | Input/Output: [(77 77 77 77) 77]
Test Case: 155 | Input/Output: [(40 40 40 40) 40]
Test Case: 156 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 157 | Input/Output: [(1 1 1 1) 1]
Test Case: 158 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 159 | Input/Output: [(18 18 18 18) 18]
Test Case: 160 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 161 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 162 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 163 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 164 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 165 | Input/Output: [(54 54 54 54) 54]
Test Case: 166 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 167 | Input/Output: [(84 84 84 84) 84]
Test Case: 168 | Input/Output: [(51 51 51 51) 51]
Test Case: 169 | Input/Output: [(93 93 93 93) 93]
Test Case: 170 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 171 | Input/Output: [(47 47 47 47) 47]
Test Case: 172 | Input/Output: [(46 46 46 46) 46]
Test Case: 173 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 174 | Input/Output: [(0 0 0 0) 0]
Test Case: 175 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 176 | Input/Output: [(96 96 96 96) 96]
Test Case: 177 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 178 | Input/Output: [(42 42 42 42) 42]
Test Case: 179 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 180 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 181 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 182 | Input/Output: [(47 47 47 47) 47]
Test Case: 183 | Input/Output: [(35 35 35 35) 35]
Test Case: 184 | Input/Output: [(87 87 87 87) 87]
Test Case: 185 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 186 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 187 | Input/Output: [(47 47 47 47) 47]
Test Case: 188 | Input/Output: [(2 2 2 2) 2]
Test Case: 189 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 190 | Input/Output: [(18 18 18 18) 18]
Test Case: 191 | Input/Output: [(28 28 28 28) 28]
Test Case: 192 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 193 | Input/Output: [(94 94 94 94) 94]
Test Case: 194 | Input/Output: [(83 83 83 83) 83]
Test Case: 195 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 196 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 197 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 198 | Input/Output: [(42 42 42 42) 42]
Test Case: 199 | Input/Output: [(43 43 43 43) 43]
Test Case: 200 | Input/Output: [(30 7 5 27) 5]
Test Case: 201 | Input/Output: [(30 18 53 62) 18]
Test Case: 202 | Input/Output: [(86 32 16 74) 16]
Test Case: 203 | Input/Output: [(38 77 92 67) 38]
Test Case: 204 | Input/Output: [(48 66 16 37) 16]
Test Case: 205 | Input/Output: [(3 63 60 73) 3]
Test Case: 206 | Input/Output: [(79 22 59 43) 22]
Test Case: 207 | Input/Output: [(53 8 89 90) 8]
Test Case: 208 | Input/Output: [(83 41 91 79) 41]
Test Case: 209 | Input/Output: [(90 97 35 29) 29]
Test Case: 210 | Input/Output: [(25 68 20 13) 13]
Test Case: 211 | Input/Output: [(79 18 97 13) 13]
Test Case: 212 | Input/Output: [(51 71 20 40) 20]
Test Case: 213 | Input/Output: [(11 39 60 54) 11]
Test Case: 214 | Input/Output: [(92 34 2 43) 2]
Test Case: 215 | Input/Output: [(80 0 37 56) 0]
Test Case: 216 | Input/Output: [(4 33 47 10) 4]
Test Case: 217 | Input/Output: [(98 87 7 0) 0]
Test Case: 218 | Input/Output: [(100 88 95 19) 19]
Test Case: 219 | Input/Output: [(41 87 69 92) 41]
Test Case: 220 | Input/Output: [(95 9 67 63) 9]
Test Case: 221 | Input/Output: [(24 38 40 8) 8]
Test Case: 222 | Input/Output: [(77 20 90 57) 20]
Test Case: 223 | Input/Output: [(95 5 85 1) 1]
Test Case: 224 | Input/Output: [(40 24 68 27) 24]
Test Case: 225 | Input/Output: [(56 81 29 41) 29]
Test Case: 226 | Input/Output: [(48 94 71 38) 38]
Test Case: 227 | Input/Output: [(93 6 43 39) 6]
Test Case: 228 | Input/Output: [(58 86 99 6) 6]
Test Case: 229 | Input/Output: [(72 29 74 61) 29]
Test Case: 230 | Input/Output: [(43 19 88 80) 19]
Test Case: 231 | Input/Output: [(51 36 81 14) 14]
Test Case: 232 | Input/Output: [(81 17 32 13) 13]
Test Case: 233 | Input/Output: [(14 61 58 64) 14]
Test Case: 234 | Input/Output: [(1 100 69 11) 1]
Test Case: 235 | Input/Output: [(29 49 22 52) 22]
Test Case: 236 | Input/Output: [(39 87 77 69) 39]
Test Case: 237 | Input/Output: [(36 63 43 71) 36]
Test Case: 238 | Input/Output: [(17 8 66 46) 8]
Test Case: 239 | Input/Output: [(49 14 8 29) 8]
Test Case: 240 | Input/Output: [(52 5 12 85) 5]
Test Case: 241 | Input/Output: [(42 27 10 24) 10]
Test Case: 242 | Input/Output: [(47 88 94 81) 47]
Test Case: 243 | Input/Output: [(53 76 44 62) 44]
Test Case: 244 | Input/Output: [(25 28 80 4) 4]
Test Case: 245 | Input/Output: [(84 94 9 2) 2]
Test Case: 246 | Input/Output: [(0 72 43 49) 0]
Test Case: 247 | Input/Output: [(16 97 93 36) 16]
Test Case: 248 | Input/Output: [(80 73 85 62) 62]
Test Case: 249 | Input/Output: [(63 50 5 62) 5]
Test Case: 250 | Input/Output: [(61 13 52 17) 13]
Test Case: 251 | Input/Output: [(9 38 6 79) 6]
Test Case: 252 | Input/Output: [(5 31 91 43) 5]
Test Case: 253 | Input/Output: [(92 30 61 8) 8]
Test Case: 254 | Input/Output: [(21 55 18 54) 18]
Test Case: 255 | Input/Output: [(69 84 87 60) 60]
Test Case: 256 | Input/Output: [(2 57 21 53) 2]
Test Case: 257 | Input/Output: [(23 2 54 67) 2]
Test Case: 258 | Input/Output: [(92 56 24 40) 24]
Test Case: 259 | Input/Output: [(11 90 80 25) 11]
Test Case: 260 | Input/Output: [(6 33 80 57) 6]
Test Case: 261 | Input/Output: [(15 95 45 58) 15]
Test Case: 262 | Input/Output: [(31 82 64 60) 31]
Test Case: 263 | Input/Output: [(14 46 74 25) 14]
Test Case: 264 | Input/Output: [(1 86 72 47) 1]
Test Case: 265 | Input/Output: [(100 94 35 9) 9]
Test Case: 266 | Input/Output: [(0 22 69 44) 0]
Test Case: 267 | Input/Output: [(68 84 98 66) 66]
Test Case: 268 | Input/Output: [(16 13 51 27) 13]
Test Case: 269 | Input/Output: [(28 47 9 31) 9]
Test Case: 270 | Input/Output: [(24 35 11 92) 11]
Test Case: 271 | Input/Output: [(83 80 20 50) 20]
Test Case: 272 | Input/Output: [(53 15 45 18) 15]
Test Case: 273 | Input/Output: [(23 98 59 19) 19]
Test Case: 274 | Input/Output: [(34 7 70 45) 7]
Test Case: 275 | Input/Output: [(10 25 52 66) 10]
Test Case: 276 | Input/Output: [(21 28 40 86) 21]
Test Case: 277 | Input/Output: [(11 69 80 12) 11]
Test Case: 278 | Input/Output: [(56 68 90 56) 56]
Test Case: 279 | Input/Output: [(25 79 20 16) 16]
Test Case: 280 | Input/Output: [(8 26 99 26) 8]
Test Case: 281 | Input/Output: [(51 31 69 62) 31]
Test Case: 282 | Input/Output: [(28 20 29 18) 18]
Test Case: 283 | Input/Output: [(95 21 12 50) 12]
Test Case: 284 | Input/Output: [(68 6 69 56) 6]
Test Case: 285 | Input/Output: [(6 89 39 67) 6]
Test Case: 286 | Input/Output: [(96 65 8 72) 8]
Test Case: 287 | Input/Output: [(96 4 93 21) 4]
Test Case: 288 | Input/Output: [(36 8 38 67) 8]
Test Case: 289 | Input/Output: [(1 23 31 41) 1]
Test Case: 290 | Input/Output: [(80 79 41 56) 41]
Test Case: 291 | Input/Output: [(19 56 2 4) 2]
Test Case: 292 | Input/Output: [(21 46 33 0) 0]
Test Case: 293 | Input/Output: [(6 51 8 46) 6]
Test Case: 294 | Input/Output: [(97 76 97 71) 71]
Test Case: 295 | Input/Output: [(95 81 21 25) 21]
Test Case: 296 | Input/Output: [(83 55 89 80) 55]
Test Case: 297 | Input/Output: [(82 97 23 96) 23]
Test Case: 298 | Input/Output: [(2 16 59 19) 2]
Test Case: 299 | Input/Output: [(74 31 55 0) 0]
Test Case: 300 | Input/Output: [(6 64 37 90) 6]
Test Case: 301 | Input/Output: [(77 61 57 45) 45]
Test Case: 302 | Input/Output: [(83 98 47 82) 47]
Test Case: 303 | Input/Output: [(62 47 91 65) 47]
Test Case: 304 | Input/Output: [(72 75 19 66) 19]
Test Case: 305 | Input/Output: [(69 62 95 54) 54]
Test Case: 306 | Input/Output: [(3 21 18 83) 3]
Test Case: 307 | Input/Output: [(80 15 54 3) 3]
Test Case: 308 | Input/Output: [(96 18 48 52) 18]
Test Case: 309 | Input/Output: [(17 21 98 15) 15]
Test Case: 310 | Input/Output: [(4 61 10 94) 4]
Test Case: 311 | Input/Output: [(50 40 3 56) 3]
Test Case: 312 | Input/Output: [(7 62 86 56) 7]
Test Case: 313 | Input/Output: [(40 84 13 45) 13]
Test Case: 314 | Input/Output: [(40 0 99 18) 0]
Test Case: 315 | Input/Output: [(58 100 15 47) 15]
Test Case: 316 | Input/Output: [(13 21 39 73) 13]
Test Case: 317 | Input/Output: [(66 77 82 32) 32]
Test Case: 318 | Input/Output: [(64 29 29 77) 29]
Test Case: 319 | Input/Output: [(36 50 34 96) 34]
Test Case: 320 | Input/Output: [(31 51 35 73) 31]
Test Case: 321 | Input/Output: [(40 55 33 67) 33]
Test Case: 322 | Input/Output: [(59 100 40 75) 40]
Test Case: 323 | Input/Output: [(44 44 12 92) 12]
Test Case: 324 | Input/Output: [(39 44 9 4) 4]
Test Case: 325 | Input/Output: [(60 83 46 56) 46]
Test Case: 326 | Input/Output: [(3 55 20 21) 3]
Test Case: 327 | Input/Output: [(86 7 28 29) 7]
Test Case: 328 | Input/Output: [(52 91 80 37) 37]
Test Case: 329 | Input/Output: [(0 14 49 99) 0]
Test Case: 330 | Input/Output: [(33 15 96 69) 15]
Test Case: 331 | Input/Output: [(85 32 40 96) 32]
Test Case: 332 | Input/Output: [(48 79 8 65) 8]
Test Case: 333 | Input/Output: [(79 77 98 4) 4]
Test Case: 334 | Input/Output: [(76 95 90 35) 35]
Test Case: 335 | Input/Output: [(46 27 23 64) 23]
Test Case: 336 | Input/Output: [(15 49 80 37) 15]
Test Case: 337 | Input/Output: [(51 62 87 77) 51]
Test Case: 338 | Input/Output: [(73 36 62 72) 36]
Test Case: 339 | Input/Output: [(73 27 67 62) 27]
Test Case: 340 | Input/Output: [(76 74 11 37) 11]
Test Case: 341 | Input/Output: [(45 77 43 52) 43]
Test Case: 342 | Input/Output: [(56 47 9 67) 9]
Test Case: 343 | Input/Output: [(51 84 90 44) 44]
Test Case: 344 | Input/Output: [(23 21 19 39) 19]
Test Case: 345 | Input/Output: [(18 56 19 50) 18]
Test Case: 346 | Input/Output: [(25 69 23 87) 23]
Test Case: 347 | Input/Output: [(28 90 57 7) 7]
Test Case: 348 | Input/Output: [(28 48 91 10) 10]
Test Case: 349 | Input/Output: [(45 54 43 92) 43]
Test Case: 350 | Input/Output: [(19 72 100 45) 19]
Test Case: 351 | Input/Output: [(100 76 16 2) 2]
Test Case: 352 | Input/Output: [(91 91 34 96) 34]
Test Case: 353 | Input/Output: [(25 87 26 14) 14]
Test Case: 354 | Input/Output: [(32 86 89 29) 29]
Test Case: 355 | Input/Output: [(73 83 91 87) 73]
Test Case: 356 | Input/Output: [(28 31 10 91) 10]
Test Case: 357 | Input/Output: [(25 46 51 83) 25]
Test Case: 358 | Input/Output: [(80 18 33 100) 18]
Test Case: 359 | Input/Output: [(87 13 26 18) 13]
Test Case: 360 | Input/Output: [(40 36 11 44) 11]
Test Case: 361 | Input/Output: [(8 2 84 10) 2]
Test Case: 362 | Input/Output: [(3 82 21 83) 3]
Test Case: 363 | Input/Output: [(27 17 66 0) 0]
Test Case: 364 | Input/Output: [(68 89 42 17) 17]
Test Case: 365 | Input/Output: [(60 53 19 19) 19]
Test Case: 366 | Input/Output: [(1 15 59 8) 1]
Test Case: 367 | Input/Output: [(50 77 18 91) 18]
Test Case: 368 | Input/Output: [(61 86 85 11) 11]
Test Case: 369 | Input/Output: [(74 35 49 15) 15]
Test Case: 370 | Input/Output: [(35 94 57 66) 35]
Test Case: 371 | Input/Output: [(95 26 30 27) 26]
Test Case: 372 | Input/Output: [(61 1 35 27) 1]
Test Case: 373 | Input/Output: [(45 41 76 69) 41]
Test Case: 374 | Input/Output: [(13 9 41 95) 9]
Test Case: 375 | Input/Output: [(86 17 34 85) 17]
Test Case: 376 | Input/Output: [(74 16 51 0) 0]
Test Case: 377 | Input/Output: [(65 22 14 94) 14]
Test Case: 378 | Input/Output: [(97 7 47 99) 7]
Test Case: 379 | Input/Output: [(82 97 46 80) 46]
Test Case: 380 | Input/Output: [(27 68 39 92) 27]
Test Case: 381 | Input/Output: [(51 30 10 31) 10]
Test Case: 382 | Input/Output: [(14 7 83 57) 7]
Test Case: 383 | Input/Output: [(75 57 84 99) 57]
Test Case: 384 | Input/Output: [(41 52 8 78) 8]
Test Case: 385 | Input/Output: [(11 42 88 41) 11]
Test Case: 386 | Input/Output: [(64 52 60 21) 21]
Test Case: 387 | Input/Output: [(14 85 78 65) 14]
Test Case: 388 | Input/Output: [(68 9 86 78) 9]
Test Case: 389 | Input/Output: [(60 29 13 62) 13]
Test Case: 390 | Input/Output: [(83 26 67 96) 26]
Test Case: 391 | Input/Output: [(53 74 20 56) 20]
Test Case: 392 | Input/Output: [(20 38 33 4) 4]
Test Case: 393 | Input/Output: [(81 56 48 78) 48]
Test Case: 394 | Input/Output: [(60 86 30 69) 30]
Test Case: 395 | Input/Output: [(50 23 13 76) 13]
Test Case: 396 | Input/Output: [(45 62 20 92) 20]
Test Case: 397 | Input/Output: [(75 24 20 85) 20]
Test Case: 398 | Input/Output: [(60 76 13 48) 13]
Test Case: 399 | Input/Output: [(62 44 3 49) 3]
Test Case: 400 | Input/Output: [(-14 73 67 -52) -52]
Test Case: 401 | Input/Output: [(-26 -61 -35 -16) -61]
Test Case: 402 | Input/Output: [(23 93 -51 -44) -51]
Test Case: 403 | Input/Output: [(-54 -95 34 -4) -95]
Test Case: 404 | Input/Output: [(-4 64 70 8) -4]
Test Case: 405 | Input/Output: [(-28 -31 -6 90) -31]
Test Case: 406 | Input/Output: [(-57 25 62 19) -57]
Test Case: 407 | Input/Output: [(96 -14 96 -60) -60]
Test Case: 408 | Input/Output: [(-40 53 45 55) -40]
Test Case: 409 | Input/Output: [(67 89 -55 -56) -56]
Test Case: 410 | Input/Output: [(-39 -64 62 87) -64]
Test Case: 411 | Input/Output: [(-95 95 -14 59) -95]
Test Case: 412 | Input/Output: [(-15 -48 -90 58) -90]
Test Case: 413 | Input/Output: [(72 16 79 20) 16]
Test Case: 414 | Input/Output: [(13 -3 -50 -7) -50]
Test Case: 415 | Input/Output: [(-35 -94 63 41) -94]
Test Case: 416 | Input/Output: [(54 -75 9 -39) -75]
Test Case: 417 | Input/Output: [(32 -30 -43 -95) -95]
Test Case: 418 | Input/Output: [(8 -12 -77 -88) -88]
Test Case: 419 | Input/Output: [(8 -42 -43 57) -43]
Test Case: 420 | Input/Output: [(89 88 64 -19) -19]
Test Case: 421 | Input/Output: [(93 81 42 59) 42]
Test Case: 422 | Input/Output: [(-4 10 -79 54) -79]
Test Case: 423 | Input/Output: [(-95 69 82 -2) -95]
Test Case: 424 | Input/Output: [(-3 57 -63 -52) -63]
Test Case: 425 | Input/Output: [(-45 -2 13 97) -45]
Test Case: 426 | Input/Output: [(-91 32 -38 66) -91]
Test Case: 427 | Input/Output: [(13 27 -24 36) -24]
Test Case: 428 | Input/Output: [(-36 65 86 -63) -63]
Test Case: 429 | Input/Output: [(-46 -11 2 42) -46]
Test Case: 430 | Input/Output: [(-89 -95 -5 90) -95]
Test Case: 431 | Input/Output: [(-40 17 -2 69) -40]
Test Case: 432 | Input/Output: [(11 -42 30 85) -42]
Test Case: 433 | Input/Output: [(-20 -73 -21 -47) -73]
Test Case: 434 | Input/Output: [(-93 -25 -90 79) -93]
Test Case: 435 | Input/Output: [(-11 -100 35 6) -100]
Test Case: 436 | Input/Output: [(-45 -73 90 -7) -73]
Test Case: 437 | Input/Output: [(-37 -86 -30 62) -86]
Test Case: 438 | Input/Output: [(77 58 -52 96) -52]
Test Case: 439 | Input/Output: [(71 93 32 28) 28]
Test Case: 440 | Input/Output: [(14 -14 -46 88) -46]
Test Case: 441 | Input/Output: [(63 46 -48 -96) -96]
Test Case: 442 | Input/Output: [(9 -45 -92 49) -92]
Test Case: 443 | Input/Output: [(1 -2 97 78) -2]
Test Case: 444 | Input/Output: [(-19 21 9 23) -19]
Test Case: 445 | Input/Output: [(-79 27 33 -53) -79]
Test Case: 446 | Input/Output: [(-95 -43 -89 60) -95]
Test Case: 447 | Input/Output: [(85 -27 -52 -73) -73]
Test Case: 448 | Input/Output: [(-83 92 54 45) -83]
Test Case: 449 | Input/Output: [(-76 77 38 13) -76]
Test Case: 450 | Input/Output: [(-30 18 73 -44) -44]
Test Case: 451 | Input/Output: [(48 -50 30 64) -50]
Test Case: 452 | Input/Output: [(-61 -46 17 -72) -72]
Test Case: 453 | Input/Output: [(-84 9 -60 22) -84]
Test Case: 454 | Input/Output: [(-81 -18 98 82) -81]
Test Case: 455 | Input/Output: [(-99 11 -63 -7) -99]
Test Case: 456 | Input/Output: [(14 -58 99 53) -58]
Test Case: 457 | Input/Output: [(54 76 -78 -68) -78]
Test Case: 458 | Input/Output: [(-63 -98 3 -27) -98]
Test Case: 459 | Input/Output: [(55 23 57 -79) -79]
Test Case: 460 | Input/Output: [(2 36 5 -32) -32]
Test Case: 461 | Input/Output: [(14 -36 40 -12) -36]
Test Case: 462 | Input/Output: [(-4 23 -47 85) -47]
Test Case: 463 | Input/Output: [(-79 66 97 40) -79]
Test Case: 464 | Input/Output: [(55 16 64 -17) -17]
Test Case: 465 | Input/Output: [(-66 6 -71 -12) -71]
Test Case: 466 | Input/Output: [(55 -77 -30 64) -77]
Test Case: 467 | Input/Output: [(65 73 -94 42) -94]
Test Case: 468 | Input/Output: [(78 -89 49 -35) -89]
Test Case: 469 | Input/Output: [(-100 85 34 29) -100]
Test Case: 470 | Input/Output: [(-93 -90 58 95) -93]
Test Case: 471 | Input/Output: [(37 -66 98 40) -66]
Test Case: 472 | Input/Output: [(24 66 31 43) 24]
Test Case: 473 | Input/Output: [(57 -40 78 12) -40]
Test Case: 474 | Input/Output: [(-66 3 -69 84) -69]
Test Case: 475 | Input/Output: [(30 -39 -62 67) -62]
Test Case: 476 | Input/Output: [(-99 44 -94 -60) -99]
Test Case: 477 | Input/Output: [(2 66 -24 68) -24]
Test Case: 478 | Input/Output: [(-86 -25 64 -10) -86]
Test Case: 479 | Input/Output: [(9 82 -76 54) -76]
Test Case: 480 | Input/Output: [(25 -70 98 18) -70]
Test Case: 481 | Input/Output: [(-70 -43 -68 0) -70]
Test Case: 482 | Input/Output: [(-41 53 -46 -91) -91]
Test Case: 483 | Input/Output: [(-10 90 -94 100) -94]
Test Case: 484 | Input/Output: [(35 73 -95 -70) -95]
Test Case: 485 | Input/Output: [(53 52 92 54) 52]
Test Case: 486 | Input/Output: [(72 22 -54 -8) -54]
Test Case: 487 | Input/Output: [(35 -28 -29 -67) -67]
Test Case: 488 | Input/Output: [(-92 -58 22 19) -92]
Test Case: 489 | Input/Output: [(62 8 -60 -92) -92]
Test Case: 490 | Input/Output: [(97 13 75 -21) -21]
Test Case: 491 | Input/Output: [(70 -27 6 96) -27]
Test Case: 492 | Input/Output: [(97 -91 -12 -8) -91]
Test Case: 493 | Input/Output: [(58 2 65 -68) -68]
Test Case: 494 | Input/Output: [(-7 86 -75 -23) -75]
Test Case: 495 | Input/Output: [(-10 -78 96 -99) -99]
Test Case: 496 | Input/Output: [(-62 35 84 41) -62]
Test Case: 497 | Input/Output: [(-18 8 -50 96) -50]
Test Case: 498 | Input/Output: [(68 -2 -71 73) -71]
Test Case: 499 | Input/Output: [(57 -93 13 -68) -93]
Test Case: 500 | Input/Output: [(48 42 63 11) 11]
Test Case: 501 | Input/Output: [(8 53 59 46) 8]
Test Case: 502 | Input/Output: [(69 -56 -33 86) -56]
Test Case: 503 | Input/Output: [(89 -7 57 99) -7]
Test Case: 504 | Input/Output: [(22 68 -25 46) -25]
Test Case: 505 | Input/Output: [(-65 -81 51 -69) -81]
Test Case: 506 | Input/Output: [(94 -87 -68 -19) -87]
Test Case: 507 | Input/Output: [(64 23 35 -6) -6]
Test Case: 508 | Input/Output: [(94 -34 -3 -56) -56]
Test Case: 509 | Input/Output: [(84 35 -36 -31) -36]
Test Case: 510 | Input/Output: [(32 -12 -34 91) -34]
Test Case: 511 | Input/Output: [(32 -18 68 -16) -18]
Test Case: 512 | Input/Output: [(0 65 81 22) 0]
Test Case: 513 | Input/Output: [(-97 90 51 47) -97]
Test Case: 514 | Input/Output: [(-16 11 1 17) -16]
Test Case: 515 | Input/Output: [(75 54 95 47) 47]
Test Case: 516 | Input/Output: [(27 -97 88 -46) -97]
Test Case: 517 | Input/Output: [(-94 -94 -63 69) -94]
Test Case: 518 | Input/Output: [(-50 -75 75 -47) -75]
Test Case: 519 | Input/Output: [(-100 -32 1 9) -100]
Test Case: 520 | Input/Output: [(-96 -69 1 -62) -96]
Test Case: 521 | Input/Output: [(93 79 13 91) 13]
Test Case: 522 | Input/Output: [(-23 85 -40 69) -40]
Test Case: 523 | Input/Output: [(-34 46 24 82) -34]
Test Case: 524 | Input/Output: [(-96 94 -36 -46) -96]
Test Case: 525 | Input/Output: [(41 77 47 90) 41]
Test Case: 526 | Input/Output: [(-16 -12 72 63) -16]
Test Case: 527 | Input/Output: [(-25 -49 86 -39) -49]
Test Case: 528 | Input/Output: [(-16 -62 20 -48) -62]
Test Case: 529 | Input/Output: [(-99 -71 -65 -16) -99]
Test Case: 530 | Input/Output: [(-48 46 -68 -64) -68]
Test Case: 531 | Input/Output: [(-58 -84 -92 -16) -92]
Test Case: 532 | Input/Output: [(65 -32 -20 -96) -96]
Test Case: 533 | Input/Output: [(49 -18 -21 -42) -42]
Test Case: 534 | Input/Output: [(42 -17 -43 -92) -92]
Test Case: 535 | Input/Output: [(34 -68 -9 17) -68]
Test Case: 536 | Input/Output: [(4 89 70 -76) -76]
Test Case: 537 | Input/Output: [(41 4 40 -50) -50]
Test Case: 538 | Input/Output: [(-53 82 73 -83) -83]
Test Case: 539 | Input/Output: [(-8 92 -23 -19) -23]
Test Case: 540 | Input/Output: [(-58 14 76 -68) -68]
Test Case: 541 | Input/Output: [(96 -56 -92 -2) -92]
Test Case: 542 | Input/Output: [(-82 -9 -46 86) -82]
Test Case: 543 | Input/Output: [(31 -88 52 -7) -88]
Test Case: 544 | Input/Output: [(37 26 -97 -43) -97]
Test Case: 545 | Input/Output: [(91 -39 40 -86) -86]
Test Case: 546 | Input/Output: [(77 -81 73 -99) -99]
Test Case: 547 | Input/Output: [(-64 29 94 -67) -67]
Test Case: 548 | Input/Output: [(-20 53 38 -19) -20]
Test Case: 549 | Input/Output: [(-87 69 -5 -32) -87]
Test Case: 550 | Input/Output: [(-59 27 81 -93) -93]
Test Case: 551 | Input/Output: [(-64 83 87 -69) -69]
Test Case: 552 | Input/Output: [(74 68 -85 16) -85]
Test Case: 553 | Input/Output: [(24 55 79 32) 24]
Test Case: 554 | Input/Output: [(-99 -85 79 -45) -99]
Test Case: 555 | Input/Output: [(70 31 7 -74) -74]
Test Case: 556 | Input/Output: [(94 6 98 56) 6]
Test Case: 557 | Input/Output: [(-62 30 -81 71) -81]
Test Case: 558 | Input/Output: [(57 68 67 56) 56]
Test Case: 559 | Input/Output: [(64 -15 -26 68) -26]
Test Case: 560 | Input/Output: [(-8 39 53 -19) -19]
Test Case: 561 | Input/Output: [(25 37 41 -4) -4]
Test Case: 562 | Input/Output: [(28 -33 -9 -70) -70]
Test Case: 563 | Input/Output: [(48 -57 -11 61) -57]
Test Case: 564 | Input/Output: [(-19 9 -65 -68) -68]
Test Case: 565 | Input/Output: [(10 27 -65 94) -65]
Test Case: 566 | Input/Output: [(67 -73 74 91) -73]
Test Case: 567 | Input/Output: [(49 92 97 58) 49]
Test Case: 568 | Input/Output: [(-18 17 -29 45) -29]
Test Case: 569 | Input/Output: [(72 98 -69 -91) -91]
Test Case: 570 | Input/Output: [(-71 21 10 -80) -80]
Test Case: 571 | Input/Output: [(1 -7 -36 -77) -77]
Test Case: 572 | Input/Output: [(29 30 -61 -60) -61]
Test Case: 573 | Input/Output: [(-27 66 -70 -70) -70]
Test Case: 574 | Input/Output: [(84 89 0 25) 0]
Test Case: 575 | Input/Output: [(76 -25 30 -95) -95]
Test Case: 576 | Input/Output: [(21 -92 -43 -91) -92]
Test Case: 577 | Input/Output: [(66 -27 45 3) -27]
Test Case: 578 | Input/Output: [(-29 87 -9 2) -29]
Test Case: 579 | Input/Output: [(-95 -86 -19 1) -95]
Test Case: 580 | Input/Output: [(22 -48 27 87) -48]
Test Case: 581 | Input/Output: [(89 20 86 82) 20]
Test Case: 582 | Input/Output: [(48 80 -58 17) -58]
Test Case: 583 | Input/Output: [(-100 17 90 53) -100]
Test Case: 584 | Input/Output: [(92 -48 -54 91) -54]
Test Case: 585 | Input/Output: [(-33 -56 -41 75) -56]
Test Case: 586 | Input/Output: [(-59 48 73 -79) -79]
Test Case: 587 | Input/Output: [(-57 -49 25 -74) -74]
Test Case: 588 | Input/Output: [(-85 5 89 40) -85]
Test Case: 589 | Input/Output: [(57 -18 -25 95) -25]
Test Case: 590 | Input/Output: [(87 6 93 -54) -54]
Test Case: 591 | Input/Output: [(8 -16 23 -64) -64]
Test Case: 592 | Input/Output: [(-68 -27 -23 -92) -92]
Test Case: 593 | Input/Output: [(88 -7 -52 -4) -52]
Test Case: 594 | Input/Output: [(38 55 -71 69) -71]
Test Case: 595 | Input/Output: [(-2 -54 7 -50) -54]
Test Case: 596 | Input/Output: [(13 97 15 99) 13]
Test Case: 597 | Input/Output: [(-43 54 83 25) -43]
Test Case: 598 | Input/Output: [(-80 55 -27 -79) -80]
Test Case: 599 | Input/Output: [(-97 -43 84 31) -97]
Test Case: 600 | Input/Output: [(-6 43 22 88) -6]
Test Case: 601 | Input/Output: [(-100 73 -49 -89) -100]
Test Case: 602 | Input/Output: [(64 -69 -1 93) -69]
Test Case: 603 | Input/Output: [(78 -10 87 9) -10]
Test Case: 604 | Input/Output: [(4 -2 77 -87) -87]
Test Case: 605 | Input/Output: [(-45 79 2 99) -45]
Test Case: 606 | Input/Output: [(51 45 -65 18) -65]
Test Case: 607 | Input/Output: [(2 79 44 -24) -24]
Test Case: 608 | Input/Output: [(-98 -54 -53 37) -98]
Test Case: 609 | Input/Output: [(-10 68 7 69) -10]
Test Case: 610 | Input/Output: [(-45 -37 47 70) -45]
Test Case: 611 | Input/Output: [(70 49 85 -33) -33]
Test Case: 612 | Input/Output: [(-66 -84 -37 -36) -84]
Test Case: 613 | Input/Output: [(4 81 36 85) 4]
Test Case: 614 | Input/Output: [(28 5 -91 -40) -91]
Test Case: 615 | Input/Output: [(11 64 7 -30) -30]
Test Case: 616 | Input/Output: [(73 -40 63 -5) -40]
Test Case: 617 | Input/Output: [(95 -96 -78 -49) -96]
Test Case: 618 | Input/Output: [(-35 -82 22 49) -82]
Test Case: 619 | Input/Output: [(-73 20 94 -36) -73]
Test Case: 620 | Input/Output: [(-78 63 31 -51) -78]
Test Case: 621 | Input/Output: [(-70 86 99 -36) -70]
Test Case: 622 | Input/Output: [(-90 19 58 -93) -93]
Test Case: 623 | Input/Output: [(85 -87 -50 -67) -87]
Test Case: 624 | Input/Output: [(-29 -26 32 51) -29]
Test Case: 625 | Input/Output: [(-78 54 -69 3) -78]
Test Case: 626 | Input/Output: [(-23 41 -92 -96) -96]
Test Case: 627 | Input/Output: [(5 -32 68 -22) -32]
Test Case: 628 | Input/Output: [(7 -66 -91 -95) -95]
Test Case: 629 | Input/Output: [(-55 85 -45 -30) -55]
Test Case: 630 | Input/Output: [(81 54 15 63) 15]
Test Case: 631 | Input/Output: [(69 -7 83 23) -7]
Test Case: 632 | Input/Output: [(-57 -14 -1 -55) -57]
Test Case: 633 | Input/Output: [(11 -66 -43 62) -66]
Test Case: 634 | Input/Output: [(-28 -42 71 84) -42]
Test Case: 635 | Input/Output: [(12 97 -28 -31) -31]
Test Case: 636 | Input/Output: [(-44 45 -29 72) -44]
Test Case: 637 | Input/Output: [(-87 74 76 79) -87]
Test Case: 638 | Input/Output: [(-25 -3 -16 -64) -64]
Test Case: 639 | Input/Output: [(-60 -74 65 -33) -74]
Test Case: 640 | Input/Output: [(45 71 -30 -11) -30]
Test Case: 641 | Input/Output: [(-65 38 81 -49) -65]
Test Case: 642 | Input/Output: [(-32 16 -15 -1) -32]
Test Case: 643 | Input/Output: [(-40 65 -87 -80) -87]
Test Case: 644 | Input/Output: [(-70 -47 -29 25) -70]
Test Case: 645 | Input/Output: [(-28 25 -45 8) -45]
Test Case: 646 | Input/Output: [(-3 -75 -56 72) -75]
Test Case: 647 | Input/Output: [(-55 12 -65 -16) -65]
Test Case: 648 | Input/Output: [(60 -36 -25 -59) -59]
Test Case: 649 | Input/Output: [(84 -53 12 26) -53]
Test Case: 650 | Input/Output: [(-10 30 -90 -66) -90]
Test Case: 651 | Input/Output: [(-100 -44 35 78) -100]
Test Case: 652 | Input/Output: [(-59 15 88 94) -59]
Test Case: 653 | Input/Output: [(-21 -65 2 84) -65]
Test Case: 654 | Input/Output: [(-82 -14 -95 -76) -95]
Test Case: 655 | Input/Output: [(9 32 -39 93) -39]
Test Case: 656 | Input/Output: [(-80 10 34 67) -80]
Test Case: 657 | Input/Output: [(27 52 88 -11) -11]
Test Case: 658 | Input/Output: [(-70 24 34 24) -70]
Test Case: 659 | Input/Output: [(87 78 53 87) 53]
Test Case: 660 | Input/Output: [(43 -36 -58 39) -58]
Test Case: 661 | Input/Output: [(-94 91 1 -17) -94]
Test Case: 662 | Input/Output: [(-36 -55 -17 77) -55]
Test Case: 663 | Input/Output: [(36 99 24 -42) -42]
Test Case: 664 | Input/Output: [(-24 -16 62 87) -24]
Test Case: 665 | Input/Output: [(11 -35 -17 1) -35]
Test Case: 666 | Input/Output: [(11 13 62 -44) -44]
Test Case: 667 | Input/Output: [(-92 -31 -79 88) -92]
Test Case: 668 | Input/Output: [(-34 -17 -49 -71) -71]
Test Case: 669 | Input/Output: [(91 91 -62 12) -62]
Test Case: 670 | Input/Output: [(35 70 19 -99) -99]
Test Case: 671 | Input/Output: [(37 27 20 35) 20]
Test Case: 672 | Input/Output: [(-81 -27 61 -95) -95]
Test Case: 673 | Input/Output: [(-98 -28 4 19) -98]
Test Case: 674 | Input/Output: [(82 -64 -27 -69) -69]
Test Case: 675 | Input/Output: [(-15 28 57 -94) -94]
Test Case: 676 | Input/Output: [(43 -1 -98 4) -98]
Test Case: 677 | Input/Output: [(83 99 65 88) 65]
Test Case: 678 | Input/Output: [(90 -66 -42 68) -66]
Test Case: 679 | Input/Output: [(-33 0 -13 -39) -39]
Test Case: 680 | Input/Output: [(-33 22 65 90) -33]
Test Case: 681 | Input/Output: [(-80 89 55 -94) -94]
Test Case: 682 | Input/Output: [(99 33 -38 66) -38]
Test Case: 683 | Input/Output: [(-28 6 18 14) -28]
Test Case: 684 | Input/Output: [(-53 -71 -24 -90) -90]
Test Case: 685 | Input/Output: [(62 44 42 59) 42]
Test Case: 686 | Input/Output: [(33 92 62 16) 16]
Test Case: 687 | Input/Output: [(-19 -63 -52 61) -63]
Test Case: 688 | Input/Output: [(76 34 89 64) 34]
Test Case: 689 | Input/Output: [(-49 91 -6 -33) -49]
Test Case: 690 | Input/Output: [(49 16 -5 64) -5]
Test Case: 691 | Input/Output: [(-50 -3 49 90) -50]
Test Case: 692 | Input/Output: [(-55 -39 29 69) -55]
Test Case: 693 | Input/Output: [(49 93 83 -21) -21]
Test Case: 694 | Input/Output: [(56 56 90 39) 39]
Test Case: 695 | Input/Output: [(92 96 -100 8) -100]
Test Case: 696 | Input/Output: [(-82 95 -57 42) -82]
Test Case: 697 | Input/Output: [(98 -92 -23 62) -92]
Test Case: 698 | Input/Output: [(77 61 74 -97) -97]
Test Case: 699 | Input/Output: [(88 -90 -50 21) -90]
Test Case: 700 | Input/Output: [(7 24 -4 -31) -31]
Test Case: 701 | Input/Output: [(75 75 49 84) 49]
Test Case: 702 | Input/Output: [(-41 68 79 56) -41]
Test Case: 703 | Input/Output: [(13 26 70 13) 13]
Test Case: 704 | Input/Output: [(86 -99 -100 35) -100]
Test Case: 705 | Input/Output: [(-99 59 75 -29) -99]
Test Case: 706 | Input/Output: [(-70 -62 -97 51) -97]
Test Case: 707 | Input/Output: [(48 -9 92 -44) -44]
Test Case: 708 | Input/Output: [(-48 45 41 -36) -48]
Test Case: 709 | Input/Output: [(-35 54 6 58) -35]
Test Case: 710 | Input/Output: [(-7 40 -60 -72) -72]
Test Case: 711 | Input/Output: [(-51 86 40 -28) -51]
Test Case: 712 | Input/Output: [(-18 -43 -11 -53) -53]
Test Case: 713 | Input/Output: [(34 24 -16 49) -16]
Test Case: 714 | Input/Output: [(23 -25 76 31) -25]
Test Case: 715 | Input/Output: [(-48 84 -36 -16) -48]
Test Case: 716 | Input/Output: [(-53 -1 -74 45) -74]
Test Case: 717 | Input/Output: [(98 -42 -39 -68) -68]
Test Case: 718 | Input/Output: [(-5 -32 -20 11) -32]
Test Case: 719 | Input/Output: [(96 0 57 -40) -40]
Test Case: 720 | Input/Output: [(-86 72 4 84) -86]
Test Case: 721 | Input/Output: [(-81 -10 -34 -81) -81]
Test Case: 722 | Input/Output: [(-24 -18 -70 -67) -70]
Test Case: 723 | Input/Output: [(88 -49 67 46) -49]
Test Case: 724 | Input/Output: [(53 44 61 -72) -72]
Test Case: 725 | Input/Output: [(-17 2 -18 77) -18]
Test Case: 726 | Input/Output: [(-93 72 28 -68) -93]
Test Case: 727 | Input/Output: [(-45 99 -97 45) -97]
Test Case: 728 | Input/Output: [(-32 -40 8 -42) -42]
Test Case: 729 | Input/Output: [(-99 -61 70 -8) -99]
Test Case: 730 | Input/Output: [(-70 93 35 2) -70]
Test Case: 731 | Input/Output: [(77 -29 67 -62) -62]
Test Case: 732 | Input/Output: [(14 -5 -34 -42) -42]
Test Case: 733 | Input/Output: [(-14 52 29 71) -14]
Test Case: 734 | Input/Output: [(-30 96 -15 -6) -30]
Test Case: 735 | Input/Output: [(99 23 21 55) 21]
Test Case: 736 | Input/Output: [(31 66 59 -57) -57]
Test Case: 737 | Input/Output: [(-40 -15 -96 -26) -96]
Test Case: 738 | Input/Output: [(-33 27 -98 -3) -98]
Test Case: 739 | Input/Output: [(-90 4 90 -59) -90]
Test Case: 740 | Input/Output: [(37 64 79 -32) -32]
Test Case: 741 | Input/Output: [(-58 14 -78 -63) -78]
Test Case: 742 | Input/Output: [(-19 65 -90 -47) -90]
Test Case: 743 | Input/Output: [(-90 -61 91 -49) -90]
Test Case: 744 | Input/Output: [(-28 17 -9 28) -28]
Test Case: 745 | Input/Output: [(22 -14 15 73) -14]
Test Case: 746 | Input/Output: [(49 94 72 0) 0]
Test Case: 747 | Input/Output: [(46 35 18 -44) -44]
Test Case: 748 | Input/Output: [(-39 -24 -40 73) -40]
Test Case: 749 | Input/Output: [(19 -93 55 -50) -93]
Test Case: 750 | Input/Output: [(82 87 45 75) 45]
Test Case: 751 | Input/Output: [(-71 60 2 -38) -71]
Test Case: 752 | Input/Output: [(-76 23 88 58) -76]
Test Case: 753 | Input/Output: [(-21 -17 -52 39) -52]
Test Case: 754 | Input/Output: [(-36 -83 -24 -90) -90]
Test Case: 755 | Input/Output: [(29 -11 98 97) -11]
Test Case: 756 | Input/Output: [(-86 -63 -76 99) -86]
Test Case: 757 | Input/Output: [(51 -7 35 -4) -7]
Test Case: 758 | Input/Output: [(-19 -26 -57 -16) -57]
Test Case: 759 | Input/Output: [(-68 48 -24 37) -68]
Test Case: 760 | Input/Output: [(24 89 -44 -23) -44]
Test Case: 761 | Input/Output: [(63 62 57 -24) -24]
Test Case: 762 | Input/Output: [(-81 82 -59 16) -81]
Test Case: 763 | Input/Output: [(-51 96 82 49) -51]
Test Case: 764 | Input/Output: [(45 -18 -100 -93) -100]
Test Case: 765 | Input/Output: [(-24 -70 -27 93) -70]
Test Case: 766 | Input/Output: [(0 24 -19 93) -19]
Test Case: 767 | Input/Output: [(75 -1 28 -8) -8]
Test Case: 768 | Input/Output: [(-93 20 -51 -89) -93]
Test Case: 769 | Input/Output: [(91 51 85 -86) -86]
Test Case: 770 | Input/Output: [(-75 39 65 -26) -75]
Test Case: 771 | Input/Output: [(-43 31 10 99) -43]
Test Case: 772 | Input/Output: [(27 49 -75 -41) -75]
Test Case: 773 | Input/Output: [(43 2 23 44) 2]
Test Case: 774 | Input/Output: [(-56 -12 -7 -5) -56]
Test Case: 775 | Input/Output: [(65 -46 -72 39) -72]
Test Case: 776 | Input/Output: [(24 -92 -64 68) -92]
Test Case: 777 | Input/Output: [(-54 -98 85 -73) -98]
Test Case: 778 | Input/Output: [(-27 44 -98 9) -98]
Test Case: 779 | Input/Output: [(32 50 39 -42) -42]
Test Case: 780 | Input/Output: [(-31 -64 -62 -39) -64]
Test Case: 781 | Input/Output: [(-8 -29 -6 -75) -75]
Test Case: 782 | Input/Output: [(-29 -86 32 -85) -86]
Test Case: 783 | Input/Output: [(59 6 97 45) 6]
Test Case: 784 | Input/Output: [(-60 38 50 63) -60]
Test Case: 785 | Input/Output: [(-78 50 99 64) -78]
Test Case: 786 | Input/Output: [(22 78 -47 67) -47]
Test Case: 787 | Input/Output: [(14 -46 -88 42) -88]
Test Case: 788 | Input/Output: [(33 84 99 83) 33]
Test Case: 789 | Input/Output: [(-94 46 -94 -39) -94]
Test Case: 790 | Input/Output: [(-2 -86 73 -11) -86]
Test Case: 791 | Input/Output: [(57 -19 14 -35) -35]
Test Case: 792 | Input/Output: [(-30 -89 -54 -51) -89]
Test Case: 793 | Input/Output: [(47 28 58 24) 24]
Test Case: 794 | Input/Output: [(-99 51 -55 80) -99]
Test Case: 795 | Input/Output: [(43 57 40 -79) -79]
Test Case: 796 | Input/Output: [(97 -28 52 -40) -40]
Test Case: 797 | Input/Output: [(93 3 -94 -82) -94]
Test Case: 798 | Input/Output: [(-25 67 -34 -35) -35]
Test Case: 799 | Input/Output: [(-98 59 -23 -100) -100]
Test Case: 800 | Input/Output: [(-34 44 80 -39) -39]
Test Case: 801 | Input/Output: [(-72 -41 -27 19) -72]
Test Case: 802 | Input/Output: [(43 20 -46 12) -46]
Test Case: 803 | Input/Output: [(-5 -75 20 56) -75]
Test Case: 804 | Input/Output: [(4 8 59 25) 4]
Test Case: 805 | Input/Output: [(48 -8 -93 -51) -93]
Test Case: 806 | Input/Output: [(13 -87 -97 -65) -97]
Test Case: 807 | Input/Output: [(-86 52 -84 -38) -86]
Test Case: 808 | Input/Output: [(-8 -90 24 7) -90]
Test Case: 809 | Input/Output: [(-62 34 9 -50) -62]
Test Case: 810 | Input/Output: [(45 -51 65 49) -51]
Test Case: 811 | Input/Output: [(64 72 -34 -47) -47]
Test Case: 812 | Input/Output: [(0 -4 74 -35) -35]
Test Case: 813 | Input/Output: [(-63 -53 -10 -22) -63]
Test Case: 814 | Input/Output: [(89 -50 -77 15) -77]
Test Case: 815 | Input/Output: [(50 51 25 52) 25]
Test Case: 816 | Input/Output: [(64 9 18 -81) -81]
Test Case: 817 | Input/Output: [(29 -16 -1 13) -16]
Test Case: 818 | Input/Output: [(-6 -54 69 5) -54]
Test Case: 819 | Input/Output: [(79 79 31 25) 25]
Test Case: 820 | Input/Output: [(33 42 37 -69) -69]
Test Case: 821 | Input/Output: [(12 52 -27 -78) -78]
Test Case: 822 | Input/Output: [(82 -3 -92 49) -92]
Test Case: 823 | Input/Output: [(46 -71 -90 53) -90]
Test Case: 824 | Input/Output: [(-10 93 85 -86) -86]
Test Case: 825 | Input/Output: [(8 38 -91 -23) -91]
Test Case: 826 | Input/Output: [(31 -71 -4 -59) -71]
Test Case: 827 | Input/Output: [(59 35 11 -74) -74]
Test Case: 828 | Input/Output: [(-38 -22 34 54) -38]
Test Case: 829 | Input/Output: [(68 11 40 -69) -69]
Test Case: 830 | Input/Output: [(-36 80 -16 -49) -49]
Test Case: 831 | Input/Output: [(71 60 78 71) 60]
Test Case: 832 | Input/Output: [(-83 98 10 -36) -83]
Test Case: 833 | Input/Output: [(90 20 -54 -21) -54]
Test Case: 834 | Input/Output: [(-97 -12 65 42) -97]
Test Case: 835 | Input/Output: [(95 -61 72 -99) -99]
Test Case: 836 | Input/Output: [(-44 45 -55 -68) -68]
Test Case: 837 | Input/Output: [(2 -46 -68 71) -68]
Test Case: 838 | Input/Output: [(-56 -27 3 -84) -84]
Test Case: 839 | Input/Output: [(-36 73 8 -72) -72]
Test Case: 840 | Input/Output: [(-48 15 -45 2) -48]
Test Case: 841 | Input/Output: [(43 -65 71 95) -65]
Test Case: 842 | Input/Output: [(-62 -2 81 40) -62]
Test Case: 843 | Input/Output: [(16 100 68 -49) -49]
Test Case: 844 | Input/Output: [(-67 24 -31 -36) -67]
Test Case: 845 | Input/Output: [(51 -1 -37 -35) -37]
Test Case: 846 | Input/Output: [(1 57 11 49) 1]
Test Case: 847 | Input/Output: [(81 57 -42 -39) -42]
Test Case: 848 | Input/Output: [(13 -1 -46 -54) -54]
Test Case: 849 | Input/Output: [(7 65 97 -74) -74]
Test Case: 850 | Input/Output: [(80 15 87 -86) -86]
Test Case: 851 | Input/Output: [(1 -53 -65 -22) -65]
Test Case: 852 | Input/Output: [(-47 33 55 -7) -47]
Test Case: 853 | Input/Output: [(-56 85 26 -55) -56]
Test Case: 854 | Input/Output: [(80 49 -19 -39) -39]
Test Case: 855 | Input/Output: [(48 -82 -19 -32) -82]
Test Case: 856 | Input/Output: [(29 54 95 85) 29]
Test Case: 857 | Input/Output: [(41 95 22 41) 22]
Test Case: 858 | Input/Output: [(-89 -8 -56 -68) -89]
Test Case: 859 | Input/Output: [(79 -60 -96 -31) -96]
Test Case: 860 | Input/Output: [(21 -92 89 -82) -92]
Test Case: 861 | Input/Output: [(76 87 -68 80) -68]
Test Case: 862 | Input/Output: [(38 -23 -83 83) -83]
Test Case: 863 | Input/Output: [(-87 -48 -1 73) -87]
Test Case: 864 | Input/Output: [(-30 7 85 66) -30]
Test Case: 865 | Input/Output: [(-45 87 4 17) -45]
Test Case: 866 | Input/Output: [(-43 -14 -8 80) -43]
Test Case: 867 | Input/Output: [(4 -36 -57 -13) -57]
Test Case: 868 | Input/Output: [(8 -33 56 99) -33]
Test Case: 869 | Input/Output: [(69 -93 -85 -66) -93]
Test Case: 870 | Input/Output: [(-43 -85 -20 22) -85]
Test Case: 871 | Input/Output: [(2 -2 -18 -51) -51]
Test Case: 872 | Input/Output: [(38 -87 -36 79) -87]
Test Case: 873 | Input/Output: [(14 13 -55 70) -55]
Test Case: 874 | Input/Output: [(30 -77 -96 -55) -96]
Test Case: 875 | Input/Output: [(71 -62 -57 45) -62]
Test Case: 876 | Input/Output: [(73 -74 -81 -38) -81]
Test Case: 877 | Input/Output: [(-5 -91 22 27) -91]
Test Case: 878 | Input/Output: [(-72 -25 46 73) -72]
Test Case: 879 | Input/Output: [(-19 50 -89 53) -89]
Test Case: 880 | Input/Output: [(60 -68 75 -33) -68]
Test Case: 881 | Input/Output: [(93 -64 34 -12) -64]
Test Case: 882 | Input/Output: [(-35 33 -36 -56) -56]
Test Case: 883 | Input/Output: [(-55 6 6 -35) -55]
Test Case: 884 | Input/Output: [(-65 -100 -67 -98) -100]
Test Case: 885 | Input/Output: [(66 -41 -19 -57) -57]
Test Case: 886 | Input/Output: [(75 41 70 29) 29]
Test Case: 887 | Input/Output: [(-14 53 89 -96) -96]
Test Case: 888 | Input/Output: [(-24 -86 57 -15) -86]
Test Case: 889 | Input/Output: [(-24 -49 -90 100) -90]
Test Case: 890 | Input/Output: [(72 18 74 25) 18]
Test Case: 891 | Input/Output: [(58 -27 -93 -68) -93]
Test Case: 892 | Input/Output: [(-38 -80 -48 68) -80]
Test Case: 893 | Input/Output: [(-95 -32 14 -30) -95]
Test Case: 894 | Input/Output: [(38 30 -40 -1) -40]
Test Case: 895 | Input/Output: [(34 -68 -99 22) -99]
Test Case: 896 | Input/Output: [(-71 69 -78 12) -78]
Test Case: 897 | Input/Output: [(-2 -68 -66 27) -68]
Test Case: 898 | Input/Output: [(68 47 -17 8) -17]
Test Case: 899 | Input/Output: [(22 -50 -34 10) -50]
Test Case: 900 | Input/Output: [(-28 67 -94 62) -94]
Test Case: 901 | Input/Output: [(84 10 -74 65) -74]
Test Case: 902 | Input/Output: [(-65 -51 -18 9) -65]
Test Case: 903 | Input/Output: [(90 -58 -25 -61) -61]
Test Case: 904 | Input/Output: [(-29 53 -45 82) -45]
Test Case: 905 | Input/Output: [(-84 28 -23 83) -84]
Test Case: 906 | Input/Output: [(-11 22 55 -13) -13]
Test Case: 907 | Input/Output: [(1 91 -4 75) -4]
Test Case: 908 | Input/Output: [(-67 4 -75 85) -75]
Test Case: 909 | Input/Output: [(10 -59 88 3) -59]
Test Case: 910 | Input/Output: [(58 96 97 69) 58]
Test Case: 911 | Input/Output: [(6 -57 -44 -67) -67]
Test Case: 912 | Input/Output: [(99 -53 -88 -89) -89]
Test Case: 913 | Input/Output: [(-73 -15 -43 -53) -73]
Test Case: 914 | Input/Output: [(-78 1 -32 46) -78]
Test Case: 915 | Input/Output: [(46 76 -10 -76) -76]
Test Case: 916 | Input/Output: [(-11 -71 -27 -33) -71]
Test Case: 917 | Input/Output: [(-14 80 75 -64) -64]
Test Case: 918 | Input/Output: [(-23 12 -2 70) -23]
Test Case: 919 | Input/Output: [(-33 64 70 98) -33]
Test Case: 920 | Input/Output: [(-62 -39 15 57) -62]
Test Case: 921 | Input/Output: [(-91 -96 -76 -83) -96]
Test Case: 922 | Input/Output: [(-57 21 17 53) -57]
Test Case: 923 | Input/Output: [(33 16 88 -32) -32]
Test Case: 924 | Input/Output: [(85 -57 84 61) -57]
Test Case: 925 | Input/Output: [(-68 1 35 -86) -86]
Test Case: 926 | Input/Output: [(-80 84 91 -75) -80]
Test Case: 927 | Input/Output: [(52 -19 -99 82) -99]
Test Case: 928 | Input/Output: [(47 13 -43 1) -43]
Test Case: 929 | Input/Output: [(69 26 91 -21) -21]
Test Case: 930 | Input/Output: [(32 -31 -63 -68) -68]
Test Case: 931 | Input/Output: [(-34 -37 -29 -44) -44]
Test Case: 932 | Input/Output: [(44 -41 -72 -29) -72]
Test Case: 933 | Input/Output: [(-93 -92 23 25) -93]
Test Case: 934 | Input/Output: [(-3 -40 89 -51) -51]
Test Case: 935 | Input/Output: [(-54 18 60 49) -54]
Test Case: 936 | Input/Output: [(4 -4 -32 50) -32]
Test Case: 937 | Input/Output: [(27 -88 93 -3) -88]
Test Case: 938 | Input/Output: [(-26 25 27 -31) -31]
Test Case: 939 | Input/Output: [(-5 -100 7 -78) -100]
Test Case: 940 | Input/Output: [(-82 -6 0 -12) -82]
Test Case: 941 | Input/Output: [(-19 92 97 -71) -71]
Test Case: 942 | Input/Output: [(76 -59 68 68) -59]
Test Case: 943 | Input/Output: [(99 -26 85 -85) -85]
Test Case: 944 | Input/Output: [(21 72 94 57) 21]
Test Case: 945 | Input/Output: [(95 -25 -65 97) -65]
Test Case: 946 | Input/Output: [(-26 57 40 -22) -26]
Test Case: 947 | Input/Output: [(-10 -61 -27 100) -61]
Test Case: 948 | Input/Output: [(35 93 12 -68) -68]
Test Case: 949 | Input/Output: [(-7 -83 13 -86) -86]
Test Case: 950 | Input/Output: [(-25 67 -59 7) -59]
Test Case: 951 | Input/Output: [(-24 53 88 58) -24]
Test Case: 952 | Input/Output: [(-39 20 98 -63) -63]
Test Case: 953 | Input/Output: [(12 20 0 -21) -21]
Test Case: 954 | Input/Output: [(-35 -28 -12 86) -35]
Test Case: 955 | Input/Output: [(28 9 -86 79) -86]
Test Case: 956 | Input/Output: [(33 5 -59 22) -59]
Test Case: 957 | Input/Output: [(82 -27 74 -76) -76]
Test Case: 958 | Input/Output: [(-55 -82 -31 82) -82]
Test Case: 959 | Input/Output: [(-55 2 26 -91) -91]
Test Case: 960 | Input/Output: [(64 -58 -88 9) -88]
Test Case: 961 | Input/Output: [(-40 -91 -75 61) -91]
Test Case: 962 | Input/Output: [(-39 -25 -43 -35) -43]
Test Case: 963 | Input/Output: [(-17 26 43 43) -17]
Test Case: 964 | Input/Output: [(38 41 -95 91) -95]
Test Case: 965 | Input/Output: [(55 86 -92 35) -92]
Test Case: 966 | Input/Output: [(44 -26 -95 -25) -95]
Test Case: 967 | Input/Output: [(71 -33 44 -46) -46]
Test Case: 968 | Input/Output: [(81 -66 -19 -81) -81]
Test Case: 969 | Input/Output: [(74 97 35 -30) -30]
Test Case: 970 | Input/Output: [(10 47 -37 -36) -37]
Test Case: 971 | Input/Output: [(-74 -89 69 -62) -89]
Test Case: 972 | Input/Output: [(-1 -1 19 100) -1]
Test Case: 973 | Input/Output: [(26 41 9 100) 9]
Test Case: 974 | Input/Output: [(-4 60 -85 64) -85]
Test Case: 975 | Input/Output: [(85 -75 94 25) -75]
Test Case: 976 | Input/Output: [(-56 -19 -66 67) -66]
Test Case: 977 | Input/Output: [(54 -23 -3 -37) -37]
Test Case: 978 | Input/Output: [(-21 21 -26 -15) -26]
Test Case: 979 | Input/Output: [(-91 -32 -73 -68) -91]
Test Case: 980 | Input/Output: [(-63 -50 -95 -60) -95]
Test Case: 981 | Input/Output: [(-17 -83 -37 57) -83]
Test Case: 982 | Input/Output: [(-48 50 -99 -4) -99]
Test Case: 983 | Input/Output: [(-84 -3 29 -48) -84]
Test Case: 984 | Input/Output: [(-96 -36 33 -42) -96]
Test Case: 985 | Input/Output: [(21 68 -64 51) -64]
Test Case: 986 | Input/Output: [(72 -46 56 56) -46]
Test Case: 987 | Input/Output: [(-16 -39 -9 50) -39]
Test Case: 988 | Input/Output: [(64 37 100 -2) -2]
Test Case: 989 | Input/Output: [(91 89 -20 -2) -20]
Test Case: 990 | Input/Output: [(-32 60 -86 4) -86]
Test Case: 991 | Input/Output: [(-23 32 55 -13) -23]
Test Case: 992 | Input/Output: [(72 13 -69 -36) -69]
Test Case: 993 | Input/Output: [(35 23 -15 76) -15]
Test Case: 994 | Input/Output: [(39 8 -26 60) -26]
Test Case: 995 | Input/Output: [(-50 13 30 44) -50]
Test Case: 996 | Input/Output: [(42 -74 -84 80) -84]
Test Case: 997 | Input/Output: [(31 22 81 87) 22]
Test Case: 998 | Input/Output: [(-58 -44 -17 -29) -58]
Test Case: 999 | Input/Output: [(-63 95 -72 -24) -72]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 79 -75 110 3 -29 -74 -15 116 -43 -21 94 -10 -11 -88 41 45
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-68 12 -68 -68] -68] [[-12 -12 -11 -12] -12] [[-5 -100 -5 -5] -100] [[-26 -84 -26 -26] -84] [[-53 -53 -66 -53] -66] [[56 56 -43 56] -43] [[-55 -92 -92 -92] -92] [[77 7 7 7] 7] [[-11 -11 -80 -11] -80] [[-51 -51 -51 -74] -74] [(-47 -47 -47 -47) -47] [(-13 -13 -13 -13) -13] [(20 20 20 20) 20] [(-26 -26 -26 -26) -26] [(76 76 76 76) 76] [(59 26 5 36) 5] [(16 52 36 48) 16] [(30 68 14 12) 12] [(59 17 100 21) 17] [(37 82 13 100) 13] [(72 91 71 96) 71] [(81 8 69 45) 8] [(2 13 1 36) 1] [(71 68 90 80) 68] [(33 58 98 1) 1] [(59 74 38 71) 38] [(89 20 69 18) 18] [(32 25 21 30) 21] [(71 49 50 41) 41] [(12 21 100 58) 12] [(65 39 68 3) 3] [(33 47 19 29) 19] [(33 57 53 19) 19] [(49 46 18 7) 7] [(60 59 34 52) 34] [(-58 -78 -80 80) -80] [(63 -14 46 58) -14] [(-20 -84 47 94) -84] [(-75 -58 -63 88) -75] [(1 -68 -46 -70) -70] [(33 -69 -59 -75) -75] [(48 32 -60 -11) -60] [(-70 87 -98 0) -98] [(-72 -66 48 -94) -94] [(50 59 -16 59) -16] [(-55 83 -10 83) -55] [(13 68 54 -55) -55] [(55 -76 22 11) -76] [(16 44 -4 43) -4] [(-5 -90 -53 21) -90] [(-12 -39 -33 -34) -39] [(-79 65 -52 77) -79] [(-42 -13 -29 -72) -72] [(-85 -58 90 98) -85] [(-80 -80 97 -91) -91] [(-20 -58 -33 50) -58] [(54 34 43 83) 34] [(38 90 -6 37) -6] [(84 -70 -70 -74) -74] [(-28 12 -47 -30) -47] [(68 -85 62 -84) -85] [(-68 91 53 91) -68] [(-91 67 6 -4) -91] [(-25 97 -78 85) -78] [(9 -95 72 -37) -95] [(-84 4 -91 45) -91] [(60 10 59 -25) -25] [(-23 -92 94 6) -92] [(60 -63 68 5) -63] [(-10 -89 70 4) -89] [(100 70 -44 -29) -44] [(51 68 -66 -48) -66] [(-51 98 -67 24) -67] [(-21 61 -69 -84) -84] [(-68 84 24 -40) -68] [(40 41 30 -26) -26] [(53 -92 45 -19) -92] [(32 -20 -40 11) -40] [(-91 -75 92 -22) -91] [(22 -56 -84 -56) -84] [(-37 -54 44 85) -54] [(91 73 -14 -36) -36] [(-17 0 -20 38) -20] [(90 87 -54 92) -54] [(-6 80 -54 75) -54] [(-71 -98 25 -65) -98] [(-93 50 -53 -95) -95] [(-39 -65 70 -27) -65] [(-68 4 4 -55) -68] [(-36 95 19 35) -36] [(26 19 82 -14) -14] [(79 -65 -98 60) -98] [(-22 87 -64 40) -64] [(-76 -15 77 27) -76] [(58 68 29 23) 23])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 95                 
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -5                 
Correct output: -84                 | Program output: -26                
Correct output: -66                 | Program output: -53                
Correct output: -43                 | Program output: 56                 
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -11                
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 36                 
Correct output: 16                  | Program output: 48                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 21                 
Correct output: 13                  | Program output: 95                 
Correct output: 71                  | Program output: 95                 
Correct output: 8                   | Program output: 45                 
Correct output: 1                   | Program output: 36                 
Correct output: 68                  | Program output: 80                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 71                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 30                 
Correct output: 41                  | Program output: 41                 
Correct output: 12                  | Program output: 58                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 29                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 34                  | Program output: 52                 
Correct output: -80                 | Program output: 80                 
Correct output: -14                 | Program output: 58                 
Correct output: -84                 | Program output: 94                 
Correct output: -75                 | Program output: 88                 
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -11                
Correct output: -98                 | Program output: 0                  
Correct output: -94                 | Program output: -94                
Correct output: -16                 | Program output: 59                 
Correct output: -55                 | Program output: 83                 
Correct output: -55                 | Program output: -55                
Correct output: -76                 | Program output: 11                 
Correct output: -4                  | Program output: 43                 
Correct output: -90                 | Program output: 21                 
Correct output: -39                 | Program output: -34                
Correct output: -79                 | Program output: 77                 
Correct output: -72                 | Program output: -72                
Correct output: -85                 | Program output: 95                 
Correct output: -91                 | Program output: -91                
Correct output: -58                 | Program output: 50                 
Correct output: 34                  | Program output: 83                 
Correct output: -6                  | Program output: 37                 
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -30                
Correct output: -85                 | Program output: -84                
Correct output: -68                 | Program output: 91                 
Correct output: -91                 | Program output: -4                 
Correct output: -78                 | Program output: 85                 
Correct output: -95                 | Program output: -37                
Correct output: -91                 | Program output: 45                 
Correct output: -25                 | Program output: -25                
Correct output: -92                 | Program output: 6                  
Correct output: -63                 | Program output: 5                  
Correct output: -89                 | Program output: 4                  
Correct output: -44                 | Program output: -29                
Correct output: -66                 | Program output: -48                
Correct output: -67                 | Program output: 24                 
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -40                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -19                
Correct output: -40                 | Program output: 11                 
Correct output: -91                 | Program output: -22                
Correct output: -84                 | Program output: -56                
Correct output: -54                 | Program output: 85                 
Correct output: -36                 | Program output: -36                
Correct output: -20                 | Program output: 38                 
Correct output: -54                 | Program output: 92                 
Correct output: -54                 | Program output: 75                 
Correct output: -98                 | Program output: -65                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -27                
Correct output: -68                 | Program output: -55                
Correct output: -36                 | Program output: 35                 
Correct output: -14                 | Program output: -14                
Correct output: -98                 | Program output: 60                 
Correct output: -64                 | Program output: 40                 
Correct output: -76                 | Program output: 27                 
Correct output: 23                  | Program output: 23                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_min} {:close 0, :instruction exec_k} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank})
Lexicase best program: (integer_min exec_k (exec_eq) (integer_fromboolean) integer_dup_times exec_s (exec_yankdup integer_dup) (exec_while (exec_noop in2 integer_add) boolean_rot boolean_not integer_mult exec_stackdepth exec_noop) (exec_when (integer_dec boolean_or)) exec_pop () integer_yankdup integer_shove exec_do*range (integer_fromboolean integer_lt) integer_inc exec_when (exec_swap (exec_if () (integer_mult in4) print_integer exec_s_when_autoconstructing (exec_empty integer_empty) (integer_yank) ()) ()))
Lexicase best errors: [1 1 1 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 55
Percent parens: 0.327
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_min} {:close 0, :instruction exec_k} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_or} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank})
Zero cases best program: (integer_min exec_k (exec_eq) (integer_fromboolean) integer_dup_times exec_s (exec_yankdup integer_dup) (exec_while (exec_noop in2 integer_add) boolean_rot boolean_not integer_mult exec_stackdepth exec_noop) (exec_when (integer_dec boolean_or)) exec_pop () integer_yankdup integer_shove exec_do*range (integer_fromboolean integer_lt) integer_inc exec_when (exec_swap (exec_if () (integer_mult in4) print_integer exec_s_when_autoconstructing (exec_empty integer_empty) (integer_yank) ()) ()))
Zero cases best errors: [1 1 1 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 55
Percent parens: 0.327
--- Lexicase Population Statistics ---
Count of elite individuals by case: (5 4 5 3 9 2 2 2 4 2)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (5 4 5 3 9 2 2 2 4 2)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction 95} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction 25} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 2, :instruction integer_stackdepth} {:close 1, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_521} {:close 1, :instruction exec_do*range} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 0, :instruction tag_exec_613} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 0, :instruction 4} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction -89} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth})
Best program: (in4 exec_s_when_autoconstructing (in4) (integer_yank exec_dup_items exec_if (boolean_or exec_dup_items) (integer_dup_items integer_gt boolean_and boolean_yankdup 95 exec_pop (exec_do*range (exec_do*count (boolean_yankdup integer_empty boolean_invert_first_then_and boolean_flush in4 integer_lt 25 exec_when (tagged_500 integer_dup_items in3 integer_yankdup integer_empty exec_eq) boolean_not) integer_lte boolean_flush boolean_invert_second_then_and exec_if (integer_stackdepth) () boolean_eq) in1) exec_swap (integer_lte in4 boolean_or exec_s (boolean_empty integer_min print_integer tag_exec_521 (exec_do*range () boolean_dup_items)) (exec_do*times (boolean_frominteger exec_swap () () integer_empty integer_flush exec_swap () () exec_when (exec_k (exec_do*times (boolean_not in4 in4 in1 integer_yank exec_empty exec_rot () (integer_fromboolean integer_min in3 integer_flush exec_yank exec_k (tag_exec_613 (exec_flush exec_eq integer_mod) integer_flush 4 exec_do*range (exec_yank integer_sub integer_mod exec_dup_items exec_do*times (exec_dup_times (integer_stackdepth integer_inc) integer_flush boolean_rot boolean_flush) in1 exec_flush exec_swap (in2 integer_fromboolean -89 integer_flush boolean_stackdepth) ())) ()) ())) ()))) ()) ())) ())
Errors: [1 1 1 1 0 1 0 0 1 0]
Total: 6
Mean: 0.6
Genome size: 97
Size: 136
Percent parens: 0.287
--- Population Statistics ---
Average total errors in population: 9.962
Median total errors in population: 10
Error averages by case: (0.995 0.996 0.995 0.997 0.991 0.998 0.998 0.998 0.996 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.932
Average program size in population (points): 70.302
Average percent parens in population: 0.281
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.285
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 455742
--- Timings ---
Current time: 1559582835219 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  3.9%
Reproduction:         0.8 seconds, 30.5%
Fitness Testing:      1.6 seconds, 65.6%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 680
Test mean error for best: 0.68000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -68                 | Program output: 12                 
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -53                
Correct output: -43                 | Program output: 56                 
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -11                
Correct output: -74                 | Program output: -51                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 26                 
Correct output: 16                  | Program output: 52                 
Correct output: 12                  | Program output: 68                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 82                 
Correct output: 71                  | Program output: 91                 
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 13                 
Correct output: 68                  | Program output: 68                 
Correct output: 1                   | Program output: 58                 
Correct output: 38                  | Program output: 74                 
Correct output: 18                  | Program output: 20                 
Correct output: 21                  | Program output: 25                 
Correct output: 41                  | Program output: 49                 
Correct output: 12                  | Program output: 21                 
Correct output: 3                   | Program output: 39                 
Correct output: 19                  | Program output: 47                 
Correct output: 19                  | Program output: 57                 
Correct output: 7                   | Program output: 46                 
Correct output: 34                  | Program output: 59                 
Correct output: -80                 | Program output: -78                
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -58                
Correct output: -70                 | Program output: -68                
Correct output: -75                 | Program output: -69                
Correct output: -60                 | Program output: 32                 
Correct output: -98                 | Program output: 87                 
Correct output: -94                 | Program output: -66                
Correct output: -16                 | Program output: 59                 
Correct output: -55                 | Program output: 83                 
Correct output: -55                 | Program output: 68                 
Correct output: -76                 | Program output: -76                
Correct output: -4                  | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -39                 | Program output: -39                
Correct output: -79                 | Program output: 65                 
Correct output: -72                 | Program output: -13                
Correct output: -85                 | Program output: -58                
Correct output: -91                 | Program output: -80                
Correct output: -58                 | Program output: -58                
Correct output: 34                  | Program output: 34                 
Correct output: -6                  | Program output: 90                 
Correct output: -74                 | Program output: -70                
Correct output: -47                 | Program output: 12                 
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: 91                 
Correct output: -91                 | Program output: 67                 
Correct output: -78                 | Program output: 97                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: 4                  
Correct output: -25                 | Program output: 10                 
Correct output: -92                 | Program output: -92                
Correct output: -63                 | Program output: -63                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: 70                 
Correct output: -66                 | Program output: 68                 
Correct output: -67                 | Program output: 98                 
Correct output: -84                 | Program output: 61                 
Correct output: -68                 | Program output: 84                 
Correct output: -26                 | Program output: 41                 
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -20                
Correct output: -91                 | Program output: -75                
Correct output: -84                 | Program output: -56                
Correct output: -54                 | Program output: -54                
Correct output: -36                 | Program output: 73                 
Correct output: -20                 | Program output: 0                  
Correct output: -54                 | Program output: 87                 
Correct output: -54                 | Program output: 80                 
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 4                  
Correct output: -36                 | Program output: 95                 
Correct output: -14                 | Program output: 19                 
Correct output: -98                 | Program output: -65                
Correct output: -64                 | Program output: 87                 
Correct output: -76                 | Program output: -15                
Correct output: 23                  | Program output: 68                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction tagged_338} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_and} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction tag_boolean_958} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth})
Lexicase best program: (tagged_338 exec_if (integer_dec boolean_yankdup boolean_pop integer_add) (exec_s_when_autoconstructing (exec_s_when_autoconstructing (integer_eq in4 integer_min integer_lte integer_gte integer_div boolean_flush) () (in2 print_integer integer_lt boolean_and) in2) (integer_gte integer_gt) (exec_yankdup integer_dup) exec_flush exec_eq exec_y_when_autoconstructing (exec_do*while (boolean_invert_second_then_and integer_div exec_rot (integer_stackdepth integer_lte) (integer_swap) (tag_boolean_958 exec_do*times () exec_y (boolean_dup_times exec_s (exec_eq) (integer_mod boolean_eq) (integer_add integer_min exec_yank integer_yankdup integer_gte) in1 boolean_eq exec_y (integer_swap in2 boolean_frominteger) exec_do*times (exec_k () (boolean_dup) boolean_rot boolean_rot exec_stackdepth integer_dup_items exec_dup_times (integer_fromboolean integer_dup_times exec_rot (integer_min) (exec_k_when_autoconstructing (integer_dup_times) (print_boolean) integer_dup_items integer_stackdepth) ()))))))))
Lexicase best errors: [0 0 1 1 1 0 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 99
Percent parens: 0.293
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction tagged_338} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_and} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction tag_boolean_958} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth})
Zero cases best program: (tagged_338 exec_if (integer_dec boolean_yankdup boolean_pop integer_add) (exec_s_when_autoconstructing (exec_s_when_autoconstructing (integer_eq in4 integer_min integer_lte integer_gte integer_div boolean_flush) () (in2 print_integer integer_lt boolean_and) in2) (integer_gte integer_gt) (exec_yankdup integer_dup) exec_flush exec_eq exec_y_when_autoconstructing (exec_do*while (boolean_invert_second_then_and integer_div exec_rot (integer_stackdepth integer_lte) (integer_swap) (tag_boolean_958 exec_do*times () exec_y (boolean_dup_times exec_s (exec_eq) (integer_mod boolean_eq) (integer_add integer_min exec_yank integer_yankdup integer_gte) in1 boolean_eq exec_y (integer_swap in2 boolean_frominteger) exec_do*times (exec_k () (boolean_dup) boolean_rot boolean_rot exec_stackdepth integer_dup_items exec_dup_times (integer_fromboolean integer_dup_times exec_rot (integer_min) (exec_k_when_autoconstructing (integer_dup_times) (print_boolean) integer_dup_items integer_stackdepth) ()))))))))
Zero cases best errors: [0 0 1 1 1 0 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 99
Percent parens: 0.293
--- Lexicase Population Statistics ---
Count of elite individuals by case: (369 229 211 140 222 228 820 590 228 209)
Population mean number of elite cases: 3.25
Count of perfect (error zero) individuals by case: (369 229 211 140 222 228 820 590 228 209)
Population mean number of perfect (error zero) cases: 3.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction tagged_338} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_and} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction tag_boolean_958} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_eq})
Best program: (tagged_338 exec_if (integer_dec boolean_yankdup boolean_pop integer_add) (exec_s_when_autoconstructing (exec_s_when_autoconstructing (integer_eq in4 integer_min integer_lte integer_gte integer_div boolean_flush) () (in2 print_integer integer_lt boolean_and) in2) (integer_gte integer_gt) (exec_yankdup integer_dup) exec_flush exec_y (exec_y_when_autoconstructing (exec_do*while (boolean_invert_second_then_and integer_div exec_rot (integer_stackdepth integer_lte) (integer_swap) (tag_boolean_958 exec_do*times () exec_y (boolean_dup_times exec_s (exec_eq) (integer_mod boolean_eq) ())))))))
Errors: [0 0 1 1 1 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 42
Size: 62
Percent parens: 0.323
--- Population Statistics ---
Average total errors in population: 6.754
Median total errors in population: 6
Error averages by case: (0.631 0.771 0.789 0.86 0.778 0.772 0.18 0.41 0.772 0.791)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.1
Average program size in population (points): 64.56
Average percent parens in population: 0.254
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.504
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 96
Genome diversity (% unique genomes):	 0.499
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 97
Syntactic diversity (% unique Push programs):	 0.491
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 847631
--- Timings ---
Current time: 1559582837657 milliseconds
Total Time:           5.3 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         2.3 seconds, 44.2%
Fitness Testing:      2.2 seconds, 41.7%
Report:               0.7 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 420
Test mean error for best: 0.42000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -5                 
Correct output: -84                 | Program output: -26                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 36                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 21                 
Correct output: 13                  | Program output: 13                 
Correct output: 71                  | Program output: 71                 
Correct output: 8                   | Program output: 45                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 80                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 38                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 21                 
Correct output: 41                  | Program output: 41                 
Correct output: 12                  | Program output: 58                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 34                  | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -14                 | Program output: 46                 
Correct output: -84                 | Program output: 47                 
Correct output: -75                 | Program output: -63                
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: -16                 | Program output: -16                
Correct output: -55                 | Program output: -10                
Correct output: -55                 | Program output: -55                
Correct output: -76                 | Program output: 11                 
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -53                
Correct output: -39                 | Program output: -34                
Correct output: -79                 | Program output: -52                
Correct output: -72                 | Program output: -72                
Correct output: -85                 | Program output: 90                 
Correct output: -91                 | Program output: -91                
Correct output: -58                 | Program output: -33                
Correct output: 34                  | Program output: 43                 
Correct output: -6                  | Program output: -6                 
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -85                 | Program output: -84                
Correct output: -68                 | Program output: 53                 
Correct output: -91                 | Program output: -4                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -37                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: -25                
Correct output: -92                 | Program output: 6                  
Correct output: -63                 | Program output: 5                  
Correct output: -89                 | Program output: 4                  
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -40                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -19                
Correct output: -40                 | Program output: 11                 
Correct output: -91                 | Program output: -22                
Correct output: -84                 | Program output: -84                
Correct output: -54                 | Program output: 44                 
Correct output: -36                 | Program output: -36                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -65                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -27                
Correct output: -68                 | Program output: -55                
Correct output: -36                 | Program output: 19                 
Correct output: -14                 | Program output: -14                
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: 27                 
Correct output: 23                  | Program output: 23                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction tag_boolean_516} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_k} {:close 0, :instruction tagged_917} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 2, :instruction integer_stackdepth} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_521} {:close 1, :instruction exec_do*range} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times})
Lexicase best program: (exec_dup_times (boolean_frominteger) boolean_swap boolean_swap integer_rot integer_max boolean_not exec_s_when_autoconstructing (exec_dup_times (exec_when (integer_fromboolean integer_eq tag_boolean_516 exec_stackdepth exec_k () (tagged_917 boolean_and exec_empty) integer_sub) integer_min exec_when (tagged_500 integer_dup_items in3 integer_yankdup integer_empty exec_eq) boolean_not) integer_lte boolean_flush boolean_invert_second_then_and exec_if (integer_stackdepth) () exec_do*count () in1) (exec_swap (integer_lte in4 boolean_or exec_s (boolean_empty integer_min print_integer tag_exec_521 (exec_do*range () boolean_dup_items)) (exec_do*times (boolean_frominteger exec_swap () () integer_empty integer_flush exec_swap () () exec_when (exec_k (exec_do*times ()) ()))) ()) ()) ())
Lexicase best errors: [1 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 84
Percent parens: 0.345
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction tag_boolean_516} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_k} {:close 0, :instruction tagged_917} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 2, :instruction integer_stackdepth} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_521} {:close 1, :instruction exec_do*range} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times})
Zero cases best program: (exec_dup_times (boolean_frominteger) boolean_swap boolean_swap integer_rot integer_max boolean_not exec_s_when_autoconstructing (exec_dup_times (exec_when (integer_fromboolean integer_eq tag_boolean_516 exec_stackdepth exec_k () (tagged_917 boolean_and exec_empty) integer_sub) integer_min exec_when (tagged_500 integer_dup_items in3 integer_yankdup integer_empty exec_eq) boolean_not) integer_lte boolean_flush boolean_invert_second_then_and exec_if (integer_stackdepth) () exec_do*count () in1) (exec_swap (integer_lte in4 boolean_or exec_s (boolean_empty integer_min print_integer tag_exec_521 (exec_do*range () boolean_dup_items)) (exec_do*times (boolean_frominteger exec_swap () () integer_empty integer_flush exec_swap () () exec_when (exec_k (exec_do*times ()) ()))) ()) ()) ())
Zero cases best errors: [1 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 84
Percent parens: 0.345
--- Lexicase Population Statistics ---
Count of elite individuals by case: (184 419 184 240 297 245 297 262 857 298)
Population mean number of elite cases: 3.28
Count of perfect (error zero) individuals by case: (184 419 184 240 297 245 297 262 857 298)
Population mean number of perfect (error zero) cases: 3.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction 95} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction 25} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 2, :instruction integer_stackdepth} {:close 1, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 3, :instruction in3} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 2, :instruction integer_stackdepth} {:close 1, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_521} {:close 1, :instruction exec_do*range} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 0, :instruction tag_exec_613} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction 4} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_flush})
Best program: (exec_s_when_autoconstructing (in4) (integer_yank exec_dup_items boolean_shove boolean_or exec_dup_items) (integer_dup_items integer_gt boolean_and boolean_yankdup 95 exec_pop (exec_do*range (exec_do*count (boolean_yankdup integer_empty boolean_invert_first_then_and boolean_flush in4 integer_lt 25 exec_when (tagged_500 integer_dup_items in3 integer_yankdup integer_empty exec_eq) boolean_not) integer_lte boolean_flush boolean_invert_second_then_and exec_if (integer_stackdepth) () boolean_eq) in1) exec_swap (integer_lte in4 boolean_or in3) ()) boolean_shove exec_eq boolean_not integer_lte boolean_flush boolean_invert_second_then_and exec_if (integer_stackdepth) () boolean_eq in1 exec_swap (integer_lte in4 boolean_or exec_s (boolean_empty integer_min print_integer tag_exec_521 (exec_do*range () boolean_dup_items)) (exec_do*times (boolean_frominteger exec_swap () () integer_empty integer_flush exec_swap () () exec_when (exec_k (exec_do*times (boolean_not in4 in4 in1 integer_yank exec_empty exec_rot () (integer_fromboolean integer_min in3 integer_flush exec_yank exec_k (tag_exec_613 (exec_flush exec_eq integer_eq) integer_flush 4 exec_do*range (exec_yank integer_sub integer_mod exec_dup_items exec_do*times (exec_dup_times (integer_stackdepth integer_inc) integer_flush boolean_rot boolean_flush))) ()) ())) ()))) ()) ())
Errors: [1 0 1 0 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 103
Size: 142
Percent parens: 0.275
--- Population Statistics ---
Average total errors in population: 6.717
Median total errors in population: 9
Error averages by case: (0.816 0.581 0.816 0.76 0.703 0.755 0.703 0.738 0.143 0.702)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.636
Average program size in population (points): 70.768
Average percent parens in population: 0.263
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.1855
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 104
Genome diversity (% unique genomes):	 0.597
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 105
Syntactic diversity (% unique Push programs):	 0.582
Total error diversity:				 0.008
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1241793
--- Timings ---
Current time: 1559582840836 milliseconds
Total Time:           8.1 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.4 seconds, 54.2%
Fitness Testing:      2.7 seconds, 32.9%
Report:               1.0 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 405
Test mean error for best: 0.40500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -5                 
Correct output: -84                 | Program output: -26                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 36                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 21                 
Correct output: 13                  | Program output: 13                 
Correct output: 71                  | Program output: 71                 
Correct output: 8                   | Program output: 45                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 80                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 38                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 21                 
Correct output: 41                  | Program output: 41                 
Correct output: 12                  | Program output: 58                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 34                  | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -14                 | Program output: 46                 
Correct output: -84                 | Program output: 47                 
Correct output: -75                 | Program output: -63                
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: -16                 | Program output: -16                
Correct output: -55                 | Program output: -10                
Correct output: -55                 | Program output: -55                
Correct output: -76                 | Program output: 11                 
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -53                
Correct output: -39                 | Program output: -34                
Correct output: -79                 | Program output: -52                
Correct output: -72                 | Program output: -72                
Correct output: -85                 | Program output: 90                 
Correct output: -91                 | Program output: -91                
Correct output: -58                 | Program output: -33                
Correct output: 34                  | Program output: 43                 
Correct output: -6                  | Program output: -6                 
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -85                 | Program output: -84                
Correct output: -68                 | Program output: 53                 
Correct output: -91                 | Program output: -4                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -37                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: -25                
Correct output: -92                 | Program output: 6                  
Correct output: -63                 | Program output: 5                  
Correct output: -89                 | Program output: 4                  
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -40                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -19                
Correct output: -40                 | Program output: -40                
Correct output: -91                 | Program output: -22                
Correct output: -84                 | Program output: -84                
Correct output: -54                 | Program output: 44                 
Correct output: -36                 | Program output: -36                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -65                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -27                
Correct output: -68                 | Program output: -55                
Correct output: -36                 | Program output: 19                 
Correct output: -14                 | Program output: -14                
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: 27                 
Correct output: 23                  | Program output: 23                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction 95} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction 25} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 2, :instruction integer_stackdepth} {:close 1, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 3, :instruction in3} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 2, :instruction integer_stackdepth} {:close 1, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_521} {:close 1, :instruction exec_do*range} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 0, :instruction tag_exec_613} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction 4} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_flush})
Lexicase best program: (in4 exec_s_when_autoconstructing (in4) (integer_yank exec_dup_items exec_if (boolean_or exec_dup_items) (integer_dup_items integer_gt boolean_and boolean_yankdup 95 exec_pop (exec_do*range (exec_do*count (boolean_yankdup integer_empty boolean_invert_first_then_and boolean_flush in4 integer_lt 25 exec_when (tagged_500 integer_dup_items in3 integer_yankdup integer_empty exec_eq) boolean_not) integer_lte boolean_flush boolean_invert_second_then_and exec_if (integer_stackdepth) () boolean_eq) in1) exec_swap (integer_lte in4 boolean_or in3) ()) boolean_shove) (exec_eq) boolean_not integer_lte boolean_flush boolean_invert_second_then_and exec_if (integer_stackdepth) () boolean_eq in1 exec_swap (integer_lte in4 boolean_or exec_s (boolean_empty integer_min print_integer tag_exec_521 (exec_do*range () boolean_dup_items)) (exec_do*times (boolean_frominteger exec_swap () () integer_empty integer_flush exec_swap () () exec_when (exec_k (exec_do*times (boolean_not in4 in4 in1 integer_yank exec_empty exec_rot () (integer_fromboolean integer_min in3 integer_flush exec_yank exec_k (tag_exec_613 (exec_flush exec_eq integer_eq) integer_flush 4 exec_do*range (exec_yank integer_sub integer_mod exec_dup_items exec_do*times (exec_dup_times (integer_stackdepth integer_inc) integer_flush boolean_rot boolean_flush))) ()) ())) ()))) ()) ())
Lexicase best errors: [0 0 0 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 145
Percent parens: 0.283
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction 95} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction 25} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 2, :instruction integer_stackdepth} {:close 1, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 3, :instruction in3} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 2, :instruction integer_stackdepth} {:close 1, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_521} {:close 1, :instruction exec_do*range} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 0, :instruction tag_exec_613} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction 4} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_flush})
Zero cases best program: (in4 exec_s_when_autoconstructing (in4) (integer_yank exec_dup_items exec_if (boolean_or exec_dup_items) (integer_dup_items integer_gt boolean_and boolean_yankdup 95 exec_pop (exec_do*range (exec_do*count (boolean_yankdup integer_empty boolean_invert_first_then_and boolean_flush in4 integer_lt 25 exec_when (tagged_500 integer_dup_items in3 integer_yankdup integer_empty exec_eq) boolean_not) integer_lte boolean_flush boolean_invert_second_then_and exec_if (integer_stackdepth) () boolean_eq) in1) exec_swap (integer_lte in4 boolean_or in3) ()) boolean_shove) (exec_eq) boolean_not integer_lte boolean_flush boolean_invert_second_then_and exec_if (integer_stackdepth) () boolean_eq in1 exec_swap (integer_lte in4 boolean_or exec_s (boolean_empty integer_min print_integer tag_exec_521 (exec_do*range () boolean_dup_items)) (exec_do*times (boolean_frominteger exec_swap () () integer_empty integer_flush exec_swap () () exec_when (exec_k (exec_do*times (boolean_not in4 in4 in1 integer_yank exec_empty exec_rot () (integer_fromboolean integer_min in3 integer_flush exec_yank exec_k (tag_exec_613 (exec_flush exec_eq integer_eq) integer_flush 4 exec_do*range (exec_yank integer_sub integer_mod exec_dup_items exec_do*times (exec_dup_times (integer_stackdepth integer_inc) integer_flush boolean_rot boolean_flush))) ()) ())) ()))) ()) ())
Zero cases best errors: [0 0 0 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 145
Percent parens: 0.283
--- Lexicase Population Statistics ---
Count of elite individuals by case: (891 891 871 2 1 854 414 326 326 867)
Population mean number of elite cases: 5.44
Count of perfect (error zero) individuals by case: (891 891 871 2 1 854 414 326 326 867)
Population mean number of perfect (error zero) cases: 5.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_467} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_k} {:close 0, :instruction tagged_917} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 2, :instruction integer_stackdepth} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_521} {:close 1, :instruction exec_do*range} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times})
Best program: (exec_dup_times (boolean_frominteger) boolean_swap boolean_swap integer_rot integer_max boolean_not exec_s_when_autoconstructing (exec_dup_times (exec_when (integer_fromboolean integer_eq tagged_467 exec_stackdepth exec_k () (tagged_917 boolean_and exec_empty) integer_sub) integer_min exec_when (tagged_500 integer_dup_items in3 integer_yankdup integer_empty exec_eq) boolean_not) integer_lte boolean_flush integer_yankdup integer_empty exec_eq) (boolean_not) (integer_lte boolean_flush boolean_invert_second_then_and exec_if (integer_stackdepth) () exec_do*count () in1) exec_swap (boolean_invert_first_then_and in4 boolean_or exec_s (boolean_empty integer_min print_integer tag_exec_521 (exec_do*range () boolean_dup_items)) (exec_do*times (boolean_frominteger exec_swap () () integer_empty integer_flush exec_swap () () exec_when (exec_k (exec_do*times ()) ()))) ()) ())
Errors: [0 0 0 1 1 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 61
Size: 90
Percent parens: 0.322
--- Population Statistics ---
Average total errors in population: 4.557
Median total errors in population: 4
Error averages by case: (0.109 0.109 0.129 0.998 0.999 0.146 0.586 0.674 0.674 0.133)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.295
Average program size in population (points): 92.646
Average percent parens in population: 0.332
Minimum age in population: 3.5
Maximum age in population: 6.0
Average age in population: 5.1675
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 121
Genome diversity (% unique genomes):	 0.698
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 121
Syntactic diversity (% unique Push programs):	 0.697
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1834849
--- Timings ---
Current time: 1559582843807 milliseconds
Total Time:          11.3 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.3 seconds, 55.9%
Fitness Testing:      3.3 seconds, 29.3%
Report:               1.6 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 443
Test mean error for best: 0.44300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -53                
Correct output: -43                 | Program output: 56                 
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -11                
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 26                 
Correct output: 16                  | Program output: 48                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 82                 
Correct output: 71                  | Program output: 91                 
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 13                 
Correct output: 68                  | Program output: 68                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 71                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 25                 
Correct output: 41                  | Program output: 41                 
Correct output: 12                  | Program output: 21                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 29                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 34                  | Program output: 52                 
Correct output: -80                 | Program output: -78                
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -11                
Correct output: -98                 | Program output: 0                  
Correct output: -94                 | Program output: -94                
Correct output: -16                 | Program output: 59                 
Correct output: -55                 | Program output: 83                 
Correct output: -55                 | Program output: -55                
Correct output: -76                 | Program output: -76                
Correct output: -4                  | Program output: 43                 
Correct output: -90                 | Program output: -90                
Correct output: -39                 | Program output: -39                
Correct output: -79                 | Program output: 65                 
Correct output: -72                 | Program output: -72                
Correct output: -85                 | Program output: -58                
Correct output: -91                 | Program output: -91                
Correct output: -58                 | Program output: -58                
Correct output: 34                  | Program output: 34                 
Correct output: -6                  | Program output: 37                 
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -30                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: 91                 
Correct output: -91                 | Program output: -4                 
Correct output: -78                 | Program output: 85                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: 4                  
Correct output: -25                 | Program output: -25                
Correct output: -92                 | Program output: -92                
Correct output: -63                 | Program output: -63                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: -29                
Correct output: -66                 | Program output: -48                
Correct output: -67                 | Program output: 24                 
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -40                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -20                
Correct output: -91                 | Program output: -75                
Correct output: -84                 | Program output: -56                
Correct output: -54                 | Program output: -54                
Correct output: -36                 | Program output: -36                
Correct output: -20                 | Program output: 0                  
Correct output: -54                 | Program output: 87                 
Correct output: -54                 | Program output: 75                 
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: -55                
Correct output: -36                 | Program output: 35                 
Correct output: -14                 | Program output: -14                
Correct output: -98                 | Program output: -65                
Correct output: -64                 | Program output: 40                 
Correct output: -76                 | Program output: -15                
Correct output: 23                  | Program output: 23                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_467} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction tagged_917} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 2, :instruction integer_gte} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_521} {:close 1, :instruction exec_do*range} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times})
Lexicase best program: (exec_dup_times (boolean_frominteger) boolean_swap boolean_swap integer_rot integer_max boolean_not exec_s_when_autoconstructing (exec_dup_times (exec_when (integer_fromboolean integer_eq tagged_467 exec_stackdepth exec_k (tagged_917 boolean_and exec_empty integer_sub) (integer_min exec_when (tagged_500 integer_dup_items in3 integer_yankdup integer_empty exec_eq) boolean_not integer_lte boolean_flush boolean_invert_second_then_and) exec_if (integer_gte) () exec_do*count () in1) exec_swap (boolean_invert_first_then_and in4 boolean_or exec_s (in2 integer_min print_integer tag_exec_521 (exec_do*range () boolean_dup_items)) (exec_do*times (boolean_frominteger exec_swap () () integer_empty integer_flush exec_swap () () exec_when (exec_k (exec_do*times ()) ()))) ()) ())) () ())
Lexicase best errors: [0 1 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 84
Percent parens: 0.345
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_467} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction tagged_917} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 2, :instruction integer_gte} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_521} {:close 1, :instruction exec_do*range} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times})
Zero cases best program: (exec_dup_times (boolean_frominteger) boolean_swap boolean_swap integer_rot integer_max boolean_not exec_s_when_autoconstructing (exec_dup_times (exec_when (integer_fromboolean integer_eq tagged_467 exec_stackdepth exec_k (tagged_917 boolean_and exec_empty integer_sub) (integer_min exec_when (tagged_500 integer_dup_items in3 integer_yankdup integer_empty exec_eq) boolean_not integer_lte boolean_flush boolean_invert_second_then_and) exec_if (integer_gte) () exec_do*count () in1) exec_swap (boolean_invert_first_then_and in4 boolean_or exec_s (in2 integer_min print_integer tag_exec_521 (exec_do*range () boolean_dup_items)) (exec_do*times (boolean_frominteger exec_swap () () integer_empty integer_flush exec_swap () () exec_when (exec_k (exec_do*times ()) ()))) ()) ())) () ())
Zero cases best errors: [0 1 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 84
Percent parens: 0.345
--- Lexicase Population Statistics ---
Count of elite individuals by case: (673 325 677 601 191 184 184 706 183 479)
Population mean number of elite cases: 4.20
Count of perfect (error zero) individuals by case: (673 325 677 601 191 184 184 706 183 479)
Population mean number of perfect (error zero) cases: 4.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_467} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_k} {:close 0, :instruction tagged_917} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 2, :instruction integer_stackdepth} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_521} {:close 1, :instruction exec_do*range} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times})
Best program: (exec_dup_times (boolean_frominteger) boolean_swap boolean_swap integer_rot integer_max boolean_not exec_s_when_autoconstructing (exec_dup_times (exec_when (integer_fromboolean integer_eq tagged_467 exec_stackdepth exec_k () (tagged_917 boolean_and exec_empty) integer_sub) integer_min exec_when (tagged_500 integer_dup_items in3 integer_yankdup integer_empty exec_eq) boolean_not) integer_lte boolean_flush boolean_invert_second_then_and exec_if (integer_stackdepth) () exec_do*count () in1) (exec_swap (boolean_invert_first_then_and in4 boolean_or exec_s (in2 integer_min print_integer tag_exec_521 (exec_do*range () boolean_dup_items)) (exec_do*times (boolean_frominteger exec_swap () () integer_empty integer_flush exec_swap () () exec_when (exec_k (exec_do*times ()) ()))) ()) ()) ())
Errors: [0 1 0 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 55
Size: 84
Percent parens: 0.345
--- Population Statistics ---
Average total errors in population: 5.797
Median total errors in population: 5
Error averages by case: (0.327 0.675 0.323 0.399 0.809 0.816 0.816 0.294 0.817 0.521)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.001
Average program size in population (points): 90.379
Average percent parens in population: 0.327
Minimum age in population: 4.5
Maximum age in population: 8.0
Average age in population: 6.651125
Median age in population: 6.6875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 63
Genome diversity (% unique genomes):	 0.751
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.75
Total error diversity:				 0.008
Error (vector) diversity:			 0.042
Behavioral diversity:				 0.114
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2531580
--- Timings ---
Current time: 1559582846900 milliseconds
Total Time:          14.3 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.2 seconds, 57.5%
Fitness Testing:      4.0 seconds, 27.9%
Report:               2.0 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 405
Test mean error for best: 0.40500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -5                 
Correct output: -84                 | Program output: -26                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 36                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 21                 
Correct output: 13                  | Program output: 13                 
Correct output: 71                  | Program output: 71                 
Correct output: 8                   | Program output: 45                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 80                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 38                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 21                 
Correct output: 41                  | Program output: 41                 
Correct output: 12                  | Program output: 58                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 34                  | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -14                 | Program output: 46                 
Correct output: -84                 | Program output: 47                 
Correct output: -75                 | Program output: -63                
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: -16                 | Program output: -16                
Correct output: -55                 | Program output: -10                
Correct output: -55                 | Program output: -55                
Correct output: -76                 | Program output: 11                 
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -53                
Correct output: -39                 | Program output: -34                
Correct output: -79                 | Program output: -52                
Correct output: -72                 | Program output: -72                
Correct output: -85                 | Program output: 90                 
Correct output: -91                 | Program output: -91                
Correct output: -58                 | Program output: -33                
Correct output: 34                  | Program output: 43                 
Correct output: -6                  | Program output: -6                 
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -85                 | Program output: -84                
Correct output: -68                 | Program output: 53                 
Correct output: -91                 | Program output: -4                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -37                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: -25                
Correct output: -92                 | Program output: 6                  
Correct output: -63                 | Program output: 5                  
Correct output: -89                 | Program output: 4                  
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -40                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -19                
Correct output: -40                 | Program output: -40                
Correct output: -91                 | Program output: -22                
Correct output: -84                 | Program output: -84                
Correct output: -54                 | Program output: 44                 
Correct output: -36                 | Program output: -36                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -65                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -27                
Correct output: -68                 | Program output: -55                
Correct output: -36                 | Program output: 19                 
Correct output: -14                 | Program output: -14                
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: 27                 
Correct output: 23                  | Program output: 23                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction tag_boolean_516} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_k} {:close 0, :instruction tagged_917} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_min} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_521} {:close 1, :instruction exec_do*range} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction tag_exec_521} {:close 1, :instruction exec_do*range} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times})
Lexicase best program: (exec_dup_times (boolean_frominteger) exec_dup_times (boolean_frominteger) boolean_swap boolean_swap integer_rot integer_max boolean_not exec_s_when_autoconstructing (exec_dup_times (exec_when (integer_fromboolean integer_eq tag_boolean_516 exec_stackdepth exec_k () (tagged_917 boolean_and exec_empty) integer_sub) integer_min integer_sub) integer_min exec_when (tagged_500 integer_dup_items in3 integer_yankdup integer_empty boolean_invert_first_then_and in4 boolean_or exec_s (boolean_empty integer_min print_integer tag_exec_521 (exec_do*range () boolean_dup_items)) (tag_exec_521 (exec_do*range () boolean_dup_items)) (exec_do*times (boolean_frominteger exec_swap () () integer_empty integer_flush exec_swap () () exec_when (exec_k (exec_k (exec_do*times ()) ()) ()))))) () ())
Lexicase best errors: [0 1 1 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 82
Percent parens: 0.354
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction tag_boolean_516} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_k} {:close 0, :instruction tagged_917} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_min} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_521} {:close 1, :instruction exec_do*range} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction tag_exec_521} {:close 1, :instruction exec_do*range} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times})
Zero cases best program: (exec_dup_times (boolean_frominteger) exec_dup_times (boolean_frominteger) boolean_swap boolean_swap integer_rot integer_max boolean_not exec_s_when_autoconstructing (exec_dup_times (exec_when (integer_fromboolean integer_eq tag_boolean_516 exec_stackdepth exec_k () (tagged_917 boolean_and exec_empty) integer_sub) integer_min integer_sub) integer_min exec_when (tagged_500 integer_dup_items in3 integer_yankdup integer_empty boolean_invert_first_then_and in4 boolean_or exec_s (boolean_empty integer_min print_integer tag_exec_521 (exec_do*range () boolean_dup_items)) (tag_exec_521 (exec_do*range () boolean_dup_items)) (exec_do*times (boolean_frominteger exec_swap () () integer_empty integer_flush exec_swap () () exec_when (exec_k (exec_k (exec_do*times ()) ()) ()))))) () ())
Zero cases best errors: [0 1 1 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 82
Percent parens: 0.354
--- Lexicase Population Statistics ---
Count of elite individuals by case: (714 546 733 163 235 874 679 237 689 234)
Population mean number of elite cases: 5.10
Count of perfect (error zero) individuals by case: (714 546 733 163 235 874 679 237 689 234)
Population mean number of perfect (error zero) cases: 5.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction tag_boolean_516} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_k} {:close 0, :instruction tagged_917} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 2, :instruction integer_stackdepth} {:close 1, :instruction exec_do*count} {:close 0, :instruction in1} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_521} {:close 1, :instruction exec_do*range} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times})
Best program: (exec_dup_times (boolean_frominteger) boolean_swap boolean_swap integer_rot integer_max boolean_not exec_s_when_autoconstructing (exec_dup_times (exec_when (integer_fromboolean integer_eq tag_boolean_516 exec_stackdepth exec_k () (tagged_917 boolean_and exec_empty) integer_sub) integer_min exec_when (tagged_500 integer_dup_items in3 integer_yankdup integer_empty exec_eq) boolean_not) integer_lte boolean_flush boolean_invert_second_then_and exec_if (integer_stackdepth) () exec_do*count () in1 exec_swap () (integer_lte in4 boolean_or exec_s (boolean_empty integer_min print_integer tag_exec_521 (exec_do*range () boolean_dup_items)) (exec_do*times (boolean_frominteger exec_swap () () integer_empty integer_flush exec_swap () () exec_when (exec_k (exec_do*times ()) ()))) ())) () ())
Errors: [0 1 1 1 0 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 55
Size: 84
Percent parens: 0.345
--- Population Statistics ---
Average total errors in population: 4.896
Median total errors in population: 4
Error averages by case: (0.286 0.454 0.267 0.837 0.765 0.126 0.321 0.763 0.311 0.766)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.896
Average program size in population (points): 81.376
Average percent parens in population: 0.339
Minimum age in population: 6.0
Maximum age in population: 9.75
Average age in population: 8.1446875
Median age in population: 8.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 90
Genome diversity (% unique genomes):	 0.677
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 91
Syntactic diversity (% unique Push programs):	 0.674
Total error diversity:				 0.008
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.088
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3219401
--- Timings ---
Current time: 1559582849837 milliseconds
Total Time:          17.4 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.1 seconds, 58.1%
Fitness Testing:      4.6 seconds, 26.8%
Report:               2.5 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 443
Test mean error for best: 0.44300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -53                
Correct output: -43                 | Program output: 56                 
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -11                
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 26                 
Correct output: 16                  | Program output: 48                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 82                 
Correct output: 71                  | Program output: 91                 
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 13                 
Correct output: 68                  | Program output: 68                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 71                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 25                 
Correct output: 41                  | Program output: 41                 
Correct output: 12                  | Program output: 21                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 29                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 34                  | Program output: 52                 
Correct output: -80                 | Program output: -78                
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -11                
Correct output: -98                 | Program output: 0                  
Correct output: -94                 | Program output: -94                
Correct output: -16                 | Program output: 59                 
Correct output: -55                 | Program output: 83                 
Correct output: -55                 | Program output: -55                
Correct output: -76                 | Program output: -76                
Correct output: -4                  | Program output: 43                 
Correct output: -90                 | Program output: -90                
Correct output: -39                 | Program output: -39                
Correct output: -79                 | Program output: 65                 
Correct output: -72                 | Program output: -72                
Correct output: -85                 | Program output: -58                
Correct output: -91                 | Program output: -91                
Correct output: -58                 | Program output: -58                
Correct output: 34                  | Program output: 34                 
Correct output: -6                  | Program output: 37                 
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -30                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: 91                 
Correct output: -91                 | Program output: -4                 
Correct output: -78                 | Program output: 85                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: 4                  
Correct output: -25                 | Program output: -25                
Correct output: -92                 | Program output: -92                
Correct output: -63                 | Program output: -63                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: -29                
Correct output: -66                 | Program output: -48                
Correct output: -67                 | Program output: 24                 
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -40                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -20                
Correct output: -91                 | Program output: -75                
Correct output: -84                 | Program output: -56                
Correct output: -54                 | Program output: -54                
Correct output: -36                 | Program output: -36                
Correct output: -20                 | Program output: 0                  
Correct output: -54                 | Program output: 87                 
Correct output: -54                 | Program output: 75                 
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: -55                
Correct output: -36                 | Program output: 35                 
Correct output: -14                 | Program output: -14                
Correct output: -98                 | Program output: -65                
Correct output: -64                 | Program output: 40                 
Correct output: -76                 | Program output: -15                
Correct output: 23                  | Program output: 23                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_467} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_k} {:close 0, :instruction tagged_917} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 2, :instruction integer_gte} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_521} {:close 1, :instruction exec_do*range} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times})
Lexicase best program: (exec_dup_times (boolean_frominteger) boolean_swap boolean_swap integer_rot integer_max boolean_not exec_s_when_autoconstructing (exec_dup_times (exec_when (integer_fromboolean integer_eq tagged_467 exec_stackdepth exec_k () (tagged_917 boolean_and exec_empty) integer_sub) integer_min exec_when (tagged_500 integer_dup_items exec_y_when_autoconstructing (integer_yankdup integer_empty exec_eq) boolean_not) integer_lte boolean_flush boolean_invert_second_then_and exec_if (integer_gte) () exec_do*count () in1) exec_swap (boolean_invert_first_then_and integer_mult boolean_or exec_s (in2 integer_min print_integer tag_exec_521 (exec_do*range () boolean_dup_items)) (exec_do*times (boolean_frominteger exec_swap () () integer_empty integer_flush exec_swap () () exec_when (exec_k (exec_do*times ()) ()))) ()) ()) () ())
Lexicase best errors: [0 0 0 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 85
Percent parens: 0.353
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_467} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_k} {:close 0, :instruction tagged_917} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 2, :instruction integer_gte} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_521} {:close 1, :instruction exec_do*range} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times})
Zero cases best program: (exec_dup_times (boolean_frominteger) boolean_swap boolean_swap integer_rot integer_max boolean_not exec_s_when_autoconstructing (exec_dup_times (exec_when (integer_fromboolean integer_eq tagged_467 exec_stackdepth exec_k () (tagged_917 boolean_and exec_empty) integer_sub) integer_min exec_when (tagged_500 integer_dup_items exec_y_when_autoconstructing (integer_yankdup integer_empty exec_eq) boolean_not) integer_lte boolean_flush boolean_invert_second_then_and exec_if (integer_gte) () exec_do*count () in1) exec_swap (boolean_invert_first_then_and integer_mult boolean_or exec_s (in2 integer_min print_integer tag_exec_521 (exec_do*range () boolean_dup_items)) (exec_do*times (boolean_frominteger exec_swap () () integer_empty integer_flush exec_swap () () exec_when (exec_k (exec_do*times ()) ()))) ()) ()) () ())
Zero cases best errors: [0 0 0 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 85
Percent parens: 0.353
--- Lexicase Population Statistics ---
Count of elite individuals by case: (215 212 384 370 442 619 380 628 377 371)
Population mean number of elite cases: 4.00
Count of perfect (error zero) individuals by case: (215 212 384 370 442 619 380 628 377 371)
Population mean number of perfect (error zero) cases: 4.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_467} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_k} {:close 0, :instruction tagged_917} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_if} {:close 2, :instruction integer_gte} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_521} {:close 1, :instruction exec_do*range} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times})
Best program: (exec_dup_times (boolean_frominteger) boolean_swap boolean_swap integer_rot integer_max boolean_not exec_s_when_autoconstructing (exec_dup_times (exec_when (integer_fromboolean integer_eq tagged_467 exec_stackdepth exec_k () (tagged_917 boolean_and exec_empty) integer_sub) integer_min exec_when (tagged_500 integer_dup_items exec_y_when_autoconstructing (integer_yankdup integer_empty exec_eq) boolean_not) integer_lte boolean_flush boolean_invert_second_then_and exec_if () (integer_gte)) exec_do*count () in1) (exec_swap (boolean_invert_first_then_and in4 boolean_or exec_s (in2 integer_min print_integer tag_exec_521 (exec_do*range () boolean_dup_items)) (exec_do*times (boolean_frominteger exec_swap () () integer_empty integer_flush exec_swap () () exec_when (exec_k (exec_do*times ()) ()))) ()) ()) ())
Errors: [1 1 0 0 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 55
Size: 85
Percent parens: 0.353
--- Population Statistics ---
Average total errors in population: 6.002
Median total errors in population: 6
Error averages by case: (0.785 0.788 0.616 0.63 0.558 0.381 0.62 0.372 0.623 0.629)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.315
Average program size in population (points): 81.936
Average percent parens in population: 0.339
Minimum age in population: 7.0
Maximum age in population: 11.1875
Average age in population: 9.51653125
Median age in population: 9.59375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 84
Genome diversity (% unique genomes):	 0.769
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.766
Total error diversity:				 0.008
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.09
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3826720
--- Timings ---
Current time: 1559582852775 milliseconds
Total Time:          20.2 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.9 seconds, 59.0%
Fitness Testing:      5.2 seconds, 26.0%
Report:               2.9 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 219
Test mean error for best: 0.21900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -53                
Correct output: -43                 | Program output: 56                 
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -11                
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 26                 
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 37                 
Correct output: 71                  | Program output: 72                 
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 2                  
Correct output: 68                  | Program output: 68                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 59                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 25                 
Correct output: 41                  | Program output: 41                 
Correct output: 12                  | Program output: 12                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 29                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 34                  | Program output: 52                 
Correct output: -80                 | Program output: -78                
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -11                
Correct output: -98                 | Program output: -70                
Correct output: -94                 | Program output: -94                
Correct output: -16                 | Program output: 50                 
Correct output: -55                 | Program output: -55                
Correct output: -55                 | Program output: -55                
Correct output: -76                 | Program output: -76                
Correct output: -4                  | Program output: 16                 
Correct output: -90                 | Program output: -90                
Correct output: -39                 | Program output: -39                
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: -72                
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -91                
Correct output: -58                 | Program output: -58                
Correct output: 34                  | Program output: 34                 
Correct output: -6                  | Program output: 37                 
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -30                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -68                
Correct output: -91                 | Program output: -91                
Correct output: -78                 | Program output: -25                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -84                
Correct output: -25                 | Program output: -25                
Correct output: -92                 | Program output: -92                
Correct output: -63                 | Program output: -63                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: -29                
Correct output: -66                 | Program output: -48                
Correct output: -67                 | Program output: -51                
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: -56                
Correct output: -54                 | Program output: -54                
Correct output: -36                 | Program output: -36                
Correct output: -20                 | Program output: -17                
Correct output: -54                 | Program output: 87                 
Correct output: -54                 | Program output: -6                 
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: -68                
Correct output: -36                 | Program output: -36                
Correct output: -14                 | Program output: -14                
Correct output: -98                 | Program output: -65                
Correct output: -64                 | Program output: -22                
Correct output: -76                 | Program output: -76                
Correct output: 23                  | Program output: 23                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_467} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_k} {:close 0, :instruction tagged_917} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 2, :instruction integer_stackdepth} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_521} {:close 1, :instruction exec_do*range} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times})
Lexicase best program: (exec_dup_times (boolean_frominteger) boolean_swap boolean_swap integer_rot integer_max boolean_not exec_s_when_autoconstructing (exec_dup_times (exec_when (integer_fromboolean integer_eq tagged_467 exec_stackdepth exec_k () (tagged_917 boolean_and exec_empty) integer_sub) integer_min exec_when (tagged_500 integer_dup_items in3 integer_yankdup integer_empty exec_eq) boolean_not) integer_lte boolean_flush boolean_invert_second_then_and exec_if (integer_stackdepth) () exec_do*count () in1) (exec_swap (boolean_invert_first_then_and in4 boolean_or) (exec_s (in2 integer_min in4 boolean_or exec_s (boolean_empty integer_min print_integer tag_exec_521 (exec_do*range () boolean_dup_items)) (exec_do*times (boolean_frominteger exec_swap () () integer_empty integer_flush exec_swap () () exec_when (exec_k (exec_do*times ()) ()))) ()) () ())) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 92
Percent parens: 0.348
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_467} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_k} {:close 0, :instruction tagged_917} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 2, :instruction integer_stackdepth} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_521} {:close 1, :instruction exec_do*range} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times})
Zero cases best program: (exec_dup_times (boolean_frominteger) boolean_swap boolean_swap integer_rot integer_max boolean_not exec_s_when_autoconstructing (exec_dup_times (exec_when (integer_fromboolean integer_eq tagged_467 exec_stackdepth exec_k () (tagged_917 boolean_and exec_empty) integer_sub) integer_min exec_when (tagged_500 integer_dup_items in3 integer_yankdup integer_empty exec_eq) boolean_not) integer_lte boolean_flush boolean_invert_second_then_and exec_if (integer_stackdepth) () exec_do*count () in1) (exec_swap (boolean_invert_first_then_and in4 boolean_or) (exec_s (in2 integer_min in4 boolean_or exec_s (boolean_empty integer_min print_integer tag_exec_521 (exec_do*range () boolean_dup_items)) (exec_do*times (boolean_frominteger exec_swap () () integer_empty integer_flush exec_swap () () exec_when (exec_k (exec_do*times ()) ()))) ()) () ())) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 92
Percent parens: 0.348
--- Lexicase Population Statistics ---
Count of elite individuals by case: (715 873 405 420 415 369 366 734 184 415)
Population mean number of elite cases: 4.90
Count of perfect (error zero) individuals by case: (715 873 405 420 415 369 366 734 184 415)
Population mean number of perfect (error zero) cases: 4.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_467} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_k} {:close 0, :instruction tagged_917} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 2, :instruction integer_stackdepth} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_521} {:close 1, :instruction exec_do*range} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times})
Best program: (exec_dup_times (boolean_frominteger) boolean_swap boolean_swap integer_rot integer_max boolean_not exec_s_when_autoconstructing (exec_dup_times (exec_when (integer_fromboolean integer_eq tagged_467 exec_stackdepth exec_k () (tagged_917 boolean_and exec_empty) integer_sub) integer_min exec_when (tagged_500 integer_dup_items in3 integer_yankdup integer_empty exec_eq) boolean_not) integer_lte boolean_flush boolean_invert_second_then_and exec_if (integer_stackdepth) () exec_do*count () in1) (exec_swap (boolean_invert_first_then_and in4 boolean_or) (exec_s (in2 integer_min in4 boolean_or exec_s (boolean_empty integer_min print_integer tag_exec_521 (exec_do*range () boolean_dup_items)) (exec_do*times (boolean_frominteger exec_swap () () integer_empty integer_flush exec_swap () () exec_when (exec_k (exec_do*times ()) ()))) ()) () ())) ())
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 60
Size: 92
Percent parens: 0.348
--- Population Statistics ---
Average total errors in population: 5.104
Median total errors in population: 5
Error averages by case: (0.285 0.127 0.595 0.58 0.585 0.631 0.634 0.266 0.816 0.585)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.897
Average program size in population (points): 80.697
Average percent parens in population: 0.345
Minimum age in population: 9.0
Maximum age in population: 12.5625
Average age in population: 11.09575
Median age in population: 11.21875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 82
Genome diversity (% unique genomes):	 0.754
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 82
Syntactic diversity (% unique Push programs):	 0.752
Total error diversity:				 0.009
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4446614
--- Timings ---
Current time: 1559582855622 milliseconds
Total Time:          23.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.7 seconds, 59.3%
Fitness Testing:      5.8 seconds, 25.2%
Report:               3.5 seconds, 15.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 223
Test mean error for best: 0.22300
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 1
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 1
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 1
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 1
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 1
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 1
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 1
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 1
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 1
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 1
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 1
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 36                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 71                  | Program output: 71                 
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 68                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 38                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 21                 
Correct output: 41                  | Program output: 41                 
Correct output: 12                  | Program output: 21                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 34                  | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -63                
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: -16                 | Program output: -16                
Correct output: -55                 | Program output: -10                
Correct output: -55                 | Program output: -55                
Correct output: -76                 | Program output: -76                
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -90                
Correct output: -39                 | Program output: -39                
Correct output: -79                 | Program output: -52                
Correct output: -72                 | Program output: -72                
Correct output: -85                 | Program output: -58                
Correct output: -91                 | Program output: -91                
Correct output: -58                 | Program output: -58                
Correct output: 34                  | Program output: 34                 
Correct output: -6                  | Program output: -6                 
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: 53                 
Correct output: -91                 | Program output: -4                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: -25                
Correct output: -92                 | Program output: -92                
Correct output: -63                 | Program output: -63                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -40                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -91                 | Program output: -75                
Correct output: -84                 | Program output: -84                
Correct output: -54                 | Program output: -54                
Correct output: -36                 | Program output: -36                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: -55                
Correct output: -36                 | Program output: 19                 
Correct output: -14                 | Program output: -14                
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: -15                
Correct output: 23                  | Program output: 23                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_467} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_k} {:close 0, :instruction tagged_917} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 2, :instruction integer_stackdepth} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_521} {:close 1, :instruction exec_do*range} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times})
Lexicase best program: (exec_dup_times (boolean_frominteger) boolean_swap boolean_swap integer_rot integer_max boolean_not exec_s_when_autoconstructing (exec_dup_times (exec_when (integer_fromboolean integer_eq tagged_467 exec_stackdepth exec_k () (tagged_917 boolean_and exec_empty) integer_sub) integer_min exec_when (tagged_500 integer_dup_items in3 integer_yankdup exec_empty) integer_sub) integer_min exec_when (tagged_500 integer_dup_items in3 integer_yankdup integer_empty exec_eq) exec_rot () (integer_lte boolean_flush boolean_invert_second_then_and exec_if (integer_stackdepth) () exec_do*count () in1) (exec_swap (boolean_invert_first_then_and in4 boolean_or) (integer_div in2 integer_min in4 boolean_or exec_s (boolean_empty integer_min print_integer tag_exec_521 (exec_do*range () boolean_dup_items)) (exec_do*times (boolean_frominteger exec_swap () () integer_empty integer_flush exec_swap () () exec_when (exec_k (exec_do*times ()) ()))) ()))) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 101
Percent parens: 0.327
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_467} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_k} {:close 0, :instruction tagged_917} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 2, :instruction integer_stackdepth} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_521} {:close 1, :instruction exec_do*range} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times})
Zero cases best program: (exec_dup_times (boolean_frominteger) boolean_swap boolean_swap integer_rot integer_max boolean_not exec_s_when_autoconstructing (exec_dup_times (exec_when (integer_fromboolean integer_eq tagged_467 exec_stackdepth exec_k () (tagged_917 boolean_and exec_empty) integer_sub) integer_min exec_when (tagged_500 integer_dup_items in3 integer_yankdup exec_empty) integer_sub) integer_min exec_when (tagged_500 integer_dup_items in3 integer_yankdup integer_empty exec_eq) exec_rot () (integer_lte boolean_flush boolean_invert_second_then_and exec_if (integer_stackdepth) () exec_do*count () in1) (exec_swap (boolean_invert_first_then_and in4 boolean_or) (integer_div in2 integer_min in4 boolean_or exec_s (boolean_empty integer_min print_integer tag_exec_521 (exec_do*range () boolean_dup_items)) (exec_do*times (boolean_frominteger exec_swap () () integer_empty integer_flush exec_swap () () exec_when (exec_k (exec_do*times ()) ()))) ()))) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 101
Percent parens: 0.327
--- Lexicase Population Statistics ---
Count of elite individuals by case: (773 813 829 728 829 729 245 252 249 252)
Population mean number of elite cases: 5.70
Count of perfect (error zero) individuals by case: (773 813 829 728 829 729 245 252 249 252)
Population mean number of perfect (error zero) cases: 5.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_467} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_k} {:close 0, :instruction tagged_917} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_empty} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_500} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 2, :instruction integer_stackdepth} {:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_521} {:close 1, :instruction exec_do*range} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times})
Best program: (exec_dup_times (boolean_frominteger) boolean_swap boolean_swap integer_rot integer_max boolean_not exec_s_when_autoconstructing (exec_dup_times (exec_when (integer_fromboolean integer_eq tagged_467 exec_stackdepth exec_k () (tagged_917 boolean_and exec_empty) integer_sub)) integer_min exec_when (tagged_500 integer_dup_items in3 integer_yankdup integer_empty exec_eq) boolean_not) (integer_lte boolean_flush boolean_invert_second_then_and exec_if (integer_stackdepth) () exec_do*count () in1) (exec_swap (boolean_invert_first_then_and in4 boolean_or) (exec_s (in2 integer_min in4) (boolean_or exec_s (boolean_empty integer_min print_integer tag_exec_521 (exec_do*range () boolean_dup_items)) (exec_do*times (boolean_frominteger exec_swap () () integer_empty integer_flush exec_swap () () exec_when (exec_k (exec_do*times ()) ()))) ()) ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 60
Size: 92
Percent parens: 0.348
--- Population Statistics ---
Average total errors in population: 4.301
Median total errors in population: 4
Error averages by case: (0.227 0.187 0.171 0.272 0.171 0.271 0.755 0.748 0.751 0.748)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.054
Average program size in population (points): 88.667
Average percent parens in population: 0.345
Minimum age in population: 10.21875
Maximum age in population: 14.0234375
Average age in population: 12.3217421875
Median age in population: 12.28125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 308
Genome diversity (% unique genomes):	 0.631
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 311
Syntactic diversity (% unique Push programs):	 0.626
Total error diversity:				 0.01
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 5010166
--- Timings ---
Current time: 1559582858523 milliseconds
Total Time:          26.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.6 seconds, 60.0%
Fitness Testing:      6.4 seconds, 24.6%
Report:               3.9 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 8
Successful program: (exec_dup_times (boolean_frominteger) boolean_swap boolean_swap integer_rot integer_max boolean_not exec_s_when_autoconstructing (exec_dup_times (exec_when (integer_fromboolean integer_eq tagged_467 exec_stackdepth exec_k () (tagged_917 boolean_and exec_empty) integer_sub)) integer_min exec_when (tagged_500 integer_dup_items in3 integer_yankdup integer_empty exec_eq) boolean_not) (integer_lte boolean_flush boolean_invert_second_then_and exec_if (integer_stackdepth) () exec_do*count () in1) (exec_swap (boolean_invert_first_then_and in4 boolean_or) (exec_s (in2 integer_min in4) (boolean_or exec_s (boolean_empty integer_min print_integer tag_exec_521 (exec_do*range () boolean_dup_items)) (exec_do*times (boolean_frominteger exec_swap () () integer_empty integer_flush exec_swap () () exec_when (exec_k (exec_do*times ()) ()))) ()) ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 92


Auto-simplifying with starting size: 92
step: 0
program: (exec_dup_times (boolean_frominteger) boolean_swap boolean_swap integer_rot integer_max boolean_not exec_s_when_autoconstructing (exec_dup_times (exec_when (integer_fromboolean integer_eq tagged_467 exec_stackdepth exec_k () (tagged_917 boolean_and exec_empty) integer_sub)) integer_min exec_when (tagged_500 integer_dup_items in3 integer_yankdup integer_empty exec_eq) boolean_not) (integer_lte boolean_flush boolean_invert_second_then_and exec_if (integer_stackdepth) () exec_do*count () in1) (exec_swap (boolean_invert_first_then_and in4 boolean_or) (exec_s (in2 integer_min in4) (boolean_or exec_s (boolean_empty integer_min print_integer tag_exec_521 (exec_do*range () boolean_dup_items)) (exec_do*times (boolean_frominteger exec_swap () () integer_empty integer_flush exec_swap () () exec_when (exec_k (exec_do*times ()) ()))) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 92

step: 500
program: (exec_dup_times (boolean_frominteger) boolean_swap boolean_swap integer_rot integer_max boolean_not exec_s_when_autoconstructing (exec_dup_times (exec_when (integer_fromboolean integer_eq tagged_467 exec_stackdepth exec_k () (tagged_917 boolean_and exec_empty) integer_sub)) integer_min exec_when (tagged_500 integer_dup_items in3 integer_yankdup integer_empty exec_eq) boolean_not) (integer_lte boolean_flush boolean_invert_second_then_and exec_if (integer_stackdepth) () exec_do*count () in1) (exec_swap (boolean_invert_first_then_and in4 boolean_or) (exec_s (in2 integer_min in4) (boolean_or exec_s (boolean_empty integer_min print_integer tag_exec_521 (exec_do*range () boolean_dup_items)) (exec_do*times (boolean_frominteger exec_swap () () integer_empty integer_flush exec_swap () () exec_when (exec_k (exec_do*times ()) ()))) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 92

step: 1000
program: (exec_dup_times (boolean_frominteger) boolean_swap boolean_swap integer_rot integer_max boolean_not exec_s_when_autoconstructing (exec_dup_times (exec_when (integer_fromboolean integer_eq tagged_467 exec_stackdepth exec_k () (tagged_917 boolean_and exec_empty) integer_sub)) integer_min exec_when (tagged_500 integer_dup_items in3 integer_yankdup integer_empty exec_eq) boolean_not) (integer_lte boolean_flush boolean_invert_second_then_and exec_if (integer_stackdepth) () exec_do*count () in1) (exec_swap (boolean_invert_first_then_and in4 boolean_or) (exec_s (in2 integer_min in4) (boolean_or exec_s (boolean_empty integer_min print_integer tag_exec_521 (exec_do*range () boolean_dup_items)) (exec_do*times (boolean_frominteger exec_swap () () integer_empty integer_flush exec_swap () () exec_when (exec_k (exec_do*times ()) ()))) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 92

step: 1500
program: (exec_dup_times (boolean_frominteger) boolean_swap boolean_swap integer_rot integer_max boolean_not exec_s_when_autoconstructing (exec_dup_times (exec_when (integer_fromboolean integer_eq tagged_467 exec_stackdepth exec_k () (tagged_917 boolean_and exec_empty) integer_sub)) integer_min exec_when (tagged_500 integer_dup_items in3 integer_yankdup integer_empty exec_eq) boolean_not) (integer_lte boolean_flush boolean_invert_second_then_and exec_if (integer_stackdepth) () exec_do*count () in1) (exec_swap (boolean_invert_first_then_and in4 boolean_or) (exec_s (in2 integer_min in4) (boolean_or exec_s (boolean_empty integer_min print_integer tag_exec_521 (exec_do*range () boolean_dup_items)) (exec_do*times (boolean_frominteger exec_swap () () integer_empty integer_flush exec_swap () () exec_when (exec_k (exec_do*times ()) ()))) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 92

step: 2000
program: (exec_dup_times (boolean_frominteger) boolean_swap boolean_swap integer_rot integer_max boolean_not exec_s_when_autoconstructing (exec_dup_times (exec_when (integer_fromboolean integer_eq tagged_467 exec_stackdepth exec_k () (tagged_917 boolean_and exec_empty) integer_sub)) integer_min exec_when (tagged_500 integer_dup_items in3 integer_yankdup integer_empty exec_eq) boolean_not) (integer_lte boolean_flush boolean_invert_second_then_and exec_if (integer_stackdepth) () exec_do*count () in1) (exec_swap (boolean_invert_first_then_and in4 boolean_or) (exec_s (in2 integer_min in4) (boolean_or exec_s (boolean_empty integer_min print_integer tag_exec_521 (exec_do*range () boolean_dup_items)) (exec_do*times (boolean_frominteger exec_swap () () integer_empty integer_flush exec_swap () () exec_when (exec_k (exec_do*times ()) ()))) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 92

step: 2500
program: (exec_dup_times (boolean_frominteger) boolean_swap boolean_swap integer_rot integer_max boolean_not exec_s_when_autoconstructing (exec_dup_times (exec_when (integer_fromboolean integer_eq tagged_467 exec_stackdepth exec_k () (tagged_917 boolean_and exec_empty) integer_sub)) integer_min exec_when (tagged_500 integer_dup_items in3 integer_yankdup integer_empty exec_eq) boolean_not) (integer_lte boolean_flush boolean_invert_second_then_and exec_if (integer_stackdepth) () exec_do*count () in1) (exec_swap (boolean_invert_first_then_and in4 boolean_or) (exec_s (in2 integer_min in4) (boolean_or exec_s (boolean_empty integer_min print_integer tag_exec_521 (exec_do*range () boolean_dup_items)) (exec_do*times (boolean_frominteger exec_swap () () integer_empty integer_flush exec_swap () () exec_when (exec_k (exec_do*times ()) ()))) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 92

step: 3000
program: (exec_dup_times (boolean_frominteger) boolean_swap boolean_swap integer_rot integer_max boolean_not exec_s_when_autoconstructing (exec_dup_times (exec_when (integer_fromboolean integer_eq tagged_467 exec_stackdepth exec_k () (tagged_917 boolean_and exec_empty) integer_sub)) integer_min exec_when (tagged_500 integer_dup_items in3 integer_yankdup integer_empty exec_eq) boolean_not) (integer_lte boolean_flush boolean_invert_second_then_and exec_if (integer_stackdepth) () exec_do*count () in1) (exec_swap (boolean_invert_first_then_and in4 boolean_or) (exec_s (in2 integer_min in4) (boolean_or exec_s (boolean_empty integer_min print_integer tag_exec_521 (exec_do*range () boolean_dup_items)) (exec_do*times (boolean_frominteger exec_swap () () integer_empty integer_flush exec_swap () () exec_when (exec_k (exec_do*times ()) ()))) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 92

step: 3500
program: (exec_dup_times (boolean_frominteger) boolean_swap boolean_swap integer_rot integer_max boolean_not exec_s_when_autoconstructing (exec_dup_times (exec_when (integer_fromboolean integer_eq tagged_467 exec_stackdepth exec_k () (tagged_917 boolean_and exec_empty) integer_sub)) integer_min exec_when (tagged_500 integer_dup_items in3 integer_yankdup integer_empty exec_eq) boolean_not) (integer_lte boolean_flush boolean_invert_second_then_and exec_if (integer_stackdepth) () exec_do*count () in1) (exec_swap (boolean_invert_first_then_and in4 boolean_or) (exec_s (in2 integer_min in4) (boolean_or exec_s (boolean_empty integer_min print_integer tag_exec_521 (exec_do*range () boolean_dup_items)) (exec_do*times (boolean_frominteger exec_swap () () integer_empty integer_flush exec_swap () () exec_when (exec_k (exec_do*times ()) ()))) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 92

step: 4000
program: (exec_dup_times (boolean_frominteger) boolean_swap boolean_swap integer_rot integer_max boolean_not exec_s_when_autoconstructing (exec_dup_times (exec_when (integer_fromboolean integer_eq tagged_467 exec_stackdepth exec_k () (tagged_917 boolean_and exec_empty) integer_sub)) integer_min exec_when (tagged_500 integer_dup_items in3 integer_yankdup integer_empty exec_eq) boolean_not) (integer_lte boolean_flush boolean_invert_second_then_and exec_if (integer_stackdepth) () exec_do*count () in1) (exec_swap (boolean_invert_first_then_and in4 boolean_or) (exec_s (in2 integer_min in4) (boolean_or exec_s (boolean_empty integer_min print_integer tag_exec_521 (exec_do*range () boolean_dup_items)) (exec_do*times (boolean_frominteger exec_swap () () integer_empty integer_flush exec_swap () () exec_when (exec_k (exec_do*times ()) ()))) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 92

step: 4500
program: (exec_dup_times (boolean_frominteger) boolean_swap boolean_swap integer_rot integer_max boolean_not exec_s_when_autoconstructing (exec_dup_times (exec_when (integer_fromboolean integer_eq tagged_467 exec_stackdepth exec_k () (tagged_917 boolean_and exec_empty) integer_sub)) integer_min exec_when (tagged_500 integer_dup_items in3 integer_yankdup integer_empty exec_eq) boolean_not) (integer_lte boolean_flush boolean_invert_second_then_and exec_if (integer_stackdepth) () exec_do*count () in1) (exec_swap (boolean_invert_first_then_and in4 boolean_or) (exec_s (in2 integer_min in4) (boolean_or exec_s (boolean_empty integer_min print_integer tag_exec_521 (exec_do*range () boolean_dup_items)) (exec_do*times (boolean_frominteger exec_swap () () integer_empty integer_flush exec_swap () () exec_when (exec_k (exec_do*times ()) ()))) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 92

step: 5000
program: (exec_dup_times (boolean_frominteger) boolean_swap boolean_swap integer_rot integer_max boolean_not exec_s_when_autoconstructing (exec_dup_times (exec_when (integer_fromboolean integer_eq tagged_467 exec_stackdepth exec_k () (tagged_917 boolean_and exec_empty) integer_sub)) integer_min exec_when (tagged_500 integer_dup_items in3 integer_yankdup integer_empty exec_eq) boolean_not) (integer_lte boolean_flush boolean_invert_second_then_and exec_if (integer_stackdepth) () exec_do*count () in1) (exec_swap (boolean_invert_first_then_and in4 boolean_or) (exec_s (in2 integer_min in4) (boolean_or exec_s (boolean_empty integer_min print_integer tag_exec_521 (exec_do*range () boolean_dup_items)) (exec_do*times (boolean_frominteger exec_swap () () integer_empty integer_flush exec_swap () () exec_when (exec_k (exec_do*times ()) ()))) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 92

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 223
Test mean error for best: 0.22300
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 1
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 1
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 1
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 1
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 1
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 1
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 1
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 1
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 1
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 1
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 1
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 36                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 71                  | Program output: 71                 
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 68                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 38                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 21                 
Correct output: 41                  | Program output: 41                 
Correct output: 12                  | Program output: 21                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 34                  | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -63                
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: -16                 | Program output: -16                
Correct output: -55                 | Program output: -10                
Correct output: -55                 | Program output: -55                
Correct output: -76                 | Program output: -76                
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -90                
Correct output: -39                 | Program output: -39                
Correct output: -79                 | Program output: -52                
Correct output: -72                 | Program output: -72                
Correct output: -85                 | Program output: -58                
Correct output: -91                 | Program output: -91                
Correct output: -58                 | Program output: -58                
Correct output: 34                  | Program output: 34                 
Correct output: -6                  | Program output: -6                 
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: 53                 
Correct output: -91                 | Program output: -4                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: -25                
Correct output: -92                 | Program output: -92                
Correct output: -63                 | Program output: -63                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -40                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -91                 | Program output: -75                
Correct output: -84                 | Program output: -84                
Correct output: -54                 | Program output: -54                
Correct output: -36                 | Program output: -36                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: -55                
Correct output: -36                 | Program output: 19                 
Correct output: -14                 | Program output: -14                
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: -15                
Correct output: 23                  | Program output: 23                 
;;******************************
